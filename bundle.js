/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={282:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"/* 버튼 스피너 애니메이션 */\r\n@-webkit-keyframes spinner-button {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n@keyframes spinner-button {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n/* 사이드 버튼 애니메이션 */\r\n@-webkit-keyframes appear {\r\n  from {\r\n    opacity: 0.01;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes appear {\r\n  0% {\r\n    opacity: 0.01;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}","",{version:3,sources:["webpack://./src/css/animation.css"],names:[],mappings:"AAAA,iBAAiB;AACjB;EACE;IACE,+BAA+B;IAC/B,uBAAuB;EACzB;EACA;IACE,iCAAiC;IACjC,yBAAyB;EAC3B;AACF;AACA;EACE;IACE,+BAA+B;IAC/B,uBAAuB;EACzB;EACA;IACE,iCAAiC;IACjC,yBAAyB;EAC3B;AACF;;AAEA,iBAAiB;AACjB;EACE;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;AACF;AACA;EACE;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;AACF",sourcesContent:["/* 버튼 스피너 애니메이션 */\r\n@-webkit-keyframes spinner-button {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n@keyframes spinner-button {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n/* 사이드 버튼 애니메이션 */\r\n@-webkit-keyframes appear {\r\n  from {\r\n    opacity: 0.01;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes appear {\r\n  0% {\r\n    opacity: 0.01;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}"],sourceRoot:""}]);const s=a},421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,":root {\r\n  --facebook-color: #3f62a9;\r\n  --naver-color: #00bd39;\r\n  --kakao-color: #eed700;\r\n\r\n  --light-blue: #0095f6;\r\n  --heart-color: #ed4956;\r\n}\r\n\r\n/* 임시 부여 */\r\n#root {\r\n\r\n}","",{version:3,sources:["webpack://./src/css/common.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,sBAAsB;EACtB,sBAAsB;;EAEtB,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA,UAAU;AACV;;AAEA",sourcesContent:[":root {\r\n  --facebook-color: #3f62a9;\r\n  --naver-color: #00bd39;\r\n  --kakao-color: #eed700;\r\n\r\n  --light-blue: #0095f6;\r\n  --heart-color: #ed4956;\r\n}\r\n\r\n/* 임시 부여 */\r\n#root {\r\n\r\n}"],sourceRoot:""}]);const s=a},538:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  margin: 0;\r\n}\r\nul {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nli {\r\n  list-style: none;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: black;\r\n}\r\na:hover {\r\n  text-decoration: none;\r\n}\r\ninput:focus {\r\n  outline: none;\r\n}\r\ninput:disabled {\r\n  color: black;\r\n}\r\nselect:focus {\r\n  outline: none;\r\n}\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin: 0;\r\n}\r\nhr {\r\n  color: black;\r\n  background-color: black;\r\n  width: 100%;\r\n}\r\npre {\r\n  white-space: pre-line;\r\n  margin: 0;\r\n}\r\nbutton {\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\np {\r\n  margin: 0;\r\n}\r\nfigure {\r\n  margin: 0;\r\n}","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,YAAY;AACd;AACA;EACE,qBAAqB;AACvB;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;AACA;;;;;;EAME,SAAS;AACX;AACA;EACE,YAAY;EACZ,uBAAuB;EACvB,WAAW;AACb;AACA;EACE,qBAAqB;EACrB,SAAS;AACX;AACA;EACE,YAAY;EACZ,6BAA6B;EAC7B,eAAe;EACf,UAAU;AACZ;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;AACX",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  margin: 0;\r\n}\r\nul {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nli {\r\n  list-style: none;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: black;\r\n}\r\na:hover {\r\n  text-decoration: none;\r\n}\r\ninput:focus {\r\n  outline: none;\r\n}\r\ninput:disabled {\r\n  color: black;\r\n}\r\nselect:focus {\r\n  outline: none;\r\n}\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin: 0;\r\n}\r\nhr {\r\n  color: black;\r\n  background-color: black;\r\n  width: 100%;\r\n}\r\npre {\r\n  white-space: pre-line;\r\n  margin: 0;\r\n}\r\nbutton {\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\np {\r\n  margin: 0;\r\n}\r\nfigure {\r\n  margin: 0;\r\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||s&&s[y])){var g=d(n,y);try{l(t,y,g)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case s:case a:case p:return e;default:switch(e=e&&e.$$typeof){case l:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function E(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=l,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||S(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return S(e)===l},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===v},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===s},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===s||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===l||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},296:(e,t,n)=>{"use strict";e.exports=n(103)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,u=o(e),l=1;l<arguments.length;l++){for(var c in a=Object(arguments[l]))n.call(a,c)&&(u[c]=a[c]);if(t){s=t(a);for(var f=0;f<s.length;f++)r.call(a,s[f])&&(u[s[f]]=a[s[f]])}}return u}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,u={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,k=60106,A=60107,C=60108,x=60114,T=60109,_=60110,P=60112,R=60113,O=60120,M=60115,L=60116,N=60121,I=60128,V=60129,D=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),k=F("react.portal"),A=F("react.fragment"),C=F("react.strict_mode"),x=F("react.profiler"),T=F("react.provider"),_=F("react.context"),P=F("react.forward_ref"),R=F("react.suspense"),O=F("react.suspense_list"),M=F("react.memo"),L=F("react.lazy"),N=F("react.block"),F("react.scope"),I=F("react.opaque.id"),V=F("react.debug_trace_mode"),D=F("react.offscreen"),j=F("react.legacy_hidden")}var U,z="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function q(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var $=!1;function H(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?q(e):""}function W(e){switch(e.tag){case 5:return q(e.type);case 16:return q("Lazy");case 13:return q("Suspense");case 19:return q("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case k:return"Portal";case x:return"Profiler";case C:return"StrictMode";case R:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return Q(e.type);case N:return Q(e._render);case L:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Z(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=Z(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Z(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function le(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Te=null,_e=null;function Pe(e){if(e=no(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),xe(e.stateNode,e.type,t))}}function Re(e){Te?_e?_e.push(e):_e=[e]:Te=e}function Oe(){if(Te){var e=Te,t=_e;if(_e=Te=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Me(e,t){return e(t)}function Le(e,t,n,r,o){return e(t,n,r,o)}function Ne(){}var Ie=Me,Ve=!1,De=!1;function je(){null===Te&&null===_e||(Ne(),Oe())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ue=!1;if(f)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(me){Ue=!1}function Be(e,t,n,r,o,i,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var qe=!1,$e=null,He=!1,We=null,Qe={onError:function(e){qe=!0,$e=e}};function Ke(e,t,n,r,o,i,a,s,u){qe=!1,$e=null,Be.apply(Qe,arguments)}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Ze(e)!==e)throw Error(a(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s){for(u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,ut=null,lt=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==st&&yt(st)&&(st=null),null!==ut&&yt(ut)&&(ut=null),lt.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==st&&wt(st,e),null!==ut&&wt(ut,e),lt.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},At={},Ct={};function xt(e){if(At[e])return At[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return At[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Tt=xt("animationend"),_t=xt("animationiteration"),Pt=xt("animationstart"),Rt=xt("transitionend"),Ot=new Map,Mt=new Map,Lt=["abort","abort",Tt,"animationEnd",_t,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Rt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Mt.set(r,t),Ot.set(r,o),l(o,[r])}}(0,i.unstable_now)();var It=8;function Vt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=It=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=Vt(u),o=It):0!=(s&=i)&&(r=Vt(s),o=It)}else 0!=(i=n&~a)?(r=Vt(i),o=It):0!==s&&(r=Vt(s),o=It);if(0===r)return 0;if(r=n&((0>(r=31-qt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Vt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-qt(t)),r|=e[n],t&=~o;return r}function jt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ut(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-qt(t)]=n}var qt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Ht|0)|0},$t=Math.log,Ht=Math.LN2,Wt=i.unstable_UserBlockingPriority,Qt=i.unstable_runWithPriority,Kt=!0;function Zt(e,t,n,r){Ve||Ne();var o=Gt,i=Ve;Ve=!0;try{Le(o,e,t,n,r)}finally{(Ve=i)||je()}}function Yt(e,t,n,r){Qt(Wt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Xt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return lt.set(i,mt(lt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=Ce(r);if(null!==(o=to(o))){var i=Ze(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ye(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,ln,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=o({},fn,{view:0,detail:0}),hn=sn(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),vn=sn(mn),yn=sn(o({},mn,{dataTransfer:0})),gn=sn(o({},pn,{relatedTarget:0})),bn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Sn=sn(wn),En=sn(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Tn(){return xn}var _n=o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=sn(_n),Rn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tn})),Mn=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=sn(Ln),In=[9,13,27,32],Vn=f&&"CompositionEvent"in window,Dn=null;f&&"documentMode"in document&&(Dn=document.documentMode);var jn=f&&"TextEvent"in window&&!Dn,Fn=f&&(!Vn||Dn&&8<Dn&&11>=Dn),Un=String.fromCharCode(32),zn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Qn(e,t,n,r){Re(r),0<(t=Vr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Zn=null;function Yn(e){_r(e,0)}function Gn(e){if(G(ro(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Kn&&(Kn.detachEvent("onpropertychange",or),Zn=Kn=null)}function or(e){if("value"===e.propertyName&&Gn(Zn)){var t=[];if(Qn(t,Zn,e,Ce(e)),e=Yn,Ve)e(t);else{Ve=!0;try{Me(e,t)}finally{Ve=!1,je()}}}}function ir(e,t,n){"focusin"===e?(rr(),Zn=n,(Kn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Zn)}function sr(e,t){if("click"===e)return Gn(t)}function ur(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!lr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yr=f&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,wr=null,Sr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Sr||null==gr||gr!==X(r)||(r="selectionStart"in(r=gr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Vr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(Lt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ar=0;Ar<kr.length;Ar++)Mt.set(kr[Ar],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Cr));function Tr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,u,l){if(Ke.apply(this,arguments),qe){if(!qe)throw Error(a(198));var c=$e;qe=!1,$e=null,He||(He=!0,We=c)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],u=s.instance,l=s.currentTarget;if(s=s.listener,u!==i&&o.isPropagationStopped())break e;Tr(o,s,l),i=u}else for(a=0;a<r.length;a++){if(u=(s=r[a]).instance,l=s.currentTarget,s=s.listener,u!==i&&o.isPropagationStopped())break e;Tr(o,s,l),i=u}}}if(He)throw e=We,He=!1,We=null,e}function Pr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Lr(t,e,2,!1),n.add(r))}var Rr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Rr]||(e[Rr]=!0,s.forEach((function(t){xr.has(t)||Mr(t,!1,e,null),Mr(t,!0,e,null)})))}function Mr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),Lr(i,e,o,t),a.add(s))}function Lr(e,t,n,r){var o=Mt.get(t);switch(void 0===o?2:o){case 0:o=Zt;break;case 1:o=Yt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{Ie(e,t,n)}finally{De=!1,je()}}((function(){var r=i,o=Ce(n),a=[];e:{var s=Ot.get(e);if(void 0!==s){var u=dn,l=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Pn;break;case"focusin":l="focus",u=gn;break;case"focusout":l="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Tt:case _t:case Pt:u=bn;break;case Rt:u=Mn;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=Sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Rn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Fe(h,d))&&c.push(Ir(h,m,p))),f)break;h=h.return}0<c.length&&(s=new u(s,l,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(l=n.relatedTarget||n.fromElement)||!to(l)&&!l[Jr])&&(u||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(l=(l=n.relatedTarget||n.toElement)?to(l):null)&&(l!==(f=Ze(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(u=null,l=r),u!==l)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Rn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?s:ro(u),p=null==l?s:ro(l),(s=new c(m,h+"leave",u,n,o)).target=f,s.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",l,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&l)e:{for(d=l,h=0,p=c=u;p;p=Dr(p))h++;for(p=0,m=d;m;m=Dr(m))p++;for(;0<h-p;)c=Dr(c),h--;for(;0<p-h;)d=Dr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Dr(c),d=Dr(d)}c=null}else c=null;null!==u&&jr(a,s,u,c,!1),null!==l&&null!==f&&jr(a,f,l,c,!0)}if("select"===(u=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var v=Xn;else if(Wn(s))if(Jn)v=ur;else{v=ar;var y=ir}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=sr);switch(v&&(v=v(e,r))?Qn(a,v,n,o):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&oe(s,"number",s.value)),y=r?ro(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(gr=y,br=r,wr=null);break;case"focusout":wr=br=gr=null;break;case"mousedown":Sr=!0;break;case"contextmenu":case"mouseup":case"dragend":Sr=!1,Er(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":Er(a,n,o)}var g;if(Vn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,$n=!0)),0<(y=Vr(r,b)).length&&(b=new En(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=qn(n)))&&(b.data=g))),(g=jn?function(e,t){switch(e){case"compositionend":return qn(t);case"keypress":return 32!==t.which?null:(zn=!0,Un);case"textInput":return(e=t.data)===Un&&zn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Vn&&Bn(e,t)?(e=nn(),tn=en=Jt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}_r(a,t)}))}function Ir(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Fe(e,n))&&r.unshift(Ir(e,i,o)),null!=(i=Fe(e,t))&&r.push(Ir(e,i,o))),e=e.return}return r}function Dr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,u=s.alternate,l=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==l&&(s=l,o?null!=(u=Fe(n,i))&&a.unshift(Ir(n,u,s)):o||null!=(u=Fe(n,i))&&a.push(Ir(n,u,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Fr(){}var Ur=null,zr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Wr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Kr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Zr=0,Yr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Yr,Xr="__reactProps$"+Yr,Jr="__reactContainer$"+Yr,eo="__reactEvents$"+Yr;function to(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Kr(e);null!==e;){if(n=e[Gr])return n;e=Kr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Gr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Xr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function uo(e){return{current:e}}function lo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){so++,ao[so]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function yo(e){return null!=e.childContextTypes}function go(){lo(ho),lo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(a(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Q(t)||"Unknown",i));return o({},n,r)}function So(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,lo(ho),lo(po),co(po,e)):lo(ho),co(ho,n)}var ko=null,Ao=null,Co=i.unstable_runWithPriority,xo=i.unstable_scheduleCallback,To=i.unstable_cancelCallback,_o=i.unstable_shouldYield,Po=i.unstable_requestPaint,Ro=i.unstable_now,Oo=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,Lo=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Io=i.unstable_LowPriority,Vo=i.unstable_IdlePriority,Do={},jo=void 0!==Po?Po:function(){},Fo=null,Uo=null,zo=!1,Bo=Ro(),qo=1e4>Bo?Ro:function(){return Ro()-Bo};function $o(){switch(Oo()){case Mo:return 99;case Lo:return 98;case No:return 97;case Io:return 96;case Vo:return 95;default:throw Error(a(332))}}function Ho(e){switch(e){case 99:return Mo;case 98:return Lo;case 97:return No;case 96:return Io;case 95:return Vo;default:throw Error(a(332))}}function Wo(e,t){return e=Ho(e),Co(e,t)}function Qo(e,t,n){return e=Ho(e),xo(e,t,n)}function Ko(){if(null!==Uo){var e=Uo;Uo=null,To(e)}Zo()}function Zo(){if(!zo&&null!==Fo){zo=!0;var e=0;try{var t=Fo;Wo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fo=null}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),xo(Mo,Ko),t}finally{zo=!1}}}var Yo=S.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=uo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Xo.current;lo(Xo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Va=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var si=!1;function ui(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,r){var i=e.updateQueue;si=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var l=u,c=l.next;l.next=null,null===s?a=c:s.next=c,s=l;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=l)}}if(null!==a){for(d=i.baseState,s=0,f=c=l=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:si=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,l=d):f=f.next=p,s|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=f,js|=s,e.lanes=s,e.memoizedState=d}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var yi={isMounted:function(e){return!!(e=e._reactInternals)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=lu(),o=cu(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=lu(),o=cu(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=lu(),r=cu(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),fi(e,o),fu(e,r,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,i))}function bi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=yo(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=yi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&yi.enqueueReplaceState(t,t.state,null)}function Si(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ui(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=yo(t)?mo:po.current,o.context=vo(e,i)),pi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&yi.enqueueReplaceState(o,o.state,null),pi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ei=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ai(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ci(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=qu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=$u(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ku(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=$u(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case k:return(t=Ku(t,e.mode,n)).return=e,t}if(Ei(t)||B(t))return(t=Hu(t,e.mode,n,null)).return=e,t;Ai(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===A?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(Ei(n)||B(n))return null!==o?null:f(e,t,n,r,null);Ai(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===A?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ei(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);Ai(t,r)}return null}function m(o,a,s,u){for(var l=null,c=null,f=a,m=a=0,v=null;null!==f&&m<s.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,s[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?l=y:c.sibling=y,c=y,f=v}if(m===s.length)return n(o,f),l;if(null===f){for(;m<s.length;m++)null!==(f=d(o,s[m],u))&&(a=i(f,a,m),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(o,f);m<s.length;m++)null!==(v=h(f,o,m,s[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?l=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),l}function v(o,s,u,l){var c=B(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=s,v=s=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,l);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,l))&&(s=i(g,s,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),s=i(g,s,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===A&&null===i.key;l&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case E:e:{for(c=i.key,l=r;null!==l;){if(l.key===c){if(7===l.tag){if(i.type===A){n(e,l.sibling),(r=o(l,i.props.children)).return=e,e=r;break e}}else if(l.elementType===i.type){n(e,l.sibling),(r=o(l,i.props)).ref=ki(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===A?((r=Hu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=$u(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return s(e);case k:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ku(i,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Qu(i,e.mode,u)).return=e,e=r),s(e);if(Ei(i))return m(e,r,i,u);if(B(i))return v(e,r,i,u);if(c&&Ai(e,i),void 0===i&&!l)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Q(e.type)||"Component"))}return n(e,r)}}var xi=Ci(!0),Ti=Ci(!1),_i={},Pi=uo(_i),Ri=uo(_i),Oi=uo(_i);function Mi(e){if(e===_i)throw Error(a(174));return e}function Li(e,t){switch(co(Oi,t),co(Ri,e),co(Pi,_i),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Pi),co(Pi,t)}function Ni(){lo(Pi),lo(Ri),lo(Oi)}function Ii(e){Mi(Oi.current);var t=Mi(Pi.current),n=pe(t,e.type);t!==n&&(co(Ri,e),co(Pi,n))}function Vi(e){Ri.current===e&&(lo(Pi),lo(Ri))}var Di=uo(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Fi=null,Ui=null,zi=!1;function Bi(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $i(e){if(zi){var t=Ui;if(t){var n=t;if(!qi(e,t)){if(!(t=Qr(n.nextSibling))||!qi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Fi=e);Bi(Fi,n)}Fi=e,Ui=Qr(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Fi=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fi=e}function Wi(e){if(e!==Fi)return!1;if(!zi)return Hi(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qr(t,e.memoizedProps))for(t=Ui;t;)Bi(e,t),t=Qr(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ui=Qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ui=null}}else Ui=Fi?Qr(e.stateNode.nextSibling):null;return!0}function Qi(){Ui=Fi=null,zi=!1}var Ki=[];function Zi(){for(var e=0;e<Ki.length;e++)Ki[e]._workInProgressVersionPrimary=null;Ki.length=0}var Yi=S.ReactCurrentDispatcher,Gi=S.ReactCurrentBatchConfig,Xi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Xi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Yi.current=null===e||null===e.memoizedState?Ma:La,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Yi.current=Na,e=n(r,o)}while(ra)}if(Yi.current=Oa,t=null!==ea&&null!==ea.next,Xi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function ua(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function la(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=s=i=null,l=o;do{var c=l.lane;if((Xi&c)===c)null!==u&&(u=u.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),r=l.eagerReducer===e?l.eagerState:e(r,l.action);else{var f={lane:c,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=f,i=r):u=u.next=f,Ji.lanes|=c,js|=c}l=l.next}while(null!==l&&l!==o);null===u?i=r:u.next=s,lr(r,t.memoizedState)||(Va=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fa(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);lr(i,t.memoizedState)||(Va=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function da(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xi&e)===e)&&(t._workInProgressVersionPrimary=r,Ki.push(t))),e)return n(t._source);throw Ki.push(t),Error(a(350))}function pa(e,t,n,r){var o=Rs;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),u=Yi.current,l=u.useState((function(){return da(o,t,n)})),c=l[1],f=l[0];l=ta;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ji;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!lr(s,e)){e=n(t._source),lr(f,e)||(c(e),e=cu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-qt(a),l=1<<u;r[u]|=e,a&=~l}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),lr(h,n)&&lr(m,t)&&lr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:f}).dispatch=c=Ra.bind(null,Ji,e),l.queue=e,l.baseQueue=null,f=da(o,t,n),l.memoizedState=l.baseState=f),f}function ha(e,t,n){return pa(ua(),e,t,n)}function ma(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Ra.bind(null,Ji,e),[t.memoizedState,e]}function va(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ya(e){return e={current:e},sa().memoizedState=e}function ga(){return ua().memoizedState}function ba(e,t,n,r){var o=sa();Ji.flags|=e,o.memoizedState=va(1|t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=ua();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void va(t,n,i,r)}Ji.flags|=e,o.memoizedState=va(1|t,n,i,r)}function Sa(e,t){return ba(516,4,e,t)}function Ea(e,t){return wa(516,4,e,t)}function ka(e,t){return wa(4,2,e,t)}function Aa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,Aa.bind(null,t,e),n)}function xa(){}function Ta(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _a(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pa(e,t){var n=$o();Wo(98>n?98:n,(function(){e(!0)})),Wo(97<n?97:n,(function(){var n=Gi.transition;Gi.transition=1;try{e(!1),t()}finally{Gi.transition=n}}))}function Ra(e,t,n){var r=lu(),o=cu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,u=a(s,n);if(i.eagerReducer=a,i.eagerState=u,lr(u,s))return}catch(e){}fu(e,o,r)}}var Oa={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Ma={readContext:ai,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:Sa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Aa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ra.bind(null,Ji,e),[r.memoizedState,e]},useRef:ya,useState:ma,useDebugValue:xa,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return Sa((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ya(e=Pa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Zr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,va(5,(function(){n("r:"+(Zr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Zr++).toString(36)),t},unstable_isNewReconciler:!1},La={readContext:ai,useCallback:Ta,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:ka,useMemo:_a,useReducer:ca,useRef:ga,useState:function(){return ca(la)},useDebugValue:xa,useDeferredValue:function(e){var t=ca(la),n=t[0],r=t[1];return Ea((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ca(la)[0];return[ga().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(la)[0]},unstable_isNewReconciler:!1},Na={readContext:ai,useCallback:Ta,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:ka,useMemo:_a,useReducer:fa,useRef:ga,useState:function(){return fa(la)},useDebugValue:xa,useDeferredValue:function(e){var t=fa(la),n=t[0],r=t[1];return Ea((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=fa(la)[0];return[ga().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return fa(la)[0]},unstable_isNewReconciler:!1},Ia=S.ReactCurrentOwner,Va=!1;function Da(e,t,n,r){t.child=null===e?Ti(t,null,n,r):xi(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Va?(t.flags|=1,Da(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function Fa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$u(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ua(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?ns(e,t,i):(t.flags|=1,(e=qu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ua(e,t,n,r,o,i){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Va=!1,0==(i&o))return t.lanes=e.lanes,ns(e,t,i);0!=(16384&e.flags)&&(Va=!0)}return qa(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Da(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qa(e,t,n,r,o){var i=yo(n)?mo:po.current;return i=vo(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Va?(t.flags|=1,Da(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function $a(e,t,n,r,o){if(yo(n)){var i=!0;So(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),Si(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=n.contextType;l="object"==typeof l&&null!==l?ai(l):vo(t,l=yo(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&wi(t,a,r,l),si=!1;var d=t.memoizedState;a.state=d,pi(t,r,a,o),u=t.memoizedState,s!==r||d!==u||ho.current||si?("function"==typeof c&&(vi(t,n,c,r),u=t.memoizedState),(s=si||gi(t,n,s,r,d,u,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,li(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:Go(t.type,s),a.props=l,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ai(u):vo(t,u=yo(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==u)&&wi(t,a,r,u),si=!1,d=t.memoizedState,a.state=d,pi(t,r,a,o);var h=t.memoizedState;s!==f||d!==h||ho.current||si?("function"==typeof p&&(vi(t,n,p,r),h=t.memoizedState),(l=si||gi(t,n,l,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,i,o)}function Ha(e,t,n,r,o,i){Ba(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&Eo(t,n,!1),ns(e,t,i);r=t.stateNode,Ia.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=xi(t,e.child,null,i),t.child=xi(t,null,s,i)):Da(e,t,s,i),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Wa(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Li(e,t.containerInfo)}var Qa,Ka,Za,Ya={dehydrated:null,retryLane:0};function Ga(e,t,n){var r,o=t.pendingProps,i=Di.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Di,1&i),null===e?(void 0!==o.fallback&&$i(t),e=o.children,i=o.fallback,a?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,t.lanes=33554432,e):((n=Wu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=qu(a,s),null!==e?r=qu(e,r):(r=Hu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ya,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=qu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Wu(t,o,0,null),n=Hu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function es(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ts(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Da(e,t,r.children,n),0!=(2&(r=Di.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Di,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,i,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=qu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return yo(t.type)&&go(),null;case 3:return Ni(),lo(ho),lo(po),Zi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Wi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Vi(t);var i=Mi(Oi.current);if(n=t.type,null!==e&&null!=t.stateNode)Ka(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Mi(Pi.current),Wi(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Gr]=t,r[Xr]=s,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Cr.length;e++)Pr(Cr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,s),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Pr("invalid",r);break;case"textarea":ue(r,s),Pr("invalid",r)}for(var l in ke(n,s),e=null,s)s.hasOwnProperty(l)&&(i=s[l],"children"===l?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(l)&&null!=i&&"onScroll"===l&&Pr("scroll",r));switch(n){case"input":Y(r),re(r,s,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Fr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Gr]=t,e[Xr]=r,Qa(e,t),t.stateNode=e,l=Ae(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),i=r;break;case"iframe":case"object":case"embed":Pr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Cr.length;i++)Pr(Cr[i],e);i=r;break;case"source":Pr("error",e),i=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),i=r;break;case"details":Pr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Pr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),i=se(e,r),Pr("invalid",e);break;default:i=r}ke(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?Se(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Pr("scroll",e):null!=f&&w(e,s,f,l))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Fr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Za(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Mi(Oi.current),Mi(Pi.current),Wi(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return lo(Di),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Wi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Di.current)?0===Is&&(Is=3):(0!==Is&&3!==Is||(Is=4),null===Rs||0==(134217727&js)&&0==(134217727&Fs)||mu(Rs,Ms))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(lo(Di),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(l=r.rendering))if(s)rs(r,!1);else{if(0!==Is||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(l=ji(e))){for(t.flags|=64,rs(r,!1),null!==(s=l.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Di,1&Di.current|2),t.child}e=e.sibling}null!==r.tail&&qo()>qs&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=ji(l))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qo()-r.renderingStartTime>qs&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qo(),n.sibling=null,t=Di.current,co(Di,s?1&t|2:1&t),n):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function is(e){switch(e.tag){case 1:yo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),lo(ho),lo(po),Zi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Vi(e),null;case 13:return lo(Di),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(Di),null;case 4:return Ni(),null;case 10:return ri(e),null;case 23:case 24:return wu(),null;default:return null}}function as(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ka=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Mi(Pi.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Fr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var l=i[f];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(l=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==l&&(null!=c||null!=l))if("style"===f)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Pr("scroll",e),s||l===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},Za=function(e,t,n,r){n!==r&&(t.flags|=4)};var us="function"==typeof WeakMap?WeakMap:Map;function ls(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Qs||(Qs=!0,Ks=r),ss(0,t)},n}function cs(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ss(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Zs?Zs=new Set([this]):Zs.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fs="function"==typeof WeakSet?WeakSet:Set;function ds(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Wr(t.stateNode.containerInfo))}throw Error(a(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),Lu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))))}throw Error(a(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vs(e,t){if(Ao&&"function"==typeof Ao.onCommitFiberUnmount)try{Ao.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){Du(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ds(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:ds(t);break;case 4:Es(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ws(e,n,t):Ss(e,n,t)}function ws(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Fr));else if(4!==r&&null!==(e=e.child))for(ws(e,t,n),e=e.sibling;null!==e;)ws(e,t,n),e=e.sibling}function Ss(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Ss(e,t,n),e=e.sibling;null!==e;)Ss(e,t,n),e=e.sibling}function Es(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,u=o,l=u;;)if(vs(s,l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===u)break e;for(;null===l.sibling;){if(null===l.return||l.return===u)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}r?(s=n,u=o.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function ks(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ae(e,o),t=Ae(e,r),o=0;o<i.length;o+=2){var s=i[o],u=i[o+1];"style"===s?Se(n,u):"dangerouslySetInnerHTML"===s?ve(n,u):"children"===s?ye(n,u):w(n,s,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 13:return null!==t.memoizedState&&(Bs=qo(),ms(t.child,!0)),void As(t);case 19:return void As(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(a(163))}function As(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fs),t.forEach((function(t){var r=Fu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cs(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xs=Math.ceil,Ts=S.ReactCurrentDispatcher,_s=S.ReactCurrentOwner,Ps=0,Rs=null,Os=null,Ms=0,Ls=0,Ns=uo(0),Is=0,Vs=null,Ds=0,js=0,Fs=0,Us=0,zs=null,Bs=0,qs=1/0;function $s(){qs=qo()+500}var Hs,Ws=null,Qs=!1,Ks=null,Zs=null,Ys=!1,Gs=null,Xs=90,Js=[],eu=[],tu=null,nu=0,ru=null,ou=-1,iu=0,au=0,su=null,uu=!1;function lu(){return 0!=(48&Ps)?qo():-1!==ou?ou:ou=qo()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===$o()?1:2;if(0===iu&&(iu=Ds),0!==Yo.transition){0!==au&&(au=null!==zs?zs.pendingLanes:0),e=iu;var t=4186112&~au;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=$o(),e=Ft(0!=(4&Ps)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),iu)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(a(185));if(null===(e=du(e,t)))return null;Bt(e,t,n),e===Rs&&(Fs|=t,4===Is&&mu(e,Ms));var r=$o();1===t?0!=(8&Ps)&&0==(48&Ps)?vu(e):(pu(e,n),0===Ps&&($s(),Ko())):(0==(4&Ps)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),zs=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var u=31-qt(s),l=1<<u,c=i[u];if(-1===c){if(0==(l&r)||0!=(l&o)){c=t,Vt(l);var f=It;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=l);s&=~l}if(r=Dt(e,e===Rs?Ms:0),t=It,0===r)null!==n&&(n!==Do&&To(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Do&&To(n)}15===t?(n=vu.bind(null,e),null===Fo?(Fo=[n],Uo=xo(Mo,Zo)):Fo.push(n),n=Do):14===t?n=Qo(99,vu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Qo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,au=iu=0,0!=(48&Ps))throw Error(a(327));var t=e.callbackNode;if(Mu()&&e.callbackNode!==t)return null;var n=Dt(e,e===Rs?Ms:0);if(0===n)return null;var r=n,o=Ps;Ps|=16;var i=ku();for(Rs===e&&Ms===r||($s(),Su(e,r));;)try{xu();break}catch(t){Eu(e,t)}if(ni(),Ts.current=i,Ps=o,null!==Os?r=0:(Rs=null,Ms=0,r=Is),0!=(Ds&Fs))Su(e,0);else if(0!==r){if(2===r&&(Ps|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(n=jt(e))&&(r=Au(e,n))),1===r)throw t=Vs,Su(e,0),mu(e,n),pu(e,qo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Pu(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=Bs+500-qo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){lu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$r(Pu.bind(null,e),r);break}Pu(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-qt(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=qo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xs(n/1960))-n)){e.timeoutHandle=$r(Pu.bind(null,e),n);break}Pu(e);break;default:throw Error(a(329))}}return pu(e,qo()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Us,t&=~Fs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-qt(t),r=1<<n;e[n]=-1,t&=~r}}function vu(e){if(0!=(48&Ps))throw Error(a(327));if(Mu(),e===Rs&&0!=(e.expiredLanes&Ms)){var t=Ms,n=Au(e,t);0!=(Ds&Fs)&&(n=Au(e,t=Dt(e,t)))}else n=Au(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Ps|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(t=jt(e))&&(n=Au(e,t))),1===n)throw n=Vs,Su(e,0),mu(e,t),pu(e,qo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,qo()),null}function yu(e,t){var n=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=n)&&($s(),Ko())}}function gu(e,t){var n=Ps;Ps&=-2,Ps|=8;try{return e(t)}finally{0===(Ps=n)&&($s(),Ko())}}function bu(e,t){co(Ns,Ls),Ls|=t,Ds|=t}function wu(){Ls=Ns.current,lo(Ns)}function Su(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Os)for(n=Os.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ni(),lo(ho),lo(po),Zi();break;case 5:Vi(r);break;case 4:Ni();break;case 13:case 19:lo(Di);break;case 10:ri(r);break;case 23:case 24:wu()}n=n.return}Rs=e,Os=qu(e.current,null),Ms=Ls=Ds=t,Is=0,Vs=null,Us=Fs=js=0}function Eu(e,t){for(;;){var n=Os;try{if(ni(),Yi.current=Oa,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Xi=0,ta=ea=Ji=null,ra=!1,_s.current=null,null===n||null===n.return){Is=1,Vs=t,Os=null;break}e:{var i=e,a=n.return,s=n,u=t;if(t=Ms,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Di.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(l),d.updateQueue=y}else v.add(l);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var g=ci(-1,1);g.tag=2,fi(s,g)}s.lanes|=1;break e}u=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new us,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(s)){u.add(s);var w=ju.bind(null,i,l,s);l.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Is&&(Is=2),u=as(u,s),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,di(d,ls(0,i,t));break e;case 1:i=u;var S=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof S.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Zs||!Zs.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,di(d,cs(d,i,t));break e}}d=d.return}while(null!==d)}_u(n)}catch(e){t=e,Os===n&&null!==n&&(Os=n=n.return);continue}break}}function ku(){var e=Ts.current;return Ts.current=Oa,null===e?Oa:e}function Au(e,t){var n=Ps;Ps|=16;var r=ku();for(Rs===e&&Ms===t||Su(e,t);;)try{Cu();break}catch(t){Eu(e,t)}if(ni(),Ps=n,Ts.current=r,null!==Os)throw Error(a(261));return Rs=null,Ms=0,Is}function Cu(){for(;null!==Os;)Tu(Os)}function xu(){for(;null!==Os&&!_o();)Tu(Os)}function Tu(e){var t=Hs(e.alternate,e,Ls);e.memoizedProps=e.pendingProps,null===t?_u(e):Os=t,_s.current=null}function _u(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,Ls)))return void(Os=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ls)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=is(t)))return n.flags&=2047,void(Os=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Os=t);Os=t=e}while(null!==t);0===Is&&(Is=5)}function Pu(e){var t=$o();return Wo(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Mu()}while(null!==Gs);if(0!=(48&Ps))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,u=e.expirationTimes;0<i;){var l=31-qt(i),c=1<<l;o[l]=0,s[l]=-1,u[l]=-1,i&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Rs&&(Os=Rs=null,Ms=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ps,Ps|=32,_s.current=null,Ur=Kt,vr(s=mr())){if("selectionStart"in s)u={start:s.selectionStart,end:s.selectionEnd};else e:if(u=(u=s.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,l=c.focusNode,c=c.focusOffset;try{u.nodeType,l.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=s,y=null;t:for(;;){for(var g;v!==u||0!==i&&3!==v.nodeType||(d=f+i),v!==l||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===s)break t;if(y===u&&++h===i&&(d=f),y===l&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:s,selectionRange:u},Kt=!1,su=null,uu=!1,Ws=r;do{try{Ou()}catch(e){if(null===Ws)throw Error(a(330));Du(Ws,e),Ws=Ws.nextEffect}}while(null!==Ws);su=null,Ws=r;do{try{for(s=e;null!==Ws;){var b=Ws.flags;if(16&b&&ye(Ws.stateNode,""),128&b){var w=Ws.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:bs(Ws),Ws.flags&=-3;break;case 6:bs(Ws),Ws.flags&=-3,ks(Ws.alternate,Ws);break;case 1024:Ws.flags&=-1025;break;case 1028:Ws.flags&=-1025,ks(Ws.alternate,Ws);break;case 4:ks(Ws.alternate,Ws);break;case 8:Es(s,u=Ws);var E=u.alternate;ys(u),null!==E&&ys(E)}Ws=Ws.nextEffect}}catch(e){if(null===Ws)throw Error(a(330));Du(Ws,e),Ws=Ws.nextEffect}}while(null!==Ws);if(S=zr,w=mr(),b=S.focusedElem,s=S.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&vr(b)&&(w=s.start,void 0===(S=s.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),u=b.textContent.length,E=Math.min(s.start,u),s=void 0===s.end?E:Math.min(s.end,u),!S.extend&&E>s&&(u=s,s=E,E=u),u=pr(b,E),i=pr(b,s),u&&i&&(1!==S.rangeCount||S.anchorNode!==u.node||S.anchorOffset!==u.offset||S.focusNode!==i.node||S.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),S.removeAllRanges(),E>s?(S.addRange(w),S.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Kt=!!Ur,zr=Ur=null,e.current=n,Ws=r;do{try{for(b=e;null!==Ws;){var k=Ws.flags;if(36&k&&hs(b,Ws.alternate,Ws),128&k){w=void 0;var A=Ws.ref;if(null!==A){var C=Ws.stateNode;Ws.tag,w=C,"function"==typeof A?A(w):A.current=w}}Ws=Ws.nextEffect}}catch(e){if(null===Ws)throw Error(a(330));Du(Ws,e),Ws=Ws.nextEffect}}while(null!==Ws);Ws=null,jo(),Ps=o}else e.current=n;if(Ys)Ys=!1,Gs=e,Xs=t;else for(Ws=r;null!==Ws;)t=Ws.nextEffect,Ws.nextEffect=null,8&Ws.flags&&((k=Ws).sibling=null,k.stateNode=null),Ws=t;if(0===(r=e.pendingLanes)&&(Zs=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,Ao&&"function"==typeof Ao.onCommitFiberRoot)try{Ao.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,qo()),Qs)throw Qs=!1,e=Ks,Ks=null,e;return 0!=(8&Ps)||Ko(),null}function Ou(){for(;null!==Ws;){var e=Ws.alternate;uu||null===su||(0!=(8&Ws.flags)?Je(Ws,su)&&(uu=!0):13===Ws.tag&&Cs(e,Ws)&&Je(Ws,su)&&(uu=!0));var t=Ws.flags;0!=(256&t)&&ps(e,Ws),0==(512&t)||Ys||(Ys=!0,Qo(97,(function(){return Mu(),null}))),Ws=Ws.nextEffect}}function Mu(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Wo(e,Iu)}return!1}function Lu(e,t){Js.push(t,e),Ys||(Ys=!0,Qo(97,(function(){return Mu(),null})))}function Nu(e,t){eu.push(t,e),Ys||(Ys=!0,Qo(97,(function(){return Mu(),null})))}function Iu(){if(null===Gs)return!1;var e=Gs;if(Gs=null,0!=(48&Ps))throw Error(a(331));var t=Ps;Ps|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));Du(i,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));Du(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ps=t,Ko(),!0}function Vu(e,t,n){fi(e,t=ls(0,t=as(n,t),1)),t=lu(),null!==(e=du(e,1))&&(Bt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Vu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Vu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zs||!Zs.has(r))){var o=cs(n,e=as(t,e),1);if(fi(n,o),o=lu(),null!==(n=du(n,1)))Bt(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Zs||!Zs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function ju(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=lu(),e.pingedLanes|=e.suspendedLanes&n,Rs===e&&(Ms&n)===n&&(4===Is||3===Is&&(62914560&Ms)===Ms&&500>qo()-Bs?Su(e,0):Us|=n),pu(e,t)}function Fu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===$o()?1:2:(0===iu&&(iu=Ds),0===(t=Ut(62914560&~iu))&&(t=4194304))),n=lu(),null!==(e=du(e,t))&&(Bt(e,t,n),pu(e,n))}function Uu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new Uu(e,t,n,r)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qu(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $u(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Bu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case A:return Hu(n.children,o,i,t);case V:s=8,o|=16;break;case C:s=8,o|=1;break;case x:return(e=zu(12,n,t,8|o)).elementType=x,e.type=x,e.lanes=i,e;case R:return(e=zu(13,n,t,o)).type=R,e.elementType=R,e.lanes=i,e;case O:return(e=zu(19,n,t,o)).elementType=O,e.lanes=i,e;case D:return Wu(n,o,i,t);case j:return(e=zu(24,n,t,o)).elementType=j,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case _:s=9;break e;case P:s=11;break e;case M:s=14;break e;case L:s=16,r=null;break e;case N:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=zu(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Hu(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function Wu(e,t,n,r){return(e=zu(23,e,r,t)).elementType=D,e.lanes=n,e}function Qu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Ku(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var o=t.current,i=lu(),s=cu(o);e:if(n){t:{if(Ze(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(yo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var l=n.type;if(yo(l)){n=wo(n,l,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),fu(o,s,i),s}function Xu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function el(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function tl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Zu(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ui(t),e[Jr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Xu(a);s.call(e)}}Gu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Xu(a);u.call(e)}}gu((function(){Gu(t,a,e,o)}))}return Xu(a)}function ol(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(t))throw Error(a(200));return Yu(e,t,null,n)}Hs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Va=!0;else{if(0==(n&r)){switch(Va=!1,t.tag){case 3:Wa(t),Qi();break;case 5:Ii(t);break;case 1:yo(t.type)&&So(t);break;case 4:Li(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ga(e,t,n):(co(Di,1&Di.current),null!==(t=ns(e,t,n))?t.sibling:null);co(Di,1&Di.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Di,Di.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return ns(e,t,n)}Va=0!=(16384&e.flags)}else Va=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,yo(r)){var i=!0;So(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ui(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&vi(t,r,s,e),o.updater=yi,t.stateNode=o,o._reactInternals=t,Si(t,r,e,n),t=Ha(null,t,r,!0,i,n)}else t.tag=0,Da(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===M)return 14}return 2}(o),e=Go(o,e),i){case 0:t=qa(null,t,o,e,n);break e;case 1:t=$a(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=Fa(null,t,o,Go(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,qa(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Wa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),pi(t,r,null,n),(r=t.memoizedState.element)===o)Qi(),t=ns(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Ui=Qr(t.stateNode.containerInfo.firstChild),Fi=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Ki.push(i);for(n=Ti(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Da(e,t,r,n),Qi();t=t.child}return t;case 5:return Ii(t),null===e&&$i(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,qr(r,o)?s=null:null!==i&&qr(r,i)&&(t.flags|=16),Ba(e,t),Da(e,t,s,n),t.child;case 6:return null===e&&$i(t),null;case 13:return Ga(e,t,n);case 4:return Li(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xi(t,null,r,n):Da(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Da(e,t,t.pendingProps,n),t.child;case 8:case 12:return Da(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var u=t.type._context;if(co(Xo,u._currentValue),u._currentValue=i,null!==s)if(u=s.value,0==(i=lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(s.children===o.children&&!ho.current){t=ns(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var c=l.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ci(-1,n&-n)).tag=2,fi(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oi(u.return,n),l.lanes|=n;break}c=c.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Da(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,Da(e,t,r,n),t.child;case 14:return i=Go(o=t.type,t.pendingProps),Fa(e,t,o,i=Go(o.type,i),r,n);case 15:return Ua(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,yo(r)?(e=!0,So(t)):e=!1,ii(t,n),bi(t,r,o),Si(t,r,o,n),Ha(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},tl.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},tl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,lu()),el(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,lu()),el(e,67108864))},nt=function(e){if(13===e.tag){var t=lu(),n=cu(e);fu(e,n,t),el(e,n)}},rt=function(e,t){return t()},xe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Me=yu,Le=function(e,t,n,r,o){var i=Ps;Ps|=4;try{return Wo(98,e.bind(null,t,n,r,o))}finally{0===(Ps=i)&&($s(),Ko())}},Ne=function(){0==(49&Ps)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,qo())}))}Ko()}(),Mu())},Ie=function(e,t){var n=Ps;Ps|=2;try{return e(t)}finally{0===(Ps=n)&&($s(),Ko())}};var il={Events:[no,ro,oo,Re,Oe,Mu,{current:!1}]},al={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sl={bundleType:al.bundleType,version:al.version,rendererPackageName:al.rendererPackageName,rendererConfig:al.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:al.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ul=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ul.isDisabled&&ul.supportsFiber)try{ko=ul.inject(sl),Ao=ul}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=il,t.createPortal=ol,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ps;if(0!=(48&n))return e(t);Ps|=1;try{if(e)return Wo(99,e.bind(null,t))}finally{Ps=n,Ko()}},t.hydrate=function(e,t,n){if(!nl(t))throw Error(a(200));return rl(null,e,t,!0,n)},t.render=function(e,t,n){if(!nl(t))throw Error(a(200));return rl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nl(e))throw Error(a(40));return!!e._reactRootContainer&&(gu((function(){rl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=yu,t.unstable_createPortal=function(e,t){return ol(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return rl(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,r="function"==typeof Set,o="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function i(e,a){if(e===a)return!0;if(e&&a&&"object"==typeof e&&"object"==typeof a){if(e.constructor!==a.constructor)return!1;var s,u,l,c;if(Array.isArray(e)){if((s=e.length)!=a.length)return!1;for(u=s;0!=u--;)if(!i(e[u],a[u]))return!1;return!0}if(n&&e instanceof Map&&a instanceof Map){if(e.size!==a.size)return!1;for(c=e.entries();!(u=c.next()).done;)if(!a.has(u.value[0]))return!1;for(c=e.entries();!(u=c.next()).done;)if(!i(u.value[1],a.get(u.value[0])))return!1;return!0}if(r&&e instanceof Set&&a instanceof Set){if(e.size!==a.size)return!1;for(c=e.entries();!(u=c.next()).done;)if(!a.has(u.value[0]))return!1;return!0}if(o&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(a)){if((s=e.length)!=a.length)return!1;for(u=s;0!=u--;)if(e[u]!==a[u])return!1;return!0}if(e.constructor===RegExp)return e.source===a.source&&e.flags===a.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===a.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===a.toString();if((s=(l=Object.keys(e)).length)!==Object.keys(a).length)return!1;for(u=s;0!=u--;)if(!Object.prototype.hasOwnProperty.call(a,l[u]))return!1;if(t&&e instanceof Element)return!1;for(u=s;0!=u--;)if(("_owner"!==l[u]&&"__v"!==l[u]&&"__o"!==l[u]||!e.$$typeof)&&!i(e[l[u]],a[l[u]]))return!1;return!0}return e!=e&&a!=a}e.exports=function(e,t){try{return i(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},921:(e,t)=>{"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,s=60109,u=60110,l=60112,c=60113,f=60120,d=60115,p=60116,h=60121,m=60122,v=60117,y=60129,g=60131;if("function"==typeof Symbol&&Symbol.for){var b=Symbol.for;n=b("react.element"),r=b("react.portal"),o=b("react.fragment"),i=b("react.strict_mode"),a=b("react.profiler"),s=b("react.provider"),u=b("react.context"),l=b("react.forward_ref"),c=b("react.suspense"),f=b("react.suspense_list"),d=b("react.memo"),p=b("react.lazy"),h=b("react.block"),m=b("react.server.block"),v=b("react.fundamental"),y=b("react.debug_trace_mode"),g=b("react.legacy_hidden")}t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===a||e===y||e===i||e===c||e===f||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===d||e.$$typeof===s||e.$$typeof===u||e.$$typeof===l||e.$$typeof===v||e.$$typeof===h||e[0]===m)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case c:case f:return e;default:switch(e=e&&e.$$typeof){case u:case l:case p:case d:case s:return e;default:return t}}case r:return t}}}},864:(e,t,n)=>{"use strict";e.exports=n(921)},938:e=>{e.exports={ReactQueryDevtools:function(){return null},ReactQueryDevtoolsPanel:function(){return null}}},852:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var r=n(721),o=n(943),i=n(288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("visibilitychange",n,!1),window.addEventListener("focus",n,!1),function(){window.removeEventListener("visibilitychange",n),window.removeEventListener("focus",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setFocused(e):n.onFocus()}))},n.setFocused=function(e){this.focused=e,e&&this.onFocus()},n.onFocus=function(){this.listeners.forEach((function(e){e()}))},n.isFocused=function(){return"boolean"==typeof this.focused?this.focused:"undefined"==typeof document||[void 0,"visible","prerender"].includes(document.visibilityState)},t}(o.l))},747:(e,t,n)=>{"use strict";n.d(t,{Su:()=>r.S});var r=n(61),o=n(755);n.o(o,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return o.QueryClientProvider}}),n.o(o,"useQuery")&&n.d(t,{useQuery:function(){return o.useQuery}})},909:(e,t,n)=>{"use strict";n.d(t,{j:()=>o,E:()=>i});var r=console;function o(){return r}function i(e){r=e}},101:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(288),o=new(function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(e){e()},this.batchNotifyFn=function(e){e()}}var t=e.prototype;return t.batch=function(e){var t;this.transactions++;try{t=e()}finally{this.transactions--,this.transactions||this.flush()}return t},t.schedule=function(e){var t=this;this.transactions?this.queue.push(e):(0,r.A4)((function(){t.notifyFn(e)}))},t.batchCalls=function(e){var t=this;return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];t.schedule((function(){e.apply(void 0,r)}))}},t.flush=function(){var e=this,t=this.queue;this.queue=[],t.length&&(0,r.A4)((function(){e.batchNotifyFn((function(){t.forEach((function(t){e.notifyFn(t)}))}))}))},t.setNotifyFunction=function(e){this.notifyFn=e},t.setBatchNotifyFunction=function(e){this.batchNotifyFn=e},e}())},68:(e,t,n)=>{"use strict";n.d(t,{N:()=>a});var r=n(721),o=n(943),i=n(288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("online",n,!1),window.addEventListener("offline",n,!1),function(){window.removeEventListener("online",n),window.removeEventListener("offline",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setOnline(e):n.onOnline()}))},n.setOnline=function(e){this.online=e,e&&this.onOnline()},n.onOnline=function(){this.listeners.forEach((function(e){e()}))},n.isOnline=function(){return"boolean"==typeof this.online?this.online:"undefined"==typeof navigator||void 0===navigator.onLine||navigator.onLine},t}(o.l))},61:(e,t,n)=>{"use strict";n.d(t,{S:()=>y});var r=n(462),o=n(288),i=n(721),a=n(101),s=n(909),u=n(252),l=function(){function e(e){this.abortSignalConsumed=!1,this.hadObservers=!1,this.defaultOptions=e.defaultOptions,this.setOptions(e.options),this.observers=[],this.cache=e.cache,this.queryKey=e.queryKey,this.queryHash=e.queryHash,this.initialState=e.state||this.getDefaultState(this.options),this.state=this.initialState,this.meta=e.meta,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(e){var t;this.options=(0,r.Z)({},this.defaultOptions,e),this.meta=null==e?void 0:e.meta,this.cacheTime=Math.max(this.cacheTime||0,null!=(t=this.options.cacheTime)?t:3e5)},t.setDefaultOptions=function(e){this.defaultOptions=e},t.scheduleGc=function(){var e=this;this.clearGcTimeout(),(0,o.PN)(this.cacheTime)&&(this.gcTimeout=setTimeout((function(){e.optionalRemove()}),this.cacheTime))},t.clearGcTimeout=function(){clearTimeout(this.gcTimeout),this.gcTimeout=void 0},t.optionalRemove=function(){this.observers.length||(this.state.isFetching?this.hadObservers&&this.scheduleGc():this.cache.remove(this))},t.setData=function(e,t){var n,r,i=this.state.data,a=(0,o.SE)(e,i);return(null==(n=(r=this.options).isDataEqual)?void 0:n.call(r,i,a))?a=i:!1!==this.options.structuralSharing&&(a=(0,o.Q$)(i,a)),this.dispatch({data:a,type:"success",dataUpdatedAt:null==t?void 0:t.updatedAt}),a},t.setState=function(e,t){this.dispatch({type:"setState",state:e,setStateOptions:t})},t.cancel=function(e){var t,n=this.promise;return null==(t=this.retryer)||t.cancel(e),n?n.then(o.ZT).catch(o.ZT):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some((function(e){return!1!==e.options.enabled}))},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some((function(e){return e.getCurrentResult().isStale}))},t.isStaleByTime=function(e){return void 0===e&&(e=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!(0,o.Kp)(this.state.dataUpdatedAt,e)},t.onFocus=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnWindowFocus()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.onOnline=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnReconnect()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.addObserver=function(e){-1===this.observers.indexOf(e)&&(this.observers.push(e),this.hadObservers=!0,this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:e}))},t.removeObserver=function(e){-1!==this.observers.indexOf(e)&&(this.observers=this.observers.filter((function(t){return t!==e})),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable||this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:e}))},t.getObserversCount=function(){return this.observers.length},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(e,t){var n,r,i,a=this;if(this.state.isFetching)if(this.state.dataUpdatedAt&&(null==t?void 0:t.cancelRefetch))this.cancel({silent:!0});else if(this.promise){var l;return null==(l=this.retryer)||l.continueRetry(),this.promise}if(e&&this.setOptions(e),!this.options.queryFn){var c=this.observers.find((function(e){return e.options.queryFn}));c&&this.setOptions(c.options)}var f=(0,o.mc)(this.queryKey),d=(0,o.G9)(),p={queryKey:f,pageParam:void 0,meta:this.meta};Object.defineProperty(p,"signal",{enumerable:!0,get:function(){if(d)return a.abortSignalConsumed=!0,d.signal}});var h,m,v={fetchOptions:t,options:this.options,queryKey:f,state:this.state,fetchFn:function(){return a.options.queryFn?(a.abortSignalConsumed=!1,a.options.queryFn(p)):Promise.reject("Missing queryFn")},meta:this.meta};return(null==(n=this.options.behavior)?void 0:n.onFetch)&&(null==(h=this.options.behavior)||h.onFetch(v)),this.revertState=this.state,this.state.isFetching&&this.state.fetchMeta===(null==(r=v.fetchOptions)?void 0:r.meta)||this.dispatch({type:"fetch",meta:null==(m=v.fetchOptions)?void 0:m.meta}),this.retryer=new u.m4({fn:v.fetchFn,abort:null==d||null==(i=d.abort)?void 0:i.bind(d),onSuccess:function(e){a.setData(e),null==a.cache.config.onSuccess||a.cache.config.onSuccess(e,a),0===a.cacheTime&&a.optionalRemove()},onError:function(e){(0,u.DV)(e)&&e.silent||a.dispatch({type:"error",error:e}),(0,u.DV)(e)||(null==a.cache.config.onError||a.cache.config.onError(e,a),(0,s.j)().error(e)),0===a.cacheTime&&a.optionalRemove()},onFail:function(){a.dispatch({type:"failed"})},onPause:function(){a.dispatch({type:"pause"})},onContinue:function(){a.dispatch({type:"continue"})},retry:v.options.retry,retryDelay:v.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(e){var t=this;this.state=this.reducer(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onQueryUpdate(e)})),t.cache.notify({query:t,type:"queryUpdated",action:e})}))},t.getDefaultState=function(e){var t="function"==typeof e.initialData?e.initialData():e.initialData,n=void 0!==e.initialData?"function"==typeof e.initialDataUpdatedAt?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0,r=void 0!==t;return{data:t,dataUpdateCount:0,dataUpdatedAt:r?null!=n?n:Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:r?"success":"idle"}},t.reducer=function(e,t){var n,o;switch(t.type){case"failed":return(0,r.Z)({},e,{fetchFailureCount:e.fetchFailureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"fetch":return(0,r.Z)({},e,{fetchFailureCount:0,fetchMeta:null!=(n=t.meta)?n:null,isFetching:!0,isPaused:!1},!e.dataUpdatedAt&&{error:null,status:"loading"});case"success":return(0,r.Z)({},e,{data:t.data,dataUpdateCount:e.dataUpdateCount+1,dataUpdatedAt:null!=(o=t.dataUpdatedAt)?o:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var i=t.error;return(0,u.DV)(i)&&i.revert&&this.revertState?(0,r.Z)({},this.revertState):(0,r.Z)({},e,{error:i,errorUpdateCount:e.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:e.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return(0,r.Z)({},e,{isInvalidated:!0});case"setState":return(0,r.Z)({},e,t.state);default:return e}},e}(),c=n(943),f=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.queries=[],n.queriesMap={},n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r,i=t.queryKey,a=null!=(r=t.queryHash)?r:(0,o.Rm)(i,t),s=this.get(a);return s||(s=new l({cache:this,queryKey:i,queryHash:a,options:e.defaultQueryOptions(t),state:n,defaultOptions:e.getQueryDefaults(i),meta:t.meta}),this.add(s)),s},n.add=function(e){this.queriesMap[e.queryHash]||(this.queriesMap[e.queryHash]=e,this.queries.push(e),this.notify({type:"queryAdded",query:e}))},n.remove=function(e){var t=this.queriesMap[e.queryHash];t&&(e.destroy(),this.queries=this.queries.filter((function(t){return t!==e})),t===e&&delete this.queriesMap[e.queryHash],this.notify({type:"queryRemoved",query:e}))},n.clear=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(t){e.remove(t)}))}))},n.get=function(e){return this.queriesMap[e]},n.getAll=function(){return this.queries},n.find=function(e,t){var n=(0,o.I6)(e,t)[0];return void 0===n.exact&&(n.exact=!0),this.queries.find((function(e){return(0,o._x)(n,e)}))},n.findAll=function(e,t){var n=(0,o.I6)(e,t)[0];return Object.keys(n).length>0?this.queries.filter((function(e){return(0,o._x)(n,e)})):this.queries},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onFocus()}))}))},n.onOnline=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onOnline()}))}))},t}(c.l),d=function(){function e(e){this.options=(0,r.Z)({},e.defaultOptions,e.options),this.mutationId=e.mutationId,this.mutationCache=e.mutationCache,this.observers=[],this.state=e.state||{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0},this.meta=e.meta}var t=e.prototype;return t.setState=function(e){this.dispatch({type:"setState",state:e})},t.addObserver=function(e){-1===this.observers.indexOf(e)&&this.observers.push(e)},t.removeObserver=function(e){this.observers=this.observers.filter((function(t){return t!==e}))},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(o.ZT).catch(o.ZT)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var e,t=this,n="loading"===this.state.status,r=Promise.resolve();return n||(this.dispatch({type:"loading",variables:this.options.variables}),r=r.then((function(){null==t.mutationCache.config.onMutate||t.mutationCache.config.onMutate(t.state.variables,t)})).then((function(){return null==t.options.onMutate?void 0:t.options.onMutate(t.state.variables)})).then((function(e){e!==t.state.context&&t.dispatch({type:"loading",context:e,variables:t.state.variables})}))),r.then((function(){return t.executeMutation()})).then((function(n){e=n,null==t.mutationCache.config.onSuccess||t.mutationCache.config.onSuccess(e,t.state.variables,t.state.context,t)})).then((function(){return null==t.options.onSuccess?void 0:t.options.onSuccess(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(e,null,t.state.variables,t.state.context)})).then((function(){return t.dispatch({type:"success",data:e}),e})).catch((function(e){return null==t.mutationCache.config.onError||t.mutationCache.config.onError(e,t.state.variables,t.state.context,t),(0,s.j)().error(e),Promise.resolve().then((function(){return null==t.options.onError?void 0:t.options.onError(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(void 0,e,t.state.variables,t.state.context)})).then((function(){throw t.dispatch({type:"error",error:e}),e}))}))},t.executeMutation=function(){var e,t=this;return this.retryer=new u.m4({fn:function(){return t.options.mutationFn?t.options.mutationFn(t.state.variables):Promise.reject("No mutationFn found")},onFail:function(){t.dispatch({type:"failed"})},onPause:function(){t.dispatch({type:"pause"})},onContinue:function(){t.dispatch({type:"continue"})},retry:null!=(e=this.options.retry)?e:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(e){var t=this;this.state=function(e,t){switch(t.type){case"failed":return(0,r.Z)({},e,{failureCount:e.failureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"loading":return(0,r.Z)({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return(0,r.Z)({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return(0,r.Z)({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return(0,r.Z)({},e,t.state);default:return e}}(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onMutationUpdate(e)})),t.mutationCache.notify(t)}))},e}(),p=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.mutations=[],n.mutationId=0,n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r=new d({mutationCache:this,mutationId:++this.mutationId,options:e.defaultMutationOptions(t),state:n,defaultOptions:t.mutationKey?e.getMutationDefaults(t.mutationKey):void 0,meta:t.meta});return this.add(r),r},n.add=function(e){this.mutations.push(e),this.notify(e)},n.remove=function(e){this.mutations=this.mutations.filter((function(t){return t!==e})),e.cancel(),this.notify(e)},n.clear=function(){var e=this;a.V.batch((function(){e.mutations.forEach((function(t){e.remove(t)}))}))},n.getAll=function(){return this.mutations},n.find=function(e){return void 0===e.exact&&(e.exact=!0),this.mutations.find((function(t){return(0,o.X7)(e,t)}))},n.findAll=function(e){return this.mutations.filter((function(t){return(0,o.X7)(e,t)}))},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){this.resumePausedMutations()},n.onOnline=function(){this.resumePausedMutations()},n.resumePausedMutations=function(){var e=this.mutations.filter((function(e){return e.state.isPaused}));return a.V.batch((function(){return e.reduce((function(e,t){return e.then((function(){return t.continue().catch(o.ZT)}))}),Promise.resolve())}))},t}(c.l),h=n(852),m=n(68);function v(e,t){return null==e.getNextPageParam?void 0:e.getNextPageParam(t[t.length-1],t)}var y=function(){function e(e){void 0===e&&(e={}),this.queryCache=e.queryCache||new f,this.mutationCache=e.mutationCache||new p,this.defaultOptions=e.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var e=this;this.unsubscribeFocus=h.j.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onFocus(),e.queryCache.onFocus())})),this.unsubscribeOnline=m.N.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onOnline(),e.queryCache.onOnline())}))},t.unmount=function(){var e,t;null==(e=this.unsubscribeFocus)||e.call(this),null==(t=this.unsubscribeOnline)||t.call(this)},t.isFetching=function(e,t){var n=(0,o.I6)(e,t)[0];return n.fetching=!0,this.queryCache.findAll(n).length},t.isMutating=function(e){return this.mutationCache.findAll((0,r.Z)({},e,{fetching:!0})).length},t.getQueryData=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state.data},t.getQueriesData=function(e){return this.getQueryCache().findAll(e).map((function(e){return[e.queryKey,e.state.data]}))},t.setQueryData=function(e,t,n){var r=(0,o._v)(e),i=this.defaultQueryOptions(r);return this.queryCache.build(this,i).setData(t,n)},t.setQueriesData=function(e,t,n){var r=this;return a.V.batch((function(){return r.getQueryCache().findAll(e).map((function(e){var o=e.queryKey;return[o,r.setQueryData(o,t,n)]}))}))},t.getQueryState=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state},t.removeQueries=function(e,t){var n=(0,o.I6)(e,t)[0],r=this.queryCache;a.V.batch((function(){r.findAll(n).forEach((function(e){r.remove(e)}))}))},t.resetQueries=function(e,t,n){var i=this,s=(0,o.I6)(e,t,n),u=s[0],l=s[1],c=this.queryCache,f=(0,r.Z)({},u,{active:!0});return a.V.batch((function(){return c.findAll(u).forEach((function(e){e.reset()})),i.refetchQueries(f,l)}))},t.cancelQueries=function(e,t,n){var r=this,i=(0,o.I6)(e,t,n),s=i[0],u=i[1],l=void 0===u?{}:u;void 0===l.revert&&(l.revert=!0);var c=a.V.batch((function(){return r.queryCache.findAll(s).map((function(e){return e.cancel(l)}))}));return Promise.all(c).then(o.ZT).catch(o.ZT)},t.invalidateQueries=function(e,t,n){var i,s,u,l=this,c=(0,o.I6)(e,t,n),f=c[0],d=c[1],p=(0,r.Z)({},f,{active:null==(i=null!=(s=f.refetchActive)?s:f.active)||i,inactive:null!=(u=f.refetchInactive)&&u});return a.V.batch((function(){return l.queryCache.findAll(f).forEach((function(e){e.invalidate()})),l.refetchQueries(p,d)}))},t.refetchQueries=function(e,t,n){var i=this,s=(0,o.I6)(e,t,n),u=s[0],l=s[1],c=a.V.batch((function(){return i.queryCache.findAll(u).map((function(e){return e.fetch(void 0,(0,r.Z)({},l,{meta:{refetchPage:null==u?void 0:u.refetchPage}}))}))})),f=Promise.all(c).then(o.ZT);return(null==l?void 0:l.throwOnError)||(f=f.catch(o.ZT)),f},t.fetchQuery=function(e,t,n){var r=(0,o._v)(e,t,n),i=this.defaultQueryOptions(r);void 0===i.retry&&(i.retry=!1);var a=this.queryCache.build(this,i);return a.isStaleByTime(i.staleTime)?a.fetch(i):Promise.resolve(a.state.data)},t.prefetchQuery=function(e,t,n){return this.fetchQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.fetchInfiniteQuery=function(e,t,n){var r=(0,o._v)(e,t,n);return r.behavior={onFetch:function(e){e.fetchFn=function(){var t,n,r,i,a,s,l,c,f,d=null==(t=e.fetchOptions)||null==(n=t.meta)?void 0:n.refetchPage,p=null==(r=e.fetchOptions)||null==(i=r.meta)?void 0:i.fetchMore,h=null==p?void 0:p.pageParam,m="forward"===(null==p?void 0:p.direction),y="backward"===(null==p?void 0:p.direction),g=(null==(a=e.state.data)?void 0:a.pages)||[],b=(null==(s=e.state.data)?void 0:s.pageParams)||[],w=(0,o.G9)(),S=null==w?void 0:w.signal,E=b,k=!1,A=e.options.queryFn||function(){return Promise.reject("Missing queryFn")},C=function(e,t,n,r){return E=r?[t].concat(E):[].concat(E,[t]),r?[n].concat(e):[].concat(e,[n])},x=function(t,n,r,o){if(k)return Promise.reject("Cancelled");if(void 0===r&&!n&&t.length)return Promise.resolve(t);var i={queryKey:e.queryKey,signal:S,pageParam:r,meta:e.meta},a=A(i),s=Promise.resolve(a).then((function(e){return C(t,r,e,o)}));return(0,u.LE)(a)&&(s.cancel=a.cancel),s};if(g.length)if(m){var T=void 0!==h,_=T?h:v(e.options,g);l=x(g,T,_)}else if(y){var P=void 0!==h,R=P?h:(c=e.options,f=g,null==c.getPreviousPageParam?void 0:c.getPreviousPageParam(f[0],f));l=x(g,P,R,!0)}else!function(){E=[];var t=void 0===e.options.getNextPageParam,n=!d||!g[0]||d(g[0],0,g);l=n?x([],t,b[0]):Promise.resolve(C([],b[0],g[0]));for(var r=function(n){l=l.then((function(r){if(!d||!g[n]||d(g[n],n,g)){var o=t?b[n]:v(e.options,r);return x(r,t,o)}return Promise.resolve(C(r,b[n],g[n]))}))},o=1;o<g.length;o++)r(o)}();else l=x([]);var O=l.then((function(e){return{pages:e,pageParams:E}}));return O.cancel=function(){k=!0,null==w||w.abort(),(0,u.LE)(l)&&l.cancel()},O}}},this.fetchQuery(r)},t.prefetchInfiniteQuery=function(e,t,n){return this.fetchInfiniteQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.cancelMutations=function(){var e=this,t=a.V.batch((function(){return e.mutationCache.getAll().map((function(e){return e.cancel()}))}));return Promise.all(t).then(o.ZT).catch(o.ZT)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(e){return this.mutationCache.build(this,e).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(e){this.defaultOptions=e},t.setQueryDefaults=function(e,t){var n=this.queryDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.queryKey)}));n?n.defaultOptions=t:this.queryDefaults.push({queryKey:e,defaultOptions:t})},t.getQueryDefaults=function(e){var t;return e?null==(t=this.queryDefaults.find((function(t){return(0,o.to)(e,t.queryKey)})))?void 0:t.defaultOptions:void 0},t.setMutationDefaults=function(e,t){var n=this.mutationDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.mutationKey)}));n?n.defaultOptions=t:this.mutationDefaults.push({mutationKey:e,defaultOptions:t})},t.getMutationDefaults=function(e){var t;return e?null==(t=this.mutationDefaults.find((function(t){return(0,o.to)(e,t.mutationKey)})))?void 0:t.defaultOptions:void 0},t.defaultQueryOptions=function(e){if(null==e?void 0:e._defaulted)return e;var t=(0,r.Z)({},this.defaultOptions.queries,this.getQueryDefaults(null==e?void 0:e.queryKey),e,{_defaulted:!0});return!t.queryHash&&t.queryKey&&(t.queryHash=(0,o.Rm)(t.queryKey,t)),t},t.defaultQueryObserverOptions=function(e){return this.defaultQueryOptions(e)},t.defaultMutationOptions=function(e){return(null==e?void 0:e._defaulted)?e:(0,r.Z)({},this.defaultOptions.mutations,this.getMutationDefaults(null==e?void 0:e.mutationKey),e,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}()},252:(e,t,n)=>{"use strict";n.d(t,{LE:()=>s,DV:()=>l,m4:()=>c});var r=n(852),o=n(68),i=n(288);function a(e){return Math.min(1e3*Math.pow(2,e),3e4)}function s(e){return"function"==typeof(null==e?void 0:e.cancel)}var u=function(e){this.revert=null==e?void 0:e.revert,this.silent=null==e?void 0:e.silent};function l(e){return e instanceof u}var c=function(e){var t,n,l,c,f=this,d=!1;this.abort=e.abort,this.cancel=function(e){return null==t?void 0:t(e)},this.cancelRetry=function(){d=!0},this.continueRetry=function(){d=!1},this.continue=function(){return null==n?void 0:n()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise((function(e,t){l=e,c=t}));var p=function(t){f.isResolved||(f.isResolved=!0,null==e.onSuccess||e.onSuccess(t),null==n||n(),l(t))},h=function(t){f.isResolved||(f.isResolved=!0,null==e.onError||e.onError(t),null==n||n(),c(t))};!function l(){if(!f.isResolved){var c;try{c=e.fn()}catch(e){c=Promise.reject(e)}t=function(e){if(!f.isResolved&&(h(new u(e)),null==f.abort||f.abort(),s(c)))try{c.cancel()}catch(e){}},f.isTransportCancelable=s(c),Promise.resolve(c).then(p).catch((function(t){var s,u;if(!f.isResolved){var c=null!=(s=e.retry)?s:3,p=null!=(u=e.retryDelay)?u:a,m="function"==typeof p?p(f.failureCount,t):p,v=!0===c||"number"==typeof c&&f.failureCount<c||"function"==typeof c&&c(f.failureCount,t);!d&&v?(f.failureCount++,null==e.onFail||e.onFail(f.failureCount,t),(0,i.Gh)(m).then((function(){if(!r.j.isFocused()||!o.N.isOnline())return new Promise((function(t){n=t,f.isPaused=!0,null==e.onPause||e.onPause()})).then((function(){n=void 0,f.isPaused=!1,null==e.onContinue||e.onContinue()}))})).then((function(){d?h(t):l()}))):h(t)}}))}}()}},943:(e,t,n)=>{"use strict";n.d(t,{l:()=>r});var r=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(e){var t=this,n=e||function(){};return this.listeners.push(n),this.onSubscribe(),function(){t.listeners=t.listeners.filter((function(e){return e!==n})),t.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}()},755:()=>{},288:(e,t,n)=>{"use strict";n.d(t,{sk:()=>o,ZT:()=>i,SE:()=>a,PN:()=>s,mc:()=>u,Kp:()=>l,_v:()=>c,I6:()=>f,_x:()=>d,X7:()=>p,Rm:()=>h,yF:()=>m,to:()=>v,Q$:()=>g,VS:()=>b,Gh:()=>k,A4:()=>A,G9:()=>C});var r=n(462),o="undefined"==typeof window;function i(){}function a(e,t){return"function"==typeof e?e(t):e}function s(e){return"number"==typeof e&&e>=0&&e!==1/0}function u(e){return Array.isArray(e)?e:[e]}function l(e,t){return Math.max(e+(t||0)-Date.now(),0)}function c(e,t,n){return E(e)?"function"==typeof t?(0,r.Z)({},n,{queryKey:e,queryFn:t}):(0,r.Z)({},t,{queryKey:e}):e}function f(e,t,n){return E(e)?[(0,r.Z)({},t,{queryKey:e}),n]:[e||{},t]}function d(e,t){var n=e.active,r=e.exact,o=e.fetching,i=e.inactive,a=e.predicate,s=e.queryKey,u=e.stale;if(E(s))if(r){if(t.queryHash!==h(s,t.options))return!1}else if(!v(t.queryKey,s))return!1;var l=function(e,t){return!0===e&&!0===t||null==e&&null==t?"all":!1===e&&!1===t?"none":(null!=e?e:!t)?"active":"inactive"}(n,i);if("none"===l)return!1;if("all"!==l){var c=t.isActive();if("active"===l&&!c)return!1;if("inactive"===l&&c)return!1}return!("boolean"==typeof u&&t.isStale()!==u||"boolean"==typeof o&&t.isFetching()!==o||a&&!a(t))}function p(e,t){var n=e.exact,r=e.fetching,o=e.predicate,i=e.mutationKey;if(E(i)){if(!t.options.mutationKey)return!1;if(n){if(m(t.options.mutationKey)!==m(i))return!1}else if(!v(t.options.mutationKey,i))return!1}return!("boolean"==typeof r&&"loading"===t.state.status!==r||o&&!o(t))}function h(e,t){return((null==t?void 0:t.queryKeyHashFn)||m)(e)}function m(e){var t;return t=u(e),JSON.stringify(t,(function(e,t){return w(t)?Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e}),{}):t}))}function v(e,t){return y(u(e),u(t))}function y(e,t){return e===t||typeof e==typeof t&&!(!e||!t||"object"!=typeof e||"object"!=typeof t)&&!Object.keys(t).some((function(n){return!y(e[n],t[n])}))}function g(e,t){if(e===t)return e;var n=Array.isArray(e)&&Array.isArray(t);if(n||w(e)&&w(t)){for(var r=n?e.length:Object.keys(e).length,o=n?t:Object.keys(t),i=o.length,a=n?[]:{},s=0,u=0;u<i;u++){var l=n?u:o[u];a[l]=g(e[l],t[l]),a[l]===e[l]&&s++}return r===i&&s===r?e:a}return t}function b(e,t){if(e&&!t||t&&!e)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}function w(e){if(!S(e))return!1;var t=e.constructor;if(void 0===t)return!0;var n=t.prototype;return!!S(n)&&!!n.hasOwnProperty("isPrototypeOf")}function S(e){return"[object Object]"===Object.prototype.toString.call(e)}function E(e){return"string"==typeof e||Array.isArray(e)}function k(e){return new Promise((function(t){setTimeout(t,e)}))}function A(e){Promise.resolve().then(e).catch((function(e){return setTimeout((function(){throw e}))}))}function C(){if("function"==typeof AbortController)return new AbortController}},767:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>r.Su,QueryClientProvider:()=>o.aH,useQuery:()=>o.aM});var r=n(747);n.o(r,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return r.QueryClientProvider}}),n.o(r,"useQuery")&&n.d(t,{useQuery:function(){return r.useQuery}});var o=n(66)},66:(e,t,n)=>{"use strict";n.d(t,{aH:()=>f,aM:()=>A});var r=n(101),o=n(935).unstable_batchedUpdates;r.V.setBatchNotifyFunction(o);var i=n(909),a=console;(0,i.E)(a);var s=n(294),u=s.createContext(void 0),l=s.createContext(!1);function c(e){return e&&"undefined"!=typeof window?(window.ReactQueryClientContext||(window.ReactQueryClientContext=u),window.ReactQueryClientContext):u}var f=function(e){var t=e.client,n=e.contextSharing,r=void 0!==n&&n,o=e.children;s.useEffect((function(){return t.mount(),function(){t.unmount()}}),[t]);var i=c(r);return s.createElement(l.Provider,{value:r},s.createElement(i.Provider,{value:t},o))},d=n(462),p=n(721),h=n(288),m=n(852),v=n(943),y=n(252),g=function(e){function t(t,n){var r;return(r=e.call(this)||this).client=t,r.options=n,r.trackedProps=[],r.previousSelectError=null,r.bindMethods(),r.setOptions(n),r}(0,p.Z)(t,e);var n=t.prototype;return n.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},n.onSubscribe=function(){1===this.listeners.length&&(this.currentQuery.addObserver(this),b(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},n.onUnsubscribe=function(){this.listeners.length||this.destroy()},n.shouldFetchOnReconnect=function(){return e=this.currentQuery,!1!==(t=this.options).enabled&&("always"===t.refetchOnReconnect||!1!==t.refetchOnReconnect&&S(e,t));var e,t},n.shouldFetchOnWindowFocus=function(){return e=this.currentQuery,!1!==(t=this.options).enabled&&("always"===t.refetchOnWindowFocus||!1!==t.refetchOnWindowFocus&&S(e,t));var e,t},n.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},n.setOptions=function(e,t){var n=this.options,r=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(e),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),this.updateQuery();var o=this.hasListeners();o&&w(this.currentQuery,r,this.options,n)&&this.executeFetch(),this.updateResult(t),!o||this.currentQuery===r&&this.options.enabled===n.enabled&&this.options.staleTime===n.staleTime||this.updateStaleTimeout();var i=this.computeRefetchInterval();!o||this.currentQuery===r&&this.options.enabled===n.enabled&&i===this.currentRefetchInterval||this.updateRefetchInterval(i)},n.getOptimisticResult=function(e){var t=this.client.defaultQueryObserverOptions(e),n=this.client.getQueryCache().build(this.client,t);return this.createResult(n,t)},n.getCurrentResult=function(){return this.currentResult},n.trackResult=function(e,t){var n=this,r={},o=function(e){n.trackedProps.includes(e)||n.trackedProps.push(e)};return Object.keys(e).forEach((function(t){Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:function(){return o(t),e[t]}})})),(t.useErrorBoundary||t.suspense)&&o("error"),r},n.getNextResult=function(e){var t=this;return new Promise((function(n,r){var o=t.subscribe((function(t){t.isFetching||(o(),t.isError&&(null==e?void 0:e.throwOnError)?r(t.error):n(t))}))}))},n.getCurrentQuery=function(){return this.currentQuery},n.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},n.refetch=function(e){return this.fetch((0,d.Z)({},e,{meta:{refetchPage:null==e?void 0:e.refetchPage}}))},n.fetchOptimistic=function(e){var t=this,n=this.client.defaultQueryObserverOptions(e),r=this.client.getQueryCache().build(this.client,n);return r.fetch().then((function(){return t.createResult(r,n)}))},n.fetch=function(e){var t=this;return this.executeFetch(e).then((function(){return t.updateResult(),t.currentResult}))},n.executeFetch=function(e){this.updateQuery();var t=this.currentQuery.fetch(this.options,e);return(null==e?void 0:e.throwOnError)||(t=t.catch(h.ZT)),t},n.updateStaleTimeout=function(){var e=this;if(this.clearStaleTimeout(),!h.sk&&!this.currentResult.isStale&&(0,h.PN)(this.options.staleTime)){var t=(0,h.Kp)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((function(){e.currentResult.isStale||e.updateResult()}),t)}},n.computeRefetchInterval=function(){var e;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(e=this.options.refetchInterval)&&e},n.updateRefetchInterval=function(e){var t=this;this.clearRefetchInterval(),this.currentRefetchInterval=e,!h.sk&&!1!==this.options.enabled&&(0,h.PN)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((function(){(t.options.refetchIntervalInBackground||m.j.isFocused())&&t.executeFetch()}),this.currentRefetchInterval))},n.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())},n.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},n.clearStaleTimeout=function(){clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0},n.clearRefetchInterval=function(){clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0},n.createResult=function(e,t){var n,r=this.currentQuery,o=this.options,a=this.currentResult,s=this.currentResultState,u=this.currentResultOptions,l=e!==r,c=l?e.state:this.currentQueryInitialState,f=l?this.currentResult:this.previousQueryResult,d=e.state,p=d.dataUpdatedAt,m=d.error,v=d.errorUpdatedAt,y=d.isFetching,g=d.status,E=!1,k=!1;if(t.optimisticResults){var A=this.hasListeners(),C=!A&&b(e,t),x=A&&w(e,r,t,o);(C||x)&&(y=!0,p||(g="loading"))}if(t.keepPreviousData&&!d.dataUpdateCount&&(null==f?void 0:f.isSuccess)&&"error"!==g)n=f.data,p=f.dataUpdatedAt,g=f.status,E=!0;else if(t.select&&void 0!==d.data){var T;if(a&&d.data===(null==s?void 0:s.data)&&t.select===(null==(T=this.previousSelect)?void 0:T.fn)&&!this.previousSelectError)n=this.previousSelect.result;else try{n=t.select(d.data),!1!==t.structuralSharing&&(n=(0,h.Q$)(null==a?void 0:a.data,n)),this.previousSelect={fn:t.select,result:n},this.previousSelectError=null}catch(e){(0,i.j)().error(e),m=e,this.previousSelectError=e,v=Date.now(),g="error"}}else n=d.data;if(void 0!==t.placeholderData&&void 0===n&&("loading"===g||"idle"===g)){var _;if((null==a?void 0:a.isPlaceholderData)&&t.placeholderData===(null==u?void 0:u.placeholderData))_=a.data;else if(_="function"==typeof t.placeholderData?t.placeholderData():t.placeholderData,t.select&&void 0!==_)try{_=t.select(_),!1!==t.structuralSharing&&(_=(0,h.Q$)(null==a?void 0:a.data,_)),this.previousSelectError=null}catch(e){(0,i.j)().error(e),m=e,this.previousSelectError=e,v=Date.now(),g="error"}void 0!==_&&(g="success",n=_,k=!0)}return{status:g,isLoading:"loading"===g,isSuccess:"success"===g,isError:"error"===g,isIdle:"idle"===g,data:n,dataUpdatedAt:p,error:m,errorUpdatedAt:v,failureCount:d.fetchFailureCount,isFetched:d.dataUpdateCount>0||d.errorUpdateCount>0,isFetchedAfterMount:d.dataUpdateCount>c.dataUpdateCount||d.errorUpdateCount>c.errorUpdateCount,isFetching:y,isRefetching:y&&"loading"!==g,isLoadingError:"error"===g&&0===d.dataUpdatedAt,isPlaceholderData:k,isPreviousData:E,isRefetchError:"error"===g&&0!==d.dataUpdatedAt,isStale:S(e,t),refetch:this.refetch,remove:this.remove}},n.shouldNotifyListeners=function(e,t){if(!t)return!0;var n=this.options,r=n.notifyOnChangeProps,o=n.notifyOnChangePropsExclusions;if(!r&&!o)return!0;if("tracked"===r&&!this.trackedProps.length)return!0;var i="tracked"===r?this.trackedProps:r;return Object.keys(e).some((function(n){var r=n,a=e[r]!==t[r],s=null==i?void 0:i.some((function(e){return e===n})),u=null==o?void 0:o.some((function(e){return e===n}));return a&&!u&&(!i||s)}))},n.updateResult=function(e){var t=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!(0,h.VS)(this.currentResult,t)){var n={cache:!0};!1!==(null==e?void 0:e.listeners)&&this.shouldNotifyListeners(this.currentResult,t)&&(n.listeners=!0),this.notify((0,d.Z)({},n,e))}},n.updateQuery=function(){var e=this.client.getQueryCache().build(this.client,this.options);if(e!==this.currentQuery){var t=this.currentQuery;this.currentQuery=e,this.currentQueryInitialState=e.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==t||t.removeObserver(this),e.addObserver(this))}},n.onQueryUpdate=function(e){var t={};"success"===e.type?t.onSuccess=!0:"error"!==e.type||(0,y.DV)(e.error)||(t.onError=!0),this.updateResult(t),this.hasListeners()&&this.updateTimers()},n.notify=function(e){var t=this;r.V.batch((function(){e.onSuccess?(null==t.options.onSuccess||t.options.onSuccess(t.currentResult.data),null==t.options.onSettled||t.options.onSettled(t.currentResult.data,null)):e.onError&&(null==t.options.onError||t.options.onError(t.currentResult.error),null==t.options.onSettled||t.options.onSettled(void 0,t.currentResult.error)),e.listeners&&t.listeners.forEach((function(e){e(t.currentResult)})),e.cache&&t.client.getQueryCache().notify({query:t.currentQuery,type:"observerResultsUpdated"})}))},t}(v.l);function b(e,t){return function(e,t){return!(!1===t.enabled||e.state.dataUpdatedAt||"error"===e.state.status&&!1===t.retryOnMount)}(e,t)||function(e,t){return!1!==t.enabled&&e.state.dataUpdatedAt>0&&("always"===t.refetchOnMount||!1!==t.refetchOnMount&&S(e,t))}(e,t)}function w(e,t,n,r){return!1!==n.enabled&&(e!==t||!1===r.enabled)&&(!n.suspense||"error"!==e.state.status)&&S(e,n)}function S(e,t){return e.isStaleByTime(t.staleTime)}var E,k=s.createContext((E=!1,{clearReset:function(){E=!1},reset:function(){E=!0},isReset:function(){return E}}));function A(e,t,n){return function(e,t){var n=s.useRef(!1),o=s.useState(0)[1],i=function(){var e=s.useContext(c(s.useContext(l)));if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e}(),a=s.useContext(k),u=i.defaultQueryObserverOptions(e);u.optimisticResults=!0,u.onError&&(u.onError=r.V.batchCalls(u.onError)),u.onSuccess&&(u.onSuccess=r.V.batchCalls(u.onSuccess)),u.onSettled&&(u.onSettled=r.V.batchCalls(u.onSettled)),u.suspense&&("number"!=typeof u.staleTime&&(u.staleTime=1e3),0===u.cacheTime&&(u.cacheTime=1)),(u.suspense||u.useErrorBoundary)&&(a.isReset()||(u.retryOnMount=!1));var f,d,p,h=s.useState((function(){return new t(i,u)}))[0],m=h.getOptimisticResult(u);if(s.useEffect((function(){n.current=!0,a.clearReset();var e=h.subscribe(r.V.batchCalls((function(){n.current&&o((function(e){return e+1}))})));return h.updateResult(),function(){n.current=!1,e()}}),[a,h]),s.useEffect((function(){h.setOptions(u,{listeners:!1})}),[u,h]),u.suspense&&m.isLoading)throw h.fetchOptimistic(u).then((function(e){var t=e.data;null==u.onSuccess||u.onSuccess(t),null==u.onSettled||u.onSettled(t,null)})).catch((function(e){a.clearReset(),null==u.onError||u.onError(e),null==u.onSettled||u.onSettled(void 0,e)}));if(m.isError&&!a.isReset()&&!m.isFetching&&(f=u.suspense,d=u.useErrorBoundary,p=[m.error,h.getCurrentQuery()],"function"==typeof d?d.apply(void 0,p):"boolean"==typeof d?d:f))throw m.error;return"tracked"===u.notifyOnChangeProps&&(m=h.trackResult(m,u)),m}((0,h._v)(e,t,n),g)}},524:(e,t,n)=>{"use strict";var r,o=n(294),i=(r=o)&&"object"==typeof r&&"default"in r?r.default:r;function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=function(e,t,n){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(r){if("function"!=typeof r)throw new Error("Expected WrappedComponent to be a React component.");var u,l=[];function c(){u=e(l.map((function(e){return e.props}))),f.canUseDOM?t(u):n&&(u=n(u))}var f=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.peek=function(){return u},o.rewind=function(){if(o.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=u;return u=void 0,l=[],e};var a=o.prototype;return a.UNSAFE_componentWillMount=function(){l.push(this),c()},a.componentDidUpdate=function(){c()},a.componentWillUnmount=function(){var e=l.indexOf(this);l.splice(e,1),c()},a.render=function(){return i.createElement(r,this.props)},o}(o.PureComponent);return a(f,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(r)+")"),a(f,"canUseDOM",s),f}}},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,u=60112;t.Suspense=60113;var l=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:w.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var u=!1;if(null===e)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+x(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),T(a,t,n,"",(function(e){return e}))):null!=a&&(A(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=r+x(s=e[l],l);u+=T(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),l=0;!(s=e.next()).done;)u+=T(s=s.value,t,n,c=r+x(s,l++),a);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function O(){var e=R.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)S.call(t,c)&&!E.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,u=s.now();t.unstable_now=function(){return s.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,f=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,S=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+g;try{v(!0,e)?S.postMessage(null):(m=!1,v=null)}catch(e){throw S.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,S.postMessage(null))},r=function(e,n){y=d((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function A(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,u=e[s];if(void 0!==a&&0>C(a,n))void 0!==u&&0>C(u,a)?(e[r]=u,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],T=[],_=1,P=null,R=3,O=!1,M=!1,L=!1;function N(e){for(var t=k(T);null!==t;){if(null===t.callback)A(T);else{if(!(t.startTime<=e))break;A(T),t.sortIndex=t.expirationTime,E(x,t)}t=k(T)}}function I(e){if(L=!1,N(e),!M)if(null!==k(x))M=!0,n(V);else{var t=k(T);null!==t&&r(I,t.startTime-e)}}function V(e,n){M=!1,L&&(L=!1,o()),O=!0;var i=R;try{for(N(n),P=k(x);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=P.callback;if("function"==typeof a){P.callback=null,R=P.priorityLevel;var s=a(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?P.callback=s:P===k(x)&&A(x),N(n)}else A(x);P=k(x)}if(null!==P)var u=!0;else{var l=k(T);null!==l&&r(I,l.startTime-n),u=!1}return u}finally{P=null,R=i,O=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||O||(M=!0,n(V))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return k(x)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:_++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>s?(e.sortIndex=a,E(T,e),null===k(x)&&e===k(T)&&(L?o():L=!0,r(I,a-s))):(e.sortIndex=u,E(x,e),M||O||(M=!0,n(V))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),u=0;u<i.length;u++){var l=i[u];if(!s(l))return!1;var c=e[l],f=t[l];if(!1===(o=n?n.call(r,c,f,l):void 0)||void 0===o&&c!==f)return!1}return!0}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var u=e[s],l=r.base?u[0]+r.base:u[0],c=i[l]||0,f="".concat(l," ").concat(c);i[l]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var u=r(e,o),l=0;l<i.length;l++){var c=n(i[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},462:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},721:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935),r=n(379),o=n.n(r),i=n(795),a=n.n(i),s=n(569),u=n.n(s),l=n(565),c=n.n(l),f=n(216),d=n.n(f),p=n(589),h=n.n(p),m=n(538),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=u().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),o()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals;var y=n(282),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(y.Z,g),y.Z&&y.Z.locals&&y.Z.locals;var b=n(421),w={};w.styleTagTransform=h(),w.setAttributes=c(),w.insert=u().bind(null,"head"),w.domAPI=a(),w.insertStyleElement=d(),o()(b.Z,w),b.Z&&b.Z.locals&&b.Z.locals;var S=n(864),E=n(774),k=n.n(E);const A=function(e){function t(e,r,u,l,d){for(var p,h,m,v,w,E=0,k=0,A=0,C=0,x=0,M=0,N=m=p=0,V=0,D=0,j=0,F=0,U=u.length,z=U-1,B="",q="",$="",H="";V<U;){if(h=u.charCodeAt(V),V===z&&0!==k+C+A+E&&(0!==k&&(h=47===k?10:47),C=A=E=0,U++,z++),0===k+C+A+E){if(V===z&&(0<D&&(B=B.replace(f,"")),0<B.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:B+=u.charAt(V)}h=59}switch(h){case 123:for(p=(B=B.trim()).charCodeAt(0),m=1,F=++V;V<U;){switch(h=u.charCodeAt(V)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(V+1)){case 42:case 47:e:{for(N=V+1;N<z;++N)switch(u.charCodeAt(N)){case 47:if(42===h&&42===u.charCodeAt(N-1)&&V+2!==N){V=N+1;break e}break;case 10:if(47===h){V=N+1;break e}}V=N}}break;case 91:h++;case 40:h++;case 34:case 39:for(;V++<z&&u.charCodeAt(V)!==h;);}if(0===m)break;V++}if(m=u.substring(F,V),0===p&&(p=(B=B.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<D&&(B=B.replace(f,"")),h=B.charCodeAt(1)){case 100:case 109:case 115:case 45:D=r;break;default:D=O}if(F=(m=t(r,D,m,h,d+1)).length,0<L&&(w=s(3,m,D=n(O,B,j),r,_,T,F,h,d,l),B=D.join(""),void 0!==w&&0===(F=(m=w.trim()).length)&&(h=0,m="")),0<F)switch(h){case 115:B=B.replace(S,a);case 100:case 109:case 45:m=B+"{"+m+"}";break;case 107:m=(B=B.replace(y,"$1 $2"))+"{"+m+"}",m=1===R||2===R&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=B+m,112===l&&(q+=m,m="")}else m=""}else m=t(r,n(r,B,j),m,l,d+1);$+=m,m=j=D=N=p=0,B="",h=u.charCodeAt(++V);break;case 125:case 59:if(1<(F=(B=(0<D?B.replace(f,""):B).trim()).length))switch(0===N&&(p=B.charCodeAt(0),45===p||96<p&&123>p)&&(F=(B=B.replace(" ",":")).length),0<L&&void 0!==(w=s(1,B,r,e,_,T,q.length,l,d,l))&&0===(F=(B=w.trim()).length)&&(B="\0\0"),p=B.charCodeAt(0),h=B.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=B+u.charAt(V);break}default:58!==B.charCodeAt(F-1)&&(q+=o(B,p,h,B.charCodeAt(2)))}j=D=N=p=0,B="",h=u.charCodeAt(++V)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==l&&0<B.length&&(D=1,B+="\0"),0<L*I&&s(0,B,r,e,_,T,q.length,l,d,l),T=1,_++;break;case 59:case 125:if(0===k+C+A+E){T++;break}default:switch(T++,v=u.charAt(V),h){case 9:case 32:if(0===C+E+k)switch(x){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===C+k+E&&(D=j=1,v="\f"+v);break;case 108:if(0===C+k+E+P&&0<N)switch(V-N){case 2:112===x&&58===u.charCodeAt(V-3)&&(P=x);case 8:111===M&&(P=M)}break;case 58:0===C+k+E&&(N=V);break;case 44:0===k+A+C+E&&(D=1,v+="\r");break;case 34:case 39:0===k&&(C=C===h?0:0===C?h:C);break;case 91:0===C+k+A&&E++;break;case 93:0===C+k+A&&E--;break;case 41:0===C+k+E&&A--;break;case 40:0===C+k+E&&(0===p&&(2*x+3*M==533||(p=1)),A++);break;case 64:0===k+A+C+E+N+m&&(m=1);break;case 42:case 47:if(!(0<C+E+A))switch(k){case 0:switch(2*h+3*u.charCodeAt(V+1)){case 235:k=47;break;case 220:F=V,k=42}break;case 42:47===h&&42===x&&F+2!==V&&(33===u.charCodeAt(F+2)&&(q+=u.substring(F,V+1)),v="",k=0)}}0===k&&(B+=v)}M=x,x=h,V++}if(0<(F=q.length)){if(D=r,0<L&&void 0!==(w=s(2,q,D,e,_,T,F,l,d,l))&&0===(q=w).length)return H+q+$;if(q=D.join(",")+"{"+q+"}",0!=R*P){switch(2!==R||i(q,2)||(P=0),P){case 111:q=q.replace(b,":-moz-$1")+q;break;case 112:q=q.replace(g,"::-webkit-input-$1")+q.replace(g,"::-moz-$1")+q.replace(g,":-ms-input-$1")+q}P=0}}return H+q+$}function n(e,t,n){var o=t.trim().split(m);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<i;++s)t[s]=r(e,t[s],n).trim();break;default:var u=s=0;for(t=[];s<i;++s)for(var l=0;l<a;++l)t[u++]=r(e[l]+" ",o[s],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",s=2*t+3*n+4*r;if(944===s){e=a.indexOf(":",9)+1;var u=a.substring(e,a.length-1).trim();return u=a.substring(0,e).trim()+u+";",1===R||2===R&&i(u,1)?"-webkit-"+u+u:u}if(0===R||2===R&&!i(a,1))return a;switch(s){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(x,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(u=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+u+a;case 1005:return p.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(u=a.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=a.replace(w,"tb");break;case 232:u=a.replace(w,"tb-rl");break;case 220:u=a.replace(w,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+u+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,s=(u=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:a=a.replace(u,"-webkit-"+u)+";"+a;break;case 207:case 102:a=a.replace(u,"-webkit-"+(102<s?"inline-":"")+"box")+";"+a.replace(u,"-webkit-"+u)+";"+a.replace(u,"-ms-"+u+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return u=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+u+"-ms-flex-"+u+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(k,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(k,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(u,"-webkit-"+u)+a.replace(u,"-moz-"+u.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),N(2!==t?r:r.replace(A,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,i,a,s,u,c){for(var f,d=0,p=t;d<L;++d)switch(f=M[d].call(l,e,p,n,r,o,i,a,s,u,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(N=null,e?"function"!=typeof e?R=1:(R=2,N=e):R=0),u}function l(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<L){var o=s(-1,n,r,r,_,T,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(O,r,n,0,0);return 0<L&&void 0!==(o=s(-2,i,r,r,_,T,i.length,0,0,0))&&(i=o),P=0,T=_=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,k=/-self|flex-/g,A=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,x=/([^-])(image-set\()/,T=1,_=1,P=0,R=1,O=[],M=[],L=0,N=null,I=0;return l.use=function e(t){switch(t){case void 0:case null:L=M.length=0;break;default:if("function"==typeof t)M[L++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else I=0|!!t}return e},l.set=u,void 0!==e&&u(e),l},C={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var x=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const T=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return x.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var _=n(679),P=n.n(_);function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var O=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},M=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,S.typeOf)(e)},L=Object.freeze([]),N=Object.freeze({});function I(e){return"function"==typeof e}function V(e){return e.displayName||e.name||"Component"}function D(e){return e&&"string"==typeof e.styledComponentId}var j="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",F="undefined"!=typeof window&&"HTMLElement"in window,U=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),z={};function B(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var q=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&B(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),s=0,u=t.length;s<u;s++)this.tag.insertRule(a,t[s])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),$=new Map,H=new Map,W=1,Q=function(e){if($.has(e))return $.get(e);for(;H.has(W);)W++;var t=W++;return $.set(e,t),H.set(t,e),t},K=function(e){return H.get(e)},Z=function(e,t){t>=W&&(W=t+1),$.set(e,t),H.set(t,e)},Y="style["+j+'][data-styled-version="5.3.3"]',G=new RegExp("^"+j+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),X=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},J=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var s=a.match(G);if(s){var u=0|parseInt(s[1],10),l=s[2];0!==u&&(Z(l,u),X(e,l,s[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(a)}}},ee=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},te=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(j))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(j,"active"),r.setAttribute("data-styled-version","5.3.3");var a=ee();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},ne=function(){function e(e){var t=this.element=te(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}B(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),re=function(){function e(e){var t=this.element=te(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),oe=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),ie=F,ae={isServer:!F,useCSSOMInjection:!U},se=function(){function e(e,t,n){void 0===e&&(e=N),void 0===t&&(t={}),this.options=R({},ae,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&F&&ie&&(ie=!1,function(e){for(var t=document.querySelectorAll(Y),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(j)&&(J(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return Q(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(R({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new oe(o):r?new ne(o):new re(o),new q(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Q(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Q(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Q(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=K(o);if(void 0!==i){var a=e.names.get(i),s=t.getGroup(o);if(a&&s&&a.size){var u=j+".g"+o+'[id="'+i+'"]',l="";void 0!==a&&a.forEach((function(e){e.length>0&&(l+=e+",")})),r+=""+s+u+'{content:"'+l+'"}/*!sc*/\n'}}}return r}(this)},e}(),ue=/(a)(d)/gi,le=function(e){return String.fromCharCode(e+(e>25?39:97))};function ce(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=le(t%52)+n;return(le(t%52)+n).replace(ue,"$1-$2")}var fe=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},de=function(e){return fe(5381,e)};function pe(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(I(n)&&!D(n))return!1}return!0}var he=de("5.3.3"),me=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&pe(e),this.componentId=t,this.baseHash=fe(he,t),this.baseStyle=n,se.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Le(this.rules,e,t,n).join(""),a=ce(fe(this.baseHash,i)>>>0);if(!t.hasNameForId(r,a)){var s=n(i,"."+a,void 0,r);t.insertRules(r,a,s)}o.push(a),this.staticRulesId=a}else{for(var u=this.rules.length,l=fe(this.baseHash,n.hash),c="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=Le(d,e,t,n),h=Array.isArray(p)?p.join(""):p;l=fe(l,h+f),c+=h}}if(c){var m=ce(l>>>0);if(!t.hasNameForId(r,m)){var v=n(c,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),ve=/^\s*\/\/.*$/gm,ye=[":","[",".","#"];function ge(e){var t,n,r,o,i=void 0===e?N:e,a=i.options,s=void 0===a?N:a,u=i.plugins,l=void 0===u?L:u,c=new A(s),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,s,u,l,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,i){return 0===r&&-1!==ye.indexOf(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,s){void 0===s&&(s="&");var u=e.replace(ve,""),l=i&&a?a+" "+i+" { "+u+" }":u;return t=s,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(a||!i?"":i,l)}return c.use([].concat(l,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=l.length?l.reduce((function(e,t){return t.name||B(15),fe(e,t.name)}),5381).toString():"",h}var be=e.createContext(),we=(be.Consumer,e.createContext()),Se=(we.Consumer,new se),Ee=ge();function ke(){return(0,e.useContext)(be)||Se}function Ae(){return(0,e.useContext)(we)||Ee}function Ce(t){var n=(0,e.useState)(t.stylisPlugins),r=n[0],o=n[1],i=ke(),a=(0,e.useMemo)((function(){var e=i;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),s=(0,e.useMemo)((function(){return ge({options:{prefix:!t.disableVendorPrefixes},plugins:r})}),[t.disableVendorPrefixes,r]);return(0,e.useEffect)((function(){k()(r,t.stylisPlugins)||o(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(be.Provider,{value:a},e.createElement(we.Provider,{value:s},t.children))}var xe=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ee);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return B(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ee),this.name+e.hash},e}(),Te=/([A-Z])/,_e=/([A-Z])/g,Pe=/^ms-/,Re=function(e){return"-"+e.toLowerCase()};function Oe(e){return Te.test(e)?e.replace(_e,Re).replace(Pe,"-ms-"):e}var Me=function(e){return null==e||!1===e||""===e};function Le(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,s=e.length;a<s;a+=1)""!==(o=Le(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return Me(e)?"":D(e)?"."+e.styledComponentId:I(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:Le(e(t),t,n,r):e instanceof xe?n?(e.inject(n,r),e.getName(r)):e:M(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!Me(t[a])&&(Array.isArray(t[a])&&t[a].isCss||I(t[a])?i.push(Oe(a)+":",t[a],";"):M(t[a])?i.push.apply(i,e(t[a],a)):i.push(Oe(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in C?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var u}var Ne=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ie(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return I(e)||M(e)?Ne(Le(O(L,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ne(Le(O(e,n)))}new Set;var Ve=function(e,t,n){return void 0===n&&(n=N),e.theme!==n.theme&&e.theme||t||n.theme},De=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,je=/(^-|-$)/g;function Fe(e){return e.replace(De,"-").replace(je,"")}var Ue=function(e){return ce(de(e)>>>0)};function ze(e){return"string"==typeof e&&!0}var Be=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},qe=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function $e(e,t,n){var r=e[n];Be(t)&&Be(r)?He(r,t):e[n]=t}function He(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(Be(a))for(var s in a)qe(s)&&$e(e,a[s],s)}return e}var We=e.createContext();function Qe(t){var n=(0,e.useContext)(We),r=(0,e.useMemo)((function(){return function(e,t){return e?I(e)?e(t):Array.isArray(e)||"object"!=typeof e?B(8):t?R({},t,{},e):e:B(14)}(t.theme,n)}),[t.theme,n]);return t.children?e.createElement(We.Provider,{value:r},t.children):null}We.Consumer;var Ke={};function Ze(t,n,r){var o=D(t),i=!ze(t),a=n.attrs,s=void 0===a?L:a,u=n.componentId,l=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Fe(e);Ke[n]=(Ke[n]||0)+1;var r=n+"-"+Ue("5.3.3"+n+Ke[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):u,c=n.displayName,f=void 0===c?function(e){return ze(e)?"styled."+e:"Styled("+V(e)+")"}(t):c,d=n.displayName&&n.componentId?Fe(n.displayName)+"-"+n.componentId:n.componentId||l,p=o&&t.attrs?Array.prototype.concat(t.attrs,s).filter(Boolean):s,h=n.shouldForwardProp;o&&t.shouldForwardProp&&(h=n.shouldForwardProp?function(e,r,o){return t.shouldForwardProp(e,r,o)&&n.shouldForwardProp(e,r,o)}:t.shouldForwardProp);var m,v=new me(r,d,o?t.componentStyle:void 0),y=v.isStatic&&0===s.length,g=function(t,n){return function(t,n,r,o){var i=t.attrs,a=t.componentStyle,s=t.defaultProps,u=t.foldedComponentIds,l=t.shouldForwardProp,c=t.styledComponentId,f=t.target,d=function(e,t,n){void 0===e&&(e=N);var r=R({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in I(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(Ve(n,(0,e.useContext)(We),s)||N,n,i),p=d[0],h=d[1],m=function(e,t,n,r){var o=ke(),i=Ae();return t?e.generateAndInjectStyles(N,o,i):e.generateAndInjectStyles(n,o,i)}(a,o,p),v=r,y=h.$as||n.$as||h.as||n.as||f,g=ze(y),b=h!==n?R({},n,{},h):n,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(l?l(S,T,y):!g||T(S))&&(w[S]=b[S]));return n.style&&h.style!==n.style&&(w.style=R({},n.style,{},h.style)),w.className=Array.prototype.concat(u,c,m!==c?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,e.createElement)(y,w)}(m,t,n,y)};return g.displayName=f,(m=e.forwardRef(g)).attrs=p,m.componentStyle=v,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=o?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):L,m.styledComponentId=d,m.target=o?t.target:t,m.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),i=t&&t+"-"+(ze(e)?e:Fe(V(e)));return Ze(e,R({},o,{attrs:p,componentId:i}),r)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?He({},t.defaultProps,e):e}}),m.toString=function(){return"."+m.styledComponentId},i&&P()(m,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var Ye=function(e){return function e(t,n,r){if(void 0===r&&(r=N),!(0,S.isValidElementType)(n))return B(1,String(n));var o=function(){return t(n,r,Ie.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,R({},r,{},o))},o.attrs=function(o){return e(t,n,R({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Ze,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ye[e]=Ye(e)}));var Ge,Xe=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=pe(e),se.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Le(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&se.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();Ge=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=ee();return"<style "+[n&&'nonce="'+n+'"',j+'="true"','data-styled-version="5.3.3"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?B(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return B(2);var r=((n={})[j]="",n["data-styled-version"]="5.3.3",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=ee();return o&&(r.nonce=o),[e.createElement("style",R({},r,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new se({isServer:!0}),this.sealed=!1}.prototype,Ge.collectStyles=function(t){return this.sealed?B(2):e.createElement(Ce,{sheet:this.instance},t)},Ge.interleaveWithNodeStream=function(e){return B(3)};const Je=Ye;var et=n(767);n(938);var tt=function(e){const t=new Error(e);if(void 0===t.stack)try{throw t}catch(e){}return t},nt=function(e){return!!e&&"function"==typeof e.then},rt=function(e,t){if(null!=e)return e;throw tt(null!=t?t:"Got unexpected null or undefined")};function ot(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class it{getValue(){throw tt("BaseLoadable")}toPromise(){throw tt("BaseLoadable")}valueMaybe(){throw tt("BaseLoadable")}valueOrThrow(){throw tt(`Loadable expected value, but in "${this.state}" state`)}promiseMaybe(){throw tt("BaseLoadable")}promiseOrThrow(){throw tt(`Loadable expected promise, but in "${this.state}" state`)}errorMaybe(){throw tt("BaseLoadable")}errorOrThrow(){throw tt(`Loadable expected error, but in "${this.state}" state`)}is(e){return e.state===this.state&&e.contents===this.contents}map(e){throw tt("BaseLoadable")}}class at extends it{constructor(e){super(),ot(this,"state","hasValue"),ot(this,"contents",void 0),this.contents=e}getValue(){return this.contents}toPromise(){return Promise.resolve(this.contents)}valueMaybe(){return this.contents}valueOrThrow(){return this.contents}promiseMaybe(){}errorMaybe(){}map(e){try{const t=e(this.contents);return nt(t)?ft(t):pt(t)?t:lt(t)}catch(t){return nt(t)?ft(t.next((()=>this.map(e)))):ct(t)}}}class st extends it{constructor(e){super(),ot(this,"state","hasError"),ot(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return Promise.reject(this.contents)}valueMaybe(){}promiseMaybe(){}errorMaybe(){return this.contents}errorOrThrow(){return this.contents}map(e){return this}}class ut extends it{constructor(e){super(),ot(this,"state","loading"),ot(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return this.contents}valueMaybe(){}promiseMaybe(){return this.contents}promiseOrThrow(){return this.contents}errorMaybe(){}map(e){return ft(this.contents.then((t=>{const n=e(t);if(pt(n)){const e=n;switch(e.state){case"hasValue":case"loading":return e.contents;case"hasError":throw e.contents}}return n})).catch((t=>{if(nt(t))return t.then((()=>this.map(e).contents));throw t})))}}function lt(e){return Object.freeze(new at(e))}function ct(e){return Object.freeze(new st(e))}function ft(e){return Object.freeze(new ut(e))}function dt(e){const t=(Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))).map((e=>pt(e)?e:nt(e)?ft(e):lt(e))),n=function(e){return e.every((e=>"hasValue"===e.state))?lt(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?ct(rt(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):ft(Promise.all(e.map((e=>e.contents))))}(t);return Array.isArray(e)?n:n.map((t=>Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})))}function pt(e){return e instanceof it}const ht={of:e=>nt(e)?ft(e):pt(e)?e:lt(e),error:e=>ct(e),all:dt,isLoadable:pt};var mt={loadableWithValue:lt,loadableWithError:ct,loadableWithPromise:ft,loadableLoading:function(){return Object.freeze(new ut(new Promise((()=>{}))))},loadableAll:dt,isLoadable:pt,RecoilLoadable:ht},vt=mt.loadableWithValue,yt=mt.loadableWithError,gt=mt.loadableWithPromise,bt=mt.loadableLoading,wt=mt.loadableAll,St=mt.isLoadable,Et=mt.RecoilLoadable,kt=Object.freeze({__proto__:null,loadableWithValue:vt,loadableWithError:yt,loadableWithPromise:gt,loadableLoading:bt,loadableAll:wt,isLoadable:St,RecoilLoadable:Et});class At{constructor(e){ot(this,"key",void 0),this.key=e}}class Ct extends At{}class xt extends At{}var Tt={AbstractRecoilValue:At,RecoilState:Ct,RecoilValueReadOnly:xt,isRecoilValue:function(e){return e instanceof Ct||e instanceof xt}},_t=Tt.AbstractRecoilValue,Pt=Tt.RecoilState,Rt=Tt.RecoilValueReadOnly,Ot=Tt.isRecoilValue,Mt=Object.freeze({__proto__:null,AbstractRecoilValue:_t,RecoilState:Pt,RecoilValueReadOnly:Rt,isRecoilValue:Ot});const Lt=(new Map).set("recoil_hamt_2020",!0).set("recoil_sync_external_store",!0).set("recoil_suppress_rerender_in_callback",!0).set("recoil_memory_managament_2020",!0);function Nt(e){var t;return null!==(t=Lt.get(e))&&void 0!==t&&t}Nt.setPass=e=>{Lt.set(e,!0)},Nt.setFail=e=>{Lt.set(e,!1)},Nt.clear=()=>{Lt.clear()};var It=Nt,Vt=function(e,t){return function*(){let n=0;for(const r of e)yield t(r,n++)}()};class Dt{}const jt=new Dt;class Ft extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const Ut=new Map,zt=new Map;class Bt extends Error{}const qt=new Map;function $t(e){return qt.get(e)}var Ht,Wt,Qt={nodes:Ut,recoilValues:zt,registerNode:function(e){if(Ut.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}Ut.set(e.key,e);const t=null==e.set?new Mt.RecoilValueReadOnly(e.key):new Mt.RecoilState(e.key);return zt.set(e.key,t),t},getNode:function(e){const t=Ut.get(e);if(null==t)throw new Bt(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return Ut.get(e)},deleteNodeConfigIfPossible:function(e){var t;if(!It("recoil_memory_managament_2020"))return;const n=Ut.get(e);var r;null!=n&&null!==(t=n.shouldDeleteConfigOnRelease)&&void 0!==t&&t.call(n)&&(Ut.delete(e),null===(r=$t(e))||void 0===r||r(),qt.delete(e))},setConfigDeletionHandler:function(e,t){It("recoil_memory_managament_2020")&&(void 0===t?qt.delete(e):qt.set(e,t))},getConfigDeletionHandler:$t,recoilValuesForKeys:function(e){return Vt(e,(e=>rt(zt.get(e))))},NodeMissingError:Bt,DefaultValue:Dt,DEFAULT_VALUE:jt,RecoilValueNotReady:Ft},Kt=function(e,t){t()},Zt=(Ht=function(e){var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n={},r=Math.pow(2,5),o=r-1,i=r/2,a=r/4,s={},u=function(e){return function(){return e}},l=n.hash=function(e){var n=void 0===e?"undefined":t(e);if("number"===n)return e;"string"!==n&&(e+="");for(var r=0,o=0,i=e.length;o<i;++o)r=(r<<5)-r+e.charCodeAt(o)|0;return r},c=function(e,t){return t>>>e&o},f=function(e){return 1<<e},d=function(e,t){return function(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}(e&t-1)},p=function(e,t,n,r){var o=r;if(!e){var i=r.length;o=new Array(i);for(var a=0;a<i;++a)o[a]=r[a]}return o[t]=n,o},h=function(e,t,n){var r=n.length-1,o=0,i=0,a=n;if(e)o=i=t;else for(a=new Array(r);o<t;)a[i++]=n[o++];for(++o;o<=r;)a[i++]=n[o++];return e&&(a.length=r),a},m={__hamt_isEmpty:!0},v=function(e){return e===m||e&&e.__hamt_isEmpty},y=function(e,t,n,r){return{type:1,edit:e,hash:t,key:n,value:r,_modify:k}},g=function(e,t,n){return{type:2,edit:e,hash:t,children:n,_modify:A}},b=function(e,t,n){return{type:3,edit:e,mask:t,children:n,_modify:C}},w=function(e,t,n){return{type:4,edit:e,size:t,children:n,_modify:x}},S=function e(t,n,r,o,i,a){if(r===i)return g(t,r,[a,o]);var s=c(n,r),u=c(n,i);return b(t,f(s)|f(u),s===u?[e(t,n+5,r,o,i,a)]:s<u?[o,a]:[a,o])},E=function(e,t){return e===t.edit},k=function(e,t,n,r,o,i,a){if(t(i,this.key)){var u=r(this.value);return u===this.value?this:u===s?(--a.value,m):E(e,this)?(this.value=u,this):y(e,o,i,u)}var l=r();return l===s?this:(++a.value,S(e,n,this.hash,this,o,y(e,o,i,l)))},A=function(e,t,n,r,o,i,a){if(o===this.hash){var u=function(e,t,n,r,o,i,a,u){for(var l=o.length,c=0;c<l;++c){var f=o[c];if(n(a,f.key)){var d=f.value,m=i(d);return m===d?o:m===s?(--u.value,h(e,c,o)):p(e,c,y(t,r,a,m),o)}}var v=i();return v===s?o:(++u.value,p(e,l,y(t,r,a,v),o))}(E(e,this),e,t,this.hash,this.children,r,i,a);return u===this.children?this:u.length>1?g(e,this.hash,u):u[0]}var l=r();return l===s?this:(++a.value,S(e,n,this.hash,this,o,y(e,o,i,l)))},C=function(e,t,n,r,o,a,s){var u=this.mask,l=this.children,y=c(n,o),g=f(y),S=d(u,g),k=u&g,A=k?l[S]:m,C=A._modify(e,t,n+5,r,o,a,s);if(A===C)return this;var x,T=E(e,this),_=u,P=void 0;if(k&&v(C)){if(!(_&=~g))return m;if(l.length<=2&&((x=l[1^S])===m||1===x.type||2===x.type))return l[1^S];P=h(T,S,l)}else if(k||v(C))P=p(T,S,C,l);else{if(l.length>=i)return function(e,t,n,r,o){for(var i=[],a=r,s=0,u=0;a;++u)1&a&&(i[u]=o[s++]),a>>>=1;return i[t]=n,w(e,s+1,i)}(e,y,C,u,l);_|=g,P=function(e,t,n,r){var o=r.length;if(e){for(var i=o;i>=t;)r[i--]=r[i];return r[t]=n,r}for(var a=0,s=0,u=new Array(o+1);a<t;)u[s++]=r[a++];for(u[t]=n;a<o;)u[++s]=r[a++];return u}(T,S,C,l)}return T?(this.mask=_,this.children=P,this):b(e,_,P)},x=function(e,t,n,r,o,i,s){var u=this.size,l=this.children,f=c(n,o),d=l[f],h=(d||m)._modify(e,t,n+5,r,o,i,s);if(d===h)return this;var y=E(e,this),g=void 0;if(v(d)&&!v(h))++u,g=p(y,f,h,l);else if(!v(d)&&v(h)){if(--u<=a)return function(e,t,n,r){for(var o=new Array(t-1),i=0,a=0,s=0,u=r.length;s<u;++s)if(s!==n){var l=r[s];l&&!v(l)&&(o[i++]=l,a|=1<<s)}return b(e,a,o)}(e,u,f,l);g=p(y,f,m,l)}else g=p(y,f,h,l);return y?(this.size=u,this.children=g,this):w(e,u,g)};function T(e,t,n,r,o){this._editable=e,this._edit=t,this._config=n,this._root=r,this._size=o}m._modify=function(e,t,n,r,o,i,a){var u=r();return u===s?m:(++a.value,y(e,o,i,u))},T.prototype.setTree=function(e,t){return this._editable?(this._root=e,this._size=t,this):e===this._root?this:new T(this._editable,this._edit,this._config,e,t)};var _=n.tryGetHash=function(e,t,n,r){for(var o=r._root,i=0,a=r._config.keyEq;;)switch(o.type){case 1:return a(n,o.key)?o.value:e;case 2:if(t===o.hash)for(var s=o.children,u=0,l=s.length;u<l;++u){var p=s[u];if(a(n,p.key))return p.value}return e;case 3:var h=c(i,t),m=f(h);if(o.mask&m){o=o.children[d(o.mask,m)],i+=5;break}return e;case 4:if(o=o.children[c(i,t)]){i+=5;break}return e;default:return e}};T.prototype.tryGetHash=function(e,t,n){return _(e,t,n,this)};var P=n.tryGet=function(e,t,n){return _(e,n._config.hash(t),t,n)};T.prototype.tryGet=function(e,t){return P(e,t,this)};var R=n.getHash=function(e,t,n){return _(void 0,e,t,n)};T.prototype.getHash=function(e,t){return R(e,t,this)},n.get=function(e,t){return _(void 0,t._config.hash(e),e,t)},T.prototype.get=function(e,t){return P(t,e,this)};var O=n.has=function(e,t,n){return _(s,e,t,n)!==s};T.prototype.hasHash=function(e,t){return O(e,t,this)};var M=n.has=function(e,t){return O(t._config.hash(e),e,t)};T.prototype.has=function(e){return M(e,this)};var L=function(e,t){return e===t};n.make=function(e){return new T(0,0,{keyEq:e&&e.keyEq||L,hash:e&&e.hash||l},m,0)},n.empty=n.make();var N=n.isEmpty=function(e){return e&&!!v(e._root)};T.prototype.isEmpty=function(){return N(this)};var I=n.modifyHash=function(e,t,n,r){var o={value:r._size},i=r._root._modify(r._editable?r._edit:NaN,r._config.keyEq,0,e,t,n,o);return r.setTree(i,o.value)};T.prototype.modifyHash=function(e,t,n){return I(n,e,t,this)};var V=n.modify=function(e,t,n){return I(e,n._config.hash(t),t,n)};T.prototype.modify=function(e,t){return V(t,e,this)};var D=n.setHash=function(e,t,n,r){return I(u(n),e,t,r)};T.prototype.setHash=function(e,t,n){return D(e,t,n,this)};var j=n.set=function(e,t,n){return D(n._config.hash(e),e,t,n)};T.prototype.set=function(e,t){return j(e,t,this)};var F=u(s),U=n.removeHash=function(e,t,n){return I(F,e,t,n)};T.prototype.removeHash=T.prototype.deleteHash=function(e,t){return U(e,t,this)};var z=n.remove=function(e,t){return U(t._config.hash(e),e,t)};T.prototype.remove=T.prototype.delete=function(e){return z(e,this)};var B=n.beginMutation=function(e){return new T(e._editable+1,e._edit+1,e._config,e._root,e._size)};T.prototype.beginMutation=function(){return B(this)};var q=n.endMutation=function(e){return e._editable=e._editable&&e._editable-1,e};T.prototype.endMutation=function(){return q(this)};var $=n.mutate=function(e,t){var n=B(t);return e(n),q(n)};T.prototype.mutate=function(e){return $(e,this)};var H=function(e){return e&&W(e[0],e[1],e[2],e[3],e[4])},W=function(e,t,n,r,o){for(;n<e;){var i=t[n++];if(i&&!v(i))return Q(i,r,[e,t,n,r,o])}return H(o)},Q=function(e,t,n){switch(e.type){case 1:return{value:t(e),rest:n};case 2:case 4:case 3:var r=e.children;return W(r.length,r,0,t,n);default:return H(n)}},K={done:!0};function Z(e){this.v=e}Z.prototype.next=function(){if(!this.v)return K;var e=this.v;return this.v=H(e.rest),e},Z.prototype[Symbol.iterator]=function(){return this};var Y=function(e,t){return new Z(Q(e._root,t))},G=function(e){return[e.key,e.value]},X=n.entries=function(e){return Y(e,G)};T.prototype.entries=T.prototype[Symbol.iterator]=function(){return X(this)};var J=function(e){return e.key},ee=n.keys=function(e){return Y(e,J)};T.prototype.keys=function(){return ee(this)};var te=function(e){return e.value},ne=n.values=T.prototype.values=function(e){return Y(e,te)};T.prototype.values=function(){return ne(this)};var re=n.fold=function(e,t,n){var r=n._root;if(1===r.type)return e(t,r.value,r.key);for(var o=[r.children],i=void 0;i=o.pop();)for(var a=0,s=i.length;a<s;){var u=i[a++];u&&u.type&&(1===u.type?t=e(t,u.value,u.key):o.push(u.children))}return t};T.prototype.fold=function(e,t){return re(e,t,this)};var oe=n.forEach=function(e,t){return re((function(n,r,o){return e(r,o,t)}),null,t)};T.prototype.forEach=function(e){return oe(e,this)};var ie=n.count=function(e){return e._size};T.prototype.count=function(){return ie(this)},Object.defineProperty(T.prototype,"size",{get:T.prototype.count}),e.exports?e.exports=n:(void 0).hamt=n},Ht(Wt={exports:{}}),Wt.exports);class Yt{constructor(e){ot(this,"_map",void 0),this._map=new Map(null==e?void 0:e.entries())}keys(){return this._map.keys()}entries(){return this._map.entries()}get(e){return this._map.get(e)}has(e){return this._map.has(e)}set(e,t){return this._map.set(e,t),this}delete(e){return this._map.delete(e),this}clone(){return Xt(this)}toMap(){return new Map(this._map)}}class Gt{constructor(e){if(ot(this,"_hamt",Zt.empty.beginMutation()),e instanceof Gt){const t=e._hamt.endMutation();e._hamt=t.beginMutation(),this._hamt=t.beginMutation()}else if(e)for(const[t,n]of e.entries())this._hamt.set(t,n)}keys(){return this._hamt.keys()}entries(){return this._hamt.entries()}get(e){return this._hamt.get(e)}has(e){return this._hamt.has(e)}set(e,t){return this._hamt.set(e,t),this}delete(e){return this._hamt.delete(e),this}clone(){return Xt(this)}toMap(){return new Map(this._hamt)}}function Xt(e){return It("recoil_hamt_2020")?new Gt(e):new Yt(e)}var Jt=Xt,en=Object.freeze({__proto__:null,persistentMap:Jt}),tn=function(e,...t){const n=new Set;e:for(const r of e){for(const e of t)if(e.has(r))continue e;n.add(r)}return n},nn=function(e,t){const n=new Map;return e.forEach(((e,r)=>{n.set(r,t(e,r))})),n};function rn(e,t,n){const{nodeDeps:r,nodeToNodeSubscriptions:o}=t;e.forEach(((e,t)=>{const i=r.get(t);i&&n&&i!==n.nodeDeps.get(t)||(r.set(t,new Set(e)),(null==i?e:tn(e,i)).forEach((e=>{o.has(e)||o.set(e,new Set),rt(o.get(e)).add(t)})),i&&tn(i,e).forEach((e=>{if(!o.has(e))return;const n=rt(o.get(e));n.delete(t),0===n.size&&o.delete(e)})))}))}var on={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),rt(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:nn(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:nn(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const r=rt(t.get(n));e.forEach((e=>r.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var r,o,i,a;const s=t.getState();n!==s.currentTree.version&&n!==(null===(r=s.nextTree)||void 0===r?void 0:r.version)&&(null===(o=s.previousTree)||void 0===o||o.version);const u=t.getGraph(n);if(rn(e,u),n===(null===(i=s.previousTree)||void 0===i?void 0:i.version)&&rn(e,t.getGraph(s.currentTree.version),u),n===(null===(a=s.previousTree)||void 0===a?void 0:a.version)||n===s.currentTree.version){var l;const n=null===(l=s.nextTree)||void 0===l?void 0:l.version;void 0!==n&&rn(e,t.getGraph(n),u)}}};let an=0,sn=0,un=0;var ln={getNextTreeStateVersion:()=>an++,getNextStoreID:()=>sn++,getNextComponentID:()=>un++};const{persistentMap:cn}=en,{graph:fn}=on,{getNextTreeStateVersion:dn}=ln;function pn(){const e=dn();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:cn(),nonvalidatedAtoms:cn()}}var hn={makeEmptyTreeState:pn,makeEmptyStoreState:function(){const e=pn();return{currentTree:e,nextTree:null,previousTree:null,commitDepth:0,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,fn()),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}},getNextTreeStateVersion:dn};class mn{}var vn={RetentionZone:mn,retentionZone:function(){return new mn}},yn={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n),r},mapByUpdatingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n(r.get(t))),r},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}},gn=function*(e,t){let n=0;for(const r of e)t(r,n++)&&(yield r)},bn=function(e,t){return new Proxy(e,{get:(e,n)=>(!(n in e)&&n in t&&(e[n]=t[n]()),e[n]),ownKeys:e=>Object.keys(e)})};const{getNode:wn,getNodeMaybe:Sn,recoilValuesForKeys:En}=Qt,{RetentionZone:kn}=vn,{setByAddingToSet:An}=yn,Cn=Object.freeze(new Set);class xn extends Error{}function Tn(e,t,n,r){const o=e.getState();if(o.nodeCleanupFunctions.has(n))return;const i=wn(n),a=function(e,t,n){if(!It("recoil_memory_managament_2020"))return()=>{};const{nodesRetainedByZone:r}=e.getState().retention;function o(e){let n=r.get(e);n||r.set(e,n=new Set),n.add(t)}if(n instanceof kn)o(n);else if(Array.isArray(n))for(const e of n)o(e);return()=>{if(!It("recoil_memory_managament_2020"))return;const{retention:r}=e.getState();function o(e){const n=r.nodesRetainedByZone.get(e);null==n||n.delete(t),n&&0===n.size&&r.nodesRetainedByZone.delete(e)}if(n instanceof kn)o(n);else if(Array.isArray(n))for(const e of n)o(e)}}(e,n,i.retainedBy),s=i.init(e,t,r);o.nodeCleanupFunctions.set(n,(()=>{s(),a()}))}function _n(e,t,n){return wn(n).peek(e,t)}function Pn(e,t,n){const r=new Set,o=Array.from(n),i=e.getGraph(t.version);for(let e=o.pop();e;e=o.pop()){var a;r.add(e);const t=null!==(a=i.nodeToNodeSubscriptions.get(e))&&void 0!==a?a:Cn;for(const e of t)r.has(e)||o.push(e)}return r}var Rn,On,Mn,Ln={getNodeLoadable:function(e,t,n){return Tn(e,t,n,"get"),wn(n).get(e,t)},peekNodeLoadable:_n,setNodeValue:function(e,t,n,r){const o=wn(n);if(null==o.set)throw new xn(`Attempt to set read-only RecoilValue: ${n}`);const i=o.set;return Tn(e,t,n,"set"),i(e,t,r)},initializeNode:function(e,t,n){Tn(e,e.getState().currentTree,t,n)},cleanUpNode:function(e,t){var n;const r=e.getState();null===(n=r.nodeCleanupFunctions.get(t))||void 0===n||n(),r.nodeCleanupFunctions.delete(t)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var r;const o=Sn(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),{...e,atomValues:e.atomValues.clone().delete(t),nonvalidatedAtoms:e.nonvalidatedAtoms.clone().set(t,n),dirtyAtoms:An(e.dirtyAtoms,t)}},peekNodeInfo:function(e,t,n){const r=e.getState(),o=e.getGraph(t.version),i=wn(n).nodeType;return bn({type:i},{loadable:()=>_n(e,t,n),isActive:()=>r.knownAtoms.has(n)||r.knownSelectors.has(n),isSet:()=>"selector"!==i&&t.atomValues.has(n),isModified:()=>t.dirtyAtoms.has(n),deps:()=>{var e;return En(null!==(e=o.nodeDeps.get(n))&&void 0!==e?e:[])},subscribers:()=>{var o,i;return{nodes:En(gn(Pn(e,t,new Set([n])),(e=>e!==n))),components:Vt(null!==(o=null===(i=r.nodeToComponentSubscriptions.get(n))||void 0===i?void 0:i.values())&&void 0!==o?o:[],(([e])=>({name:e})))}}})},getDownstreamNodes:Pn};const Nn=null!==(Rn=e.createMutableSource)&&void 0!==Rn?Rn:e.unstable_createMutableSource,In=null!==(On=e.useMutableSource)&&void 0!==On?On:e.unstable_useMutableSource,Vn=null!==(Mn=e.useSyncExternalStore)&&void 0!==Mn?Mn:e.unstable_useSyncExternalStore;var Dn={createMutableSource:Nn,useMutableSource:In,useSyncExternalStore:Vn,reactMode:function(){return It("recoil_transition_support")?{mode:"TRANSITION_SUPPORT",early:!0,concurrent:!0}:It("recoil_sync_external_store")&&null!=Vn?{mode:"SYNC_EXTERNAL_STORE",early:!0,concurrent:!1}:It("recoil_mutable_source")&&null!=In&&"undefined"!=typeof window&&!window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE?It("recoil_suppress_rerender_in_callback")?{mode:"MUTABLE_SOURCE",early:!0,concurrent:!0}:{mode:"MUTABLE_SOURCE",early:!1,concurrent:!1}:It("recoil_suppress_rerender_in_callback")?{mode:"LEGACY",early:!0,concurrent:!1}:{mode:"LEGACY",early:!1,concurrent:!1}}};const{getDownstreamNodes:jn,getNodeLoadable:Fn,setNodeValue:Un}=Ln,{getNextComponentID:zn}=ln,{getNode:Bn,getNodeMaybe:qn}=Qt,{DefaultValue:$n,RecoilValueNotReady:Hn}=Qt,{reactMode:Wn}=Dn,{AbstractRecoilValue:Qn,RecoilState:Kn,RecoilValueReadOnly:Zn,isRecoilValue:Yn}=Mt;function Gn(e,t,n){if("set"===n.type){const{recoilValue:r,valueOrUpdater:o}=n,i=function(e,t,{key:n},r){if("function"==typeof r){const o=Fn(e,t,n);if("loading"===o.state)throw new Hn(n);if("hasError"===o.state)throw o.contents;return r(o.contents)}return r}(e,t,r,o),a=Un(e,t,r.key,i);for(const[e,n]of a.entries())Xn(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:r}=n;Xn(t,e,r)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var r;const{recoilValue:{key:e},unvalidatedValue:o}=n,i=qn(e);null==i||null===(r=i.invalidate)||void 0===r||r.call(i,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,o),t.dirtyAtoms.add(e)}else n.type}function Xn(e,t,n){"hasValue"===n.state&&n.contents instanceof $n?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function Jn(e,t){e.replaceState((n=>{const r=nr(n);for(const n of t)Gn(e,r,n);return rr(e,r),r}))}function er(e,t){if(tr.length){const n=tr[tr.length-1];let r=n.get(e);r||n.set(e,r=[]),r.push(t)}else Jn(e,[t])}const tr=[];function nr(e){return{...e,atomValues:e.atomValues.clone(),nonvalidatedAtoms:e.nonvalidatedAtoms.clone(),dirtyAtoms:new Set(e.dirtyAtoms)}}function rr(e,t){const n=jn(e,t,t.dirtyAtoms);for(const e of n){var r,o;null===(r=qn(e))||void 0===r||null===(o=r.invalidate)||void 0===o||o.call(r,t)}}function or(e,t,n){er(e,{type:"set",recoilValue:t,valueOrUpdater:n})}var ir={RecoilValueReadOnly:Zn,AbstractRecoilValue:Qn,RecoilState:Kn,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var r,o;const i=e.getState();n.version!==i.currentTree.version&&n.version!==(null===(r=i.nextTree)||void 0===r?void 0:r.version)&&(n.version,null===(o=i.previousTree)||void 0===o||o.version);const a=Fn(e,n,t);return"loading"===a.state&&a.contents.catch((()=>{})),a},setRecoilValue:or,setRecoilValueLoadable:function(e,t,n){if(n instanceof $n)return or(e,t,n);er(e,{type:"setLoadable",recoilValue:t,loadable:n})},markRecoilValueModified:function(e,t){er(e,{type:"markModified",recoilValue:t})},setUnvalidatedRecoilValue:function(e,t,n){er(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n})},subscribeToRecoilValue:function(e,{key:t},n,r=null){const o=zn(),i=e.getState();i.nodeToComponentSubscriptions.has(t)||i.nodeToComponentSubscriptions.set(t,new Map),rt(i.nodeToComponentSubscriptions.get(t)).set(o,[null!=r?r:"<not captured>",n]);const a=Wn();if(a.early&&("LEGACY"===a.mode||"MUTABLE_SOURCE"===a.mode)){const r=e.getState().nextTree;r&&r.dirtyAtoms.has(t)&&n(r)}return{release:()=>{const n=e.getState(),r=n.nodeToComponentSubscriptions.get(t);void 0!==r&&r.has(o)&&(r.delete(o),0===r.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:Yn,applyAtomValueWrites:function(e,t){const n=e.clone();return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof $n?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return tr.push(e),()=>{for(const[t,n]of e)Jn(t,n);tr.pop()}},writeLoadableToTreeState:Xn,invalidateDownstreams:rr,copyTreeState:nr,refreshRecoilValue:function(e,t){var n;const{currentTree:r}=e.getState(),o=Bn(t.key);null===(n=o.clearCache)||void 0===n||n.call(o,e,r)},invalidateDownstreams_FOR_TESTING:rr},ar=function(e,t,n){const r=e.entries();let o=r.next();for(;!o.done;){const i=o.value;if(t.call(n,i[1],i[0],e))return!0;o=r.next()}return!1};const{cleanUpNode:sr}=Ln,{deleteNodeConfigIfPossible:ur,getNode:lr}=Qt,{RetentionZone:cr}=vn,fr=new Set;function dr(e,t){const n=e.getState(),r=n.currentTree;if(n.nextTree)return;const o=new Set;for(const e of t)if(e instanceof cr)for(const t of hr(n,e))o.add(t);else o.add(e);const i=function(e,t){const n=e.getState(),r=n.currentTree,o=e.getGraph(r.version),i=new Set,a=new Set;return function t(s){const u=new Set,l=function(e,t,n,r,o){const i=e.getGraph(t.version),a=[],s=new Set;for(;n.size>0;)u(rt(n.values().next().value));return a;function u(e){if(r.has(e)||o.has(e))return void n.delete(e);if(s.has(e))return;const t=i.nodeToNodeSubscriptions.get(e);if(t)for(const e of t)u(e);s.add(e),n.delete(e),a.push(e)}}(e,r,s,i,a);for(const e of l){var c;if("recoilRoot"===lr(e).retainedBy){a.add(e);continue}if((null!==(c=n.retention.referenceCounts.get(e))&&void 0!==c?c:0)>0){a.add(e);continue}if(mr(e).some((e=>n.retention.referenceCounts.get(e)))){a.add(e);continue}const t=o.nodeToNodeSubscriptions.get(e);t&&ar(t,(e=>a.has(e)))?a.add(e):(i.add(e),u.add(e))}const f=new Set;for(const e of u)for(const t of null!==(d=o.nodeDeps.get(e))&&void 0!==d?d:fr){var d;i.has(t)||f.add(t)}f.size&&t(f)}(t),i}(e,o);for(const t of i)pr(e,r,t)}function pr(e,t,n){if(!It("recoil_memory_managament_2020"))return;sr(e,n);const r=e.getState();r.knownAtoms.delete(n),r.knownSelectors.delete(n),r.nodeTransactionSubscriptions.delete(n),r.retention.referenceCounts.delete(n);const o=mr(n);for(const e of o){var i;null===(i=r.retention.nodesRetainedByZone.get(e))||void 0===i||i.delete(n)}t.atomValues.delete(n),t.dirtyAtoms.delete(n),t.nonvalidatedAtoms.delete(n);const a=r.graphsByVersion.get(t.version);if(a){const e=a.nodeDeps.get(n);if(void 0!==e){a.nodeDeps.delete(n);for(const t of e){var s;null===(s=a.nodeToNodeSubscriptions.get(t))||void 0===s||s.delete(n)}}a.nodeToNodeSubscriptions.delete(n)}ur(n)}function hr(e,t){var n;return null!==(n=e.retention.nodesRetainedByZone.get(t))&&void 0!==n?n:fr}function mr(e){const t=lr(e).retainedBy;return void 0===t||"components"===t||"recoilRoot"===t?[]:t instanceof cr?[t]:t}function vr(e,t){It("recoil_memory_managament_2020")&&(e.getState().retention.referenceCounts.delete(t),function(e,t){const n=e.getState();n.nextTree?n.retention.retainablesToCheckForRelease.add(t):dr(e,new Set([t]))}(e,t))}var yr={SUSPENSE_TIMEOUT_MS:12e4,updateRetainCount:function(e,t,n){var r;if(!It("recoil_memory_managament_2020"))return;const o=e.getState().retention.referenceCounts,i=(null!==(r=o.get(t))&&void 0!==r?r:0)+n;0===i?vr(e,t):o.set(t,i)},updateRetainCountToZero:vr,releaseScheduledRetainablesNow:function(e){if(!It("recoil_memory_managament_2020"))return;const t=e.getState();dr(e,t.retention.retainablesToCheckForRelease),t.retention.retainablesToCheckForRelease.clear()},retainedByOptionWithDefault:function(e){return void 0===e?"recoilRoot":e}};const{unstable_batchedUpdates:gr}=t;var br={unstable_batchedUpdates:gr};const{unstable_batchedUpdates:wr}=br;var Sr={unstable_batchedUpdates:wr};const{batchStart:Er}=ir,{unstable_batchedUpdates:kr}=Sr;let Ar=kr;var Cr={getBatcher:()=>Ar,setBatcher:e=>{Ar=e},batchUpdates:e=>{Ar((()=>{let t=()=>{};try{t=Er(),e()}finally{t()}}))}},xr={isSSR:"undefined"==typeof window,isReactNative:"undefined"!=typeof navigator&&"ReactNative"===navigator.product},Tr={memoizeWithArgsHash:function(e,t){let n;return(...r)=>{n||(n={});const o=t(...r);return Object.hasOwnProperty.call(n,o)||(n[o]=e.apply(this,r)),n[o]}},memoizeOneWithArgsHash:function(e,t){let n,r;return(...o)=>{const i=t(...o);return n===i||(n=i,r=e.apply(this,o)),r}},memoizeOneWithArgsHashAndInvalidation:function(e,t){let n,r;return[(...o)=>{const i=t(...o);return n===i||(n=i,r=e.apply(this,o)),r},()=>{n=null}]}};const{batchUpdates:_r}=Cr,{initializeNode:Pr,peekNodeInfo:Rr}=Ln,{graph:Or}=on,{getNextStoreID:Mr}=ln,{DEFAULT_VALUE:Lr,recoilValues:Nr,recoilValuesForKeys:Ir}=Qt,{AbstractRecoilValue:Vr,getRecoilValueAsLoadable:Dr,setRecoilValue:jr,setUnvalidatedRecoilValue:Fr}=ir,{updateRetainCount:Ur}=yr,{getNextTreeStateVersion:zr,makeEmptyStoreState:Br}=hn,{isSSR:qr}=xr,{memoizeOneWithArgsHashAndInvalidation:$r}=Tr;class Hr{constructor(e){ot(this,"_store",void 0),ot(this,"_refCount",1),ot(this,"getLoadable",(e=>(this.checkRefCount_INTERNAL(),Dr(this._store,e)))),ot(this,"getPromise",(e=>(this.checkRefCount_INTERNAL(),this.getLoadable(e).toPromise()))),ot(this,"getNodes_UNSTABLE",(e=>{if(this.checkRefCount_INTERNAL(),!0===(null==e?void 0:e.isModified)){if(!1===(null==e?void 0:e.isInitialized))return[];const t=this._store.getState().currentTree;return Ir(t.dirtyAtoms)}const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?Nr.values():!0===e.isInitialized?Ir(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):gn(Nr.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),ot(this,"getInfo_UNSTABLE",(({key:e})=>(this.checkRefCount_INTERNAL(),Rr(this._store,this._store.getState().currentTree,e)))),ot(this,"map",(e=>{this.checkRefCount_INTERNAL();const t=new Zr(this,_r);return e(t),t})),ot(this,"asyncMap",(async e=>{this.checkRefCount_INTERNAL();const t=new Zr(this,_r);return t.retain(),await e(t),t.autoRelease_INTERNAL(),t})),this._store={storeID:Mr(),getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return rt(n.get(t));const r=Or();return n.set(t,r),r},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw tt("Cannot subscribe to Snapshots")}};for(const e of this._store.getState().knownAtoms)Pr(this._store,e,"get"),Ur(this._store,e,1);this.autoRelease_INTERNAL()}retain(){this._refCount,this._refCount++;let e=!1;return()=>{e||(e=!0,this._release())}}autoRelease_INTERNAL(){qr||window.setTimeout((()=>this._release()),0)}_release(){if(this._refCount--,0===this._refCount){if(this._store.getState().nodeCleanupFunctions.forEach((e=>e())),this._store.getState().nodeCleanupFunctions.clear(),!It("recoil_memory_managament_2020"))return}else this._refCount}isRetained(){return this._refCount>0}checkRefCount_INTERNAL(){It("recoil_memory_managament_2020")&&this._refCount}getStore_INTERNAL(){return this.checkRefCount_INTERNAL(),this._store}getID(){return this.checkRefCount_INTERNAL(),this._store.getState().currentTree.stateID}}function Wr(e,t,n=!1){const r=e.getState(),o=n?zr():t.version;return{currentTree:n?{version:o,stateID:o,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:t.atomValues.clone(),nonvalidatedAtoms:t.nonvalidatedAtoms.clone()}:t,commitDepth:0,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map(Vt(r.nodeCleanupFunctions.entries(),(([e])=>[e,()=>{}])))}}const[Qr,Kr]=$r(((e,t)=>{const n=e.getState(),r="current"===t?n.currentTree:rt(n.previousTree);return new Hr(Wr(e,r))}),((e,t)=>{var n;return String(t)+String(e.storeID)+String(e.getState().currentTree.version)+String(null===(n=e.getState().previousTree)||void 0===n?void 0:n.version)}));class Zr extends Hr{constructor(e,t){super(Wr(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),ot(this,"_batch",void 0),ot(this,"set",((e,t)=>{this.checkRefCount_INTERNAL();const n=this.getStore_INTERNAL();this._batch((()=>{Ur(n,e.key,1),jr(this.getStore_INTERNAL(),e,t)}))})),ot(this,"reset",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();this._batch((()=>{Ur(t,e.key,1),jr(this.getStore_INTERNAL(),e,Lr)}))})),ot(this,"setUnvalidatedAtomValues_DEPRECATED",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();_r((()=>{for(const[n,r]of e.entries())Ur(t,n,1),Fr(t,new Vr(n),r)}))})),this._batch=t}}var Yr={Snapshot:Hr,MutableSnapshot:Zr,freshSnapshot:function(e){const t=new Hr(Br());return null!=e?t.map(e):t},cloneSnapshot:function(e,t="current"){const n=Qr(e,t);return n.isRetained()?n:(Kr(),Qr(e,t))}},Gr=Yr.Snapshot,Xr=Yr.MutableSnapshot,Jr=Yr.freshSnapshot,eo=Yr.cloneSnapshot,to=Object.freeze({__proto__:null,Snapshot:Gr,MutableSnapshot:Xr,freshSnapshot:Jr,cloneSnapshot:eo}),no=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useRef:ro}=e;var oo=function(e){const t=ro(e);return t.current===e&&"function"==typeof e&&(t.current=e()),t};const{getNextTreeStateVersion:io,makeEmptyStoreState:ao}=hn,{cleanUpNode:so,getDownstreamNodes:uo,initializeNode:lo,setNodeValue:co,setUnvalidatedAtomValue_DEPRECATED:fo}=Ln,{graph:po}=on,{cloneGraph:ho}=on,{getNextStoreID:mo}=ln,{createMutableSource:vo,reactMode:yo}=Dn,{applyAtomValueWrites:go}=ir,{releaseScheduledRetainablesNow:bo}=yr,{freshSnapshot:wo}=to,{useCallback:So,useContext:Eo,useEffect:ko,useMemo:Ao,useRef:Co,useState:xo}=e;function To(){throw tt("This component must be used inside a <RecoilRoot> component.")}const _o=Object.freeze({storeID:mo(),getState:To,replaceState:To,getGraph:To,subscribeToTransactions:To,addTransactionMetadata:To});let Po=!1;function Ro(e){if(Po)throw tt("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");const t=e.getState();if(null===t.nextTree){It("recoil_memory_managament_2020")&&It("recoil_release_on_cascading_update_killswitch_2021")&&t.commitDepth>0&&bo(e);const n=t.currentTree.version,r=io();t.nextTree={...t.currentTree,version:r,stateID:r,dirtyAtoms:new Set,transactionMetadata:{}},t.graphsByVersion.set(r,ho(rt(t.graphsByVersion.get(n))))}}const Oo=e.createContext({current:_o}),Mo=()=>Eo(Oo),Lo=e.createContext(null);function No(e,t,n){const r=uo(e,n,n.dirtyAtoms);for(const e of r){const r=t.nodeToComponentSubscriptions.get(e);if(r)for(const[e,[t,o]]of r)o(n)}}function Io(e){const t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){for(const[n,o]of t.nodeTransactionSubscriptions)if(r.has(n))for(const[t,n]of o)n(e);for(const[n,r]of t.transactionSubscriptions)r(e);(!yo().early||t.suspendedComponentResolvers.size>0)&&(No(e,t,n),t.suspendedComponentResolvers.forEach((e=>e())),t.suspendedComponentResolvers.clear())}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function Vo({setNotifyBatcherOfChange:e}){const t=Mo(),[,n]=xo([]);return e((()=>n({}))),ko((()=>(e((()=>n({}))),()=>{e((()=>{}))})),[e]),ko((()=>{Kt("Batcher",(()=>{!function(e){const t=e.getState();t.commitDepth++;try{const{nextTree:n}=t;if(null===n)return;t.previousTree=t.currentTree,t.currentTree=n,t.nextTree=null,Io(e),null!=t.previousTree&&t.graphsByVersion.delete(t.previousTree.version),t.previousTree=null,It("recoil_memory_managament_2020")&&bo(e)}finally{t.commitDepth--}}(t.current)}))})),null}let Do=0;function jo({initializeState_DEPRECATED:t,initializeState:n,store_INTERNAL:r,children:o}){let i;const a=e=>{const t=i.current.graphsByVersion;if(t.has(e))return rt(t.get(e));const n=po();return t.set(e,n),n},s=(e,t)=>{if(null==t){const{transactionSubscriptions:t}=d.current.getState(),n=Do++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=d.current.getState();n.has(t)||n.set(t,new Map);const r=Do++;return rt(n.get(t)).set(r,e),{release:()=>{const e=n.get(t);e&&(e.delete(r),0===e.size&&n.delete(t))}}}},u=e=>{Ro(d.current);for(const t of Object.keys(e))rt(d.current.getState().nextTree).transactionMetadata[t]=e[t]},l=e=>{Ro(d.current);const t=rt(i.current.nextTree);let n;try{Po=!0,n=e(t)}finally{Po=!1}n!==t&&(i.current.nextTree=n,yo().early&&No(d.current,i.current,n),rt(c.current)())},c=Co(null),f=So((e=>{c.current=e}),[c]),d=oo((()=>null!=r?r:{storeID:mo(),getState:()=>i.current,replaceState:l,getGraph:a,subscribeToTransactions:s,addTransactionMetadata:u}));null!=r&&(d.current=r),i=oo((()=>null!=t?function(e,t){const n=ao();return t({set:(t,r)=>{const o=n.currentTree,i=co(e,o,t.key,r),a=new Set(i.keys()),s=o.nonvalidatedAtoms.clone();for(const e of a)s.delete(e);n.currentTree={...o,dirtyAtoms:no(o.dirtyAtoms,a),atomValues:go(o.atomValues,i),nonvalidatedAtoms:s}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=fo(n.currentTree,t,e)}))}}),n}(d.current,t):null!=n?function(e){const t=wo().map(e),n=t.getStore_INTERNAL().getState();return t.retain(),n.nodeCleanupFunctions.forEach((e=>e())),n.nodeCleanupFunctions.clear(),n}(n):ao()));const p=Ao((()=>null==vo?void 0:vo(i,(()=>i.current.currentTree.version))),[i]);return ko((()=>{const e=d.current;for(const t of new Set(e.getState().knownAtoms))lo(e,t,"get");return()=>{for(const t of e.getState().knownAtoms)so(e,t)}}),[d]),e.createElement(Oo.Provider,{value:d},e.createElement(Lo.Provider,{value:p},e.createElement(Vo,{setNotifyBatcherOfChange:f}),o))}var Fo={RecoilRoot:function(t){const{override:n,...r}=t,o=Mo();return!1===n&&o.current!==_o?t.children:e.createElement(jo,r)},useStoreRef:Mo,useRecoilMutableSource:function(){const e=Eo(Lo);return e},useRecoilStoreID:function(){return Mo().current.storeID},notifyComponents_FOR_TESTING:No,sendEndOfBatchNotifications_FOR_TESTING:Io};const{useEffect:Uo,useRef:zo}=e;var Bo=function(e){const t=zo();return Uo((()=>{t.current=e})),t.current};const{useStoreRef:qo}=Fo,{SUSPENSE_TIMEOUT_MS:$o}=yr,{updateRetainCount:Ho}=yr,{RetentionZone:Wo}=vn,{useEffect:Qo,useRef:Ko}=e,{isSSR:Zo}=xr;var Yo=function(e){if(It("recoil_memory_managament_2020"))return function(e){const t=(Array.isArray(e)?e:[e]).map((e=>e instanceof Wo?e:e.key)),n=qo();Qo((()=>{if(!It("recoil_memory_managament_2020"))return;const e=n.current;if(r.current&&!Zo)window.clearTimeout(r.current),r.current=null;else for(const n of t)Ho(e,n,1);return()=>{for(const n of t)Ho(e,n,-1)}}),[n,...t]);const r=Ko(),o=Bo(t);if(!(Zo||void 0!==o&&function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0}(o,t))){const e=n.current;for(const n of t)Ho(e,n,1);if(o)for(const t of o)Ho(e,t,-1);r.current&&window.clearTimeout(r.current),r.current=window.setTimeout((()=>{r.current=null;for(const n of t)Ho(e,n,-1)}),$o)}}(e)};const{useRef:Go}=e;var Xo=function(){return Go(),"<component name not available>"};const{batchUpdates:Jo}=Cr,{DEFAULT_VALUE:ei}=Qt,{reactMode:ti,useMutableSource:ni,useSyncExternalStore:ri}=Dn,{useRecoilMutableSource:oi,useStoreRef:ii}=Fo,{isRecoilValue:ai}=Mt,{AbstractRecoilValue:si,getRecoilValueAsLoadable:ui,setRecoilValue:li,setUnvalidatedRecoilValue:ci,subscribeToRecoilValue:fi}=ir,{useCallback:di,useEffect:pi,useMemo:hi,useRef:mi,useState:vi}=e,{setByAddingToSet:yi}=yn;function gi(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:tt(`Invalid value of loadable atom "${t.key}"`)}function bi(e){const t=ii(),n=Xo(),r=di((()=>{var n;const r=t.current,o=r.getState(),i=ti().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return{loadable:ui(r,e,i),key:e.key}}),[t,e]),o=di((e=>{let t;return()=>{var n,r;const o=e();return null!==(n=t)&&void 0!==n&&n.loadable.is(o.loadable)&&(null===(r=t)||void 0===r?void 0:r.key)===o.key?t:(t=o,o)}}),[]),i=hi((()=>o(r)),[r,o]),a=di((r=>{const o=t.current;return fi(o,e,r,n).release}),[t,e,n]);return ri(a,i,i).loadable}function wi(e){const t=ii(),n=di((()=>{var n;const r=t.current,o=r.getState(),i=ti().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return ui(r,e,i)}),[t,e]),r=di((()=>n()),[n]),o=Xo(),i=di(((r,i)=>{const a=t.current;return fi(a,e,(()=>{if(!It("recoil_suppress_rerender_in_callback"))return i();const e=n();u.current.is(e)||i(),u.current=e}),o).release}),[t,e,o,n]),a=oi();if(null==a)throw tt("Recoil hooks must be used in components contained within a <RecoilRoot> component.");const s=ni(a,r,i),u=mi(s);return pi((()=>{u.current=s})),s}function Si(e){const t=ii(),n=Xo(),r=di((()=>{var n;const r=t.current,o=r.getState(),i=ti().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return ui(r,e,i)}),[t,e]),o=di((()=>({loadable:r(),key:e.key})),[r,e.key]),i=di((e=>{const t=o();return e.loadable.is(t.loadable)&&e.key===t.key?e:t}),[o]);pi((()=>{const r=fi(t.current,e,(e=>{s(i)}),n);return s(i),r.release}),[n,e,t,i]);const[a,s]=vi(o);return a.key!==e.key?o().loadable:a.loadable}function Ei(e){const t=ii(),[,n]=vi([]),r=Xo(),o=di((()=>{var n;const r=t.current,o=r.getState(),i=ti().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return ui(r,e,i)}),[t,e]),i=o(),a=mi(i);return pi((()=>{a.current=i})),pi((()=>{const i=t.current,s=i.getState(),u=fi(i,e,(e=>{var t;if(!It("recoil_suppress_rerender_in_callback"))return n([]);const r=o();null!==(t=a.current)&&void 0!==t&&t.is(r)||n(r),a.current=r}),r);if(s.nextTree)i.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{a.current=null,n([])}));else{var l;if(!It("recoil_suppress_rerender_in_callback"))return n([]);const e=o();null!==(l=a.current)&&void 0!==l&&l.is(e)||n(e),a.current=e}return u.release}),[r,o,e,t]),i}function ki(e){return It("recoil_memory_managament_2020")&&Yo(e),{TRANSITION_SUPPORT:Si,SYNC_EXTERNAL_STORE:bi,MUTABLE_SOURCE:wi,LEGACY:Ei}[ti().mode](e)}function Ai(e){const t=ii();return gi(ki(e),e,t)}function Ci(e){const t=ii();return di((n=>{li(t.current,e,n)}),[t,e])}function xi(e){return It("recoil_memory_managament_2020")&&Yo(e),Si(e)}function Ti(e){const t=ii();return gi(xi(e),e,t)}var _i={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useRecoilInterface:function(){const e=Xo(),t=ii(),[,n]=vi([]),r=mi(new Set);r.current=new Set;const o=mi(new Set),i=mi(new Map),a=di((e=>{const t=i.current.get(e);t&&(t.release(),i.current.delete(e))}),[i]),s=di(((e,t)=>{i.current.has(t)&&n([])}),[]);return pi((()=>{const n=t.current;tn(r.current,o.current).forEach((t=>{if(i.current.has(t))return;const r=fi(n,new si(t),(e=>s(e,t)),e);i.current.set(t,r),n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{s(n.getState(),t)})):s(n.getState(),t)})),tn(o.current,r.current).forEach((e=>{a(e)})),o.current=r.current})),pi((()=>{const n=i.current;return tn(r.current,new Set(n.keys())).forEach((r=>{const o=fi(t.current,new si(r),(e=>s(e,r)),e);n.set(r,o)})),()=>n.forEach(((e,t)=>a(t)))}),[e,t,a,s]),hi((()=>{function e(e){return n=>{li(t.current,e,n)}}function n(e){var n;r.current.has(e.key)||(r.current=yi(r.current,e.key));const o=t.current.getState();return ui(t.current,e,ti().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree)}function o(e){return gi(n(e),e,t)}return{getRecoilValue:o,getRecoilValueLoadable:n,getRecoilState:function(t){return[o(t),e(t)]},getRecoilStateLoadable:function(t){return[n(t),e(t)]},getSetRecoilState:e,getResetRecoilState:function(e){return()=>li(t.current,e,ei)}}}),[r,t])},useRecoilState:function(e){return[Ai(e),Ci(e)]},useRecoilStateLoadable:function(e){return[ki(e),Ci(e)]},useRecoilValue:Ai,useRecoilValueLoadable:ki,useResetRecoilState:function(e){const t=ii();return di((()=>{li(t.current,e,ei)}),[t,e])},useSetRecoilState:Ci,useSetUnvalidatedAtomValues:function(){const e=ii();return(t,n={})=>{Jo((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>ci(e.current,new si(n),t)))}))}},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:xi,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Ti,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:function(e){return[Ti(e),Ci(e)]}};const{batchUpdates:Pi}=Cr,{DEFAULT_VALUE:Ri,getNode:Oi,nodes:Mi}=Qt,{useStoreRef:Li}=Fo,{AbstractRecoilValue:Ni,setRecoilValueLoadable:Ii}=ir,{SUSPENSE_TIMEOUT_MS:Vi}=yr,{cloneSnapshot:Di}=to,{useCallback:ji,useEffect:Fi,useRef:Ui,useState:zi}=e,{isSSR:Bi}=xr;function qi(e){const t=Li();Fi((()=>t.current.subscribeToTransactions(e).release),[e,t])}function $i(e){const t=e.atomValues.toMap(),n=nn(function(e,t){const n=new Map;for(const[r,o]of e)t(o,r)&&n.set(r,o);return n}(t,((e,t)=>{const n=Oi(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const r=e[n].keys();let o;for(;!(o=r.next()).done;)t.set(o.value,e[n].get(o.value))}return t}(e.nonvalidatedAtoms.toMap(),n)}function Hi(e,t){var n;const r=e.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,i=t.getStore_INTERNAL().getState().currentTree;Pi((()=>{const n=new Set;for(const e of[o.atomValues.keys(),i.atomValues.keys()])for(const t of e){var r,a;(null===(r=o.atomValues.get(t))||void 0===r?void 0:r.contents)!==(null===(a=i.atomValues.get(t))||void 0===a?void 0:a.contents)&&Oi(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{Ii(e,new Ni(t),i.atomValues.has(t)?rt(i.atomValues.get(t)):Ri)})),e.replaceState((e=>({...e,stateID:t.getID()})))}))}var Wi={useRecoilSnapshot:function(){const e=Li(),[t,n]=zi((()=>Di(e.current))),r=Bo(t),o=Ui(),i=Ui();var a;(qi(ji((e=>n(Di(e))),[])),Fi((()=>{const e=t.retain();var n;return o.current&&!Bi&&(window.clearTimeout(o.current),o.current=null,null===(n=i.current)||void 0===n||n.call(i),i.current=null),e}),[t]),r===t||Bi)||(o.current&&(window.clearTimeout(o.current),o.current=null,null===(a=i.current)||void 0===a||a.call(i),i.current=null),i.current=t.retain(),o.current=window.setTimeout((()=>{var e;o.current=null,null===(e=i.current)||void 0===e||e.call(i),i.current=null}),Vi));return t},gotoSnapshot:Hi,useGotoRecoilSnapshot:function(){const e=Li();return ji((t=>Hi(e.current,t)),[e])},useRecoilTransactionObserver:function(e){qi(ji((t=>{const n=Di(t,"current"),r=Di(t,"previous");e({snapshot:n,previousSnapshot:r})}),[e]))},useTransactionObservation_DEPRECATED:function(e){qi(ji((t=>{let n=t.getState().previousTree;const r=t.getState().currentTree;n||(n=t.getState().currentTree);const o=$i(r),i=$i(n),a=nn(Mi,(e=>{var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),s=function(e,t){const n=new Set;for(const r of e)t(r)&&n.add(r);return n}(r.dirtyAtoms,(e=>o.has(e)||i.has(e)));e({atomValues:o,previousAtomValues:i,atomInfo:a,modifiedAtoms:s,transactionMetadata:{...r.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:qi};const{peekNodeInfo:Qi}=Ln,{useStoreRef:Ki}=Fo;const{reactMode:Zi}=Dn,{RecoilRoot:Yi,useStoreRef:Gi}=Fo,{useMemo:Xi}=e;const{loadableWithValue:Ji}=kt,{initializeNode:ea}=Ln,{DEFAULT_VALUE:ta,getNode:na}=Qt,{copyTreeState:ra,getRecoilValueAsLoadable:oa,invalidateDownstreams:ia,writeLoadableToTreeState:aa}=ir;function sa(e){return"atom"===na(e.key).nodeType}class ua{constructor(e,t){ot(this,"_store",void 0),ot(this,"_treeState",void 0),ot(this,"_changes",void 0),ot(this,"get",(e=>{if(this._changes.has(e.key))return this._changes.get(e.key);if(!sa(e))throw tt("Reading selectors within atomicUpdate is not supported");const t=oa(this._store,e,this._treeState);if("hasValue"===t.state)return t.contents;throw"hasError"===t.state?t.contents:tt(`Expected Recoil atom ${e.key} to have a value, but it is in a loading state.`)})),ot(this,"set",((e,t)=>{if(!sa(e))throw tt("Setting selectors within atomicUpdate is not supported");if("function"==typeof t){const n=this.get(e);this._changes.set(e.key,t(n))}else ea(this._store,e.key,"set"),this._changes.set(e.key,t)})),ot(this,"reset",(e=>{this.set(e,ta)})),this._store=e,this._treeState=t,this._changes=new Map}newTreeState_INTERNAL(){if(0===this._changes.size)return this._treeState;const e=ra(this._treeState);for(const[t,n]of this._changes)aa(e,t,Ji(n));return ia(this._store,e),e}}var la=function(e){return t=>{e.replaceState((n=>{const r=new ua(e,n);return t(r),r.newTreeState_INTERNAL()}))}},ca=Object.freeze({__proto__:null,atomicUpdater:la}),fa=function(e,t){if(!e)throw new Error(t)};const{atomicUpdater:da}=ca,{batchUpdates:pa}=Cr,{DEFAULT_VALUE:ha}=Qt,{useStoreRef:ma}=Fo,{refreshRecoilValue:va,setRecoilValue:ya}=ir,{Snapshot:ga,cloneSnapshot:ba}=to,{gotoSnapshot:wa}=Wi,{useCallback:Sa}=e;class Ea{}const ka=new Ea;function Aa(e,t,n,r){let o=ka;return pa((()=>{const i="useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";if("function"!=typeof t)throw tt(i);const a=bn({...null!=r?r:{},set:(t,n)=>ya(e,t,n),reset:t=>ya(e,t,ha),refresh:t=>va(e,t),gotoSnapshot:t=>wa(e,t),transact_UNSTABLE:t=>da(e)(t)},{snapshot:()=>ba(e)}),s=t(a);if("function"!=typeof s)throw tt(i);o=s(...n)})),o instanceof Ea&&fa(!1),o}var Ca={recoilCallback:Aa,useRecoilCallback:function(e,t){const n=ma();return Sa(((...t)=>Aa(n.current,e,t)),null!=t?[...t,n]:void 0)}};const{useStoreRef:xa}=Fo,{refreshRecoilValue:Ta}=ir,{useCallback:_a}=e;const{atomicUpdater:Pa}=ca,{useStoreRef:Ra}=Fo,{useMemo:Oa}=e;const Ma=(e,t,n)=>{var r;if(null==e)return;if(null==n||null===(r=n.onNodeVisit)||void 0===r||r.call(n,e),"leaf"===e.type)return e;const o=t(e.nodeKey);return Ma(e.branches.get(o),t,n)},La=(e,t,n,r,o,i,a)=>{var s;let u;if(null==e)if(0===t.length)u={type:"leaf",value:r,parent:n,branchKey:o};else{const[e,...s]=t,[l,c]=e;u={type:"branch",nodeKey:l,parent:n,branches:new Map,branchKey:o},u.branches.set(c,La(null,s,u,r,c,i,a))}else if(u=e,t.length){const[n,...o]=t,[s,l]=n;if("branch"!==e.type||e.nodeKey!==s)return a(),u;e.branches.set(l,La(e.branches.get(l),o,e,r,l,i,a))}return null==i||null===(s=i.onNodeVisit)||void 0===s||s.call(i,u),u},Na=(e,t,n)=>n?(0===t.branches.size&&n.branches.delete(t.branchKey),Na(e,n,n.parent)):e===t,Ia=e=>"leaf"===e.type?1:Array.from(e.branches.values()).reduce(((e,t)=>e+Ia(t)),0);var Va=class{constructor(e){var t,n,r;ot(this,"_numLeafs",void 0),ot(this,"_root",void 0),ot(this,"_onHit",void 0),ot(this,"_onSet",void 0),ot(this,"_mapNodeValue",void 0),this._numLeafs=0,this._root=null,this._onHit=null!==(t=null==e?void 0:e.onHit)&&void 0!==t?t:()=>{},this._onSet=null!==(n=null==e?void 0:e.onSet)&&void 0!==n?n:()=>{},this._mapNodeValue=null!==(r=null==e?void 0:e.mapNodeValue)&&void 0!==r?r:e=>e}size(){return this._numLeafs}root(){return this._root}get(e,t){var n;return null===(n=this.getLeafNode(e,t))||void 0===n?void 0:n.value}getLeafNode(e,t){return Ma(this.root(),(t=>this._mapNodeValue(e(t))),{onNodeVisit:e=>{null==t||t.onNodeVisit(e),"leaf"===e.type&&this._onHit(e)}})}set(e,t,n){let r,o=null;const i=()=>{o=La(this.root(),e.map((([e,t])=>[e,this._mapNodeValue(t)])),null,t,null,{onNodeVisit:e=>{null==n||n.onNodeVisit(e),"leaf"===e.type&&(r=e)}},(()=>{this.clear(),i()}))};i(),this.root()||(this._root=o),this._numLeafs++,this._onSet(rt(r))}delete(e){if(!this.root())return!1;const t=rt(this.root());return!!((e,t,n)=>n?(n.branches.delete(t.branchKey),Na(e,n,n.parent)):e===t)(t,e,e.parent)&&(e===t||"branch"===t.type&&!t.branches.size?(this._root=null,this._numLeafs=0,!0):(this._numLeafs-=Ia(e),!0))}clear(){this._numLeafs=0,this._root=null}},Da=Object.freeze({__proto__:null,TreeCache:Va}),ja=class{constructor(e){var t;ot(this,"_maxSize",void 0),ot(this,"_size",void 0),ot(this,"_head",void 0),ot(this,"_tail",void 0),ot(this,"_map",void 0),ot(this,"_keyMapper",void 0),this._maxSize=e.maxSize,this._size=0,this._head=null,this._tail=null,this._map=new Map,this._keyMapper=null!==(t=e.mapKey)&&void 0!==t?t:e=>e}head(){return this._head}tail(){return this._tail}size(){return this._size}maxSize(){return this._maxSize}has(e){return this._map.has(this._keyMapper(e))}get(e){const t=this._keyMapper(e),n=this._map.get(t);if(n)return this.set(e,n.value),n.value}set(e,t){const n=this._keyMapper(e);this._map.get(n)&&this.delete(e);const r=this.head(),o={key:e,right:r,left:null,value:t};r?r.left=o:this._tail=o,this._map.set(n,o),this._head=o,this._size++,this._maybeDeleteLRU()}_maybeDeleteLRU(){this.size()>this.maxSize()&&this.deleteLru()}deleteLru(){const e=this.tail();e&&this.delete(e.key)}delete(e){const t=this._keyMapper(e);if(!this._size||!this._map.has(t))return;const n=rt(this._map.get(t)),r=n.right,o=n.left;r&&(r.left=n.left),o&&(o.right=n.right),n===this.head()&&(this._head=r),n===this.tail()&&(this._tail=o),this._map.delete(t),this._size--}clear(){this._size=0,this._head=null,this._tail=null,this._map=new Map}},Fa=Object.freeze({__proto__:null,LRUCache:ja});const{LRUCache:Ua}=Fa,{TreeCache:za}=Da;var Ba=function(e,t=(e=>e)){const n=new Ua({maxSize:e}),r=new za({mapNodeValue:t,onHit:e=>{n.set(e,!0)},onSet:t=>{const o=n.tail();n.set(t,!0),o&&r.size()>e&&r.delete(o.key)}});return r};function qa(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw tt("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var r;if("object"!=typeof e)return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(nt(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>qa(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return qa(e.toJSON(n),t,n);if(e instanceof Map){const r={};for(const[n,o]of e)r["string"==typeof n?n:qa(n,t)]=o;return qa(r,t,n)}return e instanceof Set?qa(Array.from(e).sort(((e,n)=>qa(e,t).localeCompare(qa(n,t)))),t,n):void 0!==Symbol&&null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?qa(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${qa(n,t)}:${qa(e[n],t,n)}`)).join(",")}}`}var $a=function(e,t={allowFunctions:!1}){return qa(e,t)};const{TreeCache:Ha}=Da,Wa={equality:"reference",eviction:"keep-all",maxSize:1/0};const{isReactNative:Qa,isSSR:Ka}=xr;const{loadableWithError:Za,loadableWithPromise:Ya,loadableWithValue:Ga}=kt,{getNodeLoadable:Xa,peekNodeLoadable:Ja,setNodeValue:es}=Ln,{saveDependencyMapToStore:ts}=on,{DEFAULT_VALUE:ns,RecoilValueNotReady:rs,getConfigDeletionHandler:os,getNode:is,registerNode:as}=Qt,{isRecoilValue:ss}=Mt,{markRecoilValueModified:us}=ir,{retainedByOptionWithDefault:ls}=yr,{recoilCallback:cs}=Ca,{startPerfBlock:fs}={startPerfBlock:function(e){return()=>null}};class ds{}const ps=new ds,hs=[],ms=new Map,vs=(()=>{let e=0;return()=>e++})();var ys=function(e){let t=null;const{key:n,get:r,cachePolicy_UNSTABLE:o}=e,i=null!=e.set?e.set:void 0,a=new Set,s=function({equality:e=Wa.equality,eviction:t=Wa.eviction,maxSize:n=Wa.maxSize}=Wa){const r=function(e){switch(e){case"reference":return e=>e;case"value":return e=>$a(e)}throw tt(`Unrecognized equality policy ${e}`)}(e),o=function(e,t,n){switch(e){case"keep-all":return new Ha({mapNodeValue:n});case"lru":return Ba(rt(t),n);case"most-recent":return Ba(1,n)}throw tt(`Unrecognized eviction policy ${e}`)}(t,n,r);return o}(null!=o?o:{equality:"reference",eviction:"keep-all"}),u=ls(e.retainedBy_UNSTABLE),l=new Map;let c=0;function f(){return!It("recoil_memory_managament_2020")||c>0}function d(e){return e.getState().knownSelectors.add(n),c++,()=>{c--}}function p(){return void 0!==os(n)&&!f()}function h(e,t,n,r,o){_(t,r,o),b(e,t,new Set(o.keys()),n),m(e,n)}function m(e,n){T(e,n)&&x(e);const r=ms.get(n);if(void 0!==r){for(const e of r)us(e,rt(t));ms.delete(n)}}function v(e,t){let n=ms.get(t);null==n&&ms.set(t,n=new Set),n.add(e)}function y(e,t,n){const r=e.getState().knownSelectors.has(n);if(r&&t.atomValues.has(n))return rt(t.atomValues.get(n));const o=Xa(e,t,n);return"loading"!==o.state&&r&&t.atomValues.set(n,o),o}function g(e,t,n,r,o,i){return t.then((r=>{if(!f())throw x(e),ps;null!=i.loadingDepKey&&i.loadingDepPromise===t?n.atomValues.set(i.loadingDepKey,Ga(r)):e.getState().knownSelectors.forEach((e=>{n.atomValues.delete(e)}));const a=S(e,n);if(a&&"loading"!==a.state){if((T(e,o)||null==A(e))&&m(e,o),"hasValue"===a.state)return a.contents;throw a.contents}if(!T(e,o)){const e=E(n);if("loading"===(null==e?void 0:e.latestLoadable.state))return e.latestLoadable.contents}const[s,u]=w(e,n,o);if(C(e,o,u),"loading"!==s.state&&h(e,n,o,s,u),"hasError"===s.state)throw s.contents;return s.contents})).catch((t=>{if(t instanceof ds)throw ps;if(!f())throw x(e),ps;const i=Za(t);throw h(e,n,o,i,r),t}))}function b(e,t,r,o){var i,s,u,l,c,f,d;(T(e,o)||t.version===(null===(i=e.getState())||void 0===i||null===(s=i.currentTree)||void 0===s?void 0:s.version)||t.version===(null===(u=e.getState())||void 0===u||null===(l=u.nextTree)||void 0===l?void 0:l.version))&&(ts(new Map([[n,r]]),e,null!==(c=null===(f=e.getState())||void 0===f||null===(d=f.nextTree)||void 0===d?void 0:d.version)&&void 0!==c?c:e.getState().currentTree.version),r.forEach((e=>a.add(e))))}function w(e,o,i){const a=fs(n);let s=!0;const u=()=>{a(),s=!1};let l,c,d=!1;const p={loadingDepKey:null,loadingDepPromise:null},m=new Map,v=new Set;function w(t){const{key:n}=t;!function(e,t,n,r,o){n.add(r),b(e,t,n,o)}(e,o,v,n,i);const r=y(e,o,n);switch(m.set(n,r),r.state){case"hasValue":return r.contents;case"hasError":throw r.contents;case"loading":throw p.loadingDepKey=n,p.loadingDepPromise=r.contents,r.contents}throw tt("Invalid Loadable state")}b(e,o,v,i);const S=n=>(...r)=>{if(s)throw tt("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");return null==t&&fa(!1),cs(e,n,r,{node:t})};try{l=r({get:w,getCallback:S}),l=ss(l)?w(l):l,nt(l)?l=function(e,t,n,r,o,i){return t.then((t=>{if(!f())throw x(e),ps;const i=Ga(t);return h(e,n,o,i,r),t})).catch((t=>{if(!f())throw x(e),ps;if(C(e,o,r),nt(t))return g(e,t,n,r,o,i);const a=Za(t);throw h(e,n,o,a,r),t}))}(e,l,o,m,i,p).finally(u):u()}catch(t){l=t,nt(l)?l=g(e,l,o,m,i,p).finally(u):(d=!0,u())}return c=d?Za(l):nt(l)?Ya(l):Ga(l),[c,m]}function S(e,t){const r=new Set,o=A(e);let i;try{i=s.get((n=>("string"!=typeof n&&fa(!1),y(e,t,n).contents)),{onNodeVisit:e=>{"branch"===e.type&&e.nodeKey!==n&&r.add(e.nodeKey)}})}catch(e){throw tt(`Problem with cache lookup for selector "${n}": ${e.message}`)}return i&&b(e,t,r,null==o?void 0:o.latestExecutionId),i}function E(e){var t;const[,n]=null!==(t=Array.from(l.entries()).find((([t,n])=>null!=n.latestLoadable&&null!=n.latestExecutionId&&!function(e,t){var n,r;const o=A(e),i=null!==(n=null==o?void 0:o.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,a=Array((null!==(r=k.get(t.version))&&void 0!==r?r:new Map).entries()),s=k.has(t.version)&&a.length===i.size&&a.every((([e,t])=>i.get(e)===t));return null!=i&&t.version!==(null==o?void 0:o.stateVersion)&&!s&&(k.set(t.version,new Map(i)),Array.from(i).some((([n,r])=>y(e,t,n).contents!==r.contents)))}(t,e))))&&void 0!==t?t:[];return n}const k=new Map;function A(e){return l.get(e)}function C(e,t,n){if(T(e,t)){const t=A(e);null!=t&&(t.depValuesDiscoveredSoFarDuringAsyncWork=n)}}function x(e){l.delete(e)}function T(e,t){var n;return t===(null===(n=A(e))||void 0===n?void 0:n.latestExecutionId)}function _(e,t,r){e.atomValues.set(n,t);try{s.set(function(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}(r),t)}catch(e){throw tt(`Problem with setting cache for selector "${n}": ${e.message}`)}}function P(e,t){return s.get((n=>{var r;return"string"!=typeof n&&fa(!1),null===(r=Ja(e,t,n))||void 0===r?void 0:r.contents}))}function R(e,t){return function(r){if(hs.includes(n)){const e=`Recoil selector has circular dependencies: ${hs.slice(hs.indexOf(n)).join(" → ")}`;return Za(tt(e))}hs.push(n);try{return function(e,t){const n=S(e,t);if(null!=n)return x(e),n;const r=E(t);var o;return null!=r?("loading"===(null===(o=r.latestLoadable)||void 0===o?void 0:o.state)&&v(e,rt(r.latestExecutionId)),rt(r.latestLoadable)):function(e,t){const n=vs(),[r,o]=w(e,t,n);return"loading"===r.state?(function(e,t,n,r,o){l.set(e,{depValuesDiscoveredSoFarDuringAsyncWork:r,latestExecutionId:t,latestLoadable:n,stateVersion:o.version})}(e,n,r,o,t),v(e,n)):(x(e),_(t,r,o)),r}(e,t)}(e,t)}finally{hs.pop()}}()}function O(e){e.atomValues.delete(n)}function M(e,n){null==t&&fa(!1);for(const t of a){var r;const o=is(t);null===(r=o.clearCache)||void 0===r||r.call(o,e,n)}a.clear(),O(n),s.clear(),us(e,t)}if(null!=i){const r=(e,t,n)=>{let r=!1;const o=new Map;function a({key:n}){if(r)throw tt("Recoil: Async selector sets are not currently supported.");const o=y(e,t,n);if("hasValue"===o.state)return o.contents;throw"loading"===o.state?new rs(n):o.contents}function s(n,i){if(r)throw tt("Recoil: Async selector sets are not currently supported.");const s="function"==typeof i?i(a(n)):i;es(e,t,n.key,s).forEach(((e,t)=>o.set(t,e)))}const u=i({set:s,get:a,reset:function(e){s(e,ns)}},n);if(void 0!==u)throw nt(u)?tt("Recoil: Async selector sets are not currently supported."):tt("Recoil: selector set should be a void function.");return r=!0,o};return t=as({key:n,nodeType:"selector",peek:P,get:R,set:r,init:d,invalidate:O,clearCache:M,shouldDeleteConfigOnRelease:p,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:u})}return t=as({key:n,nodeType:"selector",peek:P,get:R,init:d,invalidate:O,clearCache:M,shouldDeleteConfigOnRelease:p,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:u})};const{loadableWithError:gs,loadableWithPromise:bs,loadableWithValue:ws}=kt,{peekNodeInfo:Ss}=Ln,{DEFAULT_VALUE:Es,DefaultValue:ks,getConfigDeletionHandler:As,registerNode:Cs,setConfigDeletionHandler:xs}=Qt,{isRecoilValue:Ts}=Mt,{getRecoilValueAsLoadable:_s,markRecoilValueModified:Ps,setRecoilValue:Rs,setRecoilValueLoadable:Os}=ir,{retainedByOptionWithDefault:Ms}=yr;var Ls=function e(t){const{default:n,...r}=t;return Ts(n)?function(t){const n=e({...t,default:Es,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof ks?e:rt(t.persistence_UNSTABLE).validator(e,Es)},effects:t.effects,effects_UNSTABLE:t.effects_UNSTABLE}),r=ys({key:`${t.key}__withFallback`,get:({get:e})=>{const r=e(n);return r instanceof ks?t.default:r},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability});return xs(r.key,As(t.key)),r}({...r,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e,r=Ms(e.retainedBy_UNSTABLE);let o,i=0,a=nt(e.default)?bs(e.default.then((e=>(a=ws(e),e))).catch((e=>{throw a=gs(e),e}))):ws(e.default);e.default;const s=new Map;function u(e,n){var r,i;return null!==(r=null!==(i=n.atomValues.get(t))&&void 0!==i?i:o)&&void 0!==r?r:a}const l=Cs({key:t,nodeType:"atom",peek:u,get:function(e,r){if(r.atomValues.has(t))return rt(r.atomValues.get(t));if(r.nonvalidatedAtoms.has(t)){if(null!=o)return o;if(null==n)return a;const e=r.nonvalidatedAtoms.get(t),i=n.validator(e,Es),s=i instanceof ks?a:ws(i);return o=s,o}return a},set:function(e,n,r){if(n.atomValues.has(t)){const e=rt(n.atomValues.get(t));if("hasValue"===e.state&&r===e.contents)return new Map}else if(!n.nonvalidatedAtoms.has(t)&&r instanceof ks)return new Map;return o=void 0,(new Map).set(t,ws(r))},init:function(n,r,o){var c;if(i++,n.getState().knownAtoms.add(t),"loading"===a.state){const e=()=>{var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||Ps(n,l)};a.contents.finally(e)}const f=null!==(c=e.effects)&&void 0!==c?c:e.effects_UNSTABLE;if(null!=f){let e=!0,i=Es,c=!1,h=null;function m(o){if(e&&o.key===t){const e=i;return e instanceof ks?u(0,r):nt(e)?bs(e.then((e=>e instanceof ks?a.toPromise():e))):ws(e)}return _s(n,o)}function v(e){return m(e).toPromise()}function y(r){var o;const a=Ss(n,null!==(o=n.getState().nextTree)&&void 0!==o?o:n.getState().currentTree,r.key);return!e||r.key!==t||i instanceof ks?a:{...a,isSet:!0,loadable:m(r)}}const g=t=>r=>{if(e){const e=m(l),n="hasValue"===e.state?e.contents:Es;i="function"==typeof r?r(n):r,nt(i)&&(i=i.then((e=>(h={effect:t,value:e},e))))}else{if(nt(r))throw tt("Setting atoms to async values is not implemented.");"function"!=typeof r&&(h={effect:t,value:r}),Rs(n,l,"function"==typeof r?e=>{const n=r(e);return h={effect:t,value:n},n}:r)}},b=e=>()=>g(e)(Es),w=e=>r=>{var o;const{release:i}=n.subscribeToTransactions((n=>{var o;let{currentTree:i,previousTree:s}=n.getState();s||(s=i);const u=null!==(o=i.atomValues.get(t))&&void 0!==o?o:a;if("hasValue"===u.state){var l,c,f,d;const n=u.contents,o=null!==(l=s.atomValues.get(t))&&void 0!==l?l:a,p="hasValue"===o.state?o.contents:Es;(null===(c=h)||void 0===c?void 0:c.effect)!==e||(null===(f=h)||void 0===f?void 0:f.value)!==n?r(n,p,!i.atomValues.has(t)):(null===(d=h)||void 0===d?void 0:d.effect)===e&&(h=null)}}),t);s.set(n,[...null!==(o=s.get(n))&&void 0!==o?o:[],i])};for(const e of f)try{const t=e({node:l,storeID:n.storeID,trigger:o,setSelf:g(e),resetSelf:b(e),onSet:w(e),getPromise:v,getLoadable:m,getInfo_UNSTABLE:y});var d;null!=t&&s.set(n,[...null!==(d=s.get(n))&&void 0!==d?d:[],t])}catch(e){i=e,c=!0}if(e=!1,!(i instanceof ks)){var p;const e=i,o=c?gs(i):nt(e)?bs(function(e,n){const r=n.then((n=>{var o,i;return(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&Rs(e,l,n),n})).catch((n=>{var o,i;throw(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&Os(e,l,gs(n)),n}));return r}(n,e)):ws(e);r.atomValues.set(t,o),null===(p=n.getState().nextTree)||void 0===p||p.atomValues.set(t,o)}}return()=>{var e;i--,null===(e=s.get(n))||void 0===e||e.forEach((e=>e())),s.delete(n)}},invalidate:function(){o=void 0},shouldDeleteConfigOnRelease:function(){return void 0!==As(t)&&i<=0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0,retainedBy:r});return l}({...r,default:n})},Ns=class{constructor(e){var t;ot(this,"_map",void 0),ot(this,"_keyMapper",void 0),this._map=new Map,this._keyMapper=null!==(t=null==e?void 0:e.mapKey)&&void 0!==t?t:e=>e}size(){return this._map.size}has(e){return this._map.has(this._keyMapper(e))}get(e){return this._map.get(this._keyMapper(e))}set(e,t){this._map.set(this._keyMapper(e),t)}delete(e){this._map.delete(this._keyMapper(e))}clear(){this._map.clear()}},Is=Object.freeze({__proto__:null,MapCache:Ns});const{LRUCache:Vs}=Fa,{MapCache:Ds}=Is,js={equality:"reference",eviction:"none",maxSize:1/0};var Fs=function({equality:e=js.equality,eviction:t=js.eviction,maxSize:n=js.maxSize}=js){const r=function(e){switch(e){case"reference":return e=>e;case"value":return e=>$a(e)}throw tt(`Unrecognized equality policy ${e}`)}(e),o=function(e,t,n){switch(e){case"keep-all":return new Ds({mapKey:n});case"lru":return new Vs({mapKey:n,maxSize:rt(t)});case"most-recent":return new Vs({mapKey:n,maxSize:1})}throw tt(`Unrecognized eviction policy ${e}`)}(t,n,r);return o};const{setConfigDeletionHandler:Us}=Qt;const{setConfigDeletionHandler:zs}=Qt;let Bs=0;var qs=function(e){var t,n;const r=Fs({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n;const o=r.get(t);if(null!=o)return o;const i=`${e.key}__selectorFamily/${null!==(n=$a(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${Bs++}`,a=n=>e.get(t)(n),s=e.cachePolicy_UNSTABLE,u="function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE;let l;if(null!=e.set){const n=e.set;l=ys({key:i,get:a,set:(e,r)=>n(t)(e,r),cachePolicy_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:u})}else l=ys({key:i,get:a,cachePolicy_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:u});return r.set(t,l),zs(l.key,(()=>{r.delete(t)})),l}};const $s=qs({key:"__constant",get:e=>()=>e,cachePolicyForParams_UNSTABLE:{equality:"reference"}});const Hs=qs({key:"__error",get:e=>()=>{throw tt(e)},cachePolicyForParams_UNSTABLE:{equality:"reference"}});const{loadableWithError:Ws,loadableWithPromise:Qs,loadableWithValue:Ks}=kt;function Zs(e,t){const n=Array(t.length).fill(void 0),r=Array(t.length).fill(void 0);for(const[o,i]of t.entries())try{n[o]=e(i)}catch(e){r[o]=e}return[n,r]}function Ys(e){return null!=e&&!nt(e)}function Gs(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function Xs(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})}function Js(e,t,n){return Xs(e,n.map(((e,n)=>null==e?Ks(t[n]):nt(e)?Qs(e):Ws(e))))}var eu={waitForNone:qs({key:"__waitForNone",get:e=>({get:t})=>{const n=Gs(e),[r,o]=Zs(t,n);return Js(e,r,o)},dangerouslyAllowMutability:!0}),waitForAny:qs({key:"__waitForAny",get:e=>({get:t})=>{const n=Gs(e),[r,o]=Zs(t,n);return o.some((e=>!nt(e)))?Js(e,r,o):new Promise((t=>{for(const[n,i]of o.entries())nt(i)&&i.then((i=>{r[n]=i,o[n]=void 0,t(Js(e,r,o))})).catch((i=>{o[n]=i,t(Js(e,r,o))}))}))},dangerouslyAllowMutability:!0}),waitForAll:qs({key:"__waitForAll",get:e=>({get:t})=>{const n=Gs(e),[r,o]=Zs(t,n);if(o.every((e=>null==e)))return Xs(e,r);const i=o.find(Ys);if(null!=i)throw i;return Promise.all(o).then((t=>{return Xs(e,(n=r,t.map(((e,t)=>void 0===e?n[t]:e))));var n}))},dangerouslyAllowMutability:!0}),waitForAllSettled:qs({key:"__waitForAllSettled",get:e=>({get:t})=>{const n=Gs(e),[r,o]=Zs(t,n);return o.every((e=>!nt(e)))?Js(e,r,o):Promise.all(o.map(((e,t)=>nt(e)?e.then((e=>{r[t]=e,o[t]=void 0})).catch((e=>{r[t]=void 0,o[t]=e})):null))).then((()=>Js(e,r,o)))},dangerouslyAllowMutability:!0}),noWait:qs({key:"__noWait",get:e=>({get:t})=>{try{return Ks(t(e))}catch(e){return nt(e)?Qs(e):Ws(e)}},dangerouslyAllowMutability:!0})};const{RecoilLoadable:tu}=kt,{DefaultValue:nu}=Qt,{RecoilRoot:ru,useRecoilStoreID:ou}=Fo,{isRecoilValue:iu}=Mt,{retentionZone:au}=vn,{freshSnapshot:su}=to,{useRecoilState:uu,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:lu,useRecoilStateLoadable:cu,useRecoilValue:fu,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:du,useRecoilValueLoadable:pu,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:hu,useResetRecoilState:mu,useSetRecoilState:vu}=_i,{useGotoRecoilSnapshot:yu,useRecoilSnapshot:gu,useRecoilTransactionObserver:bu}=Wi,{useRecoilCallback:wu}=Ca,{noWait:Su,waitForAll:Eu,waitForAllSettled:ku,waitForAny:Au,waitForNone:Cu}=eu;var xu,Tu={DefaultValue:nu,isRecoilValue:iu,RecoilLoadable:tu,RecoilRoot:ru,useRecoilStoreID:ou,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){"MUTABLE_SOURCE"===Zi().mode&&console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");const t=Gi().current;return Xi((()=>function({children:n}){return e.createElement(Yi,{store_INTERNAL:t},n)}),[t])},atom:Ls,selector:ys,atomFamily:function(e){var t,n;const r=Fs({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n,o;const i=r.get(t);if(null!=i)return i;const{cachePolicyForParams_UNSTABLE:a,...s}=e,u=Ls({...s,key:`${e.key}__${null!==(n=$a(t))&&void 0!==n?n:"void"}`,default:"function"==typeof e.default?e.default(t):e.default,retainedBy_UNSTABLE:"function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE,effects:"function"==typeof e.effects?e.effects(t):"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(t):null!==(o=e.effects)&&void 0!==o?o:e.effects_UNSTABLE});return r.set(t,u),Us(u.key,(()=>{r.delete(t)})),u}},selectorFamily:qs,constSelector:function(e){return $s(e)},errorSelector:function(e){return Hs(e)},readOnlySelector:function(e){return e},noWait:Su,waitForNone:Cu,waitForAny:Au,waitForAll:Eu,waitForAllSettled:ku,useRecoilValue:fu,useRecoilValueLoadable:pu,useRecoilState:uu,useRecoilStateLoadable:cu,useSetRecoilState:vu,useResetRecoilState:mu,useGetRecoilValueInfo_UNSTABLE:function(){const e=Ki();return({key:t})=>Qi(e.current,e.current.getState().currentTree,t)},useRecoilRefresher_UNSTABLE:function(e){const t=xa();return _a((()=>{const n=t.current;Ta(n,e)}),[e,t])},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:hu,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:du,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:lu,useRecoilCallback:wu,useRecoilTransaction_UNSTABLE:function(e,t){const n=Ra();return Oa((()=>(...t)=>{Pa(n.current)((n=>{e(n)(...t)}))}),null!=t?[...t,n]:void 0)},useGotoRecoilSnapshot:yu,useRecoilSnapshot:gu,useRecoilTransactionObserver_UNSTABLE:bu,snapshot_UNSTABLE:su,useRetain:Yo,retentionZone:au},_u=Tu.RecoilRoot,Pu=Tu.atom,Ru=Tu.useRecoilValue,Ou=Tu.useRecoilState,Mu=Tu.useSetRecoilState,Lu=n(462),Nu=xu||(xu={});Nu.Pop="POP",Nu.Push="PUSH",Nu.Replace="REPLACE";function Iu(e){e.preventDefault(),e.returnValue=""}function Vu(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function Du(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function ju(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function Fu(e,t){if(!e)throw new Error(t)}const Uu=(0,e.createContext)(null),zu=(0,e.createContext)(null),Bu=(0,e.createContext)({outlet:null,matches:[]});function qu(t){return function(t){let n=(0,e.useContext)(Bu).outlet;return n?(0,e.createElement)(Yu.Provider,{value:t},n):n}(t.context)}function $u(e){Fu(!1)}function Hu(t){let{basename:n="/",children:r=null,location:o,navigationType:i=xu.Pop,navigator:a,static:s=!1}=t;Qu()&&Fu(!1);let u=ll(n),l=(0,e.useMemo)((()=>({basename:u,navigator:a,static:s})),[u,a,s]);"string"==typeof o&&(o=ju(o));let{pathname:c="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,m=(0,e.useMemo)((()=>{let e=sl(c,u);return null==e?null:{pathname:e,search:f,hash:d,state:p,key:h}}),[u,c,f,d,p,h]);return null==m?null:(0,e.createElement)(Uu.Provider,{value:l},(0,e.createElement)(zu.Provider,{children:r,value:{location:m,navigationType:i}}))}function Wu(t){let{children:n,location:r}=t;return function(t,n){Qu()||Fu(!1);let{matches:r}=(0,e.useContext)(Bu),o=r[r.length-1],i=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let s,u=Ku();if(n){var l;let e="string"==typeof n?ju(n):n;"/"===a||(null==(l=e.pathname)?void 0:l.startsWith(a))||Fu(!1),s=e}else s=u;let c=s.pathname||"/",f=function(e,t,n){void 0===n&&(n="/");let r=sl(("string"==typeof t?ju(t):t).pathname||"/",n);if(null==r)return null;let o=el(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=ol(o[e],r);return i}(t,{pathname:"/"===a?c:c.slice(a.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,i)=>(0,e.createElement)(Bu.Provider,{children:void 0!==o.route.element?o.route.element:(0,e.createElement)(qu,null),value:{outlet:r,matches:n.concat(t.slice(0,i+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:ul([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:ul([a,e.pathnameBase])}))),r)}(Ju(n),r)}function Qu(){return null!=(0,e.useContext)(zu)}function Ku(){return Qu()||Fu(!1),(0,e.useContext)(zu).location}function Zu(){Qu()||Fu(!1);let{basename:t,navigator:n}=(0,e.useContext)(Uu),{matches:r}=(0,e.useContext)(Bu),{pathname:o}=Ku(),i=JSON.stringify(r.map((e=>e.pathnameBase))),a=(0,e.useRef)(!1);(0,e.useEffect)((()=>{a.current=!0}));let s=(0,e.useCallback)((function(e,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof e)return void n.go(e);let s=al(e,JSON.parse(i),o);"/"!==t&&(s.pathname=ul([t,s.pathname])),(r.replace?n.replace:n.push)(s,r.state)}),[t,n,i,o]);return s}const Yu=(0,e.createContext)(null);function Gu(){let{matches:t}=(0,e.useContext)(Bu),n=t[t.length-1];return n?n.params:{}}function Xu(t){let{matches:n}=(0,e.useContext)(Bu),{pathname:r}=Ku(),o=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,e.useMemo)((()=>al(t,JSON.parse(o),r)),[t,o,r])}function Ju(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,Ju(t.props.children));t.type!==$u&&Fu(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=Ju(t.props.children)),n.push(r)})),n}function el(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(r)||Fu(!1),i.relativePath=i.relativePath.slice(r.length));let a=ul([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&Fu(!1),el(e.children,t,s,a)),(null!=e.path||e.index)&&t.push({path:a,score:rl(a,e.index),routesMeta:s})})),t}const tl=/^:\w+$/,nl=e=>"*"===e;function rl(e,t){let n=e.split("/"),r=n.length;return n.some(nl)&&(r+=-2),t&&(r+=2),n.filter((e=>!nl(e))).reduce(((e,t)=>e+(tl.test(t)?3:""===t?1:10)),r)}function ol(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],s=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",l=il({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},u);if(!l)return null;Object.assign(r,l.params);let c=a.route;i.push({params:r,pathname:ul([o,l.pathname]),pathnameBase:ul([o,l.pathnameBase]),route:c}),"/"!==l.pathnameBase&&(o=ul([o,l.pathnameBase]))}return i}function il(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),s=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(s[n]||""),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function al(e,t,n){let r,o="string"==typeof e?ju(e):e,i=""===e||""===o.pathname?"/":o.pathname;if(null==i)r=n;else{let e=t.length-1;if(i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}r=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?ju(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:cl(r),hash:fl(o)}}(o,r);return i&&"/"!==i&&i.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function sl(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const ul=e=>e.join("/").replace(/\/\/+/g,"/"),ll=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),cl=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",fl=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function dl(){return dl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},dl.apply(this,arguments)}const pl=["onClick","reloadDocument","replace","state","target","to"];function hl(t){let{basename:n,children:r,window:o}=t,i=(0,e.useRef)();null==i.current&&(i.current=function(e){function t(){var e=a.location,t=s.state||{};return[t.idx,{pathname:e.pathname,search:e.search,hash:e.hash,state:t.usr||null,key:t.key||"default"}]}function n(e){return"string"==typeof e?e:Du(e)}function r(e,t){return void 0===t&&(t=null),(0,Lu.Z)({pathname:f.pathname,hash:"",search:""},"string"==typeof e?ju(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function o(e){l=e,e=t(),c=e[0],f=e[1],d.call({action:l,location:f})}function i(e){s.go(e)}void 0===e&&(e={});var a=void 0===(e=e.window)?document.defaultView:e,s=a.history,u=null;a.addEventListener("popstate",(function(){if(u)p.call(u),u=null;else{var e=xu.Pop,n=t(),r=n[0];if(n=n[1],p.length){if(null!=r){var a=c-r;a&&(u={action:e,location:n,retry:function(){i(-1*a)}},i(a))}}else o(e)}}));var l=xu.Pop,c=(e=t())[0],f=e[1],d=Vu(),p=Vu();return null==c&&(c=0,s.replaceState((0,Lu.Z)({},s.state,{idx:c}),"")),{get action(){return l},get location(){return f},createHref:n,push:function e(t,i){var u=xu.Push,l=r(t,i);if(!p.length||(p.call({action:u,location:l,retry:function(){e(t,i)}}),0)){var f=[{usr:l.state,key:l.key,idx:c+1},n(l)];l=f[0],f=f[1];try{s.pushState(l,"",f)}catch(e){a.location.assign(f)}o(u)}},replace:function e(t,i){var a=xu.Replace,u=r(t,i);p.length&&(p.call({action:a,location:u,retry:function(){e(t,i)}}),1)||(u=[{usr:u.state,key:u.key,idx:c},n(u)],s.replaceState(u[0],"",u[1]),o(a))},go:i,back:function(){i(-1)},forward:function(){i(1)},listen:function(e){return d.push(e)},block:function(e){var t=p.push(e);return 1===p.length&&a.addEventListener("beforeunload",Iu),function(){t(),p.length||a.removeEventListener("beforeunload",Iu)}}}}({window:o}));let a=i.current,[s,u]=(0,e.useState)({action:a.action,location:a.location});return(0,e.useLayoutEffect)((()=>a.listen(u)),[a]),(0,e.createElement)(Hu,{basename:n,children:r,location:s.location,navigationType:s.action,navigator:a})}const ml=(0,e.forwardRef)((function(t,n){let{onClick:r,reloadDocument:o,replace:i=!1,state:a,target:s,to:u}=t,l=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,pl),c=function(t){Qu()||Fu(!1);let{basename:n,navigator:r}=(0,e.useContext)(Uu),{hash:o,pathname:i,search:a}=Xu(t),s=i;if("/"!==n){let e=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?ju(e).pathname:e.pathname}(t),r=null!=e&&e.endsWith("/");s="/"===i?n+(r?"/":""):ul([n,i])}return r.createHref({pathname:s,search:a,hash:o})}(u),f=function(t,n){let{target:r,replace:o,state:i}=void 0===n?{}:n,a=Zu(),s=Ku(),u=Xu(t);return(0,e.useCallback)((e=>{if(!(0!==e.button||r&&"_self"!==r||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))){e.preventDefault();let n=!!o||Du(s)===Du(u);a(t,{replace:n,state:i})}}),[s,a,u,o,i,r,t])}(u,{replace:i,state:a,target:s});return(0,e.createElement)("a",dl({},l,{href:c,onClick:function(e){r&&r(e),e.defaultPrevented||o||f(e)},ref:n,target:s}))})),vl=1/60*1e3,yl="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),gl="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(yl())),vl);let bl=!0,wl=!1,Sl=!1;const El={delta:0,timestamp:0},kl=["read","update","preRender","render","postRender"],Al=kl.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,i=!1;const a=new WeakSet,s={schedule:(e,i=!1,s=!1)=>{const u=s&&o,l=u?t:n;return i&&a.add(e),-1===l.indexOf(e)&&(l.push(e),u&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),a.delete(e)},process:u=>{if(o)i=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(u),a.has(r)&&(s.schedule(r),e())}o=!1,i&&(i=!1,s.process(u))}}};return s}((()=>wl=!0)),e)),{}),Cl=kl.reduce(((e,t)=>{const n=Al[t];return e[t]=(e,t=!1,r=!1)=>(wl||Rl(),n.schedule(e,t,r)),e}),{}),xl=kl.reduce(((e,t)=>(e[t]=Al[t].cancel,e)),{}),Tl=kl.reduce(((e,t)=>(e[t]=()=>Al[t].process(El),e)),{}),_l=e=>Al[e].process(El),Pl=e=>{wl=!1,El.delta=bl?vl:Math.max(Math.min(e-El.timestamp,40),1),El.timestamp=e,Sl=!0,kl.forEach(_l),Sl=!1,wl&&(bl=!1,gl(Pl))},Rl=()=>{wl=!0,bl=!0,Sl||gl(Pl)},Ol=()=>El,Ml=Cl;function Ll(e,t){return t?e*(1e3/t):0}function Nl(e,t){-1===e.indexOf(t)&&e.push(t)}function Il(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var Vl=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return Nl(this.subscriptions,e),function(){return Il(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var i=this.subscriptions[o];i&&i(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),Dl=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new Vl,this.velocityUpdateSubscribers=new Vl,this.renderSubscribers=new Vl,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=Ol(),o=r.delta,i=r.timestamp;n.lastUpdated!==i&&(n.timeDelta=o,n.lastUpdated=i,Ml.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return Ml.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?Ll(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function jl(e){return new Dl(e)}function Fl(e,t,n){n.set(e&&t?e/t:0)}function Ul(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function zl(t,n,r,o){(0,e.useEffect)((function(){var e=t.current;if(r&&e)return Ul(e,n,r,o)}),[t,n,r,o])}var Bl,ql="undefined"!=typeof window,$l=ql?e.useLayoutEffect:e.useEffect;function Hl(){return{xOffset:window.pageXOffset,yOffset:window.pageYOffset,xMaxOffset:document.body.clientWidth-window.innerWidth,yMaxOffset:document.body.clientHeight-window.innerHeight}}var Wl=!1;function Ql(){return Bl||(Bl={scrollX:jl(0),scrollY:jl(0),scrollXProgress:jl(0),scrollYProgress:jl(0)}),$l((function(){!Wl&&function(){if(Wl=!0,"undefined"!=typeof window){var e=(t=Bl,n=Hl,(r=function(){var e=n(),r=e.xOffset,o=e.yOffset,i=e.xMaxOffset,a=e.yMaxOffset;t.scrollX.set(r),t.scrollY.set(o),Fl(r,i,t.scrollXProgress),Fl(o,a,t.scrollYProgress)})(),r);Ul(window,"scroll",e,{passive:!0}),Ul(window,"resize",e)}var t,n,r}()}),[]),Bl}var Kl=function(e,t){return Kl=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Kl(e,t)};function Zl(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Kl(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Yl=function(){return Yl=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Yl.apply(this,arguments)};function Gl(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function Xl(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function Jl(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;var ec=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},tc={measureLayout:ec(["layout","layoutId","drag"]),animation:ec(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:ec(["exit"]),drag:ec(["drag","dragControls"]),focus:ec(["whileFocus"]),hover:ec(["whileHover","onHoverStart","onHoverEnd"]),tap:ec(["whileTap","onTap","onTapStart","onTapCancel"]),pan:ec(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:ec(["whileInView","onViewportEnter","onViewportLeave"])},nc=(0,e.createContext)({strict:!1}),rc=Object.keys(tc),oc=rc.length,ic=(0,e.createContext)({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),ac=(0,e.createContext)({}),sc=(0,e.createContext)(null),uc={current:null},lc=!1;function cc(t,n,r,o){var i,a,s=(0,e.useContext)(nc),u=(0,e.useContext)(ac).visualElement,l=(0,e.useContext)(sc),c=(!lc&&function(){if(lc=!0,"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return uc.current=e.matches};e.addListener(t),t()}else uc.current=!1}(),i=Xl((0,e.useState)(uc.current),1)[0],"never"!==(a=(0,e.useContext)(ic).reducedMotion)&&("always"===a||i)),f=(0,e.useRef)(void 0);o||(o=s.renderer),!f.current&&o&&(f.current=o(t,{visualState:n,parent:u,props:r,presenceId:null==l?void 0:l.id,blockInitialAnimation:!1===(null==l?void 0:l.initial),shouldReduceMotion:c}));var d=f.current;return $l((function(){null==d||d.syncRender()})),(0,e.useEffect)((function(){var e;null===(e=null==d?void 0:d.animationState)||void 0===e||e.animateChanges()})),$l((function(){return function(){return null==d?void 0:d.notifyUnmount()}}),[]),d}function fc(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function dc(e){return Array.isArray(e)}function pc(e){return"string"==typeof e||dc(e)}function hc(e,t,n,r,o){var i;return void 0===r&&(r={}),void 0===o&&(o={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),"string"==typeof t&&(t=null===(i=e.variants)||void 0===i?void 0:i[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),t}function mc(e,t,n){var r=e.getProps();return hc(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function vc(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||pc(e.initial)||pc(e.animate)||pc(e.whileHover)||pc(e.whileDrag)||pc(e.whileTap)||pc(e.whileFocus)||pc(e.exit)}function yc(e){return Boolean(vc(e)||e.variants)}function gc(e){return Array.isArray(e)?e.join(" "):e}function bc(t){var n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}const wc=(e,t,n)=>-n*e+n*t+e;var Sc=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)};const Ec=(e,t,n)=>Math.min(Math.max(n,e),t);function kc(e,t){return e*Math.sqrt(1-t*t)}const Ac=["duration","bounce"],Cc=["stiffness","damping","mass"];function xc(e,t){return t.some((t=>void 0!==e[t]))}function Tc(e){var{from:t=0,to:n=1,restSpeed:r=2,restDelta:o}=e,i=Gl(e,["from","to","restSpeed","restDelta"]);const a={done:!1,value:t};let{stiffness:s,damping:u,mass:l,velocity:c,duration:f,isResolvedFromDuration:d}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!xc(e,Cc)&&xc(e,Ac)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,i,a=1-t;a=Ec(.05,1,a),e=Ec(.01,10,e/1e3),a<1?(o=t=>{const r=t*a,o=r*e;return.001-(r-n)/kc(t,a)*Math.exp(-o)},i=t=>{const r=t*a*e,i=r*n+n,s=Math.pow(a,2)*Math.pow(t,2)*e,u=Math.exp(-r),l=kc(Math.pow(t,2),a);return(.001-o(t)>0?-1:1)*((i-s)*u)/l}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,i=t=>Math.exp(-t*e)*(e*e*(n-t)));const s=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(o,i,5/e);if(e*=1e3,isNaN(s))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(s,2)*r;return{stiffness:t,damping:2*a*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(i),p=_c,h=_c;function m(){const e=c?-c/1e3:0,r=n-t,i=u/(2*Math.sqrt(s*l)),a=Math.sqrt(s/l)/1e3;if(void 0===o&&(o=Math.min(Math.abs(n-t)/100,.4)),i<1){const t=kc(a,i);p=o=>{const s=Math.exp(-i*a*o);return n-s*((e+i*a*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},h=n=>{const o=Math.exp(-i*a*n);return i*a*o*(Math.sin(t*n)*(e+i*a*r)/t+r*Math.cos(t*n))-o*(Math.cos(t*n)*(e+i*a*r)-t*r*Math.sin(t*n))}}else if(1===i)p=t=>n-Math.exp(-a*t)*(r+(e+a*r)*t);else{const t=a*Math.sqrt(i*i-1);p=o=>{const s=Math.exp(-i*a*o),u=Math.min(t*o,300);return n-s*((e+i*a*r)*Math.sinh(u)+t*r*Math.cosh(u))/t}}}return m(),{next:e=>{const t=p(e);if(d)a.done=e>=f;else{const i=1e3*h(e),s=Math.abs(i)<=r,u=Math.abs(n-t)<=o;a.done=s&&u}return a.value=a.done?n:t,a},flipTarget:()=>{c=-c,[t,n]=[n,t],m()}}}Tc.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const _c=e=>0,Pc=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Rc=(e,t)=>n=>Math.max(Math.min(n,t),e),Oc=e=>e%1?Number(e.toFixed(5)):e,Mc=/(-)?([\d]*\.?[\d])+/g,Lc=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,Nc=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function Ic(e){return"string"==typeof e}const Vc={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Dc=Object.assign(Object.assign({},Vc),{transform:Rc(0,1)}),jc=Object.assign(Object.assign({},Vc),{default:1}),Fc=(e,t)=>n=>Boolean(Ic(n)&&Nc.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),Uc=(e,t,n)=>r=>{if(!Ic(r))return r;const[o,i,a,s]=r.match(Mc);return{[e]:parseFloat(o),[t]:parseFloat(i),[n]:parseFloat(a),alpha:void 0!==s?parseFloat(s):1}},zc=Rc(0,255),Bc=Object.assign(Object.assign({},Vc),{transform:e=>Math.round(zc(e))}),qc={test:Fc("rgb","red"),parse:Uc("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Bc.transform(e)+", "+Bc.transform(t)+", "+Bc.transform(n)+", "+Oc(Dc.transform(r))+")"},$c={test:Fc("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:qc.transform},Hc=e=>({test:t=>Ic(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Wc=Hc("deg"),Qc=Hc("%"),Kc=Hc("px"),Zc=Hc("vh"),Yc=Hc("vw"),Gc=Object.assign(Object.assign({},Qc),{parse:e=>Qc.parse(e)/100,transform:e=>Qc.transform(100*e)}),Xc={test:Fc("hsl","hue"),parse:Uc("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Qc.transform(Oc(t))+", "+Qc.transform(Oc(n))+", "+Oc(Dc.transform(r))+")"};function Jc(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function ef({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,i=0,a=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,s=2*n-r;o=Jc(s,r,e+1/3),i=Jc(s,r,e),a=Jc(s,r,e-1/3)}else o=i=a=n;return{red:Math.round(255*o),green:Math.round(255*i),blue:Math.round(255*a),alpha:r}}const tf=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},nf=[$c,qc,Xc],rf=e=>nf.find((t=>t.test(e))),of=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,af=(e,t)=>{let n=rf(e),r=rf(t);of(e),of(t);let o=n.parse(e),i=r.parse(t);n===Xc&&(o=ef(o),n=qc),r===Xc&&(i=ef(i),r=qc);const a=Object.assign({},o);return e=>{for(const t in a)"alpha"!==t&&(a[t]=tf(o[t],i[t],e));return a.alpha=wc(o.alpha,i.alpha,e),n.transform(a)}},sf={test:e=>qc.test(e)||$c.test(e)||Xc.test(e),parse:e=>qc.test(e)?qc.parse(e):Xc.test(e)?Xc.parse(e):$c.parse(e),transform:e=>Ic(e)?e:e.hasOwnProperty("red")?qc.transform(e):Xc.transform(e)},uf="${c}",lf="${n}";function cf(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(Lc);r&&(n=r.length,e=e.replace(Lc,uf),t.push(...r.map(sf.parse)));const o=e.match(Mc);return o&&(e=e.replace(Mc,lf),t.push(...o.map(Vc.parse))),{values:t,numColors:n,tokenised:e}}function ff(e){return cf(e).values}function df(e){const{values:t,numColors:n,tokenised:r}=cf(e),o=t.length;return e=>{let t=r;for(let r=0;r<o;r++)t=t.replace(r<n?uf:lf,r<n?sf.transform(e[r]):Oc(e[r]));return t}}const pf=e=>"number"==typeof e?0:e,hf={test:function(e){var t,n,r,o;return isNaN(e)&&Ic(e)&&(null!==(n=null===(t=e.match(Mc))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(o=null===(r=e.match(Lc))||void 0===r?void 0:r.length)&&void 0!==o?o:0)>0},parse:ff,createTransformer:df,getAnimatableNone:function(e){const t=ff(e);return df(e)(t.map(pf))}},mf=e=>"number"==typeof e,vf=(e,t)=>n=>t(e(n)),yf=(...e)=>e.reduce(vf);function gf(e,t){return mf(e)?n=>wc(e,t,n):sf.test(e)?af(e,t):Ef(e,t)}const bf=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>gf(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},wf=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=gf(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function Sf(e){const t=hf.parse(e),n=t.length;let r=0,o=0,i=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?i++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:i}}const Ef=(e,t)=>{const n=hf.createTransformer(t),r=Sf(e),o=Sf(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&r.numNumbers>=o.numNumbers?yf(bf(r.parsed,o.parsed),n):n=>`${n>0?t:e}`},kf=(e,t)=>n=>wc(e,t,n);function Af(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const i=e.length;t.length,!r||!Array.isArray(r)||r.length,e[0]>e[i-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const a=function(e,t,n){const r=[],o=n||function(e){return"number"==typeof e?kf:"string"==typeof e?sf.test(e)?af:Ef:Array.isArray(e)?bf:"object"==typeof e?wf:void 0}(e[0]),i=e.length-1;for(let n=0;n<i;n++){let i=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;i=yf(e,i)}r.push(i)}return r}(t,r,o),s=2===i?function([e,t],[n]){return r=>n(Pc(e,t,r))}(e,a):function(e,t){const n=e.length,r=n-1;return o=>{let i=0,a=!1;if(o<=e[0]?a=!0:o>=e[r]&&(i=r-1,a=!0),!a){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);i=t-1}const s=Pc(e[i],e[i+1],o);return t[i](s)}}(e,a);return n?t=>s(Ec(e[0],e[i-1],t)):s}const Cf=e=>t=>1-e(1-t),xf=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,Tf=e=>t=>t*t*((e+1)*t-e),_f=e=>e,Pf=(2,e=>Math.pow(e,2));const Rf=Cf(Pf),Of=xf(Pf),Mf=e=>1-Math.sin(Math.acos(e)),Lf=Cf(Mf),Nf=xf(Lf),If=Tf(1.525),Vf=Cf(If),Df=xf(If),jf=(e=>{const t=Tf(1.525);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))})(),Ff=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},Uf=Cf(Ff);function zf(e,t){return e.map((()=>t||Of)).splice(0,e.length-1)}function Bf({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const i={done:!1,value:e},a=Array.isArray(t)?t:[e,t],s=function(e,t){return e.map((e=>e*t))}(r&&r.length===a.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(a),o);function u(){return Af(s,a,{ease:Array.isArray(n)?n:zf(a,n)})}let l=u();return{next:e=>(i.value=l(e),i.done=e>=o,i),flipTarget:()=>{a.reverse(),l=u()}}}const qf={keyframes:Bf,spring:Tc,decay:function({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:i}){const a={done:!1,value:t};let s=n*e;const u=t+s,l=void 0===i?u:i(u);return l!==u&&(s=l-t),{next:e=>{const t=-s*Math.exp(-e/r);return a.done=!(t>o||t<-o),a.value=a.done?l:l+t,a},flipTarget:()=>{}}}};function $f(e,t,n=0){return e-t-n}const Hf=e=>{const t=({delta:t})=>e(t);return{start:()=>Ml.update(t,!0),stop:()=>xl.update(t)}};function Wf(e){var t,n,{from:r,autoplay:o=!0,driver:i=Hf,elapsed:a=0,repeat:s=0,repeatType:u="loop",repeatDelay:l=0,onPlay:c,onStop:f,onComplete:d,onRepeat:p,onUpdate:h}=e,m=Gl(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,y,g,{to:b}=m,w=0,S=m.duration,E=!1,k=!0;const A=function(e){if(Array.isArray(e.to))return Bf;if(qf[e.type])return qf[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?Bf:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?Tc:Bf}(m);(null===(n=(t=A).needsInterpolation)||void 0===n?void 0:n.call(t,r,b))&&(g=Af([0,100],[r,b],{clamp:!1}),r=0,b=100);const C=A(Object.assign(Object.assign({},m),{from:r,to:b}));return o&&(null==c||c(),v=i((function(e){if(k||(e=-e),a+=e,!E){const e=C.next(Math.max(0,a));y=e.value,g&&(y=g(y)),E=k?e.done:a<=0}null==h||h(y),E&&(0===w&&(null!=S||(S=a)),w<s?function(e,t,n,r){return r?e>=t+n:e<=-n}(a,S,l,k)&&(w++,"reverse"===u?(k=w%2==0,a=function(e,t,n=0,r=!0){return r?$f(t+-e,t,n):t-(e-t)+n}(a,S,l,k)):(a=$f(a,S,l),"mirror"===u&&C.flipTarget()),E=!1,p&&p()):(v.stop(),d&&d()))})),v.start()),{stop:()=>{null==f||f(),v.stop()}}}var Qf=function(e){return 1e3*e};const Kf=(e,t)=>1-3*t+3*e,Zf=(e,t)=>3*t-6*e,Yf=e=>3*e,Gf=(e,t,n)=>((Kf(t,n)*e+Zf(t,n))*e+Yf(t))*e,Xf=(e,t,n)=>3*Kf(t,n)*e*e+2*Zf(t,n)*e+Yf(t),Jf=.1;function ed(e,t,n,r){if(e===t&&n===r)return _f;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=Gf(t*Jf,e,n);return i=>0===i||1===i?i:Gf(function(t){let r=0,i=1;for(;10!==i&&o[i]<=t;++i)r+=Jf;--i;const a=r+(t-o[i])/(o[i+1]-o[i])*Jf,s=Xf(a,e,n);return s>=.001?function(e,t,n,r){for(let o=0;o<8;++o){const o=Xf(t,n,r);if(0===o)return t;t-=(Gf(t,n,r)-e)/o}return t}(t,a,e,n):0===s?a:function(e,t,n,r,o){let i,a,s=0;do{a=t+(n-t)/2,i=Gf(a,r,o)-e,i>0?n=a:t=a}while(Math.abs(i)>1e-7&&++s<10);return a}(t,r,r+Jf,e,n)}(i),t,r)}var td={linear:_f,easeIn:Pf,easeInOut:Of,easeOut:Rf,circIn:Mf,circInOut:Nf,circOut:Lf,backIn:If,backInOut:Df,backOut:Vf,anticipate:jf,bounceIn:Uf,bounceInOut:e=>e<.5?.5*(1-Ff(1-2*e)):.5*Ff(2*e-1)+.5,bounceOut:Ff},nd=function(e){if(Array.isArray(e)){e.length;var t=Xl(e,4);return ed(t[0],t[1],t[2],t[3])}return"string"==typeof e?("Invalid easing type '".concat(e,"'"),td[e]):e},rd=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!hf.test(t)||t.startsWith("url(")))},od=function(e){return Array.isArray(e)},id=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},ad=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},sd=function(){return{type:"keyframes",ease:"linear",duration:.3}},ud=function(e){return{type:"keyframes",duration:.8,values:e}},ld={x:id,y:id,z:id,rotate:id,rotateX:id,rotateY:id,rotateZ:id,scaleX:ad,scaleY:ad,scale:ad,opacity:sd,backgroundColor:sd,color:sd,default:ad};const cd=new Set(["brightness","contrast","saturate","opacity"]);function fd(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Mc)||[];if(!r)return e;const o=n.replace(r,"");let i=cd.has(t)?1:0;return r!==n&&(i*=100),t+"("+i+o+")"}const dd=/([a-z-]*)\(.*?\)/g,pd=Object.assign(Object.assign({},hf),{getAnimatableNone:e=>{const t=e.match(dd);return t?t.map(fd).join(" "):e}});var hd=Yl(Yl({},Vc),{transform:Math.round}),md={borderWidth:Kc,borderTopWidth:Kc,borderRightWidth:Kc,borderBottomWidth:Kc,borderLeftWidth:Kc,borderRadius:Kc,radius:Kc,borderTopLeftRadius:Kc,borderTopRightRadius:Kc,borderBottomRightRadius:Kc,borderBottomLeftRadius:Kc,width:Kc,maxWidth:Kc,height:Kc,maxHeight:Kc,size:Kc,top:Kc,right:Kc,bottom:Kc,left:Kc,padding:Kc,paddingTop:Kc,paddingRight:Kc,paddingBottom:Kc,paddingLeft:Kc,margin:Kc,marginTop:Kc,marginRight:Kc,marginBottom:Kc,marginLeft:Kc,rotate:Wc,rotateX:Wc,rotateY:Wc,rotateZ:Wc,scale:jc,scaleX:jc,scaleY:jc,scaleZ:jc,skew:Wc,skewX:Wc,skewY:Wc,distance:Kc,translateX:Kc,translateY:Kc,translateZ:Kc,x:Kc,y:Kc,z:Kc,perspective:Kc,transformPerspective:Kc,opacity:Dc,originX:Gc,originY:Gc,originZ:Kc,zIndex:hd,fillOpacity:Dc,strokeOpacity:Dc,numOctaves:hd},vd=Yl(Yl({},md),{color:sf,backgroundColor:sf,outlineColor:sf,fill:sf,stroke:sf,borderColor:sf,borderTopColor:sf,borderRightColor:sf,borderBottomColor:sf,borderLeftColor:sf,filter:pd,WebkitFilter:pd}),yd=function(e){return vd[e]};function gd(e,t){var n,r=yd(e);return r!==pd&&(r=hf),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var bd=function(e){return od(e)?e[e.length-1]||0:e};function wd(e,t,n){var r,o,i,a;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=Jl([],Xl(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=Gl(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=Yl(Yl({},e),(o=n,i=t.to,a=od(i)?ud:ld[o]||ld.default,Yl({to:i},a(i))))),Yl(Yl({},t),function(e){var t=e.ease,n=e.times,r=e.yoyo,o=e.flip,i=e.loop,a=Gl(e,["ease","times","yoyo","flip","loop"]),s=Yl({},a);return n&&(s.offset=n),a.duration&&(s.duration=Qf(a.duration)),a.repeatDelay&&(s.repeatDelay=Qf(a.repeatDelay)),t&&(s.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(nd):nd(t)),"tween"===a.type&&(s.type="keyframes"),(r||i||o)&&(r?s.repeatType="reverse":i?s.repeatType="loop":o&&(s.repeatType="mirror"),s.repeat=i||r||o||a.repeat),"spring"!==a.type&&(s.type="keyframes"),s}(e))}function Sd(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function Ed(e){return"number"==typeof e?0:gd("",e)}function kd(e,t){return e[t]||e.default||e}function Ad(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var i,a,s=function(e,t,n,r,o){var i,a=kd(r,e),s=null!==(i=a.from)&&void 0!==i?i:t.get(),u=rd(e,n);"none"===s&&u&&"string"==typeof n?s=gd(e,n):Sd(s)&&"string"==typeof n?s=Ed(n):!Array.isArray(n)&&Sd(n)&&"string"==typeof s&&(n=Ed(s));var l=rd(e,s);return"You are trying to animate ".concat(e,' from "').concat(s,'" to "').concat(n,'". ').concat(s," is not an animatable value - to enable this animation set ").concat(s," to a value animatable to ").concat(n," via the `style` property."),l&&u&&!1!==a.type?function(){var r={from:s,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===a.type||"decay"===a.type?function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:i=750,bounceStiffness:a=500,bounceDamping:s=10,restDelta:u=1,modifyTarget:l,driver:c,onUpdate:f,onComplete:d,onStop:p}){let h;function m(e){return void 0!==n&&e<n||void 0!==r&&e>r}function v(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function y(e){null==h||h.stop(),h=Wf(Object.assign(Object.assign({},e),{driver:c,onUpdate:t=>{var n;null==f||f(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:d,onStop:p}))}function g(e){y(Object.assign({type:"spring",stiffness:a,damping:s,restDelta:u},e))}if(m(e))g({from:e,velocity:t,to:v(e)});else{let r=o*t+e;void 0!==l&&(r=l(r));const a=v(r),s=a===n?-1:1;let c,f;const d=e=>{c=f,f=e,t=Ll(e-c,Ol().delta),(1===s&&e>a||-1===s&&e<a)&&g({from:e,to:a,velocity:t})};y({type:"decay",from:e,velocity:t,timeConstant:i,power:o,restDelta:u,modifyTarget:l,onUpdate:m(r)?d:void 0})}return{stop:()=>null==h?void 0:h.stop()}}(Yl(Yl({},r),a)):Wf(Yl(Yl({},wd(a,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=a.onUpdate)||void 0===t||t.call(a,e)},onComplete:function(){var e;r.onComplete(),null===(e=a.onComplete)||void 0===e||e.call(a)}}))}:function(){var e,r,i=bd(n);return t.set(i),o(),null===(e=null==a?void 0:a.onUpdate)||void 0===e||e.call(a,i),null===(r=null==a?void 0:a.onComplete)||void 0===r||r.call(a),{stop:function(){}}}}(e,t,n,r,o),u=function(e,t){var n,r;return null!==(r=null!==(n=(kd(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(r,e),l=function(){return a=s()};return u?i=window.setTimeout(l,Qf(u)):l(),function(){clearTimeout(i),null==a||a.stop()}}))}var Cd=["TopLeft","TopRight","BottomLeft","BottomRight"],xd=Cd.length,Td=function(e){return"string"==typeof e?parseFloat(e):e},_d=function(e){return"number"==typeof e||Kc.test(e)};function Pd(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var Rd=Md(0,.5,Lf),Od=Md(.5,.95,_f);function Md(e,t,n){return function(r){return r<e?0:r>t?1:n(Pc(e,t,r))}}function Ld(e,t){e.min=t.min,e.max=t.max}function Nd(e,t){Ld(e.x,t.x),Ld(e.y,t.y)}function Id(e){return void 0===e||1===e}function Vd(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Id(t)||!Id(n)||!Id(r)}function Dd(e){return Vd(e)||jd(e.x)||jd(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function jd(e){return e&&"0%"!==e}function Fd(e,t,n){return n+t*(e-n)}function Ud(e,t,n,r,o){return void 0!==o&&(e=Fd(e,o,r)),Fd(e,n,r)+t}function zd(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=Ud(e.min,t,n,r,o),e.max=Ud(e.max,t,n,r,o)}function Bd(e,t){var n=t.x,r=t.y;zd(e.x,n.translate,n.scale,n.originPoint),zd(e.y,r.translate,r.scale,r.originPoint)}function qd(e,t){e.min=e.min+t,e.max=e.max+t}function $d(e,t,n){var r=Xl(n,3),o=r[0],i=r[1],a=r[2],s=void 0!==t[a]?t[a]:.5,u=wc(e.min,e.max,s);zd(e,t[o],t[i],u,t.scale)}var Hd=["x","scaleX","originX"],Wd=["y","scaleY","originY"];function Qd(e,t){$d(e.x,t,Hd),$d(e.y,t,Wd)}const Kd=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),Zd=e=>Kd(e)&&e.hasOwnProperty("z"),Yd=(e,t)=>Math.abs(e-t);function Gd(e,t){if(mf(e)&&mf(t))return Yd(e,t);if(Kd(e)&&Kd(t)){const n=Yd(e.x,t.x),r=Yd(e.y,t.y),o=Zd(e)&&Zd(t)?Yd(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}function Xd(e){return e.max-e.min}function Jd(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),Gd(e,t)<n}function ep(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=wc(t.min,t.max,e.origin),e.scale=Xd(n)/Xd(t),(Jd(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=wc(n.min,n.max,e.origin)-e.originPoint,(Jd(e.translate)||isNaN(e.translate))&&(e.translate=0)}function tp(e,t,n,r){ep(e.x,t.x,n.x,null==r?void 0:r.originX),ep(e.y,t.y,n.y,null==r?void 0:r.originY)}function np(e,t,n){e.min=n.min+t.min,e.max=e.min+Xd(t)}function rp(e,t,n){e.min=t.min-n.min,e.max=e.min+Xd(t)}function op(e,t,n){rp(e.x,t.x,n.x),rp(e.y,t.y,n.y)}function ip(e,t,n,r,o){return e=Fd(e-=t,1/n,r),void 0!==o&&(e=Fd(e,1/o,r)),e}function ap(e,t,n,r,o){var i=Xl(n,3),a=i[0],s=i[1],u=i[2];!function(e,t,n,r,o,i,a){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===i&&(i=e),void 0===a&&(a=e),Qc.test(t)&&(t=parseFloat(t),t=wc(a.min,a.max,t/100)-a.min),"number"==typeof t){var s=wc(i.min,i.max,r);e===i&&(s-=t),e.min=ip(e.min,t,n,s,o),e.max=ip(e.max,t,n,s,o)}}(e,t[a],t[s],t[u],t.scale,r,o)}var sp=["x","scaleX","originX"],up=["y","scaleY","originY"];function lp(e,t,n,r){ap(e.x,t,sp,null==n?void 0:n.x,null==r?void 0:r.x),ap(e.y,t,up,null==n?void 0:n.y,null==r?void 0:r.y)}function cp(e){return 0===e.translate&&1===e.scale}function fp(e){return cp(e.x)&&cp(e.y)}function dp(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var pp=function(){function e(){this.members=[]}return e.prototype.add=function(e){Nl(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(Il(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var o=this.members[r];if(!1!==o.isPresent){t=o;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,o,i;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(i=null===(r=e.resumingFrom)||void 0===r?void 0:(o=r.options).onExitComplete)||void 0===i||i.call(o)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),hp={};function mp(e,t,n){var r=e.x.translate/t.x,o=e.y.translate/t.y,i="translate3d(".concat(r,"px, ").concat(o,"px, 0) ");if(n){var a=n.rotate,s=n.rotateX,u=n.rotateY;a&&(i+="rotate(".concat(a,"deg) ")),s&&(i+="rotateX(".concat(s,"deg) ")),u&&(i+="rotateY(".concat(u,"deg) "))}return"translate3d(0px, 0px, 0) scale(1, 1)"===(i+="scale(".concat(e.x.scale,", ").concat(e.y.scale,")"))?"none":i}function vp(e){return[e("x"),e("y")]}var yp=["","X","Y","Z"],gp=["transformPerspective","x","y","z"];function bp(e,t){return gp.indexOf(e)-gp.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return yp.forEach((function(t){return gp.push(e+t)}))}));var wp=new Set(gp);function Sp(e){return wp.has(e)}var Ep=new Set(["originX","originY","originZ"]);function kp(e){return Ep.has(e)}var Ap=function(e,t){return e.depth-t.depth},Cp=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){Nl(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){Il(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(Ap),this.isDirty=!1,this.children.forEach(e)},e}();function xp(e){var t=Sc(e)?e.get():e;return function(e){return Boolean(e&&"object"==typeof e&&e.mix&&e.toValue)}(t)?t.toValue():t}var Tp={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function _p(e){var t=e.attachResizeListener,n=e.defaultParent,r=e.measureScroll,o=e.resetTransform;return function(){function e(e,t,r){var o=this;void 0===t&&(t={}),void 0===r&&(r=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){o.isUpdating&&(o.isUpdating=!1,o.clearAllSnapshots())},this.updateProjection=function(){o.nodes.forEach(Ip),o.nodes.forEach(Vp)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=r?r.root||r:this,this.path=r?Jl(Jl([],Xl(r.path),!1),[r],!1):[],this.parent=r,this.depth=r?r.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var i=0;i<this.path.length;i++)this.path[i].shouldResetTransform=!0;this.root===this&&(this.nodes=new Cp)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new Vl),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.eventHandlers.get(e);null==r||r.notify.apply(r,Jl([],Xl(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var r,o=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var i=this.options,a=i.layoutId,s=i.layout,u=i.visualElement;if(u&&!u.getInstance()&&u.mount(e),this.root.nodes.add(this),null===(r=this.parent)||void 0===r||r.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(s||a)&&(this.isLayoutDirty=!0),t){var l,c=function(){return o.root.updateBlockedByResize=!1};t(e,(function(){o.root.updateBlockedByResize=!0,clearTimeout(l),l=window.setTimeout(c,250),Tp.hasAnimatedSinceResize&&(Tp.hasAnimatedSinceResize=!1,o.nodes.forEach(Np))}))}a&&this.root.registerSharedNode(a,this),!1!==this.options.animate&&u&&(a||s)&&this.addEventListener("didUpdate",(function(e){var t,n,r,i,a,s=e.delta,l=e.hasLayoutChanged,c=e.hasRelativeTargetChanged,f=e.layout;if(o.isTreeAnimationBlocked())return o.target=void 0,void(o.relativeTarget=void 0);var d=null!==(n=null!==(t=o.options.transition)&&void 0!==t?t:u.getDefaultTransition())&&void 0!==n?n:Bp,p=u.getProps().onLayoutAnimationComplete,h=!o.targetLayout||!dp(o.targetLayout,f)||c,m=!l&&c;if((null===(r=o.resumeFrom)||void 0===r?void 0:r.instance)||m||l&&(h||!o.currentAnimation)){o.resumeFrom&&(o.resumingFrom=o.resumeFrom,o.resumingFrom.resumingFrom=void 0),o.setAnimationOrigin(s,m);var v=Yl(Yl({},kd(d,"layout")),{onComplete:p});u.shouldReduceMotion&&(v.delay=0,v.type=!1),o.startAnimation(v)}else l||0!==o.animationProgress||o.finishAnimation(),o.isLead()&&(null===(a=(i=o.options).onExitComplete)||void 0===a||a.call(i));o.targetLayout=f}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,xl.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach(Dp))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var o=0;o<this.path.length;o++){var i=this.path[o];i.shouldResetTransform=!0,i.updateScroll()}var a=this.options,s=a.layoutId,u=a.layout;if(void 0!==s||u){var l=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==l?void 0:l(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Mp);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(qp),this.potentialNodes.clear()),this.nodes.forEach(Lp),this.nodes.forEach(Pp),this.nodes.forEach(Rp),this.clearAllSnapshots(),Tl.update(),Tl.preRender(),Tl.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(Op),this.sharedNodes.forEach(jp)},e.prototype.scheduleUpdateProjection=function(){Ml.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;Ml.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));Hp(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();Hp(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.scroll=r(this.instance))},e.prototype.resetTransform=function(){var e;if(o){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!fp(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,i=null==r?void 0:r(this.latestValues,""),a=i!==this.prevTransformTemplateValue;t&&(n||Dd(this.latestValues)||a)&&(o(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(qd(t.x,n.x),qd(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};Nd(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],o=r.scroll,i=r.options;r!==this.root&&o&&i.layoutScroll&&(qd(t.x,o.x),qd(t.y,o.y))}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};Nd(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];!t&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Qd(n,{x:-o.scroll.x,y:-o.scroll.y}),Dd(o.latestValues)&&Qd(n,o.latestValues)}return Dd(this.latestValues)&&Qd(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};Nd(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];if(o.instance&&Dd(o.latestValues)){Vd(o.latestValues)&&o.updateSnapshot();var i={x:{min:0,max:0},y:{min:0,max:0}};Nd(i,o.measure()),lp(n,o.latestValues,null===(t=o.snapshot)||void 0===t?void 0:t.layout,i)}}return Dd(this.latestValues)&&lp(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=Yl(Yl(Yl({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,o=this.options,i=o.layout,a=o.layoutId;this.layout&&(i||a)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},op(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),Nd(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,np(t.x,n.x,r.x),np(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):Nd(this.target,this.layout.actual),Bd(this.target,this.targetDelta)):Nd(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},op(this.relativeTargetOrigin,this.target,this.relativeParent.target),Nd(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Dd(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var o=this.getLead();Nd(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var o,i;void 0===r&&(r=!1);var a=n.length;if(a){var s,u;t.x=t.y=1;for(var l=0;l<a;l++)u=(s=n[l]).projectionDelta,"contents"!==(null===(i=null===(o=s.instance)||void 0===o?void 0:o.style)||void 0===i?void 0:i.display)&&(r&&s.options.layoutScroll&&s.scroll&&s!==s.root&&Qd(e,{x:-s.scroll.x,y:-s.scroll.y}),u&&(t.x*=u.x.scale,t.y*=u.y.scale,Bd(e,u)),r&&Dd(s.latestValues)&&Qd(e,s.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);var i=o.target;if(i){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var a=this.treeScale.x,s=this.treeScale.y,u=this.projectionTransform;tp(this.projectionDelta,this.layoutCorrected,i,this.latestValues),this.projectionTransform=mp(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===a&&this.treeScale.y===s||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",i))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,r=this;void 0===t&&(t=!1);var o=this.snapshot,i=(null==o?void 0:o.latestValues)||{},a=Yl({},this.latestValues),s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var u={x:{min:0,max:0},y:{min:0,max:0}},l=null==o?void 0:o.isShared,c=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,f=Boolean(l&&!c&&!0===this.options.crossfade&&!this.path.some(zp));this.animationProgress=0,this.mixTargetDelta=function(t){var n,o,d,p,h,m=t/1e3;Fp(s.x,e.x,m),Fp(s.y,e.y,m),r.setTargetDelta(s),r.relativeTarget&&r.relativeTargetOrigin&&r.layout&&(null===(n=r.relativeParent)||void 0===n?void 0:n.layout)&&(op(u,r.layout.actual,r.relativeParent.layout.actual),o=r.relativeTarget,d=r.relativeTargetOrigin,p=u,h=m,Up(o.x,d.x,p.x,h),Up(o.y,d.y,p.y,h)),l&&(r.animationValues=a,function(e,t,n,r,o,i){var a,s,u,l;o?(e.opacity=wc(0,null!==(a=n.opacity)&&void 0!==a?a:1,Rd(r)),e.opacityExit=wc(null!==(s=t.opacity)&&void 0!==s?s:1,0,Od(r))):i&&(e.opacity=wc(null!==(u=t.opacity)&&void 0!==u?u:1,null!==(l=n.opacity)&&void 0!==l?l:1,r));for(var c=0;c<xd;c++){var f="border".concat(Cd[c],"Radius"),d=Pd(t,f),p=Pd(n,f);void 0===d&&void 0===p||(d||(d=0),p||(p=0),0===d||0===p||_d(d)===_d(p)?(e[f]=Math.max(wc(Td(d),Td(p),r),0),(Qc.test(p)||Qc.test(d))&&(e[f]+="%")):e[f]=p)}(t.rotate||n.rotate)&&(e.rotate=wc(t.rotate||0,n.rotate||0,r))}(a,i,r.latestValues,m,f,c)),r.root.scheduleUpdateProjection(),r.scheduleRender(),r.animationProgress=m},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,r=this;null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(xl.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=Ml.update((function(){Tp.hasAnimatedSinceResize=!0,r.currentAnimation=function(e,t,n){void 0===n&&(n={});var r=Sc(0)?0:jl(0);return Ad("",r,1e3,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}(0,0,Yl(Yl({},e),{onUpdate:function(t){var n;r.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),r.completeAnimation()}})),r.resumingFrom&&(r.resumingFrom.currentAnimation=r.currentAnimation),r.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,o=e.latestValues;t&&n&&r&&(Nd(t,n),Qd(t,o),tp(this.projectionDeltaWithTransform,this.layoutCorrected,t,o))},e.prototype.registerSharedNode=function(e,t){var n,r,o;this.sharedNodes.has(e)||this.sharedNodes.set(e,new pp),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(o=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===o?void 0:o.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,o=t.preserveFollowOpacity,i=this.getStack();i&&i.promote(this,o),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<yp.length;r++){var o="rotate"+yp[r];e.getStaticValue(o)&&(t=!0,n[o]=e.getStaticValue(o),e.setStaticValue(o,0))}if(t){for(var o in null==e||e.syncRender(),n)e.setStaticValue(o,n[o]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,o,i,a;void 0===e&&(e={});var s={};if(!this.instance||this.isSVG)return s;if(!this.isVisible)return{visibility:"hidden"};s.visibility="";var u=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,s.opacity="",s.pointerEvents=xp(e.pointerEvents)||"",s.transform=u?u(this.latestValues,""):"none",s;var l=this.getLead();if(!this.projectionDelta||!this.layout||!l.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=xp(e.pointerEvents)||""),this.hasProjected&&!Dd(this.latestValues)&&(c.transform=u?u({},""):"none",this.hasProjected=!1),c}var f=l.animationValues||l.latestValues;this.applyTransformsToTarget(),s.transform=mp(this.projectionDeltaWithTransform,this.treeScale,f),u&&(s.transform=u(f,s.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in s.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),l.animationValues?s.opacity=l===this?null!==(o=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:s.opacity=l===this?null!==(i=f.opacity)&&void 0!==i?i:"":null!==(a=f.opacityExit)&&void 0!==a?a:0,hp)if(void 0!==f[m]){var v=hp[m],y=v.correct,g=v.applyTo,b=y(f[m],l);if(g)for(var w=g.length,S=0;S<w;S++)s[g[S]]=b;else s[m]=b}return this.options.layoutId&&(s.pointerEvents=l===this?xp(e.pointerEvents)||"":"none"),s},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(Mp),this.root.sharedNodes.clear()},e}()}function Pp(e){e.updateLayout()}function Rp(e){var t,n,r,o,i=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&i&&e.hasListeners("didUpdate")){var a=e.layout,s=a.actual,u=a.measured;"size"===e.options.animationType?vp((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=Xd(t);t.min=s[e].min,t.max=t.min+n})):"position"===e.options.animationType&&vp((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=Xd(s[e]);t.max=t.min+n}));var l={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};tp(l,s,i.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};i.isShared?tp(c,e.applyTransform(u,!0),i.measured):tp(c,s,i.layout);var f=!fp(l),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};op(v,i.layout,h.layout);var y={x:{min:0,max:0},y:{min:0,max:0}};op(y,s,m.actual),dp(v,y)||(d=!0)}}e.notifyListeners("didUpdate",{layout:s,snapshot:i,delta:c,layoutDelta:l,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(o=(r=e.options).onExitComplete)||void 0===o||o.call(r));e.options.transition=void 0}function Op(e){e.clearSnapshot()}function Mp(e){e.clearMeasurements()}function Lp(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function Np(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function Ip(e){e.resolveTargetDelta()}function Vp(e){e.calcProjection()}function Dp(e){e.resetRotation()}function jp(e){e.removeLeadSnapshot()}function Fp(e,t,n){e.translate=wc(t.translate,0,n),e.scale=wc(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Up(e,t,n,r){e.min=wc(t.min,n.min,r),e.max=wc(t.max,n.max,r)}function zp(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var Bp={duration:.45,ease:[.4,0,.1,1]};function qp(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var o=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));o&&e.mount(o,!0)}function $p(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function Hp(e){$p(e.x),$p(e.y)}var Wp=1,Qp=(0,e.createContext)({}),Kp=(0,e.createContext)({}),Zp=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Zl(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(e.Component);function Yp(t){var n=t.preloadedFeatures,r=t.createVisualElement,o=t.projectionNodeConstructor,i=t.useRender,a=t.useVisualState,s=t.Component;return n&&function(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?tc.projectionNodeConstructor=e[t]:tc[t].Component=e[t])}(n),(0,e.forwardRef)((function(t,n){var u=function(t){var n,r=t.layoutId,o=null===(n=(0,e.useContext)(Qp))||void 0===n?void 0:n.id;return o&&void 0!==r?o+"-"+r:r}(t);t=Yl(Yl({},t),{layoutId:u});var l=(0,e.useContext)(ic),c=null,f=function(t){var n=function(e,t){if(vc(e)){var n=e.initial,r=e.animate;return{initial:!1===n||pc(n)?n:void 0,animate:pc(r)?r:void 0}}return!1!==e.inherit?t:{}}(t,(0,e.useContext)(ac)),r=n.initial,o=n.animate;return(0,e.useMemo)((function(){return{initial:r,animate:o}}),[gc(r),gc(o)])}(t),d=l.isStatic?void 0:bc((function(){if(Tp.hasEverUpdated)return Wp++})),p=a(t,l.isStatic);return!l.isStatic&&ql&&(f.visualElement=cc(s,p,Yl(Yl({},l),t),r),function(t,n,r,o){var i,a=n.layoutId,s=n.layout,u=n.drag,l=n.dragConstraints,c=n.layoutScroll,f=(0,e.useContext)(Kp);o&&r&&!(null==r?void 0:r.projection)&&(r.projection=new o(t,r.getLatestValues(),null===(i=r.parent)||void 0===i?void 0:i.projection),r.projection.setOptions({layoutId:a,layout:s,alwaysMeasureLayout:Boolean(u)||l&&fc(l),visualElement:r,scheduleRender:function(){return r.scheduleRender()},animationType:"string"==typeof s?s:"both",initialPromotionConfig:f,layoutScroll:c}))}(d,t,f.visualElement,o||tc.projectionNodeConstructor),c=function(t,n,r){var o=[];if((0,e.useContext)(nc),!n)return null;for(var i=0;i<oc;i++){var a=rc[i],s=tc[a],u=s.isEnabled,l=s.Component;u(t)&&l&&o.push(e.createElement(l,Yl({key:a},t,{visualElement:n})))}return o}(t,f.visualElement)),e.createElement(Zp,{visualElement:f.visualElement,props:Yl(Yl({},l),t)},c,e.createElement(ac.Provider,{value:f},i(s,t,d,function(t,n,r){return(0,e.useCallback)((function(e){var o;e&&(null===(o=t.mount)||void 0===o||o.call(t,e)),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):fc(r)&&(r.current=e))}),[n])}(p,f.visualElement,n),p,l.isStatic,f.visualElement)))}))}function Gp(e){function t(t,n){return void 0===n&&(n={}),Yp(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var Xp=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function Jp(e){return"string"==typeof e&&!e.includes("-")&&!!(Xp.indexOf(e)>-1||/[A-Z]/.test(e))}function eh(e,t){var n=t.layout,r=t.layoutId;return Sp(e)||kp(e)||(n||void 0!==r)&&(!!hp[e]||"opacity"===e)}var th={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function nh(e){return e.startsWith("--")}var rh=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function oh(e,t,n,r){var o,i=e.style,a=e.vars,s=e.transform,u=e.transformKeys,l=e.transformOrigin;u.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(nh(p))a[p]=h;else{var m=md[p],v=rh(h,m);if(Sp(p)){if(c=!0,s[p]=v,u.push(p),!d)continue;h!==(null!==(o=m.default)&&void 0!==o?o:0)&&(d=!1)}else kp(p)?(l[p]=v,f=!0):i[p]=v}}c?i.transform=function(e,t,n,r){var o=e.transform,i=e.transformKeys,a=t.enableHardwareAcceleration,s=void 0===a||a,u=t.allowTransformNone,l=void 0===u||u,c="";i.sort(bp);for(var f=!1,d=i.length,p=0;p<d;p++){var h=i[p];c+="".concat(th[h]||h,"(").concat(o[h],") "),"z"===h&&(f=!0)}return!f&&s?c+="translateZ(0)":c=c.trim(),r?c=r(o,n?"":c):l&&n&&(c="none"),c}(e,n,d,r):r?i.transform=r({},""):!t.transform&&i.transform&&(i.transform="none"),f&&(i.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,i=e.originZ,a=void 0===i?0:i;return"".concat(n," ").concat(o," ").concat(a)}(l))}function ih(e,t,n){for(var r in t)Sc(t[r])||eh(r,n)||(e[r]=t[r])}function ah(t,n,r){var o={},i=function(t,n,r){var o={};return ih(o,t.style||{},t),Object.assign(o,function(t,n,r){var o=t.transformTemplate;return(0,e.useMemo)((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};oh(e,n,{enableHardwareAcceleration:!r},o);var t=e.style;return Yl(Yl({},e.vars),t)}),[n])}(t,n,r)),t.transformValues&&(o=t.transformValues(o)),o}(t,n,r);return Boolean(t.drag)&&!1!==t.dragListener&&(o.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-".concat("x"===t.drag?"y":"x")),o.style=i,o}var sh=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function uh(e){return sh.has(e)}var lh,ch=function(e){return!uh(e)};try{(lh=require("@emotion/is-prop-valid").default)&&(ch=function(e){return e.startsWith("on")?!uh(e):lh(e)})}catch(e){}function fh(e,t,n){return"string"==typeof e?e:Kc.transform(t+n*e)}var dh={offset:"stroke-dashoffset",array:"stroke-dasharray"},ph={offset:"strokeDashoffset",array:"strokeDasharray"};function hh(e,t,n,r){var o=t.attrX,i=t.attrY,a=t.originX,s=t.originY,u=t.pathLength,l=t.pathSpacing,c=void 0===l?1:l,f=t.pathOffset,d=void 0===f?0:f;oh(e,Gl(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,r),e.attrs=e.style,e.style={};var p=e.attrs,h=e.style,m=e.dimensions;p.transform&&(m&&(h.transform=p.transform),delete p.transform),m&&(void 0!==a||void 0!==s||h.transform)&&(h.transformOrigin=function(e,t,n){var r=fh(t,e.x,e.width),o=fh(n,e.y,e.height);return"".concat(r," ").concat(o)}(m,void 0!==a?a:.5,void 0!==s?s:.5)),void 0!==o&&(p.x=o),void 0!==i&&(p.y=i),void 0!==u&&function(e,t,n,r,o){void 0===n&&(n=1),void 0===r&&(r=0),void 0===o&&(o=!0),e.pathLength=1;var i=o?dh:ph;e[i.offset]=Kc.transform(-r);var a=Kc.transform(t),s=Kc.transform(n);e[i.array]="".concat(a," ").concat(s)}(p,u,c,d,!1)}var mh=function(){return Yl(Yl({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function vh(t,n){var r=(0,e.useMemo)((function(){var e=mh();return hh(e,n,{enableHardwareAcceleration:!1},t.transformTemplate),Yl(Yl({},e.attrs),{style:Yl({},e.style)})}),[n]);if(t.style){var o={};ih(o,t.style,t),r.style=Yl(Yl({},o),r.style)}return r}function yh(t){return void 0===t&&(t=!1),function(n,r,o,i,a,s){var u=a.latestValues,l=(Jp(n)?vh:ah)(r,u,s),c=function(e,t,n){var r={};for(var o in e)(ch(o)||!0===n&&uh(o)||!t&&!uh(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof n,t),f=Yl(Yl(Yl({},c),l),{ref:i});return o&&(f["data-projection-id"]=o),(0,e.createElement)(n,f)}}var gh=/([a-z])([A-Z])/g,bh=function(e){return e.replace(gh,"$1-$2").toLowerCase()};function wh(e,t,n,r){var o=t.style,i=t.vars;for(var a in Object.assign(e.style,o,r&&r.getProjectionStyles(n)),i)e.style.setProperty(a,i[a])}var Sh=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function Eh(e,t){for(var n in wh(e,t),t.attrs)e.setAttribute(Sh.has(n)?n:bh(n),t.attrs[n])}function kh(e){var t=e.style,n={};for(var r in t)(Sc(t[r])||eh(r,e))&&(n[r]=t[r]);return n}function Ah(e){var t=kh(e);for(var n in e)Sc(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function Ch(e){return"object"==typeof e&&"function"==typeof e.start}function xh(e,t,n,r){var o=e.scrapeMotionValuesFromProps,i=e.createRenderState,a=e.onMount,s={latestValues:_h(t,n,r,o),renderState:i()};return a&&(s.mount=function(e){return a(t,e,s)}),s}var Th=function(t){return function(n,r){var o=(0,e.useContext)(ac),i=(0,e.useContext)(sc);return r?xh(t,n,o,i):bc((function(){return xh(t,n,o,i)}))}};function _h(e,t,n,r){var o={},i=!1===(null==n?void 0:n.initial),a=r(e);for(var s in a)o[s]=xp(a[s]);var u=e.initial,l=e.animate,c=vc(e),f=yc(e);t&&f&&!c&&!1!==e.inherit&&(null!=u||(u=t.initial),null!=l||(l=t.animate));var d=i||!1===u,p=d?l:u;return p&&"boolean"!=typeof p&&!Ch(p)&&(Array.isArray(p)?p:[p]).forEach((function(t){var n=hc(e,t);if(n){var r=n.transitionEnd;n.transition;var i=Gl(n,["transitionEnd","transition"]);for(var a in i){var s=i[a];Array.isArray(s)&&(s=s[d?s.length-1:0]),null!==s&&(o[a]=s)}for(var a in r)o[a]=r[a]}})),o}var Ph,Rh={useVisualState:Th({scrapeMotionValuesFromProps:Ah,createRenderState:mh,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}hh(r,o,{enableHardwareAcceleration:!1},e.transformTemplate),Eh(t,r)}})},Oh={useVisualState:Th({scrapeMotionValuesFromProps:kh,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function Mh(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Lh(e){return!!e.touches}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.InView="whileInView",e.Exit="exit"}(Ph||(Ph={}));var Nh={pageX:0,pageY:0};function Ih(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||Nh;return{x:n[t+"X"],y:n[t+"Y"]}}function Vh(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Dh(e,t){return void 0===t&&(t="page"),{point:Lh(e)?Ih(e,t):Vh(e,t)}}var jh=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Dh(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},Fh={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Uh={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function zh(e){return ql&&null===window.onpointerdown?e:ql&&null===window.ontouchstart?Uh[e]:ql&&null===window.onmousedown?Fh[e]:e}function Bh(e,t,n,r){return Ul(e,zh(t),jh(n,"pointerdown"===t),r)}function qh(e,t,n,r){return zl(e,zh(t),n&&jh(n,"pointerdown"===t),r)}function $h(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Hh=$h("dragHorizontal"),Wh=$h("dragVertical");function Qh(e){var t=!1;if("y"===e)t=Wh();else if("x"===e)t=Hh();else{var n=Hh(),r=Wh();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function Kh(){var e=Qh(!0);return!e||(e(),!1)}function Zh(e,t,n){return function(r,o){var i;Mh(r)&&!Kh()&&(null===(i=e.animationState)||void 0===i||i.setActive(Ph.Hover,t),null==n||n(r,o))}}var Yh=function(e,t){return!!t&&(e===t||Yh(e,t.parentElement))};function Gh(t){return(0,e.useEffect)((function(){return function(){return t()}}),[])}var Xh=new WeakMap,Jh=new WeakMap,em=function(e){var t;null===(t=Xh.get(e.target))||void 0===t||t(e)},tm=function(e){e.forEach(em)};var nm={some:0,all:1};function rm(t,n,r,o){var i=o.root,a=o.margin,s=o.amount,u=void 0===s?"some":s,l=o.once;(0,e.useEffect)((function(){if(t){var e={root:null==i?void 0:i.current,rootMargin:a,threshold:"number"==typeof u?u:nm[u]};return function(e,t,n){var r=function(e){var t=e.root,n=Gl(e,["root"]),r=t||document;Jh.has(r)||Jh.set(r,{});var o=Jh.get(r),i=JSON.stringify(n);return o[i]||(o[i]=new IntersectionObserver(tm,Yl({root:t},n))),o[i]}(t);return Xh.set(e,n),r.observe(e),function(){Xh.delete(e),r.unobserve(e)}}(r.getInstance(),e,(function(e){var t,o=e.isIntersecting;if(n.isInView!==o&&(n.isInView=o,!l||o||!n.hasEnteredView)){o&&(n.hasEnteredView=!0),null===(t=r.animationState)||void 0===t||t.setActive(Ph.InView,o);var i=r.getProps(),a=o?i.onViewportEnter:i.onViewportLeave;null==a||a(e)}}))}}),[t,i,a,u])}function om(t,n,r,o){var i=o.fallback,a=void 0===i||i;(0,e.useEffect)((function(){t&&a&&requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var t=r.getProps().onViewportEnter;null==t||t(null),null===(e=r.animationState)||void 0===e||e.setActive(Ph.InView,!0)}))}),[t])}var im=function(e){return function(t){return e(t),null}},am={inView:im((function(t){var n=t.visualElement,r=t.whileInView,o=t.onViewportEnter,i=t.onViewportLeave,a=t.viewport,s=void 0===a?{}:a,u=(0,e.useRef)({hasEnteredView:!1,isInView:!1}),l=Boolean(r||o||i);s.once&&u.current.hasEnteredView&&(l=!1),("undefined"==typeof IntersectionObserver?om:rm)(l,u.current,n,s)})),tap:im((function(t){var n=t.onTap,r=t.onTapStart,o=t.onTapCancel,i=t.whileTap,a=t.visualElement,s=n||r||o||i,u=(0,e.useRef)(!1),l=(0,e.useRef)(null);function c(){var e;null===(e=l.current)||void 0===e||e.call(l),l.current=null}function f(){var e;return c(),u.current=!1,null===(e=a.animationState)||void 0===e||e.setActive(Ph.Tap,!1),!Kh()}function d(e,t){f()&&(Yh(a.getInstance(),e.target)?null==n||n(e,t):null==o||o(e,t))}function p(e,t){f()&&(null==o||o(e,t))}qh(a,"pointerdown",s?function(e,t){var n;c(),u.current||(u.current=!0,l.current=yf(Bh(window,"pointerup",d),Bh(window,"pointercancel",p)),null===(n=a.animationState)||void 0===n||n.setActive(Ph.Tap,!0),null==r||r(e,t))}:void 0),Gh(c)})),focus:im((function(e){var t=e.whileFocus,n=e.visualElement;zl(n,"focus",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Ph.Focus,!0)}:void 0),zl(n,"blur",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Ph.Focus,!1)}:void 0)})),hover:im((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,o=e.visualElement;qh(o,"pointerenter",t||r?Zh(o,!0,t):void 0),qh(o,"pointerleave",n||r?Zh(o,!1,n):void 0)}))},sm=0,um=function(){return sm++},lm=function(){return bc(um)};function cm(){var t=(0,e.useContext)(sc);if(null===t)return[!0,null];var n=t.isPresent,r=t.onExitComplete,o=t.register,i=lm();return(0,e.useEffect)((function(){return o(i)}),[]),!n&&r?[!1,function(){return null==r?void 0:r(i)}]:[!0]}function fm(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var dm=function(e){return/^\-?\d*\.?\d+$/.test(e)},pm=function(e){return/^0[^.\s]+$/.test(e)},hm=function(e){return function(t){return t.test(e)}},mm=[Vc,Kc,Qc,Wc,Yc,Zc,{test:function(e){return"auto"===e},parse:function(e){return e}}],vm=function(e){return mm.find(hm(e))},ym=Jl(Jl([],Xl(mm),!1),[sf,hf],!1),gm=function(e){return ym.find(hm(e))};function bm(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,jl(n))}function wm(e,t){if(t)return(t[e]||t.default||t).from}function Sm(e,t,n){var r;void 0===n&&(n={});var o=mc(e,t,n.custom),i=(o||{}).transition,a=void 0===i?e.getDefaultTransition()||{}:i;n.transitionOverride&&(a=n.transitionOverride);var s=o?function(){return Em(e,o,n)}:function(){return Promise.resolve()},u=(null===(r=e.variantChildren)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var o=a.delayChildren,i=void 0===o?0:o,s=a.staggerChildren,u=a.staggerDirection;return function(e,t,n,r,o,i){void 0===n&&(n=0),void 0===r&&(r=0),void 0===o&&(o=1);var a=[],s=(e.variantChildren.size-1)*r,u=1===o?function(e){return void 0===e&&(e=0),e*r}:function(e){return void 0===e&&(e=0),s-e*r};return Array.from(e.variantChildren).sort(km).forEach((function(e,r){a.push(Sm(e,t,Yl(Yl({},i),{delay:n+u(r)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(a)}(e,t,i+r,s,u,n)}:function(){return Promise.resolve()},l=a.when;if(l){var c=Xl("beforeChildren"===l?[s,u]:[u,s],2),f=c[0],d=c[1];return f().then(d)}return Promise.all([s(),u(n.delay)])}function Em(e,t,n){var r,o=void 0===n?{}:n,i=o.delay,a=void 0===i?0:i,s=o.transitionOverride,u=o.type,l=e.makeTargetAnimatable(t),c=l.transition,f=void 0===c?e.getDefaultTransition():c,d=l.transitionEnd,p=Gl(l,["transition","transitionEnd"]);s&&(f=s);var h=[],m=u&&(null===(r=e.animationState)||void 0===r?void 0:r.getState()[u]);for(var v in p){var y=e.getValue(v),g=p[v];if(!(!y||void 0===g||m&&Am(m,v))){var b=Yl({delay:a},f);e.shouldReduceMotion&&Sp(v)&&(b=Yl(Yl({},b),{type:!1,delay:0}));var w=Ad(v,y,g,b);h.push(w)}}return Promise.all(h).then((function(){d&&function(e,t){var n=mc(e,t),r=n?e.makeTargetAnimatable(n,!1):{},o=r.transitionEnd,i=void 0===o?{}:o;r.transition;var a=Gl(r,["transitionEnd","transition"]);for(var s in a=Yl(Yl({},a),i))bm(e,s,bd(a[s]))}(e,d)}))}function km(e,t){return e.sortNodePosition(t)}function Am(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}var Cm=[Ph.Animate,Ph.InView,Ph.Focus,Ph.Hover,Ph.Tap,Ph.Drag,Ph.Exit],xm=Jl([],Xl(Cm),!1).reverse(),Tm=Cm.length;function _m(e){var t,n=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return function(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var o=t.map((function(t){return Sm(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=Sm(e,t,n);else{var i="function"==typeof t?mc(e,t,n.custom):t;r=Em(e,i,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}(e,n,r)})))}}(e),r=((t={})[Ph.Animate]=Pm(!0),t[Ph.InView]=Pm(),t[Ph.Hover]=Pm(),t[Ph.Tap]=Pm(),t[Ph.Drag]=Pm(),t[Ph.Focus]=Pm(),t[Ph.Exit]=Pm(),t),o={},i=!0,a=function(t,n){var r=mc(e,n);if(r){r.transition;var o=r.transitionEnd,i=Gl(r,["transition","transitionEnd"]);t=Yl(Yl(Yl({},t),i),o)}return t};function s(t,s){for(var u,l=e.getProps(),c=e.getVariantContext(!0)||{},f=[],d=new Set,p={},h=1/0,m=function(n){var o=xm[n],m=r[o],v=null!==(u=l[o])&&void 0!==u?u:c[o],y=pc(v),g=o===s?m.isActive:null;!1===g&&(h=n);var b=v===c[o]&&v!==l[o]&&y;if(b&&i&&e.manuallyAnimateOnMount&&(b=!1),m.protectedKeys=Yl({},p),!m.isActive&&null===g||!v&&!m.prevProp||Ch(v)||"boolean"==typeof v)return"continue";var w=function(e,t){return"string"==typeof t?t!==e:!!dc(t)&&!fm(t,e)}(m.prevProp,v),S=w||o===s&&m.isActive&&!b&&y||n>h&&y,E=Array.isArray(v)?v:[v],k=E.reduce(a,{});!1===g&&(k={});var A=m.prevResolvedValues,C=void 0===A?{}:A,x=Yl(Yl({},C),k),T=function(e){S=!0,d.delete(e),m.needsAnimating[e]=!0};for(var _ in x){var P=k[_],R=C[_];p.hasOwnProperty(_)||(P!==R?od(P)&&od(R)?!fm(P,R)||w?T(_):m.protectedKeys[_]=!0:void 0!==P?T(_):d.add(_):void 0!==P&&d.has(_)?T(_):m.protectedKeys[_]=!0)}m.prevProp=v,m.prevResolvedValues=k,m.isActive&&(p=Yl(Yl({},p),k)),i&&e.blockInitialAnimation&&(S=!1),S&&!b&&f.push.apply(f,Jl([],Xl(E.map((function(e){return{animation:e,options:Yl({type:o},t)}}))),!1))},v=0;v<Tm;v++)m(v);if(o=Yl({},p),d.size){var y={};d.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(y[t]=n)})),f.push({animation:y})}var g=Boolean(f.length);return i&&!1===l.initial&&!e.manuallyAnimateOnMount&&(g=!1),i=!1,g?n(f):Promise.resolve()}return{isAnimated:function(e){return void 0!==o[e]},animateChanges:s,setActive:function(t,n,o){var i;if(r[t].isActive===n)return Promise.resolve();null===(i=e.variantChildren)||void 0===i||i.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n;var a=s(o,t);for(var u in r)r[u].protectedKeys={};return a},setAnimateFunction:function(t){n=t(e)},getState:function(){return r}}}function Pm(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var Rm={animation:im((function(t){var n=t.visualElement,r=t.animate;n.animationState||(n.animationState=_m(n)),Ch(r)&&(0,e.useEffect)((function(){return r.subscribe(n)}),[r])})),exit:im((function(t){var n=t.custom,r=t.visualElement,o=Xl(cm(),2),i=o[0],a=o[1],s=(0,e.useContext)(sc);(0,e.useEffect)((function(){var e,t;r.isPresent=i;var o=null===(e=r.animationState)||void 0===e?void 0:e.setActive(Ph.Exit,!i,{custom:null!==(t=null==s?void 0:s.custom)&&void 0!==t?t:n});!i&&(null==o||o.then(a))}),[i])}))},Om=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=Nm(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=Gd(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,i=Ol().timestamp;r.history.push(Yl(Yl({},o),{timestamp:i}));var a=r.handlers,s=a.onStart,u=a.onMove;t||(s&&s(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),u&&u(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=Mm(t,r.transformPagePoint),Mh(e)&&0===e.buttons?r.handlePointerUp(e,t):Ml.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers,o=n.onEnd,i=n.onSessionEnd,a=Nm(Mm(t,r.transformPagePoint),r.history);r.startEvent&&o&&o(e,a),i&&i(e,a)},!(Lh(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var i=Mm(Dh(e),this.transformPagePoint),a=i.point,s=Ol().timestamp;this.history=[Yl(Yl({},a),{timestamp:s})];var u=t.onSessionStart;u&&u(e,Nm(i,this.history)),this.removeListeners=yf(Bh(window,"pointermove",this.handlePointerMove),Bh(window,"pointerup",this.handlePointerUp),Bh(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),xl.update(this.updatePoint)},e}();function Mm(e,t){return t?{point:t(e.point)}:e}function Lm(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Nm(e,t){var n=e.point;return{point:n,delta:Lm(n,Vm(t)),offset:Lm(n,Im(t)),velocity:Dm(t,.1)}}function Im(e){return e[0]}function Vm(e){return e[e.length-1]}function Dm(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Vm(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Qf(t)));)n--;if(!r)return{x:0,y:0};var i=(o.timestamp-r.timestamp)/1e3;if(0===i)return{x:0,y:0};var a={x:(o.x-r.x)/i,y:(o.y-r.y)/i};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function jm(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function Fm(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=Xl([o,r],2))[0],o=n[1]),{min:r,max:o}}var Um=.35;function zm(e,t,n){return{min:Bm(e,t),max:Bm(e,n)}}function Bm(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function qm(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function $m(e,t){return qm(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var Hm=new WeakMap,Wm=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,t){var n=this,r=(void 0===t?{}:t).snapToCursor,o=void 0!==r&&r;!1!==this.visualElement.isPresent&&(this.panSession=new Om(e,{onSessionStart:function(e){n.stopAnimation(),o&&n.snapToCursor(Dh(e,"page").point)},onStart:function(e,t){var r,o=n.getProps(),i=o.drag,a=o.dragPropagation,s=o.onDragStart;(!i||a||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=Qh(i),n.openGlobalLock))&&(n.isDragging=!0,n.currentDirection=null,n.resolveConstraints(),n.visualElement.projection&&(n.visualElement.projection.isAnimationBlocked=!0,n.visualElement.projection.target=void 0),vp((function(e){var t,r,o=n.getAxisMotionValue(e).get()||0;if(Qc.test(o)){var i=null===(r=null===(t=n.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===r?void 0:r.actual[e];i&&(o=Xd(i)*(parseFloat(o)/100))}n.originPoint[e]=o})),null==s||s(e,t),null===(r=n.visualElement.animationState)||void 0===r||r.setActive(Ph.Drag,!0))},onMove:function(e,t){var r=n.getProps(),o=r.dragPropagation,i=r.dragDirectionLock,a=r.onDirectionLock,s=r.onDrag;if(o||n.openGlobalLock){var u=t.offset;if(i&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(u),void(null!==n.currentDirection&&(null==a||a(n.currentDirection)));n.updateAxis("x",t.point,u),n.updateAxis("y",t.point,u),n.visualElement.syncRender(),null==s||s(e,t)}},onSessionEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var o=this.getProps().onDragEnd;null==o||o(e,t)}},e.prototype.cancel=function(){var e,t;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(Ph.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r=this.getProps().drag;if(n&&Qm(e,r,this.currentDirection)){var o,i,a,s,u,l=this.getAxisMotionValue(e),c=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(o=c,i=this.constraints[e],a=this.elastic[e],s=i.min,u=i.max,void 0!==s&&o<s?o=a?wc(s,o,a.min):Math.max(o,s):void 0!==u&&o>u&&(o=a?wc(u,o,a.max):Math.min(o,u)),c=o),l.set(c)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,o=(this.visualElement.projection||{}).layout,i=this.constraints;n&&fc(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!o)&&function(e,t){var n=t.top,r=t.left,o=t.bottom,i=t.right;return{x:jm(e.x,r,i),y:jm(e.y,n,o)}}(o.actual,n),this.elastic=function(e){return void 0===e&&(e=Um),!1===e?e=0:!0===e&&(e=Um),{x:zm(e,"left","right"),y:zm(e,"top","bottom")}}(r),i!==this.constraints&&o&&this.constraints&&!this.hasMutatedConstraints&&vp((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!fc(t))return!1;var r=t.current,o=this.visualElement.projection;if(!o||!o.layout)return!1;var i=function(e,t,n){var r=$m(e,n),o=t.scroll;return o&&(qd(r.x,o.x),qd(r.y,o.y)),r}(r,o.root,this.visualElement.getTransformPagePoint()),a=function(e,t){return{x:Fm(e.x,t.x),y:Fm(e.y,t.y)}}(o.layout.actual,i);if(n){var s=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(a));this.hasMutatedConstraints=!!s,s&&(a=qm(s))}return a},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),r=n.drag,o=n.dragMomentum,i=n.dragElastic,a=n.dragTransition,s=n.dragSnapToOrigin,u=n.onDragTransitionEnd,l=this.constraints||{},c=vp((function(n){var u;if(Qm(n,r,t.currentDirection)){var c=null!==(u=null==l?void 0:l[n])&&void 0!==u?u:{};s&&(c={min:0,max:0});var f=i?200:1e6,d=i?40:1e7,p=Yl(Yl({type:"inertia",velocity:o?e[n]:0,bounceStiffness:f,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10},a),c);return t.startAxisValueAnimation(n,p)}}));return Promise.all(c).then(u)},e.prototype.startAxisValueAnimation=function(e,t){return Ad(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;vp((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;vp((function(n){if(Qm(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,o=t.getAxisMotionValue(n);if(r&&r.layout){var i=r.layout.actual[n],a=i.min,s=i.max;o.set(e[n]-wc(a,s,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,o=n.dragConstraints,i=this.visualElement.projection;if(fc(o)&&i&&this.constraints){this.stopAnimation();var a={x:0,y:0};vp((function(e){var n,r,o,i,s,u=t.getAxisMotionValue(e);if(u){var l=u.get();a[e]=(n={min:l,max:l},r=t.constraints[e],o=.5,i=Xd(n),(s=Xd(r))>i?o=Pc(r.min,r.max-i,n.min):i>s&&(o=Pc(n.min,n.max-s,r.min)),Ec(0,1,o))}}));var s=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=s?s({},""):"none",null===(e=i.root)||void 0===e||e.updateScroll(),i.updateLayout(),this.resolveConstraints(),vp((function(e){if(Qm(e,r,null)){var n=t.getAxisMotionValue(e),o=t.constraints[e],i=o.min,s=o.max;n.set(wc(i,s,a[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;Hm.set(this.visualElement,this);var n=Bh(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=function(){fc(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},o=this.visualElement.projection,i=o.addEventListener("measure",r);o&&!o.layout&&(null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout()),r();var a=Ul(window,"resize",(function(){t.scalePositionWithinConstraints()}));return o.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(vp((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){a(),n(),i()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,i=e.dragPropagation,a=void 0!==i&&i,s=e.dragConstraints,u=void 0!==s&&s,l=e.dragElastic,c=void 0===l?Um:l,f=e.dragMomentum,d=void 0===f||f;return Yl(Yl({},e),{drag:n,dragDirectionLock:o,dragPropagation:a,dragConstraints:u,dragElastic:c,dragMomentum:d})},e}();function Qm(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Km={pan:im((function(t){var n=t.onPan,r=t.onPanStart,o=t.onPanEnd,i=t.onPanSessionStart,a=t.visualElement,s=n||r||o||i,u=(0,e.useRef)(null),l=(0,e.useContext)(ic).transformPagePoint,c={onSessionStart:i,onStart:r,onMove:n,onEnd:function(e,t){u.current=null,o&&o(e,t)}};(0,e.useEffect)((function(){null!==u.current&&u.current.updateHandlers(c)})),qh(a,"pointerdown",s&&function(e){u.current=new Om(e,c,{transformPagePoint:l})}),Gh((function(){return u.current&&u.current.end()}))})),drag:im((function(t){var n=t.dragControls,r=t.visualElement,o=bc((function(){return new Wm(r)}));(0,e.useEffect)((function(){return n&&n.subscribe(o)}),[o,n]),(0,e.useEffect)((function(){return o.addListeners()}),[o])}))},Zm=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"],Ym=function(e){var t=e.treeType,n=void 0===t?"":t,r=e.build,o=e.getBaseTarget,i=e.makeTargetAnimatable,a=e.measureViewportBox,s=e.render,u=e.readValueFromInstance,l=e.removeValueFromRenderState,c=e.sortNodePosition,f=e.scrapeMotionValuesFromProps;return function(e,t){var d=e.parent,p=e.props,h=e.presenceId,m=e.blockInitialAnimation,v=e.visualState,y=e.shouldReduceMotion;void 0===t&&(t={});var g,b,w=!1,S=v.latestValues,E=v.renderState,k=function(){var e=Zm.map((function(){return new Vl})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Zm.forEach((function(r){var o,i="on"+r,a=e[i];null===(o=t[r])||void 0===o||o.call(t),a&&(t[r]=n[i](a))}))}};return e.forEach((function(e,t){n["on"+Zm[t]]=function(t){return e.add(t)},n["notify"+Zm[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,Jl([],Xl(t),!1))}})),n}(),A=new Map,C=new Map,x={},T=Yl({},S);function _(){g&&w&&(P(),s(g,E,p.style,D.projection))}function P(){r(D,E,S,t,p)}function R(){k.notifyUpdate(S)}function O(e,t){var n=t.onChange((function(t){S[e]=t,p.onUpdate&&Ml.update(R,!1,!0)})),r=t.onRenderRequest(D.scheduleRender);C.set(e,(function(){n(),r()}))}var M=f(p);for(var L in M){var N=M[L];void 0!==S[L]&&Sc(N)&&N.set(S[L],!1)}var I=vc(p),V=yc(p),D=Yl(Yl({treeType:n,current:null,depth:d?d.depth+1:0,parent:d,children:new Set,presenceId:h,shouldReduceMotion:y,variantChildren:V?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==d?void 0:d.isMounted()),blockInitialAnimation:m,isMounted:function(){return Boolean(g)},mount:function(e){w=!0,g=D.current=e,D.projection&&D.projection.mount(e),V&&d&&!I&&(b=null==d?void 0:d.addVariantChild(D)),A.forEach((function(e,t){return O(t,e)})),null==d||d.children.add(D),D.setProps(p)},unmount:function(){var e;null===(e=D.projection)||void 0===e||e.unmount(),xl.update(R),xl.render(_),C.forEach((function(e){return e()})),null==b||b(),null==d||d.children.delete(D),k.clearAllListeners(),g=void 0,w=!1},addVariantChild:function(e){var t,n=D.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return c&&n===e.treeType?c(D.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return V?D:null==d?void 0:d.getClosestVariantNode()},getLayoutId:function(){return p.layoutId},getInstance:function(){return g},getStaticValue:function(e){return S[e]},setStaticValue:function(e,t){return S[e]=t},getLatestValues:function(){return S},setVisibility:function(e){D.isVisible!==e&&(D.isVisible=e,D.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),i(D,e,p,t)},measureViewportBox:function(){return a(g,p)},addValue:function(e,t){D.hasValue(e)&&D.removeValue(e),A.set(e,t),S[e]=t.get(),O(e,t)},removeValue:function(e){var t;A.delete(e),null===(t=C.get(e))||void 0===t||t(),C.delete(e),delete S[e],l(e,E)},hasValue:function(e){return A.has(e)},getValue:function(e,t){var n=A.get(e);return void 0===n&&void 0!==t&&(n=jl(t),D.addValue(e,n)),n},forEachValue:function(e){return A.forEach(e)},readValue:function(e){var n;return null!==(n=S[e])&&void 0!==n?n:u(g,e,t)},setBaseTarget:function(e,t){T[e]=t},getBaseTarget:function(e){if(o){var t=o(p,e);if(void 0!==t&&!Sc(t))return t}return T[e]}},k),{build:function(){return P(),E},scheduleRender:function(){Ml.render(_,!1,!0)},syncRender:_,setProps:function(e){(e.transformTemplate||p.transformTemplate)&&D.scheduleRender(),p=e,k.updatePropListeners(e),x=function(e,t,n){var r;for(var o in t){var i=t[o],a=n[o];if(Sc(i))e.addValue(o,i);else if(Sc(a))e.addValue(o,jl(i));else if(a!==i)if(e.hasValue(o)){var s=e.getValue(o);!s.hasAnimated&&s.set(i)}else e.addValue(o,jl(null!==(r=e.getStaticValue(o))&&void 0!==r?r:i))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}(D,f(p),x)},getProps:function(){return p},getVariant:function(e){var t;return null===(t=p.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return p.transition},getTransformPagePoint:function(){return p.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==d?void 0:d.getVariantContext();if(!I){var t=(null==d?void 0:d.getVariantContext())||{};return void 0!==p.initial&&(t.initial=p.initial),t}for(var n={},r=0;r<Xm;r++){var o=Gm[r],i=p[o];(pc(i)||!1===i)&&(n[o]=i)}return n}});return D}},Gm=Jl(["initial"],Xl(Cm),!1),Xm=Gm.length;function Jm(e){return"string"==typeof e&&e.startsWith("var(--")}var ev=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function tv(e,t,n){void 0===n&&(n=1),'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.');var r=Xl(function(e){var t=ev.exec(e);if(!t)return[,];var n=Xl(t,3);return[n[1],n[2]]}(e),2),o=r[0],i=r[1];if(o){var a=window.getComputedStyle(t).getPropertyValue(o);return a?a.trim():Jm(i)?tv(i,t,n+1):i}}var nv,rv=new Set(["width","height","top","left","right","bottom","x","y"]),ov=function(e){return rv.has(e)},iv=function(e,t){e.set(t,!1),e.set(t)},av=function(e){return e===Vc||e===Kc};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(nv||(nv={}));var sv=function(e,t){return parseFloat(e.split(", ")[t])},uv=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var i=o.match(/^matrix3d\((.+)\)$/);if(i)return sv(i[1],t);var a=o.match(/^matrix\((.+)\)$/);return a?sv(a[1],e):0}},lv=new Set(["x","y","z"]),cv=gp.filter((function(e){return!lv.has(e)})),fv={width:function(e,t){var n=e.x,r=t.paddingLeft,o=void 0===r?"0":r,i=t.paddingRight,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},height:function(e,t){var n=e.y,r=t.paddingTop,o=void 0===r?"0":r,i=t.paddingBottom,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:uv(4,13),y:uv(5,14)};function dv(e,t,n,r){return function(e){return Object.keys(e).some(ov)}(t)?function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=Yl({},t),r=Yl({},r);var o=Object.keys(t).filter(ov),i=[],a=!1,s=[];if(o.forEach((function(o){var u=e.getValue(o);if(e.hasValue(o)){var l,c=n[o],f=vm(c),d=t[o];if(od(d)){var p=d.length,h=null===d[0]?1:0;c=d[h],f=vm(c);for(var m=h;m<p;m++)l?vm(d[m]):(l=vm(d[m]))===f||av(f)&&av(l)}else l=vm(d);if(f!==l)if(av(f)&&av(l)){var v=u.get();"string"==typeof v&&u.set(parseFloat(v)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&l===Kc&&(t[o]=d.map(parseFloat))}else(null==f?void 0:f.transform)&&(null==l?void 0:l.transform)&&(0===c||0===d)?0===c?u.set(l.transform(c)):t[o]=f.transform(d):(a||(i=function(e){var t=[];return cv.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),a=!0),s.push(o),r[o]=void 0!==r[o]?r[o]:t[o],iv(u,d))}})),s.length){var u=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),i=getComputedStyle(o),a=i.display,s={};"none"===a&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){s[e]=fv[e](r,i)})),t.syncRender();var u=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);iv(r,s[n]),e[n]=fv[n](u,i)})),e}(t,e,s);return i.length&&i.forEach((function(t){var n=Xl(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.syncRender(),{target:u,transitionEnd:r}}return{target:t,transitionEnd:r}}(e,t,n,r):{target:t,transitionEnd:r}}var pv={treeType:"dom",readValueFromInstance:function(e,t){if(Sp(t)){var n=yd(t);return n&&n.default||0}var r,o=(r=e,window.getComputedStyle(r));return(nh(t)?o.getPropertyValue(t):o[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return $m(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,r){var o=n.transformValues;void 0===r&&(r=!0);var i=t.transition,a=t.transitionEnd,s=Gl(t,["transition","transitionEnd"]),u=function(e,t,n){var r,o,i={};for(var a in e)i[a]=null!==(r=wm(a,t))&&void 0!==r?r:null===(o=n.getValue(a))||void 0===o?void 0:o.get();return i}(s,i||{},e);if(o&&(a&&(a=o(a)),s&&(s=o(s)),u&&(u=o(u))),r){!function(e,t,n){var r,o,i,a,s=Object.keys(t).filter((function(t){return!e.hasValue(t)})),u=s.length;if(u)for(var l=0;l<u;l++){var c=s[l],f=t[c],d=null;Array.isArray(f)&&(d=f[0]),null===d&&(d=null!==(o=null!==(r=n[c])&&void 0!==r?r:e.readValue(c))&&void 0!==o?o:t[c]),null!=d&&("string"==typeof d&&(dm(d)||pm(d))?d=parseFloat(d):!gm(d)&&hf.test(f)&&(d=gd(c,f)),e.addValue(c,jl(d)),null!==(i=(a=n)[c])&&void 0!==i||(a[c]=d),e.setBaseTarget(c,d))}}(e,s,u);var l=function(e,t,n,r){var o=function(e,t,n){var r,o=Gl(t,[]),i=e.getInstance();if(!(i instanceof Element))return{target:o,transitionEnd:n};for(var a in n&&(n=Yl({},n)),e.forEachValue((function(e){var t=e.get();if(Jm(t)){var n=tv(t,i);n&&e.set(n)}})),o){var s=o[a];if(Jm(s)){var u=tv(s,i);u&&(o[a]=u,n&&(null!==(r=n[a])&&void 0!==r||(n[a]=s)))}}return{target:o,transitionEnd:n}}(e,t,r);return dv(e,t=o.target,n,r=o.transitionEnd)}(e,s,u,a);a=l.transitionEnd,s=l.target}return Yl({transition:i,transitionEnd:a},s)},scrapeMotionValuesFromProps:kh,build:function(e,t,n,r,o){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),oh(t,n,r,o.transformTemplate)},render:wh},hv=Ym(pv),mv=Ym(Yl(Yl({},pv),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return Sp(t)?(null===(n=yd(t))||void 0===n?void 0:n.default)||0:(t=Sh.has(t)?t:bh(t),e.getAttribute(t))},scrapeMotionValuesFromProps:Ah,build:function(e,t,n,r,o){hh(t,n,r,o.transformTemplate)},render:Eh})),vv=function(e,t){return Jp(e)?mv(t,{enableHardwareAcceleration:!1}):hv(t,{enableHardwareAcceleration:!0})};function yv(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var gv,bv,wv={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!Kc.test(e))return e;e=parseFloat(e)}var n=yv(e,t.target.x),r=yv(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},Sv="_$css",Ev={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,o=e,i=e.includes("var("),a=[];i&&(e=e.replace(ev,(function(e){return a.push(e),Sv})));var s=hf.parse(e);if(s.length>5)return o;var u=hf.createTransformer(e),l="number"!=typeof s[0]?1:0,c=r.x.scale*n.x,f=r.y.scale*n.y;s[0+l]/=c,s[1+l]/=f;var d=wc(c,f,.5);"number"==typeof s[2+l]&&(s[2+l]/=d),"number"==typeof s[3+l]&&(s[3+l]/=d);var p=u(s);if(i){var h=0;p=p.replace(Sv,(function(){var e=a[h];return h++,e}))}return p}},kv=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Zl(t,e),t.prototype.componentDidMount=function(){var e,t=this,n=this.props,r=n.visualElement,o=n.layoutGroup,i=n.switchLayoutGroup,a=n.layoutId,s=r.projection;e=Av,Object.assign(hp,e),s&&((null==o?void 0:o.group)&&o.group.add(s),(null==i?void 0:i.register)&&a&&i.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",(function(){t.safeToRemove()})),s.setOptions(Yl(Yl({},s.options),{onExitComplete:function(){return t.safeToRemove()}}))),Tp.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,o=n.visualElement,i=n.drag,a=n.isPresent,s=o.projection;return s?(s.isPresent=a,i||e.layoutDependency!==r||void 0===r?s.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?s.promote():s.relegate()||Ml.postRender((function(){var e;(null===(e=s.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,o=t.projection;o&&(o.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(o),(null==r?void 0:r.deregister)&&r.deregister(o))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(e.Component),Av={borderRadius:Yl(Yl({},wv),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:wv,borderTopRightRadius:wv,borderBottomLeftRadius:wv,borderBottomRightRadius:wv,boxShadow:Ev},Cv={measureLayout:function(t){var n=Xl(cm(),2),r=n[0],o=n[1],i=(0,e.useContext)(Qp);return e.createElement(kv,Yl({},t,{layoutGroup:i,switchLayoutGroup:(0,e.useContext)(Kp),isPresent:r,safeToRemove:o}))}},xv=_p({attachResizeListener:function(e,t){return e.addEventListener("resize",t,{passive:!0}),function(){return e.removeEventListener("resize",t)}},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}}}),Tv={current:void 0},_v=_p({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!Tv.current){var e=new xv(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),Tv.current=e}return Tv.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"}}),Pv=Yl(Yl(Yl(Yl({},Rm),am),Km),Cv),Rv=Gp((function(e,t){return function(e,t,n,r,o){var i=t.forwardMotionProps,a=void 0!==i&&i,s=Jp(e)?Rh:Oh;return Yl(Yl({},s),{preloadedFeatures:n,useRender:yh(a),createVisualElement:r,projectionNodeConstructor:o,Component:e})}(e,t,Pv,vv,_v)}));function Ov(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Mv,Lv,Nv,Iv=Je.ul(gv||(gv=Ov(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & li {\n    position: relative;\n    margin-right: 1em;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n"]))),Vv=Je(Rv.div)(bv||(bv=Ov(["\n  position: absolute;\n  bottom: -14px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: ",";\n"])),(function(e){return e.theme.lightMainColor})),Dv=Je(Rv.svg)(Mv||(Lv=["\n  width: 36px;\n  height: 36px;\n"],Nv||(Nv=Lv.slice(0)),Mv=Object.freeze(Object.defineProperties(Lv,{raw:{value:Object.freeze(Nv)}})))),jv={initial:{pathLength:0,fill:"rgba(45, 49, 250, 0)"},animate:{pathLength:1,fill:"rgba(45, 49, 250, 1)",transition:{default:{duration:4},fill:{duration:2,delay:2}}}};const Fv=function(){return e.createElement(Dv,{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 40 40"},e.createElement(Rv.path,{d:"M20,4c8.8,0,16,7.2,16,16s-7.2,16-16,16S4,28.8,4,20S11.2,4,20,4 M20,0C9,0,0,9,0,20s9,20,20,20s20-9,20-20S31,0,20,0L20,0z",fill:"current",stroke:"rgba(45, 49, 250, 1)",strokeWidth:"1",variants:jv,initial:"initial",animate:"animate"}),e.createElement(Rv.text,{transform:"matrix(1 0 0 1 5.1018 30.5771)",fill:"current",fontSize:"30px",variants:jv,initial:"initial",animate:"animate"},"Ｂ"))},Uv=function(){var t=Ku().pathname;return e.createElement(Iv,null,e.createElement("li",null,e.createElement(ml,{to:"/"},e.createElement(Fv,null))),e.createElement("li",null,e.createElement(ml,{to:"/"},"홈","/"===t&&e.createElement(Vv,{layoutId:"circle"}))),e.createElement("li",null,e.createElement(ml,{to:"/tvs"},"TV ",t.includes("/tvs")&&e.createElement(Vv,{layoutId:"circle"}))),e.createElement("li",null,e.createElement(ml,{to:"/movies"},"영화 ",t.includes("/movies")&&e.createElement(Vv,{layoutId:"circle"}))),e.createElement("li",null,e.createElement(ml,{to:"/search"},"검색 ",t.includes("/search")&&e.createElement(Vv,{layoutId:"circle"}))))};var zv,Bv,qv=Pu({key:"randomNumber",default:Math.floor(20*Math.random())}),$v=Pu({key:"mainMovieState",default:null}),Hv=Pu({key:"mainTvState",default:null}),Wv=Pu({key:"theme",default:null===(zv=JSON.parse(localStorage.getItem("theme")))||void 0===zv||zv}),Qv=Je(Rv.svg)(Bv||(Bv=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  fill: ",";\n  cursor: pointer;\n  z-index: 1;\n"])),(function(e){return e.theme.textColor})),Kv={initial:function(e){return{pathLength:0,fill:e?"rgba(36, 37, 38, 0)":"rgba(245, 246, 250, 0)"}},animate:function(e){return{pathLength:1,fill:e?"rgba(245, 246, 250, 1)":"rgba(36, 37, 38, 1)",transition:{default:{duration:4},fill:{duration:2,delay:2}}}}};const Zv=function(t){var n=t.searchOpen,r=t.onClick,o=Ru(Wv);return e.createElement(Qv,{version:"1.1",id:"layer",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 40 40",onClick:r,animate:{x:n?6:200},transition:{type:"linear",duration:.4}},e.createElement(Rv.path,{d:"M38.1,34.2l-9.2-9.2c1.3-2,2.1-4.5,2.1-7.1c0-7.2-5.8-13-13-13S5,10.8,5,18s5.8,13,13,13c3.1,0,6-1.1,8.2-2.9l9,9L38.1,34.2z M9,18c0-5,4-9,9-9s9,4,9,9s-4,9-9,9S9,23,9,18z",stroke:o?"rgba(245, 246, 250, 1)":"rgba(36, 37, 38, 1)",strokeWidth:"0.4",custom:o,variants:Kv,initial:"initial",animate:"animate"}))};var Yv,Gv;function Xv(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Jv=Je.ul(Yv||(Yv=Xv(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & li,\n  form {\n    margin-right: 1em;\n\n    &:first-child {\n      position: relative;\n      display: flex;\n      align-items: center;\n    }\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n"]))),ey=Je(Rv.input)(Gv||(Gv=Xv(["\n  font-size: 0.9rem;\n  padding: 0.5em;\n  padding-left: 36px;\n  background-color: ",";\n  color: ",";\n  border: 1px solid ",";\n\n  transform-origin: right center;\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    cursor: pointer;\n  }\n"])),(function(e){return e.theme.bgColor}),(function(e){return e.theme.textColor}),(function(e){return e.theme.textColor}));function ty(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ny=function(t){var n,r,o=(n=(0,e.useState)(t),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ty(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ty(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return[i,(0,e.useCallback)((function(e){return a(e.target.value)}),[]),a]};function ry(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return oy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?oy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function oy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const iy=function(){var t=Zu(),n=ry(ny(""),3),r=n[0],o=n[1],i=n[2],a=ry((0,e.useState)(!1),2),s=a[0],u=a[1],l=(0,e.useRef)(null),c=(0,e.useCallback)((function(){return u((function(e){var t;return e||null===(t=l.current)||void 0===t||t.focus(),!e}))}),[l]),f=(0,e.useCallback)((function(e){if(e.preventDefault(),0===r.length)return alert("검색어를 입력해주세요!");t("/search/".concat(r)),i("")}),[r]);return e.createElement(Jv,null,e.createElement("li",null,e.createElement("form",{onSubmit:f},e.createElement(Zv,{searchOpen:s,onClick:c}),e.createElement(ey,{ref:l,type:"search",placeholder:"제목 입력",value:r,onChange:o,initial:{scaleX:0},animate:{scaleX:s?1:0},transition:{duration:.4}}))),e.createElement("li",null,"알림"),e.createElement("li",null,"내 정보"),e.createElement("li",null,e.createElement("a",{href:"https://github.com/1-blue",target:"_blank"},e.createElement("b",null,"GitHub"))))};var ay,sy=Je(Rv.nav)(ay||(ay=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  padding: 1em;\n  margin-bottom: 2em;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n"])));function uy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ly={initial:{backgroundColor:"transparent"},animate:function(e){var t=e.y;return{backgroundColor:e.isDark?t>40?"rgba(36, 37, 38, 1)":"rgba(36, 37, 38, 0)":t>40?"rgba(245, 246, 250, 1)":"rgba(245, 246, 250, 0)",boxShadow:t>40?"0 0 16px black":"0 0 0px black",transition:{duration:.6}}}};const cy=function(){var t,n,r=Ru(Wv),o=Ql().scrollY,i=(t=(0,e.useState)(0),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return uy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uy(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],s=i[1];return(0,e.useEffect)((function(){return s(window.scrollY)}),[window.scrollY]),(0,e.useEffect)((function(){return o.onChange((function(e){return s(e)}))}),[o]),e.createElement(sy,{custom:{y:a,isDark:r},variants:ly,initial:"initial",animate:"animate"},e.createElement(Uv,null),e.createElement(iy,null))};var fy,dy=Je.aside(fy||(fy=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: fixed;\n  right: 2vh;\n  bottom: 2vh;\n  z-index: 1;\n  opacity: 0.8;\n\n  & .side-button {\n    font-size: 1.8rem;\n    background-color: ",";\n    border-radius: 100%;\n    padding: 0.4em;\n    box-shadow: 0 0 10px ",";\n    &:first-child {\n      margin-right: 0.6em;\n    }\n  }\n\n  & .move-top-button {\n    animation-name: appear;\n    animation-duration: 0.6s;\n    animation-fill-mode: forwards;\n  }\n"])),(function(e){return e.theme.textColor}),(function(e){return e.theme.textColor}));function py(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const my=function(){var t=py(Ou(Wv),2),n=t[0],r=t[1],o=py((0,e.useState)(!0),2),i=o[0],a=o[1],s=(0,e.useCallback)((function(){return window.scrollTo({top:0,behavior:"smooth"})}),[]),u=(0,e.useCallback)((function(){return a(0===document.documentElement.scrollTop)}),[]);(0,e.useEffect)((function(){return window.addEventListener("scroll",u),function(){return window.removeEventListener("scroll",u)}}),[]);var l=(0,e.useCallback)((function(){r((function(e){return localStorage.setItem("theme",JSON.stringify(!e)),!e}))}),[]);return e.createElement(dy,null,i||e.createElement("button",{type:"button",className:"side-button move-top-button",onClick:s},"👆"),e.createElement("button",{type:"button",className:"side-button",onClick:l},n?"☀️":"🌙"))};var vy,yy=Je.aside(vy||(vy=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 3px;\n  background: ",";\n  box-shadow: 0 0 5px black;\n  margin: 0;\n  width: ","%;\n"])),(function(e){return e.theme.textColor}),(function(e){return 100*e.currentPositionY}));function gy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const by=function(){var t,n,r=(t=(0,e.useState)(0),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return gy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gy(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=(0,e.useCallback)((function(){i(window.scrollY/(document.documentElement.scrollHeight-document.documentElement.clientHeight))}),[]);return(0,e.useEffect)((function(){return window.addEventListener("scroll",a),function(){return window.removeEventListener("scroll",a)}}),[a]),e.createElement(yy,{currentPositionY:o})};var wy,Sy=Je.main(wy||(wy=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}([""])));const Ey=function(t){var n=t.children;return e.createElement(e.Fragment,null,e.createElement(by,null),e.createElement(cy,null),e.createElement(my,null),e.createElement(Sy,null,n))};var ky,Ay,Cy;!function(e){e.MOVIE="movie",e.TV="tv"}(ky||(ky={})),function(e){e.POPULAR="popular",e.NOW_PLAYING="now_playing",e.UPCOMING="upcoming",e.TOP_RATED="top_rated"}(Ay||(Ay={})),function(e){e.POPULAR="popular",e.ON_THE_AIR="on_the_air",e.TOP_RATED="top_rated",e.AIRING_TODAY="airing_today"}(Cy||(Cy={}));var xy,Ty,_y,Py,Ry,Oy=function(e){var t=e.path,n=e.format;return"https://image.tmdb.org/t/p/".concat(void 0===n?"original":n,"/").concat(t)};function My(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ly,Ny=Je.section(xy||(xy=My(["\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-end;\n  align-items: flex-start;\n\n  padding: 2em;\n\n  ","\n  background-size: cover;\n  background-attachment: fixed;\n"])),(function(e){return e.isDark?Ie(Ty||(Ty=My(["\n          background-image: linear-gradient(to top, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0)), url(",");\n        "])),(function(e){return e.image})):Ie(_y||(_y=My(["\n          background-image: linear-gradient(to top, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0)),\n            url(",");\n        "])),(function(e){return e.image}))})),Iy=Je.h1(Py||(Py=My(["\n  font-size: 4rem;\n  margin-bottom: 0.4em;\n"]))),Vy=Je.p(Ry||(Ry=My(["\n  font-size: 1rem;\n  width: 50%;\n  margin-bottom: 16vh;\n"]))),Dy=Je(Rv.svg)(Ly||(Ly=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: fixed;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  width: 200px;\n  height: 200px;\n\n  transform: translateY(-50%);\n  fill: rgba(45, 49, 250, 1);\n"]))),jy={initial:{fill:"rgba(45, 49, 250, 1)"},animate:{rotateY:360,transition:{duration:2,repeat:1/0},fill:"rgba(45, 49, 250, 1)"}};const Fy=function(){return e.createElement(Dy,{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 40 40"},e.createElement(Rv.path,{d:"M20,4c8.8,0,16,7.2,16,16s-7.2,16-16,16S4,28.8,4,20S11.2,4,20,4 M20,0C9,0,0,9,0,20s9,20,20,20s20-9,20-20S31,0,20,0L20,0z",variants:jy,initial:"initial",animate:"animate"}),e.createElement(Rv.text,{transform:"matrix(1 0 0 1 5.1018 30.5771)",fontSize:"30px",variants:jy},"Ｂ"))},Uy=function(t){var n=t.item,r=Ru(Wv);return n?e.createElement(Ny,{image:Oy({path:n.backdrop_path}),isDark:r},e.createElement(Iy,null,n.title||n.name),e.createElement(Vy,null,n.overview)):e.createElement(Fy,null)};var zy,By,qy,$y,Hy,Wy,Qy,Ky="98ea2a58a0856a9379548498d78a3761",Zy="https://api.themoviedb.org/3",Yy=function(e){var t=e.kinds,n=e.page,r=void 0===n?1:n,o=e.language,i=void 0===o?"ko-KR":o;return fetch("".concat(Zy,"/movie/").concat(t,"?api_key=").concat(Ky,"&language=").concat(i,"&page=").concat(r)).then((function(e){return e.json()}))},Gy=function(e){var t=e.movieId,n=e.language,r=void 0===n?"ko-KR":n;return fetch("".concat(Zy,"/movie/").concat(t,"?api_key=").concat(Ky,"&language=").concat(r)).then((function(e){return e.json()}))},Xy=function(e){var t=e.kinds,n=e.page,r=void 0===n?1:n,o=e.language,i=void 0===o?"ko-KR":o;return fetch("".concat(Zy,"/tv/").concat(t,"?api_key=").concat(Ky,"&language=").concat(i,"&page=").concat(r)).then((function(e){return e.json()}))};function Jy(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var eg=Je(Rv.section)(zy||(zy=Jy(["\n  position: fixed;\n  top: 100px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  width: 40vw;\n  height: calc(100vh - 200px);\n  background-color: ",";\n  overflow-y: scroll;\n\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n"])),(function(e){return e.theme.bgColor})),tg=Je(Rv.div)(By||(By=Jy(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.6);\n"]))),ng=Je(Rv.figure)(qy||(qy=Jy(["\n  height: 50vh;\n  background-position: center center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-image: url(",");\n  background-color: black;\n"])),(function(e){return e.image})),rg=Je.h2($y||($y=Jy(["\n  padding: 0.6em 1em 0;\n"]))),og=Je.div(Hy||(Hy=Jy(["\n  display: flex;\n  padding: 0 1em 1em 1em;\n  color: ",";\n"])),(function(e){return e.theme.textColor})),ig=Je.p(Wy||(Wy=Jy(["\n  flex: 7 0 0;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.6em;\n"]))),ag=Je.ul(Qy||(Qy=Jy(['\n  flex: 3 0 0;\n  padding: 0.4em;\n\n  & li {\n    margin-bottom: 0.8em;\n\n    & .movie-sub-font-size {\n      font-size: 0.9rem;\n    }\n\n    & .movie-sub-title {\n      color: #777777;\n    }\n\n    & .movie-genre {\n      &::after {\n        content: ", ";\n      }\n      &:last-child::after {\n        content: "";\n      }\n    }\n  }\n'])));const sg=function(t){var n=t.kinds,r=t.itemId;(0,e.useEffect)((function(){return document.body.style.overflow="hidden",function(){return document.body.style.overflow="visible"}}),[]);var o=Zu(),i=Ku().state,a=(0,et.useQuery)(["movie",r],(function(){switch(n){case ky.MOVIE:return Gy({movieId:r});case ky.TV:return t=(e={tvId:r}).tvId,i=void 0===(o=e.language)?"ko-KR":o,fetch("".concat(Zy,"/tv/").concat(t,"?api_key=").concat(Ky,"&language=").concat(i)).then((function(e){return e.json()}));default:return Gy({movieId:r})}var e,t,o,i})).data,s=(0,e.useCallback)((function(){switch(n){case ky.MOVIE:var t=a;return e.createElement(e.Fragment,null,e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"장르: "),null==t?void 0:t.genres.map((function(t){return e.createElement("span",{key:t.id,className:"movie-genre movie-sub-font-size"},t.name)}))),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"런타임: "),e.createElement("span",{className:"movie-sub-font-size"},null==t?void 0:t.runtime,"분")),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"개봉일: "),e.createElement("span",{className:"movie-sub-font-size"},null==t?void 0:t.release_date)),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"평점: "),e.createElement("span",{className:"movie-sub-font-size"},null==t?void 0:t.vote_average)));case ky.TV:var r=a;return e.createElement(e.Fragment,null,e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"장르: "),null==r?void 0:r.genres.map((function(t){return e.createElement("span",{key:t.id,className:"movie-genre"},t.name)}))),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"런타임: "),null==r?void 0:r.episode_run_time,"분"),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"개봉일: "),null==r?void 0:r.first_air_date),e.createElement("li",null,e.createElement("span",{className:"movie-sub-title"},"평점: "),null==r?void 0:r.vote_average))}}),[n,a]),u=(0,e.useCallback)((function(){return o(-1)}),[]);return e.createElement(e.Fragment,null,e.createElement(tg,{onClick:u,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0}}),e.createElement(eg,{layoutId:r+i.identifier},e.createElement(ng,{image:Oy({path:(null==a?void 0:a.poster_path)||i.backdrop_path})}),e.createElement(rg,null,i.title),e.createElement(og,null,e.createElement(ig,null,null==a?void 0:a.overview),e.createElement(ag,null,s()))))};function ug(){var t=(0,e.useRef)(!1);return $l((function(){return t.current=!0,function(){t.current=!1}}),[]),t}var lg=function(t){var n=t.children,r=t.initial,o=t.isPresent,i=t.onExitComplete,a=t.custom,s=t.presenceAffectsLayout,u=bc(cg),l=lm(),c=(0,e.useMemo)((function(){return{id:l,initial:r,isPresent:o,custom:a,onExitComplete:function(e){var t,n;u.set(e,!0);try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(u.values()),o=r.next();!o.done;o=r.next())if(!o.value)return}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}null==i||i()},register:function(e){return u.set(e,!1),function(){return u.delete(e)}}}}),s?void 0:[o]);return(0,e.useMemo)((function(){u.forEach((function(e,t){return u.set(t,!1)}))}),[o]),e.useEffect((function(){!o&&!u.size&&(null==i||i())}),[o]),e.createElement(sc.Provider,{value:c},n)};function cg(){return new Map}var fg,dg,pg,hg,mg,vg,yg,gg,bg=function(e){return e.key||""},wg=function(t){var n=t.children,r=t.custom,o=t.initial,i=void 0===o||o,a=t.onExitComplete,s=t.exitBeforeEnter,u=t.presenceAffectsLayout,l=void 0===u||u,c=Xl(function(){var t=ug(),n=Xl((0,e.useState)(0),2),r=n[0],o=n[1],i=(0,e.useCallback)((function(){t.current&&o(r+1)}),[r]);return[(0,e.useCallback)((function(){return Ml.postRender(i)}),[i]),r]}(),1),f=c[0],d=(0,e.useContext)(Qp).forceRender;d&&(f=d);var p=ug(),h=function(t){var n=[];return e.Children.forEach(t,(function(t){(0,e.isValidElement)(t)&&n.push(t)})),n}(n),m=h,v=new Set,y=(0,e.useRef)(m),g=(0,e.useRef)(new Map).current,b=(0,e.useRef)(!0);if($l((function(){b.current=!1,function(e,t){e.forEach((function(e){var n=bg(e);t.set(n,e)}))}(h,g),y.current=m})),Gh((function(){b.current=!0,g.clear(),v.clear()})),b.current)return e.createElement(e.Fragment,null,m.map((function(t){return e.createElement(lg,{key:bg(t),isPresent:!0,initial:!!i&&void 0,presenceAffectsLayout:l},t)})));m=Jl([],Xl(m),!1);for(var w=y.current.map(bg),S=h.map(bg),E=w.length,k=0;k<E;k++){var A=w[k];-1===S.indexOf(A)&&v.add(A)}return s&&v.size&&(m=[]),v.forEach((function(t){if(-1===S.indexOf(t)){var n=g.get(t);if(n){var o=w.indexOf(t);m.splice(o,0,e.createElement(lg,{key:bg(n),isPresent:!1,onExitComplete:function(){g.delete(t),v.delete(t);var e=y.current.findIndex((function(e){return e.key===t}));if(y.current.splice(e,1),!v.size){if(y.current=h,!1===p.current)return;f(),a&&a()}},custom:r,presenceAffectsLayout:l},n))}}})),m=m.map((function(t){var n=t.key;return v.has(n)?t:e.createElement(lg,{key:bg(t),isPresent:!0,presenceAffectsLayout:l},t)})),e.createElement(e.Fragment,null,v.size?m:m.map((function(t){return(0,e.cloneElement)(t)})))};function Sg(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Eg=Je(Rv.section)(fg||(fg=Sg(["\n  position: relative;\n  top: -100px;\n  margin: 0 80px 280px;\n"]))),kg=Je.h2(dg||(dg=Sg(["\n  margin-bottom: 0.6em;\n"]))),Ag=Je(Rv.div)(pg||(pg=Sg(["\n  position: absolute;\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  gap: 10px;\n"]))),Cg=Je(Rv.div)(hg||(hg=Sg(["\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n\n  &:first-child {\n    transform-origin: center left;\n  }\n  &:last-child {\n    transform-origin: center right;\n  }\n\n  & span:last-child {\n    border-radius: 0 0 4px 4px;\n  }\n"]))),xg=Je(Rv.figure)(mg||(mg=Sg(["\n  height: 200px;\n  background-image: url(",");\n  background-size: cover;\n  background-position: center center;\n"])),(function(e){return e.image})),Tg=Je(Rv.div)(vg||(vg=Sg(["\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  text-align: center;\n  background-color: ",";\n  color: ",";\n  opacity: 0;\n  padding: 0.6em;\n\n  & span {\n    display: block;\n    margin-bottom: 0.4em;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  & .title {\n    font-weight: bold;\n    margin-bottom: 0.4em;\n  }\n\n  & .release-date,\n  .vote-average {\n    font-size: 0.7rem;\n    text-align: start;\n  }\n"])),(function(e){return e.theme.bgColor}),(function(e){return e.theme.textColor})),_g=Je(Rv.button)(yg||(yg=Sg(["\n  position: absolute;\n  right: -80px;\n  width: 80px;\n  height: 200px;\n  background-color: rgba(0, 0, 0, 0.4);\n  font-size: 30px;\n  opacity: 0;\n"]))),Pg=Je(Rv.button)(gg||(gg=Sg(["\n  position: absolute;\n  left: -80px;\n  width: 80px;\n  height: 200px;\n  background-color: rgba(0, 0, 0, 0.4);\n  font-size: 30px;\n  opacity: 0;\n"])));function Rg(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Og(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Og(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Og(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Mg={initial:function(e){return{x:e?window.innerWidth:-window.innerWidth}},animate:{x:0},exit:function(e){return{x:e?-window.innerWidth:window.innerWidth}}},Lg={hover:{scale:1.4,y:-40,boxShadow:"0 0 10px black",zIndex:1,borderRadius:"4px",transition:{type:"tween",delay:.4,duration:.4}}},Ng={hover:{opacity:1,transition:{type:"tween",delay:.4,duration:.4}}};const Ig=function(t){var n=t.kinds,r=t.title,o=t.items,i=Ku().pathname,a=Zu(),s=Rg((0,e.useState)(0),2),u=s[0],l=s[1],c=Rg((0,e.useState)(!1),2),f=c[0],d=c[1],p=Rg((0,e.useState)(!1),2),h=p[0],m=p[1],v=r+i,y=(0,e.useCallback)((function(){if(!f){d(!0),m(!0);var e=Math.ceil(o.length/6);l((function(t){return e<=t+1?0:t+1}))}}),[f]),g=(0,e.useCallback)((function(){if(!f){d(!0),m(!1);var e=Math.ceil(o.length/6);l((function(t){return-1>=t-1?e-1:t-1}))}}),[o,f]),b=(0,e.useCallback)((function(e,t,r,o){return function(){i.includes("/search")?a("".concat(i,"/").concat(e),{state:{backdrop_path:t,title:r,identifier:v,media_type:o}}):a("/".concat(n).concat("/"===i?"":"s","/").concat(e),{state:{backdrop_path:t,title:r,identifier:v}})}}),[i,v]);return e.createElement(Eg,null,e.createElement(kg,null,r),e.createElement(wg,{initial:!1,onExitComplete:function(){return d(!1)},custom:h},e.createElement(Ag,{custom:h,variants:Mg,initial:"initial",animate:"animate",exit:"exit",transition:{type:"tween",duration:1},key:u},o.slice(6*u,6*u+6).map((function(t){return e.createElement(Cg,{key:t.id,variants:Lg,whileHover:"hover",transition:{type:"tween"},onClick:b(t.id,t.backdrop_path,t.title||t.name,t.media_type),layoutId:t.id+v},e.createElement(xg,{image:Oy({path:t.backdrop_path,format:"w500"})}),e.createElement(Tg,{variants:Ng},e.createElement("h4",{className:"title"},t.title||t.name),e.createElement("span",{className:"release-date"},"🚀개봉일: ",t.release_date||t.first_air_date),e.createElement("span",{className:"vote-average"},"👍평점: ",t.vote_average)))})))),e.createElement(_g,{type:"button",onClick:y,whileHover:{fontSize:"50px",opacity:1},transition:{duration:.2}},"👉"),e.createElement(Pg,{type:"button",onClick:g,whileHover:{fontSize:"50px",opacity:1},transition:{duration:.2}},"👈"))},Vg=function(){var t=Ru(qv),n=Mu(Hv),r=(0,et.useQuery)(["tvs","popular"],(function(){return Xy({kinds:Cy.POPULAR})})),o=r.data,i=r.isLoading,a=(0,et.useQuery)(["tvs","top_rated"],(function(){return Xy({kinds:Cy.TOP_RATED})})),s=a.data,u=a.isLoading,l=(0,et.useQuery)(["tvs","onTheAir"],(function(){return Xy({kinds:Cy.ON_THE_AIR})})),c=l.data,f=l.isLoading,d=(0,et.useQuery)(["tvs","airingToday"],(function(){return Xy({kinds:Cy.AIRING_TODAY})})),p=d.data,h=d.isLoading;return(0,e.useEffect)((function(){n(o?o.results[t]:null)}),[o,t]),i||!o||u||!s||f||!c||h||!p?e.createElement(Fy,null):e.createElement(e.Fragment,null,e.createElement(Ig,{kinds:ky.TV,title:"인기 TV 프로그램 TOP 20",items:o.results.filter((function(e){return null!==e.backdrop_path}))}),e.createElement(Ig,{kinds:ky.TV,title:"최신 TV 프로그램 TOP 20",items:s.results.filter((function(e){return null!==e.backdrop_path}))}),e.createElement(Ig,{kinds:ky.TV,title:"현재 상영중인 TV 프로그램 TOP 20",items:c.results.filter((function(e){return null!==e.backdrop_path}))}),e.createElement(Ig,{kinds:ky.TV,title:"오늘 방송하는 TV 프로그램 TOP 20",items:p.results.filter((function(e){return null!==e.backdrop_path}))}))};function Dg(e){return function(e){if(Array.isArray(e))return jg(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return jg(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jg(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jg(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fg=function(){var t=Ru(qv),n=Mu($v),r=(0,et.useQuery)(["movies","popular"],(function(){return Yy({kinds:Ay.POPULAR})})),o=r.data,i=r.isLoading,a=(0,et.useQuery)(["movies","nowPlaying"],(function(){return Yy({kinds:Ay.NOW_PLAYING})})),s=a.data,u=a.isLoading,l=(0,et.useQuery)(["movies","upcoming"],(function(){return Yy({kinds:Ay.UPCOMING})})),c=l.data,f=l.isLoading,d=(0,et.useQuery)(["movies","topRated"],(function(){return Yy({kinds:Ay.TOP_RATED})})),p=d.data,h=d.isLoading;return(0,e.useEffect)((function(){n(o?o.results[t]:null)}),[o,t]),i||!o||u||!s||f||!c||h||!p?e.createElement(Fy,null):e.createElement(e.Fragment,null,e.createElement(Ig,{kinds:ky.MOVIE,title:"인기 영화 TOP 20",items:[].concat(Dg(null==o?void 0:o.results.slice(0,t)),Dg(null==o?void 0:o.results.slice(t+1)))}),e.createElement(Ig,{kinds:ky.MOVIE,title:"최고 평점 영화 TOP 20",items:p.results.filter((function(e){return null!==e.backdrop_path}))}),e.createElement(Ig,{kinds:ky.MOVIE,title:"현재 상영중인 영화 TOP 20",items:s.results.filter((function(e){return null!==e.backdrop_path}))}),e.createElement(Ig,{kinds:ky.MOVIE,title:"개봉예정 영화 TOP 20",items:c.results.filter((function(e){return null!==e.backdrop_path}))}))};var Ug,zg,Bg,qg,$g=n(697),Hg=n.n($g),Wg=n(524),Qg=n.n(Wg),Kg=n(590),Zg=n.n(Kg),Yg=n(418),Gg=n.n(Yg),Xg="bodyAttributes",Jg="htmlAttributes",eb={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},tb=(Object.keys(eb).map((function(e){return eb[e]})),"charset"),nb="cssText",rb="href",ob="innerHTML",ib="itemprop",ab="rel",sb={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},ub=Object.keys(sb).reduce((function(e,t){return e[sb[t]]=t,e}),{}),lb=[eb.NOSCRIPT,eb.SCRIPT,eb.STYLE],cb="data-react-helmet",fb="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},db=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},pb=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),hb=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mb=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},vb=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},yb=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!1===t?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},gb=function(e){var t=kb(e,eb.TITLE),n=kb(e,"titleTemplate");if(n&&t)return n.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var r=kb(e,"defaultTitle");return t||r||void 0},bb=function(e){return kb(e,"onChangeClientState")||function(){}},wb=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return hb({},e,t)}),{})},Sb=function(e,t){return t.filter((function(e){return void 0!==e[eb.BASE]})).map((function(e){return e[eb.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var r=Object.keys(n),o=0;o<r.length;o++){var i=r[o].toLowerCase();if(-1!==e.indexOf(i)&&n[i])return t.concat(n)}return t}),[])},Eb=function(e,t,n){var r={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&_b("Helmet: "+e+' should be of type "Array". Instead found type "'+fb(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var o={};n.filter((function(e){for(var n=void 0,i=Object.keys(e),a=0;a<i.length;a++){var s=i[a],u=s.toLowerCase();-1===t.indexOf(u)||n===ab&&"canonical"===e[n].toLowerCase()||u===ab&&"stylesheet"===e[u].toLowerCase()||(n=u),-1===t.indexOf(s)||s!==ob&&s!==nb&&s!==ib||(n=s)}if(!n||!e[n])return!1;var l=e[n].toLowerCase();return r[n]||(r[n]={}),o[n]||(o[n]={}),!r[n][l]&&(o[n][l]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var i=Object.keys(o),a=0;a<i.length;a++){var s=i[a],u=Gg()({},r[s],o[s]);r[s]=u}return e}),[]).reverse()},kb=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.hasOwnProperty(t))return r[t]}return null},Ab=(Ug=Date.now(),function(e){var t=Date.now();t-Ug>16?(Ug=t,e(t)):setTimeout((function(){Ab(e)}),0)}),Cb=function(e){return clearTimeout(e)},xb="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||Ab:n.g.requestAnimationFrame||Ab,Tb="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||Cb:n.g.cancelAnimationFrame||Cb,_b=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},Pb=null,Rb=function(e,t){var n=e.baseTag,r=e.bodyAttributes,o=e.htmlAttributes,i=e.linkTags,a=e.metaTags,s=e.noscriptTags,u=e.onChangeClientState,l=e.scriptTags,c=e.styleTags,f=e.title,d=e.titleAttributes;Lb(eb.BODY,r),Lb(eb.HTML,o),Mb(f,d);var p={baseTag:Nb(eb.BASE,n),linkTags:Nb(eb.LINK,i),metaTags:Nb(eb.META,a),noscriptTags:Nb(eb.NOSCRIPT,s),scriptTags:Nb(eb.SCRIPT,l),styleTags:Nb(eb.STYLE,c)},h={},m={};Object.keys(p).forEach((function(e){var t=p[e],n=t.newTags,r=t.oldTags;n.length&&(h[e]=n),r.length&&(m[e]=p[e].oldTags)})),t&&t(),u(e,h,m)},Ob=function(e){return Array.isArray(e)?e.join(""):e},Mb=function(e,t){void 0!==e&&document.title!==e&&(document.title=Ob(e)),Lb(eb.TITLE,t)},Lb=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var r=n.getAttribute(cb),o=r?r.split(","):[],i=[].concat(o),a=Object.keys(t),s=0;s<a.length;s++){var u=a[s],l=t[u]||"";n.getAttribute(u)!==l&&n.setAttribute(u,l),-1===o.indexOf(u)&&o.push(u);var c=i.indexOf(u);-1!==c&&i.splice(c,1)}for(var f=i.length-1;f>=0;f--)n.removeAttribute(i[f]);o.length===i.length?n.removeAttribute(cb):n.getAttribute(cb)!==a.join(",")&&n.setAttribute(cb,a.join(","))}},Nb=function(e,t){var n=document.head||document.querySelector(eb.HEAD),r=n.querySelectorAll(e+"[data-react-helmet]"),o=Array.prototype.slice.call(r),i=[],a=void 0;return t&&t.length&&t.forEach((function(t){var n=document.createElement(e);for(var r in t)if(t.hasOwnProperty(r))if(r===ob)n.innerHTML=t.innerHTML;else if(r===nb)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var s=void 0===t[r]?"":t[r];n.setAttribute(r,s)}n.setAttribute(cb,"true"),o.some((function(e,t){return a=t,n.isEqualNode(e)}))?o.splice(a,1):i.push(n)})),o.forEach((function(e){return e.parentNode.removeChild(e)})),i.forEach((function(e){return n.appendChild(e)})),{oldTags:o,newTags:i}},Ib=function(e){return Object.keys(e).reduce((function(t,n){var r=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+r:r}),"")},Vb=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[sb[n]||n]=e[n],t}),t)},Db=function(t,n,r){switch(t){case eb.TITLE:return{toComponent:function(){return t=n.title,r=n.titleAttributes,(o={key:t})[cb]=!0,i=Vb(r,o),[e.createElement(eb.TITLE,i,t)];var t,r,o,i},toString:function(){return function(e,t,n,r){var o=Ib(n),i=Ob(t);return o?"<"+e+' data-react-helmet="true" '+o+">"+yb(i,r)+"</"+e+">":"<"+e+' data-react-helmet="true">'+yb(i,r)+"</"+e+">"}(t,n.title,n.titleAttributes,r)}};case Xg:case Jg:return{toComponent:function(){return Vb(n)},toString:function(){return Ib(n)}};default:return{toComponent:function(){return function(t,n){return n.map((function(n,r){var o,i=((o={key:r})[cb]=!0,o);return Object.keys(n).forEach((function(e){var t=sb[e]||e;if(t===ob||t===nb){var r=n.innerHTML||n.cssText;i.dangerouslySetInnerHTML={__html:r}}else i[t]=n[e]})),e.createElement(t,i)}))}(t,n)},toString:function(){return function(e,t,n){return t.reduce((function(t,r){var o=Object.keys(r).filter((function(e){return!(e===ob||e===nb)})).reduce((function(e,t){var o=void 0===r[t]?t:t+'="'+yb(r[t],n)+'"';return e?e+" "+o:o}),""),i=r.innerHTML||r.cssText||"",a=-1===lb.indexOf(e);return t+"<"+e+' data-react-helmet="true" '+o+(a?"/>":">"+i+"</"+e+">")}),"")}(t,n,r)}}}},jb=function(e){var t=e.baseTag,n=e.bodyAttributes,r=e.encode,o=e.htmlAttributes,i=e.linkTags,a=e.metaTags,s=e.noscriptTags,u=e.scriptTags,l=e.styleTags,c=e.title,f=void 0===c?"":c,d=e.titleAttributes;return{base:Db(eb.BASE,t,r),bodyAttributes:Db(Xg,n,r),htmlAttributes:Db(Jg,o,r),link:Db(eb.LINK,i,r),meta:Db(eb.META,a,r),noscript:Db(eb.NOSCRIPT,s,r),script:Db(eb.SCRIPT,u,r),style:Db(eb.STYLE,l,r),title:Db(eb.TITLE,{title:f,titleAttributes:d},r)}},Fb=Qg()((function(e){return{baseTag:Sb([rb,"target"],e),bodyAttributes:wb(Xg,e),defer:kb(e,"defer"),encode:kb(e,"encodeSpecialCharacters"),htmlAttributes:wb(Jg,e),linkTags:Eb(eb.LINK,[ab,rb],e),metaTags:Eb(eb.META,["name",tb,"http-equiv","property",ib],e),noscriptTags:Eb(eb.NOSCRIPT,[ob],e),onChangeClientState:bb(e),scriptTags:Eb(eb.SCRIPT,["src",ob],e),styleTags:Eb(eb.STYLE,[nb],e),title:gb(e),titleAttributes:wb("titleAttributes",e)}}),(function(e){Pb&&Tb(Pb),e.defer?Pb=xb((function(){Rb(e,(function(){Pb=null}))})):(Rb(e),Pb=null)}),jb)((function(){return null})),Ub=(zg=Fb,qg=Bg=function(t){function n(){return db(this,n),vb(this,t.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,t),n.prototype.shouldComponentUpdate=function(e){return!Zg()(this.props,e)},n.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case eb.SCRIPT:case eb.NOSCRIPT:return{innerHTML:t};case eb.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},n.prototype.flattenArrayTypeChildren=function(e){var t,n=e.child,r=e.arrayTypeChildren,o=e.newChildProps,i=e.nestedChildren;return hb({},r,((t={})[n.type]=[].concat(r[n.type]||[],[hb({},o,this.mapNestedChildrenToProps(n,i))]),t))},n.prototype.mapObjectTypeChildren=function(e){var t,n,r=e.child,o=e.newProps,i=e.newChildProps,a=e.nestedChildren;switch(r.type){case eb.TITLE:return hb({},o,((t={})[r.type]=a,t.titleAttributes=hb({},i),t));case eb.BODY:return hb({},o,{bodyAttributes:hb({},i)});case eb.HTML:return hb({},o,{htmlAttributes:hb({},i)})}return hb({},o,((n={})[r.type]=hb({},i),n))},n.prototype.mapArrayTypeChildrenToProps=function(e,t){var n=hb({},t);return Object.keys(e).forEach((function(t){var r;n=hb({},n,((r={})[t]=e[t],r))})),n},n.prototype.warnOnInvalidChildren=function(e,t){return!0},n.prototype.mapChildrenToProps=function(t,n){var r=this,o={};return e.Children.forEach(t,(function(e){if(e&&e.props){var t=e.props,i=t.children,a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[ub[n]||n]=e[n],t}),t)}(mb(t,["children"]));switch(r.warnOnInvalidChildren(e,i),e.type){case eb.LINK:case eb.META:case eb.NOSCRIPT:case eb.SCRIPT:case eb.STYLE:o=r.flattenArrayTypeChildren({child:e,arrayTypeChildren:o,newChildProps:a,nestedChildren:i});break;default:n=r.mapObjectTypeChildren({child:e,newProps:n,newChildProps:a,nestedChildren:i})}}})),n=this.mapArrayTypeChildrenToProps(o,n)},n.prototype.render=function(){var t=this.props,n=t.children,r=mb(t,["children"]),o=hb({},r);return n&&(o=this.mapChildrenToProps(n,o)),e.createElement(zg,o)},pb(n,null,[{key:"canUseDOM",set:function(e){zg.canUseDOM=e}}]),n}(e.Component),Bg.propTypes={base:Hg().object,bodyAttributes:Hg().object,children:Hg().oneOfType([Hg().arrayOf(Hg().node),Hg().node]),defaultTitle:Hg().string,defer:Hg().bool,encodeSpecialCharacters:Hg().bool,htmlAttributes:Hg().object,link:Hg().arrayOf(Hg().object),meta:Hg().arrayOf(Hg().object),noscript:Hg().arrayOf(Hg().object),onChangeClientState:Hg().func,script:Hg().arrayOf(Hg().object),style:Hg().arrayOf(Hg().object),title:Hg().string,titleAttributes:Hg().object,titleTemplate:Hg().string},Bg.defaultProps={defer:!0,encodeSpecialCharacters:!0},Bg.peek=zg.peek,Bg.rewind=function(){var e=zg.rewind();return e||(e=jb({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},qg);Ub.renderStatic=Ub.rewind;var zb=function(t){var n=t.title,r=t.description,o=t.image,i=Ku().pathname;return e.createElement(Ub,null,e.createElement("title",null,n),e.createElement("meta",{name:"keyword",content:"bleflix, clone, netflix"}),e.createElement("meta",{name:"description",content:r}),e.createElement("meta",{name:"author",content:"1-blue"}),e.createElement("meta",{property:"og:url",content:"https://1-blue.github.io/react-clone-project".concat(i)}),e.createElement("meta",{property:"og:title",content:"bleflix"}),e.createElement("meta",{property:"og:description",content:r}),e.createElement("meta",{property:"og:image",content:o}),e.createElement("meta",{property:"og:type",content:"website"}),e.createElement("meta",{property:"og:site_name",content:"bleflix"}),e.createElement("meta",{property:"og:locale",content:"ko_KR"}),e.createElement("meta",{property:"og:image:width",content:"486"}),e.createElement("meta",{property:"og:image:height",content:"600"}))};zb.defaultProps={title:"bleflix",description:"bleflix, clone, netflix",image:"https://avatars.githubusercontent.com/u/63289318?v=4"};const Bb=zb,qb=function(){var t=Gu(),n=t.movieId,r=t.tvId,o=Ru($v);return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - home",image:(null==o?void 0:o.backdrop_path)||(null==o?void 0:o.poster_path)}),e.createElement(Uy,{item:o}),e.createElement(Fg,null),e.createElement(Vg,null),n?e.createElement(sg,{kinds:ky.MOVIE,itemId:n}):null,r?e.createElement(sg,{kinds:ky.TV,itemId:r}):null)},$b=function(){var t=Gu().tvId,n=Ru(Hv);return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - tvs",image:(null==n?void 0:n.backdrop_path)||(null==n?void 0:n.poster_path)}),e.createElement(Uy,{item:n}),e.createElement(Vg,null),t?e.createElement(sg,{kinds:ky.TV,itemId:t}):null)},Hb=function(){var t=Gu().movieId,n=Ru($v);return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - movies",image:(null==n?void 0:n.backdrop_path)||(null==n?void 0:n.poster_path)}),e.createElement(Uy,{item:n}),e.createElement(Fg,null),t?e.createElement(sg,{kinds:ky.MOVIE,itemId:t}):null)},Wb=function(){var t=Gu().itemId,n=Gu().query,r=(0,et.useQuery)(["search",n],(function(){return function(e){var t=e.query,n=e.page,r=void 0===n?1:n,o=e.language,i=void 0===o?"ko-KR":o;return fetch("".concat(Zy,"/search/multi?api_key=").concat(Ky,"&query=").concat(t,"&language=").concat(i,"&page=").concat(r,"&include_adult=true")).then((function(e){return e.json()}))}({query:n+""})})),o=r.data,i=r.isLoading,a=Ku().state;if(!o||i)return e.createElement(Fy,null);var s=o.results.filter((function(e){return e.backdrop_path})),u=s.filter((function(e){return e.media_type===ky.MOVIE})),l=s.filter((function(e){return e.media_type===ky.TV}));return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - search",image:s[0].backdrop_path}),e.createElement(Uy,{item:s[0]}),u.length>=1&&e.createElement(Ig,{kinds:o.results[0].media_type,title:"영화 검색 결과",items:u}),l.length>=1&&e.createElement(Ig,{kinds:o.results[0].media_type,title:"TV 검색 결과",items:l}),t?e.createElement(sg,{kinds:a.media_type||ky.MOVIE,itemId:t}):null)},Qb=function(){return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - NotFound"}),e.createElement("h1",null,"404 - Not Found"))};var Kb;function Zb(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Yb=Je.form(Kb||(Kb=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  & h1 {\n    margin-bottom: 1em;\n  }\n\n  & input[type="search"] {\n    padding: 0.6em;\n    font-size: 1.2rem;\n    font-weight: bold;\n    border: 0;\n    border-radius: 0.2em;\n\n    background-color: ',";\n    color: ",";\n  }\n"])),(function(e){return e.theme.textColor}),(function(e){return e.theme.bgColor}));const Gb=function(){var t,n,r=Zu(),o=Gu().query,i=(t=ny(""),n=3,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Zb(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zb(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],s=i[1],u=i[2],l=(0,e.useCallback)((function(e){if(e.preventDefault(),0===a.length)return alert("검색어를 입력해주세요!");r("/search/".concat(a)),u("")}),[a]);return e.createElement(e.Fragment,null,e.createElement(Bb,{title:"bleflix - search"}),o?e.createElement(qu,null):e.createElement(e.Fragment,null,e.createElement(Yb,{onSubmit:l},e.createElement("h1",null,"작품 검색"),e.createElement("input",{type:"search",placeholder:"제목을 입력해주세요",value:a,onChange:s}))))},Xb=function(){return e.createElement(hl,null,e.createElement(Ey,null,e.createElement(Wu,null,e.createElement($u,{path:"/",element:e.createElement(qb,null)},e.createElement($u,{path:"movie/:movieId"}),e.createElement($u,{path:"tv/:tvId"})),e.createElement($u,{path:"/tvs",element:e.createElement($b,null)},e.createElement($u,{path:":tvId"})),e.createElement($u,{path:"/movies",element:e.createElement(Hb,null)},e.createElement($u,{path:":movieId"})),e.createElement($u,{path:"/search",element:e.createElement(Gb,null)},e.createElement($u,{path:":query",element:e.createElement(Wb,null)},e.createElement($u,{path:":itemId"}))),e.createElement($u,{path:"/*",element:e.createElement(Qb,null)}))))};var Jb={bgColor:"#f5f6fa",textColor:"#2f3640",navColor:"#efefef",lightMainColor:"#5D8BF4",mainColor:"#2D31FA",DarkMainColor:"#051367"},ew={bgColor:"#2f3640",textColor:"#f5f6fa",navColor:"#242526",lightMainColor:"#5D8BF4",mainColor:"#2D31FA",DarkMainColor:"#051367"};const tw=function(t){var n=t.children,r=Ru(Wv);return e.createElement(Qe,{theme:r?ew:Jb},n)};var nw,rw=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=Ie.apply(void 0,[t].concat(r)),a="sc-global-"+Ue(JSON.stringify(i)),s=new Xe(i,a);function u(t){var n=ke(),r=Ae(),o=(0,e.useContext)(We),i=(0,e.useRef)(n.allocateGSInstance(a)).current;return n.server&&l(i,t,n,o,r),(0,e.useLayoutEffect)((function(){if(!n.server)return l(i,t,n,o,r),function(){return s.removeStyles(i,n)}}),[i,t,n,o,r]),null}function l(e,t,n,r,o){if(s.isStatic)s.renderStyles(e,z,n,o);else{var i=R({},t,{theme:Ve(t,r,u.defaultProps)});s.renderStyles(e,i,n,o)}}return e.memo(u)}(nw||(nw=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  body {\n    background-color: ",";\n    color: ",";\n    \n    -ms-overflow-style: none;\n    scrollbar-width: none;\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n  a {\n    color: ",";\n  }\n"])),(function(e){return e.theme.bgColor}),(function(e){return e.theme.textColor}),(function(e){return e.theme.textColor})),ow=new et.QueryClient;const iw=function(){return e.createElement(_u,null,e.createElement(et.QueryClientProvider,{client:ow},!1,e.createElement(tw,null,e.createElement(rw,null),e.createElement(Xb,null))))};t.render(e.createElement(e.StrictMode,null,e.createElement(iw,null)),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxPQUNFLGdCQUFDLGFBQUQsS0FDRSxnQkFBQyxHQUFELE9BRUZubEosU0FBU2dvRCxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jc3MvYW5pbWF0aW9uLmNzcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2Nzcy9jb21tb24uY3NzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY3NzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZGV2dG9vbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL2ZvY3VzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbG9nZ2VyLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9ub3RpZnlNYW5hZ2VyLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9vbmxpbmVNYW5hZ2VyLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlDYWNoZS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL211dGF0aW9uQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL2luZmluaXRlUXVlcnlCZWhhdmlvci5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlDbGllbnQuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3JldHJ5ZXIuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3N1YnNjcmliYWJsZS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9yZWFjdEJhdGNoZWRVcGRhdGVzLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3Qvc2V0QmF0Y2hVcGRhdGVzRm4uanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9zZXRMb2dnZXIuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9RdWVyeUNsaWVudFByb3ZpZGVyLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeU9ic2VydmVyLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC91c2VRdWVyeS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3VzZUJhc2VRdWVyeS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3V0aWxzLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2lkZS1lZmZlY3QvbGliL2luZGV4LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JsZWZsaXgvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmxlZmxpeC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JsZWZsaXgvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2Nzcy9yZXNldC5jc3M/MTUyYiIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2Nzcy9hbmltYXRpb24uY3NzPzBmYTgiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jc3MvY29tbW9uLmNzcz84ZmY2Iiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcmVjb2lsL2VzL3JlY29pbC5qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2luZGV4LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVzeW5jL2Rpc3QvZXMvb24tbmV4dC1mcmFtZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXN5bmMvZGlzdC9lcy9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXN5bmMvZGlzdC9lcy9jcmVhdGUtcmVuZGVyLXN0ZXAubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvdmVsb2NpdHktcGVyLXNlY29uZC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvYXJyYXkubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvc2Nyb2xsL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXNlLWRvbS1ldmVudC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtYnJvd3Nlci5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvc2Nyb2xsL3VzZS12aWV3cG9ydC1zY3JvbGwubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2RlZmluaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvdXNlLWZlYXR1cmVzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1yZWR1Y2VkLW1vdGlvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcmVmLW9iamVjdC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3ZhcmlhbnRzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvY3JlYXRlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtY29uc3RhbnQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvbWl4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvY2xhbXAubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy91dGlscy9maW5kLXNwcmluZy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9hbmltYXRpb25zL2dlbmVyYXRvcnMvc3ByaW5nLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL3Byb2dyZXNzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9udW1iZXJzL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvY29sb3IvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC9lcy9jb2xvci9yZ2JhLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvY29sb3IvaGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvbnVtYmVycy91bml0cy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zdHlsZS12YWx1ZS10eXBlcy9kaXN0L2VzL2NvbG9yL2hzbGEubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaHNsYS10by1yZ2JhLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb2xvci5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9zdHlsZS12YWx1ZS10eXBlcy9kaXN0L2VzL2NvbG9yL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvY29tcGxleC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9pbmMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvcGlwZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9taXgtY29tcGxleC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy91dGlscy9pbnRlcnBvbGF0ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9lYXNpbmcvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbnMvZ2VuZXJhdG9ycy9rZXlmcmFtZXMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy91dGlscy9kZXRlY3QtYW5pbWF0aW9uLWZyb20tb3B0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9hbmltYXRpb25zL2dlbmVyYXRvcnMvZGVjYXkubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9ucy91dGlscy9lbGFwc2VkLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbnMvaW5kZXgubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9wb3Btb3Rpb24vZGlzdC9lcy9lYXNpbmcvY3ViaWMtYmV6aWVyLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvZWFzaW5nLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0YWJsZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXZhbHVlLXR5cGVzL2Rpc3QvZXMvY29tcGxleC9maWx0ZXIubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1pbnQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2RlZmF1bHRzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2FuaW1hdGFibGUtbm9uZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWluc3RhbnQtdHJhbnNpdGlvbi1zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL3RyYW5zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbnMvaW5lcnRpYS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9hbmltYXRpb24vbWl4LXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb3B5Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL2hhcy10cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcG9pbnQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtcG9pbnQtM2QubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvcG9wbW90aW9uL2Rpc3QvZXMvdXRpbHMvZGlzdGFuY2UubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1yZW1vdmUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc2hhcmVkL3N0YWNrLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy90cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9jb21wYXJlLWJ5LWRlcHRoLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvZmxhdC10cmVlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91dGlscy9yZXNvbHZlLW1vdGlvbi12YWx1ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL2lkLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9WaXN1YWxFbGVtZW50SGFuZGxlci5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy91c2UtcHJvamVjdGlvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS1tb3Rpb24tcmVmLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi1wcm94eS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL2lzLWZvcmNlZC1tb3Rpb24tdmFsdWUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXRyYW5zZm9ybS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZ2V0LWFzLXR5cGUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXNlLXByb3BzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvdmFsaWQtcHJvcC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9maWx0ZXItcHJvcHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvdHJhbnNmb3JtLW9yaWdpbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9wYXRoLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXNlLXByb3BzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3VzZS1yZW5kZXIubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2NhbWVsLWNhc2UtYXR0cnMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL3VzZS12aXN1YWwtc3RhdGUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvY29uZmlnLW1vdGlvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC9jb25maWctbW90aW9uLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91dGlscy9ldmVudC10eXBlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvZXZlbnQtaW5mby5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL3VzZS1wb2ludGVyLWV2ZW50Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXRpbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvbG9jay5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXNlLWhvdmVyLWdlc3R1cmUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3V0aWxzL2lzLW5vZGUtb3ItY2hpbGQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL3ZpZXdwb3J0L29ic2VydmVycy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL3ZpZXdwb3J0L3VzZS12aWV3cG9ydC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXNlLXRhcC1nZXN0dXJlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91c2UtZm9jdXMtZ2VzdHVyZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWlkLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS91c2UtcHJlc2VuY2UubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3NoYWxsb3ctY29tcGFyZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtbnVtZXJpY2FsLXN0cmluZy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtemVyby12YWx1ZS1zdHJpbmcubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdGVzdC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9kaW1lbnNpb25zLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3R5cGUtYXV0by5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9maW5kLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvc2V0dGVycy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbnMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL1BhblNlc3Npb24ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvY29uc3RyYWludHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy9kcmFnL1Zpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91c2UtcGFuLWdlc3R1cmUubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9saWZlY3ljbGVzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaW5kZXgubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9tb3Rpb24tdmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2Nzcy12YXJpYWJsZXMtY29udmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy91bml0LWNvbnZlcnNpb24ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3Zpc3VhbC1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3Zpc3VhbC1lbGVtZW50Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm9yZGVyLXJhZGl1cy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm94LXNoYWRvdy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL0hUTUxQcm9qZWN0aW9uTm9kZS5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24ubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL05hdkJhci9MZWZ0L3N0eWxlLnRzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9jb21tb24vSWNvbi9Mb2dvL3N0eWxlLnRzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9jb21tb24vSWNvbi9Mb2dvL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvTmF2QmFyL0xlZnQvaW5kZXgudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvYXRvbXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9JY29uL1NlYXJjaC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL05hdkJhci9SaWdodC9zdHlsZS50cyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2hvb2tzL3VzZUlucHV0LnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvTmF2QmFyL1JpZ2h0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvTmF2QmFyL3N0eWxlLnRzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9OYXZCYXIvaW5kZXgudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9TaWRlQmFyL3N0eWxlLnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvU2lkZUJhci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9DdXJyZW50UG9zaXRpb24vc3R5bGUudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9DdXJyZW50UG9zaXRpb24vaW5kZXgudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvbGF5b3V0cy9MYXlvdXQudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvdHlwZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy91dGlscy9oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL0Jlbm5lci9zdHlsZS50cyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0xvYWRlci9zdHlsZS50cyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0xvYWRlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL0Jlbm5lci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9hcGkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL01vZGFsL3N0eWxlLnRzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWlzLW1vdW50ZWQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1ByZXNlbmNlQ2hpbGQubWpzIiwid2VicGFjazovL2JsZWZsaXgvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtZm9yY2UtdXBkYXRlLm1qcyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvQ2Fyb3VzZWwvc3R5bGUudHMiLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9jb21wb25lbnRzL0Nhcm91c2VsL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL2NvbXBvbmVudHMvVHZDYXJvdXNlbHMvaW5kZXgudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9Nb3ZpZUNhcm91c2Vscy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL25vZGVfbW9kdWxlcy9yZWFjdC1oZWxtZXQvZXMvSGVsbWV0LmpzIiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvY29tcG9uZW50cy9jb21tb24vSGVhZEluZm8vaW5kZXgudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvcGFnZXMvSG9tZS50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9wYWdlcy9UdnMudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvcGFnZXMvTW92aWVzLnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL3BhZ2VzL1NlYXJjaC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9wYWdlcy9Ob3RGb3VuZC50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy9wYWdlcy9Ob3RTZWFyY2gudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvcm91dGVzL0FwcFJvdXRlcy50c3giLCJ3ZWJwYWNrOi8vYmxlZmxpeC8uL3NyYy91dGlscy90aGVtZS50cyIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vc3JjL3V0aWxzL0N1c3RvbVRoZW1lUHJvdmlkZXIudHN4Iiwid2VicGFjazovL2JsZWZsaXgvLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly9ibGVmbGl4Ly4vaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyog67KE7Yq8IOyKpO2UvOuEiCDslaDri4jrqZTsnbTshZggKi9cXHJcXG5ALXdlYmtpdC1rZXlmcmFtZXMgc3Bpbm5lci1idXR0b24ge1xcclxcbiAgMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gIH1cXHJcXG4gIDEwMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICB9XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgc3Bpbm5lci1idXR0b24ge1xcclxcbiAgMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gIH1cXHJcXG4gIDEwMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi8qIOyCrOydtOuTnCDrsoTtirwg7JWg64uI66mU7J207IWYICovXFxyXFxuQC13ZWJraXQta2V5ZnJhbWVzIGFwcGVhciB7XFxyXFxuICBmcm9tIHtcXHJcXG4gICAgb3BhY2l0eTogMC4wMTtcXHJcXG4gIH1cXHJcXG4gIHRvIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuQGtleWZyYW1lcyBhcHBlYXIge1xcclxcbiAgMCUge1xcclxcbiAgICBvcGFjaXR5OiAwLjAxO1xcclxcbiAgfVxcclxcbiAgMTAwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICB9XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvYW5pbWF0aW9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxpQkFBaUI7QUFDakI7RUFDRTtJQUNFLCtCQUErQjtJQUMvQix1QkFBdUI7RUFDekI7RUFDQTtJQUNFLGlDQUFpQztJQUNqQyx5QkFBeUI7RUFDM0I7QUFDRjtBQUNBO0VBQ0U7SUFDRSwrQkFBK0I7SUFDL0IsdUJBQXVCO0VBQ3pCO0VBQ0E7SUFDRSxpQ0FBaUM7SUFDakMseUJBQXlCO0VBQzNCO0FBQ0Y7O0FBRUEsaUJBQWlCO0FBQ2pCO0VBQ0U7SUFDRSxhQUFhO0VBQ2Y7RUFDQTtJQUNFLFVBQVU7RUFDWjtBQUNGO0FBQ0E7RUFDRTtJQUNFLGFBQWE7RUFDZjtFQUNBO0lBQ0UsVUFBVTtFQUNaO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyog67KE7Yq8IOyKpO2UvOuEiCDslaDri4jrqZTsnbTshZggKi9cXHJcXG5ALXdlYmtpdC1rZXlmcmFtZXMgc3Bpbm5lci1idXR0b24ge1xcclxcbiAgMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gIH1cXHJcXG4gIDEwMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICB9XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgc3Bpbm5lci1idXR0b24ge1xcclxcbiAgMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gIH1cXHJcXG4gIDEwMCUge1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi8qIOyCrOydtOuTnCDrsoTtirwg7JWg64uI66mU7J207IWYICovXFxyXFxuQC13ZWJraXQta2V5ZnJhbWVzIGFwcGVhciB7XFxyXFxuICBmcm9tIHtcXHJcXG4gICAgb3BhY2l0eTogMC4wMTtcXHJcXG4gIH1cXHJcXG4gIHRvIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuQGtleWZyYW1lcyBhcHBlYXIge1xcclxcbiAgMCUge1xcclxcbiAgICBvcGFjaXR5OiAwLjAxO1xcclxcbiAgfVxcclxcbiAgMTAwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXHJcXG4gIC0tZmFjZWJvb2stY29sb3I6ICMzZjYyYTk7XFxyXFxuICAtLW5hdmVyLWNvbG9yOiAjMDBiZDM5O1xcclxcbiAgLS1rYWthby1jb2xvcjogI2VlZDcwMDtcXHJcXG5cXHJcXG4gIC0tbGlnaHQtYmx1ZTogIzAwOTVmNjtcXHJcXG4gIC0taGVhcnQtY29sb3I6ICNlZDQ5NTY7XFxyXFxufVxcclxcblxcclxcbi8qIOyehOyLnCDrtoDsl6wgKi9cXHJcXG4jcm9vdCB7XFxyXFxuXFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvY29tbW9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHlCQUF5QjtFQUN6QixzQkFBc0I7RUFDdEIsc0JBQXNCOztFQUV0QixxQkFBcUI7RUFDckIsc0JBQXNCO0FBQ3hCOztBQUVBLFVBQVU7QUFDVjs7QUFFQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxyXFxuICAtLWZhY2Vib29rLWNvbG9yOiAjM2Y2MmE5O1xcclxcbiAgLS1uYXZlci1jb2xvcjogIzAwYmQzOTtcXHJcXG4gIC0ta2FrYW8tY29sb3I6ICNlZWQ3MDA7XFxyXFxuXFxyXFxuICAtLWxpZ2h0LWJsdWU6ICMwMDk1ZjY7XFxyXFxuICAtLWhlYXJ0LWNvbG9yOiAjZWQ0OTU2O1xcclxcbn1cXHJcXG5cXHJcXG4vKiDsnoTsi5wg67aA7JesICovXFxyXFxuI3Jvb3Qge1xcclxcblxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcbmJvZHkge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG51bCB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5saSB7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5hIHtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gIGNvbG9yOiBibGFjaztcXHJcXG59XFxyXFxuYTpob3ZlciB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcbmlucHV0OmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbmlucHV0OmRpc2FibGVkIHtcXHJcXG4gIGNvbG9yOiBibGFjaztcXHJcXG59XFxyXFxuc2VsZWN0OmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbnRleHRhcmVhOmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbmgxLFxcclxcbmgyLFxcclxcbmgzLFxcclxcbmg0LFxcclxcbmg1LFxcclxcbmg2IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuaHIge1xcclxcbiAgY29sb3I6IGJsYWNrO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxucHJlIHtcXHJcXG4gIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuYnV0dG9uIHtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxucCB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcbmZpZ3VyZSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxTQUFTO0FBQ1g7QUFDQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0FBQ1o7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLFlBQVk7QUFDZDtBQUNBO0VBQ0UscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLFlBQVk7QUFDZDtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTs7Ozs7O0VBTUUsU0FBUztBQUNYO0FBQ0E7RUFDRSxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLFdBQVc7QUFDYjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLFNBQVM7QUFDWDtBQUNBO0VBQ0UsWUFBWTtFQUNaLDZCQUE2QjtFQUM3QixlQUFlO0VBQ2YsVUFBVTtBQUNaO0FBQ0E7RUFDRSxTQUFTO0FBQ1g7QUFDQTtFQUNFLFNBQVM7QUFDWFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcbmJvZHkge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG51bCB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5saSB7XFxyXFxuICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5hIHtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gIGNvbG9yOiBibGFjaztcXHJcXG59XFxyXFxuYTpob3ZlciB7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcbmlucHV0OmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbmlucHV0OmRpc2FibGVkIHtcXHJcXG4gIGNvbG9yOiBibGFjaztcXHJcXG59XFxyXFxuc2VsZWN0OmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbnRleHRhcmVhOmZvY3VzIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbmgxLFxcclxcbmgyLFxcclxcbmgzLFxcclxcbmg0LFxcclxcbmg1LFxcclxcbmg2IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuaHIge1xcclxcbiAgY29sb3I6IGJsYWNrO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxucHJlIHtcXHJcXG4gIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuYnV0dG9uIHtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxucCB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcbmZpZ3VyZSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyogZ2xvYmFsIE1hcDpyZWFkb25seSwgU2V0OnJlYWRvbmx5LCBBcnJheUJ1ZmZlcjpyZWFkb25seSAqL1xuXG52YXIgaGFzRWxlbWVudFR5cGUgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJztcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nO1xudmFyIGhhc0FycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmICEhQXJyYXlCdWZmZXIuaXNWaWV3O1xuXG4vLyBOb3RlOiBXZSAqKmRvbid0KiogbmVlZCBgZW52SGFzQmlnSW50NjRBcnJheWAgaW4gZmRlIGVzNi9pbmRleC5qc1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWwgZXM2L2luZGV4LmpzIDMuMS4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTVEFSVDogTW9kaWZpY2F0aW9uczpcbiAgICAvLyAxLiBFeHRyYSBgaGFzPFR5cGU+ICYmYCBoZWxwZXJzIGluIGluaXRpYWwgY29uZGl0aW9uIGFsbG93IGVzNiBjb2RlXG4gICAgLy8gICAgdG8gY28tZXhpc3Qgd2l0aCBlczUuXG4gICAgLy8gMi4gUmVwbGFjZSBgZm9yIG9mYCB3aXRoIGVzNSBjb21wbGlhbnQgaXRlcmF0aW9uIHVzaW5nIGBmb3JgLlxuICAgIC8vICAgIEJhc2ljYWxseSwgdGFrZTpcbiAgICAvL1xuICAgIC8vICAgIGBgYGpzXG4gICAgLy8gICAgZm9yIChpIG9mIGEuZW50cmllcygpKVxuICAgIC8vICAgICAgaWYgKCFiLmhhcyhpWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgIGBgYFxuICAgIC8vXG4gICAgLy8gICAgLi4uIGFuZCBjb252ZXJ0IHRvOlxuICAgIC8vXG4gICAgLy8gICAgYGBganNcbiAgICAvLyAgICBpdCA9IGEuZW50cmllcygpO1xuICAgIC8vICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgLy8gICAgICBpZiAoIWIuaGFzKGkudmFsdWVbMF0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gICAgYGBgXG4gICAgLy9cbiAgICAvLyAgICAqKk5vdGUqKjogYGlgIGFjY2VzcyBzd2l0Y2hlcyB0byBgaS52YWx1ZWAuXG4gICAgdmFyIGl0O1xuICAgIGlmIChoYXNNYXAgJiYgKGEgaW5zdGFuY2VvZiBNYXApICYmIChiIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSByZXR1cm4gZmFsc2U7XG4gICAgICBpdCA9IGEuZW50cmllcygpO1xuICAgICAgd2hpbGUgKCEoaSA9IGl0Lm5leHQoKSkuZG9uZSlcbiAgICAgICAgaWYgKCFiLmhhcyhpLnZhbHVlWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghZXF1YWwoaS52YWx1ZVsxXSwgYi5nZXQoaS52YWx1ZVswXSkpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU2V0ICYmIChhIGluc3RhbmNlb2YgU2V0KSAmJiAoYiBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghYi5oYXMoaS52YWx1ZVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBFTkQ6IE1vZGlmaWNhdGlvbnNcblxuICAgIGlmIChoYXNBcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcoYSkgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGIpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gRU5EOiBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIFNUQVJUOiByZWFjdC1mYXN0LWNvbXBhcmVcbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIERPTSBlbGVtZW50c1xuICAgIGlmIChoYXNFbGVtZW50VHlwZSAmJiBhIGluc3RhbmNlb2YgRWxlbWVudCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBSZWFjdC9QcmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGlmICgoa2V5c1tpXSA9PT0gJ19vd25lcicgfHwga2V5c1tpXSA9PT0gJ19fdicgfHwga2V5c1tpXSA9PT0gJ19fbycpICYmIGEuJCR0eXBlb2YpIHtcbiAgICAgICAgLy8gUmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUmVhY3QgZWxlbWVudHMnIF9vd25lclxuICAgICAgICAvLyBQcmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUHJlYWN0IGVsZW1lbnRzJyBfX3YgYW5kIF9fb1xuICAgICAgICAvLyAgICBfX3YgPSAkX29yaWdpbmFsIC8gJF92bm9kZVxuICAgICAgICAvLyAgICBfX28gPSAkX293bmVyXG4gICAgICAgIC8vIFRoZXNlIHByb3BlcnRpZXMgY29udGFpbiBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCBhcmUgbm90IG5lZWRlZCB3aGVuXG4gICAgICAgIC8vIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGVsZW1lbnRzXG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgIGlmICghZXF1YWwoYVtrZXlzW2ldXSwgYltrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gRU5EOiByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWxcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4vLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICgoKGVycm9yLm1lc3NhZ2UgfHwgJycpLm1hdGNoKC9zdGFja3xyZWN1cnNpb24vaSkpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ3JlYWN0LWZhc3QtY29tcGFyZSBjYW5ub3QgaGFuZGxlIGNpcmN1bGFyIHJlZnMnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJlYWN0UXVlcnlEZXZ0b29sczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuICAgIFJlYWN0UXVlcnlEZXZ0b29sc1BhbmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gIH1cbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZXZlbG9wbWVudCcpXG59XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIEZvY3VzTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N1YnNjcmliYWJsZSkge1xuICBfaW5oZXJpdHNMb29zZShGb2N1c01hbmFnZXIsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIEZvY3VzTWFuYWdlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dXAgPSBmdW5jdGlvbiAob25Gb2N1cykge1xuICAgICAgdmFyIF93aW5kb3c7XG5cbiAgICAgIGlmICghaXNTZXJ2ZXIgJiYgKChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgICAgICByZXR1cm4gb25Gb2N1cygpO1xuICAgICAgICB9OyAvLyBMaXN0ZW4gdG8gdmlzaWJpbGxpdHljaGFuZ2UgYW5kIGZvY3VzXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvY3VzTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDIsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChmdW5jdGlvbiAoZm9jdXNlZCkge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgX3RoaXMyLnNldEZvY3VzZWQoZm9jdXNlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczIub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRGb2N1c2VkID0gZnVuY3Rpb24gc2V0Rm9jdXNlZChmb2N1c2VkKSB7XG4gICAgdGhpcy5mb2N1c2VkID0gZm9jdXNlZDtcblxuICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc0ZvY3VzZWQgPSBmdW5jdGlvbiBpc0ZvY3VzZWQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZvY3VzZWQgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMuZm9jdXNlZDtcbiAgICB9IC8vIGRvY3VtZW50IGdsb2JhbCBjYW4gYmUgdW5hdmFpbGFibGUgaW4gcmVhY3QgbmF0aXZlXG5cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3VuZGVmaW5lZCwgJ3Zpc2libGUnLCAncHJlcmVuZGVyJ10uaW5jbHVkZXMoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlKTtcbiAgfTtcblxuICByZXR1cm4gRm9jdXNNYW5hZ2VyO1xufShTdWJzY3JpYmFibGUpO1xuZXhwb3J0IHZhciBmb2N1c01hbmFnZXIgPSBuZXcgRm9jdXNNYW5hZ2VyKCk7IiwiLy8gVFlQRVNcbi8vIEZVTkNUSU9OU1xudmFyIGxvZ2dlciA9IGNvbnNvbGU7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICByZXR1cm4gbG9nZ2VyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ2dlcihuZXdMb2dnZXIpIHtcbiAgbG9nZ2VyID0gbmV3TG9nZ2VyO1xufSIsImltcG9ydCB7IHNjaGVkdWxlTWljcm90YXNrIH0gZnJvbSAnLi91dGlscyc7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIE5vdGlmeU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb3RpZnlNYW5hZ2VyKCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IDA7XG5cbiAgICB0aGlzLm5vdGlmeUZuID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICB0aGlzLmJhdGNoTm90aWZ5Rm4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOb3RpZnlNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYmF0Y2ggPSBmdW5jdGlvbiBiYXRjaChjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdGhpcy50cmFuc2FjdGlvbnMrKztcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnRyYW5zYWN0aW9ucy0tO1xuXG4gICAgICBpZiAoIXRoaXMudHJhbnNhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5zY2hlZHVsZSA9IGZ1bmN0aW9uIHNjaGVkdWxlKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucykge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5ub3RpZnlGbihjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBjYWxscyB0byB0aGUgd3JhcHBlZCBmdW5jdGlvbiB3aWxsIGJlIGJhdGNoZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJhdGNoQ2FsbHMgPSBmdW5jdGlvbiBiYXRjaENhbGxzKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG5cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5iYXRjaE5vdGlmeUZuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMzLm5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBzZXQgYSBjdXN0b20gbm90aWZ5IGZ1bmN0aW9uLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGZvciBleGFtcGxlIHdyYXAgbm90aWZpY2F0aW9ucyB3aXRoIGBSZWFjdC5hY3RgIHdoaWxlIHJ1bm5pbmcgdGVzdHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldE5vdGlmeUZ1bmN0aW9uID0gZnVuY3Rpb24gc2V0Tm90aWZ5RnVuY3Rpb24oZm4pIHtcbiAgICB0aGlzLm5vdGlmeUZuID0gZm47XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBzZXQgYSBjdXN0b20gZnVuY3Rpb24gdG8gYmF0Y2ggbm90aWZpY2F0aW9ucyB0b2dldGhlciBpbnRvIGEgc2luZ2xlIHRpY2suXG4gICAqIEJ5IGRlZmF1bHQgUmVhY3QgUXVlcnkgd2lsbCB1c2UgdGhlIGJhdGNoIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IFJlYWN0RE9NIG9yIFJlYWN0IE5hdGl2ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiA9IGZ1bmN0aW9uIHNldEJhdGNoTm90aWZ5RnVuY3Rpb24oZm4pIHtcbiAgICB0aGlzLmJhdGNoTm90aWZ5Rm4gPSBmbjtcbiAgfTtcblxuICByZXR1cm4gTm90aWZ5TWFuYWdlcjtcbn0oKTsgLy8gU0lOR0xFVE9OXG5cbmV4cG9ydCB2YXIgbm90aWZ5TWFuYWdlciA9IG5ldyBOb3RpZnlNYW5hZ2VyKCk7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBPbmxpbmVNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKE9ubGluZU1hbmFnZXIsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIE9ubGluZU1hbmFnZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcblxuICAgIF90aGlzLnNldHVwID0gZnVuY3Rpb24gKG9uT25saW5lKSB7XG4gICAgICB2YXIgX3dpbmRvdztcblxuICAgICAgaWYgKCFpc1NlcnZlciAmJiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICAgIHJldHVybiBvbk9ubGluZSgpO1xuICAgICAgICB9OyAvLyBMaXN0ZW4gdG8gb25saW5lXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIEJlIHN1cmUgdG8gdW5zdWJzY3JpYmUgaWYgYSBuZXcgaGFuZGxlciBpcyBzZXRcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgbGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT25saW5lTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDIsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChmdW5jdGlvbiAob25saW5lKSB7XG4gICAgICBpZiAodHlwZW9mIG9ubGluZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIF90aGlzMi5zZXRPbmxpbmUob25saW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMi5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRPbmxpbmUgPSBmdW5jdGlvbiBzZXRPbmxpbmUob25saW5lKSB7XG4gICAgdGhpcy5vbmxpbmUgPSBvbmxpbmU7XG5cbiAgICBpZiAob25saW5lKSB7XG4gICAgICB0aGlzLm9uT25saW5lKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc09ubGluZSA9IGZ1bmN0aW9uIGlzT25saW5lKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMub25saW5lO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9O1xuXG4gIHJldHVybiBPbmxpbmVNYW5hZ2VyO1xufShTdWJzY3JpYmFibGUpO1xuZXhwb3J0IHZhciBvbmxpbmVNYW5hZ2VyID0gbmV3IE9ubGluZU1hbmFnZXIoKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldEFib3J0Q29udHJvbGxlciwgZnVuY3Rpb25hbFVwZGF0ZSwgaXNWYWxpZFRpbWVvdXQsIG5vb3AsIHJlcGxhY2VFcXVhbERlZXAsIHRpbWVVbnRpbFN0YWxlLCBlbnN1cmVRdWVyeUtleUFycmF5IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFJldHJ5ZXIsIGlzQ2FuY2VsbGVkRXJyb3IgfSBmcm9tICcuL3JldHJ5ZXInOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1ZXJ5KGNvbmZpZykge1xuICAgIHRoaXMuYWJvcnRTaWduYWxDb25zdW1lZCA9IGZhbHNlO1xuICAgIHRoaXMuaGFkT2JzZXJ2ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IGNvbmZpZy5kZWZhdWx0T3B0aW9ucztcbiAgICB0aGlzLnNldE9wdGlvbnMoY29uZmlnLm9wdGlvbnMpO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5jYWNoZSA9IGNvbmZpZy5jYWNoZTtcbiAgICB0aGlzLnF1ZXJ5S2V5ID0gY29uZmlnLnF1ZXJ5S2V5O1xuICAgIHRoaXMucXVlcnlIYXNoID0gY29uZmlnLnF1ZXJ5SGFzaDtcbiAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IGNvbmZpZy5zdGF0ZSB8fCB0aGlzLmdldERlZmF1bHRTdGF0ZSh0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLm1ldGEgPSBjb25maWcubWV0YTtcbiAgICB0aGlzLnNjaGVkdWxlR2MoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRjYWNoZVRpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMubWV0YSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YTsgLy8gRGVmYXVsdCB0byA1IG1pbnV0ZXMgaWYgbm90IGNhY2hlIHRpbWUgaXMgc2V0XG5cbiAgICB0aGlzLmNhY2hlVGltZSA9IE1hdGgubWF4KHRoaXMuY2FjaGVUaW1lIHx8IDAsIChfdGhpcyRvcHRpb25zJGNhY2hlVGkgPSB0aGlzLm9wdGlvbnMuY2FjaGVUaW1lKSAhPSBudWxsID8gX3RoaXMkb3B0aW9ucyRjYWNoZVRpIDogNSAqIDYwICogMTAwMCk7XG4gIH07XG5cbiAgX3Byb3RvLnNldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICB9O1xuXG4gIF9wcm90by5zY2hlZHVsZUdjID0gZnVuY3Rpb24gc2NoZWR1bGVHYygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuXG4gICAgaWYgKGlzVmFsaWRUaW1lb3V0KHRoaXMuY2FjaGVUaW1lKSkge1xuICAgICAgdGhpcy5nY1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgIH0sIHRoaXMuY2FjaGVUaW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyR2NUaW1lb3V0ID0gZnVuY3Rpb24gY2xlYXJHY1RpbWVvdXQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZ2NUaW1lb3V0KTtcbiAgICB0aGlzLmdjVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8ub3B0aW9uYWxSZW1vdmUgPSBmdW5jdGlvbiBvcHRpb25hbFJlbW92ZSgpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNGZXRjaGluZykge1xuICAgICAgICBpZiAodGhpcy5oYWRPYnNlcnZlcnMpIHtcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlR2MoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXREYXRhID0gZnVuY3Rpb24gc2V0RGF0YSh1cGRhdGVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJG9wdGlvbnMkaXNEYXRhRSwgX3RoaXMkb3B0aW9ucztcblxuICAgIHZhciBwcmV2RGF0YSA9IHRoaXMuc3RhdGUuZGF0YTsgLy8gR2V0IHRoZSBuZXcgZGF0YVxuXG4gICAgdmFyIGRhdGEgPSBmdW5jdGlvbmFsVXBkYXRlKHVwZGF0ZXIsIHByZXZEYXRhKTsgLy8gVXNlIHByZXYgZGF0YSBpZiBhbiBpc0RhdGFFcXVhbCBmdW5jdGlvbiBpcyBkZWZpbmVkIGFuZCByZXR1cm5zIGB0cnVlYFxuXG4gICAgaWYgKChfdGhpcyRvcHRpb25zJGlzRGF0YUUgPSAoX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucykuaXNEYXRhRXF1YWwpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zJGlzRGF0YUUuY2FsbChfdGhpcyRvcHRpb25zLCBwcmV2RGF0YSwgZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBwcmV2RGF0YTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyAhPT0gZmFsc2UpIHtcbiAgICAgIC8vIFN0cnVjdHVyYWxseSBzaGFyZSBkYXRhIGJldHdlZW4gcHJldiBhbmQgbmV3IGRhdGEgaWYgbmVlZGVkXG4gICAgICBkYXRhID0gcmVwbGFjZUVxdWFsRGVlcChwcmV2RGF0YSwgZGF0YSk7XG4gICAgfSAvLyBTZXQgZGF0YSBhbmQgbWFyayBpdCBhcyBjYWNoZWRcblxuXG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgZGF0YVVwZGF0ZWRBdDogb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy51cGRhdGVkQXRcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBfcHJvdG8uc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSwgc2V0U3RhdGVPcHRpb25zKSB7XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnc2V0U3RhdGUnLFxuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0U3RhdGVPcHRpb25zOiBzZXRTdGF0ZU9wdGlvbnNcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkcmV0cnllcjtcblxuICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuICAgIChfdGhpcyRyZXRyeWVyID0gdGhpcy5yZXRyeWVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcmV0cnllci5jYW5jZWwob3B0aW9ucyk7XG4gICAgcmV0dXJuIHByb21pc2UgPyBwcm9taXNlLnRoZW4obm9vcCkuY2F0Y2gobm9vcCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICAgIHRoaXMuY2FuY2VsKHtcbiAgICAgIHNpbGVudDogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIHRoaXMuc2V0U3RhdGUodGhpcy5pbml0aWFsU3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLm9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgcmV0dXJuIG9ic2VydmVyLm9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2U7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRmV0Y2hpbmcgPSBmdW5jdGlvbiBpc0ZldGNoaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzRmV0Y2hpbmc7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3RhbGUgPSBmdW5jdGlvbiBpc1N0YWxlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzSW52YWxpZGF0ZWQgfHwgIXRoaXMuc3RhdGUuZGF0YVVwZGF0ZWRBdCB8fCB0aGlzLm9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgcmV0dXJuIG9ic2VydmVyLmdldEN1cnJlbnRSZXN1bHQoKS5pc1N0YWxlO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc1N0YWxlQnlUaW1lID0gZnVuY3Rpb24gaXNTdGFsZUJ5VGltZShzdGFsZVRpbWUpIHtcbiAgICBpZiAoc3RhbGVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIHN0YWxlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNJbnZhbGlkYXRlZCB8fCAhdGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0IHx8ICF0aW1lVW50aWxTdGFsZSh0aGlzLnN0YXRlLmRhdGFVcGRhdGVkQXQsIHN0YWxlVGltZSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHZhciBfdGhpcyRyZXRyeWVyMjtcblxuICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LnNob3VsZEZldGNoT25XaW5kb3dGb2N1cygpO1xuICAgIH0pO1xuXG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5yZWZldGNoKCk7XG4gICAgfSAvLyBDb250aW51ZSBmZXRjaCBpZiBjdXJyZW50bHkgcGF1c2VkXG5cblxuICAgIChfdGhpcyRyZXRyeWVyMiA9IHRoaXMucmV0cnllcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHJldHJ5ZXIyLmNvbnRpbnVlKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uT25saW5lID0gZnVuY3Rpb24gb25PbmxpbmUoKSB7XG4gICAgdmFyIF90aGlzJHJldHJ5ZXIzO1xuXG4gICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHguc2hvdWxkRmV0Y2hPblJlY29ubmVjdCgpO1xuICAgIH0pO1xuXG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5yZWZldGNoKCk7XG4gICAgfSAvLyBDb250aW51ZSBmZXRjaCBpZiBjdXJyZW50bHkgcGF1c2VkXG5cblxuICAgIChfdGhpcyRyZXRyeWVyMyA9IHRoaXMucmV0cnllcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHJldHJ5ZXIzLmNvbnRpbnVlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcikgPT09IC0xKSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgIHRoaXMuaGFkT2JzZXJ2ZXJzID0gdHJ1ZTsgLy8gU3RvcCB0aGUgcXVlcnkgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZFxuXG4gICAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG4gICAgICB0aGlzLmNhY2hlLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdvYnNlcnZlckFkZGVkJyxcbiAgICAgICAgcXVlcnk6IHRoaXMsXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpICE9PSAtMSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT09IG9ic2VydmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghdGhpcy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoZSB0cmFuc3BvcnQgbGF5ZXIgZG9lcyBub3Qgc3VwcG9ydCBjYW5jZWxsYXRpb25cbiAgICAgICAgLy8gd2UnbGwgbGV0IHRoZSBxdWVyeSBjb250aW51ZSBzbyB0aGUgcmVzdWx0IGNhbiBiZSBjYWNoZWRcbiAgICAgICAgaWYgKHRoaXMucmV0cnllcikge1xuICAgICAgICAgIGlmICh0aGlzLnJldHJ5ZXIuaXNUcmFuc3BvcnRDYW5jZWxhYmxlIHx8IHRoaXMuYWJvcnRTaWduYWxDb25zdW1lZCkge1xuICAgICAgICAgICAgdGhpcy5yZXRyeWVyLmNhbmNlbCh7XG4gICAgICAgICAgICAgIHJldmVydDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmV0cnllci5jYW5jZWxSZXRyeSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNhY2hlVGltZSkge1xuICAgICAgICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FjaGUubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ29ic2VydmVyUmVtb3ZlZCcsXG4gICAgICAgIHF1ZXJ5OiB0aGlzLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0T2JzZXJ2ZXJzQ291bnQgPSBmdW5jdGlvbiBnZXRPYnNlcnZlcnNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlcnMubGVuZ3RoO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNJbnZhbGlkYXRlZCkge1xuICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdpbnZhbGlkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mZXRjaCA9IGZ1bmN0aW9uIGZldGNoKG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzLFxuICAgICAgICBfdGhpcyRvcHRpb25zJGJlaGF2aW8sXG4gICAgICAgIF9jb250ZXh0JGZldGNoT3B0aW9ucyxcbiAgICAgICAgX2Fib3J0Q29udHJvbGxlciRhYm9yO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNGZXRjaGluZykge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuZGF0YVVwZGF0ZWRBdCAmJiAoZmV0Y2hPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE9wdGlvbnMuY2FuY2VsUmVmZXRjaCkpIHtcbiAgICAgICAgLy8gU2lsZW50bHkgY2FuY2VsIGN1cnJlbnQgZmV0Y2ggaWYgdGhlIHVzZXIgd2FudHMgdG8gY2FuY2VsIHJlZmV0Y2hlc1xuICAgICAgICB0aGlzLmNhbmNlbCh7XG4gICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb21pc2UpIHtcbiAgICAgICAgdmFyIF90aGlzJHJldHJ5ZXI0O1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHJldHJpZXMgdGhhdCB3ZXJlIHBvdGVudGlhbGx5IGNhbmNlbGxlZCBkdWUgdG8gdW5tb3VudHMgY2FuIGNvbnRpbnVlXG4gICAgICAgIChfdGhpcyRyZXRyeWVyNCA9IHRoaXMucmV0cnllcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHJldHJ5ZXI0LmNvbnRpbnVlUmV0cnkoKTsgLy8gUmV0dXJuIGN1cnJlbnQgcHJvbWlzZSBpZiB3ZSBhcmUgYWxyZWFkeSBmZXRjaGluZ1xuXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgICB9XG4gICAgfSAvLyBVcGRhdGUgY29uZmlnIGlmIHBhc3NlZCwgb3RoZXJ3aXNlIHRoZSBjb25maWcgZnJvbSB0aGUgbGFzdCBleGVjdXRpb24gaXMgdXNlZFxuXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIH0gLy8gVXNlIHRoZSBvcHRpb25zIGZyb20gdGhlIGZpcnN0IG9ic2VydmVyIHdpdGggYSBxdWVyeSBmdW5jdGlvbiBpZiBubyBmdW5jdGlvbiBpcyBmb3VuZC5cbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgcXVlcnkgaXMgaHlkcmF0ZWQgb3IgY3JlYXRlZCB3aXRoIHNldFF1ZXJ5RGF0YS5cblxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucXVlcnlGbikge1xuICAgICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC5vcHRpb25zLnF1ZXJ5Rm47XG4gICAgICB9KTtcblxuICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvYnNlcnZlci5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcXVlcnlLZXkgPSBlbnN1cmVRdWVyeUtleUFycmF5KHRoaXMucXVlcnlLZXkpO1xuICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBnZXRBYm9ydENvbnRyb2xsZXIoKTsgLy8gQ3JlYXRlIHF1ZXJ5IGZ1bmN0aW9uIGNvbnRleHRcblxuICAgIHZhciBxdWVyeUZuQ29udGV4dCA9IHtcbiAgICAgIHF1ZXJ5S2V5OiBxdWVyeUtleSxcbiAgICAgIHBhZ2VQYXJhbTogdW5kZWZpbmVkLFxuICAgICAgbWV0YTogdGhpcy5tZXRhXG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocXVlcnlGbkNvbnRleHQsICdzaWduYWwnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmIChhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICBfdGhpczIuYWJvcnRTaWduYWxDb25zdW1lZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pOyAvLyBDcmVhdGUgZmV0Y2ggZnVuY3Rpb25cblxuICAgIHZhciBmZXRjaEZuID0gZnVuY3Rpb24gZmV0Y2hGbigpIHtcbiAgICAgIGlmICghX3RoaXMyLm9wdGlvbnMucXVlcnlGbikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ01pc3NpbmcgcXVlcnlGbicpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuYWJvcnRTaWduYWxDb25zdW1lZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzMi5vcHRpb25zLnF1ZXJ5Rm4ocXVlcnlGbkNvbnRleHQpO1xuICAgIH07IC8vIFRyaWdnZXIgYmVoYXZpb3IgaG9va1xuXG5cbiAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgIGZldGNoT3B0aW9uczogZmV0Y2hPcHRpb25zLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICBmZXRjaEZuOiBmZXRjaEZuLFxuICAgICAgbWV0YTogdGhpcy5tZXRhXG4gICAgfTtcblxuICAgIGlmICgoX3RoaXMkb3B0aW9ucyRiZWhhdmlvID0gdGhpcy5vcHRpb25zLmJlaGF2aW9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRiZWhhdmlvLm9uRmV0Y2gpIHtcbiAgICAgIHZhciBfdGhpcyRvcHRpb25zJGJlaGF2aW8yO1xuXG4gICAgICAoX3RoaXMkb3B0aW9ucyRiZWhhdmlvMiA9IHRoaXMub3B0aW9ucy5iZWhhdmlvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkYmVoYXZpbzIub25GZXRjaChjb250ZXh0KTtcbiAgICB9IC8vIFN0b3JlIHN0YXRlIGluIGNhc2UgdGhlIGN1cnJlbnQgZmV0Y2ggbmVlZHMgdG8gYmUgcmV2ZXJ0ZWRcblxuXG4gICAgdGhpcy5yZXZlcnRTdGF0ZSA9IHRoaXMuc3RhdGU7IC8vIFNldCB0byBmZXRjaGluZyBzdGF0ZSBpZiBub3QgYWxyZWFkeSBpbiBpdFxuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzRmV0Y2hpbmcgfHwgdGhpcy5zdGF0ZS5mZXRjaE1ldGEgIT09ICgoX2NvbnRleHQkZmV0Y2hPcHRpb25zID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRmZXRjaE9wdGlvbnMubWV0YSkpIHtcbiAgICAgIHZhciBfY29udGV4dCRmZXRjaE9wdGlvbnMyO1xuXG4gICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ2ZldGNoJyxcbiAgICAgICAgbWV0YTogKF9jb250ZXh0JGZldGNoT3B0aW9uczIgPSBjb250ZXh0LmZldGNoT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JGZldGNoT3B0aW9uczIubWV0YVxuICAgICAgfSk7XG4gICAgfSAvLyBUcnkgdG8gZmV0Y2ggdGhlIGRhdGFcblxuXG4gICAgdGhpcy5yZXRyeWVyID0gbmV3IFJldHJ5ZXIoe1xuICAgICAgZm46IGNvbnRleHQuZmV0Y2hGbixcbiAgICAgIGFib3J0OiBhYm9ydENvbnRyb2xsZXIgPT0gbnVsbCA/IHZvaWQgMCA6IChfYWJvcnRDb250cm9sbGVyJGFib3IgPSBhYm9ydENvbnRyb2xsZXIuYWJvcnQpID09IG51bGwgPyB2b2lkIDAgOiBfYWJvcnRDb250cm9sbGVyJGFib3IuYmluZChhYm9ydENvbnRyb2xsZXIpLFxuICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoZGF0YSkge1xuICAgICAgICBfdGhpczIuc2V0RGF0YShkYXRhKTsgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG5cblxuICAgICAgICBfdGhpczIuY2FjaGUuY29uZmlnLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyLmNhY2hlLmNvbmZpZy5vblN1Y2Nlc3MoZGF0YSwgX3RoaXMyKTsgLy8gUmVtb3ZlIHF1ZXJ5IGFmdGVyIGZldGNoaW5nIGlmIGNhY2hlIHRpbWUgaXMgMFxuXG4gICAgICAgIGlmIChfdGhpczIuY2FjaGVUaW1lID09PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLm9wdGlvbmFsUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgIC8vIE9wdGltaXN0aWNhbGx5IHVwZGF0ZSBzdGF0ZSBpZiBuZWVkZWRcbiAgICAgICAgaWYgKCEoaXNDYW5jZWxsZWRFcnJvcihlcnJvcikgJiYgZXJyb3Iuc2lsZW50KSkge1xuICAgICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQ2FuY2VsbGVkRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG4gICAgICAgICAgX3RoaXMyLmNhY2hlLmNvbmZpZy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczIuY2FjaGUuY29uZmlnLm9uRXJyb3IoZXJyb3IsIF90aGlzMik7IC8vIExvZyBlcnJvclxuXG4gICAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9IC8vIFJlbW92ZSBxdWVyeSBhZnRlciBmZXRjaGluZyBpZiBjYWNoZSB0aW1lIGlzIDBcblxuXG4gICAgICAgIGlmIChfdGhpczIuY2FjaGVUaW1lID09PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLm9wdGlvbmFsUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkZhaWw6IGZ1bmN0aW9uIG9uRmFpbCgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnZmFpbGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdwYXVzZSdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25Db250aW51ZTogZnVuY3Rpb24gb25Db250aW51ZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnY29udGludWUnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJldHJ5OiBjb250ZXh0Lm9wdGlvbnMucmV0cnksXG4gICAgICByZXRyeURlbGF5OiBjb250ZXh0Lm9wdGlvbnMucmV0cnlEZWxheVxuICAgIH0pO1xuICAgIHRoaXMucHJvbWlzZSA9IHRoaXMucmV0cnllci5wcm9taXNlO1xuICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnN0YXRlID0gdGhpcy5yZWR1Y2VyKHRoaXMuc3RhdGUsIGFjdGlvbik7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLm9uUXVlcnlVcGRhdGUoYWN0aW9uKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczMuY2FjaGUubm90aWZ5KHtcbiAgICAgICAgcXVlcnk6IF90aGlzMyxcbiAgICAgICAgdHlwZTogJ3F1ZXJ5VXBkYXRlZCcsXG4gICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGVmYXVsdFN0YXRlID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFN0YXRlKG9wdGlvbnMpIHtcbiAgICB2YXIgZGF0YSA9IHR5cGVvZiBvcHRpb25zLmluaXRpYWxEYXRhID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5pbml0aWFsRGF0YSgpIDogb3B0aW9ucy5pbml0aWFsRGF0YTtcbiAgICB2YXIgaGFzSW5pdGlhbERhdGEgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsRGF0YSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgdmFyIGluaXRpYWxEYXRhVXBkYXRlZEF0ID0gaGFzSW5pdGlhbERhdGEgPyB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsRGF0YVVwZGF0ZWRBdCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuaW5pdGlhbERhdGFVcGRhdGVkQXQoKSA6IG9wdGlvbnMuaW5pdGlhbERhdGFVcGRhdGVkQXQgOiAwO1xuICAgIHZhciBoYXNEYXRhID0gdHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnO1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgZGF0YVVwZGF0ZUNvdW50OiAwLFxuICAgICAgZGF0YVVwZGF0ZWRBdDogaGFzRGF0YSA/IGluaXRpYWxEYXRhVXBkYXRlZEF0ICE9IG51bGwgPyBpbml0aWFsRGF0YVVwZGF0ZWRBdCA6IERhdGUubm93KCkgOiAwLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICBlcnJvclVwZGF0ZUNvdW50OiAwLFxuICAgICAgZXJyb3JVcGRhdGVkQXQ6IDAsXG4gICAgICBmZXRjaEZhaWx1cmVDb3VudDogMCxcbiAgICAgIGZldGNoTWV0YTogbnVsbCxcbiAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgaXNJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICBzdGF0dXM6IGhhc0RhdGEgPyAnc3VjY2VzcycgOiAnaWRsZSdcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5yZWR1Y2VyID0gZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgdmFyIF9hY3Rpb24kbWV0YSwgX2FjdGlvbiRkYXRhVXBkYXRlZEF0O1xuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGZldGNoRmFpbHVyZUNvdW50OiBzdGF0ZS5mZXRjaEZhaWx1cmVDb3VudCArIDFcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ3BhdXNlJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGlzUGF1c2VkOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjb250aW51ZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2ZldGNoJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGZldGNoRmFpbHVyZUNvdW50OiAwLFxuICAgICAgICAgIGZldGNoTWV0YTogKF9hY3Rpb24kbWV0YSA9IGFjdGlvbi5tZXRhKSAhPSBudWxsID8gX2FjdGlvbiRtZXRhIDogbnVsbCxcbiAgICAgICAgICBpc0ZldGNoaW5nOiB0cnVlLFxuICAgICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgICB9LCAhc3RhdGUuZGF0YVVwZGF0ZWRBdCAmJiB7XG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgc3RhdHVzOiAnbG9hZGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgZGF0YTogYWN0aW9uLmRhdGEsXG4gICAgICAgICAgZGF0YVVwZGF0ZUNvdW50OiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgKyAxLFxuICAgICAgICAgIGRhdGFVcGRhdGVkQXQ6IChfYWN0aW9uJGRhdGFVcGRhdGVkQXQgPSBhY3Rpb24uZGF0YVVwZGF0ZWRBdCkgIT0gbnVsbCA/IF9hY3Rpb24kZGF0YVVwZGF0ZWRBdCA6IERhdGUubm93KCksXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IDAsXG4gICAgICAgICAgaXNGZXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgaXNJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHZhciBlcnJvciA9IGFjdGlvbi5lcnJvcjtcblxuICAgICAgICBpZiAoaXNDYW5jZWxsZWRFcnJvcihlcnJvcikgJiYgZXJyb3IucmV2ZXJ0ICYmIHRoaXMucmV2ZXJ0U3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRoaXMucmV2ZXJ0U3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICBlcnJvclVwZGF0ZUNvdW50OiBzdGF0ZS5lcnJvclVwZGF0ZUNvdW50ICsgMSxcbiAgICAgICAgICBlcnJvclVwZGF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogc3RhdGUuZmV0Y2hGYWlsdXJlQ291bnQgKyAxLFxuICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2ludmFsaWRhdGUnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgaXNJbnZhbGlkYXRlZDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnc2V0U3RhdGUnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCBhY3Rpb24uc3RhdGUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBRdWVyeTtcbn0oKTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IGhhc2hRdWVyeUtleUJ5T3B0aW9ucywgbWF0Y2hRdWVyeSwgcGFyc2VGaWx0ZXJBcmdzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4vcXVlcnknO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeUNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFF1ZXJ5Q2FjaGUsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIFF1ZXJ5Q2FjaGUoY29uZmlnKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgX3RoaXMucXVlcmllcyA9IFtdO1xuICAgIF90aGlzLnF1ZXJpZXNNYXAgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlDYWNoZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIHZhciBfb3B0aW9ucyRxdWVyeUhhc2g7XG5cbiAgICB2YXIgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuICAgIHZhciBxdWVyeUhhc2ggPSAoX29wdGlvbnMkcXVlcnlIYXNoID0gb3B0aW9ucy5xdWVyeUhhc2gpICE9IG51bGwgPyBfb3B0aW9ucyRxdWVyeUhhc2ggOiBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIG9wdGlvbnMpO1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHF1ZXJ5SGFzaCk7XG5cbiAgICBpZiAoIXF1ZXJ5KSB7XG4gICAgICBxdWVyeSA9IG5ldyBRdWVyeSh7XG4gICAgICAgIGNhY2hlOiB0aGlzLFxuICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgIHF1ZXJ5SGFzaDogcXVlcnlIYXNoLFxuICAgICAgICBvcHRpb25zOiBjbGllbnQuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKSxcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogY2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpLFxuICAgICAgICBtZXRhOiBvcHRpb25zLm1ldGFcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hZGQocXVlcnkpO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeTtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHF1ZXJ5KSB7XG4gICAgaWYgKCF0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXSkge1xuICAgICAgdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF0gPSBxdWVyeTtcbiAgICAgIHRoaXMucXVlcmllcy5wdXNoKHF1ZXJ5KTtcbiAgICAgIHRoaXMubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ3F1ZXJ5QWRkZWQnLFxuICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHF1ZXJ5KSB7XG4gICAgdmFyIHF1ZXJ5SW5NYXAgPSB0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXTtcblxuICAgIGlmIChxdWVyeUluTWFwKSB7XG4gICAgICBxdWVyeS5kZXN0cm95KCk7XG4gICAgICB0aGlzLnF1ZXJpZXMgPSB0aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSBxdWVyeTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocXVlcnlJbk1hcCA9PT0gcXVlcnkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdxdWVyeVJlbW92ZWQnLFxuICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgX3RoaXMyLnJlbW92ZShxdWVyeSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KHF1ZXJ5SGFzaCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJpZXNNYXBbcXVlcnlIYXNoXTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0QWxsID0gZnVuY3Rpb24gZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJpZXM7XG4gIH07XG5cbiAgX3Byb3RvLmZpbmQgPSBmdW5jdGlvbiBmaW5kKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJncyA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3NbMF07XG5cbiAgICBpZiAodHlwZW9mIGZpbHRlcnMuZXhhY3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmaWx0ZXJzLmV4YWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzLmZpbmQoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbWF0Y2hRdWVyeShmaWx0ZXJzLCBxdWVyeSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmZpbmRBbGwgPSBmdW5jdGlvbiBmaW5kQWxsKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczIgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzMlswXTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXJzKS5sZW5ndGggPiAwID8gdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgIHJldHVybiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KTtcbiAgICB9KSA6IHRoaXMucXVlcmllcztcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczQucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5vbkZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25PbmxpbmUgPSBmdW5jdGlvbiBvbk9ubGluZSgpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1LnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnkub25PbmxpbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBRdWVyeUNhY2hlO1xufShTdWJzY3JpYmFibGUpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBSZXRyeWVyIH0gZnJvbSAnLi9yZXRyeWVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWxzJzsgLy8gVFlQRVNcblxuLy8gQ0xBU1NcbmV4cG9ydCB2YXIgTXV0YXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNdXRhdGlvbihjb25maWcpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29uZmlnLmRlZmF1bHRPcHRpb25zLCBjb25maWcub3B0aW9ucyk7XG4gICAgdGhpcy5tdXRhdGlvbklkID0gY29uZmlnLm11dGF0aW9uSWQ7XG4gICAgdGhpcy5tdXRhdGlvbkNhY2hlID0gY29uZmlnLm11dGF0aW9uQ2FjaGU7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICB0aGlzLnN0YXRlID0gY29uZmlnLnN0YXRlIHx8IGdldERlZmF1bHRTdGF0ZSgpO1xuICAgIHRoaXMubWV0YSA9IGNvbmZpZy5tZXRhO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE11dGF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ3NldFN0YXRlJyxcbiAgICAgIHN0YXRlOiBzdGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpID09PSAtMSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4ICE9PSBvYnNlcnZlcjtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aGlzLnJldHJ5ZXIpIHtcbiAgICAgIHRoaXMucmV0cnllci5jYW5jZWwoKTtcbiAgICAgIHJldHVybiB0aGlzLnJldHJ5ZXIucHJvbWlzZS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfTtcblxuICBfcHJvdG8uY29udGludWUgPSBmdW5jdGlvbiBfY29udGludWUoKSB7XG4gICAgaWYgKHRoaXMucmV0cnllcikge1xuICAgICAgdGhpcy5yZXRyeWVyLmNvbnRpbnVlKCk7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyeWVyLnByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSgpO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIHJlc3RvcmVkID0gdGhpcy5zdGF0ZS5zdGF0dXMgPT09ICdsb2FkaW5nJztcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgaWYgKCFyZXN0b3JlZCkge1xuICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdsb2FkaW5nJyxcbiAgICAgICAgdmFyaWFibGVzOiB0aGlzLm9wdGlvbnMudmFyaWFibGVzXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcbiAgICAgICAgX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25NdXRhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uTXV0YXRlKF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uTXV0YXRlID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uTXV0YXRlKF90aGlzLnN0YXRlLnZhcmlhYmxlcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSBfdGhpcy5zdGF0ZS5jb250ZXh0KSB7XG4gICAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ2xvYWRpbmcnLFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIHZhcmlhYmxlczogX3RoaXMuc3RhdGUudmFyaWFibGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmV4ZWN1dGVNdXRhdGlvbigpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgZGF0YSA9IHJlc3VsdDsgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG5cbiAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25TdWNjZXNzKGRhdGEsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCwgX3RoaXMpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uU3VjY2VzcyhkYXRhLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uU2V0dGxlZChkYXRhLCBudWxsLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIC8vIE5vdGlmeSBjYWNoZSBjYWxsYmFja1xuICAgICAgX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25FcnJvcihlcnJvciwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0LCBfdGhpcyk7IC8vIExvZyBlcnJvclxuXG4gICAgICBnZXRMb2dnZXIoKS5lcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25FcnJvcihlcnJvciwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25TZXR0bGVkKHVuZGVmaW5lZCwgZXJyb3IsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGVNdXRhdGlvbiA9IGZ1bmN0aW9uIGV4ZWN1dGVNdXRhdGlvbigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgX3RoaXMkb3B0aW9ucyRyZXRyeTtcblxuICAgIHRoaXMucmV0cnllciA9IG5ldyBSZXRyeWVyKHtcbiAgICAgIGZuOiBmdW5jdGlvbiBmbigpIHtcbiAgICAgICAgaWYgKCFfdGhpczIub3B0aW9ucy5tdXRhdGlvbkZuKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdObyBtdXRhdGlvbkZuIGZvdW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMubXV0YXRpb25GbihfdGhpczIuc3RhdGUudmFyaWFibGVzKTtcbiAgICAgIH0sXG4gICAgICBvbkZhaWw6IGZ1bmN0aW9uIG9uRmFpbCgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnZmFpbGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdwYXVzZSdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25Db250aW51ZTogZnVuY3Rpb24gb25Db250aW51ZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnY29udGludWUnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJldHJ5OiAoX3RoaXMkb3B0aW9ucyRyZXRyeSA9IHRoaXMub3B0aW9ucy5yZXRyeSkgIT0gbnVsbCA/IF90aGlzJG9wdGlvbnMkcmV0cnkgOiAwLFxuICAgICAgcmV0cnlEZWxheTogdGhpcy5vcHRpb25zLnJldHJ5RGVsYXlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yZXRyeWVyLnByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnN0YXRlID0gcmVkdWNlcih0aGlzLnN0YXRlLCBhY3Rpb24pO1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5vbk11dGF0aW9uVXBkYXRlKGFjdGlvbik7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMzLm11dGF0aW9uQ2FjaGUubm90aWZ5KF90aGlzMyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE11dGF0aW9uO1xufSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YTogdW5kZWZpbmVkLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGZhaWx1cmVDb3VudDogMCxcbiAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgc3RhdHVzOiAnaWRsZScsXG4gICAgdmFyaWFibGVzOiB1bmRlZmluZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZhaWx1cmVDb3VudCArIDFcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncGF1c2UnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc1BhdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdjb250aW51ZSc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgY29udGV4dDogYWN0aW9uLmNvbnRleHQsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnbG9hZGluZycsXG4gICAgICAgIHZhcmlhYmxlczogYWN0aW9uLnZhcmlhYmxlc1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgZGF0YTogYWN0aW9uLmRhdGEsXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBlcnJvcjogYWN0aW9uLmVycm9yLFxuICAgICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZhaWx1cmVDb3VudCArIDEsXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3NldFN0YXRlJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIGFjdGlvbi5zdGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IE11dGF0aW9uIH0gZnJvbSAnLi9tdXRhdGlvbic7XG5pbXBvcnQgeyBtYXRjaE11dGF0aW9uLCBub29wIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIE11dGF0aW9uQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoTXV0YXRpb25DYWNoZSwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gTXV0YXRpb25DYWNoZShjb25maWcpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBfdGhpcy5tdXRhdGlvbnMgPSBbXTtcbiAgICBfdGhpcy5tdXRhdGlvbklkID0gMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTXV0YXRpb25DYWNoZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIHZhciBtdXRhdGlvbiA9IG5ldyBNdXRhdGlvbih7XG4gICAgICBtdXRhdGlvbkNhY2hlOiB0aGlzLFxuICAgICAgbXV0YXRpb25JZDogKyt0aGlzLm11dGF0aW9uSWQsXG4gICAgICBvcHRpb25zOiBjbGllbnQuZGVmYXVsdE11dGF0aW9uT3B0aW9ucyhvcHRpb25zKSxcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zLm11dGF0aW9uS2V5ID8gY2xpZW50LmdldE11dGF0aW9uRGVmYXVsdHMob3B0aW9ucy5tdXRhdGlvbktleSkgOiB1bmRlZmluZWQsXG4gICAgICBtZXRhOiBvcHRpb25zLm1ldGFcbiAgICB9KTtcbiAgICB0aGlzLmFkZChtdXRhdGlvbik7XG4gICAgcmV0dXJuIG11dGF0aW9uO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobXV0YXRpb24pIHtcbiAgICB0aGlzLm11dGF0aW9ucy5wdXNoKG11dGF0aW9uKTtcbiAgICB0aGlzLm5vdGlmeShtdXRhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShtdXRhdGlvbikge1xuICAgIHRoaXMubXV0YXRpb25zID0gdGhpcy5tdXRhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geCAhPT0gbXV0YXRpb247XG4gICAgfSk7XG4gICAgbXV0YXRpb24uY2FuY2VsKCk7XG4gICAgdGhpcy5ub3RpZnkobXV0YXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIubXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIF90aGlzMi5yZW1vdmUobXV0YXRpb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEFsbCA9IGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLmZpbmQgPSBmdW5jdGlvbiBmaW5kKGZpbHRlcnMpIHtcbiAgICBpZiAodHlwZW9mIGZpbHRlcnMuZXhhY3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmaWx0ZXJzLmV4YWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMuZmluZChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgIHJldHVybiBtYXRjaE11dGF0aW9uKGZpbHRlcnMsIG11dGF0aW9uKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZmluZEFsbCA9IGZ1bmN0aW9uIGZpbmRBbGwoZmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShtdXRhdGlvbikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKG11dGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB0aGlzLnJlc3VtZVBhdXNlZE11dGF0aW9ucygpO1xuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHRoaXMucmVzdW1lUGF1c2VkTXV0YXRpb25zKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZVBhdXNlZE11dGF0aW9ucyA9IGZ1bmN0aW9uIHJlc3VtZVBhdXNlZE11dGF0aW9ucygpIHtcbiAgICB2YXIgcGF1c2VkTXV0YXRpb25zID0gdGhpcy5tdXRhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5zdGF0ZS5pc1BhdXNlZDtcbiAgICB9KTtcbiAgICByZXR1cm4gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcGF1c2VkTXV0YXRpb25zLnJlZHVjZShmdW5jdGlvbiAocHJvbWlzZSwgbXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG11dGF0aW9uLmNvbnRpbnVlKCkuY2F0Y2gobm9vcCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNdXRhdGlvbkNhY2hlO1xufShTdWJzY3JpYmFibGUpOyIsImltcG9ydCB7IGlzQ2FuY2VsYWJsZSB9IGZyb20gJy4vcmV0cnllcic7XG5pbXBvcnQgeyBnZXRBYm9ydENvbnRyb2xsZXIgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKSB7XG4gIHJldHVybiB7XG4gICAgb25GZXRjaDogZnVuY3Rpb24gb25GZXRjaChjb250ZXh0KSB7XG4gICAgICBjb250ZXh0LmZldGNoRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfY29udGV4dCRmZXRjaE9wdGlvbnMsIF9jb250ZXh0JGZldGNoT3B0aW9uczIsIF9jb250ZXh0JGZldGNoT3B0aW9uczMsIF9jb250ZXh0JGZldGNoT3B0aW9uczQsIF9jb250ZXh0JHN0YXRlJGRhdGEsIF9jb250ZXh0JHN0YXRlJGRhdGEyO1xuXG4gICAgICAgIHZhciByZWZldGNoUGFnZSA9IChfY29udGV4dCRmZXRjaE9wdGlvbnMgPSBjb250ZXh0LmZldGNoT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IChfY29udGV4dCRmZXRjaE9wdGlvbnMyID0gX2NvbnRleHQkZmV0Y2hPcHRpb25zLm1ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRmZXRjaE9wdGlvbnMyLnJlZmV0Y2hQYWdlO1xuICAgICAgICB2YXIgZmV0Y2hNb3JlID0gKF9jb250ZXh0JGZldGNoT3B0aW9uczMgPSBjb250ZXh0LmZldGNoT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IChfY29udGV4dCRmZXRjaE9wdGlvbnM0ID0gX2NvbnRleHQkZmV0Y2hPcHRpb25zMy5tZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZmV0Y2hPcHRpb25zNC5mZXRjaE1vcmU7XG4gICAgICAgIHZhciBwYWdlUGFyYW0gPSBmZXRjaE1vcmUgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoTW9yZS5wYWdlUGFyYW07XG4gICAgICAgIHZhciBpc0ZldGNoaW5nTmV4dFBhZ2UgPSAoZmV0Y2hNb3JlID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE1vcmUuZGlyZWN0aW9uKSA9PT0gJ2ZvcndhcmQnO1xuICAgICAgICB2YXIgaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSA9IChmZXRjaE1vcmUgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoTW9yZS5kaXJlY3Rpb24pID09PSAnYmFja3dhcmQnO1xuICAgICAgICB2YXIgb2xkUGFnZXMgPSAoKF9jb250ZXh0JHN0YXRlJGRhdGEgPSBjb250ZXh0LnN0YXRlLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRzdGF0ZSRkYXRhLnBhZ2VzKSB8fCBbXTtcbiAgICAgICAgdmFyIG9sZFBhZ2VQYXJhbXMgPSAoKF9jb250ZXh0JHN0YXRlJGRhdGEyID0gY29udGV4dC5zdGF0ZS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkc3RhdGUkZGF0YTIucGFnZVBhcmFtcykgfHwgW107XG4gICAgICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBnZXRBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgdmFyIGFib3J0U2lnbmFsID0gYWJvcnRDb250cm9sbGVyID09IG51bGwgPyB2b2lkIDAgOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgICB2YXIgbmV3UGFnZVBhcmFtcyA9IG9sZFBhZ2VQYXJhbXM7XG4gICAgICAgIHZhciBjYW5jZWxsZWQgPSBmYWxzZTsgLy8gR2V0IHF1ZXJ5IGZ1bmN0aW9uXG5cbiAgICAgICAgdmFyIHF1ZXJ5Rm4gPSBjb250ZXh0Lm9wdGlvbnMucXVlcnlGbiB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdNaXNzaW5nIHF1ZXJ5Rm4nKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYnVpbGROZXdQYWdlcyA9IGZ1bmN0aW9uIGJ1aWxkTmV3UGFnZXMocGFnZXMsIHBhcmFtLCBwYWdlLCBwcmV2aW91cykge1xuICAgICAgICAgIG5ld1BhZ2VQYXJhbXMgPSBwcmV2aW91cyA/IFtwYXJhbV0uY29uY2F0KG5ld1BhZ2VQYXJhbXMpIDogW10uY29uY2F0KG5ld1BhZ2VQYXJhbXMsIFtwYXJhbV0pO1xuICAgICAgICAgIHJldHVybiBwcmV2aW91cyA/IFtwYWdlXS5jb25jYXQocGFnZXMpIDogW10uY29uY2F0KHBhZ2VzLCBbcGFnZV0pO1xuICAgICAgICB9OyAvLyBDcmVhdGUgZnVuY3Rpb24gdG8gZmV0Y2ggYSBwYWdlXG5cblxuICAgICAgICB2YXIgZmV0Y2hQYWdlID0gZnVuY3Rpb24gZmV0Y2hQYWdlKHBhZ2VzLCBtYW51YWwsIHBhcmFtLCBwcmV2aW91cykge1xuICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQ2FuY2VsbGVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3VuZGVmaW5lZCcgJiYgIW1hbnVhbCAmJiBwYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGFnZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBxdWVyeUZuQ29udGV4dCA9IHtcbiAgICAgICAgICAgIHF1ZXJ5S2V5OiBjb250ZXh0LnF1ZXJ5S2V5LFxuICAgICAgICAgICAgc2lnbmFsOiBhYm9ydFNpZ25hbCxcbiAgICAgICAgICAgIHBhZ2VQYXJhbTogcGFyYW0sXG4gICAgICAgICAgICBtZXRhOiBjb250ZXh0Lm1ldGFcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBxdWVyeUZuUmVzdWx0ID0gcXVlcnlGbihxdWVyeUZuQ29udGV4dCk7XG4gICAgICAgICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUocXVlcnlGblJlc3VsdCkudGhlbihmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkTmV3UGFnZXMocGFnZXMsIHBhcmFtLCBwYWdlLCBwcmV2aW91cyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoaXNDYW5jZWxhYmxlKHF1ZXJ5Rm5SZXN1bHQpKSB7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZUFzQW55ID0gcHJvbWlzZTtcbiAgICAgICAgICAgIHByb21pc2VBc0FueS5jYW5jZWwgPSBxdWVyeUZuUmVzdWx0LmNhbmNlbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcHJvbWlzZTsgLy8gRmV0Y2ggZmlyc3QgcGFnZT9cblxuICAgICAgICBpZiAoIW9sZFBhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgIHByb21pc2UgPSBmZXRjaFBhZ2UoW10pO1xuICAgICAgICB9IC8vIEZldGNoIG5leHQgcGFnZT9cbiAgICAgICAgZWxzZSBpZiAoaXNGZXRjaGluZ05leHRQYWdlKSB7XG4gICAgICAgICAgICB2YXIgbWFudWFsID0gdHlwZW9mIHBhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICB2YXIgcGFyYW0gPSBtYW51YWwgPyBwYWdlUGFyYW0gOiBnZXROZXh0UGFnZVBhcmFtKGNvbnRleHQub3B0aW9ucywgb2xkUGFnZXMpO1xuICAgICAgICAgICAgcHJvbWlzZSA9IGZldGNoUGFnZShvbGRQYWdlcywgbWFudWFsLCBwYXJhbSk7XG4gICAgICAgICAgfSAvLyBGZXRjaCBwcmV2aW91cyBwYWdlP1xuICAgICAgICAgIGVsc2UgaWYgKGlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIF9tYW51YWwgPSB0eXBlb2YgcGFnZVBhcmFtICE9PSAndW5kZWZpbmVkJztcblxuICAgICAgICAgICAgICB2YXIgX3BhcmFtID0gX21hbnVhbCA/IHBhZ2VQYXJhbSA6IGdldFByZXZpb3VzUGFnZVBhcmFtKGNvbnRleHQub3B0aW9ucywgb2xkUGFnZXMpO1xuXG4gICAgICAgICAgICAgIHByb21pc2UgPSBmZXRjaFBhZ2Uob2xkUGFnZXMsIF9tYW51YWwsIF9wYXJhbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IC8vIFJlZmV0Y2ggcGFnZXNcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBuZXdQYWdlUGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgICB2YXIgbWFudWFsID0gdHlwZW9mIGNvbnRleHQub3B0aW9ucy5nZXROZXh0UGFnZVBhcmFtID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRGZXRjaEZpcnN0UGFnZSA9IHJlZmV0Y2hQYWdlICYmIG9sZFBhZ2VzWzBdID8gcmVmZXRjaFBhZ2Uob2xkUGFnZXNbMF0sIDAsIG9sZFBhZ2VzKSA6IHRydWU7IC8vIEZldGNoIGZpcnN0IHBhZ2VcblxuICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IHNob3VsZEZldGNoRmlyc3RQYWdlID8gZmV0Y2hQYWdlKFtdLCBtYW51YWwsIG9sZFBhZ2VQYXJhbXNbMF0pIDogUHJvbWlzZS5yZXNvbHZlKGJ1aWxkTmV3UGFnZXMoW10sIG9sZFBhZ2VQYXJhbXNbMF0sIG9sZFBhZ2VzWzBdKSk7IC8vIEZldGNoIHJlbWFpbmluZyBwYWdlc1xuXG4gICAgICAgICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNob3VsZEZldGNoTmV4dFBhZ2UgPSByZWZldGNoUGFnZSAmJiBvbGRQYWdlc1tpXSA/IHJlZmV0Y2hQYWdlKG9sZFBhZ2VzW2ldLCBpLCBvbGRQYWdlcykgOiB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZEZldGNoTmV4dFBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcGFyYW0yID0gbWFudWFsID8gb2xkUGFnZVBhcmFtc1tpXSA6IGdldE5leHRQYWdlUGFyYW0oY29udGV4dC5vcHRpb25zLCBwYWdlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaFBhZ2UocGFnZXMsIG1hbnVhbCwgX3BhcmFtMik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShidWlsZE5ld1BhZ2VzKHBhZ2VzLCBvbGRQYWdlUGFyYW1zW2ldLCBvbGRQYWdlc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgb2xkUGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvb3AoaSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaW5hbFByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBhZ2VzKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhZ2VzOiBwYWdlcyxcbiAgICAgICAgICAgIHBhZ2VQYXJhbXM6IG5ld1BhZ2VQYXJhbXNcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGZpbmFsUHJvbWlzZUFzQW55ID0gZmluYWxQcm9taXNlO1xuXG4gICAgICAgIGZpbmFsUHJvbWlzZUFzQW55LmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgIGFib3J0Q29udHJvbGxlciA9PSBudWxsID8gdm9pZCAwIDogYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG5cbiAgICAgICAgICBpZiAoaXNDYW5jZWxhYmxlKHByb21pc2UpKSB7XG4gICAgICAgICAgICBwcm9taXNlLmNhbmNlbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZmluYWxQcm9taXNlO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dFBhZ2VQYXJhbShvcHRpb25zLCBwYWdlcykge1xuICByZXR1cm4gb3B0aW9ucy5nZXROZXh0UGFnZVBhcmFtID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldE5leHRQYWdlUGFyYW0ocGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0sIHBhZ2VzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmV2aW91c1BhZ2VQYXJhbShvcHRpb25zLCBwYWdlcykge1xuICByZXR1cm4gb3B0aW9ucy5nZXRQcmV2aW91c1BhZ2VQYXJhbSA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXRQcmV2aW91c1BhZ2VQYXJhbShwYWdlc1swXSwgcGFnZXMpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBuZXh0IHBhZ2UuXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIGl0IGNhbm5vdCBiZSBkZXRlcm1pbmVkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNOZXh0UGFnZShvcHRpb25zLCBwYWdlcykge1xuICBpZiAob3B0aW9ucy5nZXROZXh0UGFnZVBhcmFtICYmIEFycmF5LmlzQXJyYXkocGFnZXMpKSB7XG4gICAgdmFyIG5leHRQYWdlUGFyYW0gPSBnZXROZXh0UGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKTtcbiAgICByZXR1cm4gdHlwZW9mIG5leHRQYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnICYmIG5leHRQYWdlUGFyYW0gIT09IG51bGwgJiYgbmV4dFBhZ2VQYXJhbSAhPT0gZmFsc2U7XG4gIH1cbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZXJlIGlzIGEgcHJldmlvdXMgcGFnZS5cbiAqIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgaXQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ByZXZpb3VzUGFnZShvcHRpb25zLCBwYWdlcykge1xuICBpZiAob3B0aW9ucy5nZXRQcmV2aW91c1BhZ2VQYXJhbSAmJiBBcnJheS5pc0FycmF5KHBhZ2VzKSkge1xuICAgIHZhciBwcmV2aW91c1BhZ2VQYXJhbSA9IGdldFByZXZpb3VzUGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKTtcbiAgICByZXR1cm4gdHlwZW9mIHByZXZpb3VzUGFnZVBhcmFtICE9PSAndW5kZWZpbmVkJyAmJiBwcmV2aW91c1BhZ2VQYXJhbSAhPT0gbnVsbCAmJiBwcmV2aW91c1BhZ2VQYXJhbSAhPT0gZmFsc2U7XG4gIH1cbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGhhc2hRdWVyeUtleSwgbm9vcCwgcGFyc2VGaWx0ZXJBcmdzLCBwYXJzZVF1ZXJ5QXJncywgcGFydGlhbE1hdGNoS2V5LCBoYXNoUXVlcnlLZXlCeU9wdGlvbnMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFF1ZXJ5Q2FjaGUgfSBmcm9tICcuL3F1ZXJ5Q2FjaGUnO1xuaW1wb3J0IHsgTXV0YXRpb25DYWNoZSB9IGZyb20gJy4vbXV0YXRpb25DYWNoZSc7XG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlcic7XG5pbXBvcnQgeyBvbmxpbmVNYW5hZ2VyIH0gZnJvbSAnLi9vbmxpbmVNYW5hZ2VyJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgaW5maW5pdGVRdWVyeUJlaGF2aW9yIH0gZnJvbSAnLi9pbmZpbml0ZVF1ZXJ5QmVoYXZpb3InO1xuLy8gQ0xBU1NcbmV4cG9ydCB2YXIgUXVlcnlDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBRdWVyeUNsaWVudChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMucXVlcnlDYWNoZSA9IGNvbmZpZy5xdWVyeUNhY2hlIHx8IG5ldyBRdWVyeUNhY2hlKCk7XG4gICAgdGhpcy5tdXRhdGlvbkNhY2hlID0gY29uZmlnLm11dGF0aW9uQ2FjaGUgfHwgbmV3IE11dGF0aW9uQ2FjaGUoKTtcbiAgICB0aGlzLmRlZmF1bHRPcHRpb25zID0gY29uZmlnLmRlZmF1bHRPcHRpb25zIHx8IHt9O1xuICAgIHRoaXMucXVlcnlEZWZhdWx0cyA9IFtdO1xuICAgIHRoaXMubXV0YXRpb25EZWZhdWx0cyA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFF1ZXJ5Q2xpZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8ubW91bnQgPSBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy51bnN1YnNjcmliZUZvY3VzID0gZm9jdXNNYW5hZ2VyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpICYmIG9ubGluZU1hbmFnZXIuaXNPbmxpbmUoKSkge1xuICAgICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLm9uRm9jdXMoKTtcblxuICAgICAgICBfdGhpcy5xdWVyeUNhY2hlLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlT25saW5lID0gb25saW5lTWFuYWdlci5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGZvY3VzTWFuYWdlci5pc0ZvY3VzZWQoKSAmJiBvbmxpbmVNYW5hZ2VyLmlzT25saW5lKCkpIHtcbiAgICAgICAgX3RoaXMubXV0YXRpb25DYWNoZS5vbk9ubGluZSgpO1xuXG4gICAgICAgIF90aGlzLnF1ZXJ5Q2FjaGUub25PbmxpbmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8udW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgdmFyIF90aGlzJHVuc3Vic2NyaWJlRm9jdSwgX3RoaXMkdW5zdWJzY3JpYmVPbmxpO1xuXG4gICAgKF90aGlzJHVuc3Vic2NyaWJlRm9jdSA9IHRoaXMudW5zdWJzY3JpYmVGb2N1cykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHVuc3Vic2NyaWJlRm9jdS5jYWxsKHRoaXMpO1xuICAgIChfdGhpcyR1bnN1YnNjcmliZU9ubGkgPSB0aGlzLnVuc3Vic2NyaWJlT25saW5lKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkdW5zdWJzY3JpYmVPbmxpLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRmV0Y2hpbmcgPSBmdW5jdGlvbiBpc0ZldGNoaW5nKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJncyA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3NbMF07XG5cbiAgICBmaWx0ZXJzLmZldGNoaW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5xdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykubGVuZ3RoO1xuICB9O1xuXG4gIF9wcm90by5pc011dGF0aW5nID0gZnVuY3Rpb24gaXNNdXRhdGluZyhmaWx0ZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25DYWNoZS5maW5kQWxsKF9leHRlbmRzKHt9LCBmaWx0ZXJzLCB7XG4gICAgICBmZXRjaGluZzogdHJ1ZVxuICAgIH0pKS5sZW5ndGg7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uIGdldFF1ZXJ5RGF0YShxdWVyeUtleSwgZmlsdGVycykge1xuICAgIHZhciBfdGhpcyRxdWVyeUNhY2hlJGZpbmQ7XG5cbiAgICByZXR1cm4gKF90aGlzJHF1ZXJ5Q2FjaGUkZmluZCA9IHRoaXMucXVlcnlDYWNoZS5maW5kKHF1ZXJ5S2V5LCBmaWx0ZXJzKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHF1ZXJ5Q2FjaGUkZmluZC5zdGF0ZS5kYXRhO1xuICB9O1xuXG4gIF9wcm90by5nZXRRdWVyaWVzRGF0YSA9IGZ1bmN0aW9uIGdldFF1ZXJpZXNEYXRhKHF1ZXJ5S2V5T3JGaWx0ZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnlDYWNoZSgpLmZpbmRBbGwocXVlcnlLZXlPckZpbHRlcnMpLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHF1ZXJ5S2V5ID0gX3JlZi5xdWVyeUtleSxcbiAgICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gICAgICB2YXIgZGF0YSA9IHN0YXRlLmRhdGE7XG4gICAgICByZXR1cm4gW3F1ZXJ5S2V5LCBkYXRhXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0UXVlcnlEYXRhID0gZnVuY3Rpb24gc2V0UXVlcnlEYXRhKHF1ZXJ5S2V5LCB1cGRhdGVyLCBvcHRpb25zKSB7XG4gICAgdmFyIHBhcnNlZE9wdGlvbnMgPSBwYXJzZVF1ZXJ5QXJncyhxdWVyeUtleSk7XG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMocGFyc2VkT3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlDYWNoZS5idWlsZCh0aGlzLCBkZWZhdWx0ZWRPcHRpb25zKS5zZXREYXRhKHVwZGF0ZXIsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5zZXRRdWVyaWVzRGF0YSA9IGZ1bmN0aW9uIHNldFF1ZXJpZXNEYXRhKHF1ZXJ5S2V5T3JGaWx0ZXJzLCB1cGRhdGVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmdldFF1ZXJ5Q2FjaGUoKS5maW5kQWxsKHF1ZXJ5S2V5T3JGaWx0ZXJzKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBxdWVyeUtleSA9IF9yZWYyLnF1ZXJ5S2V5O1xuICAgICAgICByZXR1cm4gW3F1ZXJ5S2V5LCBfdGhpczIuc2V0UXVlcnlEYXRhKHF1ZXJ5S2V5LCB1cGRhdGVyLCBvcHRpb25zKV07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldFF1ZXJ5U3RhdGUocXVlcnlLZXksIGZpbHRlcnMpIHtcbiAgICB2YXIgX3RoaXMkcXVlcnlDYWNoZSRmaW5kMjtcblxuICAgIHJldHVybiAoX3RoaXMkcXVlcnlDYWNoZSRmaW5kMiA9IHRoaXMucXVlcnlDYWNoZS5maW5kKHF1ZXJ5S2V5LCBmaWx0ZXJzKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDIuc3RhdGU7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZVF1ZXJpZXMgPSBmdW5jdGlvbiByZW1vdmVRdWVyaWVzKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczIgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzMlswXTtcblxuICAgIHZhciBxdWVyeUNhY2hlID0gdGhpcy5xdWVyeUNhY2hlO1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5Q2FjaGUucmVtb3ZlKHF1ZXJ5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZXNldFF1ZXJpZXMgPSBmdW5jdGlvbiByZXNldFF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MzID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczNbMF0sXG4gICAgICAgIG9wdGlvbnMgPSBfcGFyc2VGaWx0ZXJBcmdzM1sxXTtcblxuICAgIHZhciBxdWVyeUNhY2hlID0gdGhpcy5xdWVyeUNhY2hlO1xuXG4gICAgdmFyIHJlZmV0Y2hGaWx0ZXJzID0gX2V4dGVuZHMoe30sIGZpbHRlcnMsIHtcbiAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5LnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpczMucmVmZXRjaFF1ZXJpZXMocmVmZXRjaEZpbHRlcnMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxRdWVyaWVzID0gZnVuY3Rpb24gY2FuY2VsUXVlcmllcyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczQgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMyksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzNFswXSxcbiAgICAgICAgX3BhcnNlRmlsdGVyQXJnczQkID0gX3BhcnNlRmlsdGVyQXJnczRbMV0sXG4gICAgICAgIGNhbmNlbE9wdGlvbnMgPSBfcGFyc2VGaWx0ZXJBcmdzNCQgPT09IHZvaWQgMCA/IHt9IDogX3BhcnNlRmlsdGVyQXJnczQkO1xuXG4gICAgaWYgKHR5cGVvZiBjYW5jZWxPcHRpb25zLnJldmVydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhbmNlbE9wdGlvbnMucmV2ZXJ0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZXMgPSBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczQucXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLm1hcChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5LmNhbmNlbChjYW5jZWxPcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZVF1ZXJpZXMgPSBmdW5jdGlvbiBpbnZhbGlkYXRlUXVlcmllcyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIF9yZWYzLFxuICAgICAgICBfZmlsdGVycyRyZWZldGNoQWN0aXYsXG4gICAgICAgIF9maWx0ZXJzJHJlZmV0Y2hJbmFjdCxcbiAgICAgICAgX3RoaXM1ID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzNSA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3M1WzBdLFxuICAgICAgICBvcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczVbMV07XG5cbiAgICB2YXIgcmVmZXRjaEZpbHRlcnMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVycywge1xuICAgICAgLy8gaWYgZmlsdGVycy5yZWZldGNoQWN0aXZlIGlzIG5vdCBwcm92aWRlZCBhbmQgZmlsdGVycy5hY3RpdmUgaXMgZXhwbGljaXRseSBmYWxzZSxcbiAgICAgIC8vIGUuZy4gaW52YWxpZGF0ZVF1ZXJpZXMoeyBhY3RpdmU6IGZhbHNlIH0pLCB3ZSBkb24ndCB3YW50IHRvIHJlZmV0Y2ggYWN0aXZlIHF1ZXJpZXNcbiAgICAgIGFjdGl2ZTogKF9yZWYzID0gKF9maWx0ZXJzJHJlZmV0Y2hBY3RpdiA9IGZpbHRlcnMucmVmZXRjaEFjdGl2ZSkgIT0gbnVsbCA/IF9maWx0ZXJzJHJlZmV0Y2hBY3RpdiA6IGZpbHRlcnMuYWN0aXZlKSAhPSBudWxsID8gX3JlZjMgOiB0cnVlLFxuICAgICAgaW5hY3RpdmU6IChfZmlsdGVycyRyZWZldGNoSW5hY3QgPSBmaWx0ZXJzLnJlZmV0Y2hJbmFjdGl2ZSkgIT0gbnVsbCA/IF9maWx0ZXJzJHJlZmV0Y2hJbmFjdCA6IGZhbHNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczUucXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5LmludmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXM1LnJlZmV0Y2hRdWVyaWVzKHJlZmV0Y2hGaWx0ZXJzLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVmZXRjaFF1ZXJpZXMgPSBmdW5jdGlvbiByZWZldGNoUXVlcmllcyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczYgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMyksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzNlswXSxcbiAgICAgICAgb3B0aW9ucyA9IF9wYXJzZUZpbHRlckFyZ3M2WzFdO1xuXG4gICAgdmFyIHByb21pc2VzID0gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM2LnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5tYXAoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBxdWVyeS5mZXRjaCh1bmRlZmluZWQsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgcmVmZXRjaFBhZ2U6IGZpbHRlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGZpbHRlcnMucmVmZXRjaFBhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obm9vcCk7XG5cbiAgICBpZiAoIShvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnRocm93T25FcnJvcikpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by5mZXRjaFF1ZXJ5ID0gZnVuY3Rpb24gZmV0Y2hRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHBhcnNlZE9wdGlvbnMgPSBwYXJzZVF1ZXJ5QXJncyhhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhwYXJzZWRPcHRpb25zKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Rhbm5lcmxpbnNsZXkvcmVhY3QtcXVlcnkvaXNzdWVzLzY1MlxuXG4gICAgaWYgKHR5cGVvZiBkZWZhdWx0ZWRPcHRpb25zLnJldHJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5yZXRyeSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnlDYWNoZS5idWlsZCh0aGlzLCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICByZXR1cm4gcXVlcnkuaXNTdGFsZUJ5VGltZShkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSkgPyBxdWVyeS5mZXRjaChkZWZhdWx0ZWRPcHRpb25zKSA6IFByb21pc2UucmVzb2x2ZShxdWVyeS5zdGF0ZS5kYXRhKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlZmV0Y2hRdWVyeSA9IGZ1bmN0aW9uIHByZWZldGNoUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiB0aGlzLmZldGNoUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2hJbmZpbml0ZVF1ZXJ5ID0gZnVuY3Rpb24gZmV0Y2hJbmZpbml0ZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIHBhcnNlZE9wdGlvbnMuYmVoYXZpb3IgPSBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaFF1ZXJ5KHBhcnNlZE9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5wcmVmZXRjaEluZmluaXRlUXVlcnkgPSBmdW5jdGlvbiBwcmVmZXRjaEluZmluaXRlUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiB0aGlzLmZldGNoSW5maW5pdGVRdWVyeShhcmcxLCBhcmcyLCBhcmczKS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxNdXRhdGlvbnMgPSBmdW5jdGlvbiBjYW5jZWxNdXRhdGlvbnMoKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZXMgPSBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczcubXV0YXRpb25DYWNoZS5nZXRBbGwoKS5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtdXRhdGlvbi5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lUGF1c2VkTXV0YXRpb25zID0gZnVuY3Rpb24gcmVzdW1lUGF1c2VkTXV0YXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmdldE11dGF0aW9uQ2FjaGUoKS5yZXN1bWVQYXVzZWRNdXRhdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZU11dGF0aW9uID0gZnVuY3Rpb24gZXhlY3V0ZU11dGF0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbkNhY2hlLmJ1aWxkKHRoaXMsIG9wdGlvbnMpLmV4ZWN1dGUoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcnlDYWNoZSA9IGZ1bmN0aW9uIGdldFF1ZXJ5Q2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlDYWNoZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TXV0YXRpb25DYWNoZSA9IGZ1bmN0aW9uIGdldE11dGF0aW9uQ2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25DYWNoZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0T3B0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLnNldFF1ZXJ5RGVmYXVsdHMgPSBmdW5jdGlvbiBzZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucXVlcnlEZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaGFzaFF1ZXJ5S2V5KHF1ZXJ5S2V5KSA9PT0gaGFzaFF1ZXJ5S2V5KHgucXVlcnlLZXkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWVyeURlZmF1bHRzLnB1c2goe1xuICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5RGVmYXVsdHMgPSBmdW5jdGlvbiBnZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5KSB7XG4gICAgdmFyIF90aGlzJHF1ZXJ5RGVmYXVsdHMkZjtcblxuICAgIHJldHVybiBxdWVyeUtleSA/IChfdGhpcyRxdWVyeURlZmF1bHRzJGYgPSB0aGlzLnF1ZXJ5RGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHBhcnRpYWxNYXRjaEtleShxdWVyeUtleSwgeC5xdWVyeUtleSk7XG4gICAgfSkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRxdWVyeURlZmF1bHRzJGYuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLnNldE11dGF0aW9uRGVmYXVsdHMgPSBmdW5jdGlvbiBzZXRNdXRhdGlvbkRlZmF1bHRzKG11dGF0aW9uS2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMubXV0YXRpb25EZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaGFzaFF1ZXJ5S2V5KG11dGF0aW9uS2V5KSA9PT0gaGFzaFF1ZXJ5S2V5KHgubXV0YXRpb25LZXkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tdXRhdGlvbkRlZmF1bHRzLnB1c2goe1xuICAgICAgICBtdXRhdGlvbktleTogbXV0YXRpb25LZXksXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE11dGF0aW9uRGVmYXVsdHMgPSBmdW5jdGlvbiBnZXRNdXRhdGlvbkRlZmF1bHRzKG11dGF0aW9uS2V5KSB7XG4gICAgdmFyIF90aGlzJG11dGF0aW9uRGVmYXVsdDtcblxuICAgIHJldHVybiBtdXRhdGlvbktleSA/IChfdGhpcyRtdXRhdGlvbkRlZmF1bHQgPSB0aGlzLm11dGF0aW9uRGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHBhcnRpYWxNYXRjaEtleShtdXRhdGlvbktleSwgeC5tdXRhdGlvbktleSk7XG4gICAgfSkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRtdXRhdGlvbkRlZmF1bHQuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmRlZmF1bHRRdWVyeU9wdGlvbnMgPSBmdW5jdGlvbiBkZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5fZGVmYXVsdGVkKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IF9leHRlbmRzKHt9LCB0aGlzLmRlZmF1bHRPcHRpb25zLnF1ZXJpZXMsIHRoaXMuZ2V0UXVlcnlEZWZhdWx0cyhvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5S2V5KSwgb3B0aW9ucywge1xuICAgICAgX2RlZmF1bHRlZDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKCFkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5SGFzaCAmJiBkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5S2V5KSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5SGFzaCA9IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5S2V5LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdGVkT3B0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5kZWZhdWx0TXV0YXRpb25PcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdE11dGF0aW9uT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuX2RlZmF1bHRlZCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLmRlZmF1bHRPcHRpb25zLm11dGF0aW9ucywgdGhpcy5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubXV0YXRpb25LZXkpLCBvcHRpb25zLCB7XG4gICAgICBfZGVmYXVsdGVkOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5xdWVyeUNhY2hlLmNsZWFyKCk7XG4gICAgdGhpcy5tdXRhdGlvbkNhY2hlLmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5Q2xpZW50O1xufSgpOyIsImltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gJy4vZm9jdXNNYW5hZ2VyJztcbmltcG9ydCB7IG9ubGluZU1hbmFnZXIgfSBmcm9tICcuL29ubGluZU1hbmFnZXInO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gZGVmYXVsdFJldHJ5RGVsYXkoZmFpbHVyZUNvdW50KSB7XG4gIHJldHVybiBNYXRoLm1pbigxMDAwICogTWF0aC5wb3coMiwgZmFpbHVyZUNvdW50KSwgMzAwMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYW5jZWxhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgKHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5jYW5jZWwpID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0IHZhciBDYW5jZWxsZWRFcnJvciA9IGZ1bmN0aW9uIENhbmNlbGxlZEVycm9yKG9wdGlvbnMpIHtcbiAgdGhpcy5yZXZlcnQgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnJldmVydDtcbiAgdGhpcy5zaWxlbnQgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnNpbGVudDtcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNDYW5jZWxsZWRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBDYW5jZWxsZWRFcnJvcjtcbn0gLy8gQ0xBU1NcblxuZXhwb3J0IHZhciBSZXRyeWVyID0gZnVuY3Rpb24gUmV0cnllcihjb25maWcpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgY2FuY2VsUmV0cnkgPSBmYWxzZTtcbiAgdmFyIGNhbmNlbEZuO1xuICB2YXIgY29udGludWVGbjtcbiAgdmFyIHByb21pc2VSZXNvbHZlO1xuICB2YXIgcHJvbWlzZVJlamVjdDtcbiAgdGhpcy5hYm9ydCA9IGNvbmZpZy5hYm9ydDtcblxuICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uIChjYW5jZWxPcHRpb25zKSB7XG4gICAgcmV0dXJuIGNhbmNlbEZuID09IG51bGwgPyB2b2lkIDAgOiBjYW5jZWxGbihjYW5jZWxPcHRpb25zKTtcbiAgfTtcblxuICB0aGlzLmNhbmNlbFJldHJ5ID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbmNlbFJldHJ5ID0gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLmNvbnRpbnVlUmV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsUmV0cnkgPSBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmNvbnRpbnVlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb250aW51ZUZuID09IG51bGwgPyB2b2lkIDAgOiBjb250aW51ZUZuKCk7XG4gIH07XG5cbiAgdGhpcy5mYWlsdXJlQ291bnQgPSAwO1xuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gIHRoaXMuaXNSZXNvbHZlZCA9IGZhbHNlO1xuICB0aGlzLmlzVHJhbnNwb3J0Q2FuY2VsYWJsZSA9IGZhbHNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAob3V0ZXJSZXNvbHZlLCBvdXRlclJlamVjdCkge1xuICAgIHByb21pc2VSZXNvbHZlID0gb3V0ZXJSZXNvbHZlO1xuICAgIHByb21pc2VSZWplY3QgPSBvdXRlclJlamVjdDtcbiAgfSk7XG5cbiAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gICAgaWYgKCFfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICBfdGhpcy5pc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vblN1Y2Nlc3ModmFsdWUpO1xuICAgICAgY29udGludWVGbiA9PSBudWxsID8gdm9pZCAwIDogY29udGludWVGbigpO1xuICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7XG4gICAgaWYgKCFfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICBfdGhpcy5pc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25FcnJvcih2YWx1ZSk7XG4gICAgICBjb250aW51ZUZuID09IG51bGwgPyB2b2lkIDAgOiBjb250aW51ZUZuKCk7XG4gICAgICBwcm9taXNlUmVqZWN0KHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChjb250aW51ZVJlc29sdmUpIHtcbiAgICAgIGNvbnRpbnVlRm4gPSBjb250aW51ZVJlc29sdmU7XG4gICAgICBfdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgICBjb25maWcub25QYXVzZSA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uUGF1c2UoKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnRpbnVlRm4gPSB1bmRlZmluZWQ7XG4gICAgICBfdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgY29uZmlnLm9uQ29udGludWUgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vbkNvbnRpbnVlKCk7XG4gICAgfSk7XG4gIH07IC8vIENyZWF0ZSBsb29wIGZ1bmN0aW9uXG5cblxuICB2YXIgcnVuID0gZnVuY3Rpb24gcnVuKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgYWxyZWFkeSByZXNvbHZlZFxuICAgIGlmIChfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2VPclZhbHVlOyAvLyBFeGVjdXRlIHF1ZXJ5XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZU9yVmFsdWUgPSBjb25maWcuZm4oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcHJvbWlzZU9yVmFsdWUgPSBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfSAvLyBDcmVhdGUgY2FsbGJhY2sgdG8gY2FuY2VsIHRoaXMgZmV0Y2hcblxuXG4gICAgY2FuY2VsRm4gPSBmdW5jdGlvbiBjYW5jZWxGbihjYW5jZWxPcHRpb25zKSB7XG4gICAgICBpZiAoIV90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBDYW5jZWxsZWRFcnJvcihjYW5jZWxPcHRpb25zKSk7XG4gICAgICAgIF90aGlzLmFib3J0ID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5hYm9ydCgpOyAvLyBDYW5jZWwgdHJhbnNwb3J0IGlmIHN1cHBvcnRlZFxuXG4gICAgICAgIGlmIChpc0NhbmNlbGFibGUocHJvbWlzZU9yVmFsdWUpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VPclZhbHVlLmNhbmNlbCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKF91bnVzZWQpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9OyAvLyBDaGVjayBpZiB0aGUgdHJhbnNwb3J0IGxheWVyIHN1cHBvcnQgY2FuY2VsbGF0aW9uXG5cblxuICAgIF90aGlzLmlzVHJhbnNwb3J0Q2FuY2VsYWJsZSA9IGlzQ2FuY2VsYWJsZShwcm9taXNlT3JWYWx1ZSk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHByb21pc2VPclZhbHVlKS50aGVuKHJlc29sdmUpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9jb25maWckcmV0cnksIF9jb25maWckcmV0cnlEZWxheTtcblxuICAgICAgLy8gU3RvcCBpZiB0aGUgZmV0Y2ggaXMgYWxyZWFkeSByZXNvbHZlZFxuICAgICAgaWYgKF90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEbyB3ZSBuZWVkIHRvIHJldHJ5IHRoZSByZXF1ZXN0P1xuXG5cbiAgICAgIHZhciByZXRyeSA9IChfY29uZmlnJHJldHJ5ID0gY29uZmlnLnJldHJ5KSAhPSBudWxsID8gX2NvbmZpZyRyZXRyeSA6IDM7XG4gICAgICB2YXIgcmV0cnlEZWxheSA9IChfY29uZmlnJHJldHJ5RGVsYXkgPSBjb25maWcucmV0cnlEZWxheSkgIT0gbnVsbCA/IF9jb25maWckcmV0cnlEZWxheSA6IGRlZmF1bHRSZXRyeURlbGF5O1xuICAgICAgdmFyIGRlbGF5ID0gdHlwZW9mIHJldHJ5RGVsYXkgPT09ICdmdW5jdGlvbicgPyByZXRyeURlbGF5KF90aGlzLmZhaWx1cmVDb3VudCwgZXJyb3IpIDogcmV0cnlEZWxheTtcbiAgICAgIHZhciBzaG91bGRSZXRyeSA9IHJldHJ5ID09PSB0cnVlIHx8IHR5cGVvZiByZXRyeSA9PT0gJ251bWJlcicgJiYgX3RoaXMuZmFpbHVyZUNvdW50IDwgcmV0cnkgfHwgdHlwZW9mIHJldHJ5ID09PSAnZnVuY3Rpb24nICYmIHJldHJ5KF90aGlzLmZhaWx1cmVDb3VudCwgZXJyb3IpO1xuXG4gICAgICBpZiAoY2FuY2VsUmV0cnkgfHwgIXNob3VsZFJldHJ5KSB7XG4gICAgICAgIC8vIFdlIGFyZSBkb25lIGlmIHRoZSBxdWVyeSBkb2VzIG5vdCBuZWVkIHRvIGJlIHJldHJpZWRcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5mYWlsdXJlQ291bnQrKzsgLy8gTm90aWZ5IG9uIGZhaWxcblxuICAgICAgY29uZmlnLm9uRmFpbCA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uRmFpbChfdGhpcy5mYWlsdXJlQ291bnQsIGVycm9yKTsgLy8gRGVsYXlcblxuICAgICAgc2xlZXAoZGVsYXkpIC8vIFBhdXNlIGlmIHRoZSBkb2N1bWVudCBpcyBub3QgdmlzaWJsZSBvciB3aGVuIHRoZSBkZXZpY2UgaXMgb2ZmbGluZVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWZvY3VzTWFuYWdlci5pc0ZvY3VzZWQoKSB8fCAhb25saW5lTWFuYWdlci5pc09ubGluZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2FuY2VsUmV0cnkpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTsgLy8gU3RhcnQgbG9vcFxuXG5cbiAgcnVuKCk7XG59OyIsImV4cG9ydCB2YXIgU3Vic2NyaWJhYmxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaWJhYmxlKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaWJhYmxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjYWxsYmFjayA9IGxpc3RlbmVyIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIHRoaXMubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMub25TdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubGlzdGVuZXJzID0gX3RoaXMubGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCAhPT0gY2FsbGJhY2s7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25VbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uIGhhc0xpc3RlbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMDtcbiAgfTtcblxuICBfcHJvdG8ub25TdWJzY3JpYmUgPSBmdW5jdGlvbiBvblN1YnNjcmliZSgpIHsvLyBEbyBub3RoaW5nXG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkgey8vIERvIG5vdGhpbmdcbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaWJhYmxlO1xufSgpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gVFlQRVNcbi8vIFVUSUxTXG5leHBvcnQgdmFyIGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmdW5jdGlvbmFsVXBkYXRlKHVwZGF0ZXIsIGlucHV0KSB7XG4gIHJldHVybiB0eXBlb2YgdXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IHVwZGF0ZXIoaW5wdXQpIDogdXBkYXRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVGltZW91dCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA+PSAwICYmIHZhbHVlICE9PSBJbmZpbml0eTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVRdWVyeUtleUFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlKGFycmF5MSwgYXJyYXkyKSB7XG4gIHJldHVybiBhcnJheTEuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGFycmF5Mi5pbmRleE9mKHgpID09PSAtMTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUF0KGFycmF5LCBpbmRleCwgdmFsdWUpIHtcbiAgdmFyIGNvcHkgPSBhcnJheS5zbGljZSgwKTtcbiAgY29weVtpbmRleF0gPSB2YWx1ZTtcbiAgcmV0dXJuIGNvcHk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGltZVVudGlsU3RhbGUodXBkYXRlZEF0LCBzdGFsZVRpbWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KHVwZGF0ZWRBdCArIChzdGFsZVRpbWUgfHwgMCkgLSBEYXRlLm5vdygpLCAwKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5QXJncyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICghaXNRdWVyeUtleShhcmcxKSkge1xuICAgIHJldHVybiBhcmcxO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhcmcyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmczLCB7XG4gICAgICBxdWVyeUtleTogYXJnMSxcbiAgICAgIHF1ZXJ5Rm46IGFyZzJcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgIHF1ZXJ5S2V5OiBhcmcxXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTXV0YXRpb25BcmdzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGlzUXVlcnlLZXkoYXJnMSkpIHtcbiAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMywge1xuICAgICAgICBtdXRhdGlvbktleTogYXJnMSxcbiAgICAgICAgbXV0YXRpb25GbjogYXJnMlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmcyLCB7XG4gICAgICBtdXRhdGlvbktleTogYXJnMVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhcmcxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmcyLCB7XG4gICAgICBtdXRhdGlvbkZuOiBhcmcxXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gIHJldHVybiBpc1F1ZXJ5S2V5KGFyZzEpID8gW19leHRlbmRzKHt9LCBhcmcyLCB7XG4gICAgcXVlcnlLZXk6IGFyZzFcbiAgfSksIGFyZzNdIDogW2FyZzEgfHwge30sIGFyZzJdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTXV0YXRpb25GaWx0ZXJBcmdzKGFyZzEsIGFyZzIpIHtcbiAgcmV0dXJuIGlzUXVlcnlLZXkoYXJnMSkgPyBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgIG11dGF0aW9uS2V5OiBhcmcxXG4gIH0pIDogYXJnMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBRdWVyeVN0YXR1c0ZpbHRlcihhY3RpdmUsIGluYWN0aXZlKSB7XG4gIGlmIChhY3RpdmUgPT09IHRydWUgJiYgaW5hY3RpdmUgPT09IHRydWUgfHwgYWN0aXZlID09IG51bGwgJiYgaW5hY3RpdmUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnYWxsJztcbiAgfSBlbHNlIGlmIChhY3RpdmUgPT09IGZhbHNlICYmIGluYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHJldHVybiAnbm9uZSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgYWN0aXZlfGluYWN0aXZlIGNhbiBvbmx5IGJlIHRydWV8ZmFsc2Ugb3IgZmFsc2V8dHJ1ZVxuICAgIC8vIHNvLCB3aGVuIG9ubHkgb25lIHZhbHVlIGlzIHByb3ZpZGVkLCB0aGUgbWlzc2luZyBvbmUgaGFzIHRvIGJlIHRoZSBuZWdhdGVkIHZhbHVlXG4gICAgdmFyIGlzQWN0aXZlID0gYWN0aXZlICE9IG51bGwgPyBhY3RpdmUgOiAhaW5hY3RpdmU7XG4gICAgcmV0dXJuIGlzQWN0aXZlID8gJ2FjdGl2ZScgOiAnaW5hY3RpdmUnO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hRdWVyeShmaWx0ZXJzLCBxdWVyeSkge1xuICB2YXIgYWN0aXZlID0gZmlsdGVycy5hY3RpdmUsXG4gICAgICBleGFjdCA9IGZpbHRlcnMuZXhhY3QsXG4gICAgICBmZXRjaGluZyA9IGZpbHRlcnMuZmV0Y2hpbmcsXG4gICAgICBpbmFjdGl2ZSA9IGZpbHRlcnMuaW5hY3RpdmUsXG4gICAgICBwcmVkaWNhdGUgPSBmaWx0ZXJzLnByZWRpY2F0ZSxcbiAgICAgIHF1ZXJ5S2V5ID0gZmlsdGVycy5xdWVyeUtleSxcbiAgICAgIHN0YWxlID0gZmlsdGVycy5zdGFsZTtcblxuICBpZiAoaXNRdWVyeUtleShxdWVyeUtleSkpIHtcbiAgICBpZiAoZXhhY3QpIHtcbiAgICAgIGlmIChxdWVyeS5xdWVyeUhhc2ggIT09IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgcXVlcnkub3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXBhcnRpYWxNYXRjaEtleShxdWVyeS5xdWVyeUtleSwgcXVlcnlLZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIHF1ZXJ5U3RhdHVzRmlsdGVyID0gbWFwUXVlcnlTdGF0dXNGaWx0ZXIoYWN0aXZlLCBpbmFjdGl2ZSk7XG5cbiAgaWYgKHF1ZXJ5U3RhdHVzRmlsdGVyID09PSAnbm9uZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAocXVlcnlTdGF0dXNGaWx0ZXIgIT09ICdhbGwnKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gcXVlcnkuaXNBY3RpdmUoKTtcblxuICAgIGlmIChxdWVyeVN0YXR1c0ZpbHRlciA9PT0gJ2FjdGl2ZScgJiYgIWlzQWN0aXZlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5U3RhdHVzRmlsdGVyID09PSAnaW5hY3RpdmUnICYmIGlzQWN0aXZlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBzdGFsZSA9PT0gJ2Jvb2xlYW4nICYmIHF1ZXJ5LmlzU3RhbGUoKSAhPT0gc3RhbGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGZldGNoaW5nID09PSAnYm9vbGVhbicgJiYgcXVlcnkuaXNGZXRjaGluZygpICE9PSBmZXRjaGluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwcmVkaWNhdGUgJiYgIXByZWRpY2F0ZShxdWVyeSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaE11dGF0aW9uKGZpbHRlcnMsIG11dGF0aW9uKSB7XG4gIHZhciBleGFjdCA9IGZpbHRlcnMuZXhhY3QsXG4gICAgICBmZXRjaGluZyA9IGZpbHRlcnMuZmV0Y2hpbmcsXG4gICAgICBwcmVkaWNhdGUgPSBmaWx0ZXJzLnByZWRpY2F0ZSxcbiAgICAgIG11dGF0aW9uS2V5ID0gZmlsdGVycy5tdXRhdGlvbktleTtcblxuICBpZiAoaXNRdWVyeUtleShtdXRhdGlvbktleSkpIHtcbiAgICBpZiAoIW11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZXhhY3QpIHtcbiAgICAgIGlmIChoYXNoUXVlcnlLZXkobXV0YXRpb24ub3B0aW9ucy5tdXRhdGlvbktleSkgIT09IGhhc2hRdWVyeUtleShtdXRhdGlvbktleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXBhcnRpYWxNYXRjaEtleShtdXRhdGlvbi5vcHRpb25zLm11dGF0aW9uS2V5LCBtdXRhdGlvbktleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGZldGNoaW5nID09PSAnYm9vbGVhbicgJiYgbXV0YXRpb24uc3RhdGUuc3RhdHVzID09PSAnbG9hZGluZycgIT09IGZldGNoaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHByZWRpY2F0ZSAmJiAhcHJlZGljYXRlKG11dGF0aW9uKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgb3B0aW9ucykge1xuICB2YXIgaGFzaEZuID0gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucXVlcnlLZXlIYXNoRm4pIHx8IGhhc2hRdWVyeUtleTtcbiAgcmV0dXJuIGhhc2hGbihxdWVyeUtleSk7XG59XG4vKipcbiAqIERlZmF1bHQgcXVlcnkga2V5cyBoYXNoIGZ1bmN0aW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoUXVlcnlLZXkocXVlcnlLZXkpIHtcbiAgdmFyIGFzQXJyYXkgPSBlbnN1cmVRdWVyeUtleUFycmF5KHF1ZXJ5S2V5KTtcbiAgcmV0dXJuIHN0YWJsZVZhbHVlSGFzaChhc0FycmF5KTtcbn1cbi8qKlxuICogSGFzaGVzIHRoZSB2YWx1ZSBpbnRvIGEgc3RhYmxlIGhhc2guXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWJsZVZhbHVlSGFzaCh2YWx1ZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChfLCB2YWwpIHtcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWwpID8gT2JqZWN0LmtleXModmFsKS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWxba2V5XTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge30pIDogdmFsO1xuICB9KTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGtleSBgYmAgcGFydGlhbGx5IG1hdGNoZXMgd2l0aCBrZXkgYGFgLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWFsTWF0Y2hLZXkoYSwgYikge1xuICByZXR1cm4gcGFydGlhbERlZXBFcXVhbChlbnN1cmVRdWVyeUtleUFycmF5KGEpLCBlbnN1cmVRdWVyeUtleUFycmF5KGIpKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGBiYCBwYXJ0aWFsbHkgbWF0Y2hlcyB3aXRoIGBhYC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFydGlhbERlZXBFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgIT09IHR5cGVvZiBiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuICFPYmplY3Qua2V5cyhiKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiAhcGFydGlhbERlZXBFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBgYWAgaWYgYGJgIGlzIGRlZXBseSBlcXVhbC5cbiAqIElmIG5vdCwgaXQgd2lsbCByZXBsYWNlIGFueSBkZWVwbHkgZXF1YWwgY2hpbGRyZW4gb2YgYGJgIHdpdGggdGhvc2Ugb2YgYGFgLlxuICogVGhpcyBjYW4gYmUgdXNlZCBmb3Igc3RydWN0dXJhbCBzaGFyaW5nIGJldHdlZW4gSlNPTiB2YWx1ZXMgZm9yIGV4YW1wbGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VFcXVhbERlZXAoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGFycmF5ID0gQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpO1xuXG4gIGlmIChhcnJheSB8fCBpc1BsYWluT2JqZWN0KGEpICYmIGlzUGxhaW5PYmplY3QoYikpIHtcbiAgICB2YXIgYVNpemUgPSBhcnJheSA/IGEubGVuZ3RoIDogT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xuICAgIHZhciBiSXRlbXMgPSBhcnJheSA/IGIgOiBPYmplY3Qua2V5cyhiKTtcbiAgICB2YXIgYlNpemUgPSBiSXRlbXMubGVuZ3RoO1xuICAgIHZhciBjb3B5ID0gYXJyYXkgPyBbXSA6IHt9O1xuICAgIHZhciBlcXVhbEl0ZW1zID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYlNpemU7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGFycmF5ID8gaSA6IGJJdGVtc1tpXTtcbiAgICAgIGNvcHlba2V5XSA9IHJlcGxhY2VFcXVhbERlZXAoYVtrZXldLCBiW2tleV0pO1xuXG4gICAgICBpZiAoY29weVtrZXldID09PSBhW2tleV0pIHtcbiAgICAgICAgZXF1YWxJdGVtcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhU2l6ZSA9PT0gYlNpemUgJiYgZXF1YWxJdGVtcyA9PT0gYVNpemUgPyBhIDogY29weTtcbiAgfVxuXG4gIHJldHVybiBiO1xufVxuLyoqXG4gKiBTaGFsbG93IGNvbXBhcmUgb2JqZWN0cy4gT25seSB3b3JrcyB3aXRoIG9iamVjdHMgdGhhdCBhbHdheXMgaGF2ZSB0aGUgc2FtZSBwcm9wZXJ0aWVzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93RXF1YWxPYmplY3RzKGEsIGIpIHtcbiAgaWYgKGEgJiYgIWIgfHwgYiAmJiAhYSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBhKSB7XG4gICAgaWYgKGFba2V5XSAhPT0gYltrZXldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IC8vIENvcGllZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pcy1wbGFpbi1vYmplY3RcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qobykge1xuICBpZiAoIWhhc09iamVjdFByb3RvdHlwZShvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiBoYXMgbW9kaWZpZWQgY29uc3RydWN0b3JcblxuXG4gIHZhciBjdG9yID0gby5jb25zdHJ1Y3RvcjtcblxuICBpZiAodHlwZW9mIGN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSWYgaGFzIG1vZGlmaWVkIHByb3RvdHlwZVxuXG5cbiAgdmFyIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcblxuICBpZiAoIWhhc09iamVjdFByb3RvdHlwZShwcm90KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiBjb25zdHJ1Y3RvciBkb2VzIG5vdCBoYXZlIGFuIE9iamVjdC1zcGVjaWZpYyBtZXRob2RcblxuXG4gIGlmICghcHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG5cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFzT2JqZWN0UHJvdG90eXBlKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1F1ZXJ5S2V5KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRXJyb3I7XG59XG5leHBvcnQgZnVuY3Rpb24gc2xlZXAodGltZW91dCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn1cbi8qKlxuICogU2NoZWR1bGVzIGEgbWljcm90YXNrLlxuICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHNjaGVkdWxlIHN0YXRlIHVwZGF0ZXMgYWZ0ZXIgcmVuZGVyaW5nLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU1pY3JvdGFzayhjYWxsYmFjaykge1xuICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNhbGxiYWNrKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWJvcnRDb250cm9sbGVyKCkge1xuICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCB2YXIgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSBSZWFjdERPTS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlczsiLCJpbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9IGZyb20gJy4vcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5ub3RpZnlNYW5hZ2VyLnNldEJhdGNoTm90aWZ5RnVuY3Rpb24odW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMpOyIsImV4cG9ydCB2YXIgbG9nZ2VyID0gY29uc29sZTsiLCJpbXBvcnQgeyBzZXRMb2dnZXIgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbnNldExvZ2dlcihsb2dnZXIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgZGVmYXVsdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xudmFyIFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7IC8vIGlmIGNvbnRleHRTaGFyaW5nIGlzIG9uLCB3ZSBzaGFyZSB0aGUgZmlyc3QgYW5kIGF0IGxlYXN0IG9uZVxuLy8gaW5zdGFuY2Ugb2YgdGhlIGNvbnRleHQgYWNyb3NzIHRoZSB3aW5kb3dcbi8vIHRvIGVuc3VyZSB0aGF0IGlmIFJlYWN0IFF1ZXJ5IGlzIHVzZWQgYWNyb3NzXG4vLyBkaWZmZXJlbnQgYnVuZGxlcyBvciBtaWNyb2Zyb250ZW5kcyB0aGV5IHdpbGxcbi8vIGFsbCB1c2UgdGhlIHNhbWUgKippbnN0YW5jZSoqIG9mIGNvbnRleHQsIHJlZ2FyZGxlc3Ncbi8vIG9mIG1vZHVsZSBzY29waW5nLlxuXG5mdW5jdGlvbiBnZXRRdWVyeUNsaWVudENvbnRleHQoY29udGV4dFNoYXJpbmcpIHtcbiAgaWYgKGNvbnRleHRTaGFyaW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCF3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQpIHtcbiAgICAgIHdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCA9IGRlZmF1bHRDb250ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQ7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdENvbnRleHQ7XG59XG5cbmV4cG9ydCB2YXIgdXNlUXVlcnlDbGllbnQgPSBmdW5jdGlvbiB1c2VRdWVyeUNsaWVudCgpIHtcbiAgdmFyIHF1ZXJ5Q2xpZW50ID0gUmVhY3QudXNlQ29udGV4dChnZXRRdWVyeUNsaWVudENvbnRleHQoUmVhY3QudXNlQ29udGV4dChRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0KSkpO1xuXG4gIGlmICghcXVlcnlDbGllbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFF1ZXJ5Q2xpZW50IHNldCwgdXNlIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgdG8gc2V0IG9uZScpO1xuICB9XG5cbiAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xufTtcbmV4cG9ydCB2YXIgUXVlcnlDbGllbnRQcm92aWRlciA9IGZ1bmN0aW9uIFF1ZXJ5Q2xpZW50UHJvdmlkZXIoX3JlZikge1xuICB2YXIgY2xpZW50ID0gX3JlZi5jbGllbnQsXG4gICAgICBfcmVmJGNvbnRleHRTaGFyaW5nID0gX3JlZi5jb250ZXh0U2hhcmluZyxcbiAgICAgIGNvbnRleHRTaGFyaW5nID0gX3JlZiRjb250ZXh0U2hhcmluZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGNvbnRleHRTaGFyaW5nLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNsaWVudC5tb3VudCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGllbnQudW5tb3VudCgpO1xuICAgIH07XG4gIH0sIFtjbGllbnRdKTtcbiAgdmFyIENvbnRleHQgPSBnZXRRdWVyeUNsaWVudENvbnRleHQoY29udGV4dFNoYXJpbmcpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0U2hhcmluZ1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNsaWVudFxuICB9LCBjaGlsZHJlbikpO1xufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIsIGlzVmFsaWRUaW1lb3V0LCBub29wLCByZXBsYWNlRXF1YWxEZWVwLCBzaGFsbG93RXF1YWxPYmplY3RzLCB0aW1lVW50aWxTdGFsZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlcic7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBpc0NhbmNlbGxlZEVycm9yIH0gZnJvbSAnLi9yZXRyeWVyJztcbmV4cG9ydCB2YXIgUXVlcnlPYnNlcnZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N1YnNjcmliYWJsZSkge1xuICBfaW5oZXJpdHNMb29zZShRdWVyeU9ic2VydmVyLCBfU3Vic2NyaWJhYmxlKTtcblxuICBmdW5jdGlvbiBRdWVyeU9ic2VydmVyKGNsaWVudCwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1N1YnNjcmliYWJsZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX3RoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIF90aGlzLnRyYWNrZWRQcm9wcyA9IFtdO1xuICAgIF90aGlzLnByZXZpb3VzU2VsZWN0RXJyb3IgPSBudWxsO1xuXG4gICAgX3RoaXMuYmluZE1ldGhvZHMoKTtcblxuICAgIF90aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlPYnNlcnZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJpbmRNZXRob2RzID0gZnVuY3Rpb24gYmluZE1ldGhvZHMoKSB7XG4gICAgdGhpcy5yZW1vdmUgPSB0aGlzLnJlbW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmZXRjaCA9IHRoaXMucmVmZXRjaC5iaW5kKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudFF1ZXJ5LmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgICBpZiAoc2hvdWxkRmV0Y2hPbk1vdW50KHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0ZUZldGNoKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlVGltZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblVuc3Vic2NyaWJlID0gZnVuY3Rpb24gb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zaG91bGRGZXRjaE9uUmVjb25uZWN0ID0gZnVuY3Rpb24gc2hvdWxkRmV0Y2hPblJlY29ubmVjdCgpIHtcbiAgICByZXR1cm4gX3Nob3VsZEZldGNoT25SZWNvbm5lY3QodGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnNob3VsZEZldGNoT25XaW5kb3dGb2N1cyA9IGZ1bmN0aW9uIHNob3VsZEZldGNoT25XaW5kb3dGb2N1cygpIHtcbiAgICByZXR1cm4gX3Nob3VsZEZldGNoT25XaW5kb3dGb2N1cyh0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpIHtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVuYWJsZWQgdG8gYmUgYSBib29sZWFuJyk7XG4gICAgfSAvLyBLZWVwIHByZXZpb3VzIHF1ZXJ5IGtleSBpZiB0aGUgdXNlciBkb2VzIG5vdCBzdXBwbHkgb25lXG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnF1ZXJ5S2V5KSB7XG4gICAgICB0aGlzLm9wdGlvbnMucXVlcnlLZXkgPSBwcmV2T3B0aW9ucy5xdWVyeUtleTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgdmFyIG1vdW50ZWQgPSB0aGlzLmhhc0xpc3RlbmVycygpOyAvLyBGZXRjaCBpZiB0aGVyZSBhcmUgc3Vic2NyaWJlcnNcblxuICAgIGlmIChtb3VudGVkICYmIHNob3VsZEZldGNoT3B0aW9uYWxseSh0aGlzLmN1cnJlbnRRdWVyeSwgcHJldlF1ZXJ5LCB0aGlzLm9wdGlvbnMsIHByZXZPcHRpb25zKSkge1xuICAgICAgdGhpcy5leGVjdXRlRmV0Y2goKTtcbiAgICB9IC8vIFVwZGF0ZSByZXN1bHRcblxuXG4gICAgdGhpcy51cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucyk7IC8vIFVwZGF0ZSBzdGFsZSBpbnRlcnZhbCBpZiBuZWVkZWRcblxuICAgIGlmIChtb3VudGVkICYmICh0aGlzLmN1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IHRoaXMub3B0aW9ucy5zdGFsZVRpbWUgIT09IHByZXZPcHRpb25zLnN0YWxlVGltZSkpIHtcbiAgICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgdmFyIG5leHRSZWZldGNoSW50ZXJ2YWwgPSB0aGlzLmNvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKTsgLy8gVXBkYXRlIHJlZmV0Y2ggaW50ZXJ2YWwgaWYgbmVlZGVkXG5cbiAgICBpZiAobW91bnRlZCAmJiAodGhpcy5jdXJyZW50UXVlcnkgIT09IHByZXZRdWVyeSB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gcHJldk9wdGlvbnMuZW5hYmxlZCB8fCBuZXh0UmVmZXRjaEludGVydmFsICE9PSB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbChuZXh0UmVmZXRjaEludGVydmFsKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE9wdGltaXN0aWNSZXN1bHQgPSBmdW5jdGlvbiBnZXRPcHRpbWlzdGljUmVzdWx0KG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuY2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3VsdChxdWVyeSwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEN1cnJlbnRSZXN1bHQgPSBmdW5jdGlvbiBnZXRDdXJyZW50UmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnRyYWNrUmVzdWx0ID0gZnVuY3Rpb24gdHJhY2tSZXN1bHQocmVzdWx0LCBkZWZhdWx0ZWRPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdHJhY2tlZFJlc3VsdCA9IHt9O1xuXG4gICAgdmFyIHRyYWNrUHJvcCA9IGZ1bmN0aW9uIHRyYWNrUHJvcChrZXkpIHtcbiAgICAgIGlmICghX3RoaXMyLnRyYWNrZWRQcm9wcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIF90aGlzMi50cmFja2VkUHJvcHMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRyYWNrZWRSZXN1bHQsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB0cmFja1Byb3Aoa2V5KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGRlZmF1bHRlZE9wdGlvbnMudXNlRXJyb3JCb3VuZGFyeSB8fCBkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlKSB7XG4gICAgICB0cmFja1Byb3AoJ2Vycm9yJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrZWRSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldE5leHRSZXN1bHQgPSBmdW5jdGlvbiBnZXROZXh0UmVzdWx0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgdW5zdWJzY3JpYmUgPSBfdGhpczMuc3Vic2NyaWJlKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQuaXNGZXRjaGluZykge1xuICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IgJiYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRDdXJyZW50UXVlcnkgPSBmdW5jdGlvbiBnZXRDdXJyZW50UXVlcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFF1ZXJ5O1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLnJlbW92ZSh0aGlzLmN1cnJlbnRRdWVyeSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmV0Y2ggPSBmdW5jdGlvbiByZWZldGNoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbWV0YToge1xuICAgICAgICByZWZldGNoUGFnZTogb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5yZWZldGNoUGFnZVxuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2hPcHRpbWlzdGljID0gZnVuY3Rpb24gZmV0Y2hPcHRpbWlzdGljKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gdGhpcy5jbGllbnQuZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zKG9wdGlvbnMpO1xuICAgIHZhciBxdWVyeSA9IHRoaXMuY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLmNsaWVudCwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgcmV0dXJuIHF1ZXJ5LmZldGNoKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM0LmNyZWF0ZVJlc3VsdChxdWVyeSwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoID0gZnVuY3Rpb24gZmV0Y2goZmV0Y2hPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlRmV0Y2goZmV0Y2hPcHRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS51cGRhdGVSZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIF90aGlzNS5jdXJyZW50UmVzdWx0O1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlRmV0Y2ggPSBmdW5jdGlvbiBleGVjdXRlRmV0Y2goZmV0Y2hPcHRpb25zKSB7XG4gICAgLy8gTWFrZSBzdXJlIHdlIHJlZmVyZW5jZSB0aGUgbGF0ZXN0IHF1ZXJ5IGFzIHRoZSBjdXJyZW50IG9uZSBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZFxuICAgIHRoaXMudXBkYXRlUXVlcnkoKTsgLy8gRmV0Y2hcblxuICAgIHZhciBwcm9taXNlID0gdGhpcy5jdXJyZW50UXVlcnkuZmV0Y2godGhpcy5vcHRpb25zLCBmZXRjaE9wdGlvbnMpO1xuXG4gICAgaWYgKCEoZmV0Y2hPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YWxlVGltZW91dCA9IGZ1bmN0aW9uIHVwZGF0ZVN0YWxlVGltZW91dCgpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJTdGFsZVRpbWVvdXQoKTtcblxuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLmN1cnJlbnRSZXN1bHQuaXNTdGFsZSB8fCAhaXNWYWxpZFRpbWVvdXQodGhpcy5vcHRpb25zLnN0YWxlVGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IHRpbWVVbnRpbFN0YWxlKHRoaXMuY3VycmVudFJlc3VsdC5kYXRhVXBkYXRlZEF0LCB0aGlzLm9wdGlvbnMuc3RhbGVUaW1lKTsgLy8gVGhlIHRpbWVvdXQgaXMgc29tZXRpbWVzIHRyaWdnZXJlZCAxIG1zIGJlZm9yZSB0aGUgc3RhbGUgdGltZSBleHBpcmF0aW9uLlxuICAgIC8vIFRvIG1pdGlnYXRlIHRoaXMgaXNzdWUgd2UgYWx3YXlzIGFkZCAxIG1zIHRvIHRoZSB0aW1lb3V0LlxuXG4gICAgdmFyIHRpbWVvdXQgPSB0aW1lICsgMTtcbiAgICB0aGlzLnN0YWxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzNi5jdXJyZW50UmVzdWx0LmlzU3RhbGUpIHtcbiAgICAgICAgX3RoaXM2LnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgfVxuICAgIH0sIHRpbWVvdXQpO1xuICB9O1xuXG4gIF9wcm90by5jb21wdXRlUmVmZXRjaEludGVydmFsID0gZnVuY3Rpb24gY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCgpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRyZWZldGNoO1xuXG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLnJlZmV0Y2hJbnRlcnZhbCh0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YSwgdGhpcy5jdXJyZW50UXVlcnkpIDogKF90aGlzJG9wdGlvbnMkcmVmZXRjaCA9IHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwpICE9IG51bGwgPyBfdGhpcyRvcHRpb25zJHJlZmV0Y2ggOiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlUmVmZXRjaEludGVydmFsID0gZnVuY3Rpb24gdXBkYXRlUmVmZXRjaEludGVydmFsKG5leHRJbnRlcnZhbCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdGhpcy5jbGVhclJlZmV0Y2hJbnRlcnZhbCgpO1xuICAgIHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCA9IG5leHRJbnRlcnZhbDtcblxuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgIWlzVmFsaWRUaW1lb3V0KHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCkgfHwgdGhpcy5jdXJyZW50UmVmZXRjaEludGVydmFsID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZWZldGNoSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczcub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWxJbkJhY2tncm91bmQgfHwgZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpKSB7XG4gICAgICAgIF90aGlzNy5leGVjdXRlRmV0Y2goKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVUaW1lcnMgPSBmdW5jdGlvbiB1cGRhdGVUaW1lcnMoKSB7XG4gICAgdGhpcy51cGRhdGVTdGFsZVRpbWVvdXQoKTtcbiAgICB0aGlzLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCh0aGlzLmNvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKSk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyVGltZXJzID0gZnVuY3Rpb24gY2xlYXJUaW1lcnMoKSB7XG4gICAgdGhpcy5jbGVhclN0YWxlVGltZW91dCgpO1xuICAgIHRoaXMuY2xlYXJSZWZldGNoSW50ZXJ2YWwoKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJTdGFsZVRpbWVvdXQgPSBmdW5jdGlvbiBjbGVhclN0YWxlVGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5zdGFsZVRpbWVvdXRJZCk7XG4gICAgdGhpcy5zdGFsZVRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJSZWZldGNoSW50ZXJ2YWwgPSBmdW5jdGlvbiBjbGVhclJlZmV0Y2hJbnRlcnZhbCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMucmVmZXRjaEludGVydmFsSWQpO1xuICAgIHRoaXMucmVmZXRjaEludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZVJlc3VsdCA9IGZ1bmN0aW9uIGNyZWF0ZVJlc3VsdChxdWVyeSwgb3B0aW9ucykge1xuICAgIHZhciBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdmFyIHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgdmFyIHByZXZSZXN1bHRTdGF0ZSA9IHRoaXMuY3VycmVudFJlc3VsdFN0YXRlO1xuICAgIHZhciBwcmV2UmVzdWx0T3B0aW9ucyA9IHRoaXMuY3VycmVudFJlc3VsdE9wdGlvbnM7XG4gICAgdmFyIHF1ZXJ5Q2hhbmdlID0gcXVlcnkgIT09IHByZXZRdWVyeTtcbiAgICB2YXIgcXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeUNoYW5nZSA/IHF1ZXJ5LnN0YXRlIDogdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGU7XG4gICAgdmFyIHByZXZRdWVyeVJlc3VsdCA9IHF1ZXJ5Q2hhbmdlID8gdGhpcy5jdXJyZW50UmVzdWx0IDogdGhpcy5wcmV2aW91c1F1ZXJ5UmVzdWx0O1xuICAgIHZhciBzdGF0ZSA9IHF1ZXJ5LnN0YXRlO1xuICAgIHZhciBkYXRhVXBkYXRlZEF0ID0gc3RhdGUuZGF0YVVwZGF0ZWRBdCxcbiAgICAgICAgZXJyb3IgPSBzdGF0ZS5lcnJvcixcbiAgICAgICAgZXJyb3JVcGRhdGVkQXQgPSBzdGF0ZS5lcnJvclVwZGF0ZWRBdCxcbiAgICAgICAgaXNGZXRjaGluZyA9IHN0YXRlLmlzRmV0Y2hpbmcsXG4gICAgICAgIHN0YXR1cyA9IHN0YXRlLnN0YXR1cztcbiAgICB2YXIgaXNQcmV2aW91c0RhdGEgPSBmYWxzZTtcbiAgICB2YXIgaXNQbGFjZWhvbGRlckRhdGEgPSBmYWxzZTtcbiAgICB2YXIgZGF0YTsgLy8gT3B0aW1pc3RpY2FsbHkgc2V0IHJlc3VsdCBpbiBmZXRjaGluZyBzdGF0ZSBpZiBuZWVkZWRcblxuICAgIGlmIChvcHRpb25zLm9wdGltaXN0aWNSZXN1bHRzKSB7XG4gICAgICB2YXIgbW91bnRlZCA9IHRoaXMuaGFzTGlzdGVuZXJzKCk7XG4gICAgICB2YXIgZmV0Y2hPbk1vdW50ID0gIW1vdW50ZWQgJiYgc2hvdWxkRmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKTtcbiAgICAgIHZhciBmZXRjaE9wdGlvbmFsbHkgPSBtb3VudGVkICYmIHNob3VsZEZldGNoT3B0aW9uYWxseShxdWVyeSwgcHJldlF1ZXJ5LCBvcHRpb25zLCBwcmV2T3B0aW9ucyk7XG5cbiAgICAgIGlmIChmZXRjaE9uTW91bnQgfHwgZmV0Y2hPcHRpb25hbGx5KSB7XG4gICAgICAgIGlzRmV0Y2hpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICghZGF0YVVwZGF0ZWRBdCkge1xuICAgICAgICAgIHN0YXR1cyA9ICdsb2FkaW5nJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gS2VlcCBwcmV2aW91cyBkYXRhIGlmIG5lZWRlZFxuXG5cbiAgICBpZiAob3B0aW9ucy5rZWVwUHJldmlvdXNEYXRhICYmICFzdGF0ZS5kYXRhVXBkYXRlQ291bnQgJiYgKHByZXZRdWVyeVJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlF1ZXJ5UmVzdWx0LmlzU3VjY2VzcykgJiYgc3RhdHVzICE9PSAnZXJyb3InKSB7XG4gICAgICBkYXRhID0gcHJldlF1ZXJ5UmVzdWx0LmRhdGE7XG4gICAgICBkYXRhVXBkYXRlZEF0ID0gcHJldlF1ZXJ5UmVzdWx0LmRhdGFVcGRhdGVkQXQ7XG4gICAgICBzdGF0dXMgPSBwcmV2UXVlcnlSZXN1bHQuc3RhdHVzO1xuICAgICAgaXNQcmV2aW91c0RhdGEgPSB0cnVlO1xuICAgIH0gLy8gU2VsZWN0IGRhdGEgaWYgbmVlZGVkXG4gICAgZWxzZSBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHN0YXRlLmRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcmV2aW91c1NlbGVjdDtcblxuICAgICAgICAvLyBNZW1vaXplIHNlbGVjdCByZXN1bHRcbiAgICAgICAgaWYgKHByZXZSZXN1bHQgJiYgc3RhdGUuZGF0YSA9PT0gKHByZXZSZXN1bHRTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdFN0YXRlLmRhdGEpICYmIG9wdGlvbnMuc2VsZWN0ID09PSAoKF90aGlzJHByZXZpb3VzU2VsZWN0ID0gdGhpcy5wcmV2aW91c1NlbGVjdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByZXZpb3VzU2VsZWN0LmZuKSAmJiAhdGhpcy5wcmV2aW91c1NlbGVjdEVycm9yKSB7XG4gICAgICAgICAgZGF0YSA9IHRoaXMucHJldmlvdXNTZWxlY3QucmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYXRhID0gb3B0aW9ucy5zZWxlY3Qoc3RhdGUuZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0cnVjdHVyYWxTaGFyaW5nICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBkYXRhID0gcmVwbGFjZUVxdWFsRGVlcChwcmV2UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0LmRhdGEsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2VsZWN0ID0ge1xuICAgICAgICAgICAgICBmbjogb3B0aW9ucy5zZWxlY3QsXG4gICAgICAgICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNTZWxlY3RFcnJvciA9IG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoc2VsZWN0RXJyb3IpIHtcbiAgICAgICAgICAgIGdldExvZ2dlcigpLmVycm9yKHNlbGVjdEVycm9yKTtcbiAgICAgICAgICAgIGVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2VsZWN0RXJyb3IgPSBzZWxlY3RFcnJvcjtcbiAgICAgICAgICAgIGVycm9yVXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIFVzZSBxdWVyeSBkYXRhXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gc3RhdGUuZGF0YTtcbiAgICAgICAgfSAvLyBTaG93IHBsYWNlaG9sZGVyIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyAmJiAoc3RhdHVzID09PSAnbG9hZGluZycgfHwgc3RhdHVzID09PSAnaWRsZScpKSB7XG4gICAgICB2YXIgcGxhY2Vob2xkZXJEYXRhOyAvLyBNZW1vaXplIHBsYWNlaG9sZGVyIGRhdGFcblxuICAgICAgaWYgKChwcmV2UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0LmlzUGxhY2Vob2xkZXJEYXRhKSAmJiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSA9PT0gKHByZXZSZXN1bHRPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0T3B0aW9ucy5wbGFjZWhvbGRlckRhdGEpKSB7XG4gICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHByZXZSZXN1bHQuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHR5cGVvZiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhKCkgOiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gb3B0aW9ucy5zZWxlY3QocGxhY2Vob2xkZXJEYXRhKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RydWN0dXJhbFNoYXJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBwbGFjZWhvbGRlckRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2VsZWN0RXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKHNlbGVjdEVycm9yKSB7XG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihzZWxlY3RFcnJvcik7XG4gICAgICAgICAgICBlcnJvciA9IHNlbGVjdEVycm9yO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NlbGVjdEVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgICAgICBlcnJvclVwZGF0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICBkYXRhID0gcGxhY2Vob2xkZXJEYXRhO1xuICAgICAgICBpc1BsYWNlaG9sZGVyRGF0YSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgaXNMb2FkaW5nOiBzdGF0dXMgPT09ICdsb2FkaW5nJyxcbiAgICAgIGlzU3VjY2Vzczogc3RhdHVzID09PSAnc3VjY2VzcycsXG4gICAgICBpc0Vycm9yOiBzdGF0dXMgPT09ICdlcnJvcicsXG4gICAgICBpc0lkbGU6IHN0YXR1cyA9PT0gJ2lkbGUnLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IGRhdGFVcGRhdGVkQXQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBlcnJvclVwZGF0ZWRBdDogZXJyb3JVcGRhdGVkQXQsXG4gICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZldGNoRmFpbHVyZUNvdW50LFxuICAgICAgaXNGZXRjaGVkOiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgPiAwIHx8IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgPiAwLFxuICAgICAgaXNGZXRjaGVkQWZ0ZXJNb3VudDogc3RhdGUuZGF0YVVwZGF0ZUNvdW50ID4gcXVlcnlJbml0aWFsU3RhdGUuZGF0YVVwZGF0ZUNvdW50IHx8IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgPiBxdWVyeUluaXRpYWxTdGF0ZS5lcnJvclVwZGF0ZUNvdW50LFxuICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgIGlzUmVmZXRjaGluZzogaXNGZXRjaGluZyAmJiBzdGF0dXMgIT09ICdsb2FkaW5nJyxcbiAgICAgIGlzTG9hZGluZ0Vycm9yOiBzdGF0dXMgPT09ICdlcnJvcicgJiYgc3RhdGUuZGF0YVVwZGF0ZWRBdCA9PT0gMCxcbiAgICAgIGlzUGxhY2Vob2xkZXJEYXRhOiBpc1BsYWNlaG9sZGVyRGF0YSxcbiAgICAgIGlzUHJldmlvdXNEYXRhOiBpc1ByZXZpb3VzRGF0YSxcbiAgICAgIGlzUmVmZXRjaEVycm9yOiBzdGF0dXMgPT09ICdlcnJvcicgJiYgc3RhdGUuZGF0YVVwZGF0ZWRBdCAhPT0gMCxcbiAgICAgIGlzU3RhbGU6IGlzU3RhbGUocXVlcnksIG9wdGlvbnMpLFxuICAgICAgcmVmZXRjaDogdGhpcy5yZWZldGNoLFxuICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uc2hvdWxkTm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gc2hvdWxkTm90aWZ5TGlzdGVuZXJzKHJlc3VsdCwgcHJldlJlc3VsdCkge1xuICAgIGlmICghcHJldlJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHMgPSBfdGhpcyRvcHRpb25zLm5vdGlmeU9uQ2hhbmdlUHJvcHMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zID0gX3RoaXMkb3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucztcblxuICAgIGlmICghbm90aWZ5T25DaGFuZ2VQcm9wcyAmJiAhbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgJiYgIXRoaXMudHJhY2tlZFByb3BzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGluY2x1ZGVkUHJvcHMgPSBub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgPyB0aGlzLnRyYWNrZWRQcm9wcyA6IG5vdGlmeU9uQ2hhbmdlUHJvcHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlc3VsdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdHlwZWRLZXkgPSBrZXk7XG4gICAgICB2YXIgY2hhbmdlZCA9IHJlc3VsdFt0eXBlZEtleV0gIT09IHByZXZSZXN1bHRbdHlwZWRLZXldO1xuICAgICAgdmFyIGlzSW5jbHVkZWQgPSBpbmNsdWRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbmNsdWRlZFByb3BzLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGlzRXhjbHVkZWQgPSBub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucyA9PSBudWxsID8gdm9pZCAwIDogbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA9PT0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2hhbmdlZCAmJiAhaXNFeGNsdWRlZCAmJiAoIWluY2x1ZGVkUHJvcHMgfHwgaXNJbmNsdWRlZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVJlc3VsdCA9IGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0ID0gdGhpcy5jcmVhdGVSZXN1bHQodGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0U3RhdGUgPSB0aGlzLmN1cnJlbnRRdWVyeS5zdGF0ZTtcbiAgICB0aGlzLmN1cnJlbnRSZXN1bHRPcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBPbmx5IG5vdGlmeSBpZiBzb21ldGhpbmcgaGFzIGNoYW5nZWRcblxuICAgIGlmIChzaGFsbG93RXF1YWxPYmplY3RzKHRoaXMuY3VycmVudFJlc3VsdCwgcHJldlJlc3VsdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIERldGVybWluZSB3aGljaCBjYWxsYmFja3MgdG8gdHJpZ2dlclxuXG5cbiAgICB2YXIgZGVmYXVsdE5vdGlmeU9wdGlvbnMgPSB7XG4gICAgICBjYWNoZTogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoKG5vdGlmeU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSAhPT0gZmFsc2UgJiYgdGhpcy5zaG91bGROb3RpZnlMaXN0ZW5lcnModGhpcy5jdXJyZW50UmVzdWx0LCBwcmV2UmVzdWx0KSkge1xuICAgICAgZGVmYXVsdE5vdGlmeU9wdGlvbnMubGlzdGVuZXJzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLm5vdGlmeShfZXh0ZW5kcyh7fSwgZGVmYXVsdE5vdGlmeU9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlUXVlcnkgPSBmdW5jdGlvbiB1cGRhdGVRdWVyeSgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAocXVlcnkgPT09IHRoaXMuY3VycmVudFF1ZXJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeS5zdGF0ZTtcbiAgICB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgcHJldlF1ZXJ5ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICBxdWVyeS5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uUXVlcnlVcGRhdGUgPSBmdW5jdGlvbiBvblF1ZXJ5VXBkYXRlKGFjdGlvbikge1xuICAgIHZhciBub3RpZnlPcHRpb25zID0ge307XG5cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdlcnJvcicgJiYgIWlzQ2FuY2VsbGVkRXJyb3IoYWN0aW9uLmVycm9yKSkge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vbkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKTtcblxuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRpbWVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KG5vdGlmeU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRmlyc3QgdHJpZ2dlciB0aGUgY29uZmlndXJhdGlvbiBjYWxsYmFja3NcbiAgICAgIGlmIChub3RpZnlPcHRpb25zLm9uU3VjY2Vzcykge1xuICAgICAgICBfdGhpczgub3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzOC5vcHRpb25zLm9uU3VjY2VzcyhfdGhpczguY3VycmVudFJlc3VsdC5kYXRhKTtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblNldHRsZWQoX3RoaXM4LmN1cnJlbnRSZXN1bHQuZGF0YSwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG5vdGlmeU9wdGlvbnMub25FcnJvcikge1xuICAgICAgICBfdGhpczgub3B0aW9ucy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vbkVycm9yKF90aGlzOC5jdXJyZW50UmVzdWx0LmVycm9yKTtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblNldHRsZWQodW5kZWZpbmVkLCBfdGhpczguY3VycmVudFJlc3VsdC5lcnJvcik7XG4gICAgICB9IC8vIFRoZW4gdHJpZ2dlciB0aGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSB7XG4gICAgICAgIF90aGlzOC5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lcihfdGhpczguY3VycmVudFJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBUaGVuIHRoZSBjYWNoZSBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAobm90aWZ5T3B0aW9ucy5jYWNoZSkge1xuICAgICAgICBfdGhpczguY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5ub3RpZnkoe1xuICAgICAgICAgIHF1ZXJ5OiBfdGhpczguY3VycmVudFF1ZXJ5LFxuICAgICAgICAgIHR5cGU6ICdvYnNlcnZlclJlc3VsdHNVcGRhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlPYnNlcnZlcjtcbn0oU3Vic2NyaWJhYmxlKTtcblxuZnVuY3Rpb24gc2hvdWxkTG9hZE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgIXF1ZXJ5LnN0YXRlLmRhdGFVcGRhdGVkQXQgJiYgIShxdWVyeS5zdGF0ZS5zdGF0dXMgPT09ICdlcnJvcicgJiYgb3B0aW9ucy5yZXRyeU9uTW91bnQgPT09IGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmVmZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgcXVlcnkuc3RhdGUuZGF0YVVwZGF0ZWRBdCA+IDAgJiYgKG9wdGlvbnMucmVmZXRjaE9uTW91bnQgPT09ICdhbHdheXMnIHx8IG9wdGlvbnMucmVmZXRjaE9uTW91bnQgIT09IGZhbHNlICYmIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBzaG91bGRMb2FkT25Nb3VudChxdWVyeSwgb3B0aW9ucykgfHwgc2hvdWxkUmVmZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBfc2hvdWxkRmV0Y2hPblJlY29ubmVjdChxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZSAmJiAob3B0aW9ucy5yZWZldGNoT25SZWNvbm5lY3QgPT09ICdhbHdheXMnIHx8IG9wdGlvbnMucmVmZXRjaE9uUmVjb25uZWN0ICE9PSBmYWxzZSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIF9zaG91bGRGZXRjaE9uV2luZG93Rm9jdXMocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgKG9wdGlvbnMucmVmZXRjaE9uV2luZG93Rm9jdXMgPT09ICdhbHdheXMnIHx8IG9wdGlvbnMucmVmZXRjaE9uV2luZG93Rm9jdXMgIT09IGZhbHNlICYmIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPcHRpb25hbGx5KHF1ZXJ5LCBwcmV2UXVlcnksIG9wdGlvbnMsIHByZXZPcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmIChxdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHByZXZPcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlKSAmJiAoIW9wdGlvbnMuc3VzcGVuc2UgfHwgcXVlcnkuc3RhdGUuc3RhdHVzICE9PSAnZXJyb3InKSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaXNTdGFsZShxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gcXVlcnkuaXNTdGFsZUJ5VGltZShvcHRpb25zLnN0YWxlVGltZSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsgLy8gQ09OVEVYVFxuXG5mdW5jdGlvbiBjcmVhdGVWYWx1ZSgpIHtcbiAgdmFyIF9pc1Jlc2V0ID0gZmFsc2U7XG4gIHJldHVybiB7XG4gICAgY2xlYXJSZXNldDogZnVuY3Rpb24gY2xlYXJSZXNldCgpIHtcbiAgICAgIF9pc1Jlc2V0ID0gZmFsc2U7XG4gICAgfSxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBfaXNSZXNldCA9IHRydWU7XG4gICAgfSxcbiAgICBpc1Jlc2V0OiBmdW5jdGlvbiBpc1Jlc2V0KCkge1xuICAgICAgcmV0dXJuIF9pc1Jlc2V0O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGNyZWF0ZVZhbHVlKCkpOyAvLyBIT09LXG5cbmV4cG9ydCB2YXIgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSBmdW5jdGlvbiB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0KTtcbn07IC8vIENPTVBPTkVOVFxuXG5leHBvcnQgdmFyIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gZnVuY3Rpb24gUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgdmFsdWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlVmFsdWUoKTtcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0sIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHZhbHVlKSA6IGNoaWxkcmVuKTtcbn07IiwiaW1wb3J0IHsgUXVlcnlPYnNlcnZlciB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgcGFyc2VRdWVyeUFyZ3MgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IHVzZUJhc2VRdWVyeSB9IGZyb20gJy4vdXNlQmFzZVF1ZXJ5JzsgLy8gSE9PS1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICByZXR1cm4gdXNlQmFzZVF1ZXJ5KHBhcnNlZE9wdGlvbnMsIFF1ZXJ5T2JzZXJ2ZXIpO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IH0gZnJvbSAnLi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeSc7XG5pbXBvcnQgeyB1c2VRdWVyeUNsaWVudCB9IGZyb20gJy4vUXVlcnlDbGllbnRQcm92aWRlcic7XG5pbXBvcnQgeyBzaG91bGRUaHJvd0Vycm9yIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gdXNlQmFzZVF1ZXJ5KG9wdGlvbnMsIE9ic2VydmVyKSB7XG4gIHZhciBtb3VudGVkUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoMCksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICB2YXIgZXJyb3JSZXNldEJvdW5kYXJ5ID0gdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoKTtcbiAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSBxdWVyeUNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7IC8vIE1ha2Ugc3VyZSByZXN1bHRzIGFyZSBvcHRpbWlzdGljYWxseSBzZXQgaW4gZmV0Y2hpbmcgc3RhdGUgYmVmb3JlIHN1YnNjcmliaW5nIG9yIHVwZGF0aW5nIG9wdGlvbnNcblxuICBkZWZhdWx0ZWRPcHRpb25zLm9wdGltaXN0aWNSZXN1bHRzID0gdHJ1ZTsgLy8gSW5jbHVkZSBjYWxsYmFja3MgaW4gYmF0Y2ggcmVuZGVyc1xuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IpIHtcbiAgICBkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yKTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2Vzcykge1xuICAgIGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzID0gbm90aWZ5TWFuYWdlci5iYXRjaENhbGxzKGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCkge1xuICAgIGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkID0gbm90aWZ5TWFuYWdlci5iYXRjaENhbGxzKGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlKSB7XG4gICAgLy8gQWx3YXlzIHNldCBzdGFsZSB0aW1lIHdoZW4gdXNpbmcgc3VzcGVuc2UgdG8gcHJldmVudFxuICAgIC8vIGZldGNoaW5nIGFnYWluIHdoZW4gZGlyZWN0bHkgbW91bnRpbmcgYWZ0ZXIgc3VzcGVuZGluZ1xuICAgIGlmICh0eXBlb2YgZGVmYXVsdGVkT3B0aW9ucy5zdGFsZVRpbWUgIT09ICdudW1iZXInKSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSA9IDEwMDA7XG4gICAgfSAvLyBTZXQgY2FjaGUgdGltZSB0byAxIGlmIHRoZSBvcHRpb24gaGFzIGJlZW4gc2V0IHRvIDBcbiAgICAvLyB3aGVuIHVzaW5nIHN1c3BlbnNlIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcCBvZiBmZXRjaGVzXG5cblxuICAgIGlmIChkZWZhdWx0ZWRPcHRpb25zLmNhY2hlVGltZSA9PT0gMCkge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5jYWNoZVRpbWUgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlIHx8IGRlZmF1bHRlZE9wdGlvbnMudXNlRXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIFByZXZlbnQgcmV0cnlpbmcgZmFpbGVkIHF1ZXJ5IGlmIHRoZSBlcnJvciBib3VuZGFyeSBoYXMgbm90IGJlZW4gcmVzZXQgeWV0XG4gICAgaWYgKCFlcnJvclJlc2V0Qm91bmRhcnkuaXNSZXNldCgpKSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnJldHJ5T25Nb3VudCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2ZXIocXVlcnlDbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICB9KSxcbiAgICAgIG9ic2VydmVyID0gX1JlYWN0JHVzZVN0YXRlMlswXTtcblxuICB2YXIgcmVzdWx0ID0gb2JzZXJ2ZXIuZ2V0T3B0aW1pc3RpY1Jlc3VsdChkZWZhdWx0ZWRPcHRpb25zKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIGVycm9yUmVzZXRCb3VuZGFyeS5jbGVhclJlc2V0KCk7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gb2JzZXJ2ZXIuc3Vic2NyaWJlKG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHggKyAxO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIFVwZGF0ZSByZXN1bHQgdG8gbWFrZSBzdXJlIHdlIGRpZCBub3QgbWlzcyBhbnkgcXVlcnkgdXBkYXRlc1xuICAgIC8vIGJldHdlZW4gY3JlYXRpbmcgdGhlIG9ic2VydmVyIGFuZCBzdWJzY3JpYmluZyB0byBpdC5cblxuICAgIG9ic2VydmVyLnVwZGF0ZVJlc3VsdCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2Vycm9yUmVzZXRCb3VuZGFyeSwgb2JzZXJ2ZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBEbyBub3Qgbm90aWZ5IG9uIHVwZGF0ZXMgYmVjYXVzZSBvZiBjaGFuZ2VzIGluIHRoZSBvcHRpb25zIGJlY2F1c2VcbiAgICAvLyB0aGVzZSBjaGFuZ2VzIHNob3VsZCBhbHJlYWR5IGJlIHJlZmxlY3RlZCBpbiB0aGUgb3B0aW1pc3RpYyByZXN1bHQuXG4gICAgb2JzZXJ2ZXIuc2V0T3B0aW9ucyhkZWZhdWx0ZWRPcHRpb25zLCB7XG4gICAgICBsaXN0ZW5lcnM6IGZhbHNlXG4gICAgfSk7XG4gIH0sIFtkZWZhdWx0ZWRPcHRpb25zLCBvYnNlcnZlcl0pOyAvLyBIYW5kbGUgc3VzcGVuc2VcblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSAmJiByZXN1bHQuaXNMb2FkaW5nKSB7XG4gICAgdGhyb3cgb2JzZXJ2ZXIuZmV0Y2hPcHRpbWlzdGljKGRlZmF1bHRlZE9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBkYXRhID0gX3JlZi5kYXRhO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKGRhdGEpO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKGRhdGEsIG51bGwpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgZXJyb3JSZXNldEJvdW5kYXJ5LmNsZWFyUmVzZXQoKTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yKGVycm9yKTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCh1bmRlZmluZWQsIGVycm9yKTtcbiAgICB9KTtcbiAgfSAvLyBIYW5kbGUgZXJyb3IgYm91bmRhcnlcblxuXG4gIGlmIChyZXN1bHQuaXNFcnJvciAmJiAhZXJyb3JSZXNldEJvdW5kYXJ5LmlzUmVzZXQoKSAmJiAhcmVzdWx0LmlzRmV0Y2hpbmcgJiYgc2hvdWxkVGhyb3dFcnJvcihkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlLCBkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnksIFtyZXN1bHQuZXJyb3IsIG9ic2VydmVyLmdldEN1cnJlbnRRdWVyeSgpXSkpIHtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gIH0gLy8gSGFuZGxlIHJlc3VsdCBwcm9wZXJ0eSB1c2FnZSB0cmFja2luZ1xuXG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMubm90aWZ5T25DaGFuZ2VQcm9wcyA9PT0gJ3RyYWNrZWQnKSB7XG4gICAgcmVzdWx0ID0gb2JzZXJ2ZXIudHJhY2tSZXN1bHQocmVzdWx0LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFRocm93RXJyb3Ioc3VzcGVuc2UsIF91c2VFcnJvckJvdW5kYXJ5LCBwYXJhbXMpIHtcbiAgLy8gQWxsb3cgdXNlRXJyb3JCb3VuZGFyeSBmdW5jdGlvbiB0byBvdmVycmlkZSB0aHJvd2luZyBiZWhhdmlvciBvbiBhIHBlci1lcnJvciBiYXNpc1xuICBpZiAodHlwZW9mIF91c2VFcnJvckJvdW5kYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF91c2VFcnJvckJvdW5kYXJ5LmFwcGx5KHZvaWQgMCwgcGFyYW1zKTtcbiAgfSAvLyBBbGxvdyB1c2VFcnJvckJvdW5kYXJ5IHRvIG92ZXJyaWRlIHN1c3BlbnNlJ3MgdGhyb3dpbmcgYmVoYXZpb3JcblxuXG4gIGlmICh0eXBlb2YgX3VzZUVycm9yQm91bmRhcnkgPT09ICdib29sZWFuJykgcmV0dXJuIF91c2VFcnJvckJvdW5kYXJ5OyAvLyBJZiBzdXNwZW5zZSBpcyBlbmFibGVkIGRlZmF1bHQgdG8gdGhyb3dpbmcgZXJyb3JzXG5cbiAgcmV0dXJuICEhc3VzcGVuc2U7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSZWFjdF9fZGVmYXVsdCA9IF9pbnRlcm9wRGVmYXVsdChSZWFjdCk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gd2l0aFNpZGVFZmZlY3QocmVkdWNlUHJvcHNUb1N0YXRlLCBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50LCBtYXBTdGF0ZU9uU2VydmVyKSB7XG4gIGlmICh0eXBlb2YgcmVkdWNlUHJvcHNUb1N0YXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCByZWR1Y2VQcm9wc1RvU3RhdGUgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudCB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtYXBTdGF0ZU9uU2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbWFwU3RhdGVPblNlcnZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbWFwU3RhdGVPblNlcnZlciB0byBlaXRoZXIgYmUgdW5kZWZpbmVkIG9yIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmICh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBXcmFwcGVkQ29tcG9uZW50IHRvIGJlIGEgUmVhY3QgY29tcG9uZW50LicpO1xuICAgIH1cblxuICAgIHZhciBtb3VudGVkSW5zdGFuY2VzID0gW107XG4gICAgdmFyIHN0YXRlO1xuXG4gICAgZnVuY3Rpb24gZW1pdENoYW5nZSgpIHtcbiAgICAgIHN0YXRlID0gcmVkdWNlUHJvcHNUb1N0YXRlKG1vdW50ZWRJbnN0YW5jZXMubWFwKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UucHJvcHM7XG4gICAgICB9KSk7XG5cbiAgICAgIGlmIChTaWRlRWZmZWN0LmNhblVzZURPTSkge1xuICAgICAgICBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50KHN0YXRlKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwU3RhdGVPblNlcnZlcikge1xuICAgICAgICBzdGF0ZSA9IG1hcFN0YXRlT25TZXJ2ZXIoc3RhdGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBTaWRlRWZmZWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzTG9vc2UoU2lkZUVmZmVjdCwgX1B1cmVDb21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTaWRlRWZmZWN0KCkge1xuICAgICAgICByZXR1cm4gX1B1cmVDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBUcnkgdG8gdXNlIGRpc3BsYXlOYW1lIG9mIHdyYXBwZWQgY29tcG9uZW50XG4gICAgICAvLyBFeHBvc2UgY2FuVXNlRE9NIHNvIHRlc3RzIGNhbiBtb25rZXlwYXRjaCBpdFxuICAgICAgU2lkZUVmZmVjdC5wZWVrID0gZnVuY3Rpb24gcGVlaygpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfTtcblxuICAgICAgU2lkZUVmZmVjdC5yZXdpbmQgPSBmdW5jdGlvbiByZXdpbmQoKSB7XG4gICAgICAgIGlmIChTaWRlRWZmZWN0LmNhblVzZURPTSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBvbmx5IGNhbGwgcmV3aW5kKCkgb24gdGhlIHNlcnZlci4gQ2FsbCBwZWVrKCkgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvcmRlZFN0YXRlID0gc3RhdGU7XG4gICAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgICAgICBtb3VudGVkSW5zdGFuY2VzID0gW107XG4gICAgICAgIHJldHVybiByZWNvcmRlZFN0YXRlO1xuICAgICAgfTtcblxuICAgICAgdmFyIF9wcm90byA9IFNpZGVFZmZlY3QucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIG1vdW50ZWRJbnN0YW5jZXMucHVzaCh0aGlzKTtcbiAgICAgICAgZW1pdENoYW5nZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdENoYW5nZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG1vdW50ZWRJbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgbW91bnRlZEluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2lkZUVmZmVjdDtcbiAgICB9KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KFNpZGVFZmZlY3QsIFwiZGlzcGxheU5hbWVcIiwgXCJTaWRlRWZmZWN0KFwiICsgZ2V0RGlzcGxheU5hbWUoV3JhcHBlZENvbXBvbmVudCkgKyBcIilcIik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoU2lkZUVmZmVjdCwgXCJjYW5Vc2VET01cIiwgY2FuVXNlRE9NKTtcblxuICAgIHJldHVybiBTaWRlRWZmZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpdGhTaWRlRWZmZWN0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4yXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hbmltYXRpb24uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hbmltYXRpb24uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbW1vbi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbW1vbi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnR7dHlwZU9mIGFzIGUsaXNFbGVtZW50IGFzIHQsaXNWYWxpZEVsZW1lbnRUeXBlIGFzIG59ZnJvbVwicmVhY3QtaXNcIjtpbXBvcnQgcix7dXNlU3RhdGUgYXMgbyx1c2VDb250ZXh0IGFzIHMsdXNlTWVtbyBhcyBpLHVzZUVmZmVjdCBhcyBhLHVzZVJlZiBhcyBjLGNyZWF0ZUVsZW1lbnQgYXMgdSx1c2VEZWJ1Z1ZhbHVlIGFzIGwsdXNlTGF5b3V0RWZmZWN0IGFzIGR9ZnJvbVwicmVhY3RcIjtpbXBvcnQgaCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgZiBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBtIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgeSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHYoKXtyZXR1cm4odj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBnPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxTPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LHc9T2JqZWN0LmZyZWV6ZShbXSksRT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiYocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFJ8fHByb2Nlc3MuZW52LlNDX0FUVFIpfHxcImRhdGEtc3R5bGVkXCIsQz1cIjUuMy4zXCIsST1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcIkhUTUxFbGVtZW50XCJpbiB3aW5kb3csUD1Cb29sZWFuKFwiYm9vbGVhblwiPT10eXBlb2YgU0NfRElTQUJMRV9TUEVFRFk/U0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViksTz17fSxSPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ezE6XCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsMjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLDM6XCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIiw0OlwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIiw1OlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIiw2OlwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIiw3OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXCJ0aGVtZVwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcbicsODonVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcInRoZW1lXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuJyw5OlwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLDEwOlwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIiwxMTpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsMTI6XCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIiwxMzpcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cXG5cIiwxNDonVGhlbWVQcm92aWRlcjogXCJ0aGVtZVwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuJywxNTpcIkEgc3R5bGlzIHBsdWdpbiBoYXMgYmVlbiBzdXBwbGllZCB0aGF0IGlzIG5vdCBuYW1lZC4gV2UgbmVlZCBhIG5hbWUgZm9yIGVhY2ggcGx1Z2luIHRvIGJlIGFibGUgdG8gcHJldmVudCBzdHlsaW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBkaWZmZXJlbnQgc3R5bGlzIGNvbmZpZ3VyYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBhcHAuIEJlZm9yZSB5b3UgcGFzcyB5b3VyIHBsdWdpbiB0byBgPFN0eWxlU2hlZXRNYW5hZ2VyIHN0eWxpc1BsdWdpbnM9e1tdfT5gLCBwbGVhc2UgbWFrZSBzdXJlIGVhY2ggcGx1Z2luIGlzIHVuaXF1ZWx5LW5hbWVkLCBlLmcuXFxuXFxuYGBganNcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1wb3J0ZWRQbHVnaW4sICduYW1lJywgeyB2YWx1ZTogJ3NvbWUtdW5pcXVlLW5hbWUnIH0pO1xcbmBgYFxcblxcblwiLDE2OlwiUmVhY2hlZCB0aGUgbGltaXQgb2YgaG93IG1hbnkgc3R5bGVkIGNvbXBvbmVudHMgbWF5IGJlIGNyZWF0ZWQgYXQgZ3JvdXAgJXMuXFxuWW91IG1heSBvbmx5IGNyZWF0ZSB1cCB0byAxLDA3Myw3NDEsODI0IGNvbXBvbmVudHMuIElmIHlvdSdyZSBjcmVhdGluZyBjb21wb25lbnRzIGR5bmFtaWNhbGx5LFxcbmFzIGZvciBpbnN0YW5jZSBpbiB5b3VyIHJlbmRlciBtZXRob2QgdGhlbiB5b3UgbWF5IGJlIHJ1bm5pbmcgaW50byB0aGlzIGxpbWl0YXRpb24uXFxuXFxuXCIsMTc6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9Ont9O2Z1bmN0aW9uIEQoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLHQ9W10sbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bis9MSl0LnB1c2gobjwwfHxhcmd1bWVudHMubGVuZ3RoPD1uP3ZvaWQgMDphcmd1bWVudHNbbl0pO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2U9ZS5yZXBsYWNlKC8lW2Etel0vLHQpfSkpLGV9ZnVuY3Rpb24gaihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dGhyb3dcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WP25ldyBFcnJvcihcIkFuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXQuaW8vSlVJYUUjXCIrZStcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIisobi5sZW5ndGg+MD9cIiBBcmdzOiBcIituLmpvaW4oXCIsIFwiKTpcIlwiKSk6bmV3IEVycm9yKEQuYXBwbHkodm9pZCAwLFtSW2VdXS5jb25jYXQobikpLnRyaW0oKSl9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkoNTEyKSx0aGlzLmxlbmd0aD01MTIsdGhpcy50YWc9ZX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbmRleE9mR3JvdXA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj0wO248ZTtuKyspdCs9dGhpcy5ncm91cFNpemVzW25dO3JldHVybiB0fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxyPW4ubGVuZ3RoLG89cjtlPj1vOykobzw8PTEpPDAmJmooMTYsXCJcIitlKTt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KG8pLHRoaXMuZ3JvdXBTaXplcy5zZXQobiksdGhpcy5sZW5ndGg9bztmb3IodmFyIHM9cjtzPG87cysrKXRoaXMuZ3JvdXBTaXplc1tzXT0wfWZvcih2YXIgaT10aGlzLmluZGV4T2ZHcm91cChlKzEpLGE9MCxjPXQubGVuZ3RoO2E8YzthKyspdGhpcy50YWcuaW5zZXJ0UnVsZShpLHRbYV0pJiYodGhpcy5ncm91cFNpemVzW2VdKyssaSsrKX0sdC5jbGVhckdyb3VwPWZ1bmN0aW9uKGUpe2lmKGU8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXMuZ3JvdXBTaXplc1tlXSxuPXRoaXMuaW5kZXhPZkdyb3VwKGUpLHI9bit0O3RoaXMuZ3JvdXBTaXplc1tlXT0wO2Zvcih2YXIgbz1uO288cjtvKyspdGhpcy50YWcuZGVsZXRlUnVsZShuKX19LHQuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLHI9dGhpcy5pbmRleE9mR3JvdXAoZSksbz1yK24scz1yO3M8bztzKyspdCs9dGhpcy50YWcuZ2V0UnVsZShzKStcIi8qIXNjKi9cXG5cIjtyZXR1cm4gdH0sZX0oKSx4PW5ldyBNYXAsaz1uZXcgTWFwLFY9MSxCPWZ1bmN0aW9uKGUpe2lmKHguaGFzKGUpKXJldHVybiB4LmdldChlKTtmb3IoO2suaGFzKFYpOylWKys7dmFyIHQ9VisrO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigoMHx0KTwwfHx0PjE8PDMwKSYmaigxNixcIlwiK3QpLHguc2V0KGUsdCksay5zZXQodCxlKSx0fSx6PWZ1bmN0aW9uKGUpe3JldHVybiBrLmdldChlKX0sTT1mdW5jdGlvbihlLHQpe3Q+PVYmJihWPXQrMSkseC5zZXQoZSx0KSxrLnNldCh0LGUpfSxHPVwic3R5bGVbXCIrQSsnXVtkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjNcIl0nLEw9bmV3IFJlZ0V4cChcIl5cIitBKydcXFxcLmcoXFxcXGQrKVxcXFxbaWQ9XCIoW1xcXFx3XFxcXGQtXSspXCJcXFxcXS4qP1wiKFteXCJdKiknKSxGPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHIsbz1uLnNwbGl0KFwiLFwiKSxzPTAsaT1vLmxlbmd0aDtzPGk7cysrKShyPW9bc10pJiZlLnJlZ2lzdGVyTmFtZSh0LHIpfSxZPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSh0LnRleHRDb250ZW50fHxcIlwiKS5zcGxpdChcIi8qIXNjKi9cXG5cIikscj1bXSxvPTAscz1uLmxlbmd0aDtvPHM7bysrKXt2YXIgaT1uW29dLnRyaW0oKTtpZihpKXt2YXIgYT1pLm1hdGNoKEwpO2lmKGEpe3ZhciBjPTB8cGFyc2VJbnQoYVsxXSwxMCksdT1hWzJdOzAhPT1jJiYoTSh1LGMpLEYoZSx1LGFbM10pLGUuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoYyxyKSksci5sZW5ndGg9MH1lbHNlIHIucHVzaChpKX19fSxxPWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmdm9pZCAwIT09d2luZG93Ll9fd2VicGFja19ub25jZV9fP3dpbmRvdy5fX3dlYnBhY2tfbm9uY2VfXzpudWxsfSxIPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmhlYWQsbj1lfHx0LHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hpbGROb2RlcyxuPXQubGVuZ3RoO24+PTA7bi0tKXt2YXIgcj10W25dO2lmKHImJjE9PT1yLm5vZGVUeXBlJiZyLmhhc0F0dHJpYnV0ZShBKSlyZXR1cm4gcn19KG4pLHM9dm9pZCAwIT09bz9vLm5leHRTaWJsaW5nOm51bGw7ci5zZXRBdHRyaWJ1dGUoQSxcImFjdGl2ZVwiKSxyLnNldEF0dHJpYnV0ZShcImRhdGEtc3R5bGVkLXZlcnNpb25cIixcIjUuMy4zXCIpO3ZhciBpPXEoKTtyZXR1cm4gaSYmci5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGkpLG4uaW5zZXJ0QmVmb3JlKHIscykscn0sJD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSksdGhpcy5zaGVldD1mdW5jdGlvbihlKXtpZihlLnNoZWV0KXJldHVybiBlLnNoZWV0O2Zvcih2YXIgdD1kb2N1bWVudC5zdHlsZVNoZWV0cyxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO2lmKG8ub3duZXJOb2RlPT09ZSlyZXR1cm4gb31qKDE3KX0odCksdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiB0aGlzLnNoZWV0Lmluc2VydFJ1bGUodCxlKSx0aGlzLmxlbmd0aCsrLCEwfWNhdGNoKGUpe3JldHVybiExfX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuc2hlZXQuZGVsZXRlUnVsZShlKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaGVldC5jc3NSdWxlc1tlXTtyZXR1cm4gdm9pZCAwIT09dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuY3NzVGV4dD90LmNzc1RleHQ6XCJcIn0sZX0oKSxXPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0aGlzLm5vZGVzPXQuY2hpbGROb2Rlcyx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtpZihlPD10aGlzLmxlbmd0aCYmZT49MCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCkscj10aGlzLm5vZGVzW2VdO3JldHVybiB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG4scnx8bnVsbCksdGhpcy5sZW5ndGgrKywhMH1yZXR1cm4hMX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGVzW2VdKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ub2Rlc1tlXS50ZXh0Q29udGVudDpcIlwifSxlfSgpLFU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMucnVsZXM9W10sdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8PXRoaXMubGVuZ3RoJiYodGhpcy5ydWxlcy5zcGxpY2UoZSwwLHQpLHRoaXMubGVuZ3RoKyssITApfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5ydWxlcy5zcGxpY2UoZSwxKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ydWxlc1tlXTpcIlwifSxlfSgpLEo9SSxYPXtpc1NlcnZlcjohSSx1c2VDU1NPTUluamVjdGlvbjohUH0sWj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpLHZvaWQgMD09PXQmJih0PXt9KSx0aGlzLm9wdGlvbnM9dih7fSxYLHt9LGUpLHRoaXMuZ3M9dCx0aGlzLm5hbWVzPW5ldyBNYXAobiksdGhpcy5zZXJ2ZXI9ISFlLmlzU2VydmVyLCF0aGlzLnNlcnZlciYmSSYmSiYmKEo9ITEsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRyksbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtvJiZcImFjdGl2ZVwiIT09by5nZXRBdHRyaWJ1dGUoQSkmJihZKGUsbyksby5wYXJlbnROb2RlJiZvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobykpfX0odGhpcykpfWUucmVnaXN0ZXJJZD1mdW5jdGlvbihlKXtyZXR1cm4gQihlKX07dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucz1mdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0hMCksbmV3IGUodih7fSx0aGlzLm9wdGlvbnMse30sdCksdGhpcy5ncyxuJiZ0aGlzLm5hbWVzfHx2b2lkIDApfSx0LmFsbG9jYXRlR1NJbnN0YW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nc1tlXT0odGhpcy5nc1tlXXx8MCkrMX0sdC5nZXRUYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWd8fCh0aGlzLnRhZz0obj0odD10aGlzLm9wdGlvbnMpLmlzU2VydmVyLHI9dC51c2VDU1NPTUluamVjdGlvbixvPXQudGFyZ2V0LGU9bj9uZXcgVShvKTpyP25ldyAkKG8pOm5ldyBXKG8pLG5ldyBUKGUpKSk7dmFyIGUsdCxuLHIsb30sdC5oYXNOYW1lRm9ySWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmhhcyh0KX0sdC5yZWdpc3Rlck5hbWU9ZnVuY3Rpb24oZSx0KXtpZihCKGUpLHRoaXMubmFtZXMuaGFzKGUpKXRoaXMubmFtZXMuZ2V0KGUpLmFkZCh0KTtlbHNle3ZhciBuPW5ldyBTZXQ7bi5hZGQodCksdGhpcy5uYW1lcy5zZXQoZSxuKX19LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0LG4pe3RoaXMucmVnaXN0ZXJOYW1lKGUsdCksdGhpcy5nZXRUYWcoKS5pbnNlcnRSdWxlcyhCKGUpLG4pfSx0LmNsZWFyTmFtZXM9ZnVuY3Rpb24oZSl7dGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmNsZWFyKCl9LHQuY2xlYXJSdWxlcz1mdW5jdGlvbihlKXt0aGlzLmdldFRhZygpLmNsZWFyR3JvdXAoQihlKSksdGhpcy5jbGVhck5hbWVzKGUpfSx0LmNsZWFyVGFnPWZ1bmN0aW9uKCl7dGhpcy50YWc9dm9pZCAwfSx0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFRhZygpLG49dC5sZW5ndGgscj1cIlwiLG89MDtvPG47bysrKXt2YXIgcz16KG8pO2lmKHZvaWQgMCE9PXMpe3ZhciBpPWUubmFtZXMuZ2V0KHMpLGE9dC5nZXRHcm91cChvKTtpZihpJiZhJiZpLnNpemUpe3ZhciBjPUErXCIuZ1wiK28rJ1tpZD1cIicrcysnXCJdJyx1PVwiXCI7dm9pZCAwIT09aSYmaS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmxlbmd0aD4wJiYodSs9ZStcIixcIil9KSkscis9XCJcIithK2MrJ3tjb250ZW50OlwiJyt1KydcIn0vKiFzYyovXFxuJ319fXJldHVybiByfSh0aGlzKX0sZX0oKSxLPS8oYSkoZCkvZ2ksUT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlKyhlPjI1PzM5Ojk3KSl9O2Z1bmN0aW9uIGVlKGUpe3ZhciB0LG49XCJcIjtmb3IodD1NYXRoLmFicyhlKTt0PjUyO3Q9dC81MnwwKW49USh0JTUyKStuO3JldHVybihRKHQlNTIpK24pLnJlcGxhY2UoSyxcIiQxLSQyXCIpfXZhciB0ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10Lmxlbmd0aDtuOyllPTMzKmVedC5jaGFyQ29kZUF0KC0tbik7cmV0dXJuIGV9LG5lPWZ1bmN0aW9uKGUpe3JldHVybiB0ZSg1MzgxLGUpfTtmdW5jdGlvbiByZShlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrPTEpe3ZhciBuPWVbdF07aWYoYihuKSYmIU4obikpcmV0dXJuITF9cmV0dXJuITB9dmFyIG9lPW5lKFwiNS4zLjNcIiksc2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt0aGlzLnJ1bGVzPWUsdGhpcy5zdGF0aWNSdWxlc0lkPVwiXCIsdGhpcy5pc1N0YXRpYz1cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodm9pZCAwPT09bnx8bi5pc1N0YXRpYykmJnJlKGUpLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmJhc2VIYXNoPXRlKG9lLHQpLHRoaXMuYmFzZVN0eWxlPW4sWi5yZWdpc3RlcklkKHQpfXJldHVybiBlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5jb21wb25lbnRJZCxvPVtdO2lmKHRoaXMuYmFzZVN0eWxlJiZvLnB1c2godGhpcy5iYXNlU3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZSx0LG4pKSx0aGlzLmlzU3RhdGljJiYhbi5oYXNoKWlmKHRoaXMuc3RhdGljUnVsZXNJZCYmdC5oYXNOYW1lRm9ySWQocix0aGlzLnN0YXRpY1J1bGVzSWQpKW8ucHVzaCh0aGlzLnN0YXRpY1J1bGVzSWQpO2Vsc2V7dmFyIHM9TmUodGhpcy5ydWxlcyxlLHQsbikuam9pbihcIlwiKSxpPWVlKHRlKHRoaXMuYmFzZUhhc2gscyk+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixpKSl7dmFyIGE9bihzLFwiLlwiK2ksdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixpLGEpfW8ucHVzaChpKSx0aGlzLnN0YXRpY1J1bGVzSWQ9aX1lbHNle2Zvcih2YXIgYz10aGlzLnJ1bGVzLmxlbmd0aCx1PXRlKHRoaXMuYmFzZUhhc2gsbi5oYXNoKSxsPVwiXCIsZD0wO2Q8YztkKyspe3ZhciBoPXRoaXMucnVsZXNbZF07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpbCs9aCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodT10ZSh1LGgrZCkpO2Vsc2UgaWYoaCl7dmFyIHA9TmUoaCxlLHQsbiksZj1BcnJheS5pc0FycmF5KHApP3Auam9pbihcIlwiKTpwO3U9dGUodSxmK2QpLGwrPWZ9fWlmKGwpe3ZhciBtPWVlKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksaWU9L15cXHMqXFwvXFwvLiokL2dtLGFlPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gY2UoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP0U6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/RTppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz93OmMsbD1uZXcgcChhKSxkPVtdLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmLTEhPT1hZS5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIG0oZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShpZSxcIlwiKSx1PXMmJmk/aStcIiBcIitzK1wiIHsgXCIrYytcIiB9XCI6YztyZXR1cm4gdD1hLG49cyxyPW5ldyBSZWdFeHAoXCJcXFxcXCIrbitcIlxcXFxiXCIsXCJnXCIpLG89bmV3IFJlZ0V4cChcIihcXFxcXCIrbitcIlxcXFxiKXsyLH1cIiksbChpfHwhcz9cIlwiOnMsdSl9cmV0dXJuIGwudXNlKFtdLmNvbmNhdCh1LFtmdW5jdGlvbihlLHQsbyl7Mj09PWUmJm8ubGVuZ3RoJiZvWzBdLmxhc3RJbmRleE9mKG4pPjAmJihvWzBdPW9bMF0ucmVwbGFjZShyLGYpKX0saCxmdW5jdGlvbihlKXtpZigtMj09PWUpe3ZhciB0PWQ7cmV0dXJuIGQ9W10sdH19XSkpLG0uaGFzaD11Lmxlbmd0aD91LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lfHxqKDE1KSx0ZShlLHQubmFtZSl9KSw1MzgxKS50b1N0cmluZygpOlwiXCIsbX12YXIgdWU9ci5jcmVhdGVDb250ZXh0KCksbGU9dWUuQ29uc3VtZXIsZGU9ci5jcmVhdGVDb250ZXh0KCksaGU9KGRlLkNvbnN1bWVyLG5ldyBaKSxwZT1jZSgpO2Z1bmN0aW9uIGZlKCl7cmV0dXJuIHModWUpfHxoZX1mdW5jdGlvbiBtZSgpe3JldHVybiBzKGRlKXx8cGV9ZnVuY3Rpb24geWUoZSl7dmFyIHQ9byhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxzPXRbMV0sYz1mZSgpLHU9aSgoZnVuY3Rpb24oKXt2YXIgdD1jO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksbD1pKChmdW5jdGlvbigpe3JldHVybiBjZSh7b3B0aW9uczp7cHJlZml4OiFlLmRpc2FibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9KSxbZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsbl0pO3JldHVybiBhKChmdW5jdGlvbigpe2gobixlLnN0eWxpc1BsdWdpbnMpfHxzKGUuc3R5bGlzUGx1Z2lucyl9KSxbZS5zdHlsaXNQbHVnaW5zXSksci5jcmVhdGVFbGVtZW50KHVlLlByb3ZpZGVyLHt2YWx1ZTp1fSxyLmNyZWF0ZUVsZW1lbnQoZGUuUHJvdmlkZXIse3ZhbHVlOmx9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ci5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pOmUuY2hpbGRyZW4pKX12YXIgdmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG49dGhpczt0aGlzLmluamVjdD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PXBlKTt2YXIgcj1uLm5hbWUrdC5oYXNoO2UuaGFzTmFtZUZvcklkKG4uaWQscil8fGUuaW5zZXJ0UnVsZXMobi5pZCxyLHQobi5ydWxlcyxyLFwiQGtleWZyYW1lc1wiKSl9LHRoaXMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gaigxMixTdHJpbmcobi5uYW1lKSl9LHRoaXMubmFtZT1lLHRoaXMuaWQ9XCJzYy1rZXlmcmFtZXMtXCIrZSx0aGlzLnJ1bGVzPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXBlKSx0aGlzLm5hbWUrZS5oYXNofSxlfSgpLGdlPS8oW0EtWl0pLyxTZT0vKFtBLVpdKS9nLHdlPS9ebXMtLyxFZT1mdW5jdGlvbihlKXtyZXR1cm5cIi1cIitlLnRvTG93ZXJDYXNlKCl9O2Z1bmN0aW9uIGJlKGUpe3JldHVybiBnZS50ZXN0KGUpP2UucmVwbGFjZShTZSxFZSkucmVwbGFjZSh3ZSxcIi1tcy1cIik6ZX12YXIgX2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9O2Z1bmN0aW9uIE5lKGUsbixyLG8pe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcyxpPVtdLGE9MCxjPWUubGVuZ3RoO2E8YzthKz0xKVwiXCIhPT0ocz1OZShlW2FdLG4scixvKSkmJihBcnJheS5pc0FycmF5KHMpP2kucHVzaC5hcHBseShpLHMpOmkucHVzaChzKSk7cmV0dXJuIGl9aWYoX2UoZSkpcmV0dXJuXCJcIjtpZihOKGUpKXJldHVyblwiLlwiK2Uuc3R5bGVkQ29tcG9uZW50SWQ7aWYoYihlKSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YobD1lKXx8bC5wcm90b3R5cGUmJmwucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnR8fCFuKXJldHVybiBlO3ZhciB1PWUobik7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdCh1KSYmY29uc29sZS53YXJuKF8oZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxOZSh1LG4scixvKX12YXIgbDtyZXR1cm4gZSBpbnN0YW5jZW9mIHZlP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOlMoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiYhX2UodFtpXSkmJihBcnJheS5pc0FycmF5KHRbaV0pJiZ0W2ldLmlzQ3NzfHxiKHRbaV0pP3MucHVzaChiZShpKStcIjpcIix0W2ldLFwiO1wiKTpTKHRbaV0pP3MucHVzaC5hcHBseShzLGUodFtpXSxpKSk6cy5wdXNoKGJlKGkpK1wiOiBcIisocj1pLG51bGw9PShvPXRbaV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIGY/U3RyaW5nKG8pLnRyaW0oKTpvK1wicHhcIikrXCI7XCIpKTtyZXR1cm4gbj9bbitcIiB7XCJdLmNvbmNhdChzLFtcIn1cIl0pOnN9KGUpOmUudG9TdHJpbmcoKX12YXIgQWU9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJihlLmlzQ3NzPSEwKSxlfTtmdW5jdGlvbiBDZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGIoZSl8fFMoZSk/QWUoTmUoZyh3LFtlXS5jb25jYXQobikpKSk6MD09PW4ubGVuZ3RoJiYxPT09ZS5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBlWzBdP2U6QWUoTmUoZyhlLG4pKSl9dmFyIEllPS9pbnZhbGlkIGhvb2sgY2FsbC9pLFBlPW5ldyBTZXQsT2U9ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbj1cIlRoZSBjb21wb25lbnQgXCIrZSsodD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIikrXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5Zb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuVG8gcmVzb2x2ZSB0aGlzIG9ubHkgY3JlYXRlIG5ldyBTdHlsZWRDb21wb25lbnRzIG91dHNpZGUgb2YgYW55IHJlbmRlciBtZXRob2QgYW5kIGZ1bmN0aW9uIGNvbXBvbmVudC5cIixyPWNvbnNvbGUuZXJyb3I7dHJ5e3ZhciBvPSEwO2NvbnNvbGUuZXJyb3I9ZnVuY3Rpb24oZSl7aWYoSWUudGVzdChlKSlvPSExLFBlLmRlbGV0ZShuKTtlbHNle2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KHQ+MT90LTE6MCksaT0xO2k8dDtpKyspc1tpLTFdPWFyZ3VtZW50c1tpXTtyLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KHMpKX19LGMoKSxvJiYhUGUuaGFzKG4pJiYoY29uc29sZS53YXJuKG4pLFBlLmFkZChuKSl9Y2F0Y2goZSl7SWUudGVzdChlLm1lc3NhZ2UpJiZQZS5kZWxldGUobil9ZmluYWxseXtjb25zb2xlLmVycm9yPXJ9fX0sUmU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj1FKSxlLnRoZW1lIT09bi50aGVtZSYmZS50aGVtZXx8dHx8bi50aGVtZX0sRGU9L1shXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX4tXSsvZyxqZT0vKF4tfC0kKS9nO2Z1bmN0aW9uIFRlKGUpe3JldHVybiBlLnJlcGxhY2UoRGUsXCItXCIpLnJlcGxhY2UoamUsXCJcIil9dmFyIHhlPWZ1bmN0aW9uKGUpe3JldHVybiBlZShuZShlKT4+PjApfTtmdW5jdGlvbiBrZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIFZlPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIUFycmF5LmlzQXJyYXkoZSl9LEJlPWZ1bmN0aW9uKGUpe3JldHVyblwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lJiZcInByb3RvdHlwZVwiIT09ZX07ZnVuY3Rpb24gemUoZSx0LG4pe3ZhciByPWVbbl07VmUodCkmJlZlKHIpP01lKHIsdCk6ZVtuXT10fWZ1bmN0aW9uIE1lKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IodmFyIG89MCxzPW47bzxzLmxlbmd0aDtvKyspe3ZhciBpPXNbb107aWYoVmUoaSkpZm9yKHZhciBhIGluIGkpQmUoYSkmJnplKGUsaVthXSxhKX1yZXR1cm4gZX12YXIgR2U9ci5jcmVhdGVDb250ZXh0KCksTGU9R2UuQ29uc3VtZXI7ZnVuY3Rpb24gRmUoZSl7dmFyIHQ9cyhHZSksbj1pKChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiBqKDE0KTtpZihiKGUpKXt2YXIgbj1lKHQpO3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fG51bGwhPT1uJiYhQXJyYXkuaXNBcnJheShuKSYmXCJvYmplY3RcIj09dHlwZW9mIG4/bjpqKDcpfXJldHVybiBBcnJheS5pc0FycmF5KGUpfHxcIm9iamVjdFwiIT10eXBlb2YgZT9qKDgpOnQ/dih7fSx0LHt9LGUpOmV9KGUudGhlbWUsdCl9KSxbZS50aGVtZSx0XSk7cmV0dXJuIGUuY2hpbGRyZW4/ci5jcmVhdGVFbGVtZW50KEdlLlByb3ZpZGVyLHt2YWx1ZTpufSxlLmNoaWxkcmVuKTpudWxsfXZhciBZZT17fTtmdW5jdGlvbiBxZShlLHQsbil7dmFyIG89TihlKSxpPSFrZShlKSxhPXQuYXR0cnMsYz12b2lkIDA9PT1hP3c6YSxkPXQuY29tcG9uZW50SWQsaD12b2lkIDA9PT1kP2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOlRlKGUpO1llW25dPShZZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK3hlKFwiNS4zLjNcIituK1llW25dKTtyZXR1cm4gdD90K1wiLVwiK3I6cn0odC5kaXNwbGF5TmFtZSx0LnBhcmVudENvbXBvbmVudElkKTpkLHA9dC5kaXNwbGF5TmFtZSxmPXZvaWQgMD09PXA/ZnVuY3Rpb24oZSl7cmV0dXJuIGtlKGUpP1wic3R5bGVkLlwiK2U6XCJTdHlsZWQoXCIrXyhlKStcIilcIn0oZSk6cCxnPXQuZGlzcGxheU5hbWUmJnQuY29tcG9uZW50SWQ/VGUodC5kaXNwbGF5TmFtZSkrXCItXCIrdC5jb21wb25lbnRJZDp0LmNvbXBvbmVudElkfHxoLFM9byYmZS5hdHRycz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuYXR0cnMsYykuZmlsdGVyKEJvb2xlYW4pOmMsQT10LnNob3VsZEZvcndhcmRQcm9wO28mJmUuc2hvdWxkRm9yd2FyZFByb3AmJihBPXQuc2hvdWxkRm9yd2FyZFByb3A/ZnVuY3Rpb24obixyLG8pe3JldHVybiBlLnNob3VsZEZvcndhcmRQcm9wKG4scixvKSYmdC5zaG91bGRGb3J3YXJkUHJvcChuLHIsbyl9OmUuc2hvdWxkRm9yd2FyZFByb3ApO3ZhciBDLEk9bmV3IHNlKG4sZyxvP2UuY29tcG9uZW50U3R5bGU6dm9pZCAwKSxQPUkuaXNTdGF0aWMmJjA9PT1jLmxlbmd0aCxPPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWUuYXR0cnMsaT1lLmNvbXBvbmVudFN0eWxlLGE9ZS5kZWZhdWx0UHJvcHMsYz1lLmZvbGRlZENvbXBvbmVudElkcyxkPWUuc2hvdWxkRm9yd2FyZFByb3AsaD1lLnN0eWxlZENvbXBvbmVudElkLHA9ZS50YXJnZXQ7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChoKTt2YXIgZj1mdW5jdGlvbihlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSk7dmFyIHI9dih7fSx0LHt0aGVtZTplfSksbz17fTtyZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdCxuLHMsaT1lO2Zvcih0IGluIGIoaSkmJihpPWkocikpLGkpclt0XT1vW3RdPVwiY2xhc3NOYW1lXCI9PT10PyhuPW9bdF0scz1pW3RdLG4mJnM/bitcIiBcIitzOm58fHMpOmlbdF19KSksW3Isb119KFJlKHQscyhHZSksYSl8fEUsdCxvKSx5PWZbMF0sZz1mWzFdLFM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZmUoKSxzPW1lKCksaT10P2UuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRSxvLHMpOmUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMobixvLHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmIXQmJnImJnIoaSksaX0oaSxyLHksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9lLndhcm5Ub29NYW55Q2xhc3Nlczp2b2lkIDApLHc9bixfPWcuJGFzfHx0LiRhc3x8Zy5hc3x8dC5hc3x8cCxOPWtlKF8pLEE9ZyE9PXQ/dih7fSx0LHt9LGcpOnQsQz17fTtmb3IodmFyIEkgaW4gQSlcIiRcIiE9PUlbMF0mJlwiYXNcIiE9PUkmJihcImZvcndhcmRlZEFzXCI9PT1JP0MuYXM9QVtJXTooZD9kKEksbSxfKTohTnx8bShJKSkmJihDW0ldPUFbSV0pKTtyZXR1cm4gdC5zdHlsZSYmZy5zdHlsZSE9PXQuc3R5bGUmJihDLnN0eWxlPXYoe30sdC5zdHlsZSx7fSxnLnN0eWxlKSksQy5jbGFzc05hbWU9QXJyYXkucHJvdG90eXBlLmNvbmNhdChjLGgsUyE9PWg/UzpudWxsLHQuY2xhc3NOYW1lLGcuY2xhc3NOYW1lKS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksQy5yZWY9dyx1KF8sQyl9KEMsZSx0LFApfTtyZXR1cm4gTy5kaXNwbGF5TmFtZT1mLChDPXIuZm9yd2FyZFJlZihPKSkuYXR0cnM9UyxDLmNvbXBvbmVudFN0eWxlPUksQy5kaXNwbGF5TmFtZT1mLEMuc2hvdWxkRm9yd2FyZFByb3A9QSxDLmZvbGRlZENvbXBvbmVudElkcz1vP0FycmF5LnByb3RvdHlwZS5jb25jYXQoZS5mb2xkZWRDb21wb25lbnRJZHMsZS5zdHlsZWRDb21wb25lbnRJZCk6dyxDLnN0eWxlZENvbXBvbmVudElkPWcsQy50YXJnZXQ9bz9lLnRhcmdldDplLEMud2l0aENvbXBvbmVudD1mdW5jdGlvbihlKXt2YXIgcj10LmNvbXBvbmVudElkLG89ZnVuY3Rpb24oZSx0KXtpZihudWxsPT1lKXJldHVybnt9O3ZhciBuLHIsbz17fSxzPU9iamVjdC5rZXlzKGUpO2ZvcihyPTA7cjxzLmxlbmd0aDtyKyspbj1zW3JdLHQuaW5kZXhPZihuKT49MHx8KG9bbl09ZVtuXSk7cmV0dXJuIG99KHQsW1wiY29tcG9uZW50SWRcIl0pLHM9ciYmcitcIi1cIisoa2UoZSk/ZTpUZShfKGUpKSk7cmV0dXJuIHFlKGUsdih7fSxvLHthdHRyczpTLGNvbXBvbmVudElkOnN9KSxuKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEMsXCJkZWZhdWx0UHJvcHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wc30sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcz1vP01lKHt9LGUuZGVmYXVsdFByb3BzLHQpOnR9fSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKE9lKGYsZyksQy53YXJuVG9vTWFueUNsYXNzZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fSxyPSExO3JldHVybiBmdW5jdGlvbihvKXtpZighciYmKG5bb109ITAsT2JqZWN0LmtleXMobikubGVuZ3RoPj0yMDApKXt2YXIgcz10Pycgd2l0aCB0aGUgaWQgb2YgXCInK3QrJ1wiJzpcIlwiO2NvbnNvbGUud2FybihcIk92ZXIgMjAwIGNsYXNzZXMgd2VyZSBnZW5lcmF0ZWQgZm9yIGNvbXBvbmVudCBcIitlK3MrXCIuXFxuQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG5FeGFtcGxlOlxcbiAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xcbiAgICBzdHlsZToge1xcbiAgICAgIGJhY2tncm91bmQ6IHByb3BzLmJhY2tncm91bmQsXFxuICAgIH0sXFxuICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbiAgPENvbXBvbmVudCAvPlwiKSxyPSEwLG49e319fX0oZixnKSksQy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiLlwiK0Muc3R5bGVkQ29tcG9uZW50SWR9LGkmJnkoQyxlLHthdHRyczohMCxjb21wb25lbnRTdHlsZTohMCxkaXNwbGF5TmFtZTohMCxmb2xkZWRDb21wb25lbnRJZHM6ITAsc2hvdWxkRm9yd2FyZFByb3A6ITAsc3R5bGVkQ29tcG9uZW50SWQ6ITAsdGFyZ2V0OiEwLHdpdGhDb21wb25lbnQ6ITB9KSxDfXZhciBIZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gZSh0LHIsbyl7aWYodm9pZCAwPT09byYmKG89RSksIW4ocikpcmV0dXJuIGooMSxTdHJpbmcocikpO3ZhciBzPWZ1bmN0aW9uKCl7cmV0dXJuIHQocixvLENlLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpKX07cmV0dXJuIHMud2l0aENvbmZpZz1mdW5jdGlvbihuKXtyZXR1cm4gZSh0LHIsdih7fSxvLHt9LG4pKX0scy5hdHRycz1mdW5jdGlvbihuKXtyZXR1cm4gZSh0LHIsdih7fSxvLHthdHRyczpBcnJheS5wcm90b3R5cGUuY29uY2F0KG8uYXR0cnMsbikuZmlsdGVyKEJvb2xlYW4pfSkpfSxzfShxZSxlKX07W1wiYVwiLFwiYWJiclwiLFwiYWRkcmVzc1wiLFwiYXJlYVwiLFwiYXJ0aWNsZVwiLFwiYXNpZGVcIixcImF1ZGlvXCIsXCJiXCIsXCJiYXNlXCIsXCJiZGlcIixcImJkb1wiLFwiYmlnXCIsXCJibG9ja3F1b3RlXCIsXCJib2R5XCIsXCJiclwiLFwiYnV0dG9uXCIsXCJjYW52YXNcIixcImNhcHRpb25cIixcImNpdGVcIixcImNvZGVcIixcImNvbFwiLFwiY29sZ3JvdXBcIixcImRhdGFcIixcImRhdGFsaXN0XCIsXCJkZFwiLFwiZGVsXCIsXCJkZXRhaWxzXCIsXCJkZm5cIixcImRpYWxvZ1wiLFwiZGl2XCIsXCJkbFwiLFwiZHRcIixcImVtXCIsXCJlbWJlZFwiLFwiZmllbGRzZXRcIixcImZpZ2NhcHRpb25cIixcImZpZ3VyZVwiLFwiZm9vdGVyXCIsXCJmb3JtXCIsXCJoMVwiLFwiaDJcIixcImgzXCIsXCJoNFwiLFwiaDVcIixcImg2XCIsXCJoZWFkXCIsXCJoZWFkZXJcIixcImhncm91cFwiLFwiaHJcIixcImh0bWxcIixcImlcIixcImlmcmFtZVwiLFwiaW1nXCIsXCJpbnB1dFwiLFwiaW5zXCIsXCJrYmRcIixcImtleWdlblwiLFwibGFiZWxcIixcImxlZ2VuZFwiLFwibGlcIixcImxpbmtcIixcIm1haW5cIixcIm1hcFwiLFwibWFya1wiLFwibWFycXVlZVwiLFwibWVudVwiLFwibWVudWl0ZW1cIixcIm1ldGFcIixcIm1ldGVyXCIsXCJuYXZcIixcIm5vc2NyaXB0XCIsXCJvYmplY3RcIixcIm9sXCIsXCJvcHRncm91cFwiLFwib3B0aW9uXCIsXCJvdXRwdXRcIixcInBcIixcInBhcmFtXCIsXCJwaWN0dXJlXCIsXCJwcmVcIixcInByb2dyZXNzXCIsXCJxXCIsXCJycFwiLFwicnRcIixcInJ1YnlcIixcInNcIixcInNhbXBcIixcInNjcmlwdFwiLFwic2VjdGlvblwiLFwic2VsZWN0XCIsXCJzbWFsbFwiLFwic291cmNlXCIsXCJzcGFuXCIsXCJzdHJvbmdcIixcInN0eWxlXCIsXCJzdWJcIixcInN1bW1hcnlcIixcInN1cFwiLFwidGFibGVcIixcInRib2R5XCIsXCJ0ZFwiLFwidGV4dGFyZWFcIixcInRmb290XCIsXCJ0aFwiLFwidGhlYWRcIixcInRpbWVcIixcInRpdGxlXCIsXCJ0clwiLFwidHJhY2tcIixcInVcIixcInVsXCIsXCJ2YXJcIixcInZpZGVvXCIsXCJ3YnJcIixcImNpcmNsZVwiLFwiY2xpcFBhdGhcIixcImRlZnNcIixcImVsbGlwc2VcIixcImZvcmVpZ25PYmplY3RcIixcImdcIixcImltYWdlXCIsXCJsaW5lXCIsXCJsaW5lYXJHcmFkaWVudFwiLFwibWFya2VyXCIsXCJtYXNrXCIsXCJwYXRoXCIsXCJwYXR0ZXJuXCIsXCJwb2x5Z29uXCIsXCJwb2x5bGluZVwiLFwicmFkaWFsR3JhZGllbnRcIixcInJlY3RcIixcInN0b3BcIixcInN2Z1wiLFwidGV4dFwiLFwidGV4dFBhdGhcIixcInRzcGFuXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe0hlW2VdPUhlKGUpfSkpO3ZhciAkZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLnJ1bGVzPWUsdGhpcy5jb21wb25lbnRJZD10LHRoaXMuaXNTdGF0aWM9cmUoZSksWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrMSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXIoTmUodGhpcy5ydWxlcyx0LG4scikuam9pbihcIlwiKSxcIlwiKSxzPXRoaXMuY29tcG9uZW50SWQrZTtuLmluc2VydFJ1bGVzKHMscyxvKX0sdC5yZW1vdmVTdHlsZXM9ZnVuY3Rpb24oZSx0KXt0LmNsZWFyUnVsZXModGhpcy5jb21wb25lbnRJZCtlKX0sdC5yZW5kZXJTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7ZT4yJiZaLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCtlKSx0aGlzLnJlbW92ZVN0eWxlcyhlLG4pLHRoaXMuY3JlYXRlU3R5bGVzKGUsdCxuLHIpfSxlfSgpO2Z1bmN0aW9uIFdlKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTt2YXIgaT1DZS5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChuKSksYT1cInNjLWdsb2JhbC1cIit4ZShKU09OLnN0cmluZ2lmeShpKSksdT1uZXcgJGUoaSxhKTtmdW5jdGlvbiBsKGUpe3ZhciB0PWZlKCksbj1tZSgpLG89cyhHZSksbD1jKHQuYWxsb2NhdGVHU0luc3RhbmNlKGEpKS5jdXJyZW50O3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnIuQ2hpbGRyZW4uY291bnQoZS5jaGlsZHJlbikmJmNvbnNvbGUud2FybihcIlRoZSBnbG9iYWwgc3R5bGUgY29tcG9uZW50IFwiK2ErXCIgd2FzIGdpdmVuIGNoaWxkIEpTWC4gY3JlYXRlR2xvYmFsU3R5bGUgZG9lcyBub3QgcmVuZGVyIGNoaWxkcmVuLlwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZpLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYtMSE9PWUuaW5kZXhPZihcIkBpbXBvcnRcIil9KSkmJmNvbnNvbGUud2FybihcIlBsZWFzZSBkbyBub3QgdXNlIEBpbXBvcnQgQ1NTIHN5bnRheCBpbiBjcmVhdGVHbG9iYWxTdHlsZSBhdCB0aGlzIHRpbWUsIGFzIHRoZSBDU1NPTSBBUElzIHdlIHVzZSBpbiBwcm9kdWN0aW9uIGRvIG5vdCBoYW5kbGUgaXQgd2VsbC4gSW5zdGVhZCwgd2UgcmVjb21tZW5kIHVzaW5nIGEgbGlicmFyeSBzdWNoIGFzIHJlYWN0LWhlbG1ldCB0byBpbmplY3QgYSB0eXBpY2FsIDxsaW5rPiBtZXRhIHRhZyB0byB0aGUgc3R5bGVzaGVldCwgb3Igc2ltcGx5IGVtYmVkZGluZyBpdCBtYW51YWxseSBpbiB5b3VyIGluZGV4Lmh0bWwgPGhlYWQ+IHNlY3Rpb24gZm9yIGEgc2ltcGxlciBhcHAuXCIpLHQuc2VydmVyJiZoKGwsZSx0LG8sbiksZCgoZnVuY3Rpb24oKXtpZighdC5zZXJ2ZXIpcmV0dXJuIGgobCxlLHQsbyxuKSxmdW5jdGlvbigpe3JldHVybiB1LnJlbW92ZVN0eWxlcyhsLHQpfX0pLFtsLGUsdCxvLG5dKSxudWxsfWZ1bmN0aW9uIGgoZSx0LG4scixvKXtpZih1LmlzU3RhdGljKXUucmVuZGVyU3R5bGVzKGUsTyxuLG8pO2Vsc2V7dmFyIHM9dih7fSx0LHt0aGVtZTpSZSh0LHIsbC5kZWZhdWx0UHJvcHMpfSk7dS5yZW5kZXJTdHlsZXMoZSxzLG4sbyl9fXJldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9lKGEpLHIubWVtbyhsKX1mdW5jdGlvbiBVZShlKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiYGtleWZyYW1lc2AgY2Fubm90IGJlIHVzZWQgb24gUmVhY3ROYXRpdmUsIG9ubHkgb24gdGhlIHdlYi4gVG8gZG8gYW5pbWF0aW9uIGluIFJlYWN0TmF0aXZlIHBsZWFzZSB1c2UgQW5pbWF0ZWQuXCIpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt2YXIgbz1DZS5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChuKSkuam9pbihcIlwiKSxzPXhlKG8pO3JldHVybiBuZXcgdmUocyxvKX12YXIgSmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpczt0aGlzLl9lbWl0U2hlZXRDU1M9ZnVuY3Rpb24oKXt2YXIgdD1lLmluc3RhbmNlLnRvU3RyaW5nKCk7aWYoIXQpcmV0dXJuXCJcIjt2YXIgbj1xKCk7cmV0dXJuXCI8c3R5bGUgXCIrW24mJidub25jZT1cIicrbisnXCInLEErJz1cInRydWVcIicsJ2RhdGEtc3R5bGVkLXZlcnNpb249XCI1LjMuM1wiJ10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpK1wiPlwiK3QrXCI8L3N0eWxlPlwifSx0aGlzLmdldFN0eWxlVGFncz1mdW5jdGlvbigpe3JldHVybiBlLnNlYWxlZD9qKDIpOmUuX2VtaXRTaGVldENTUygpfSx0aGlzLmdldFN0eWxlRWxlbWVudD1mdW5jdGlvbigpe3ZhciB0O2lmKGUuc2VhbGVkKXJldHVybiBqKDIpO3ZhciBuPSgodD17fSlbQV09XCJcIix0W1wiZGF0YS1zdHlsZWQtdmVyc2lvblwiXT1cIjUuMy4zXCIsdC5kYW5nZXJvdXNseVNldElubmVySFRNTD17X19odG1sOmUuaW5zdGFuY2UudG9TdHJpbmcoKX0sdCksbz1xKCk7cmV0dXJuIG8mJihuLm5vbmNlPW8pLFtyLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLHYoe30sbix7a2V5Olwic2MtMC0wXCJ9KSldfSx0aGlzLnNlYWw9ZnVuY3Rpb24oKXtlLnNlYWxlZD0hMH0sdGhpcy5pbnN0YW5jZT1uZXcgWih7aXNTZXJ2ZXI6ITB9KSx0aGlzLnNlYWxlZD0hMX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jb2xsZWN0U3R5bGVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlYWxlZD9qKDIpOnIuY3JlYXRlRWxlbWVudCh5ZSx7c2hlZXQ6dGhpcy5pbnN0YW5jZX0sZSl9LHQuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiBqKDMpfSxlfSgpLFhlPWZ1bmN0aW9uKGUpe3ZhciB0PXIuZm9yd2FyZFJlZigoZnVuY3Rpb24odCxuKXt2YXIgbz1zKEdlKSxpPWUuZGVmYXVsdFByb3BzLGE9UmUodCxvLGkpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PWEmJmNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInK18oZSkrJ1wiJyksci5jcmVhdGVFbGVtZW50KGUsdih7fSx0LHt0aGVtZTphLHJlZjpufSkpfSkpO3JldHVybiB5KHQsZSksdC5kaXNwbGF5TmFtZT1cIldpdGhUaGVtZShcIitfKGUpK1wiKVwiLHR9LFplPWZ1bmN0aW9uKCl7cmV0dXJuIHMoR2UpfSxLZT17U3R5bGVTaGVldDpaLG1hc3RlclNoZWV0OmhlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInRlc3RcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl18fDAsMT09PXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSs9MSk7ZXhwb3J0IGRlZmF1bHQgSGU7ZXhwb3J0e0plIGFzIFNlcnZlclN0eWxlU2hlZXQsbGUgYXMgU3R5bGVTaGVldENvbnN1bWVyLHVlIGFzIFN0eWxlU2hlZXRDb250ZXh0LHllIGFzIFN0eWxlU2hlZXRNYW5hZ2VyLExlIGFzIFRoZW1lQ29uc3VtZXIsR2UgYXMgVGhlbWVDb250ZXh0LEZlIGFzIFRoZW1lUHJvdmlkZXIsS2UgYXMgX19QUklWQVRFX18sV2UgYXMgY3JlYXRlR2xvYmFsU3R5bGUsQ2UgYXMgY3NzLE4gYXMgaXNTdHlsZWRDb21wb25lbnQsVWUgYXMga2V5ZnJhbWVzLFplIGFzIHVzZVRoZW1lLEMgYXMgdmVyc2lvbixYZSBhcyB3aXRoVGhlbWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJpbXBvcnQgcmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBlcnIobWVzc2FnZSkge1xuICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gSW4gVjgsIEVycm9yIG9iamVjdHMga2VlcCB0aGUgY2xvc3VyZSBzY29wZSBjaGFpbiBhbGl2ZSB1bnRpbCB0aGVcbiAgLy8gZXJyLnN0YWNrIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuXG4gIGlmIChlcnJvci5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSUUgc2V0cyB0aGUgc3RhY2sgb25seSBpZiBlcnJvciBpcyB0aHJvd25cbiAgICB0cnkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBjYXRjaCAoXykge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvbm8tdW51c2VkLWNhdGNoLWJpbmRpbmdzLCBuby1lbXB0eVxuXG4gIH1cblxuICByZXR1cm4gZXJyb3I7XG59XG5cbnZhciBlcnJfMSA9IGVycjtcblxuLy8gQG9zcy1vbmx5XG5cblxudmFyIFJlY29pbF9lcnIgPSBlcnJfMTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbi8vIFNwbGl0IGRlY2xhcmF0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiB0byBhbGxvdyB0aGlzIGZ1bmN0aW9uIHRvIHByZXRlbmQgdG9cbi8vIGNoZWNrIGZvciBhY3R1YWwgaW5zdGFuY2Ugb2YgUHJvbWlzZSBpbnN0ZWFkIG9mIHNvbWV0aGluZyB3aXRoIGEgYHRoZW5gXG4vLyBtZXRob2QuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5mdW5jdGlvbiBpc1Byb21pc2UocCkge1xuICByZXR1cm4gISFwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBSZWNvaWxfaXNQcm9taXNlID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBudWxsdGhyb3dzKHgsIG1lc3NhZ2UpIHtcbiAgaWYgKHggIT0gbnVsbCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihtZXNzYWdlICE9PSBudWxsICYmIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiAnR290IHVuZXhwZWN0ZWQgbnVsbCBvciB1bmRlZmluZWQnKTtcbn1cblxudmFyIFJlY29pbF9udWxsdGhyb3dzID0gbnVsbHRocm93cztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmNsYXNzIEJhc2VMb2FkYWJsZSB7XG4gIGdldFZhbHVlKCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbiAgdG9Qcm9taXNlKCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbiAgdmFsdWVNYXliZSgpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHZhbHVlT3JUaHJvdygpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICB0aHJvdyBSZWNvaWxfZXJyKGBMb2FkYWJsZSBleHBlY3RlZCB2YWx1ZSwgYnV0IGluIFwiJHt0aGlzLnN0YXRlfVwiIHN0YXRlYCk7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxuICBwcm9taXNlT3JUaHJvdygpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICB0aHJvdyBSZWNvaWxfZXJyKGBMb2FkYWJsZSBleHBlY3RlZCBwcm9taXNlLCBidXQgaW4gXCIke3RoaXMuc3RhdGV9XCIgc3RhdGVgKTtcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxuICBlcnJvck9yVGhyb3coKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgdGhyb3cgUmVjb2lsX2VycihgTG9hZGFibGUgZXhwZWN0ZWQgZXJyb3IsIGJ1dCBpbiBcIiR7dGhpcy5zdGF0ZX1cIiBzdGF0ZWApO1xuICB9XG5cbiAgaXMob3RoZXIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICByZXR1cm4gb3RoZXIuc3RhdGUgPT09IHRoaXMuc3RhdGUgJiYgb3RoZXIuY29udGVudHMgPT09IHRoaXMuY29udGVudHM7XG4gIH1cblxuICBtYXAoX21hcCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbn1cblxuY2xhc3MgVmFsdWVMb2FkYWJsZSBleHRlbmRzIEJhc2VMb2FkYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YXRlXCIsICdoYXNWYWx1ZScpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29udGVudHNcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuY29udGVudHMgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgdG9Qcm9taXNlKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb250ZW50cyk7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgdmFsdWVPclRocm93KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgcHJvbWlzZU1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBlcnJvck1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBtYXAobWFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5leHQgPSBtYXAodGhpcy5jb250ZW50cyk7XG4gICAgICByZXR1cm4gUmVjb2lsX2lzUHJvbWlzZShuZXh0KSA/IGxvYWRhYmxlV2l0aFByb21pc2UobmV4dCkgOiBpc0xvYWRhYmxlKG5leHQpID8gbmV4dCA6IGxvYWRhYmxlV2l0aFZhbHVlKG5leHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBSZWNvaWxfaXNQcm9taXNlKGUpID8gLy8gSWYgd2UgXCJzdXNwZW5kZWRcIiwgdGhlbiB0cnkgYWdhaW4uXG4gICAgICAvLyBlcnJvcnMgYW5kIHN1YnNlcXVlbnQgcmV0cmllcyB3aWxsIGJlIGhhbmRsZWQgaW4gJ2xvYWRpbmcnIGNhc2VcbiAgICAgIGxvYWRhYmxlV2l0aFByb21pc2UoZS5uZXh0KCgpID0+IHRoaXMubWFwKG1hcCkpKSA6IGxvYWRhYmxlV2l0aEVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIEVycm9yTG9hZGFibGUgZXh0ZW5kcyBCYXNlTG9hZGFibGUge1xuICBjb25zdHJ1Y3RvcihlcnJvcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGF0ZVwiLCAnaGFzRXJyb3InKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbnRlbnRzXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLmNvbnRlbnRzID0gZXJyb3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICB0aHJvdyB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgdG9Qcm9taXNlKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLmNvbnRlbnRzKTtcbiAgfVxuXG4gIHZhbHVlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByb21pc2VNYXliZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZXJyb3JNYXliZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIGVycm9yT3JUaHJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIG1hcChfbWFwKSB7XG4gICAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuY2xhc3MgTG9hZGluZ0xvYWRhYmxlIGV4dGVuZHMgQmFzZUxvYWRhYmxlIHtcbiAgY29uc3RydWN0b3IocHJvbWlzZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGF0ZVwiLCAnbG9hZGluZycpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29udGVudHNcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuY29udGVudHMgPSBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgdGhyb3cgdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHRvUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHZhbHVlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByb21pc2VNYXliZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHByb21pc2VPclRocm93KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgZXJyb3JNYXliZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbWFwKG1hcCkge1xuICAgIHJldHVybiBsb2FkYWJsZVdpdGhQcm9taXNlKHRoaXMuY29udGVudHMudGhlbih2YWx1ZSA9PiB7XG4gICAgICBjb25zdCBuZXh0ID0gbWFwKHZhbHVlKTtcblxuICAgICAgaWYgKGlzTG9hZGFibGUobmV4dCkpIHtcbiAgICAgICAgY29uc3QgbmV4dExvYWRhYmxlID0gbmV4dDtcblxuICAgICAgICBzd2l0Y2ggKG5leHRMb2FkYWJsZS5zdGF0ZSkge1xuICAgICAgICAgIGNhc2UgJ2hhc1ZhbHVlJzpcbiAgICAgICAgICAgIHJldHVybiBuZXh0TG9hZGFibGUuY29udGVudHM7XG5cbiAgICAgICAgICBjYXNlICdoYXNFcnJvcic6XG4gICAgICAgICAgICB0aHJvdyBuZXh0TG9hZGFibGUuY29udGVudHM7XG5cbiAgICAgICAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBuZXh0TG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuXG5cbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZSkpIHtcbiAgICAgICAgLy8gd2Ugd2VyZSBcInN1c3BlbmRlZCxcIiB0cnkgYWdhaW5cbiAgICAgICAgcmV0dXJuIGUudGhlbigoKSA9PiB0aGlzLm1hcChtYXApLmNvbnRlbnRzKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZTtcbiAgICB9KSk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuZXcgVmFsdWVMb2FkYWJsZSh2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhFcnJvcihlcnJvcikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuZXcgRXJyb3JMb2FkYWJsZShlcnJvcikpO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhQcm9taXNlKHByb21pc2UpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IExvYWRpbmdMb2FkYWJsZShwcm9taXNlKSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRhYmxlTG9hZGluZygpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IExvYWRpbmdMb2FkYWJsZShuZXcgUHJvbWlzZSgoKSA9PiB7fSkpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVBbGxBcnJheShpbnB1dHMpIHtcbiAgcmV0dXJuIGlucHV0cy5ldmVyeShpID0+IGkuc3RhdGUgPT09ICdoYXNWYWx1ZScpID8gbG9hZGFibGVXaXRoVmFsdWUoaW5wdXRzLm1hcChpID0+IGkuY29udGVudHMpKSA6IGlucHV0cy5zb21lKGkgPT4gaS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykgPyBsb2FkYWJsZVdpdGhFcnJvcihSZWNvaWxfbnVsbHRocm93cyhpbnB1dHMuZmluZChpID0+IGkuc3RhdGUgPT09ICdoYXNFcnJvcicpLCAnSW52YWxpZCBsb2FkYWJsZSBwYXNzZWQgdG8gbG9hZGFibGVBbGwnKS5jb250ZW50cykgOiBsb2FkYWJsZVdpdGhQcm9taXNlKFByb21pc2UuYWxsKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZUFsbChpbnB1dHMpIHtcbiAgY29uc3QgdW53cmFwZWRJbnB1dHMgPSBBcnJheS5pc0FycmF5KGlucHV0cykgPyBpbnB1dHMgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbnB1dHMpLm1hcChrZXkgPT4gaW5wdXRzW2tleV0pO1xuICBjb25zdCBub3JtYWxpemVkSW5wdXRzID0gdW53cmFwZWRJbnB1dHMubWFwKHggPT4gaXNMb2FkYWJsZSh4KSA/IHggOiBSZWNvaWxfaXNQcm9taXNlKHgpID8gbG9hZGFibGVXaXRoUHJvbWlzZSh4KSA6IGxvYWRhYmxlV2l0aFZhbHVlKHgpKTtcbiAgY29uc3Qgb3V0cHV0ID0gbG9hZGFibGVBbGxBcnJheShub3JtYWxpemVkSW5wdXRzKTtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXRzKSA/IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgb3V0cHV0IDogLy8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKSBoYXMgY29uc2lzdGVudCBrZXkgb3JkZXJpbmcgd2l0aCBFUzZcbiAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgb3V0cHV0Lm1hcChvdXRwdXRzID0+IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGlucHV0cykucmVkdWNlKChvdXQsIGtleSwgaWR4KSA9PiAoeyAuLi5vdXQsXG4gICAgW2tleV06IG91dHB1dHNbaWR4XVxuICB9KSwge30pKTtcbn1cblxuZnVuY3Rpb24gaXNMb2FkYWJsZSh4KSB7XG4gIHJldHVybiB4IGluc3RhbmNlb2YgQmFzZUxvYWRhYmxlO1xufVxuXG5jb25zdCBMb2FkYWJsZVN0YXRpY0ludGVyZmFjZSA9IHtcbiAgb2Y6IHZhbHVlID0+IFJlY29pbF9pc1Byb21pc2UodmFsdWUpID8gbG9hZGFibGVXaXRoUHJvbWlzZSh2YWx1ZSkgOiBpc0xvYWRhYmxlKHZhbHVlKSA/IHZhbHVlIDogbG9hZGFibGVXaXRoVmFsdWUodmFsdWUpLFxuICBlcnJvcjogZXJyb3IgPT4gbG9hZGFibGVXaXRoRXJyb3IoZXJyb3IpLFxuICAvLyAkRmxvd0lzc3VlW3VuY2xlYXItdHlwZV1cbiAgYWxsOiBsb2FkYWJsZUFsbCxcbiAgaXNMb2FkYWJsZVxufTtcbnZhciBSZWNvaWxfTG9hZGFibGUgPSB7XG4gIGxvYWRhYmxlV2l0aFZhbHVlLFxuICBsb2FkYWJsZVdpdGhFcnJvcixcbiAgbG9hZGFibGVXaXRoUHJvbWlzZSxcbiAgbG9hZGFibGVMb2FkaW5nLFxuICBsb2FkYWJsZUFsbCxcbiAgaXNMb2FkYWJsZSxcbiAgUmVjb2lsTG9hZGFibGU6IExvYWRhYmxlU3RhdGljSW50ZXJmYWNlXG59O1xuXG52YXIgUmVjb2lsX0xvYWRhYmxlXzEgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoVmFsdWU7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzIgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoRXJyb3I7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzMgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoUHJvbWlzZTtcbnZhciBSZWNvaWxfTG9hZGFibGVfNCA9IFJlY29pbF9Mb2FkYWJsZS5sb2FkYWJsZUxvYWRpbmc7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzUgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVBbGw7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzYgPSBSZWNvaWxfTG9hZGFibGUuaXNMb2FkYWJsZTtcbnZhciBSZWNvaWxfTG9hZGFibGVfNyA9IFJlY29pbF9Mb2FkYWJsZS5SZWNvaWxMb2FkYWJsZTtcblxudmFyIFJlY29pbF9Mb2FkYWJsZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBSZWNvaWxfTG9hZGFibGVfMSxcbiAgbG9hZGFibGVXaXRoRXJyb3I6IFJlY29pbF9Mb2FkYWJsZV8yLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBSZWNvaWxfTG9hZGFibGVfMyxcbiAgbG9hZGFibGVMb2FkaW5nOiBSZWNvaWxfTG9hZGFibGVfNCxcbiAgbG9hZGFibGVBbGw6IFJlY29pbF9Mb2FkYWJsZV81LFxuICBpc0xvYWRhYmxlOiBSZWNvaWxfTG9hZGFibGVfNixcbiAgUmVjb2lsTG9hZGFibGU6IFJlY29pbF9Mb2FkYWJsZV83XG59KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuY2xhc3MgQWJzdHJhY3RSZWNvaWxWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKG5ld0tleSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtleVwiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5rZXkgPSBuZXdLZXk7XG4gIH1cblxufVxuXG5jbGFzcyBSZWNvaWxTdGF0ZSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuY2xhc3MgUmVjb2lsVmFsdWVSZWFkT25seSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuZnVuY3Rpb24gaXNSZWNvaWxWYWx1ZSh4KSB7XG4gIHJldHVybiB4IGluc3RhbmNlb2YgUmVjb2lsU3RhdGUgfHwgeCBpbnN0YW5jZW9mIFJlY29pbFZhbHVlUmVhZE9ubHk7XG59XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUgPSB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWUsXG4gIFJlY29pbFN0YXRlLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5LFxuICBpc1JlY29pbFZhbHVlXG59O1xuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlXzEgPSBSZWNvaWxfUmVjb2lsVmFsdWUuQWJzdHJhY3RSZWNvaWxWYWx1ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMiA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMyA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxWYWx1ZVJlYWRPbmx5O1xudmFyIFJlY29pbF9SZWNvaWxWYWx1ZV80ID0gUmVjb2lsX1JlY29pbFZhbHVlLmlzUmVjb2lsVmFsdWU7XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBSZWNvaWxfUmVjb2lsVmFsdWVfMSxcbiAgUmVjb2lsU3RhdGU6IFJlY29pbF9SZWNvaWxWYWx1ZV8yLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxfUmVjb2lsVmFsdWVfMyxcbiAgaXNSZWNvaWxWYWx1ZTogUmVjb2lsX1JlY29pbFZhbHVlXzRcbn0pO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gc3ByaW50Zihmb3JtYXQsIC4uLmFyZ3MpIHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCAoKSA9PiBTdHJpbmcoYXJnc1tpbmRleCsrXSkpO1xufVxuXG52YXIgc3ByaW50Zl8xID0gc3ByaW50ZjtcblxuZnVuY3Rpb24gZXhwZWN0YXRpb25WaW9sYXRpb24oZm9ybWF0LCAuLi5hcmdzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gc3ByaW50Zl8xLmNhbGwobnVsbCwgZm9ybWF0LCAuLi5hcmdzKTtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gJ0V4cGVjdGF0aW9uIFZpb2xhdGlvbic7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH1cbn1cblxudmFyIGV4cGVjdGF0aW9uVmlvbGF0aW9uXzEgPSBleHBlY3RhdGlvblZpb2xhdGlvbjtcblxuLy8gQG9zcy1vbmx5XG5cblxudmFyIFJlY29pbF9leHBlY3RhdGlvblZpb2xhdGlvbiA9IGV4cGVjdGF0aW9uVmlvbGF0aW9uXzE7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5jb25zdCBna3MgPSBuZXcgTWFwKCkuc2V0KCdyZWNvaWxfaGFtdF8yMDIwJywgdHJ1ZSkuc2V0KCdyZWNvaWxfc3luY19leHRlcm5hbF9zdG9yZScsIHRydWUpLnNldCgncmVjb2lsX3N1cHByZXNzX3JlcmVuZGVyX2luX2NhbGxiYWNrJywgdHJ1ZSkuc2V0KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcsIHRydWUpO1xuXG5mdW5jdGlvbiBSZWNvaWxfZ2t4X09TUyhnaykge1xuICB2YXIgX2drcyRnZXQ7XG5cbiAgcmV0dXJuIChfZ2tzJGdldCA9IGdrcy5nZXQoZ2spKSAhPT0gbnVsbCAmJiBfZ2tzJGdldCAhPT0gdm9pZCAwID8gX2drcyRnZXQgOiBmYWxzZTtcbn1cblxuUmVjb2lsX2dreF9PU1Muc2V0UGFzcyA9IGdrID0+IHtcbiAgZ2tzLnNldChnaywgdHJ1ZSk7XG59O1xuXG5SZWNvaWxfZ2t4X09TUy5zZXRGYWlsID0gZ2sgPT4ge1xuICBna3Muc2V0KGdrLCBmYWxzZSk7XG59O1xuXG5SZWNvaWxfZ2t4X09TUy5jbGVhciA9ICgpID0+IHtcbiAgZ2tzLmNsZWFyKCk7XG59O1xuXG52YXIgUmVjb2lsX2dreCA9IFJlY29pbF9na3hfT1NTOyAvLyBAb3NzLW9ubHlcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaXRlcmFibGUgd2hvc2Ugb3V0cHV0IGlzIGdlbmVyYXRlZCBieSBwYXNzaW5nIHRoZSBpbnB1dFxuICogaXRlcmFibGUncyB2YWx1ZXMgdGhyb3VnaCB0aGUgbWFwcGVyIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1hcEl0ZXJhYmxlKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICByZXR1cm4gZnVuY3Rpb24qICgpIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgeWllbGQgY2FsbGJhY2sodmFsdWUsIGluZGV4KyspO1xuICAgIH1cbiAgfSgpO1xufVxuXG52YXIgUmVjb2lsX21hcEl0ZXJhYmxlID0gbWFwSXRlcmFibGU7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiByZWNvdmVyYWJsZVZpb2xhdGlvbihtZXNzYWdlLCBwcm9qZWN0TmFtZSwge1xuICBlcnJvclxufSA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgcmVjb3ZlcmFibGVWaW9sYXRpb25fMSA9IHJlY292ZXJhYmxlVmlvbGF0aW9uO1xuXG4vLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uID0gcmVjb3ZlcmFibGVWaW9sYXRpb25fMTtcblxuY2xhc3MgRGVmYXVsdFZhbHVlIHt9XG5cbmNvbnN0IERFRkFVTFRfVkFMVUUgPSBuZXcgRGVmYXVsdFZhbHVlKCk7XG5cbmNsYXNzIFJlY29pbFZhbHVlTm90UmVhZHkgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGtleSkge1xuICAgIHN1cGVyKGBUcmllZCB0byBzZXQgdGhlIHZhbHVlIG9mIFJlY29pbCBzZWxlY3RvciAke2tleX0gdXNpbmcgYW4gdXBkYXRlciBmdW5jdGlvbiwgYnV0IGl0IGlzIGFuIGFzeW5jIHNlbGVjdG9yIGluIGEgcGVuZGluZyBvciBlcnJvciBzdGF0ZTsgdGhpcyBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICB9XG5cbn1cblxuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbmNvbnN0IG5vZGVzID0gbmV3IE1hcCgpOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5jb25zdCByZWNvaWxWYWx1ZXMgPSBuZXcgTWFwKCk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuZnVuY3Rpb24gcmVjb2lsVmFsdWVzRm9yS2V5cyhrZXlzKSB7XG4gIHJldHVybiBSZWNvaWxfbWFwSXRlcmFibGUoa2V5cywga2V5ID0+IFJlY29pbF9udWxsdGhyb3dzKHJlY29pbFZhbHVlcy5nZXQoa2V5KSkpO1xufVxuXG5mdW5jdGlvbiByZWdpc3Rlck5vZGUobm9kZSkge1xuICBpZiAobm9kZXMuaGFzKG5vZGUua2V5KSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgRHVwbGljYXRlIGF0b20ga2V5IFwiJHtub2RlLmtleX1cIi4gVGhpcyBpcyBhIEZBVEFMIEVSUk9SIGluXG4gICAgICBwcm9kdWN0aW9uLiBCdXQgaXQgaXMgc2FmZSB0byBpZ25vcmUgdGhpcyB3YXJuaW5nIGlmIGl0IG9jY3VycmVkIGJlY2F1c2Ugb2ZcbiAgICAgIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnQuYDsgLy8gVE9ETyBOZWVkIHRvIGZpZ3VyZSBvdXQgaWYgdGhlcmUgaXMgYSBzdGFuZGFyZC9vcGVuLXNvdXJjZSBlcXVpdmFsZW50IHRvIHNlZSBpZiBob3QgbW9kdWxlIHJlcGxhY2VtZW50IGlzIGhhcHBlbmluZzpcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAvLyBAZmItb25seTogaWYgKF9fREVWX18pIHtcbiAgICAvLyBAZmItb25seTogY29uc3QgaXNBY2NlcHRpbmdVcGRhdGUgPSByZXF1aXJlKCdfX2RlYnVnJykuaXNBY2NlcHRpbmdVcGRhdGU7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgLy8gQGZiLW9ubHk6IGlmICh0eXBlb2YgaXNBY2NlcHRpbmdVcGRhdGUgIT09ICdmdW5jdGlvbicgfHwgIWlzQWNjZXB0aW5nVXBkYXRlKCkpIHtcbiAgICAvLyBAZmItb25seTogZXhwZWN0YXRpb25WaW9sYXRpb24obWVzc2FnZSwgJ3JlY29pbCcpO1xuICAgIC8vIEBmYi1vbmx5OiB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgLy8gQGZiLW9ubHk6IH0gZWxzZSB7XG4gICAgLy8gQGZiLW9ubHk6IHJlY292ZXJhYmxlVmlvbGF0aW9uKG1lc3NhZ2UsICdyZWNvaWwnKTtcbiAgICAvLyBAZmItb25seTogfVxuXG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpOyAvLyBAb3NzLW9ubHlcbiAgfVxuXG4gIG5vZGVzLnNldChub2RlLmtleSwgbm9kZSk7XG4gIGNvbnN0IHJlY29pbFZhbHVlID0gbm9kZS5zZXQgPT0gbnVsbCA/IG5ldyBSZWNvaWxfUmVjb2lsVmFsdWUkMS5SZWNvaWxWYWx1ZVJlYWRPbmx5KG5vZGUua2V5KSA6IG5ldyBSZWNvaWxfUmVjb2lsVmFsdWUkMS5SZWNvaWxTdGF0ZShub2RlLmtleSk7XG4gIHJlY29pbFZhbHVlcy5zZXQobm9kZS5rZXksIHJlY29pbFZhbHVlKTtcbiAgcmV0dXJuIHJlY29pbFZhbHVlO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuXG5jbGFzcyBOb2RlTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige30gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5mdW5jdGlvbiBnZXROb2RlKGtleSkge1xuICBjb25zdCBub2RlID0gbm9kZXMuZ2V0KGtleSk7XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBOb2RlTWlzc2luZ0Vycm9yKGBNaXNzaW5nIGRlZmluaXRpb24gZm9yIFJlY29pbFZhbHVlOiBcIiR7a2V5fVwiXCJgKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5cbmZ1bmN0aW9uIGdldE5vZGVNYXliZShrZXkpIHtcbiAgcmV0dXJuIG5vZGVzLmdldChrZXkpO1xufVxuXG5jb25zdCBjb25maWdEZWxldGlvbkhhbmRsZXJzID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZShrZXkpIHtcbiAgdmFyIF9ub2RlJHNob3VsZERlbGV0ZUNvbjtcblxuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBub2RlID0gbm9kZXMuZ2V0KGtleSk7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwgJiYgbm9kZSAhPT0gdm9pZCAwICYmIChfbm9kZSRzaG91bGREZWxldGVDb24gPSBub2RlLnNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSkgIT09IG51bGwgJiYgX25vZGUkc2hvdWxkRGVsZXRlQ29uICE9PSB2b2lkIDAgJiYgX25vZGUkc2hvdWxkRGVsZXRlQ29uLmNhbGwobm9kZSkpIHtcbiAgICB2YXIgX2dldENvbmZpZ0RlbGV0aW9uSGFuO1xuXG4gICAgbm9kZXMuZGVsZXRlKGtleSk7XG4gICAgKF9nZXRDb25maWdEZWxldGlvbkhhbiA9IGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcihrZXkpKSA9PT0gbnVsbCB8fCBfZ2V0Q29uZmlnRGVsZXRpb25IYW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXRDb25maWdEZWxldGlvbkhhbigpO1xuICAgIGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyKGtleSwgZm4pIHtcbiAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGZuID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25maWdEZWxldGlvbkhhbmRsZXJzLmRlbGV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMuc2V0KGtleSwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcihrZXkpIHtcbiAgcmV0dXJuIGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMuZ2V0KGtleSk7XG59XG5cbnZhciBSZWNvaWxfTm9kZSA9IHtcbiAgbm9kZXMsXG4gIHJlY29pbFZhbHVlcyxcbiAgcmVnaXN0ZXJOb2RlLFxuICBnZXROb2RlLFxuICBnZXROb2RlTWF5YmUsXG4gIGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlLFxuICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIsXG4gIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcixcbiAgcmVjb2lsVmFsdWVzRm9yS2V5cyxcbiAgTm9kZU1pc3NpbmdFcnJvcixcbiAgRGVmYXVsdFZhbHVlLFxuICBERUZBVUxUX1ZBTFVFLFxuICBSZWNvaWxWYWx1ZU5vdFJlYWR5XG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gZW5xdWV1ZUV4ZWN1dGlvbihzLCBmKSB7XG4gIGYoKTtcbn1cblxudmFyIFJlY29pbF9RdWV1ZSA9IHtcbiAgZW5xdWV1ZUV4ZWN1dGlvblxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBoYW10XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuLyoqXG4gICAgQGZpbGVPdmVydmlldyBIYXNoIEFycmF5IE1hcHBlZCBUcmllLlxuXG4gICAgQ29kZSBiYXNlZCBvbjogaHR0cHM6Ly9naXRodWIuY29tL2V4Y2xpcHkvcGRhdGFcbiovXG5cblxudmFyIGhhbXQgPSB7fTsgLy8gZXhwb3J0XG5cbi8qIENvbmZpZ3VyYXRpb25cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBTSVpFID0gNTtcbnZhciBCVUNLRVRfU0laRSA9IE1hdGgucG93KDIsIFNJWkUpO1xudmFyIE1BU0sgPSBCVUNLRVRfU0laRSAtIDE7XG52YXIgTUFYX0lOREVYX05PREUgPSBCVUNLRVRfU0laRSAvIDI7XG52YXIgTUlOX0FSUkFZX05PREUgPSBCVUNLRVRfU0laRSAvIDQ7XG4vKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIG5vdGhpbmcgPSB7fTtcblxudmFyIGNvbnN0YW50ID0gZnVuY3Rpb24gY29uc3RhbnQoeCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufTtcbi8qKlxuICAgIEdldCAzMiBiaXQgaGFzaCBvZiBzdHJpbmcuXG5cbiAgICBCYXNlZCBvbjpcbiAgICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc2MTY0NjEvZ2VuZXJhdGUtYS1oYXNoLWZyb20tc3RyaW5nLWluLWphdmFzY3JpcHQtanF1ZXJ5XG4qL1xuXG5cbnZhciBoYXNoID0gaGFtdC5oYXNoID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0cik7XG4gIGlmICh0eXBlID09PSAnbnVtYmVyJykgcmV0dXJuIHN0cjtcbiAgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSBzdHIgKz0gJyc7XG4gIHZhciBoYXNoID0gMDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgYyB8IDA7XG4gIH1cblxuICByZXR1cm4gaGFzaDtcbn07XG4vKiBCaXQgT3BzXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBIYW1taW5nIHdlaWdodC5cblxuICAgIFRha2VuIGZyb206IGh0dHA6Ly9qc3BlcmYuY29tL2hhbW1pbmctd2VpZ2h0XG4qL1xuXG5cbnZhciBwb3Bjb3VudCA9IGZ1bmN0aW9uIHBvcGNvdW50KHgpIHtcbiAgeCAtPSB4ID4+IDEgJiAweDU1NTU1NTU1O1xuICB4ID0gKHggJiAweDMzMzMzMzMzKSArICh4ID4+IDIgJiAweDMzMzMzMzMzKTtcbiAgeCA9IHggKyAoeCA+PiA0KSAmIDB4MGYwZjBmMGY7XG4gIHggKz0geCA+PiA4O1xuICB4ICs9IHggPj4gMTY7XG4gIHJldHVybiB4ICYgMHg3Zjtcbn07XG5cbnZhciBoYXNoRnJhZ21lbnQgPSBmdW5jdGlvbiBoYXNoRnJhZ21lbnQoc2hpZnQsIGgpIHtcbiAgcmV0dXJuIGggPj4+IHNoaWZ0ICYgTUFTSztcbn07XG5cbnZhciB0b0JpdG1hcCA9IGZ1bmN0aW9uIHRvQml0bWFwKHgpIHtcbiAgcmV0dXJuIDEgPDwgeDtcbn07XG5cbnZhciBmcm9tQml0bWFwID0gZnVuY3Rpb24gZnJvbUJpdG1hcChiaXRtYXAsIGJpdCkge1xuICByZXR1cm4gcG9wY291bnQoYml0bWFwICYgYml0IC0gMSk7XG59O1xuLyogQXJyYXkgT3BzXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBTZXQgYSB2YWx1ZSBpbiBhbiBhcnJheS5cblxuICAgIEBwYXJhbSBtdXRhdGUgU2hvdWxkIHRoZSBpbnB1dCBhcnJheSBiZSBtdXRhdGVkP1xuICAgIEBwYXJhbSBhdCBJbmRleCB0byBjaGFuZ2UuXG4gICAgQHBhcmFtIHYgTmV3IHZhbHVlXG4gICAgQHBhcmFtIGFyciBBcnJheS5cbiovXG5cblxudmFyIGFycmF5VXBkYXRlID0gZnVuY3Rpb24gYXJyYXlVcGRhdGUobXV0YXRlLCBhdCwgdiwgYXJyKSB7XG4gIHZhciBvdXQgPSBhcnI7XG5cbiAgaWYgKCFtdXRhdGUpIHtcbiAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBvdXQgPSBuZXcgQXJyYXkobGVuKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIG91dFtpXSA9IGFycltpXTtcbiAgICB9XG4gIH1cblxuICBvdXRbYXRdID0gdjtcbiAgcmV0dXJuIG91dDtcbn07XG4vKipcbiAgICBSZW1vdmUgYSB2YWx1ZSBmcm9tIGFuIGFycmF5LlxuXG4gICAgQHBhcmFtIG11dGF0ZSBTaG91bGQgdGhlIGlucHV0IGFycmF5IGJlIG11dGF0ZWQ/XG4gICAgQHBhcmFtIGF0IEluZGV4IHRvIHJlbW92ZS5cbiAgICBAcGFyYW0gYXJyIEFycmF5LlxuKi9cblxuXG52YXIgYXJyYXlTcGxpY2VPdXQgPSBmdW5jdGlvbiBhcnJheVNwbGljZU91dChtdXRhdGUsIGF0LCBhcnIpIHtcbiAgdmFyIG5ld0xlbiA9IGFyci5sZW5ndGggLSAxO1xuICB2YXIgaSA9IDA7XG4gIHZhciBnID0gMDtcbiAgdmFyIG91dCA9IGFycjtcblxuICBpZiAobXV0YXRlKSB7XG4gICAgaSA9IGcgPSBhdDtcbiAgfSBlbHNlIHtcbiAgICBvdXQgPSBuZXcgQXJyYXkobmV3TGVuKTtcblxuICAgIHdoaWxlIChpIDwgYXQpIHtcbiAgICAgIG91dFtnKytdID0gYXJyW2krK107XG4gICAgfVxuICB9XG5cbiAgKytpO1xuXG4gIHdoaWxlIChpIDw9IG5ld0xlbikge1xuICAgIG91dFtnKytdID0gYXJyW2krK107XG4gIH1cblxuICBpZiAobXV0YXRlKSB7XG4gICAgb3V0Lmxlbmd0aCA9IG5ld0xlbjtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuLyoqXG4gICAgSW5zZXJ0IGEgdmFsdWUgaW50byBhbiBhcnJheS5cblxuICAgIEBwYXJhbSBtdXRhdGUgU2hvdWxkIHRoZSBpbnB1dCBhcnJheSBiZSBtdXRhdGVkP1xuICAgIEBwYXJhbSBhdCBJbmRleCB0byBpbnNlcnQgYXQuXG4gICAgQHBhcmFtIHYgVmFsdWUgdG8gaW5zZXJ0LFxuICAgIEBwYXJhbSBhcnIgQXJyYXkuXG4qL1xuXG5cbnZhciBhcnJheVNwbGljZUluID0gZnVuY3Rpb24gYXJyYXlTcGxpY2VJbihtdXRhdGUsIGF0LCB2LCBhcnIpIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgaWYgKG11dGF0ZSkge1xuICAgIHZhciBfaSA9IGxlbjtcblxuICAgIHdoaWxlIChfaSA+PSBhdCkge1xuICAgICAgYXJyW19pLS1dID0gYXJyW19pXTtcbiAgICB9XG5cbiAgICBhcnJbYXRdID0gdjtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgdmFyIGkgPSAwLFxuICAgICAgZyA9IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuICsgMSk7XG5cbiAgd2hpbGUgKGkgPCBhdCkge1xuICAgIG91dFtnKytdID0gYXJyW2krK107XG4gIH1cblxuICBvdXRbYXRdID0gdjtcblxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIG91dFsrK2ddID0gYXJyW2krK107XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbi8qIE5vZGUgU3RydWN0dXJlc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG52YXIgTEVBRiA9IDE7XG52YXIgQ09MTElTSU9OID0gMjtcbnZhciBJTkRFWCA9IDM7XG52YXIgQVJSQVkgPSA0O1xuLyoqXG4gICAgRW1wdHkgbm9kZS5cbiovXG5cbnZhciBlbXB0eSA9IHtcbiAgX19oYW10X2lzRW1wdHk6IHRydWVcbn07XG5cbnZhciBpc0VtcHR5Tm9kZSA9IGZ1bmN0aW9uIGlzRW1wdHlOb2RlKHgpIHtcbiAgcmV0dXJuIHggPT09IGVtcHR5IHx8IHggJiYgeC5fX2hhbXRfaXNFbXB0eTtcbn07XG4vKipcbiAgICBMZWFmIGhvbGRpbmcgYSB2YWx1ZS5cblxuICAgIEBtZW1iZXIgZWRpdCBFZGl0IG9mIHRoZSBub2RlLlxuICAgIEBtZW1iZXIgaGFzaCBIYXNoIG9mIGtleS5cbiAgICBAbWVtYmVyIGtleSBLZXkuXG4gICAgQG1lbWJlciB2YWx1ZSBWYWx1ZSBzdG9yZWQuXG4qL1xuXG5cbnZhciBMZWFmID0gZnVuY3Rpb24gTGVhZihlZGl0LCBoYXNoLCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTEVBRixcbiAgICBlZGl0OiBlZGl0LFxuICAgIGhhc2g6IGhhc2gsXG4gICAga2V5OiBrZXksXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIF9tb2RpZnk6IExlYWZfX21vZGlmeVxuICB9O1xufTtcbi8qKlxuICAgIExlYWYgaG9sZGluZyBtdWx0aXBsZSB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBoYXNoIGJ1dCBkaWZmZXJlbnQga2V5cy5cblxuICAgIEBtZW1iZXIgZWRpdCBFZGl0IG9mIHRoZSBub2RlLlxuICAgIEBtZW1iZXIgaGFzaCBIYXNoIG9mIGtleS5cbiAgICBAbWVtYmVyIGNoaWxkcmVuIEFycmF5IG9mIGNvbGxpc2lvbiBjaGlsZHJlbiBub2RlLlxuKi9cblxuXG52YXIgQ29sbGlzaW9uID0gZnVuY3Rpb24gQ29sbGlzaW9uKGVkaXQsIGhhc2gsIGNoaWxkcmVuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQ09MTElTSU9OLFxuICAgIGVkaXQ6IGVkaXQsXG4gICAgaGFzaDogaGFzaCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgX21vZGlmeTogQ29sbGlzaW9uX19tb2RpZnlcbiAgfTtcbn07XG4vKipcbiAgICBJbnRlcm5hbCBub2RlIHdpdGggYSBzcGFyc2Ugc2V0IG9mIGNoaWxkcmVuLlxuXG4gICAgVXNlcyBhIGJpdG1hcCBhbmQgYXJyYXkgdG8gcGFjayBjaGlsZHJlbi5cblxuICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIG1hc2sgQml0bWFwIHRoYXQgZW5jb2RlIHRoZSBwb3NpdGlvbnMgb2YgY2hpbGRyZW4gaW4gdGhlIGFycmF5LlxuICAgIEBtZW1iZXIgY2hpbGRyZW4gQXJyYXkgb2YgY2hpbGQgbm9kZXMuXG4qL1xuXG5cbnZhciBJbmRleGVkTm9kZSA9IGZ1bmN0aW9uIEluZGV4ZWROb2RlKGVkaXQsIG1hc2ssIGNoaWxkcmVuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogSU5ERVgsXG4gICAgZWRpdDogZWRpdCxcbiAgICBtYXNrOiBtYXNrLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBfbW9kaWZ5OiBJbmRleGVkTm9kZV9fbW9kaWZ5XG4gIH07XG59O1xuLyoqXG4gICAgSW50ZXJuYWwgbm9kZSB3aXRoIG1hbnkgY2hpbGRyZW4uXG5cbiAgICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIHNpemUgTnVtYmVyIG9mIGNoaWxkcmVuLlxuICAgIEBtZW1iZXIgY2hpbGRyZW4gQXJyYXkgb2YgY2hpbGQgbm9kZXMuXG4qL1xuXG5cbnZhciBBcnJheU5vZGUgPSBmdW5jdGlvbiBBcnJheU5vZGUoZWRpdCwgc2l6ZSwgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBUlJBWSxcbiAgICBlZGl0OiBlZGl0LFxuICAgIHNpemU6IHNpemUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIF9tb2RpZnk6IEFycmF5Tm9kZV9fbW9kaWZ5XG4gIH07XG59O1xuLyoqXG4gICAgSXMgYG5vZGVgIGEgbGVhZiBub2RlP1xuKi9cblxuXG52YXIgaXNMZWFmID0gZnVuY3Rpb24gaXNMZWFmKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgPT09IGVtcHR5IHx8IG5vZGUudHlwZSA9PT0gTEVBRiB8fCBub2RlLnR5cGUgPT09IENPTExJU0lPTjtcbn07XG4vKiBJbnRlcm5hbCBub2RlIG9wZXJhdGlvbnMuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBFeHBhbmQgYW4gaW5kZXhlZCBub2RlIGludG8gYW4gYXJyYXkgbm9kZS5cblxuICBAcGFyYW0gZWRpdCBDdXJyZW50IGVkaXQuXG4gICAgQHBhcmFtIGZyYWcgSW5kZXggb2YgYWRkZWQgY2hpbGQuXG4gICAgQHBhcmFtIGNoaWxkIEFkZGVkIGNoaWxkLlxuICAgIEBwYXJhbSBtYXNrIEluZGV4IG5vZGUgbWFzayBiZWZvcmUgY2hpbGQgYWRkZWQuXG4gICAgQHBhcmFtIHN1Yk5vZGVzIEluZGV4IG5vZGUgY2hpbGRyZW4gYmVmb3JlIGNoaWxkIGFkZGVkLlxuKi9cblxuXG52YXIgZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKGVkaXQsIGZyYWcsIGNoaWxkLCBiaXRtYXAsIHN1Yk5vZGVzKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGJpdCA9IGJpdG1hcDtcbiAgdmFyIGNvdW50ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgYml0OyArK2kpIHtcbiAgICBpZiAoYml0ICYgMSkgYXJyW2ldID0gc3ViTm9kZXNbY291bnQrK107XG4gICAgYml0ID4+Pj0gMTtcbiAgfVxuXG4gIGFycltmcmFnXSA9IGNoaWxkO1xuICByZXR1cm4gQXJyYXlOb2RlKGVkaXQsIGNvdW50ICsgMSwgYXJyKTtcbn07XG4vKipcbiAgICBDb2xsYXBzZSBhbiBhcnJheSBub2RlIGludG8gYSBpbmRleGVkIG5vZGUuXG5cbiAgQHBhcmFtIGVkaXQgQ3VycmVudCBlZGl0LlxuICAgIEBwYXJhbSBjb3VudCBOdW1iZXIgb2YgZWxlbWVudHMgaW4gbmV3IGFycmF5LlxuICAgIEBwYXJhbSByZW1vdmVkIEluZGV4IG9mIHJlbW92ZWQgZWxlbWVudC5cbiAgICBAcGFyYW0gZWxlbWVudHMgQXJyYXkgbm9kZSBjaGlsZHJlbiBiZWZvcmUgcmVtb3ZlLlxuKi9cblxuXG52YXIgcGFjayA9IGZ1bmN0aW9uIHBhY2soZWRpdCwgY291bnQsIHJlbW92ZWQsIGVsZW1lbnRzKSB7XG4gIHZhciBjaGlsZHJlbiA9IG5ldyBBcnJheShjb3VudCAtIDEpO1xuICB2YXIgZyA9IDA7XG4gIHZhciBiaXRtYXAgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChpICE9PSByZW1vdmVkKSB7XG4gICAgICB2YXIgZWxlbSA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICBpZiAoZWxlbSAmJiAhaXNFbXB0eU5vZGUoZWxlbSkpIHtcbiAgICAgICAgY2hpbGRyZW5bZysrXSA9IGVsZW07XG4gICAgICAgIGJpdG1hcCB8PSAxIDw8IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEluZGV4ZWROb2RlKGVkaXQsIGJpdG1hcCwgY2hpbGRyZW4pO1xufTtcbi8qKlxuICAgIE1lcmdlIHR3byBsZWFmIG5vZGVzLlxuXG4gICAgQHBhcmFtIHNoaWZ0IEN1cnJlbnQgc2hpZnQuXG4gICAgQHBhcmFtIGgxIE5vZGUgMSBoYXNoLlxuICAgIEBwYXJhbSBuMSBOb2RlIDEuXG4gICAgQHBhcmFtIGgyIE5vZGUgMiBoYXNoLlxuICAgIEBwYXJhbSBuMiBOb2RlIDIuXG4qL1xuXG5cbnZhciBtZXJnZUxlYXZlcyA9IGZ1bmN0aW9uIG1lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0LCBoMSwgbjEsIGgyLCBuMikge1xuICBpZiAoaDEgPT09IGgyKSByZXR1cm4gQ29sbGlzaW9uKGVkaXQsIGgxLCBbbjIsIG4xXSk7XG4gIHZhciBzdWJIMSA9IGhhc2hGcmFnbWVudChzaGlmdCwgaDEpO1xuICB2YXIgc3ViSDIgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGgyKTtcbiAgcmV0dXJuIEluZGV4ZWROb2RlKGVkaXQsIHRvQml0bWFwKHN1YkgxKSB8IHRvQml0bWFwKHN1YkgyKSwgc3ViSDEgPT09IHN1YkgyID8gW21lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0ICsgU0laRSwgaDEsIG4xLCBoMiwgbjIpXSA6IHN1YkgxIDwgc3ViSDIgPyBbbjEsIG4yXSA6IFtuMiwgbjFdKTtcbn07XG4vKipcbiAgICBVcGRhdGUgYW4gZW50cnkgaW4gYSBjb2xsaXNpb24gbGlzdC5cblxuICAgIEBwYXJhbSBtdXRhdGUgU2hvdWxkIG11dGF0aW9uIGJlIHVzZWQ/XG4gICAgQHBhcmFtIGVkaXQgQ3VycmVudCBlZGl0LlxuICAgIEBwYXJhbSBrZXlFcSBLZXkgY29tcGFyZSBmdW5jdGlvbi5cbiAgICBAcGFyYW0gaGFzaCBIYXNoIG9mIGNvbGxpc2lvbi5cbiAgICBAcGFyYW0gbGlzdCBDb2xsaXNpb24gbGlzdC5cbiAgICBAcGFyYW0gZiBVcGRhdGUgZnVuY3Rpb24uXG4gICAgQHBhcmFtIGsgS2V5IHRvIHVwZGF0ZS5cbiAgICBAcGFyYW0gc2l6ZSBTaXplIHJlZi5cbiovXG5cblxudmFyIHVwZGF0ZUNvbGxpc2lvbkxpc3QgPSBmdW5jdGlvbiB1cGRhdGVDb2xsaXNpb25MaXN0KG11dGF0ZSwgZWRpdCwga2V5RXEsIGgsIGxpc3QsIGYsIGssIHNpemUpIHtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgY2hpbGQgPSBsaXN0W2ldO1xuXG4gICAgaWYgKGtleUVxKGssIGNoaWxkLmtleSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGNoaWxkLnZhbHVlO1xuXG4gICAgICB2YXIgX25ld1ZhbHVlID0gZih2YWx1ZSk7XG5cbiAgICAgIGlmIChfbmV3VmFsdWUgPT09IHZhbHVlKSByZXR1cm4gbGlzdDtcblxuICAgICAgaWYgKF9uZXdWYWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgICAtLXNpemUudmFsdWU7XG4gICAgICAgIHJldHVybiBhcnJheVNwbGljZU91dChtdXRhdGUsIGksIGxpc3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyYXlVcGRhdGUobXV0YXRlLCBpLCBMZWFmKGVkaXQsIGgsIGssIF9uZXdWYWx1ZSksIGxpc3QpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBuZXdWYWx1ZSA9IGYoKTtcbiAgaWYgKG5ld1ZhbHVlID09PSBub3RoaW5nKSByZXR1cm4gbGlzdDtcbiAgKytzaXplLnZhbHVlO1xuICByZXR1cm4gYXJyYXlVcGRhdGUobXV0YXRlLCBsZW4sIExlYWYoZWRpdCwgaCwgaywgbmV3VmFsdWUpLCBsaXN0KTtcbn07XG5cbnZhciBjYW5FZGl0Tm9kZSA9IGZ1bmN0aW9uIGNhbkVkaXROb2RlKGVkaXQsIG5vZGUpIHtcbiAgcmV0dXJuIGVkaXQgPT09IG5vZGUuZWRpdDtcbn07XG4vKiBFZGl0aW5nXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cbnZhciBMZWFmX19tb2RpZnkgPSBmdW5jdGlvbiBMZWFmX19tb2RpZnkoZWRpdCwga2V5RXEsIHNoaWZ0LCBmLCBoLCBrLCBzaXplKSB7XG4gIGlmIChrZXlFcShrLCB0aGlzLmtleSkpIHtcbiAgICB2YXIgX3YgPSBmKHRoaXMudmFsdWUpO1xuXG4gICAgaWYgKF92ID09PSB0aGlzLnZhbHVlKSByZXR1cm4gdGhpcztlbHNlIGlmIChfdiA9PT0gbm90aGluZykge1xuICAgICAgLS1zaXplLnZhbHVlO1xuICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH1cblxuICAgIGlmIChjYW5FZGl0Tm9kZShlZGl0LCB0aGlzKSkge1xuICAgICAgdGhpcy52YWx1ZSA9IF92O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIExlYWYoZWRpdCwgaCwgaywgX3YpO1xuICB9XG5cbiAgdmFyIHYgPSBmKCk7XG4gIGlmICh2ID09PSBub3RoaW5nKSByZXR1cm4gdGhpcztcbiAgKytzaXplLnZhbHVlO1xuICByZXR1cm4gbWVyZ2VMZWF2ZXMoZWRpdCwgc2hpZnQsIHRoaXMuaGFzaCwgdGhpcywgaCwgTGVhZihlZGl0LCBoLCBrLCB2KSk7XG59O1xuXG52YXIgQ29sbGlzaW9uX19tb2RpZnkgPSBmdW5jdGlvbiBDb2xsaXNpb25fX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQsIGYsIGgsIGssIHNpemUpIHtcbiAgaWYgKGggPT09IHRoaXMuaGFzaCkge1xuICAgIHZhciBjYW5FZGl0ID0gY2FuRWRpdE5vZGUoZWRpdCwgdGhpcyk7XG4gICAgdmFyIGxpc3QgPSB1cGRhdGVDb2xsaXNpb25MaXN0KGNhbkVkaXQsIGVkaXQsIGtleUVxLCB0aGlzLmhhc2gsIHRoaXMuY2hpbGRyZW4sIGYsIGssIHNpemUpO1xuICAgIGlmIChsaXN0ID09PSB0aGlzLmNoaWxkcmVuKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gbGlzdC5sZW5ndGggPiAxID8gQ29sbGlzaW9uKGVkaXQsIHRoaXMuaGFzaCwgbGlzdCkgOiBsaXN0WzBdOyAvLyBjb2xsYXBzZSBzaW5nbGUgZWxlbWVudCBjb2xsaXNpb24gbGlzdFxuICB9XG5cbiAgdmFyIHYgPSBmKCk7XG4gIGlmICh2ID09PSBub3RoaW5nKSByZXR1cm4gdGhpcztcbiAgKytzaXplLnZhbHVlO1xuICByZXR1cm4gbWVyZ2VMZWF2ZXMoZWRpdCwgc2hpZnQsIHRoaXMuaGFzaCwgdGhpcywgaCwgTGVhZihlZGl0LCBoLCBrLCB2KSk7XG59O1xuXG52YXIgSW5kZXhlZE5vZGVfX21vZGlmeSA9IGZ1bmN0aW9uIEluZGV4ZWROb2RlX19tb2RpZnkoZWRpdCwga2V5RXEsIHNoaWZ0LCBmLCBoLCBrLCBzaXplKSB7XG4gIHZhciBtYXNrID0gdGhpcy5tYXNrO1xuICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICB2YXIgZnJhZyA9IGhhc2hGcmFnbWVudChzaGlmdCwgaCk7XG4gIHZhciBiaXQgPSB0b0JpdG1hcChmcmFnKTtcbiAgdmFyIGluZHggPSBmcm9tQml0bWFwKG1hc2ssIGJpdCk7XG4gIHZhciBleGlzdHMgPSBtYXNrICYgYml0O1xuICB2YXIgY3VycmVudCA9IGV4aXN0cyA/IGNoaWxkcmVuW2luZHhdIDogZW1wdHk7XG5cbiAgdmFyIGNoaWxkID0gY3VycmVudC5fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCArIFNJWkUsIGYsIGgsIGssIHNpemUpO1xuXG4gIGlmIChjdXJyZW50ID09PSBjaGlsZCkgcmV0dXJuIHRoaXM7XG4gIHZhciBjYW5FZGl0ID0gY2FuRWRpdE5vZGUoZWRpdCwgdGhpcyk7XG4gIHZhciBiaXRtYXAgPSBtYXNrO1xuICB2YXIgbmV3Q2hpbGRyZW4gPSB2b2lkIDA7XG5cbiAgaWYgKGV4aXN0cyAmJiBpc0VtcHR5Tm9kZShjaGlsZCkpIHtcbiAgICAvLyByZW1vdmVcbiAgICBiaXRtYXAgJj0gfmJpdDtcbiAgICBpZiAoIWJpdG1hcCkgcmV0dXJuIGVtcHR5O1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPD0gMiAmJiBpc0xlYWYoY2hpbGRyZW5baW5keCBeIDFdKSkgcmV0dXJuIGNoaWxkcmVuW2luZHggXiAxXTsgLy8gY29sbGFwc2VcblxuICAgIG5ld0NoaWxkcmVuID0gYXJyYXlTcGxpY2VPdXQoY2FuRWRpdCwgaW5keCwgY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKCFleGlzdHMgJiYgIWlzRW1wdHlOb2RlKGNoaWxkKSkge1xuICAgIC8vIGFkZFxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPj0gTUFYX0lOREVYX05PREUpIHJldHVybiBleHBhbmQoZWRpdCwgZnJhZywgY2hpbGQsIG1hc2ssIGNoaWxkcmVuKTtcbiAgICBiaXRtYXAgfD0gYml0O1xuICAgIG5ld0NoaWxkcmVuID0gYXJyYXlTcGxpY2VJbihjYW5FZGl0LCBpbmR4LCBjaGlsZCwgY2hpbGRyZW4pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1vZGlmeVxuICAgIG5ld0NoaWxkcmVuID0gYXJyYXlVcGRhdGUoY2FuRWRpdCwgaW5keCwgY2hpbGQsIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmIChjYW5FZGl0KSB7XG4gICAgdGhpcy5tYXNrID0gYml0bWFwO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXdDaGlsZHJlbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbmRleGVkTm9kZShlZGl0LCBiaXRtYXAsIG5ld0NoaWxkcmVuKTtcbn07XG5cbnZhciBBcnJheU5vZGVfX21vZGlmeSA9IGZ1bmN0aW9uIEFycmF5Tm9kZV9fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICB2YXIgY291bnQgPSB0aGlzLnNpemU7XG4gIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gIHZhciBmcmFnID0gaGFzaEZyYWdtZW50KHNoaWZ0LCBoKTtcbiAgdmFyIGNoaWxkID0gY2hpbGRyZW5bZnJhZ107XG5cbiAgdmFyIG5ld0NoaWxkID0gKGNoaWxkIHx8IGVtcHR5KS5fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCArIFNJWkUsIGYsIGgsIGssIHNpemUpO1xuXG4gIGlmIChjaGlsZCA9PT0gbmV3Q2hpbGQpIHJldHVybiB0aGlzO1xuICB2YXIgY2FuRWRpdCA9IGNhbkVkaXROb2RlKGVkaXQsIHRoaXMpO1xuICB2YXIgbmV3Q2hpbGRyZW4gPSB2b2lkIDA7XG5cbiAgaWYgKGlzRW1wdHlOb2RlKGNoaWxkKSAmJiAhaXNFbXB0eU5vZGUobmV3Q2hpbGQpKSB7XG4gICAgLy8gYWRkXG4gICAgKytjb3VudDtcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5VXBkYXRlKGNhbkVkaXQsIGZyYWcsIG5ld0NoaWxkLCBjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAoIWlzRW1wdHlOb2RlKGNoaWxkKSAmJiBpc0VtcHR5Tm9kZShuZXdDaGlsZCkpIHtcbiAgICAvLyByZW1vdmVcbiAgICAtLWNvdW50O1xuICAgIGlmIChjb3VudCA8PSBNSU5fQVJSQVlfTk9ERSkgcmV0dXJuIHBhY2soZWRpdCwgY291bnQsIGZyYWcsIGNoaWxkcmVuKTtcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5VXBkYXRlKGNhbkVkaXQsIGZyYWcsIGVtcHR5LCBjaGlsZHJlbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbW9kaWZ5XG4gICAgbmV3Q2hpbGRyZW4gPSBhcnJheVVwZGF0ZShjYW5FZGl0LCBmcmFnLCBuZXdDaGlsZCwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKGNhbkVkaXQpIHtcbiAgICB0aGlzLnNpemUgPSBjb3VudDtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gQXJyYXlOb2RlKGVkaXQsIGNvdW50LCBuZXdDaGlsZHJlbik7XG59O1xuXG5lbXB0eS5fbW9kaWZ5ID0gZnVuY3Rpb24gKGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICB2YXIgdiA9IGYoKTtcbiAgaWYgKHYgPT09IG5vdGhpbmcpIHJldHVybiBlbXB0eTtcbiAgKytzaXplLnZhbHVlO1xuICByZXR1cm4gTGVhZihlZGl0LCBoLCBrLCB2KTtcbn07XG4vKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG5mdW5jdGlvbiBNYXAoZWRpdGFibGUsIGVkaXQsIGNvbmZpZywgcm9vdCwgc2l6ZSkge1xuICB0aGlzLl9lZGl0YWJsZSA9IGVkaXRhYmxlO1xuICB0aGlzLl9lZGl0ID0gZWRpdDtcbiAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc2l6ZSA9IHNpemU7XG59XG5cbk1hcC5wcm90b3R5cGUuc2V0VHJlZSA9IGZ1bmN0aW9uIChuZXdSb290LCBuZXdTaXplKSB7XG4gIGlmICh0aGlzLl9lZGl0YWJsZSkge1xuICAgIHRoaXMuX3Jvb3QgPSBuZXdSb290O1xuICAgIHRoaXMuX3NpemUgPSBuZXdTaXplO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Jvb3QgPT09IHRoaXMuX3Jvb3QgPyB0aGlzIDogbmV3IE1hcCh0aGlzLl9lZGl0YWJsZSwgdGhpcy5fZWRpdCwgdGhpcy5fY29uZmlnLCBuZXdSb290LCBuZXdTaXplKTtcbn07XG4vKiBRdWVyaWVzXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBhIGN1c3RvbSBgaGFzaGAuXG5cbiAgICBSZXR1cm5zIHRoZSB2YWx1ZSBvciBgYWx0YCBpZiBub25lLlxuKi9cblxuXG52YXIgdHJ5R2V0SGFzaCA9IGhhbXQudHJ5R2V0SGFzaCA9IGZ1bmN0aW9uIChhbHQsIGhhc2gsIGtleSwgbWFwKSB7XG4gIHZhciBub2RlID0gbWFwLl9yb290O1xuICB2YXIgc2hpZnQgPSAwO1xuICB2YXIga2V5RXEgPSBtYXAuX2NvbmZpZy5rZXlFcTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICBjYXNlIExFQUY6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4ga2V5RXEoa2V5LCBub2RlLmtleSkgPyBub2RlLnZhbHVlIDogYWx0O1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgQ09MTElTSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKGhhc2ggPT09IG5vZGUuaGFzaCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICBpZiAoa2V5RXEoa2V5LCBjaGlsZC5rZXkpKSByZXR1cm4gY2hpbGQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIElOREVYOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGZyYWcgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGhhc2gpO1xuICAgICAgICAgIHZhciBiaXQgPSB0b0JpdG1hcChmcmFnKTtcblxuICAgICAgICAgIGlmIChub2RlLm1hc2sgJiBiaXQpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuW2Zyb21CaXRtYXAobm9kZS5tYXNrLCBiaXQpXTtcbiAgICAgICAgICAgIHNoaWZ0ICs9IFNJWkU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYWx0O1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgQVJSQVk6XG4gICAgICAgIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZHJlbltoYXNoRnJhZ21lbnQoc2hpZnQsIGhhc2gpXTtcblxuICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICBzaGlmdCArPSBTSVpFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYWx0O1xuICAgIH1cbiAgfVxufTtcblxuTWFwLnByb3RvdHlwZS50cnlHZXRIYXNoID0gZnVuY3Rpb24gKGFsdCwgaGFzaCwga2V5KSB7XG4gIHJldHVybiB0cnlHZXRIYXNoKGFsdCwgaGFzaCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgdHJ5R2V0SGFzaGBcbiovXG5cblxudmFyIHRyeUdldCA9IGhhbXQudHJ5R2V0ID0gZnVuY3Rpb24gKGFsdCwga2V5LCBtYXApIHtcbiAgcmV0dXJuIHRyeUdldEhhc2goYWx0LCBtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUudHJ5R2V0ID0gZnVuY3Rpb24gKGFsdCwga2V5KSB7XG4gIHJldHVybiB0cnlHZXQoYWx0LCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIExvb2t1cCB0aGUgdmFsdWUgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGEgY3VzdG9tIGBoYXNoYC5cblxuICAgIFJldHVybnMgdGhlIHZhbHVlIG9yIGB1bmRlZmluZWRgIGlmIG5vbmUuXG4qL1xuXG5cbnZhciBnZXRIYXNoID0gaGFtdC5nZXRIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgbWFwKSB7XG4gIHJldHVybiB0cnlHZXRIYXNoKHVuZGVmaW5lZCwgaGFzaCwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5nZXRIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSkge1xuICByZXR1cm4gZ2V0SGFzaChoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIExvb2t1cCB0aGUgdmFsdWUgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG5cbiAgICBAc2VlIGBnZXRgXG4qL1xuXG5cbnZhciBnZXQgPSBoYW10LmdldCA9IGZ1bmN0aW9uIChrZXksIG1hcCkge1xuICByZXR1cm4gdHJ5R2V0SGFzaCh1bmRlZmluZWQsIG1hcC5fY29uZmlnLmhhc2goa2V5KSwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5LCBhbHQpIHtcbiAgcmV0dXJuIHRyeUdldChhbHQsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgRG9lcyBhbiBlbnRyeSBleGlzdCBmb3IgYGtleWAgaW4gYG1hcGA/IFVzZXMgY3VzdG9tIGBoYXNoYC5cbiovXG5cblxudmFyIGhhc0hhc2ggPSBoYW10LmhhcyA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIG1hcCkge1xuICByZXR1cm4gdHJ5R2V0SGFzaChub3RoaW5nLCBoYXNoLCBrZXksIG1hcCkgIT09IG5vdGhpbmc7XG59O1xuXG5NYXAucHJvdG90eXBlLmhhc0hhc2ggPSBmdW5jdGlvbiAoaGFzaCwga2V5KSB7XG4gIHJldHVybiBoYXNIYXNoKGhhc2gsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgRG9lcyBhbiBlbnRyeSBleGlzdCBmb3IgYGtleWAgaW4gYG1hcGA/IFVzZXMgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cbiovXG5cblxudmFyIGhhcyA9IGhhbXQuaGFzID0gZnVuY3Rpb24gKGtleSwgbWFwKSB7XG4gIHJldHVybiBoYXNIYXNoKG1hcC5fY29uZmlnLmhhc2goa2V5KSwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBoYXMoa2V5LCB0aGlzKTtcbn07XG5cbnZhciBkZWZLZXlDb21wYXJlID0gZnVuY3Rpb24gZGVmS2V5Q29tcGFyZSh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5O1xufTtcbi8qKlxuICAgIENyZWF0ZSBhbiBlbXB0eSBtYXAuXG5cbiAgICBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24uXG4qL1xuXG5cbmhhbXQubWFrZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBNYXAoMCwgMCwge1xuICAgIGtleUVxOiBjb25maWcgJiYgY29uZmlnLmtleUVxIHx8IGRlZktleUNvbXBhcmUsXG4gICAgaGFzaDogY29uZmlnICYmIGNvbmZpZy5oYXNoIHx8IGhhc2hcbiAgfSwgZW1wdHksIDApO1xufTtcbi8qKlxuICAgIEVtcHR5IG1hcC5cbiovXG5cblxuaGFtdC5lbXB0eSA9IGhhbXQubWFrZSgpO1xuLyoqXG4gICAgRG9lcyBgbWFwYCBjb250YWluIGFueSBlbGVtZW50cz9cbiovXG5cbnZhciBpc0VtcHR5ID0gaGFtdC5pc0VtcHR5ID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gbWFwICYmICEhaXNFbXB0eU5vZGUobWFwLl9yb290KTtcbn07XG5cbk1hcC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRW1wdHkodGhpcyk7XG59O1xuLyogVXBkYXRlc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgQWx0ZXIgdGhlIHZhbHVlIHN0b3JlZCBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgZnVuY3Rpb24gYGZgIHVzaW5nXG4gICAgY3VzdG9tIGhhc2guXG5cbiAgICBgZmAgaXMgaW52b2tlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlIGZvciBga2AgaWYgaXQgZXhpc3RzLFxuICAgIG9yIG5vIGFyZ3VtZW50cyBpZiBubyBzdWNoIHZhbHVlIGV4aXN0cy4gYG1vZGlmeWAgd2lsbCBhbHdheXMgZWl0aGVyXG4gICAgdXBkYXRlIG9yIGluc2VydCBhIHZhbHVlIGludG8gdGhlIG1hcC5cblxuICAgIFJldHVybnMgYSBtYXAgd2l0aCB0aGUgbW9kaWZpZWQgdmFsdWUuIERvZXMgbm90IGFsdGVyIGBtYXBgLlxuKi9cblxuXG52YXIgbW9kaWZ5SGFzaCA9IGhhbXQubW9kaWZ5SGFzaCA9IGZ1bmN0aW9uIChmLCBoYXNoLCBrZXksIG1hcCkge1xuICB2YXIgc2l6ZSA9IHtcbiAgICB2YWx1ZTogbWFwLl9zaXplXG4gIH07XG5cbiAgdmFyIG5ld1Jvb3QgPSBtYXAuX3Jvb3QuX21vZGlmeShtYXAuX2VkaXRhYmxlID8gbWFwLl9lZGl0IDogTmFOLCBtYXAuX2NvbmZpZy5rZXlFcSwgMCwgZiwgaGFzaCwga2V5LCBzaXplKTtcblxuICByZXR1cm4gbWFwLnNldFRyZWUobmV3Um9vdCwgc2l6ZS52YWx1ZSk7XG59O1xuXG5NYXAucHJvdG90eXBlLm1vZGlmeUhhc2ggPSBmdW5jdGlvbiAoaGFzaCwga2V5LCBmKSB7XG4gIHJldHVybiBtb2RpZnlIYXNoKGYsIGhhc2gsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgQWx0ZXIgdGhlIHZhbHVlIHN0b3JlZCBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgZnVuY3Rpb24gYGZgIHVzaW5nXG4gICAgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cblxuICAgIEBzZWUgYG1vZGlmeUhhc2hgXG4qL1xuXG5cbnZhciBtb2RpZnkgPSBoYW10Lm1vZGlmeSA9IGZ1bmN0aW9uIChmLCBrZXksIG1hcCkge1xuICByZXR1cm4gbW9kaWZ5SGFzaChmLCBtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUubW9kaWZ5ID0gZnVuY3Rpb24gKGtleSwgZikge1xuICByZXR1cm4gbW9kaWZ5KGYsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgU3RvcmUgYHZhbHVlYCBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgY3VzdG9tIGBoYXNoYC5cblxuICAgIFJldHVybnMgYSBtYXAgd2l0aCB0aGUgbW9kaWZpZWQgdmFsdWUuIERvZXMgbm90IGFsdGVyIGBtYXBgLlxuKi9cblxuXG52YXIgc2V0SGFzaCA9IGhhbXQuc2V0SGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIHZhbHVlLCBtYXApIHtcbiAgcmV0dXJuIG1vZGlmeUhhc2goY29uc3RhbnQodmFsdWUpLCBoYXNoLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLnNldEhhc2ggPSBmdW5jdGlvbiAoaGFzaCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc2V0SGFzaChoYXNoLCBrZXksIHZhbHVlLCB0aGlzKTtcbn07XG4vKipcbiAgICBTdG9yZSBgdmFsdWVgIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgc2V0SGFzaGBcbiovXG5cblxudmFyIHNldCA9IGhhbXQuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIG1hcCkge1xuICByZXR1cm4gc2V0SGFzaChtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgdmFsdWUsIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzZXQoa2V5LCB2YWx1ZSwgdGhpcyk7XG59O1xuLyoqXG4gICAgUmVtb3ZlIHRoZSBlbnRyeSBmb3IgYGtleWAgaW4gYG1hcGAuXG5cbiAgICBSZXR1cm5zIGEgbWFwIHdpdGggdGhlIHZhbHVlIHJlbW92ZWQuIERvZXMgbm90IGFsdGVyIGBtYXBgLlxuKi9cblxuXG52YXIgZGVsID0gY29uc3RhbnQobm90aGluZyk7XG5cbnZhciByZW1vdmVIYXNoID0gaGFtdC5yZW1vdmVIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgbWFwKSB7XG4gIHJldHVybiBtb2RpZnlIYXNoKGRlbCwgaGFzaCwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5yZW1vdmVIYXNoID0gTWFwLnByb3RvdHlwZS5kZWxldGVIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSkge1xuICByZXR1cm4gcmVtb3ZlSGFzaChoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIFJlbW92ZSB0aGUgZW50cnkgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG5cbiAgICBAc2VlIGByZW1vdmVIYXNoYFxuKi9cblxuXG52YXIgcmVtb3ZlID0gaGFtdC5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBtYXApIHtcbiAgcmV0dXJuIHJlbW92ZUhhc2gobWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLnJlbW92ZSA9IE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gcmVtb3ZlKGtleSwgdGhpcyk7XG59O1xuLyogTXV0YXRpb25cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICAgIE1hcmsgYG1hcGAgYXMgbXV0YWJsZS5cbiAqL1xuXG5cbnZhciBiZWdpbk11dGF0aW9uID0gaGFtdC5iZWdpbk11dGF0aW9uID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gbmV3IE1hcChtYXAuX2VkaXRhYmxlICsgMSwgbWFwLl9lZGl0ICsgMSwgbWFwLl9jb25maWcsIG1hcC5fcm9vdCwgbWFwLl9zaXplKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuYmVnaW5NdXRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGJlZ2luTXV0YXRpb24odGhpcyk7XG59O1xuLyoqXG4gICAgTWFyayBgbWFwYCBhcyBpbW11dGFibGUuXG4gKi9cblxuXG52YXIgZW5kTXV0YXRpb24gPSBoYW10LmVuZE11dGF0aW9uID0gZnVuY3Rpb24gKG1hcCkge1xuICBtYXAuX2VkaXRhYmxlID0gbWFwLl9lZGl0YWJsZSAmJiBtYXAuX2VkaXRhYmxlIC0gMTtcbiAgcmV0dXJuIG1hcDtcbn07XG5cbk1hcC5wcm90b3R5cGUuZW5kTXV0YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBlbmRNdXRhdGlvbih0aGlzKTtcbn07XG4vKipcbiAgICBNdXRhdGUgYG1hcGAgd2l0aGluIHRoZSBjb250ZXh0IG9mIGBmYC5cbiAgICBAcGFyYW0gZlxuICAgIEBwYXJhbSBtYXAgSEFNVFxuKi9cblxuXG52YXIgbXV0YXRlID0gaGFtdC5tdXRhdGUgPSBmdW5jdGlvbiAoZiwgbWFwKSB7XG4gIHZhciB0cmFuc2llbnQgPSBiZWdpbk11dGF0aW9uKG1hcCk7XG4gIGYodHJhbnNpZW50KTtcbiAgcmV0dXJuIGVuZE11dGF0aW9uKHRyYW5zaWVudCk7XG59O1xuXG5NYXAucHJvdG90eXBlLm11dGF0ZSA9IGZ1bmN0aW9uIChmKSB7XG4gIHJldHVybiBtdXRhdGUoZiwgdGhpcyk7XG59O1xuLyogVHJhdmVyc2FsXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBBcHBseSBhIGNvbnRpbnVhdGlvbi5cbiovXG5cblxudmFyIGFwcGsgPSBmdW5jdGlvbiBhcHBrKGspIHtcbiAgcmV0dXJuIGsgJiYgbGF6eVZpc2l0Q2hpbGRyZW4oa1swXSwga1sxXSwga1syXSwga1szXSwga1s0XSk7XG59O1xuLyoqXG4gICAgUmVjdXJzaXZlbHkgdmlzaXQgYWxsIHZhbHVlcyBzdG9yZWQgaW4gYW4gYXJyYXkgb2Ygbm9kZXMgbGF6aWx5LlxuKi9cblxuXG52YXIgbGF6eVZpc2l0Q2hpbGRyZW4gPSBmdW5jdGlvbiBsYXp5VmlzaXRDaGlsZHJlbihsZW4sIGNoaWxkcmVuLCBpLCBmLCBrKSB7XG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baSsrXTtcbiAgICBpZiAoY2hpbGQgJiYgIWlzRW1wdHlOb2RlKGNoaWxkKSkgcmV0dXJuIGxhenlWaXNpdChjaGlsZCwgZiwgW2xlbiwgY2hpbGRyZW4sIGksIGYsIGtdKTtcbiAgfVxuXG4gIHJldHVybiBhcHBrKGspO1xufTtcbi8qKlxuICAgIFJlY3Vyc2l2ZWx5IHZpc2l0IGFsbCB2YWx1ZXMgc3RvcmVkIGluIGBub2RlYCBsYXppbHkuXG4qL1xuXG5cbnZhciBsYXp5VmlzaXQgPSBmdW5jdGlvbiBsYXp5VmlzaXQobm9kZSwgZiwgaykge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgTEVBRjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBmKG5vZGUpLFxuICAgICAgICByZXN0OiBrXG4gICAgICB9O1xuXG4gICAgY2FzZSBDT0xMSVNJT046XG4gICAgY2FzZSBBUlJBWTpcbiAgICBjYXNlIElOREVYOlxuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIHJldHVybiBsYXp5VmlzaXRDaGlsZHJlbihjaGlsZHJlbi5sZW5ndGgsIGNoaWxkcmVuLCAwLCBmLCBrKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYXBwayhrKTtcbiAgfVxufTtcblxudmFyIERPTkUgPSB7XG4gIGRvbmU6IHRydWVcbn07XG4vKipcbiAgICBKYXZhc2NyaXB0IGl0ZXJhdG9yIG92ZXIgYSBtYXAuXG4qL1xuXG5mdW5jdGlvbiBNYXBJdGVyYXRvcih2KSB7XG4gIHRoaXMudiA9IHY7XG59XG5cbk1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMudikgcmV0dXJuIERPTkU7XG4gIHZhciB2MCA9IHRoaXMudjtcbiAgdGhpcy52ID0gYXBwayh2MC5yZXN0KTtcbiAgcmV0dXJuIHYwO1xufTtcblxuTWFwSXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbi8qKlxuICAgIExhemlseSB2aXNpdCBlYWNoIHZhbHVlIGluIG1hcCB3aXRoIGZ1bmN0aW9uIGBmYC5cbiovXG5cblxudmFyIHZpc2l0ID0gZnVuY3Rpb24gdmlzaXQobWFwLCBmKSB7XG4gIHJldHVybiBuZXcgTWFwSXRlcmF0b3IobGF6eVZpc2l0KG1hcC5fcm9vdCwgZikpO1xufTtcbi8qKlxuICAgIEdldCBhIEphdmFzY3NyaXB0IGl0ZXJhdG9yIG9mIGBtYXBgLlxuXG4gICAgSXRlcmF0ZXMgb3ZlciBgW2tleSwgdmFsdWVdYCBhcnJheXMuXG4qL1xuXG5cbnZhciBidWlsZFBhaXJzID0gZnVuY3Rpb24gYnVpbGRQYWlycyh4KSB7XG4gIHJldHVybiBbeC5rZXksIHgudmFsdWVdO1xufTtcblxudmFyIGVudHJpZXMgPSBoYW10LmVudHJpZXMgPSBmdW5jdGlvbiAobWFwKSB7XG4gIHJldHVybiB2aXNpdChtYXAsIGJ1aWxkUGFpcnMpO1xufTtcblxuTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gTWFwLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZW50cmllcyh0aGlzKTtcbn07XG4vKipcbiAgICBHZXQgYXJyYXkgb2YgYWxsIGtleXMgaW4gYG1hcGAuXG5cbiAgICBPcmRlciBpcyBub3QgZ3VhcmFudGVlZC5cbiovXG5cblxudmFyIGJ1aWxkS2V5cyA9IGZ1bmN0aW9uIGJ1aWxkS2V5cyh4KSB7XG4gIHJldHVybiB4LmtleTtcbn07XG5cbnZhciBrZXlzID0gaGFtdC5rZXlzID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gdmlzaXQobWFwLCBidWlsZEtleXMpO1xufTtcblxuTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ga2V5cyh0aGlzKTtcbn07XG4vKipcbiAgICBHZXQgYXJyYXkgb2YgYWxsIHZhbHVlcyBpbiBgbWFwYC5cblxuICAgIE9yZGVyIGlzIG5vdCBndWFyYW50ZWVkLCBkdXBsaWNhdGVzIGFyZSBwcmVzZXJ2ZWQuXG4qL1xuXG5cbnZhciBidWlsZFZhbHVlcyA9IGZ1bmN0aW9uIGJ1aWxkVmFsdWVzKHgpIHtcbiAgcmV0dXJuIHgudmFsdWU7XG59O1xuXG52YXIgdmFsdWVzID0gaGFtdC52YWx1ZXMgPSBNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIHZpc2l0KG1hcCwgYnVpbGRWYWx1ZXMpO1xufTtcblxuTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB2YWx1ZXModGhpcyk7XG59O1xuLyogRm9sZFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgVmlzaXQgZXZlcnkgZW50cnkgaW4gdGhlIG1hcCwgYWdncmVnYXRpbmcgZGF0YS5cblxuICAgIE9yZGVyIG9mIG5vZGVzIGlzIG5vdCBndWFyYW50ZWVkLlxuXG4gICAgQHBhcmFtIGYgRnVuY3Rpb24gbWFwcGluZyBhY2N1bXVsYXRlZCB2YWx1ZSwgdmFsdWUsIGFuZCBrZXkgdG8gbmV3IHZhbHVlLlxuICAgIEBwYXJhbSB6IFN0YXJ0aW5nIHZhbHVlLlxuICAgIEBwYXJhbSBtIEhBTVRcbiovXG5cblxudmFyIGZvbGQgPSBoYW10LmZvbGQgPSBmdW5jdGlvbiAoZiwgeiwgbSkge1xuICB2YXIgcm9vdCA9IG0uX3Jvb3Q7XG4gIGlmIChyb290LnR5cGUgPT09IExFQUYpIHJldHVybiBmKHosIHJvb3QudmFsdWUsIHJvb3Qua2V5KTtcbiAgdmFyIHRvVmlzaXQgPSBbcm9vdC5jaGlsZHJlbl07XG4gIHZhciBjaGlsZHJlbiA9IHZvaWQgMDtcblxuICB3aGlsZSAoY2hpbGRyZW4gPSB0b1Zpc2l0LnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjspIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2krK107XG5cbiAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC50eXBlKSB7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBMRUFGKSB6ID0gZih6LCBjaGlsZC52YWx1ZSwgY2hpbGQua2V5KTtlbHNlIHRvVmlzaXQucHVzaChjaGlsZC5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHo7XG59O1xuXG5NYXAucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbiAoZiwgeikge1xuICByZXR1cm4gZm9sZChmLCB6LCB0aGlzKTtcbn07XG4vKipcbiAgICBWaXNpdCBldmVyeSBlbnRyeSBpbiB0aGUgbWFwLCBhZ2dyZWdhdGluZyBkYXRhLlxuXG4gICAgT3JkZXIgb2Ygbm9kZXMgaXMgbm90IGd1YXJhbnRlZWQuXG5cbiAgICBAcGFyYW0gZiBGdW5jdGlvbiBpbnZva2VkIHdpdGggdmFsdWUgYW5kIGtleVxuICAgIEBwYXJhbSBtYXAgSEFNVFxuKi9cblxuXG52YXIgZm9yRWFjaCA9IGhhbXQuZm9yRWFjaCA9IGZ1bmN0aW9uIChmLCBtYXApIHtcbiAgcmV0dXJuIGZvbGQoZnVuY3Rpb24gKF8sIHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gZih2YWx1ZSwga2V5LCBtYXApO1xuICB9LCBudWxsLCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGYpIHtcbiAgcmV0dXJuIGZvckVhY2goZiwgdGhpcyk7XG59O1xuLyogQWdncmVnYXRlXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBHZXQgdGhlIG51bWJlciBvZiBlbnRyaWVzIGluIGBtYXBgLlxuKi9cblxuXG52YXIgY291bnQgPSBoYW10LmNvdW50ID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gbWFwLl9zaXplO1xufTtcblxuTWFwLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNvdW50KHRoaXMpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsICdzaXplJywge1xuICBnZXQ6IE1hcC5wcm90b3R5cGUuY291bnRcbn0pO1xuLyogRXhwb3J0XG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pZiAoIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaGFtdDtcbn0gZWxzZSB7XG4gIHVuZGVmaW5lZC5oYW10ID0gaGFtdDtcbn1cbn0pO1xuXG5jbGFzcyBCdWlsdEluTWFwIHtcbiAgY29uc3RydWN0b3IoZXhpc3RpbmcpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWFwXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKGV4aXN0aW5nID09PSBudWxsIHx8IGV4aXN0aW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleGlzdGluZy5lbnRyaWVzKCkpO1xuICB9XG5cbiAga2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmtleXMoKTtcbiAgfVxuXG4gIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5lbnRyaWVzKCk7XG4gIH1cblxuICBnZXQoaykge1xuICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KGspO1xuICB9XG5cbiAgaGFzKGspIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrKTtcbiAgfVxuXG4gIHNldChrLCB2KSB7XG4gICAgdGhpcy5fbWFwLnNldChrLCB2KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKGspIHtcbiAgICB0aGlzLl9tYXAuZGVsZXRlKGspO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gcGVyc2lzdGVudE1hcCh0aGlzKTtcbiAgfVxuXG4gIHRvTWFwKCkge1xuICAgIHJldHVybiBuZXcgTWFwKHRoaXMuX21hcCk7XG4gIH1cblxufVxuXG5jbGFzcyBIYXNoQXJyYXlNYXBwZWRUcmllTWFwIHtcbiAgLy8gQmVjYXVzZSBoYW10LmVtcHR5IGlzIG5vdCBhIGZ1bmN0aW9uIHRoZXJlIGlzIG5vIHdheSB0byBpbnRyb2R1Y2UgdHlwZVxuICAvLyBwYXJhbWV0ZXJzIG9uIGl0LCBzbyBlbXB0eSBpcyB0eXBlZCBhcyBIQU1UUGx1c01hcDxzdHJpbmcsIG1peGVkPi5cbiAgLy8gJEZsb3dJc3N1ZVxuICBjb25zdHJ1Y3RvcihleGlzdGluZykge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9oYW10XCIsIGhhbXRfMS5lbXB0eS5iZWdpbk11dGF0aW9uKCkpO1xuXG4gICAgaWYgKGV4aXN0aW5nIGluc3RhbmNlb2YgSGFzaEFycmF5TWFwcGVkVHJpZU1hcCkge1xuICAgICAgY29uc3QgaCA9IGV4aXN0aW5nLl9oYW10LmVuZE11dGF0aW9uKCk7XG5cbiAgICAgIGV4aXN0aW5nLl9oYW10ID0gaC5iZWdpbk11dGF0aW9uKCk7XG4gICAgICB0aGlzLl9oYW10ID0gaC5iZWdpbk11dGF0aW9uKCk7XG4gICAgfSBlbHNlIGlmIChleGlzdGluZykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgZXhpc3RpbmcuZW50cmllcygpKSB7XG4gICAgICAgIHRoaXMuX2hhbXQuc2V0KGssIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhbXQua2V5cygpO1xuICB9XG5cbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5faGFtdC5lbnRyaWVzKCk7XG4gIH1cblxuICBnZXQoaykge1xuICAgIHJldHVybiB0aGlzLl9oYW10LmdldChrKTtcbiAgfVxuXG4gIGhhcyhrKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhbXQuaGFzKGspO1xuICB9XG5cbiAgc2V0KGssIHYpIHtcbiAgICB0aGlzLl9oYW10LnNldChrLCB2KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKGspIHtcbiAgICB0aGlzLl9oYW10LmRlbGV0ZShrKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIHBlcnNpc3RlbnRNYXAodGhpcyk7XG4gIH1cblxuICB0b01hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLl9oYW10KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHBlcnNpc3RlbnRNYXAoZXhpc3RpbmcpIHtcbiAgaWYgKFJlY29pbF9na3goJ3JlY29pbF9oYW10XzIwMjAnKSkge1xuICAgIHJldHVybiBuZXcgSGFzaEFycmF5TWFwcGVkVHJpZU1hcChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBCdWlsdEluTWFwKGV4aXN0aW5nKTtcbiAgfVxufVxuXG52YXIgUmVjb2lsX1BlcnNpc3RlbnRNYXAgPSB7XG4gIHBlcnNpc3RlbnRNYXBcbn07XG5cbnZhciBSZWNvaWxfUGVyc2lzdGVudE1hcF8xID0gUmVjb2lsX1BlcnNpc3RlbnRNYXAucGVyc2lzdGVudE1hcDtcblxudmFyIFJlY29pbF9QZXJzaXN0ZW50TWFwJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgcGVyc2lzdGVudE1hcDogUmVjb2lsX1BlcnNpc3RlbnRNYXBfMVxufSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZmlyc3Qgc2V0IHRoYXQgYXJlIG5vdFxuICogcHJlc2VudCBpbiBhbnkgb2YgdGhlIHN1YnNlcXVlbnQgc2V0cy5cbiAqXG4gKiBOb3RlOiB0aGlzIGlzIHdyaXR0ZW4gcHJvY2VkdXJhbGx5IChpLmUuLCB3aXRob3V0IGZpbHRlclNldCkgZm9yIHBlcmZvcm1hbnRcbiAqIHVzZSBpbiB0aWdodCBsb29wcy5cbiAqL1xuXG5mdW5jdGlvbiBkaWZmZXJlbmNlU2V0cyhzZXQsIC4uLnNldHNXaXRoVmFsdWVzVG9SZW1vdmUpIHtcbiAgY29uc3QgcmV0ID0gbmV3IFNldCgpO1xuXG4gIEZJUlNUOiBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgIGZvciAoY29uc3Qgb3RoZXJTZXQgb2Ygc2V0c1dpdGhWYWx1ZXNUb1JlbW92ZSkge1xuICAgICAgaWYgKG90aGVyU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWUgRklSU1Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG52YXIgUmVjb2lsX2RpZmZlcmVuY2VTZXRzID0gZGlmZmVyZW5jZVNldHM7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IE1hcCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIHRoZSBvcmlnaW5hbCwgYnV0IHdpdGggdGhlXG4gKiB2YWx1ZXMgcmVwbGFjZWQgd2l0aCB0aGUgb3V0cHV0IG9mIHRoZSBnaXZlbiBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtYXBNYXAobWFwLCBjYWxsYmFjaykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgcmVzdWx0LnNldChrZXksIGNhbGxiYWNrKHZhbHVlLCBrZXkpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfbWFwTWFwID0gbWFwTWFwO1xuXG5mdW5jdGlvbiBtYWtlR3JhcGgoKSB7XG4gIHJldHVybiB7XG4gICAgbm9kZURlcHM6IG5ldyBNYXAoKSxcbiAgICBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsb25lR3JhcGgoZ3JhcGgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlRGVwczogUmVjb2lsX21hcE1hcChncmFwaC5ub2RlRGVwcywgcyA9PiBuZXcgU2V0KHMpKSxcbiAgICBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uczogUmVjb2lsX21hcE1hcChncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucywgcyA9PiBuZXcgU2V0KHMpKVxuICB9O1xufSAvLyBOb3RlIHRoYXQgdGhpcyBvdmVyd3JpdGVzIHRoZSBkZXBzIG9mIGV4aXN0aW5nIG5vZGVzLCByYXRoZXIgdGhhbiB1bmlvbmluZ1xuLy8gdGhlIG5ldyBkZXBzIHdpdGggdGhlIG9sZCBkZXBzLlxuXG5cbmZ1bmN0aW9uIG1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaChkZXBzLCBncmFwaCwgLy8gSWYgb2xkZXJHcmFwaCBpcyBnaXZlbiB0aGVuIHdlIHdpbGwgbm90IG92ZXJ3cml0ZSBjaGFuZ2VzIG1hZGUgdG8gdGhlIGdpdmVuXG4vLyBncmFwaCBjb21wYXJlZCB3aXRoIG9sZGVyR3JhcGg6XG5vbGRlckdyYXBoKSB7XG4gIGNvbnN0IHtcbiAgICBub2RlRGVwcyxcbiAgICBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uc1xuICB9ID0gZ3JhcGg7XG4gIGRlcHMuZm9yRWFjaCgodXBzdHJlYW1zLCBkb3duc3RyZWFtKSA9PiB7XG4gICAgY29uc3QgZXhpc3RpbmdVcHN0cmVhbXMgPSBub2RlRGVwcy5nZXQoZG93bnN0cmVhbSk7XG5cbiAgICBpZiAoZXhpc3RpbmdVcHN0cmVhbXMgJiYgb2xkZXJHcmFwaCAmJiBleGlzdGluZ1Vwc3RyZWFtcyAhPT0gb2xkZXJHcmFwaC5ub2RlRGVwcy5nZXQoZG93bnN0cmVhbSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFVwZGF0ZSBub2RlRGVwczpcblxuXG4gICAgbm9kZURlcHMuc2V0KGRvd25zdHJlYW0sIG5ldyBTZXQodXBzdHJlYW1zKSk7IC8vIEFkZCBuZXcgZGVwcyB0byBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uczpcblxuICAgIGNvbnN0IGFkZGVkVXBzdHJlYW1zID0gZXhpc3RpbmdVcHN0cmVhbXMgPT0gbnVsbCA/IHVwc3RyZWFtcyA6IFJlY29pbF9kaWZmZXJlbmNlU2V0cyh1cHN0cmVhbXMsIGV4aXN0aW5nVXBzdHJlYW1zKTtcbiAgICBhZGRlZFVwc3RyZWFtcy5mb3JFYWNoKHVwc3RyZWFtID0+IHtcbiAgICAgIGlmICghbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuaGFzKHVwc3RyZWFtKSkge1xuICAgICAgICBub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5zZXQodXBzdHJlYW0sIG5ldyBTZXQoKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Mobm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KHVwc3RyZWFtKSk7XG4gICAgICBleGlzdGluZy5hZGQoZG93bnN0cmVhbSk7XG4gICAgfSk7IC8vIFJlbW92ZSByZW1vdmVkIGRlcHMgZnJvbSBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uczpcblxuICAgIGlmIChleGlzdGluZ1Vwc3RyZWFtcykge1xuICAgICAgY29uc3QgcmVtb3ZlZFVwc3RyZWFtcyA9IFJlY29pbF9kaWZmZXJlbmNlU2V0cyhleGlzdGluZ1Vwc3RyZWFtcywgdXBzdHJlYW1zKTtcbiAgICAgIHJlbW92ZWRVcHN0cmVhbXMuZm9yRWFjaCh1cHN0cmVhbSA9PiB7XG4gICAgICAgIGlmICghbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuaGFzKHVwc3RyZWFtKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Mobm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KHVwc3RyZWFtKSk7XG4gICAgICAgIGV4aXN0aW5nLmRlbGV0ZShkb3duc3RyZWFtKTtcblxuICAgICAgICBpZiAoZXhpc3Rpbmcuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zLmRlbGV0ZSh1cHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZShkZXBlbmRlbmN5TWFwLCBzdG9yZSwgdmVyc2lvbikge1xuICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUsIF9zdG9yZVN0YXRlJHByZXZpb3VzVCwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMiwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMztcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICBpZiAoISh2ZXJzaW9uID09PSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb24gfHwgdmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9IHN0b3JlU3RhdGUubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5leHRUcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRuZXh0VHJlZS52ZXJzaW9uKSB8fCB2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVC52ZXJzaW9uKSkpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyaWVkIHRvIHNhdmUgZGVwZW5kZW5jaWVzIHRvIGEgZGlzY2FyZGVkIHRyZWUnKTtcbiAgfSAvLyBNZXJnZSB0aGUgZGVwZW5kZW5jaWVzIGRpc2NvdmVyZWQgaW50byB0aGUgc3RvcmUncyBkZXBlbmRlbmN5IG1hcFxuICAvLyBmb3IgdGhlIHZlcnNpb24gdGhhdCB3YXMgcmVhZDpcblxuXG4gIGNvbnN0IGdyYXBoID0gc3RvcmUuZ2V0R3JhcGgodmVyc2lvbik7XG4gIG1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaChkZXBlbmRlbmN5TWFwLCBncmFwaCk7IC8vIElmIHRoaXMgdmVyc2lvbiBpcyBub3QgdGhlIGxhdGVzdCB2ZXJzaW9uLCBhbHNvIHdyaXRlIHRoZXNlIGRlcGVuZGVuY2llc1xuICAvLyBpbnRvIGxhdGVyIHZlcnNpb25zIGlmIHRoZXkgZG9uJ3QgYWxyZWFkeSBoYXZlIHRoZWlyIG93bjpcblxuICBpZiAodmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRwcmV2aW91c1QyID0gc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJHByZXZpb3VzVDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVDIudmVyc2lvbikpIHtcbiAgICBjb25zdCBjdXJyZW50R3JhcGggPSBzdG9yZS5nZXRHcmFwaChzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb24pO1xuICAgIG1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaChkZXBlbmRlbmN5TWFwLCBjdXJyZW50R3JhcGgsIGdyYXBoKTtcbiAgfVxuXG4gIGlmICh2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVDMgPSBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNUMy52ZXJzaW9uKSB8fCB2ZXJzaW9uID09PSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb24pIHtcbiAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUyO1xuXG4gICAgY29uc3QgbmV4dFZlcnNpb24gPSAoX3N0b3JlU3RhdGUkbmV4dFRyZWUyID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkbmV4dFRyZWUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIudmVyc2lvbjtcblxuICAgIGlmIChuZXh0VmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBuZXh0R3JhcGggPSBzdG9yZS5nZXRHcmFwaChuZXh0VmVyc2lvbik7XG4gICAgICBtZXJnZURlcGVuZGVuY3lNYXBJbnRvR3JhcGgoZGVwZW5kZW5jeU1hcCwgbmV4dEdyYXBoLCBncmFwaCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwKGZyb20sIGludG8pIHtcbiAgZnJvbS5mb3JFYWNoKCh1cHN0cmVhbURlcHMsIGRvd25zdHJlYW1Ob2RlKSA9PiB7XG4gICAgaWYgKCFpbnRvLmhhcyhkb3duc3RyZWFtTm9kZSkpIHtcbiAgICAgIGludG8uc2V0KGRvd25zdHJlYW1Ob2RlLCBuZXcgU2V0KCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcHMgPSBSZWNvaWxfbnVsbHRocm93cyhpbnRvLmdldChkb3duc3RyZWFtTm9kZSkpO1xuICAgIHVwc3RyZWFtRGVwcy5mb3JFYWNoKGRlcCA9PiBkZXBzLmFkZChkZXApKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRvRGVwZW5kZW5jeU1hcChkb3duc3RyZWFtLCB1cHN0cmVhbSwgZGVwZW5kZW5jeU1hcCkge1xuICBpZiAoIWRlcGVuZGVuY3lNYXAuaGFzKGRvd25zdHJlYW0pKSB7XG4gICAgZGVwZW5kZW5jeU1hcC5zZXQoZG93bnN0cmVhbSwgbmV3IFNldCgpKTtcbiAgfVxuXG4gIFJlY29pbF9udWxsdGhyb3dzKGRlcGVuZGVuY3lNYXAuZ2V0KGRvd25zdHJlYW0pKS5hZGQodXBzdHJlYW0pO1xufVxuXG52YXIgUmVjb2lsX0dyYXBoID0ge1xuICBhZGRUb0RlcGVuZGVuY3lNYXAsXG4gIGNsb25lR3JhcGgsXG4gIGdyYXBoOiBtYWtlR3JhcGgsXG4gIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwLFxuICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmVcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5sZXQgbmV4dFRyZWVTdGF0ZVZlcnNpb24gPSAwO1xuXG5jb25zdCBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiA9ICgpID0+IG5leHRUcmVlU3RhdGVWZXJzaW9uKys7XG5cbmxldCBuZXh0U3RvcmVJRCA9IDA7XG5cbmNvbnN0IGdldE5leHRTdG9yZUlEID0gKCkgPT4gbmV4dFN0b3JlSUQrKztcblxubGV0IG5leHRDb21wb25lbnRJRCA9IDA7XG5cbmNvbnN0IGdldE5leHRDb21wb25lbnRJRCA9ICgpID0+IG5leHRDb21wb25lbnRJRCsrO1xuXG52YXIgUmVjb2lsX0tleXMgPSB7XG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uLFxuICBnZXROZXh0U3RvcmVJRCxcbiAgZ2V0TmV4dENvbXBvbmVudElEXG59O1xuXG5jb25zdCB7XG4gIHBlcnNpc3RlbnRNYXA6IHBlcnNpc3RlbnRNYXAkMVxufSA9IFJlY29pbF9QZXJzaXN0ZW50TWFwJDE7XG5cbmNvbnN0IHtcbiAgZ3JhcGhcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb246IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDFcbn0gPSBSZWNvaWxfS2V5cztcblxuZnVuY3Rpb24gbWFrZUVtcHR5VHJlZVN0YXRlKCkge1xuICBjb25zdCB2ZXJzaW9uID0gZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMSgpO1xuICByZXR1cm4ge1xuICAgIHZlcnNpb24sXG4gICAgc3RhdGVJRDogdmVyc2lvbixcbiAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7fSxcbiAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KCksXG4gICAgYXRvbVZhbHVlczogcGVyc2lzdGVudE1hcCQxKCksXG4gICAgbm9udmFsaWRhdGVkQXRvbXM6IHBlcnNpc3RlbnRNYXAkMSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eVN0b3JlU3RhdGUoKSB7XG4gIGNvbnN0IGN1cnJlbnRUcmVlID0gbWFrZUVtcHR5VHJlZVN0YXRlKCk7XG4gIHJldHVybiB7XG4gICAgY3VycmVudFRyZWUsXG4gICAgbmV4dFRyZWU6IG51bGwsXG4gICAgcHJldmlvdXNUcmVlOiBudWxsLFxuICAgIGNvbW1pdERlcHRoOiAwLFxuICAgIGtub3duQXRvbXM6IG5ldyBTZXQoKSxcbiAgICBrbm93blNlbGVjdG9yczogbmV3IFNldCgpLFxuICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQ6IFtdLFxuICAgIHN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVyczogbmV3IFNldCgpLFxuICAgIGdyYXBoc0J5VmVyc2lvbjogbmV3IE1hcCgpLnNldChjdXJyZW50VHJlZS52ZXJzaW9uLCBncmFwaCgpKSxcbiAgICByZXRlbnRpb246IHtcbiAgICAgIHJlZmVyZW5jZUNvdW50czogbmV3IE1hcCgpLFxuICAgICAgbm9kZXNSZXRhaW5lZEJ5Wm9uZTogbmV3IE1hcCgpLFxuICAgICAgcmV0YWluYWJsZXNUb0NoZWNrRm9yUmVsZWFzZTogbmV3IFNldCgpXG4gICAgfSxcbiAgICBub2RlQ2xlYW51cEZ1bmN0aW9uczogbmV3IE1hcCgpXG4gIH07XG59XG5cbnZhciBSZWNvaWxfU3RhdGUgPSB7XG4gIG1ha2VFbXB0eVRyZWVTdGF0ZSxcbiAgbWFrZUVtcHR5U3RvcmVTdGF0ZSxcbiAgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb246IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDFcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5jbGFzcyBSZXRlbnRpb25ab25lIHt9XG5cbmZ1bmN0aW9uIHJldGVudGlvblpvbmUoKSB7XG4gIHJldHVybiBuZXcgUmV0ZW50aW9uWm9uZSgpO1xufVxuXG52YXIgUmVjb2lsX1JldGVudGlvblpvbmUgPSB7XG4gIFJldGVudGlvblpvbmUsXG4gIHJldGVudGlvblpvbmVcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggYnVpbHQtaW4gTWFwcyBhbmQgU2V0cyB3aXRob3V0IG11dGF0aW5nIHRoZW0uXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBzZXRCeUFkZGluZ1RvU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmFkZCh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHNldEJ5RGVsZXRpbmdGcm9tU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmRlbGV0ZSh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5U2V0dGluZ0luTWFwKG1hcCwgaywgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IE1hcChtYXApO1xuICBuZXh0LnNldChrLCB2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5VXBkYXRpbmdJbk1hcChtYXAsIGssIHVwZGF0ZXIpIHtcbiAgY29uc3QgbmV4dCA9IG5ldyBNYXAobWFwKTtcbiAgbmV4dC5zZXQoaywgdXBkYXRlcihuZXh0LmdldChrKSkpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ0Zyb21NYXAobWFwLCBrKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIG5leHQuZGVsZXRlKGspO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcChtYXAsIGtzKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIGtzLmZvckVhY2goayA9PiBuZXh0LmRlbGV0ZShrKSk7XG4gIHJldHVybiBuZXh0O1xufVxuXG52YXIgUmVjb2lsX0NvcHlPbldyaXRlID0ge1xuICBzZXRCeUFkZGluZ1RvU2V0LFxuICBzZXRCeURlbGV0aW5nRnJvbVNldCxcbiAgbWFwQnlTZXR0aW5nSW5NYXAsXG4gIG1hcEJ5VXBkYXRpbmdJbk1hcCxcbiAgbWFwQnlEZWxldGluZ0Zyb21NYXAsXG4gIG1hcEJ5RGVsZXRpbmdNdWx0aXBsZUZyb21NYXBcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGl0ZXJhYmxlIHdob3NlIG91dHB1dCBpcyBnZW5lcmF0ZWQgYnkgcGFzc2luZyB0aGUgaW5wdXRcbiAqIGl0ZXJhYmxlJ3MgdmFsdWVzIHRocm91Z2ggdGhlIGZpbHRlciBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiogZmlsdGVySXRlcmFibGUoaXRlcmFibGUsIHByZWRpY2F0ZSkge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgaXRlcmFibGUpIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCsrKSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWNvaWxfZmlsdGVySXRlcmFibGUgPSBmaWx0ZXJJdGVyYWJsZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIFJldHVybiBhIHByb3h5IG9iamVjdCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYmFzZSBhbmQgZmFjdG9yaWVzIG9iamVjdHMuXG4gKiBUaGUgcHJveHkgd2lsbCBpbmNsdWRlIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBiYXNlIG9iamVjdCBhcy1pcy5cbiAqIFRoZSBmYWN0b3JpZXMgb2JqZWN0IGNvbnRhaW5zIGNhbGxiYWNrcyB0byBvYnRhaW4gdGhlIHZhbHVlcyBvZiB0aGUgcHJvcGVyaWVzXG4gKiBmb3IgaXRzIGtleXMuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIHByb3ZpZGluZyB1c2VycyBhbiBvYmplY3Qgd2hlcmUgc29tZSBwcm9wZXJ0aWVzIG1heSBiZVxuICogbGF6aWx5IGNvbXB1dGVkIG9ubHkgb24gZmlyc3QgYWNjZXNzLlxuICovXG4vLyAkRmxvd0lzc3VlW3VuY2xlYXItdHlwZV1cblxuZnVuY3Rpb24gbGF6eVByb3h5KGJhc2UsIGZhY3Rvcmllcykge1xuICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShiYXNlLCB7XG4gICAgLy8gQ29tcHV0ZSBhbmQgY2FjaGUgbGF6eSBwcm9wZXJ0eSBpZiBub3QgYWxyZWFkeSBkb25lLlxuICAgIGdldDogKHRhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpICYmIHByb3AgaW4gZmFjdG9yaWVzKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGZhY3Rvcmllc1twcm9wXSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH0sXG4gICAgLy8gVGhpcyBtZXRob2QgYWxsb3dzIHVzZXIgdG8gaXRlcmF0ZSBrZXlzIGFzIG5vcm1hbFxuICAgIG93bktleXM6IHRhcmdldCA9PiB7XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICAgIH1cbiAgfSk7IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cblxuICByZXR1cm4gcHJveHk7XG59XG5cbnZhciBSZWNvaWxfbGF6eVByb3h5ID0gbGF6eVByb3h5O1xuXG5jb25zdCB7XG4gIGdldE5vZGU6IGdldE5vZGUkMSxcbiAgZ2V0Tm9kZU1heWJlOiBnZXROb2RlTWF5YmUkMSxcbiAgcmVjb2lsVmFsdWVzRm9yS2V5czogcmVjb2lsVmFsdWVzRm9yS2V5cyQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgUmV0ZW50aW9uWm9uZTogUmV0ZW50aW9uWm9uZSQxXG59ID0gUmVjb2lsX1JldGVudGlvblpvbmU7XG5cbmNvbnN0IHtcbiAgc2V0QnlBZGRpbmdUb1NldDogc2V0QnlBZGRpbmdUb1NldCQxXG59ID0gUmVjb2lsX0NvcHlPbldyaXRlO1xuXG5cblxuXG5cblxuXG4gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCBlbXB0eVNldCA9IE9iamVjdC5mcmVlemUobmV3IFNldCgpKTtcblxuY2xhc3MgUmVhZE9ubHlSZWNvaWxWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJldGVudGlvbkZvck5vZGUoc3RvcmUsIG5vZGVLZXksIHJldGFpbmVkQnkpIHtcbiAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBub2Rlc1JldGFpbmVkQnlab25lXG4gIH0gPSBzdG9yZS5nZXRTdGF0ZSgpLnJldGVudGlvbjtcblxuICBmdW5jdGlvbiBhZGRUb1pvbmUoem9uZSkge1xuICAgIGxldCBzZXQgPSBub2Rlc1JldGFpbmVkQnlab25lLmdldCh6b25lKTtcblxuICAgIGlmICghc2V0KSB7XG4gICAgICBub2Rlc1JldGFpbmVkQnlab25lLnNldCh6b25lLCBzZXQgPSBuZXcgU2V0KCkpO1xuICAgIH1cblxuICAgIHNldC5hZGQobm9kZUtleSk7XG4gIH1cblxuICBpZiAocmV0YWluZWRCeSBpbnN0YW5jZW9mIFJldGVudGlvblpvbmUkMSkge1xuICAgIGFkZFRvWm9uZShyZXRhaW5lZEJ5KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldGFpbmVkQnkpKSB7XG4gICAgZm9yIChjb25zdCB6b25lIG9mIHJldGFpbmVkQnkpIHtcbiAgICAgIGFkZFRvWm9uZSh6b25lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHJldGVudGlvblxuICAgIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlRnJvbVpvbmUoem9uZSkge1xuICAgICAgY29uc3Qgc2V0ID0gcmV0ZW50aW9uLm5vZGVzUmV0YWluZWRCeVpvbmUuZ2V0KHpvbmUpO1xuICAgICAgc2V0ID09PSBudWxsIHx8IHNldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2V0LmRlbGV0ZShub2RlS2V5KTtcblxuICAgICAgaWYgKHNldCAmJiBzZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZS5kZWxldGUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDEpIHtcbiAgICAgIGRlbGV0ZUZyb21ab25lKHJldGFpbmVkQnkpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRhaW5lZEJ5KSkge1xuICAgICAgZm9yIChjb25zdCB6b25lIG9mIHJldGFpbmVkQnkpIHtcbiAgICAgICAgZGVsZXRlRnJvbVpvbmUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgdHJlZVN0YXRlLCBrZXksIHRyaWdnZXIpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKHN0b3JlU3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuaGFzKGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZSQxKGtleSk7XG4gIGNvbnN0IHJldGVudGlvbkNsZWFudXAgPSBpbml0aWFsaXplUmV0ZW50aW9uRm9yTm9kZShzdG9yZSwga2V5LCBub2RlLnJldGFpbmVkQnkpO1xuICBjb25zdCBub2RlQ2xlYW51cCA9IG5vZGUuaW5pdChzdG9yZSwgdHJlZVN0YXRlLCB0cmlnZ2VyKTtcbiAgc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5zZXQoa2V5LCAoKSA9PiB7XG4gICAgbm9kZUNsZWFudXAoKTtcbiAgICByZXRlbnRpb25DbGVhbnVwKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplTm9kZShzdG9yZSwga2V5LCB0cmlnZ2VyKSB7XG4gIGluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlKHN0b3JlLCBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCBrZXksIHRyaWdnZXIpO1xufVxuXG5mdW5jdGlvbiBjbGVhblVwTm9kZShzdG9yZSwga2V5KSB7XG4gIHZhciBfc3RhdGUkbm9kZUNsZWFudXBGdW47XG5cbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAoX3N0YXRlJG5vZGVDbGVhbnVwRnVuID0gc3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRub2RlQ2xlYW51cEZ1biA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJG5vZGVDbGVhbnVwRnVuKCk7XG4gIHN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xufSAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgb2YgYSBub2RlIGFuZCB1cGRhdGUgdGhlIHN0YXRlLlxuLy8gVXBkYXRlIGRlcGVuZGVuY2llcyBhbmQgc3Vic2NyaXB0aW9ucyBmb3Igc2VsZWN0b3JzLlxuLy8gVXBkYXRlIHNhdmVkIHZhbHVlIHZhbGlkYXRpb24gZm9yIGF0b21zLlxuXG5cbmZ1bmN0aW9uIGdldE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGtleSkge1xuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ2dldCcpO1xuICByZXR1cm4gZ2V0Tm9kZSQxKGtleSkuZ2V0KHN0b3JlLCBzdGF0ZSk7XG59IC8vIFBlZWsgYXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgZm9yIGEgbm9kZSB3aXRob3V0IGFueSBldmFsdWF0aW9uIG9yIHN0YXRlIGNoYW5nZVxuXG5cbmZ1bmN0aW9uIHBlZWtOb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgcmV0dXJuIGdldE5vZGUkMShrZXkpLnBlZWsoc3RvcmUsIHN0YXRlKTtcbn0gLy8gV3JpdGUgdmFsdWUgZGlyZWN0bHkgdG8gc3RhdGUgYnlwYXNzaW5nIHRoZSBOb2RlIGludGVyZmFjZSBhcyB0aGUgbm9kZVxuLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG5cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRChzdGF0ZSwga2V5LCBuZXdWYWx1ZSkge1xuICB2YXIgX25vZGUkaW52YWxpZGF0ZTtcblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZU1heWJlJDEoa2V5KTtcbiAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogc3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLmRlbGV0ZShrZXkpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpLnNldChrZXksIG5ld1ZhbHVlKSxcbiAgICBkaXJ0eUF0b21zOiBzZXRCeUFkZGluZ1RvU2V0JDEoc3RhdGUuZGlydHlBdG9tcywga2V5KVxuICB9O1xufSAvLyBSZXR1cm4gdGhlIGRpc2NvdmVyZWQgZGVwZW5kZW5jaWVzIGFuZCB2YWx1ZXMgdG8gYmUgd3JpdHRlbiBieSBzZXR0aW5nXG4vLyBhIG5vZGUgdmFsdWUuIChNdWx0aXBsZSB2YWx1ZXMgbWF5IGJlIHdyaXR0ZW4gZHVlIHRvIHNlbGVjdG9ycyBnZXR0aW5nIHRvXG4vLyBzZXQgdXBzdHJlYW1zOyBkZXBzIG1heSBiZSBkaXNjb3ZlcmVkIGJlY2F1c2Ugb2YgcmVhZHMgaW4gdXBkYXRlciBmdW5jdGlvbnMuKVxuXG5cbmZ1bmN0aW9uIHNldE5vZGVWYWx1ZShzdG9yZSwgc3RhdGUsIGtleSwgbmV3VmFsdWUpIHtcbiAgY29uc3Qgbm9kZSA9IGdldE5vZGUkMShrZXkpO1xuXG4gIGlmIChub2RlLnNldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvcihgQXR0ZW1wdCB0byBzZXQgcmVhZC1vbmx5IFJlY29pbFZhbHVlOiAke2tleX1gKTtcbiAgfVxuXG4gIGNvbnN0IHNldCA9IG5vZGUuc2V0OyAvLyBzbyBmbG93IGRvZXNuJ3QgbG9zZSB0aGUgYWJvdmUgcmVmaW5lbWVudC5cblxuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ3NldCcpO1xuICByZXR1cm4gc2V0KHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwZWVrTm9kZUluZm8oc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IGdyYXBoID0gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbik7XG4gIGNvbnN0IHR5cGUgPSBnZXROb2RlJDEoa2V5KS5ub2RlVHlwZTtcbiAgcmV0dXJuIFJlY29pbF9sYXp5UHJveHkoe1xuICAgIHR5cGVcbiAgfSwge1xuICAgIGxvYWRhYmxlOiAoKSA9PiBwZWVrTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwga2V5KSxcbiAgICBpc0FjdGl2ZTogKCkgPT4gc3RvcmVTdGF0ZS5rbm93bkF0b21zLmhhcyhrZXkpIHx8IHN0b3JlU3RhdGUua25vd25TZWxlY3RvcnMuaGFzKGtleSksXG4gICAgaXNTZXQ6ICgpID0+IHR5cGUgPT09ICdzZWxlY3RvcicgPyBmYWxzZSA6IHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSksXG4gICAgaXNNb2RpZmllZDogKCkgPT4gc3RhdGUuZGlydHlBdG9tcy5oYXMoa2V5KSxcbiAgICAvLyBSZXBvcnQgY3VycmVudCBkZXBlbmRlbmNpZXMuICBJZiB0aGUgbm9kZSBoYXNuJ3QgYmVlbiBldmFsdWF0ZWQsIHRoZW5cbiAgICAvLyBkZXBlbmRlbmNpZXMgbWF5IGJlIG1pc3NpbmcgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgZGVwczogKCkgPT4ge1xuICAgICAgdmFyIF9ncmFwaCRub2RlRGVwcyRnZXQ7XG5cbiAgICAgIHJldHVybiByZWNvaWxWYWx1ZXNGb3JLZXlzJDEoKF9ncmFwaCRub2RlRGVwcyRnZXQgPSBncmFwaC5ub2RlRGVwcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVEZXBzJGdldCAhPT0gdm9pZCAwID8gX2dyYXBoJG5vZGVEZXBzJGdldCA6IFtdKTtcbiAgICB9LFxuICAgIC8vIFJlcG9ydHMgYWxsIFwiY3VycmVudFwiIHN1YnNjcmliZXJzLiAgRXZhbHVhdGluZyBvdGhlciBub2RlcyBvclxuICAgIC8vIHByZXZpb3VzIGluLXByb2dyZXNzIGFzeW5jIGV2YWx1YXRpb25zIG1heSBpbnRyb2R1Y2UgbmV3IHN1YnNjcmliZXJzLlxuICAgIHN1YnNjcmliZXJzOiAoKSA9PiB7XG4gICAgICB2YXIgX3N0b3JlU3RhdGUkbm9kZVRvQ29tLCBfc3RvcmVTdGF0ZSRub2RlVG9Db20yO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBub2RlczogcmVjb2lsVmFsdWVzRm9yS2V5cyQxKFJlY29pbF9maWx0ZXJJdGVyYWJsZShnZXREb3duc3RyZWFtTm9kZXMoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KFtrZXldKSksIG5vZGVLZXkgPT4gbm9kZUtleSAhPT0ga2V5KSksXG4gICAgICAgIGNvbXBvbmVudHM6IFJlY29pbF9tYXBJdGVyYWJsZSgoX3N0b3JlU3RhdGUkbm9kZVRvQ29tID0gKF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPSBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIudmFsdWVzKCkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5vZGVUb0NvbSAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbm9kZVRvQ29tIDogW10sIChbbmFtZV0pID0+ICh7XG4gICAgICAgICAgbmFtZVxuICAgICAgICB9KSlcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn0gLy8gRmluZCBhbGwgb2YgdGhlIHJlY3Vyc2l2ZWx5IGRlcGVuZGVudCBub2Rlc1xuXG5cbmZ1bmN0aW9uIGdldERvd25zdHJlYW1Ob2RlcyhzdG9yZSwgc3RhdGUsIGtleXMpIHtcbiAgY29uc3QgdmlzaXRlZE5vZGVzID0gbmV3IFNldCgpO1xuICBjb25zdCB2aXNpdGluZ05vZGVzID0gQXJyYXkuZnJvbShrZXlzKTtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaChzdGF0ZS52ZXJzaW9uKTtcblxuICBmb3IgKGxldCBrZXkgPSB2aXNpdGluZ05vZGVzLnBvcCgpOyBrZXk7IGtleSA9IHZpc2l0aW5nTm9kZXMucG9wKCkpIHtcbiAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgdmlzaXRlZE5vZGVzLmFkZChrZXkpO1xuICAgIGNvbnN0IHN1YnNjcmliZWROb2RlcyA9IChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVUb05vZGVTdWJzICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgOiBlbXB0eVNldDtcblxuICAgIGZvciAoY29uc3QgZG93bnN0cmVhbU5vZGUgb2Ygc3Vic2NyaWJlZE5vZGVzKSB7XG4gICAgICBpZiAoIXZpc2l0ZWROb2Rlcy5oYXMoZG93bnN0cmVhbU5vZGUpKSB7XG4gICAgICAgIHZpc2l0aW5nTm9kZXMucHVzaChkb3duc3RyZWFtTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpc2l0ZWROb2Rlcztcbn1cblxudmFyIFJlY29pbF9GdW5jdGlvbmFsQ29yZSA9IHtcbiAgZ2V0Tm9kZUxvYWRhYmxlLFxuICBwZWVrTm9kZUxvYWRhYmxlLFxuICBzZXROb2RlVmFsdWUsXG4gIGluaXRpYWxpemVOb2RlLFxuICBjbGVhblVwTm9kZSxcbiAgc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCxcbiAgcGVla05vZGVJbmZvLFxuICBnZXREb3duc3RyZWFtTm9kZXNcbn07XG5cbnZhciBfY3JlYXRlTXV0YWJsZVNvdXJjZSwgX3VzZU11dGFibGVTb3VyY2UsIF91c2VTeW5jRXh0ZXJuYWxTdG9yZTtcblxuXG5cblxuXG5jb25zdCBjcmVhdGVNdXRhYmxlU291cmNlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfY3JlYXRlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LmNyZWF0ZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF9jcmVhdGVNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfY3JlYXRlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX2NyZWF0ZU11dGFibGVTb3VyY2U7XG5jb25zdCB1c2VNdXRhYmxlU291cmNlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LnVzZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF91c2VNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfdXNlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2U7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdHdnL3JlYWN0LTE4L2Rpc2N1c3Npb25zLzg2XG5cbmNvbnN0IHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlU3luY0V4dGVybmFsU3RvcmUgPSByZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZSkgIT09IG51bGwgJiYgX3VzZVN5bmNFeHRlcm5hbFN0b3JlICE9PSB2b2lkIDAgPyBfdXNlU3luY0V4dGVybmFsU3RvcmUgOiAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxucmVhY3QudW5zdGFibGVfdXNlU3luY0V4dGVybmFsU3RvcmU7XG5cbi8qKlxuICogbW9kZTogVGhlIFJlYWN0IEFQSSBhbmQgYXBwcm9hY2ggdG8gdXNlIGZvciBzeW5jaW5nIHN0YXRlIHdpdGggUmVhY3RcbiAqIGVhcmx5OiBSZS1yZW5kZXJzIGZyb20gUmVjb2lsIHVwZGF0ZXMgb2NjdXI6XG4gKiAgICAxKSBlYXJsaWVyXG4gKiAgICAyKSBpbiBzeW5jIHdpdGggUmVhY3QgdXBkYXRlcyBpbiB0aGUgc2FtZSBiYXRjaFxuICogICAgMykgYmVmb3JlIHRyYW5zYWN0aW9uIG9ic2VydmVycyBpbnN0ZWFkIG9mIGFmdGVyLlxuICogY29uY3VycmVudDogSXMgdGhlIGN1cnJlbnQgbW9kZSBjb21wYXRpYmxlIHdpdGggQ29uY3VycmVudCBNb2RlIGFuZCB1c2VUcmFuc2l0aW9uKClcbiAqL1xuZnVuY3Rpb24gcmVhY3RNb2RlKCkge1xuICAvLyBOT1RFOiBUaGlzIG1vZGUgaXMgY3VycmVudGx5IGJyb2tlbiB3aXRoIHNvbWUgU3VzcGVuc2UgY2FzZXNcbiAgLy8gc2VlIFJlY29pbF9zZWxlY3Rvci10ZXN0LmpzXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfdHJhbnNpdGlvbl9zdXBwb3J0JykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ1RSQU5TSVRJT05fU1VQUE9SVCcsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKFJlY29pbF9na3goJ3JlY29pbF9zeW5jX2V4dGVybmFsX3N0b3JlJykgJiYgdXNlU3luY0V4dGVybmFsU3RvcmUgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlOiAnU1lOQ19FWFRFUk5BTF9TVE9SRScsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbXV0YWJsZV9zb3VyY2UnKSAmJiB1c2VNdXRhYmxlU291cmNlICE9IG51bGwgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy4kZGlzYWJsZVJlY29pbFZhbHVlTXV0YWJsZVNvdXJjZV9URU1QX0hBQ0tfRE9fTk9UX1VTRSkge1xuICAgIHJldHVybiBSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSA/IHtcbiAgICAgIG1vZGU6ICdNVVRBQkxFX1NPVVJDRScsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IHRydWVcbiAgICB9IDoge1xuICAgICAgbW9kZTogJ01VVEFCTEVfU09VUkNFJyxcbiAgICAgIGVhcmx5OiBmYWxzZSxcbiAgICAgIGNvbmN1cnJlbnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSA/IHtcbiAgICBtb2RlOiAnTEVHQUNZJyxcbiAgICBlYXJseTogdHJ1ZSxcbiAgICBjb25jdXJyZW50OiBmYWxzZVxuICB9IDoge1xuICAgIG1vZGU6ICdMRUdBQ1knLFxuICAgIGVhcmx5OiBmYWxzZSxcbiAgICBjb25jdXJyZW50OiBmYWxzZVxuICB9O1xufVxuXG52YXIgUmVjb2lsX1JlYWN0TW9kZSA9IHtcbiAgY3JlYXRlTXV0YWJsZVNvdXJjZSxcbiAgdXNlTXV0YWJsZVNvdXJjZSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUsXG4gIHJlYWN0TW9kZVxufTtcblxuY29uc3Qge1xuICBnZXREb3duc3RyZWFtTm9kZXM6IGdldERvd25zdHJlYW1Ob2RlcyQxLFxuICBnZXROb2RlTG9hZGFibGU6IGdldE5vZGVMb2FkYWJsZSQxLFxuICBzZXROb2RlVmFsdWU6IHNldE5vZGVWYWx1ZSQxXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGdldE5leHRDb21wb25lbnRJRDogZ2V0TmV4dENvbXBvbmVudElEJDFcbn0gPSBSZWNvaWxfS2V5cztcblxuY29uc3Qge1xuICBnZXROb2RlOiBnZXROb2RlJDIsXG4gIGdldE5vZGVNYXliZTogZ2V0Tm9kZU1heWJlJDJcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQxLFxuICBSZWNvaWxWYWx1ZU5vdFJlYWR5OiBSZWNvaWxWYWx1ZU5vdFJlYWR5JDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICByZWFjdE1vZGU6IHJlYWN0TW9kZSQxXG59ID0gUmVjb2lsX1JlYWN0TW9kZTtcblxuY29uc3Qge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxTdGF0ZSQxLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxWYWx1ZVJlYWRPbmx5JDEsXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5cblxuXG5cbmZ1bmN0aW9uIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZShzdG9yZSwge1xuICBrZXlcbn0sIHRyZWVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlLCBfc3RvcmVTdGF0ZSRwcmV2aW91c1Q7XG5cbiAgLy8gUmVhZGluZyBmcm9tIGFuIG9sZGVyIHRyZWUgY2FuIGNhdXNlIGJ1Z3MgYmVjYXVzZSB0aGUgZGVwZW5kZW5jaWVzIHRoYXQgd2VcbiAgLy8gZGlzY292ZXIgZHVyaW5nIHRoZSByZWFkIGFyZSBsb3N0LlxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICBpZiAoISh0cmVlU3RhdGUudmVyc2lvbiA9PT0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZS52ZXJzaW9uIHx8IHRyZWVTdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkbmV4dFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlLnZlcnNpb24pIHx8IHRyZWVTdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVC52ZXJzaW9uKSkpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyaWVkIHRvIHJlYWQgZnJvbSBhIGRpc2NhcmRlZCB0cmVlJyk7XG4gIH1cblxuICBjb25zdCBsb2FkYWJsZSA9IGdldE5vZGVMb2FkYWJsZSQxKHN0b3JlLCB0cmVlU3RhdGUsIGtleSk7XG5cbiAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICBsb2FkYWJsZS5jb250ZW50cy5jYXRjaCgoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEhBQ0s6IGludGVyY2VwdCB0aHJvd24gZXJyb3IgaGVyZSB0byBwcmV2ZW50IGFuIHVuY2F1Z2h0IHByb21pc2UgZXhjZXB0aW9uLiBJZGVhbGx5IHRoaXMgd291bGQgaGFwcGVuIGNsb3NlciB0byBzZWxlY3RvclxuICAgICAgICogZXhlY3V0aW9uIChwZXJoYXBzIGludHJvZHVjaW5nIGEgbmV3IEVSUk9SIGNsYXNzIHRvIGJlIHJlc29sdmVkIGJ5IGFzeW5jIHNlbGVjdG9ycyB0aGF0IGFyZSBpbiBhbiBlcnJvciBzdGF0ZSlcbiAgICAgICAqL1xuICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxvYWRhYmxlO1xufVxuXG5mdW5jdGlvbiBhcHBseUF0b21WYWx1ZVdyaXRlcyhhdG9tVmFsdWVzLCB3cml0ZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXRvbVZhbHVlcy5jbG9uZSgpO1xuICB3cml0ZXMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgIGlmICh2LnN0YXRlID09PSAnaGFzVmFsdWUnICYmIHYuY29udGVudHMgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgICAgcmVzdWx0LmRlbGV0ZShrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnNldChrLCB2KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21WYWx1ZU9yVXBkYXRlcihzdG9yZSwgc3RhdGUsIHtcbiAga2V5XG59LCB2YWx1ZU9yVXBkYXRlcikge1xuICBpZiAodHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXBkYXRlciBmb3JtOiBwYXNzIGluIHRoZSBjdXJyZW50IHZhbHVlLiBUaHJvdyBpZiB0aGUgY3VycmVudCB2YWx1ZVxuICAgIC8vIGlzIHVuYXZhaWxhYmxlIChuYW1lbHkgd2hlbiB1cGRhdGluZyBhbiBhc3luYyBzZWxlY3RvciB0aGF0J3NcbiAgICAvLyBwZW5kaW5nIG9yIGVycm9yZWQpOlxuICAgIGNvbnN0IGN1cnJlbnQgPSBnZXROb2RlTG9hZGFibGUkMShzdG9yZSwgc3RhdGUsIGtleSk7XG5cbiAgICBpZiAoY3VycmVudC5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjb2lsVmFsdWVOb3RSZWFkeSQxKGtleSk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50LnN0YXRlID09PSAnaGFzRXJyb3InKSB7XG4gICAgICB0aHJvdyBjdXJyZW50LmNvbnRlbnRzO1xuICAgIH0gLy8gVCBpdHNlbGYgbWF5IGJlIGEgZnVuY3Rpb24sIHNvIG91ciByZWZpbmVtZW50IGlzIG5vdCBzdWZmaWNpZW50OlxuXG5cbiAgICByZXR1cm4gdmFsdWVPclVwZGF0ZXIoY3VycmVudC5jb250ZW50cyk7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZU9yVXBkYXRlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseUFjdGlvbihzdG9yZSwgc3RhdGUsIGFjdGlvbikge1xuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdzZXQnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWUsXG4gICAgICB2YWx1ZU9yVXBkYXRlclxuICAgIH0gPSBhY3Rpb247XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZUZyb21WYWx1ZU9yVXBkYXRlcihzdG9yZSwgc3RhdGUsIHJlY29pbFZhbHVlLCB2YWx1ZU9yVXBkYXRlcik7XG4gICAgY29uc3Qgd3JpdGVzID0gc2V0Tm9kZVZhbHVlJDEoc3RvcmUsIHN0YXRlLCByZWNvaWxWYWx1ZS5rZXksIG5ld1ZhbHVlKTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgbG9hZGFibGVdIG9mIHdyaXRlcy5lbnRyaWVzKCkpIHtcbiAgICAgIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnc2V0TG9hZGFibGUnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbG9hZGFibGVcbiAgICB9ID0gYWN0aW9uO1xuICAgIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSk7XG4gIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdtYXJrTW9kaWZpZWQnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9XG4gICAgfSA9IGFjdGlvbjtcbiAgICBzdGF0ZS5kaXJ0eUF0b21zLmFkZChrZXkpO1xuICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnc2V0VW52YWxpZGF0ZWQnKSB7XG4gICAgdmFyIF9ub2RlJGludmFsaWRhdGU7XG5cbiAgICAvLyBXcml0ZSB2YWx1ZSBkaXJlY3RseSB0byBzdGF0ZSBieXBhc3NpbmcgdGhlIE5vZGUgaW50ZXJmYWNlIGFzIHRoZSBub2RlXG4gICAgLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgdW52YWxpZGF0ZWRWYWx1ZVxuICAgIH0gPSBhY3Rpb247XG4gICAgY29uc3Qgbm9kZSA9IGdldE5vZGVNYXliZSQyKGtleSk7XG4gICAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgICBzdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLnNldChrZXksIHVudmFsaWRhdGVkVmFsdWUpO1xuICAgIHN0YXRlLmRpcnR5QXRvbXMuYWRkKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKGBVbmtub3duIGFjdGlvbiAke2FjdGlvbi50eXBlfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSkge1xuICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScgJiYgbG9hZGFibGUuY29udGVudHMgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQoa2V5LCBsb2FkYWJsZSk7XG4gIH1cblxuICBzdGF0ZS5kaXJ0eUF0b21zLmFkZChrZXkpO1xuICBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5kZWxldGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgYWN0aW9ucykge1xuICBzdG9yZS5yZXBsYWNlU3RhdGUoc3RhdGUgPT4ge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gY29weVRyZWVTdGF0ZShzdGF0ZSk7XG5cbiAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICBhcHBseUFjdGlvbihzdG9yZSwgbmV3U3RhdGUsIGFjdGlvbik7XG4gICAgfVxuXG4gICAgaW52YWxpZGF0ZURvd25zdHJlYW1zKHN0b3JlLCBuZXdTdGF0ZSk7XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwgYWN0aW9uKSB7XG4gIGlmIChiYXRjaFN0YWNrLmxlbmd0aCkge1xuICAgIGNvbnN0IGFjdGlvbnNCeVN0b3JlID0gYmF0Y2hTdGFja1tiYXRjaFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGxldCBhY3Rpb25zID0gYWN0aW9uc0J5U3RvcmUuZ2V0KHN0b3JlKTtcblxuICAgIGlmICghYWN0aW9ucykge1xuICAgICAgYWN0aW9uc0J5U3RvcmUuc2V0KHN0b3JlLCBhY3Rpb25zID0gW10pO1xuICAgIH1cblxuICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIGFwcGx5QWN0aW9uc1RvU3RvcmUoc3RvcmUsIFthY3Rpb25dKTtcbiAgfVxufVxuXG5jb25zdCBiYXRjaFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIGJhdGNoU3RhcnQoKSB7XG4gIGNvbnN0IGFjdGlvbnNCeVN0b3JlID0gbmV3IE1hcCgpO1xuICBiYXRjaFN0YWNrLnB1c2goYWN0aW9uc0J5U3RvcmUpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgW3N0b3JlLCBhY3Rpb25zXSBvZiBhY3Rpb25zQnlTdG9yZSkge1xuICAgICAgYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgYWN0aW9ucyk7XG4gICAgfVxuXG4gICAgY29uc3QgcG9wcGVkID0gYmF0Y2hTdGFjay5wb3AoKTtcblxuICAgIGlmIChwb3BwZWQgIT09IGFjdGlvbnNCeVN0b3JlKSB7XG4gICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ0luY29ycmVjdCBvcmRlciBvZiBiYXRjaCBwb3BwaW5nJyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5VHJlZVN0YXRlKHN0YXRlKSB7XG4gIHJldHVybiB7IC4uLnN0YXRlLFxuICAgIGF0b21WYWx1ZXM6IHN0YXRlLmF0b21WYWx1ZXMuY2xvbmUoKSxcbiAgICBub252YWxpZGF0ZWRBdG9tczogc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuY2xvbmUoKSxcbiAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KHN0YXRlLmRpcnR5QXRvbXMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFsaWRhdGVEb3duc3RyZWFtcyhzdG9yZSwgc3RhdGUpIHtcbiAgLy8gSW5mb3JtIGFueSBub2RlcyB0aGF0IHdlcmUgY2hhbmdlZCBvciBkb3duc3RyZWFtIG9mIGNoYW5nZXMgc28gdGhhdCB0aGV5XG4gIC8vIGNhbiBjbGVhciBvdXQgYW55IGNhY2hlcyBhcyBuZWVkZWQgZHVlIHRvIHRoZSB1cGRhdGU6XG4gIGNvbnN0IGRvd25zdHJlYW1zID0gZ2V0RG93bnN0cmVhbU5vZGVzJDEoc3RvcmUsIHN0YXRlLCBzdGF0ZS5kaXJ0eUF0b21zKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBkb3duc3RyZWFtcykge1xuICAgIHZhciBfZ2V0Tm9kZU1heWJlLCBfZ2V0Tm9kZU1heWJlJGludmFsaWQ7XG5cbiAgICAoX2dldE5vZGVNYXliZSA9IGdldE5vZGVNYXliZSQyKGtleSkpID09PSBudWxsIHx8IF9nZXROb2RlTWF5YmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZ2V0Tm9kZU1heWJlJGludmFsaWQgPSBfZ2V0Tm9kZU1heWJlLmludmFsaWRhdGUpID09PSBudWxsIHx8IF9nZXROb2RlTWF5YmUkaW52YWxpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldE5vZGVNYXliZSRpbnZhbGlkLmNhbGwoX2dldE5vZGVNYXliZSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlY29pbFZhbHVlKHN0b3JlLCByZWNvaWxWYWx1ZSwgdmFsdWVPclVwZGF0ZXIpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXQnLFxuICAgIHJlY29pbFZhbHVlLFxuICAgIHZhbHVlT3JVcGRhdGVyXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlKHN0b3JlLCByZWNvaWxWYWx1ZSwgbG9hZGFibGUpIHtcbiAgaWYgKGxvYWRhYmxlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDEpIHtcbiAgICByZXR1cm4gc2V0UmVjb2lsVmFsdWUoc3RvcmUsIHJlY29pbFZhbHVlLCBsb2FkYWJsZSk7XG4gIH1cblxuICBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCB7XG4gICAgdHlwZTogJ3NldExvYWRhYmxlJyxcbiAgICByZWNvaWxWYWx1ZSxcbiAgICBsb2FkYWJsZTogbG9hZGFibGVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkKHN0b3JlLCByZWNvaWxWYWx1ZSkge1xuICBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCB7XG4gICAgdHlwZTogJ21hcmtNb2RpZmllZCcsXG4gICAgcmVjb2lsVmFsdWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUoc3RvcmUsIHJlY29pbFZhbHVlLCB1bnZhbGlkYXRlZFZhbHVlKSB7XG4gIHF1ZXVlT3JQZXJmb3JtU3RhdGVVcGRhdGUoc3RvcmUsIHtcbiAgICB0eXBlOiAnc2V0VW52YWxpZGF0ZWQnLFxuICAgIHJlY29pbFZhbHVlLFxuICAgIHVudmFsaWRhdGVkVmFsdWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVRvUmVjb2lsVmFsdWUoc3RvcmUsIHtcbiAga2V5XG59LCBjYWxsYmFjaywgY29tcG9uZW50RGVidWdOYW1lID0gbnVsbCkge1xuICBjb25zdCBzdWJJRCA9IGdldE5leHRDb21wb25lbnRJRCQxKCk7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmICghc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmhhcyhrZXkpKSB7XG4gICAgc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLnNldChrZXksIG5ldyBNYXAoKSk7XG4gIH1cblxuICBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpLnNldChzdWJJRCwgW2NvbXBvbmVudERlYnVnTmFtZSAhPT0gbnVsbCAmJiBjb21wb25lbnREZWJ1Z05hbWUgIT09IHZvaWQgMCA/IGNvbXBvbmVudERlYnVnTmFtZSA6ICc8bm90IGNhcHR1cmVkPicsIGNhbGxiYWNrXSk7IC8vIEhhbmRsZSB0aGUgY2FzZSB0aGF0LCBkdXJpbmcgdGhlIHNhbWUgdGljayB0aGF0IHdlIGFyZSBzdWJzY3JpYmluZywgYW4gYXRvbVxuICAvLyBoYXMgYmVlbiB1cGRhdGVkIGJ5IHNvbWUgZWZmZWN0IGhhbmRsZXIuIE90aGVyd2lzZSB3ZSB3aWxsIG1pc3MgdGhlIHVwZGF0ZS5cblxuICBjb25zdCBtb2RlID0gcmVhY3RNb2RlJDEoKTtcblxuICBpZiAobW9kZS5lYXJseSAmJiAobW9kZS5tb2RlID09PSAnTEVHQUNZJyB8fCBtb2RlLm1vZGUgPT09ICdNVVRBQkxFX1NPVVJDRScpKSB7XG4gICAgY29uc3QgbmV4dFRyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlO1xuXG4gICAgaWYgKG5leHRUcmVlICYmIG5leHRUcmVlLmRpcnR5QXRvbXMuaGFzKGtleSkpIHtcbiAgICAgIGNhbGxiYWNrKG5leHRUcmVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlbGVhc2VTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGNvbnN0IHN1YnMgPSByZWxlYXNlU3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmdldChrZXkpO1xuXG4gICAgICBpZiAoc3VicyA9PT0gdW5kZWZpbmVkIHx8ICFzdWJzLmhhcyhzdWJJRCkpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKGBTdWJzY3JpcHRpb24gbWlzc2luZyBhdCByZWxlYXNlIHRpbWUgZm9yIGF0b20gJHtrZXl9LiBUaGlzIGlzIGEgYnVnIGluIFJlY29pbC5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJzLmRlbGV0ZShzdWJJRCk7XG5cbiAgICAgIGlmIChzdWJzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmVsZWFzZVN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUpIHtcbiAgdmFyIF9ub2RlJGNsZWFyQ2FjaGU7XG5cbiAgY29uc3Qge1xuICAgIGN1cnJlbnRUcmVlXG4gIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCBub2RlID0gZ2V0Tm9kZSQyKHJlY29pbFZhbHVlLmtleSk7XG4gIChfbm9kZSRjbGVhckNhY2hlID0gbm9kZS5jbGVhckNhY2hlKSA9PT0gbnVsbCB8fCBfbm9kZSRjbGVhckNhY2hlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRjbGVhckNhY2hlLmNhbGwobm9kZSwgc3RvcmUsIGN1cnJlbnRUcmVlKTtcbn1cblxudmFyIFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZSA9IHtcbiAgUmVjb2lsVmFsdWVSZWFkT25seTogUmVjb2lsVmFsdWVSZWFkT25seSQxLFxuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxTdGF0ZSQxLFxuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUsXG4gIHNldFJlY29pbFZhbHVlLFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlLFxuICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCxcbiAgc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSxcbiAgc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSxcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQxLFxuICBhcHBseUF0b21WYWx1ZVdyaXRlcyxcbiAgLy8gVE9ETyBSZW1vdmUgZXhwb3J0IHdoZW4gZGVwcmVjYXRpbmcgaW5pdGlhbFN0b3JlU3RhdGVfREVQUkVDQVRFRCBpbiBSZWNvaWxSb290XG4gIGJhdGNoU3RhcnQsXG4gIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZSxcbiAgaW52YWxpZGF0ZURvd25zdHJlYW1zLFxuICBjb3B5VHJlZVN0YXRlLFxuICByZWZyZXNoUmVjb2lsVmFsdWUsXG4gIGludmFsaWRhdGVEb3duc3RyZWFtc19GT1JfVEVTVElORzogaW52YWxpZGF0ZURvd25zdHJlYW1zXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8qKlxuICogVGhlIHNvbWVTZXQoKSBtZXRob2QgdGVzdHMgd2hldGhlciBzb21lIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBTZXQgcGFzcyB0aGVcbiAqIHRlc3QgaW1wbGVtZW50ZWQgYnkgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIHNvbWVTZXQoc2V0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBjb25zdCBpdGVyYXRvciA9IHNldC5lbnRyaWVzKCk7XG4gIGxldCBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gIHdoaWxlICghY3VycmVudC5kb25lKSB7XG4gICAgY29uc3QgZW50cnkgPSBjdXJyZW50LnZhbHVlO1xuXG4gICAgaWYgKGNhbGxiYWNrLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGVudHJ5WzBdLCBzZXQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgUmVjb2lsX3NvbWVTZXQgPSBzb21lU2V0O1xuXG5jb25zdCB7XG4gIGNsZWFuVXBOb2RlOiBjbGVhblVwTm9kZSQxXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlOiBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxLFxuICBnZXROb2RlOiBnZXROb2RlJDNcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBSZXRlbnRpb25ab25lOiBSZXRlbnRpb25ab25lJDJcbn0gPSBSZWNvaWxfUmV0ZW50aW9uWm9uZTtcblxuXG5cblxuXG5cblxuIC8vIENvbXBvbmVudHMgdGhhdCBhcmVuJ3QgbW91bnRlZCBhZnRlciBzdXNwZW5kaW5nIGZvciB0aGlzIGxvbmcgd2lsbCBiZSBhc3N1bWVkXG4vLyB0byBiZSBkaXNjYXJkZWQgYW5kIHRoZWlyIHJlc291cmNlcyByZWxlYXNlZC5cblxuXG5jb25zdCBTVVNQRU5TRV9USU1FT1VUX01TID0gMTIwMDAwO1xuY29uc3QgZW1wdHlTZXQkMSA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gcmVsZWFzZVJldGFpbmFibGVzTm93T25DdXJyZW50VHJlZShzdG9yZSwgcmV0YWluYWJsZXMpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyZWVTdGF0ZSA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7XG5cbiAgaWYgKHN0b3JlU3RhdGUubmV4dFRyZWUpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ3JlbGVhc2VOb2Rlc05vd09uQ3VycmVudFRyZWUgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYSBiYXRjaCcpO1xuICAgIHJldHVybjsgLy8gbGVhayBtZW1vcnkgcmF0aGVyIHRoYW4gZXJhc2Ugc29tZXRoaW5nIHRoYXQncyBhYm91dCB0byBiZSB1c2VkLlxuICB9XG5cbiAgY29uc3Qgbm9kZXMgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgaWYgKHIgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDIpIHtcbiAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1JldGFpbmVkQnlab25lKHN0b3JlU3RhdGUsIHIpKSB7XG4gICAgICAgIG5vZGVzLmFkZChuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZXMuYWRkKHIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbGVhc2FibGVOb2RlcyA9IGZpbmRSZWxlYXNhYmxlTm9kZXMoc3RvcmUsIG5vZGVzKTtcblxuICBmb3IgKGNvbnN0IG5vZGUgb2YgcmVsZWFzYWJsZU5vZGVzKSB7XG4gICAgcmVsZWFzZU5vZGUoc3RvcmUsIHRyZWVTdGF0ZSwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFJlbGVhc2FibGVOb2RlcyhzdG9yZSwgc2VhcmNoRnJvbU5vZGVzKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICBjb25zdCBncmFwaCA9IHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKTtcbiAgY29uc3QgcmVsZWFzYWJsZU5vZGVzID0gbmV3IFNldCgpOyAvLyBtdXRhdGVkIHRvIGNvbGxlY3QgYW5zd2VyXG5cbiAgY29uc3Qgbm9uUmVsZWFzYWJsZU5vZGVzID0gbmV3IFNldCgpO1xuICBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIoc2VhcmNoRnJvbU5vZGVzKTtcbiAgcmV0dXJuIHJlbGVhc2FibGVOb2RlcztcblxuICBmdW5jdGlvbiBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIoc2VhcmNoRnJvbU5vZGVzKSB7XG4gICAgY29uc3QgcmVsZWFzYWJsZU5vZGVzRm91bmRUaGlzSXRlcmF0aW9uID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRvd25zdHJlYW1zID0gZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyKHN0b3JlLCB0cmVlU3RhdGUsIHNlYXJjaEZyb21Ob2RlcywgcmVsZWFzYWJsZU5vZGVzLCAvLyBkb24ndCBkZXNjZW5kIGludG8gdGhlc2VcbiAgICBub25SZWxlYXNhYmxlTm9kZXMgLy8gZG9uJ3QgZGVzY2VuZCBpbnRvIHRoZXNlXG4gICAgKTsgLy8gRmluZCB3aGljaCBvZiB0aGUgZG93bnN0cmVhbSBub2RlcyBhcmUgcmVsZWFzYWJsZSBhbmQgd2hpY2ggYXJlIG5vdDpcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBkb3duc3RyZWFtcykge1xuICAgICAgdmFyIF9zdG9yZVN0YXRlJHJldGVudGlvbjtcblxuICAgICAgLy8gTm90IHJlbGVhc2FibGUgaWYgY29uZmlndXJlZCB0byBiZSByZXRhaW5lZCBmb3JldmVyOlxuICAgICAgaWYgKGdldE5vZGUkMyhub2RlKS5yZXRhaW5lZEJ5ID09PSAncmVjb2lsUm9vdCcpIHtcbiAgICAgICAgbm9uUmVsZWFzYWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIE5vdCByZWxlYXNhYmxlIGlmIHJldGFpbmVkIGRpcmVjdGx5IGJ5IGEgY29tcG9uZW50OlxuXG5cbiAgICAgIGlmICgoKF9zdG9yZVN0YXRlJHJldGVudGlvbiA9IHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5nZXQobm9kZSkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJHJldGVudGlvbiAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkcmV0ZW50aW9uIDogMCkgPiAwKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBOb3QgcmVsZWFzYWJsZSBpZiByZXRhaW5lZCBieSBhIHpvbmU6XG5cblxuICAgICAgaWYgKHpvbmVzVGhhdENvdWxkUmV0YWluTm9kZShub2RlKS5zb21lKHogPT4gc3RvcmVTdGF0ZS5yZXRlbnRpb24ucmVmZXJlbmNlQ291bnRzLmdldCh6KSkpIHtcbiAgICAgICAgbm9uUmVsZWFzYWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIE5vdCByZWxlYXNhYmxlIGlmIGl0IGhhcyBhIG5vbi1yZWxlYXNhYmxlIGNoaWxkICh3aGljaCB3aWxsIGFscmVhZHkgYmUgaW5cbiAgICAgIC8vIG5vblJlbGVhc2FibGVOb2RlcyBiZWNhdXNlIHdlIGFyZSBnb2luZyBpbiB0b3BvbG9naWNhbCBvcmRlcik6XG5cblxuICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KG5vZGUpO1xuXG4gICAgICBpZiAobm9kZUNoaWxkcmVuICYmIFJlY29pbF9zb21lU2V0KG5vZGVDaGlsZHJlbiwgY2hpbGQgPT4gbm9uUmVsZWFzYWJsZU5vZGVzLmhhcyhjaGlsZCkpKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZWxlYXNhYmxlTm9kZXMuYWRkKG5vZGUpO1xuICAgICAgcmVsZWFzYWJsZU5vZGVzRm91bmRUaGlzSXRlcmF0aW9uLmFkZChub2RlKTtcbiAgICB9IC8vIElmIHdlIGZvdW5kIGFueSByZWxlYXNhYmxlIG5vZGVzLCB3ZSBuZWVkIHRvIHdhbGsgVVAgZnJvbSB0aG9zZSBub2RlcyB0b1xuICAgIC8vIGZpbmQgd2hldGhlciB0aGVpciBwYXJlbnRzIGNhbiBub3cgYmUgcmVsZWFzZWQgYXMgd2VsbDpcblxuXG4gICAgY29uc3QgcGFyZW50cyA9IG5ldyBTZXQoKTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiByZWxlYXNhYmxlTm9kZXNGb3VuZFRoaXNJdGVyYXRpb24pIHtcbiAgICAgIGZvciAoY29uc3QgcGFyZW50IG9mIChfZ3JhcGgkbm9kZURlcHMkZ2V0ID0gZ3JhcGgubm9kZURlcHMuZ2V0KG5vZGUpKSAhPT0gbnVsbCAmJiBfZ3JhcGgkbm9kZURlcHMkZ2V0ICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZURlcHMkZ2V0IDogZW1wdHlTZXQkMSkge1xuICAgICAgICB2YXIgX2dyYXBoJG5vZGVEZXBzJGdldDtcblxuICAgICAgICBpZiAoIXJlbGVhc2FibGVOb2Rlcy5oYXMocGFyZW50KSkge1xuICAgICAgICAgIHBhcmVudHMuYWRkKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyZW50cy5zaXplKSB7XG4gICAgICBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIocGFyZW50cyk7XG4gICAgfVxuICB9XG59IC8vIENoaWxkcmVuIGJlZm9yZSBwYXJlbnRzXG5cblxuZnVuY3Rpb24gZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyKHN0b3JlLCB0cmVlU3RhdGUsIG5vZGVzLCAvLyBNdXRhYmxlIHNldCBpcyBkZXN0cm95ZWQgaW4gcGxhY2VcbmRvTm90RGVzY2VuZEludG8xLCBkb05vdERlc2NlbmRJbnRvMikge1xuICBjb25zdCBncmFwaCA9IHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKTtcbiAgY29uc3QgYW5zd2VyID0gW107XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG5cbiAgd2hpbGUgKG5vZGVzLnNpemUgPiAwKSB7XG4gICAgdmlzaXQoUmVjb2lsX251bGx0aHJvd3Mobm9kZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gYW5zd2VyO1xuXG4gIGZ1bmN0aW9uIHZpc2l0KG5vZGUpIHtcbiAgICBpZiAoZG9Ob3REZXNjZW5kSW50bzEuaGFzKG5vZGUpIHx8IGRvTm90RGVzY2VuZEludG8yLmhhcyhub2RlKSkge1xuICAgICAgbm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2aXNpdGVkLmhhcyhub2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkcmVuID0gZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KG5vZGUpO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIHZpc2l0KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpdGVkLmFkZChub2RlKTtcbiAgICBub2Rlcy5kZWxldGUobm9kZSk7XG4gICAgYW5zd2VyLnB1c2gobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVsZWFzZU5vZGUoc3RvcmUsIHRyZWVTdGF0ZSwgbm9kZSkge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQXRvbSBlZmZlY3RzLCBpbi1jbG9zdXJlIGNhY2hlcywgZXRjLjpcblxuXG4gIGNsZWFuVXBOb2RlJDEoc3RvcmUsIG5vZGUpOyAvLyBEZWxldGUgZnJvbSBzdG9yZSBzdGF0ZTpcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgc3RvcmVTdGF0ZS5rbm93bkF0b21zLmRlbGV0ZShub2RlKTtcbiAgc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUubm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5kZWxldGUobm9kZSk7XG4gIGNvbnN0IHpvbmVzID0gem9uZXNUaGF0Q291bGRSZXRhaW5Ob2RlKG5vZGUpO1xuXG4gIGZvciAoY29uc3Qgem9uZSBvZiB6b25lcykge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRyZXRlbnRpb24yO1xuXG4gICAgKF9zdG9yZVN0YXRlJHJldGVudGlvbjIgPSBzdG9yZVN0YXRlLnJldGVudGlvbi5ub2Rlc1JldGFpbmVkQnlab25lLmdldCh6b25lKSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcmV0ZW50aW9uMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcmV0ZW50aW9uMi5kZWxldGUobm9kZSk7XG4gIH0gLy8gTm90ZSB0aGF0IHdlIERPIE5PVCBkZWxldGUgZnJvbSBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zIGJlY2F1c2UgdGhpc1xuICAvLyBhbHJlYWR5IGhhcHBlbnMgd2hlbiB0aGUgbGFzdCBjb21wb25lbnQgdGhhdCB3YXMgcmV0YWluaW5nIHRoZSBub2RlIHVubW91bnRzLFxuICAvLyBhbmQgdGhpcyBjb3VsZCBoYXBwZW4gZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGF0LlxuICAvLyBEZWxldGUgZnJvbSBUcmVlU3RhdGUgYW5kIGRlcCBncmFwaDpcblxuXG4gIHRyZWVTdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShub2RlKTtcbiAgdHJlZVN0YXRlLmRpcnR5QXRvbXMuZGVsZXRlKG5vZGUpO1xuICB0cmVlU3RhdGUubm9udmFsaWRhdGVkQXRvbXMuZGVsZXRlKG5vZGUpO1xuICBjb25zdCBncmFwaCA9IHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmdldCh0cmVlU3RhdGUudmVyc2lvbik7XG5cbiAgaWYgKGdyYXBoKSB7XG4gICAgY29uc3QgZGVwcyA9IGdyYXBoLm5vZGVEZXBzLmdldChub2RlKTtcblxuICAgIGlmIChkZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdyYXBoLm5vZGVEZXBzLmRlbGV0ZShub2RlKTtcblxuICAgICAgZm9yIChjb25zdCBkZXAgb2YgZGVwcykge1xuICAgICAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgICAgIChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoZGVwKSkgPT09IG51bGwgfHwgX2dyYXBoJG5vZGVUb05vZGVTdWJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMuZGVsZXRlKG5vZGUpO1xuICAgICAgfVxuICAgIH0gLy8gTm8gbmVlZCB0byBkZWxldGUgc3ViJ3MgZGVwcyBhcyB0aGVyZSBzaG91bGQgYmUgbm8gc3VicyBhdCB0aGlzIHBvaW50LlxuICAgIC8vIEJ1dCBhbiBpbnZhcmlhbnQgd291bGQgcmVxdWlyZSBkZWxldGluZyBub2RlcyBpbiB0b3BvbG9naWNhbCBvcmRlci5cblxuXG4gICAgZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZGVsZXRlKG5vZGUpO1xuICB9IC8vIE5vZGUgY29uZmlnIChmb3IgZmFtaWx5IG1lbWJlcnMgb25seSBhcyB0aGVpciBjb25maWdzIGNhbiBiZSByZWNyZWF0ZWQsIGFuZFxuICAvLyBvbmx5IGlmIHRoZXkgYXJlIG5vdCByZXRhaW5lZCB3aXRoaW4gYW55IG90aGVyIFN0b3Jlcyk6XG5cblxuICBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBub2Rlc1JldGFpbmVkQnlab25lKHN0b3JlU3RhdGUsIHpvbmUpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJHJldGVudGlvbjM7XG5cbiAgcmV0dXJuIChfc3RvcmVTdGF0ZSRyZXRlbnRpb24zID0gc3RvcmVTdGF0ZS5yZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZS5nZXQoem9uZSkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJHJldGVudGlvbjMgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJHJldGVudGlvbjMgOiBlbXB0eVNldCQxO1xufVxuXG5mdW5jdGlvbiB6b25lc1RoYXRDb3VsZFJldGFpbk5vZGUobm9kZSkge1xuICBjb25zdCByZXRhaW5lZEJ5ID0gZ2V0Tm9kZSQzKG5vZGUpLnJldGFpbmVkQnk7XG5cbiAgaWYgKHJldGFpbmVkQnkgPT09IHVuZGVmaW5lZCB8fCByZXRhaW5lZEJ5ID09PSAnY29tcG9uZW50cycgfHwgcmV0YWluZWRCeSA9PT0gJ3JlY29pbFJvb3QnKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDIpIHtcbiAgICByZXR1cm4gW3JldGFpbmVkQnldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXRhaW5lZEJ5OyAvLyBpdCdzIGFuIGFycmF5IG9mIHpvbmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVPclBlcmZvcm1Qb3NzaWJsZVJlbGVhc2VPZlJldGFpbmFibGUoc3RvcmUsIHJldGFpbmFibGUpIHtcbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmIChzdGF0ZS5uZXh0VHJlZSkge1xuICAgIHN0YXRlLnJldGVudGlvbi5yZXRhaW5hYmxlc1RvQ2hlY2tGb3JSZWxlYXNlLmFkZChyZXRhaW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICByZWxlYXNlUmV0YWluYWJsZXNOb3dPbkN1cnJlbnRUcmVlKHN0b3JlLCBuZXcgU2V0KFtyZXRhaW5hYmxlXSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJldGFpbkNvdW50KHN0b3JlLCByZXRhaW5hYmxlLCBkZWx0YSkge1xuICB2YXIgX21hcCRnZXQ7XG5cbiAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWFwID0gc3RvcmUuZ2V0U3RhdGUoKS5yZXRlbnRpb24ucmVmZXJlbmNlQ291bnRzO1xuICBjb25zdCBuZXdDb3VudCA9ICgoX21hcCRnZXQgPSBtYXAuZ2V0KHJldGFpbmFibGUpKSAhPT0gbnVsbCAmJiBfbWFwJGdldCAhPT0gdm9pZCAwID8gX21hcCRnZXQgOiAwKSArIGRlbHRhO1xuXG4gIGlmIChuZXdDb3VudCA9PT0gMCkge1xuICAgIHVwZGF0ZVJldGFpbkNvdW50VG9aZXJvKHN0b3JlLCByZXRhaW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBtYXAuc2V0KHJldGFpbmFibGUsIG5ld0NvdW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVSZXRhaW5Db3VudFRvWmVybyhzdG9yZSwgcmV0YWluYWJsZSkge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXAgPSBzdG9yZS5nZXRTdGF0ZSgpLnJldGVudGlvbi5yZWZlcmVuY2VDb3VudHM7XG4gIG1hcC5kZWxldGUocmV0YWluYWJsZSk7XG4gIHNjaGVkdWxlT3JQZXJmb3JtUG9zc2libGVSZWxlYXNlT2ZSZXRhaW5hYmxlKHN0b3JlLCByZXRhaW5hYmxlKTtcbn1cblxuZnVuY3Rpb24gcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93KHN0b3JlKSB7XG4gIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgcmVsZWFzZVJldGFpbmFibGVzTm93T25DdXJyZW50VHJlZShzdG9yZSwgc3RhdGUucmV0ZW50aW9uLnJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2UpO1xuICBzdGF0ZS5yZXRlbnRpb24ucmV0YWluYWJsZXNUb0NoZWNrRm9yUmVsZWFzZS5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQocikge1xuICAvLyBUaGUgZGVmYXVsdCB3aWxsIGNoYW5nZSBmcm9tICdyZWNvaWxSb290JyB0byAnY29tcG9uZW50cycgaW4gdGhlIGZ1dHVyZS5cbiAgcmV0dXJuIHIgPT09IHVuZGVmaW5lZCA/ICdyZWNvaWxSb290JyA6IHI7XG59XG5cbnZhciBSZWNvaWxfUmV0ZW50aW9uID0ge1xuICBTVVNQRU5TRV9USU1FT1VUX01TLFxuICB1cGRhdGVSZXRhaW5Db3VudCxcbiAgdXBkYXRlUmV0YWluQ291bnRUb1plcm8sXG4gIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdyxcbiAgcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0XG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKlxuICogVGhpcyBpcyB0byBleHBvcnQgZXNzdGllbnRpYWwgZnVuY3Rpb25zIGZyb20gcmVhY3QtZG9tXG4gKiBmb3Igb3VyIHdlYiBidWlsZFxuICovXG5jb25zdCB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzXG59ID0gcmVhY3REb207XG5cbnZhciBSZWFjdEJhdGNoZWRVcGRhdGVzID0ge1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc1xufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICpcbiAqIFRoaXMgaXMgdG8gZXhwb3J0IGVzc3RpZW50aWFsIGZ1bmN0aW9ucyBmcm9tIHJlYWN0LWRvbVxuICogZm9yIG91ciB3ZWIgYnVpbGRcbiAqL1xuLy8gQGZiLW9ubHk6IGNvbnN0IHt1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc30gPSByZXF1aXJlKCdSZWFjdERPTUNvbWV0Jyk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDFcbn0gPSBSZWFjdEJhdGNoZWRVcGRhdGVzOyAvLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX1JlYWN0QmF0Y2hlZFVwZGF0ZXMgPSB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQxXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cbmNvbnN0IHtcbiAgYmF0Y2hTdGFydDogYmF0Y2hTdGFydCQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQyXG59ID0gUmVjb2lsX1JlYWN0QmF0Y2hlZFVwZGF0ZXM7XG5cbmxldCBiYXRjaGVyID0gdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMjsgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuLyoqXG4gKiBTZXRzIHRoZSBwcm92aWRlZCBiYXRjaGVyIGZ1bmN0aW9uIGFzIHRoZSBiYXRjaGVyIGZ1bmN0aW9uIHVzZWQgYnkgUmVjb2lsLlxuICpcbiAqIFNldCB0aGUgYmF0Y2hlciB0byBhIGN1c3RvbSBiYXRjaGVyIGZvciB5b3VyIHJlbmRlcmVyLFxuICogaWYgeW91IHVzZSBhIHJlbmRlcmVyIG90aGVyIHRoYW4gUmVhY3QgRE9NIG9yIFJlYWN0IE5hdGl2ZS5cbiAqL1xuY29uc3Qgc2V0QmF0Y2hlciA9IG5ld0JhdGNoZXIgPT4ge1xuICBiYXRjaGVyID0gbmV3QmF0Y2hlcjtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgYmF0Y2hlciBmdW5jdGlvbi5cbiAqL1xuXG5cbmNvbnN0IGdldEJhdGNoZXIgPSAoKSA9PiBiYXRjaGVyO1xuLyoqXG4gKiBDYWxscyB0aGUgY3VycmVudCBiYXRjaGVyIGZ1bmN0aW9uIGFuZCBwYXNzZXMgdGhlXG4gKiBwcm92aWRlZCBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuXG5cbmNvbnN0IGJhdGNoVXBkYXRlcyA9IGNhbGxiYWNrID0+IHtcbiAgYmF0Y2hlcigoKSA9PiB7XG4gICAgbGV0IGJhdGNoRW5kID0gKCkgPT4gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGJhdGNoRW5kID0gYmF0Y2hTdGFydCQxKCk7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBiYXRjaEVuZCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgUmVjb2lsX0JhdGNoaW5nID0ge1xuICBnZXRCYXRjaGVyLFxuICBzZXRCYXRjaGVyLFxuICBiYXRjaFVwZGF0ZXNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBDb21iaW5lcyBtdWx0aXBsZSBJdGVyYWJsZXMgaW50byBhIHNpbmdsZSBJdGVyYWJsZS5cbiAqIFRyYXZlcnNlcyB0aGUgaW5wdXQgSXRlcmFibGVzIGluIHRoZSBvcmRlciBwcm92aWRlZCBhbmQgbWFpbnRhaW5zIHRoZSBvcmRlclxuICogb2YgdGhlaXIgZWxlbWVudHMuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYFxuICogY29uc3QgciA9IEFycmF5LmZyb20oY29uY2F0SXRlcmFibGVzKFsnYScsICdiJ10sIFsnYyddLCBbJ2QnLCAnZScsICdmJ10pKTtcbiAqIHIgPT0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZiddO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24qIGNvbmNhdEl0ZXJhYmxlcyhpdGVycykge1xuICBmb3IgKGNvbnN0IGl0ZXIgb2YgaXRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiBpdGVyKSB7XG4gICAgICB5aWVsZCB2YWw7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWNvaWxfY29uY2F0SXRlcmFibGVzID0gY29uY2F0SXRlcmFibGVzO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuY29uc3QgaXNTU1IgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbmNvbnN0IGlzUmVhY3ROYXRpdmUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZFxuXG52YXIgUmVjb2lsX0Vudmlyb25tZW50ID0ge1xuICBpc1NTUixcbiAgaXNSZWFjdE5hdGl2ZVxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIENhY2hlcyBhIGZ1bmN0aW9uJ3MgcmVzdWx0cyBiYXNlZCBvbiB0aGUga2V5IHJldHVybmVkIGJ5IHRoZSBwYXNzZWRcbiAqIGhhc2hGdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtZW1vaXplV2l0aEFyZ3NIYXNoKGZuLCBoYXNoRnVuY3Rpb24pIHtcbiAgbGV0IGNhY2hlO1xuXG4gIGNvbnN0IG1lbW9pemVkRm4gPSAoLi4uYXJncykgPT4ge1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgIGNhY2hlID0ge307XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gaGFzaEZ1bmN0aW9uKC4uLmFyZ3MpO1xuXG4gICAgaWYgKCFPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwga2V5KSkge1xuICAgICAgY2FjaGVba2V5XSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVtrZXldO1xuICB9O1xuXG4gIHJldHVybiBtZW1vaXplZEZuO1xufVxuLyoqXG4gKiBDYWNoZXMgYSBmdW5jdGlvbidzIHJlc3VsdHMgYmFzZWQgb24gYSBjb21wYXJpc29uIG9mIHRoZSBhcmd1bWVudHMuXG4gKiBPbmx5IGNhY2hlcyB0aGUgbGFzdCByZXR1cm4gb2YgdGhlIGZ1bmN0aW9uLlxuICogRGVmYXVsdHMgdG8gcmVmZXJlbmNlIGVxdWFsaXR5XG4gKi9cblxuXG5mdW5jdGlvbiBtZW1vaXplT25lV2l0aEFyZ3NIYXNoKGZuLCBoYXNoRnVuY3Rpb24pIHtcbiAgbGV0IGxhc3RLZXk7XG4gIGxldCBsYXN0UmVzdWx0OyAvLyBicmVha2luZyBjYWNoZSB3aGVuIGFyZ3VtZW50cyBjaGFuZ2VcblxuICBjb25zdCBtZW1vaXplZEZuID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBrZXkgPSBoYXNoRnVuY3Rpb24oLi4uYXJncyk7XG5cbiAgICBpZiAobGFzdEtleSA9PT0ga2V5KSB7XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG5cbiAgICBsYXN0S2V5ID0ga2V5O1xuICAgIGxhc3RSZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gbWVtb2l6ZWRGbjtcbn1cbi8qKlxuICogQ2FjaGVzIGEgZnVuY3Rpb24ncyByZXN1bHRzIGJhc2VkIG9uIGEgY29tcGFyaXNvbiBvZiB0aGUgYXJndW1lbnRzLlxuICogT25seSBjYWNoZXMgdGhlIGxhc3QgcmV0dXJuIG9mIHRoZSBmdW5jdGlvbi5cbiAqIERlZmF1bHRzIHRvIHJlZmVyZW5jZSBlcXVhbGl0eVxuICovXG5cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbihmbiwgaGFzaEZ1bmN0aW9uKSB7XG4gIGxldCBsYXN0S2V5O1xuICBsZXQgbGFzdFJlc3VsdDsgLy8gYnJlYWtpbmcgY2FjaGUgd2hlbiBhcmd1bWVudHMgY2hhbmdlXG5cbiAgY29uc3QgbWVtb2l6ZWRGbiA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gaGFzaEZ1bmN0aW9uKC4uLmFyZ3MpO1xuXG4gICAgaWYgKGxhc3RLZXkgPT09IGtleSkge1xuICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuXG4gICAgbGFzdEtleSA9IGtleTtcbiAgICBsYXN0UmVzdWx0ID0gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG5cbiAgY29uc3QgaW52YWxpZGF0ZSA9ICgpID0+IHtcbiAgICBsYXN0S2V5ID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gW21lbW9pemVkRm4sIGludmFsaWRhdGVdO1xufVxuXG52YXIgUmVjb2lsX01lbW9pemUgPSB7XG4gIG1lbW9pemVXaXRoQXJnc0hhc2gsXG4gIG1lbW9pemVPbmVXaXRoQXJnc0hhc2gsXG4gIG1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb25cbn07XG5cbmNvbnN0IHtcbiAgYmF0Y2hVcGRhdGVzOiBiYXRjaFVwZGF0ZXMkMVxufSA9IFJlY29pbF9CYXRjaGluZztcblxuY29uc3Qge1xuICBpbml0aWFsaXplTm9kZTogaW5pdGlhbGl6ZU5vZGUkMSxcbiAgcGVla05vZGVJbmZvOiBwZWVrTm9kZUluZm8kMVxufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBncmFwaDogZ3JhcGgkMVxufSA9IFJlY29pbF9HcmFwaDtcblxuY29uc3Qge1xuICBnZXROZXh0U3RvcmVJRDogZ2V0TmV4dFN0b3JlSUQkMVxufSA9IFJlY29pbF9LZXlzO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMSxcbiAgcmVjb2lsVmFsdWVzOiByZWNvaWxWYWx1ZXMkMSxcbiAgcmVjb2lsVmFsdWVzRm9yS2V5czogcmVjb2lsVmFsdWVzRm9yS2V5cyQyXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQyLFxuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGU6IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQxLFxuICBzZXRSZWNvaWxWYWx1ZTogc2V0UmVjb2lsVmFsdWUkMSxcbiAgc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZTogc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHVwZGF0ZVJldGFpbkNvdW50OiB1cGRhdGVSZXRhaW5Db3VudCQxXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbjogZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMixcbiAgbWFrZUVtcHR5U3RvcmVTdGF0ZTogbWFrZUVtcHR5U3RvcmVTdGF0ZSQxXG59ID0gUmVjb2lsX1N0YXRlO1xuXG5cblxuY29uc3Qge1xuICBpc1NTUjogaXNTU1IkMVxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbjogbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbiQxXG59ID0gUmVjb2lsX01lbW9pemU7XG5cblxuXG4gLy8gT3BhcXVlIGF0IHRoaXMgc3VyZmFjZSBiZWNhdXNlIGl0J3MgcGFydCBvZiB0aGUgcHVibGljIEFQSSBmcm9tIGhlcmUuXG5cblxuY29uc3QgcmV0YWluV2FybmluZyA9IGBcblJlY29pbCBTbmFwc2hvdHMgb25seSBsYXN0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrIHRoZXkgYXJlIHByb3ZpZGVkIHRvLiBUbyBrZWVwIGEgU25hcHNob3QgbG9uZ2VyLCBkbyB0aGlzOlxuXG4gIGNvbnN0IHJlbGVhc2UgPSBzbmFwc2hvdC5yZXRhaW4oKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkb1NvbWV0aGluZ1dpdGhTbmFwc2hvdChzbmFwc2hvdCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG5cblRoaXMgaXMgY3VycmVudGx5IGEgREVWLW9ubHkgd2FybmluZyBidXQgd2lsbCBiZWNvbWUgYSB0aHJvd24gZXhjZXB0aW9uIGluIHRoZSBuZXh0IHJlbGVhc2Ugb2YgUmVjb2lsLlxuYDsgLy8gQSBcIlNuYXBzaG90XCIgaXMgXCJyZWFkLW9ubHlcIiBhbmQgY2FwdHVyZXMgYSBzcGVjaWZpYyBzZXQgb2YgdmFsdWVzIG9mIGF0b21zLlxuLy8gSG93ZXZlciwgdGhlIGRhdGEtZmxvdy1ncmFwaCBhbmQgc2VsZWN0b3IgdmFsdWVzIG1heSBldm9sdmUgYXMgc2VsZWN0b3Jcbi8vIGV2YWx1YXRpb24gZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBhbmQgYXN5bmMgc2VsZWN0b3JzIHJlc29sdmUuXG5cbmNsYXNzIFNuYXBzaG90IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9uby11bmluaXRpYWxpemVkLXByb3BlcnRpZXNcbiAgY29uc3RydWN0b3Ioc3RvcmVTdGF0ZSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9yZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3JlZkNvdW50XCIsIDEpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0TG9hZGFibGVcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEodGhpcy5fc3RvcmUsIHJlY29pbFZhbHVlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFByb21pc2VcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSkudG9Qcm9taXNlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXROb2Rlc19VTlNUQUJMRVwiLCBvcHQgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7IC8vIFRPRE8gRGVhbCB3aXRoIG1vZGlmaWVkIHNlbGVjdG9yc1xuXG4gICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc01vZGlmaWVkKSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgcmV0dXJuIHJlY29pbFZhbHVlc0ZvcktleXMkMihzdGF0ZS5kaXJ0eUF0b21zKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga25vd25BdG9tcyA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcztcblxuICAgICAgY29uc3Qga25vd25TZWxlY3RvcnMgPSB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzO1xuXG4gICAgICByZXR1cm4gKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PSBudWxsID8gcmVjb2lsVmFsdWVzJDEudmFsdWVzKCkgOiBvcHQuaXNJbml0aWFsaXplZCA9PT0gdHJ1ZSA/IHJlY29pbFZhbHVlc0ZvcktleXMkMihSZWNvaWxfY29uY2F0SXRlcmFibGVzKFt0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMsIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnNdKSkgOiBSZWNvaWxfZmlsdGVySXRlcmFibGUocmVjb2lsVmFsdWVzJDEudmFsdWVzKCksICh7XG4gICAgICAgIGtleVxuICAgICAgfSkgPT4gIWtub3duQXRvbXMuaGFzKGtleSkgJiYgIWtub3duU2VsZWN0b3JzLmhhcyhrZXkpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldEluZm9fVU5TVEFCTEVcIiwgKHtcbiAgICAgIGtleVxuICAgIH0pID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpOyAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cblxuICAgICAgcmV0dXJuIHBlZWtOb2RlSW5mbyQxKHRoaXMuX3N0b3JlLCB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCBrZXkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibWFwXCIsIG1hcHBlciA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcywgYmF0Y2hVcGRhdGVzJDEpO1xuICAgICAgbWFwcGVyKG11dGFibGVTbmFwc2hvdCk7IC8vIGlmIHJlbW92aW5nIGJhdGNoVXBkYXRlcyBmcm9tIGBzZXRgIGFkZCBpdCBoZXJlXG5cbiAgICAgIHJldHVybiBtdXRhYmxlU25hcHNob3Q7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhc3luY01hcFwiLCBhc3luYyBtYXBwZXIgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICBjb25zdCBtdXRhYmxlU25hcHNob3QgPSBuZXcgTXV0YWJsZVNuYXBzaG90KHRoaXMsIGJhdGNoVXBkYXRlcyQxKTtcbiAgICAgIG11dGFibGVTbmFwc2hvdC5yZXRhaW4oKTsgLy8gUmV0YWluIG5ldyBzbmFwc2hvdCBkdXJpbmcgYXN5bmMgbWFwcGVyXG5cbiAgICAgIGF3YWl0IG1hcHBlcihtdXRhYmxlU25hcHNob3QpOyAvLyBDb250aW51ZSB0byByZXRhaW4gdGhlIG5ldyBzbmFwc2hvdCBmb3IgdGhlIHVzZXIsIGJ1dCBhdXRvLXJlbGVhc2UgaXRcbiAgICAgIC8vIGFmdGVyIHRoZSBuZXh0IHRpY2ssIHRoZSBzYW1lIGFzIGEgbmV3IHN5bmNocm9ub3VzIHNuYXBzaG90LlxuXG4gICAgICBtdXRhYmxlU25hcHNob3QuYXV0b1JlbGVhc2VfSU5URVJOQUwoKTtcbiAgICAgIHJldHVybiBtdXRhYmxlU25hcHNob3Q7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdG9yZSA9IHtcbiAgICAgIHN0b3JlSUQ6IGdldE5leHRTdG9yZUlEJDEoKSxcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZVN0YXRlLFxuICAgICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlciA9PiB7XG4gICAgICAgIHN0b3JlU3RhdGUuY3VycmVudFRyZWUgPSByZXBsYWNlcihzdG9yZVN0YXRlLmN1cnJlbnRUcmVlKTsgLy8gbm8gYmF0Y2hpbmcgc28gbmV4dFRyZWUgaXMgbmV2ZXIgYWN0aXZlXG4gICAgICB9LFxuICAgICAgZ2V0R3JhcGg6IHZlcnNpb24gPT4ge1xuICAgICAgICBjb25zdCBncmFwaHMgPSBzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbjtcblxuICAgICAgICBpZiAoZ3JhcGhzLmhhcyh2ZXJzaW9uKSkge1xuICAgICAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhncmFwaHMuZ2V0KHZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0dyYXBoID0gZ3JhcGgkMSgpO1xuICAgICAgICBncmFwaHMuc2V0KHZlcnNpb24sIG5ld0dyYXBoKTtcbiAgICAgICAgcmV0dXJuIG5ld0dyYXBoO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zOiAoKSA9PiAoe1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7fVxuICAgICAgfSksXG4gICAgICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhOiAoKSA9PiB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ0Nhbm5vdCBzdWJzY3JpYmUgdG8gU25hcHNob3RzJyk7XG4gICAgICB9XG4gICAgfTsgLy8gSW5pdGlhbGl6ZSBhbnkgbm9kZXMgdGhhdCBhcmUgbGl2ZSBpbiB0aGUgcGFyZW50IHN0b3JlIChwcmltYXJpbHkgc28gdGhhdFxuICAgIC8vIHRoaXMgc25hcHNob3QgZ2V0cyBjb3VudGVkIHRvd2FyZHMgdGhlIG5vZGUncyBsaXZlIHN0b3JlcyBjb3VudCkuXG4gICAgLy8gVE9ETyBPcHRpbWl6ZSB0aGlzIHdoZW4gY2xvbmluZyBzbmFwc2hvdHMgZm9yIGNhbGxiYWNrc1xuXG4gICAgZm9yIChjb25zdCBub2RlS2V5IG9mIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcykge1xuICAgICAgaW5pdGlhbGl6ZU5vZGUkMSh0aGlzLl9zdG9yZSwgbm9kZUtleSwgJ2dldCcpO1xuICAgICAgdXBkYXRlUmV0YWluQ291bnQkMSh0aGlzLl9zdG9yZSwgbm9kZUtleSwgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5hdXRvUmVsZWFzZV9JTlRFUk5BTCgpO1xuICB9XG5cbiAgcmV0YWluKCkge1xuICAgIGlmICh0aGlzLl9yZWZDb3VudCA8PSAwKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NuYXBzaG90IGhhcyBhbHJlYWR5IGJlZW4gcmVsZWFzZWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ0F0dGVtcHQgdG8gcmV0YWluKCkgU25hcHNob3QgdGhhdCB3YXMgYWxyZWFkeSByZWxlYXNlZC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9yZWZDb3VudCsrO1xuICAgIGxldCByZWxlYXNlZCA9IGZhbHNlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJlbGVhc2VkKSB7XG4gICAgICAgIHJlbGVhc2VkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9yZWxlYXNlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgc25hcHNob3Qgb24gdGhlIG5leHQgdGljay4gIFRoaXMgbWVhbnMgdGhlIHNuYXBzaG90IGlzIHJldGFpbmVkXG4gICAqIGR1cmluZyB0aGUgZXhlY3V0aW9uIG9mIHRoZSBjdXJyZW50IGZ1bmN0aW9uIHVzaW5nIGl0LlxuICAgKi9cblxuXG4gIGF1dG9SZWxlYXNlX0lOVEVSTkFMKCkge1xuICAgIGlmICghaXNTU1IkMSkge1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5fcmVsZWFzZSgpLCAwKTtcbiAgICB9XG4gIH1cblxuICBfcmVsZWFzZSgpIHtcbiAgICB0aGlzLl9yZWZDb3VudC0tO1xuXG4gICAgaWYgKHRoaXMuX3JlZkNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmZvckVhY2goY2xlYW51cCA9PiBjbGVhbnVwKCkpO1xuXG4gICAgICB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmNsZWFyKCk7XG5cbiAgICAgIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRlbXBvcmFyaWx5IG5lcmZpbmcgdGhpcyB0byBhbGxvdyB1cyB0byBmaW5kIGJyb2tlbiBjYWxsIHNpdGVzIHdpdGhvdXRcbiAgICAgIC8vIGFjdHVhbGx5IGJyZWFraW5nIGFueWJvZHkgeWV0LlxuICAgICAgLy8gZm9yIChjb25zdCBrIG9mIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcykge1xuICAgICAgLy8gICB1cGRhdGVSZXRhaW5Db3VudFRvWmVybyh0aGlzLl9zdG9yZSwgayk7XG4gICAgICAvLyB9XG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuX3JlZkNvdW50IDwgMCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1NuYXBzaG90IHJlbGVhc2VkIGFuIGV4dHJhIHRpbWUuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNSZXRhaW5lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmQ291bnQgPiAwO1xuICB9XG5cbiAgY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpIHtcbiAgICBpZiAoUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSAmJiB0aGlzLl9yZWZDb3VudCA8PSAwKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihyZXRhaW5XYXJuaW5nKTtcbiAgICAgIH0gLy8gV2hhdCB3ZSB3aWxsIHNoaXAgbGF0ZXI6XG4gICAgICAvLyB0aHJvdyBlcnIocmV0YWluV2FybmluZyk7XG5cbiAgICB9XG4gIH1cblxuICBnZXRTdG9yZV9JTlRFUk5BTCgpIHtcbiAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmU7XG4gIH1cblxuICBnZXRJRCgpIHtcbiAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS5zdGF0ZUlEO1xuICB9IC8vIFdlIHdhbnQgdG8gYWxsb3cgdGhlIG1ldGhvZHMgdG8gYmUgZGVzdHJ1Y3R1cmVkIGFuZCB1c2VkIGFzIGFjY2Vzc29yc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L2V4dHJhLWFycm93LWluaXRpYWxpemVyXG5cblxufVxuXG5mdW5jdGlvbiBjbG9uZVN0b3JlU3RhdGUoc3RvcmUsIHRyZWVTdGF0ZSwgYnVtcFZlcnNpb24gPSBmYWxzZSkge1xuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgdmVyc2lvbiA9IGJ1bXBWZXJzaW9uID8gZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMigpIDogdHJlZVN0YXRlLnZlcnNpb247XG4gIHJldHVybiB7XG4gICAgY3VycmVudFRyZWU6IGJ1bXBWZXJzaW9uID8ge1xuICAgICAgLy8gVE9ETyBzbmFwc2hvdHMgc2hvdWxkbid0IHJlYWxseSBoYXZlIHZlcnNpb25zIGJlY2F1c2UgYSBuZXcgdmVyc2lvbiBudW1iZXJcbiAgICAgIC8vIGlzIGFsd2F5cyBhc3NpZ25lZCB3aGVuIHRoZSBzbmFwc2hvdCBpcyBnb25lIHRvLlxuICAgICAgdmVyc2lvbixcbiAgICAgIHN0YXRlSUQ6IHZlcnNpb24sXG4gICAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7IC4uLnRyZWVTdGF0ZS50cmFuc2FjdGlvbk1ldGFkYXRhXG4gICAgICB9LFxuICAgICAgZGlydHlBdG9tczogbmV3IFNldCh0cmVlU3RhdGUuZGlydHlBdG9tcyksXG4gICAgICBhdG9tVmFsdWVzOiB0cmVlU3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLFxuICAgICAgbm9udmFsaWRhdGVkQXRvbXM6IHRyZWVTdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpXG4gICAgfSA6IHRyZWVTdGF0ZSxcbiAgICBjb21taXREZXB0aDogMCxcbiAgICBuZXh0VHJlZTogbnVsbCxcbiAgICBwcmV2aW91c1RyZWU6IG51bGwsXG4gICAga25vd25BdG9tczogbmV3IFNldChzdG9yZVN0YXRlLmtub3duQXRvbXMpLFxuICAgIC8vIEZJWE1FIGhlcmUncyBhIGNvcHlcbiAgICBrbm93blNlbGVjdG9yczogbmV3IFNldChzdG9yZVN0YXRlLmtub3duU2VsZWN0b3JzKSxcbiAgICAvLyBGSVhNRSBoZXJlJ3MgYSBjb3B5XG4gICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRDogW10sXG4gICAgc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzOiBuZXcgU2V0KCksXG4gICAgZ3JhcGhzQnlWZXJzaW9uOiBuZXcgTWFwKCkuc2V0KHZlcnNpb24sIHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKSksXG4gICAgcmV0ZW50aW9uOiB7XG4gICAgICByZWZlcmVuY2VDb3VudHM6IG5ldyBNYXAoKSxcbiAgICAgIG5vZGVzUmV0YWluZWRCeVpvbmU6IG5ldyBNYXAoKSxcbiAgICAgIHJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2U6IG5ldyBTZXQoKVxuICAgIH0sXG4gICAgLy8gRklYTUUgaGVyZSdzIGEgY29weVxuICAgIC8vIENyZWF0ZSBibGFuayBjbGVhbnVwIGhhbmRsZXJzIGZvciBhdG9tcyBzbyBzbmFwc2hvdHMgZG9uJ3QgcmUtcnVuXG4gICAgLy8gYXRvbSBlZmZlY3RzLlxuICAgIG5vZGVDbGVhbnVwRnVuY3Rpb25zOiBuZXcgTWFwKFJlY29pbF9tYXBJdGVyYWJsZShzdG9yZVN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmVudHJpZXMoKSwgKFtrZXldKSA9PiBba2V5LCAoKSA9PiB7fV0pKVxuICB9O1xufSAvLyBGYWN0b3J5IHRvIGJ1aWxkIGEgZnJlc2ggc25hcHNob3RcblxuXG5mdW5jdGlvbiBmcmVzaFNuYXBzaG90KGluaXRpYWxpemVTdGF0ZSkge1xuICBjb25zdCBzbmFwc2hvdCA9IG5ldyBTbmFwc2hvdChtYWtlRW1wdHlTdG9yZVN0YXRlJDEoKSk7XG4gIHJldHVybiBpbml0aWFsaXplU3RhdGUgIT0gbnVsbCA/IHNuYXBzaG90Lm1hcChpbml0aWFsaXplU3RhdGUpIDogc25hcHNob3Q7XG59IC8vIEZhY3RvcnkgdG8gY2xvbmUgYSBzbmFwYWhvdCBzdGF0ZVxuXG5cbmNvbnN0IFttZW1vaXplZENsb25lU25hcHNob3QsIGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90XSA9IG1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb24kMSgoc3RvcmUsIHZlcnNpb24pID0+IHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyZWVTdGF0ZSA9IHZlcnNpb24gPT09ICdjdXJyZW50JyA/IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSk7XG4gIHJldHVybiBuZXcgU25hcHNob3QoY2xvbmVTdG9yZVN0YXRlKHN0b3JlLCB0cmVlU3RhdGUpKTtcbn0sIChzdG9yZSwgdmVyc2lvbikgPT4ge1xuICB2YXIgX3N0b3JlJGdldFN0YXRlJHByZXZpO1xuXG4gIHJldHVybiBTdHJpbmcodmVyc2lvbikgKyBTdHJpbmcoc3RvcmUuc3RvcmVJRCkgKyBTdHJpbmcoc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS52ZXJzaW9uKSArIFN0cmluZygoX3N0b3JlJGdldFN0YXRlJHByZXZpID0gc3RvcmUuZ2V0U3RhdGUoKS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSRwcmV2aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlJHByZXZpLnZlcnNpb24pO1xufSk7XG5cbmZ1bmN0aW9uIGNsb25lU25hcHNob3Qoc3RvcmUsIHZlcnNpb24gPSAnY3VycmVudCcpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBtZW1vaXplZENsb25lU25hcHNob3Qoc3RvcmUsIHZlcnNpb24pO1xuXG4gIGlmICghc25hcHNob3QuaXNSZXRhaW5lZCgpKSB7XG4gICAgaW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QoKTtcbiAgICByZXR1cm4gbWVtb2l6ZWRDbG9uZVNuYXBzaG90KHN0b3JlLCB2ZXJzaW9uKTtcbiAgfVxuXG4gIHJldHVybiBzbmFwc2hvdDtcbn1cblxuY2xhc3MgTXV0YWJsZVNuYXBzaG90IGV4dGVuZHMgU25hcHNob3Qge1xuICBjb25zdHJ1Y3RvcihzbmFwc2hvdCwgYmF0Y2gpIHtcbiAgICBzdXBlcihjbG9uZVN0b3JlU3RhdGUoc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKSwgc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCB0cnVlKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfYmF0Y2hcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNldFwiLCAocmVjb2lsU3RhdGUsIG5ld1ZhbHVlT3JVcGRhdGVyKSA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5nZXRTdG9yZV9JTlRFUk5BTCgpOyAvLyBUaGlzIGJhdGNoVXBkYXRlcyBlbnN1cmVzIHRoaXMgYHNldGAgaXMgYXBwbGllZCBpbW1lZGlhdGVseSBhbmQgeW91IGNhblxuICAgICAgLy8gcmVhZCB0aGUgd3JpdHRlbiB2YWx1ZSBhZnRlciBjYWxsaW5nIGBzZXRgLiBJIHdvdWxkIGxpa2UgdG8gcmVtb3ZlIHRoaXNcbiAgICAgIC8vIGJlaGF2aW9yIGFuZCBvbmx5IGJhdGNoIGluIGBTbmFwc2hvdC5tYXBgLCBidXQgdGhpcyB3b3VsZCBiZSBhIGJyZWFraW5nXG4gICAgICAvLyBjaGFuZ2UgcG90ZW50aWFsbHkuXG5cbiAgICAgIHRoaXMuX2JhdGNoKCgpID0+IHtcbiAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMShzdG9yZSwgcmVjb2lsU3RhdGUua2V5LCAxKTtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWUkMSh0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCksIHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlc2V0XCIsIHJlY29pbFN0YXRlID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCk7IC8vIFNlZSBub3RlIGF0IGBzZXRgIGFib3V0IGJhdGNoZWQgdXBkYXRlcy5cblxuICAgICAgdGhpcy5fYmF0Y2goKCkgPT4ge1xuICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQxKHN0b3JlLCByZWNvaWxTdGF0ZS5rZXksIDEpO1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZSQxKHRoaXMuZ2V0U3RvcmVfSU5URVJOQUwoKSwgcmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkMSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNldFVudmFsaWRhdGVkQXRvbVZhbHVlc19ERVBSRUNBVEVEXCIsIHZhbHVlcyA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5nZXRTdG9yZV9JTlRFUk5BTCgpOyAvLyBTZWUgbm90ZSBhdCBgc2V0YCBhYm91dCBiYXRjaGVkIHVwZGF0ZXMuXG5cbiAgICAgIGJhdGNoVXBkYXRlcyQxKCgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgdmFsdWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDEoc3RvcmUsIGssIDEpO1xuICAgICAgICAgIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMShzdG9yZSwgbmV3IEFic3RyYWN0UmVjb2lsVmFsdWUkMihrKSwgdik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fYmF0Y2ggPSBiYXRjaDtcbiAgfSAvLyBXZSB3YW50IHRvIGFsbG93IHRoZSBtZXRob2RzIHRvIGJlIGRlc3RydWN0dXJlZCBhbmQgdXNlZCBhcyBhY2Nlc3NvcnNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9leHRyYS1hcnJvdy1pbml0aWFsaXplclxuXG5cbn1cblxudmFyIFJlY29pbF9TbmFwc2hvdCA9IHtcbiAgU25hcHNob3QsXG4gIE11dGFibGVTbmFwc2hvdCxcbiAgZnJlc2hTbmFwc2hvdCxcbiAgY2xvbmVTbmFwc2hvdFxufTtcblxudmFyIFJlY29pbF9TbmFwc2hvdF8xID0gUmVjb2lsX1NuYXBzaG90LlNuYXBzaG90O1xudmFyIFJlY29pbF9TbmFwc2hvdF8yID0gUmVjb2lsX1NuYXBzaG90Lk11dGFibGVTbmFwc2hvdDtcbnZhciBSZWNvaWxfU25hcHNob3RfMyA9IFJlY29pbF9TbmFwc2hvdC5mcmVzaFNuYXBzaG90O1xudmFyIFJlY29pbF9TbmFwc2hvdF80ID0gUmVjb2lsX1NuYXBzaG90LmNsb25lU25hcHNob3Q7XG5cbnZhciBSZWNvaWxfU25hcHNob3QkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBTbmFwc2hvdDogUmVjb2lsX1NuYXBzaG90XzEsXG4gIE11dGFibGVTbmFwc2hvdDogUmVjb2lsX1NuYXBzaG90XzIsXG4gIGZyZXNoU25hcHNob3Q6IFJlY29pbF9TbmFwc2hvdF8zLFxuICBjbG9uZVNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfNFxufSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiB1bmlvblNldHMoLi4uc2V0cykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCBzZXQgb2Ygc2V0cykge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2Ygc2V0KSB7XG4gICAgICByZXN1bHQuYWRkKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX3VuaW9uU2V0cyA9IHVuaW9uU2V0cztcblxuY29uc3Qge1xuICB1c2VSZWZcbn0gPSByZWFjdDtcbi8qKlxuICogVGhlIHNhbWUgYXMgYHVzZVJlZigpYCBleGNlcHQgdGhhdCBpZiBhIGZ1bmN0aW9uIGlzIHNwZWNpZmllZCB0aGVuIGl0IHdpbGxcbiAqIGNhbGwgdGhhdCBmdW5jdGlvbiB0byBnZXQgdGhlIHZhbHVlIHRvIGluaXRpYWxpemUgdGhlIHJlZmVyZW5jZSB3aXRoLlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGhvdyBgdXNlU3RhdGUoKWAgYmVoYXZlcyB3aGVuIGdpdmVuIGEgZnVuY3Rpb24uICBJdCBhbGxvd3NcbiAqIHRoZSB1c2VyIHRvIGF2b2lkIGdlbmVyYXRpbmcgdGhlIGluaXRpYWwgdmFsdWUgZm9yIHN1YnNlcXVlbnQgcmVuZGVycy5cbiAqIFRoZSB0cmFkZW9mZiBpcyB0aGF0IHRvIHNldCB0aGUgcmVmZXJlbmNlIHRvIGEgZnVuY3Rpb24gaXRzZWxmIHlvdSBuZWVkIHRvXG4gKiBuZXN0IGl0OiB1c2VSZWZJbml0T25jZSgoKSA9PiAoKSA9PiB7Li4ufSk7XG4gKi9cblxuXG5mdW5jdGlvbiB1c2VSZWZJbml0T25jZShpbml0aWFsVmFsdWUpIHtcbiAgLy8gJEZsb3dFeHBlY3RlZEVycm9yW2luY29tcGF0aWJsZS1jYWxsXVxuICBjb25zdCByZWYgPSB1c2VSZWYoaW5pdGlhbFZhbHVlKTtcblxuICBpZiAocmVmLmN1cnJlbnQgPT09IGluaXRpYWxWYWx1ZSAmJiB0eXBlb2YgaW5pdGlhbFZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gJEZsb3dFeHBlY3RlZEVycm9yW2luY29tcGF0aWJsZS11c2VdXG4gICAgcmVmLmN1cnJlbnQgPSBpbml0aWFsVmFsdWUoKTtcbiAgfVxuXG4gIHJldHVybiByZWY7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVmSW5pdE9uY2UgPSB1c2VSZWZJbml0T25jZTtcblxuLy8gQGZiLW9ubHk6IGNvbnN0IFJlY29pbHVzYWdlbG9nRXZlbnQgPSByZXF1aXJlKCdSZWNvaWx1c2FnZWxvZ0V2ZW50Jyk7XG4vLyBAZmItb25seTogY29uc3QgUmVjb2lsVXNhZ2VMb2dGYWxjb0V2ZW50ID0gcmVxdWlyZSgnUmVjb2lsVXNhZ2VMb2dGYWxjb0V2ZW50Jyk7XG4vLyBAZmItb25seTogY29uc3QgVVJJID0gcmVxdWlyZSgnVVJJJyk7XG5cblxuY29uc3Qge1xuICBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbjogZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMyxcbiAgbWFrZUVtcHR5U3RvcmVTdGF0ZTogbWFrZUVtcHR5U3RvcmVTdGF0ZSQyXG59ID0gUmVjb2lsX1N0YXRlO1xuXG5jb25zdCB7XG4gIGNsZWFuVXBOb2RlOiBjbGVhblVwTm9kZSQyLFxuICBnZXREb3duc3RyZWFtTm9kZXM6IGdldERvd25zdHJlYW1Ob2RlcyQyLFxuICBpbml0aWFsaXplTm9kZTogaW5pdGlhbGl6ZU5vZGUkMixcbiAgc2V0Tm9kZVZhbHVlOiBzZXROb2RlVmFsdWUkMixcbiAgc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRDogc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGdyYXBoOiBncmFwaCQyXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIGNsb25lR3JhcGg6IGNsb25lR3JhcGgkMVxufSA9IFJlY29pbF9HcmFwaDtcblxuY29uc3Qge1xuICBnZXROZXh0U3RvcmVJRDogZ2V0TmV4dFN0b3JlSUQkMlxufSA9IFJlY29pbF9LZXlzO1xuXG5jb25zdCB7XG4gIGNyZWF0ZU11dGFibGVTb3VyY2U6IGNyZWF0ZU11dGFibGVTb3VyY2UkMSxcbiAgcmVhY3RNb2RlOiByZWFjdE1vZGUkMlxufSA9IFJlY29pbF9SZWFjdE1vZGU7XG5cbmNvbnN0IHtcbiAgYXBwbHlBdG9tVmFsdWVXcml0ZXM6IGFwcGx5QXRvbVZhbHVlV3JpdGVzJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93OiByZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMVxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cbmNvbnN0IHtcbiAgZnJlc2hTbmFwc2hvdDogZnJlc2hTbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cblxuXG5jb25zdCB7XG4gIHVzZUNhbGxiYWNrLFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZU1lbW8sXG4gIHVzZVJlZjogdXNlUmVmJDEsXG4gIHVzZVN0YXRlXG59ID0gcmVhY3Q7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBub3RJbkFDb250ZXh0KCkge1xuICB0aHJvdyBSZWNvaWxfZXJyKCdUaGlzIGNvbXBvbmVudCBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgPFJlY29pbFJvb3Q+IGNvbXBvbmVudC4nKTtcbn1cblxuY29uc3QgZGVmYXVsdFN0b3JlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHN0b3JlSUQ6IGdldE5leHRTdG9yZUlEJDIoKSxcbiAgZ2V0U3RhdGU6IG5vdEluQUNvbnRleHQsXG4gIHJlcGxhY2VTdGF0ZTogbm90SW5BQ29udGV4dCxcbiAgZ2V0R3JhcGg6IG5vdEluQUNvbnRleHQsXG4gIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zOiBub3RJbkFDb250ZXh0LFxuICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhOiBub3RJbkFDb250ZXh0XG59KTtcbmxldCBzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZSkge1xuICBpZiAoc3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0FuIGF0b20gdXBkYXRlIHdhcyB0cmlnZ2VyZWQgd2l0aGluIHRoZSBleGVjdXRpb24gb2YgYSBzdGF0ZSB1cGRhdGVyIGZ1bmN0aW9uLiBTdGF0ZSB1cGRhdGVyIGZ1bmN0aW9ucyBwcm92aWRlZCB0byBSZWNvaWwgbXVzdCBiZSBwdXJlIGZ1bmN0aW9ucy4nKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmIChzdG9yZVN0YXRlLm5leHRUcmVlID09PSBudWxsKSB7XG4gICAgaWYgKFJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykgJiYgUmVjb2lsX2dreCgncmVjb2lsX3JlbGVhc2Vfb25fY2FzY2FkaW5nX3VwZGF0ZV9raWxsc3dpdGNoXzIwMjEnKSkge1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIGNhc2NhZGluZyB1cGRhdGUgKHRoYXQgaXMsIHJlbmRlcmluZyBkdWUgdG8gb25lIHN0YXRlIGNoYW5nZVxuICAgICAgLy8gaW52b2tlcyBhIHNlY29uZCBzdGF0ZSBjaGFuZ2UpLCB3ZSB3b24ndCBoYXZlIGNsZWFuZWQgdXAgcmV0YWluYWJsZXMgeWV0XG4gICAgICAvLyBiZWNhdXNlIHRoaXMgbm9ybWFsbHkgaGFwcGVucyBhZnRlciBub3RpZnlpbmcgY29tcG9uZW50cy4gRG8gaXQgYmVmb3JlXG4gICAgICAvLyBwcm9jZWVkaW5nIHdpdGggdGhlIGNhc2NhZGluZyB1cGRhdGUgc28gdGhhdCBpdCByZW1haW5zIHByZWRpY3RhYmxlOlxuICAgICAgaWYgKHN0b3JlU3RhdGUuY29tbWl0RGVwdGggPiAwKSB7XG4gICAgICAgIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdyQxKHN0b3JlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB2ZXJzaW9uID0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZS52ZXJzaW9uO1xuICAgIGNvbnN0IG5leHRWZXJzaW9uID0gZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMygpO1xuICAgIHN0b3JlU3RhdGUubmV4dFRyZWUgPSB7IC4uLnN0b3JlU3RhdGUuY3VycmVudFRyZWUsXG4gICAgICB2ZXJzaW9uOiBuZXh0VmVyc2lvbixcbiAgICAgIHN0YXRlSUQ6IG5leHRWZXJzaW9uLFxuICAgICAgZGlydHlBdG9tczogbmV3IFNldCgpLFxuICAgICAgdHJhbnNhY3Rpb25NZXRhZGF0YToge31cbiAgICB9O1xuICAgIHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLnNldChuZXh0VmVyc2lvbiwgY2xvbmVHcmFwaCQxKFJlY29pbF9udWxsdGhyb3dzKHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmdldCh2ZXJzaW9uKSkpKTtcbiAgfVxufVxuXG5jb25zdCBBcHBDb250ZXh0ID0gcmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGN1cnJlbnQ6IGRlZmF1bHRTdG9yZVxufSk7XG5cbmNvbnN0IHVzZVN0b3JlUmVmID0gKCkgPT4gdXNlQ29udGV4dChBcHBDb250ZXh0KTsgLy8gJEZsb3dFeHBlY3RlZEVycm9yW2luY29tcGF0aWJsZS1jYWxsXVxuXG5cbmNvbnN0IE11dGFibGVTb3VyY2VDb250ZXh0ID0gcmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuZnVuY3Rpb24gdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSgpIHtcbiAgY29uc3QgbXV0YWJsZVNvdXJjZSA9IHVzZUNvbnRleHQoTXV0YWJsZVNvdXJjZUNvbnRleHQpO1xuXG4gIGlmIChtdXRhYmxlU291cmNlID09IG51bGwpIHtcbiAgICBSZWNvaWxfZXhwZWN0YXRpb25WaW9sYXRpb24oJ0F0dGVtcHRlZCB0byB1c2UgYSBSZWNvaWwgaG9vayBvdXRzaWRlIG9mIGEgPFJlY29pbFJvb3Q+LiAnICsgJzxSZWNvaWxSb290PiBtdXN0IGJlIGFuIGFuY2VzdG9yIG9mIGFueSBjb21wb25lbnQgdGhhdCB1c2VzICcgKyAnUmVjb2lsIGhvb2tzLicpO1xuICB9XG5cbiAgcmV0dXJuIG11dGFibGVTb3VyY2U7XG59XG5cbmZ1bmN0aW9uIG5vdGlmeUNvbXBvbmVudHMoc3RvcmUsIHN0b3JlU3RhdGUsIHRyZWVTdGF0ZSkge1xuICBjb25zdCBkZXBlbmRlbnROb2RlcyA9IGdldERvd25zdHJlYW1Ob2RlcyQyKHN0b3JlLCB0cmVlU3RhdGUsIHRyZWVTdGF0ZS5kaXJ0eUF0b21zKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBkZXBlbmRlbnROb2Rlcykge1xuICAgIGNvbnN0IGNvbXBzID0gc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmdldChrZXkpO1xuXG4gICAgaWYgKGNvbXBzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtfc3ViSUQsIFtfZGVidWdOYW1lLCBjYWxsYmFja11dIG9mIGNvbXBzKSB7XG4gICAgICAgIGNhbGxiYWNrKHRyZWVTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNlbmRFbmRPZkJhdGNoTm90aWZpY2F0aW9ucyhzdG9yZSkge1xuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgdHJlZVN0YXRlID0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTsgLy8gSW5mb3JtIHRyYW5zYWN0aW9uIHN1YnNjcmliZXJzIG9mIHRoZSB0cmFuc2FjdGlvbjpcblxuICBjb25zdCBkaXJ0eUF0b21zID0gdHJlZVN0YXRlLmRpcnR5QXRvbXM7XG5cbiAgaWYgKGRpcnR5QXRvbXMuc2l6ZSkge1xuICAgIC8vIEV4ZWN1dGUgTm9kZS1zcGVjaWZpYyBzdWJzY3JpYmVycyBiZWZvcmUgZ2xvYmFsIHN1YnNjcmliZXJzXG4gICAgZm9yIChjb25zdCBba2V5LCBzdWJzY3JpcHRpb25zXSBvZiBzdG9yZVN0YXRlLm5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIGlmIChkaXJ0eUF0b21zLmhhcyhrZXkpKSB7XG4gICAgICAgIGZvciAoY29uc3QgW18sIHN1YnNjcmlwdGlvbl0gb2Ygc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtfLCBzdWJzY3JpcHRpb25dIG9mIHN0b3JlU3RhdGUudHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zKSB7XG4gICAgICBzdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIH1cblxuICAgIGlmICghcmVhY3RNb2RlJDIoKS5lYXJseSB8fCBzdG9yZVN0YXRlLnN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycy5zaXplID4gMCkge1xuICAgICAgLy8gTm90aWZ5aW5nIGNvbXBvbmVudHMgaXMgbmVlZGVkIHRvIHdha2UgZnJvbSBzdXNwZW5zZSwgZXZlbiB3aGVuIHVzaW5nXG4gICAgICAvLyBlYXJseSByZW5kZXJpbmcuXG4gICAgICBub3RpZnlDb21wb25lbnRzKHN0b3JlLCBzdG9yZVN0YXRlLCB0cmVlU3RhdGUpOyAvLyBXYWtlIGFsbCBzdXNwZW5kZWQgY29tcG9uZW50cyBzbyB0aGUgcmlnaHQgb25lKHMpIGNhbiB0cnkgdG8gcmUtcmVuZGVyLlxuICAgICAgLy8gV2UgbmVlZCB0byB3YWtlIHVwIGNvbXBvbmVudHMgbm90IGp1c3Qgd2hlbiBzb21lIGFzeW5jaHJvbm91cyBzZWxlY3RvclxuICAgICAgLy8gcmVzb2x2ZWQsIGJ1dCBhbHNvIHdoZW4gY2hhbmdpbmcgc3luY2hyb25vdXMgdmFsdWVzIGJlY2F1c2UgdGhpcyBtYXkgY2F1c2VcbiAgICAgIC8vIGEgc2VsZWN0b3IgdG8gY2hhbmdlIGZyb20gYXN5bmNocm9ub3VzIHRvIHN5bmNocm9ub3VzLCBpbiB3aGljaCBjYXNlIHRoZXJlXG4gICAgICAvLyB3b3VsZCBiZSBubyBmb2xsb3ctdXAgYXN5bmNocm9ub3VzIHJlc29sdXRpb24gdG8gd2FrZSB1cyB1cC5cbiAgICAgIC8vIFRPRE8gT1BUSU1JWkFUSU9OIE9ubHkgd2FrZSB1cCByZWxhdGVkIGRvd25zdHJlYW0gY29tcG9uZW50c1xuXG4gICAgICBzdG9yZVN0YXRlLnN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycy5mb3JFYWNoKGNiID0+IGNiKCkpO1xuICAgICAgc3RvcmVTdGF0ZS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuY2xlYXIoKTtcbiAgICB9XG4gIH0gLy8gU3BlY2lhbCBiZWhhdmlvciBPTkxZIGludm9rZWQgYnkgdXNlSW50ZXJmYWNlLlxuICAvLyBGSVhNRSBkZWxldGUgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQgd2hlbiBkZWxldGluZyB1c2VJbnRlcmZhY2UuXG5cblxuICBzdG9yZVN0YXRlLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELmZvckVhY2goY2IgPT4gY2IodHJlZVN0YXRlKSk7XG4gIHN0b3JlU3RhdGUucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQuc3BsaWNlKDAsIHN0b3JlU3RhdGUucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gZW5kQmF0Y2goc3RvcmUpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHN0b3JlU3RhdGUuY29tbWl0RGVwdGgrKztcblxuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRUcmVlXG4gICAgfSA9IHN0b3JlU3RhdGU7IC8vIElnbm9yZSBjb21taXRzIHRoYXQgYXJlIG5vdCBiZWNhdXNlIG9mIFJlY29pbCB0cmFuc2FjdGlvbnMgLS0gbmFtZWx5LFxuICAgIC8vIGJlY2F1c2Ugc29tZXRoaW5nIGFib3ZlIFJlY29pbFJvb3QgcmUtcmVuZGVyZWQ6XG5cbiAgICBpZiAobmV4dFRyZWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIG5leHRUcmVlIGlzIG5vdyBjb21taXR0ZWQgLS0gbm90ZSB0aGF0IGNvcHlpbmcgYW5kIHJlc2V0IG9jY3VycyB3aGVuXG4gICAgLy8gYSB0cmFuc2FjdGlvbiBiZWdpbnMsIGluIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZDpcblxuXG4gICAgc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHN0b3JlU3RhdGUuY3VycmVudFRyZWUgPSBuZXh0VHJlZTtcbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0gbnVsbDtcbiAgICBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmUpO1xuXG4gICAgaWYgKHN0b3JlU3RhdGUucHJldmlvdXNUcmVlICE9IG51bGwpIHtcbiAgICAgIHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmRlbGV0ZShzdG9yZVN0YXRlLnByZXZpb3VzVHJlZS52ZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdFbmRlZCBiYXRjaCB3aXRoIG5vIHByZXZpb3VzIHN0YXRlLCB3aGljaCBpcyB1bmV4cGVjdGVkJywgJ3JlY29pbCcpO1xuICAgIH1cblxuICAgIHN0b3JlU3RhdGUucHJldmlvdXNUcmVlID0gbnVsbDtcblxuICAgIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMShzdG9yZSk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHN0b3JlU3RhdGUuY29tbWl0RGVwdGgtLTtcbiAgfVxufVxuLypcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBCYXRjaGVyIGlzIHRvIG9ic2VydmUgd2hlbiBSZWFjdCBiYXRjaGVzIGVuZCBzbyB0aGF0XG4gKiBSZWNvaWwgc3RhdGUgY2hhbmdlcyBjYW4gYmUgYmF0Y2hlZC4gV2hlbmV2ZXIgUmVjb2lsIHN0YXRlIGNoYW5nZXMsIHdlIGNhbGxcbiAqIHNldFN0YXRlIG9uIHRoZSBiYXRjaGVyLiBUaGVuIHdlIHdhaXQgZm9yIHRoYXQgY2hhbmdlIHRvIGJlIGNvbW1pdHRlZCwgd2hpY2hcbiAqIHNpZ25pZmllcyB0aGUgZW5kIG9mIHRoZSBiYXRjaC4gVGhhdCdzIHdoZW4gd2UgcmVzcG9uZCB0byB0aGUgUmVjb2lsIGNoYW5nZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJhdGNoZXIoe1xuICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2Vcbn0pIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZigpO1xuICBjb25zdCBbLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShbXSk7XG4gIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSgoKSA9PiBzZXRTdGF0ZSh7fSkpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSgoKSA9PiBzZXRTdGF0ZSh7fSkpOyAvLyBJZiBhbiBhc3luY2hyb25vdXMgc2VsZWN0b3IgcmVzb2x2ZXMgYWZ0ZXIgdGhlIEJhdGNoZXIgaXMgdW5tb3VudGVkLFxuICAgIC8vIG5vdGlmeUJhdGNoZXJPZkNoYW5nZSB3aWxsIHN0aWxsIGJlIGNhbGxlZC4gQW4gZXJyb3IgZ2V0cyB0aHJvd24gd2hlbmV2ZXJcbiAgICAvLyBzZXRTdGF0ZSBpcyBjYWxsZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgYWxyZWFkeSB1bm1vdW50ZWQsIHNvIHRoaXMgc2V0c1xuICAgIC8vIG5vdGlmeUJhdGNoZXJPZkNoYW5nZSB0byBiZSBhIG5vLW9wLlxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSgoKSA9PiB7fSk7XG4gICAgfTtcbiAgfSwgW3NldE5vdGlmeUJhdGNoZXJPZkNoYW5nZV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIGVucXVldWVFeGVjdXRpb24gcnVucyB0aGlzIGZ1bmN0aW9uIGltbWVkaWF0ZWx5OyBpdCBpcyBvbmx5IHVzZWQgdG9cbiAgICAvLyBtYW5pcHVsYXRlIHRoZSBvcmRlciBvZiB1c2VFZmZlY3RzIGR1cmluZyB0ZXN0cywgc2luY2UgUmVhY3Qgc2VlbXMgdG9cbiAgICAvLyBjYWxsIHVzZUVmZmVjdCBpbiBhbiB1bnByZWRpY3RhYmxlIG9yZGVyIHNvbWV0aW1lcy5cbiAgICBSZWNvaWxfUXVldWUuZW5xdWV1ZUV4ZWN1dGlvbignQmF0Y2hlcicsICgpID0+IHtcbiAgICAgIGVuZEJhdGNoKHN0b3JlUmVmLmN1cnJlbnQpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICF3aW5kb3cuJHJlY29pbERlYnVnU3RhdGVzKSB7XG4gICAgd2luZG93LiRyZWNvaWxEZWJ1Z1N0YXRlcyA9IFtdO1xuICB9XG59IC8vIFdoZW4gcmVtb3ZpbmcgdGhpcyBkZXByZWNhdGVkIGZ1bmN0aW9uLCByZW1vdmUgc3RhdGVCeVNldHRpbmdSZWNvaWxWYWx1ZVxuLy8gd2hpY2ggd2lsbCBubyBsb25nZXIgYmUgbmVlZGVkLlxuXG5cbmZ1bmN0aW9uIGluaXRpYWxTdG9yZVN0YXRlX0RFUFJFQ0FURUQoc3RvcmUsIGluaXRpYWxpemVTdGF0ZSkge1xuICBjb25zdCBpbml0aWFsID0gbWFrZUVtcHR5U3RvcmVTdGF0ZSQyKCk7XG4gIGluaXRpYWxpemVTdGF0ZSh7XG4gICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgc2V0OiAoYXRvbSwgdmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gaW5pdGlhbC5jdXJyZW50VHJlZTtcbiAgICAgIGNvbnN0IHdyaXRlcyA9IHNldE5vZGVWYWx1ZSQyKHN0b3JlLCBzdGF0ZSwgYXRvbS5rZXksIHZhbHVlKTtcbiAgICAgIGNvbnN0IHdyaXR0ZW5Ob2RlcyA9IG5ldyBTZXQod3JpdGVzLmtleXMoKSk7XG4gICAgICBjb25zdCBub252YWxpZGF0ZWRBdG9tcyA9IHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmNsb25lKCk7XG5cbiAgICAgIGZvciAoY29uc3QgbiBvZiB3cml0dGVuTm9kZXMpIHtcbiAgICAgICAgbm9udmFsaWRhdGVkQXRvbXMuZGVsZXRlKG4pO1xuICAgICAgfVxuXG4gICAgICBpbml0aWFsLmN1cnJlbnRUcmVlID0geyAuLi5zdGF0ZSxcbiAgICAgICAgZGlydHlBdG9tczogUmVjb2lsX3VuaW9uU2V0cyhzdGF0ZS5kaXJ0eUF0b21zLCB3cml0dGVuTm9kZXMpLFxuICAgICAgICBhdG9tVmFsdWVzOiBhcHBseUF0b21WYWx1ZVdyaXRlcyQxKHN0YXRlLmF0b21WYWx1ZXMsIHdyaXRlcyksXG4gICAgICAgIC8vIE5COiBQTEVBU0UgdW4tZXhwb3J0IGFwcGx5QXRvbVZhbHVlV3JpdGVzIHdoZW4gZGVsZXRpbmcgdGhpcyBjb2RlXG4gICAgICAgIG5vbnZhbGlkYXRlZEF0b21zXG4gICAgICB9O1xuICAgIH0sXG4gICAgc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzOiBhdG9tVmFsdWVzID0+IHtcbiAgICAgIC8vIEZJWE1FIHJlcGxhY2UgdGhpcyB3aXRoIGEgbXV0YXRpdmUgbG9vcFxuICAgICAgYXRvbVZhbHVlcy5mb3JFYWNoKCh2LCBrKSA9PiB7XG4gICAgICAgIGluaXRpYWwuY3VycmVudFRyZWUgPSBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEJDEoaW5pdGlhbC5jdXJyZW50VHJlZSwgaywgdik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaW5pdGlhbDtcbn0gLy8gSW5pdGlhbGl6ZSBzdGF0ZSBzbmFwc2hvdCBmb3IgPFJlY29pbFJvb3Q+IGZvciB0aGUgaW5pdGlhbGl6ZVN0YXRlIHByb3AuXG4vLyBBdG9tIGVmZmVjdCBpbml0aWFsaXphdGlvbiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhpcyBwcm9wLlxuLy8gQW55IGF0b20gZWZmZWN0cyB3aWxsIGJlIHJ1biBiZWZvcmUgaW5pdGlhbGl6YXRpb24sIGJ1dCB0aGVuIGNsZWFuZWQgdXAsXG4vLyB0aGV5IGFyZSB0aGVuIHJlLXJ1biB3aGVuIHVzZWQgYXMgcGFydCBvZiByZW5kZXJpbmcuICBUaGVzZSBzZW1hbnRpY3MgYXJlXG4vLyBjb21wYXRpYmxlIHdpdGggUmVhY3QgU3RyaWN0TW9kZSB3aGVyZSBlZmZlY3RzIG1heSBiZSByZS1ydW4gbXVsdGlwbGUgdGltZXNcbi8vIGJ1dCBzdGF0ZSBpbml0aWFsaXphdGlvbiBvbmx5IGhhcHBlbnMgb25jZSB0aGUgZmlyc3QgdGltZS5cblxuXG5mdW5jdGlvbiBpbml0aWFsU3RvcmVTdGF0ZShpbml0aWFsaXplU3RhdGUpIHtcbiAgLy8gSW5pdGlhbGl6ZSBhIHNuYXBzaG90IGFuZCBnZXQgaXRzIHN0b3JlXG4gIGNvbnN0IHNuYXBzaG90ID0gZnJlc2hTbmFwc2hvdCQxKCkubWFwKGluaXRpYWxpemVTdGF0ZSk7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLmdldFN0YXRlKCk7IC8vIENvdW50ZXJhY3QgdGhlIHNuYXBzaG90IGF1dG8tcmVsZWFzZVxuXG4gIHNuYXBzaG90LnJldGFpbigpOyAvLyBDbGVhbnVwIGFueSBlZmZlY3RzIHJ1biBkdXJpbmcgaW5pdGlhbGl6YXRpb24gYW5kIGNsZWFyIHRoZSBoYW5kbGVycyBzb1xuICAvLyB0aGV5IHdpbGwgcmUtaW5pdGlhbGl6ZSBpZiB1c2VkIGR1cmluZyByZW5kZXJpbmcuICBUaGlzIGFsbG93cyBhdG9tIGVmZmVjdFxuICAvLyBpbml0aWFsaXphdGlvbiB0byB0YWtlIHByZWNlZGVuY2Ugb3ZlciBpbml0aWFsaXplU3RhdGUgYW5kIGJlIGNvbXBhdGlibGVcbiAgLy8gd2l0aCBTdHJpY3RNb2RlIHNlbWFudGljcy5cblxuICBzdG9yZVN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmZvckVhY2goY2xlYW51cCA9PiBjbGVhbnVwKCkpO1xuICBzdG9yZVN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmNsZWFyKCk7XG4gIHJldHVybiBzdG9yZVN0YXRlO1xufVxuXG5sZXQgbmV4dElEID0gMDtcblxuZnVuY3Rpb24gUmVjb2lsUm9vdF9JTlRFUk5BTCh7XG4gIGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVELFxuICBpbml0aWFsaXplU3RhdGUsXG4gIHN0b3JlX0lOVEVSTkFMOiBzdG9yZVByb3AsXG4gIC8vIEZvciB1c2Ugd2l0aCBSZWFjdCBcImNvbnRleHQgYnJpZGdpbmdcIlxuICBjaGlsZHJlblxufSkge1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgLy8gQGZiLW9ubHk6IHVzZUVmZmVjdCgoKSA9PiB7XG4gIC8vIEBmYi1vbmx5OiBpZiAoZ2t4KCdyZWNvaWxfdXNhZ2VfbG9nZ2luZycpKSB7XG4gIC8vIEBmYi1vbmx5OiB0cnkge1xuICAvLyBAZmItb25seTogUmVjb2lsVXNhZ2VMb2dGYWxjb0V2ZW50LmxvZygoKSA9PiAoe1xuICAvLyBAZmItb25seTogdHlwZTogUmVjb2lsdXNhZ2Vsb2dFdmVudC5SRUNPSUxfUk9PVF9NT1VOVEVELFxuICAvLyBAZmItb25seTogcGF0aDogVVJJLmdldFJlcXVlc3RVUkkoKS5nZXRQYXRoKCksXG4gIC8vIEBmYi1vbmx5OiB9KSk7XG4gIC8vIEBmYi1vbmx5OiB9IGNhdGNoIHtcbiAgLy8gQGZiLW9ubHk6IHJlY292ZXJhYmxlVmlvbGF0aW9uKFxuICAvLyBAZmItb25seTogJ0Vycm9yIHdoZW4gbG9nZ2luZyBSZWNvaWwgVXNhZ2UgZXZlbnQnLFxuICAvLyBAZmItb25seTogJ3JlY29pbCcsXG4gIC8vIEBmYi1vbmx5OiApO1xuICAvLyBAZmItb25seTogfVxuICAvLyBAZmItb25seTogfVxuICAvLyBAZmItb25seTogfSwgW10pO1xuICBsZXQgc3RvcmVTdGF0ZVJlZjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItY29uc3RcblxuICBjb25zdCBnZXRHcmFwaCA9IHZlcnNpb24gPT4ge1xuICAgIGNvbnN0IGdyYXBocyA9IHN0b3JlU3RhdGVSZWYuY3VycmVudC5ncmFwaHNCeVZlcnNpb247XG5cbiAgICBpZiAoZ3JhcGhzLmhhcyh2ZXJzaW9uKSkge1xuICAgICAgcmV0dXJuIFJlY29pbF9udWxsdGhyb3dzKGdyYXBocy5nZXQodmVyc2lvbikpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0dyYXBoID0gZ3JhcGgkMigpO1xuICAgIGdyYXBocy5zZXQodmVyc2lvbiwgbmV3R3JhcGgpO1xuICAgIHJldHVybiBuZXdHcmFwaDtcbiAgfTtcblxuICBjb25zdCBzdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyA9IChjYWxsYmFjaywga2V5KSA9PiB7XG4gICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICAvLyBHbG9iYWwgdHJhbnNhY3Rpb24gc3Vic2NyaXB0aW9uc1xuICAgICAgY29uc3Qge1xuICAgICAgICB0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnNcbiAgICAgIH0gPSBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCk7XG4gICAgICBjb25zdCBpZCA9IG5leHRJRCsrO1xuICAgICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLnNldChpZCwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVsZWFzZTogKCkgPT4ge1xuICAgICAgICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5kZWxldGUoaWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb2RlLXNwZWNpZmljIHRyYW5zYWN0aW9uIHN1YnNjcmlwdGlvbnM6XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnNcbiAgICAgIH0gPSBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCk7XG5cbiAgICAgIGlmICghbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5oYXMoa2V5KSkge1xuICAgICAgICBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLnNldChrZXksIG5ldyBNYXAoKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlkID0gbmV4dElEKys7XG4gICAgICBSZWNvaWxfbnVsbHRocm93cyhub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLmdldChrZXkpKS5zZXQoaWQsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJzID0gbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcblxuICAgICAgICAgIGlmIChzdWJzKSB7XG4gICAgICAgICAgICBzdWJzLmRlbGV0ZShpZCk7XG5cbiAgICAgICAgICAgIGlmIChzdWJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZFRyYW5zYWN0aW9uTWV0YWRhdGEgPSBtZXRhZGF0YSA9PiB7XG4gICAgc3RhcnROZXh0VHJlZUlmTmVlZGVkKHN0b3JlUmVmLmN1cnJlbnQpO1xuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKG1ldGFkYXRhKSkge1xuICAgICAgUmVjb2lsX251bGx0aHJvd3Moc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpLm5leHRUcmVlKS50cmFuc2FjdGlvbk1ldGFkYXRhW2tdID0gbWV0YWRhdGFba107XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlcGxhY2VTdGF0ZSA9IHJlcGxhY2VyID0+IHtcbiAgICBzdGFydE5leHRUcmVlSWZOZWVkZWQoc3RvcmVSZWYuY3VycmVudCk7IC8vIFVzZSByZXBsYWNlciB0byBnZXQgdGhlIG5leHQgc3RhdGU6XG5cbiAgICBjb25zdCBuZXh0VHJlZSA9IFJlY29pbF9udWxsdGhyb3dzKHN0b3JlU3RhdGVSZWYuY3VycmVudC5uZXh0VHJlZSk7XG4gICAgbGV0IHJlcGxhY2VkO1xuXG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQgPSB0cnVlO1xuICAgICAgcmVwbGFjZWQgPSByZXBsYWNlcihuZXh0VHJlZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZWQgPT09IG5leHRUcmVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy4kcmVjb2lsRGVidWdTdGF0ZXMucHVzaChyZXBsYWNlZCk7IC8vIFRPRE8gdGhpcyBzaG91bGRuJ3QgaGFwcGVuIGhlcmUgYmVjYXVzZSBpdCdzIG5vdCBiYXRjaGVkXG4gICAgICB9XG4gICAgfSAvLyBTYXZlIGNoYW5nZXMgdG8gbmV4dFRyZWUgYW5kIHNjaGVkdWxlIGEgUmVhY3QgdXBkYXRlOlxuXG5cbiAgICBzdG9yZVN0YXRlUmVmLmN1cnJlbnQubmV4dFRyZWUgPSByZXBsYWNlZDtcblxuICAgIGlmIChyZWFjdE1vZGUkMigpLmVhcmx5KSB7XG4gICAgICBub3RpZnlDb21wb25lbnRzKHN0b3JlUmVmLmN1cnJlbnQsIHN0b3JlU3RhdGVSZWYuY3VycmVudCwgcmVwbGFjZWQpO1xuICAgIH1cblxuICAgIFJlY29pbF9udWxsdGhyb3dzKG5vdGlmeUJhdGNoZXJPZkNoYW5nZS5jdXJyZW50KSgpO1xuICB9O1xuXG4gIGNvbnN0IG5vdGlmeUJhdGNoZXJPZkNoYW5nZSA9IHVzZVJlZiQxKG51bGwpO1xuICBjb25zdCBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UgPSB1c2VDYWxsYmFjayh4ID0+IHtcbiAgICBub3RpZnlCYXRjaGVyT2ZDaGFuZ2UuY3VycmVudCA9IHg7XG4gIH0sIFtub3RpZnlCYXRjaGVyT2ZDaGFuZ2VdKTtcbiAgY29uc3Qgc3RvcmVSZWYgPSBSZWNvaWxfdXNlUmVmSW5pdE9uY2UoKCkgPT4gc3RvcmVQcm9wICE9PSBudWxsICYmIHN0b3JlUHJvcCAhPT0gdm9pZCAwID8gc3RvcmVQcm9wIDoge1xuICAgIHN0b3JlSUQ6IGdldE5leHRTdG9yZUlEJDIoKSxcbiAgICBnZXRTdGF0ZTogKCkgPT4gc3RvcmVTdGF0ZVJlZi5jdXJyZW50LFxuICAgIHJlcGxhY2VTdGF0ZSxcbiAgICBnZXRHcmFwaCxcbiAgICBzdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyxcbiAgICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhXG4gIH0pO1xuXG4gIGlmIChzdG9yZVByb3AgIT0gbnVsbCkge1xuICAgIHN0b3JlUmVmLmN1cnJlbnQgPSBzdG9yZVByb3A7XG4gIH1cblxuICBzdG9yZVN0YXRlUmVmID0gUmVjb2lsX3VzZVJlZkluaXRPbmNlKCgpID0+IGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVEICE9IG51bGwgPyBpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEKHN0b3JlUmVmLmN1cnJlbnQsIGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVEKSA6IGluaXRpYWxpemVTdGF0ZSAhPSBudWxsID8gaW5pdGlhbFN0b3JlU3RhdGUoaW5pdGlhbGl6ZVN0YXRlKSA6IG1ha2VFbXB0eVN0b3JlU3RhdGUkMigpKTtcbiAgY29uc3QgbXV0YWJsZVNvdXJjZSA9IHVzZU1lbW8oKCkgPT4gY3JlYXRlTXV0YWJsZVNvdXJjZSQxID09PSBudWxsIHx8IGNyZWF0ZU11dGFibGVTb3VyY2UkMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3JlYXRlTXV0YWJsZVNvdXJjZSQxKHN0b3JlU3RhdGVSZWYsICgpID0+IHN0b3JlU3RhdGVSZWYuY3VycmVudC5jdXJyZW50VHJlZS52ZXJzaW9uKSwgW3N0b3JlU3RhdGVSZWZdKTsgLy8gQ2xlYW51cCB3aGVuIHRoZSA8UmVjb2lsUm9vdD4gaXMgdW5tb3VudGVkXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBSZWFjdCBpcyBmcmVlIHRvIGNhbGwgZWZmZWN0IGNsZWFudXAgaGFuZGxlcnMgYW5kIGVmZmVjdHMgYXQgd2lsbCwgdGhlXG4gICAgLy8gZGVwcyBhcnJheSBpcyBvbmx5IGFuIG9wdGltaXphdGlvbi4gIEZvciBleGFtcGxlLCBSZWFjdCBzdHJpY3QgbW9kZVxuICAgIC8vIHdpbGwgZXhlY3V0ZSBlYWNoIGVmZmVjdCB0d2ljZSBmb3IgdGVzdGluZy4gIFRoZXJlZm9yZSwgd2UgbmVlZCBzeW1tZXRyeVxuICAgIC8vIHRvIHJlLWluaXRpYWxpemUgYWxsIGtub3duIGF0b21zIGFmdGVyIHRoZXkgd2VyZSBjbGVhbmVkIHVwLlxuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcblxuICAgIGZvciAoY29uc3QgYXRvbUtleSBvZiBuZXcgU2V0KHN0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcykpIHtcbiAgICAgIGluaXRpYWxpemVOb2RlJDIoc3RvcmUsIGF0b21LZXksICdnZXQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBhdG9tS2V5IG9mIHN0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcykge1xuICAgICAgICBjbGVhblVwTm9kZSQyKHN0b3JlLCBhdG9tS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbc3RvcmVSZWZdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KEFwcENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RvcmVSZWZcbiAgfSwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoTXV0YWJsZVNvdXJjZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbXV0YWJsZVNvdXJjZVxuICB9LCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChCYXRjaGVyLCB7XG4gICAgc2V0Tm90aWZ5QmF0Y2hlck9mQ2hhbmdlOiBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2VcbiAgfSksIGNoaWxkcmVuKSk7XG59XG5cbmZ1bmN0aW9uIFJlY29pbFJvb3QocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG92ZXJyaWRlLFxuICAgIC4uLnByb3BzRXhjZXB0T3ZlcnJpZGVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBhbmNlc3RvclN0b3JlUmVmID0gdXNlU3RvcmVSZWYoKTtcblxuICBpZiAob3ZlcnJpZGUgPT09IGZhbHNlICYmIGFuY2VzdG9yU3RvcmVSZWYuY3VycmVudCAhPT0gZGVmYXVsdFN0b3JlKSB7XG4gICAgLy8gSWYgYW5jZXN0b3JTdG9yZVJlZi5jdXJyZW50ICE9PSBkZWZhdWx0U3RvcmUsIGl0IG1lYW5zIHRoYXQgdGhpc1xuICAgIC8vIFJlY29pbFJvb3QgaXMgbm90IG5lc3RlZCB3aXRoaW4gYW5vdGhlci5cbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVjb2lsUm9vdF9JTlRFUk5BTCwgcHJvcHNFeGNlcHRPdmVycmlkZSk7XG59XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFN0b3JlSUQoKSB7XG4gIHJldHVybiB1c2VTdG9yZVJlZigpLmN1cnJlbnQuc3RvcmVJRDtcbn1cblxudmFyIFJlY29pbF9SZWNvaWxSb290ID0ge1xuICBSZWNvaWxSb290LFxuICB1c2VTdG9yZVJlZixcbiAgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSxcbiAgdXNlUmVjb2lsU3RvcmVJRCxcbiAgbm90aWZ5Q29tcG9uZW50c19GT1JfVEVTVElORzogbm90aWZ5Q29tcG9uZW50cyxcbiAgc2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zX0ZPUl9URVNUSU5HOiBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBzaGFsbG93QXJyYXlFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBSZWNvaWxfc2hhbGxvd0FycmF5RXF1YWwgPSBzaGFsbG93QXJyYXlFcXVhbDtcblxuY29uc3Qge1xuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQxLFxuICB1c2VSZWY6IHVzZVJlZiQyXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIHVzZVByZXZpb3VzKHZhbHVlKSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZiQyKCk7XG4gIHVzZUVmZmVjdCQxKCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG52YXIgUmVjb2lsX3VzZVByZXZpb3VzID0gdXNlUHJldmlvdXM7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDFcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuY29uc3Qge1xuICBTVVNQRU5TRV9USU1FT1VUX01TOiBTVVNQRU5TRV9USU1FT1VUX01TJDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIHVwZGF0ZVJldGFpbkNvdW50OiB1cGRhdGVSZXRhaW5Db3VudCQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBSZXRlbnRpb25ab25lOiBSZXRlbnRpb25ab25lJDNcbn0gPSBSZWNvaWxfUmV0ZW50aW9uWm9uZTtcblxuY29uc3Qge1xuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQyLFxuICB1c2VSZWY6IHVzZVJlZiQzXG59ID0gcmVhY3Q7XG5cbmNvbnN0IHtcbiAgaXNTU1I6IGlzU1NSJDJcbn0gPSBSZWNvaWxfRW52aXJvbm1lbnQ7XG5cblxuXG5cblxuIC8vIEkgZG9uJ3Qgc2VlIGEgd2F5IHRvIGF2b2lkIHRoZSBhbnkgdHlwZSBoZXJlIGJlY2F1c2Ugd2Ugd2FudCB0byBhY2NlcHQgcmVhZGFibGVcbi8vIGFuZCB3cml0YWJsZSB2YWx1ZXMgd2l0aCBhbnkgdHlwZSBwYXJhbWV0ZXIsIGJ1dCBub3JtYWxseSB3aXRoIHdyaXRhYmxlIG9uZXNcbi8vIFJlY29pbFN0YXRlPFNvbWVUPiBpcyBub3QgYSBzdWJ0eXBlIG9mIFJlY29pbFN0YXRlPG1peGVkPi5cblxuXG4vLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbmZ1bmN0aW9uIHVzZVJldGFpbih0b1JldGFpbikge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuXG5cbiAgcmV0dXJuIHVzZVJldGFpbl9BQ1RVQUwodG9SZXRhaW4pO1xufVxuXG5mdW5jdGlvbiB1c2VSZXRhaW5fQUNUVUFMKHRvUmV0YWluKSB7XG4gIGNvbnN0IGFycmF5ID0gQXJyYXkuaXNBcnJheSh0b1JldGFpbikgPyB0b1JldGFpbiA6IFt0b1JldGFpbl07XG4gIGNvbnN0IHJldGFpbmFibGVzID0gYXJyYXkubWFwKGEgPT4gYSBpbnN0YW5jZW9mIFJldGVudGlvblpvbmUkMyA/IGEgOiBhLmtleSk7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICB1c2VFZmZlY3QkMigoKSA9PiB7XG4gICAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50ICYmICFpc1NTUiQyKSB7XG4gICAgICAvLyBBbHJlYWR5IHBlcmZvcm1lZCBhIHRlbXBvcmFyeSByZXRhaW4gb24gcmVuZGVyLCBzaW1wbHkgY2FuY2VsIHRoZSByZWxlYXNlXG4gICAgICAvLyBvZiB0aGF0IHRlbXBvcmFyeSByZXRhaW4uXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMihzdG9yZSwgciwgLTEpO1xuICAgICAgfVxuICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICB9LCBbc3RvcmVSZWYsIC4uLnJldGFpbmFibGVzXSk7IC8vIFdlIHdhbnQgdG8gcmV0YWluIGlmIHRoZSBjb21wb25lbnQgc3VzcGVuZHMuIFRoaXMgaXMgdGVycmlibGUgYnV0IHRoZSBTdXNwZW5zZVxuICAvLyBBUEkgYWZmb3JkcyB1cyBubyBiZXR0ZXIgb3B0aW9uLiBJZiB3ZSBzdXNwZW5kIGFuZCBuZXZlciBjb21taXQgYWZ0ZXIgc29tZVxuICAvLyBzZWNvbmRzLCB0aGVuIHJlbGVhc2UuIFRoZSAnYWN0dWFsJyByZXRhaW4vcmVsZWFzZSBpbiB0aGUgZWZmZWN0IGFib3ZlXG4gIC8vIGNhbmNlbHMgdGhpcy5cblxuICBjb25zdCB0aW1lb3V0SUQgPSB1c2VSZWYkMygpO1xuICBjb25zdCBwcmV2aW91c1JldGFpbmFibGVzID0gUmVjb2lsX3VzZVByZXZpb3VzKHJldGFpbmFibGVzKTtcblxuICBpZiAoIWlzU1NSJDIgJiYgKHByZXZpb3VzUmV0YWluYWJsZXMgPT09IHVuZGVmaW5lZCB8fCAhUmVjb2lsX3NoYWxsb3dBcnJheUVxdWFsKHByZXZpb3VzUmV0YWluYWJsZXMsIHJldGFpbmFibGVzKSkpIHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG5cbiAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c1JldGFpbmFibGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcHJldmlvdXNSZXRhaW5hYmxlcykge1xuICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQyKHN0b3JlLCByLCAtMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50KSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICB9XG5cbiAgICB0aW1lb3V0SUQuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIC0xKTtcbiAgICAgIH1cbiAgICB9LCBTVVNQRU5TRV9USU1FT1VUX01TJDEpO1xuICB9XG59XG5cbnZhciBSZWNvaWxfdXNlUmV0YWluID0gdXNlUmV0YWluO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTkgR2VvcmcgVGF2b25pdXNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuY29uc3QgVU5LTk9XTl9GVU5DVElPTiA9ICc8dW5rbm93bj4nO1xuLyoqXG4gKiBUaGlzIHBhcnNlcyB0aGUgZGlmZmVyZW50IHN0YWNrIHRyYWNlcyBhbmQgcHV0cyB0aGVtIGludG8gb25lIGZvcm1hdFxuICogVGhpcyBib3Jyb3dzIGhlYXZpbHkgZnJvbSBUcmFjZUtpdCAoaHR0cHM6Ly9naXRodWIuY29tL2Nzbm92ZXIvVHJhY2VLaXQpXG4gKi9cblxuZnVuY3Rpb24gc3RhY2tUcmFjZVBhcnNlcihzdGFja1N0cmluZykge1xuICBjb25zdCBsaW5lcyA9IHN0YWNrU3RyaW5nLnNwbGl0KCdcXG4nKTtcbiAgcmV0dXJuIGxpbmVzLnJlZHVjZSgoc3RhY2ssIGxpbmUpID0+IHtcbiAgICBjb25zdCBwYXJzZVJlc3VsdCA9IHBhcnNlQ2hyb21lKGxpbmUpIHx8IHBhcnNlV2luanMobGluZSkgfHwgcGFyc2VHZWNrbyhsaW5lKSB8fCBwYXJzZU5vZGUobGluZSkgfHwgcGFyc2VKU0MobGluZSk7XG5cbiAgICBpZiAocGFyc2VSZXN1bHQpIHtcbiAgICAgIHN0YWNrLnB1c2gocGFyc2VSZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFjaztcbiAgfSwgW10pO1xufVxuXG5jb25zdCBjaHJvbWVSZSA9IC9eXFxzKmF0ICguKj8pID9cXCgoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWUtZXh0ZW5zaW9ufG5hdGl2ZXxldmFsfHdlYnBhY2t8PGFub255bW91cz58XFwvfFthLXpdOlxcXFx8XFxcXFxcXFwpLio/KSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xcKT9cXHMqJC9pO1xuY29uc3QgY2hyb21lRXZhbFJlID0gL1xcKChcXFMqKSg/OjooXFxkKykpKD86OihcXGQrKSlcXCkvO1xuXG5mdW5jdGlvbiBwYXJzZUNocm9tZShsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gY2hyb21lUmUuZXhlYyhsaW5lKTtcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBpc05hdGl2ZSA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ25hdGl2ZScpID09PSAwOyAvLyBzdGFydCBvZiBsaW5lXG5cbiAgY29uc3QgaXNFdmFsID0gcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignZXZhbCcpID09PSAwOyAvLyBzdGFydCBvZiBsaW5lXG5cbiAgY29uc3Qgc3VibWF0Y2ggPSBjaHJvbWVFdmFsUmUuZXhlYyhwYXJ0c1syXSk7XG5cbiAgaWYgKGlzRXZhbCAmJiBzdWJtYXRjaCAhPSBudWxsKSB7XG4gICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lL2NvbHVtbiBudW1iZXJcbiAgICBwYXJ0c1syXSA9IHN1Ym1hdGNoWzFdOyAvLyB1cmxcblxuICAgIHBhcnRzWzNdID0gc3VibWF0Y2hbMl07IC8vIGxpbmVcblxuICAgIHBhcnRzWzRdID0gc3VibWF0Y2hbM107IC8vIGNvbHVtblxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlOiAhaXNOYXRpdmUgPyBwYXJ0c1syXSA6IG51bGwsXG4gICAgbWV0aG9kTmFtZTogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICBhcmd1bWVudHM6IGlzTmF0aXZlID8gW3BhcnRzWzJdXSA6IFtdLFxuICAgIGxpbmVOdW1iZXI6IHBhcnRzWzNdID8gK3BhcnRzWzNdIDogbnVsbCxcbiAgICBjb2x1bW46IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbFxuICB9O1xufVxuXG5jb25zdCB3aW5qc1JlID0gL15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pPy4rKSApP1xcKD8oKD86ZmlsZXxtcy1hcHB4fGh0dHBzP3x3ZWJwYWNrfGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7XG5cbmZ1bmN0aW9uIHBhcnNlV2luanMobGluZSkge1xuICBjb25zdCBwYXJ0cyA9IHdpbmpzUmUuZXhlYyhsaW5lKTtcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGU6IHBhcnRzWzJdLFxuICAgIG1ldGhvZE5hbWU6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgYXJndW1lbnRzOiBbXSxcbiAgICBsaW5lTnVtYmVyOiArcGFydHNbM10sXG4gICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGxcbiAgfTtcbn1cblxuY29uc3QgZ2Vja29SZSA9IC9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCkoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWV8d2VicGFja3xyZXNvdXJjZXxcXFtuYXRpdmUpLio/fFteQF0qYnVuZGxlKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2k7XG5jb25zdCBnZWNrb0V2YWxSZSA9IC8oXFxTKykgbGluZSAoXFxkKykoPzogPiBldmFsIGxpbmUgXFxkKykqID4gZXZhbC9pO1xuXG5mdW5jdGlvbiBwYXJzZUdlY2tvKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBnZWNrb1JlLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFwYXJ0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgaXNFdmFsID0gcGFydHNbM10gJiYgcGFydHNbM10uaW5kZXhPZignID4gZXZhbCcpID4gLTE7XG4gIGNvbnN0IHN1Ym1hdGNoID0gZ2Vja29FdmFsUmUuZXhlYyhwYXJ0c1szXSk7XG5cbiAgaWYgKGlzRXZhbCAmJiBzdWJtYXRjaCAhPSBudWxsKSB7XG4gICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lIG51bWJlclxuICAgIHBhcnRzWzNdID0gc3VibWF0Y2hbMV07XG4gICAgcGFydHNbNF0gPSBzdWJtYXRjaFsyXTtcbiAgICBwYXJ0c1s1XSA9IG51bGw7IC8vIG5vIGNvbHVtbiB3aGVuIGV2YWxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZTogcGFydHNbM10sXG4gICAgbWV0aG9kTmFtZTogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICBhcmd1bWVudHM6IHBhcnRzWzJdID8gcGFydHNbMl0uc3BsaXQoJywnKSA6IFtdLFxuICAgIGxpbmVOdW1iZXI6IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbCxcbiAgICBjb2x1bW46IHBhcnRzWzVdID8gK3BhcnRzWzVdIDogbnVsbFxuICB9O1xufVxuXG5jb25zdCBqYXZhU2NyaXB0Q29yZVJlID0gL15cXHMqKD86KFteQF0qKSg/OlxcKCguKj8pXFwpKT9AKT8oXFxTLio/KTooXFxkKykoPzo6KFxcZCspKT9cXHMqJC9pO1xuXG5mdW5jdGlvbiBwYXJzZUpTQyhsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gamF2YVNjcmlwdENvcmVSZS5leGVjKGxpbmUpO1xuXG4gIGlmICghcGFydHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZTogcGFydHNbM10sXG4gICAgbWV0aG9kTmFtZTogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICBhcmd1bWVudHM6IFtdLFxuICAgIGxpbmVOdW1iZXI6ICtwYXJ0c1s0XSxcbiAgICBjb2x1bW46IHBhcnRzWzVdID8gK3BhcnRzWzVdIDogbnVsbFxuICB9O1xufVxuXG5jb25zdCBub2RlUmUgPSAvXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/W15cXFxcL10rKD86IFxcW2FzIFxcUytcXF0pPykgKT9cXCg/KC4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7XG5cbmZ1bmN0aW9uIHBhcnNlTm9kZShsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gbm9kZVJlLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFwYXJ0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlOiBwYXJ0c1syXSxcbiAgICBtZXRob2ROYW1lOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgIGFyZ3VtZW50czogW10sXG4gICAgbGluZU51bWJlcjogK3BhcnRzWzNdLFxuICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsXG4gIH07XG59XG5cbnZhciBSZWNvaWxfc3RhY2tUcmFjZVBhcnNlciA9IHN0YWNrVHJhY2VQYXJzZXI7XG5cbmNvbnN0IHtcbiAgdXNlUmVmOiB1c2VSZWYkNFxufSA9IHJlYWN0O1xuXG5cblxuXG5cbmZ1bmN0aW9uIHVzZUNvbXBvbmVudE5hbWUoKSB7XG4gIGNvbnN0IG5hbWVSZWYgPSB1c2VSZWYkNCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoUmVjb2lsX2dreCgncmVjb2lsX2luZmVyX2NvbXBvbmVudF9uYW1lcycpKSB7XG4gICAgICB2YXIgX25hbWVSZWYkY3VycmVudDtcblxuICAgICAgaWYgKG5hbWVSZWYuY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGJsZXNzZWQgd2F5IHRvIGRldGVybWluZSB0aGUgY2FsbGluZyBSZWFjdCBjb21wb25lbnQgZnJvbVxuICAgICAgICAvLyB3aXRoaW4gYSBob29rLiBUaGlzIGhhY2sgdXNlcyB0aGUgZmFjdCB0aGF0IGhvb2tzIG11c3Qgc3RhcnQgd2l0aCAndXNlJ1xuICAgICAgICAvLyBhbmQgdGhhdCBob29rcyBhcmUgZWl0aGVyIGNhbGxlZCBieSBSZWFjdCBDb21wb25lbnRzIG9yIG90aGVyIGhvb2tzLiBJdFxuICAgICAgICAvLyBmb2xsb3dzIHRoZXJlZm9yZSwgdGhhdCB0byBmaW5kIHRoZSBjYWxsaW5nIGNvbXBvbmVudCwgeW91IHNpbXBseSBuZWVkXG4gICAgICAgIC8vIHRvIGxvb2sgZG93biB0aGUgc3RhY2sgYW5kIGZpbmQgdGhlIGZpcnN0IGZ1bmN0aW9uIHdoaWNoIGRvZXNuJ3Qgc3RhcnRcbiAgICAgICAgLy8gd2l0aCAndXNlJy4gV2UgYXJlIG9ubHkgZW5hYmxpbmcgdGhpcyBpbiBkZXYgZm9yIG5vdywgc2luY2Ugb25jZSB0aGVcbiAgICAgICAgLy8gY29kZWJhc2UgaXMgbWluaWZpZWQsIHRoZSBuYW1pbmcgYXNzdW1wdGlvbnMgbm8gbG9uZ2VyIGhvbGQgdHJ1ZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9uby1uZXctZXJyb3JcbiAgICAgICAgY29uc3QgZnJhbWVzID0gUmVjb2lsX3N0YWNrVHJhY2VQYXJzZXIobmV3IEVycm9yKCkuc3RhY2spO1xuXG4gICAgICAgIGZvciAoY29uc3Qge1xuICAgICAgICAgIG1ldGhvZE5hbWVcbiAgICAgICAgfSBvZiBmcmFtZXMpIHtcbiAgICAgICAgICAvLyBJIG9ic2VydmVkIGNhc2VzIHdoZXJlIHRoZSBmcmFtZSB3YXMgb2YgdGhlIGZvcm0gJ09iamVjdC51c2VYWFgnXG4gICAgICAgICAgLy8gaGVuY2Ugd2h5IEknbSBzZWFyY2hpbmcgZm9yIGhvb2tzIGZvbGxvd2luZyBhIHdvcmQgYm91bmRhcnlcbiAgICAgICAgICBpZiAoIW1ldGhvZE5hbWUubWF0Y2goL1xcYnVzZVteXFxiXSskLykpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lUmVmLmN1cnJlbnQgPSBtZXRob2ROYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWVSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoX25hbWVSZWYkY3VycmVudCA9IG5hbWVSZWYuY3VycmVudCkgIT09IG51bGwgJiYgX25hbWVSZWYkY3VycmVudCAhPT0gdm9pZCAwID8gX25hbWVSZWYkY3VycmVudCA6ICc8dW5hYmxlIHRvIGRldGVybWluZSBjb21wb25lbnQgbmFtZT4nO1xuICAgIH1cbiAgfSAvLyBAZmItb25seTogcmV0dXJuIFwiPGNvbXBvbmVudCBuYW1lIG9ubHkgYXZhaWxhYmxlIHdoZW4gYm90aCBpbiBkZXYgbW9kZSBhbmQgd2hlbiBwYXNzaW5nIEdLICdyZWNvaWxfaW5mZXJfY29tcG9uZW50X25hbWVzJz5cIjtcblxuXG4gIHJldHVybiAnPGNvbXBvbmVudCBuYW1lIG5vdCBhdmFpbGFibGU+JzsgLy8gQG9zcy1vbmx5XG59XG5cbnZhciBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSA9IHVzZUNvbXBvbmVudE5hbWU7XG5cbmNvbnN0IHtcbiAgYmF0Y2hVcGRhdGVzOiBiYXRjaFVwZGF0ZXMkMlxufSA9IFJlY29pbF9CYXRjaGluZztcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDJcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICByZWFjdE1vZGU6IHJlYWN0TW9kZSQzLFxuICB1c2VNdXRhYmxlU291cmNlOiB1c2VNdXRhYmxlU291cmNlJDEsXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxXG59ID0gUmVjb2lsX1JlYWN0TW9kZTtcblxuY29uc3Qge1xuICB1c2VSZWNvaWxNdXRhYmxlU291cmNlOiB1c2VSZWNvaWxNdXRhYmxlU291cmNlJDEsXG4gIHVzZVN0b3JlUmVmOiB1c2VTdG9yZVJlZiQyXG59ID0gUmVjb2lsX1JlY29pbFJvb3Q7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQyXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQzLFxuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGU6IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyLFxuICBzZXRSZWNvaWxWYWx1ZTogc2V0UmVjb2lsVmFsdWUkMixcbiAgc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZTogc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQyLFxuICBzdWJzY3JpYmVUb1JlY29pbFZhbHVlOiBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cblxuXG5jb25zdCB7XG4gIHVzZUNhbGxiYWNrOiB1c2VDYWxsYmFjayQxLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQzLFxuICB1c2VNZW1vOiB1c2VNZW1vJDEsXG4gIHVzZVJlZjogdXNlUmVmJDUsXG4gIHVzZVN0YXRlOiB1c2VTdGF0ZSQxXG59ID0gcmVhY3Q7XG5cbmNvbnN0IHtcbiAgc2V0QnlBZGRpbmdUb1NldDogc2V0QnlBZGRpbmdUb1NldCQyXG59ID0gUmVjb2lsX0NvcHlPbldyaXRlO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKSB7XG4gIC8vIFdlIGNhbid0IGp1c3QgdGhyb3cgdGhlIHByb21pc2Ugd2UgYXJlIHdhaXRpbmcgb24gdG8gU3VzcGVuc2UuICBJZiB0aGVcbiAgLy8gdXBzdHJlYW0gZGVwZW5kZW5jaWVzIGNoYW5nZSBpdCBtYXkgcHJvZHVjZSBhIHN0YXRlIGluIHdoaWNoIHRoZSBjb21wb25lbnRcbiAgLy8gY2FuIHJlbmRlciwgYnV0IGl0IHdvdWxkIHN0aWxsIGJlIHN1c3BlbmRlZCBvbiBhIFByb21pc2UgdGhhdCBtYXkgbmV2ZXIgcmVzb2x2ZS5cbiAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzO1xuICB9IGVsc2UgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCkuc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzLmFkZChyZXNvbHZlKTtcbiAgICB9KTsgLy8gJEZsb3dGaXhNZSBGbG93KHByb3AtbWlzc2luZykgZm9yIGludGVncmF0aW5nIHdpdGggdG9vbHMgdGhhdCBpbnNwZWN0IHRocm93biBwcm9taXNlcyBAZmItb25seVxuICAgIC8vIEBmYi1vbmx5OiBwcm9taXNlLmRpc3BsYXlOYW1lID0gYFJlY29pbCBTdGF0ZTogJHtyZWNvaWxWYWx1ZS5rZXl9YDtcblxuICAgIHRocm93IHByb21pc2U7XG4gIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKGBJbnZhbGlkIHZhbHVlIG9mIGxvYWRhYmxlIGF0b20gXCIke3JlY29pbFZhbHVlLmtleX1cImApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsIGhvb2tOYW1lKSB7XG4gIGlmICghaXNSZWNvaWxWYWx1ZSQyKHJlY29pbFZhbHVlKSkge1xuICAgIHRocm93IFJlY29pbF9lcnIoYEludmFsaWQgYXJndW1lbnQgdG8gJHtob29rTmFtZX06IGV4cGVjdGVkIGFuIGF0b20gb3Igc2VsZWN0b3IgYnV0IGdvdCAke1N0cmluZyhyZWNvaWxWYWx1ZSl9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYXJpb3VzIHRoaW5ncyBhcmUgYnJva2VuIHdpdGggdXNlUmVjb2lsSW50ZXJmYWNlLCBwYXJ0aWN1bGFybHkgY29uY3VycmVudFxuICogbW9kZSwgUmVhY3Qgc3RyaWN0IG1vZGUsIGFuZCBtZW1vcnkgbWFuYWdlbWVudC4gVGhleSB3aWxsIG5vdCBiZSBmaXhlZC5cbiAqICovXG5mdW5jdGlvbiB1c2VSZWNvaWxJbnRlcmZhY2VfREVQUkVDQVRFRCgpIHtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IFJlY29pbF91c2VDb21wb25lbnROYW1lKCk7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBbLCBmb3JjZVVwZGF0ZV0gPSB1c2VTdGF0ZSQxKFtdKTtcbiAgY29uc3QgcmVjb2lsVmFsdWVzVXNlZCA9IHVzZVJlZiQ1KG5ldyBTZXQoKSk7XG4gIHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCA9IG5ldyBTZXQoKTsgLy8gVHJhY2sgdGhlIFJlY29pbFZhbHVlcyB1c2VkIGp1c3QgZHVyaW5nIHRoaXMgcmVuZGVyXG5cbiAgY29uc3QgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gdXNlUmVmJDUobmV3IFNldCgpKTtcbiAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHVzZVJlZiQ1KG5ldyBNYXAoKSk7XG4gIGNvbnN0IHVuc3Vic2NyaWJlRnJvbSA9IHVzZUNhbGxiYWNrJDEoa2V5ID0+IHtcbiAgICBjb25zdCBzdWIgPSBzdWJzY3JpcHRpb25zLmN1cnJlbnQuZ2V0KGtleSk7XG5cbiAgICBpZiAoc3ViKSB7XG4gICAgICBzdWIucmVsZWFzZSgpO1xuICAgICAgc3Vic2NyaXB0aW9ucy5jdXJyZW50LmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfSwgW3N1YnNjcmlwdGlvbnNdKTtcbiAgY29uc3QgdXBkYXRlU3RhdGUgPSB1c2VDYWxsYmFjayQxKChfc3RhdGUsIGtleSkgPT4ge1xuICAgIGlmIChzdWJzY3JpcHRpb25zLmN1cnJlbnQuaGFzKGtleSkpIHtcbiAgICAgIGZvcmNlVXBkYXRlKFtdKTtcbiAgICB9XG4gIH0sIFtdKTsgLy8gRWZmZWN0IHRvIGFkZC9yZW1vdmUgc3Vic2NyaXB0aW9ucyBhcyBub2RlcyBhcmUgdXNlZFxuXG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCwgcHJldmlvdXNTdWJzY3JpcHRpb25zLmN1cnJlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb25zLmN1cnJlbnQuaGFzKGtleSkpIHtcbiAgICAgICAgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uKGBEb3VibGUgc3Vic2NyaXB0aW9uIHRvIFJlY29pbFZhbHVlIFwiJHtrZXl9XCJgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdWIgPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDMoa2V5KSwgc3RhdGUgPT4gdXBkYXRlU3RhdGUoc3RhdGUsIGtleSksIGNvbXBvbmVudE5hbWUpO1xuICAgICAgc3Vic2NyaXB0aW9ucy5jdXJyZW50LnNldChrZXksIHN1Yik7XG4gICAgICAvKipcbiAgICAgICAqIFNpbmNlIHdlJ3JlIHN1YnNjcmliaW5nIGluIGFuIGVmZmVjdCB3ZSBuZWVkIHRvIHVwZGF0ZSB0byB0aGUgbGF0ZXN0XG4gICAgICAgKiB2YWx1ZSBvZiB0aGUgYXRvbSBzaW5jZSBpdCBtYXkgaGF2ZSBjaGFuZ2VkIHNpbmNlIHdlIHJlbmRlcmVkLiBXZSBjYW5cbiAgICAgICAqIGdvIGFoZWFkIGFuZCBkbyB0aGF0IG5vdywgdW5sZXNzIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSBiYXRjaCAtLVxuICAgICAgICogaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZG8gaXQgYXQgdGhlIGVuZCBvZiB0aGUgYmF0Y2gsIGR1ZSB0byB0aGVcbiAgICAgICAqIGZvbGxvd2luZyBlZGdlIGNhc2U6IFN1cHBvc2UgYW4gYXRvbSBpcyB1cGRhdGVkIGluIGFub3RoZXIgdXNlRWZmZWN0XG4gICAgICAgKiBvZiB0aGlzIHNhbWUgY29tcG9uZW50LiBUaGVuIHRoZSBmb2xsb3dpbmcgc2VxdWVuY2Ugb2YgZXZlbnRzIG9jY3VyOlxuICAgICAgICogMS4gQXRvbSBpcyB1cGRhdGVkIGFuZCBzdWJzIGZpcmVkIChidXQgd2UgbWF5IG5vdCBiZSBzdWJzY3JpYmVkXG4gICAgICAgKiAgICB5ZXQgZGVwZW5kaW5nIG9uIG9yZGVyIG9mIGVmZmVjdHMsIHNvIHdlIG1pc3MgdGhpcykgVXBkYXRlZCB2YWx1ZVxuICAgICAgICogICAgaXMgbm93IGluIG5leHRUcmVlLCBidXQgbm90IGN1cnJlbnRUcmVlLlxuICAgICAgICogMi4gVGhpcyBlZmZlY3QgaGFwcGVucy4gV2Ugc3Vic2NyaWJlIGFuZCB1cGRhdGUuXG4gICAgICAgKiAzLiBGcm9tIHRoZSB1cGRhdGUgd2UgcmUtcmVuZGVyIGFuZCByZWFkIGN1cnJlbnRUcmVlLCB3aXRoIG9sZCB2YWx1ZS5cbiAgICAgICAqIDQuIEJhdGNoZXIncyBlZmZlY3Qgc2V0cyBjdXJyZW50VHJlZSB0byBuZXh0VHJlZS5cbiAgICAgICAqIEluIHRoaXMgc2VxdWVuY2Ugd2UgbWlzcyB0aGUgdXBkYXRlLiBUbyBhdm9pZCB0aGF0LCBhZGQgdGhlIHVwZGF0ZVxuICAgICAgICogdG8gcXVldWVkQ29tcG9uZW50Q2FsbGJhY2sgaWYgYSBiYXRjaCBpcyBpbiBwcm9ncmVzcy5cbiAgICAgICAqL1xuICAgICAgLy8gRklYTUUgZGVsZXRlIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEIHdoZW4gZGVsZXRpbmcgdXNlSW50ZXJmYWNlLlxuXG4gICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIGlmIChzdGF0ZS5uZXh0VHJlZSkge1xuICAgICAgICBzdG9yZS5nZXRTdGF0ZSgpLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELnB1c2goKCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHN0b3JlLmdldFN0YXRlKCksIGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBSZWNvaWxfZGlmZmVyZW5jZVNldHMocHJldmlvdXNTdWJzY3JpcHRpb25zLmN1cnJlbnQsIHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdW5zdWJzY3JpYmVGcm9tKGtleSk7XG4gICAgfSk7XG4gICAgcHJldmlvdXNTdWJzY3JpcHRpb25zLmN1cnJlbnQgPSByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQ7XG4gIH0pOyAvLyBFZmZlY3QgdG8gdW5zdWJzY3JpYmUgZnJvbSBhbGwgd2hlbiB1bm1vdW50aW5nXG5cbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRTdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucy5jdXJyZW50OyAvLyBSZXN0b3JlIHN1YnNjcmlwdGlvbnMgdGhhdCB3ZXJlIGNsZWFyZWQgZHVlIHRvIFN0cmljdE1vZGUgcnVubmluZyB0aGlzIGVmZmVjdCB0d2ljZVxuXG4gICAgUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCwgbmV3IFNldChjdXJyZW50U3Vic2NyaXB0aW9ucy5rZXlzKCkpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBzdWIgPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmVSZWYuY3VycmVudCwgbmV3IEFic3RyYWN0UmVjb2lsVmFsdWUkMyhrZXkpLCBzdGF0ZSA9PiB1cGRhdGVTdGF0ZShzdGF0ZSwga2V5KSwgY29tcG9uZW50TmFtZSk7XG4gICAgICBjdXJyZW50U3Vic2NyaXB0aW9ucy5zZXQoa2V5LCBzdWIpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBjdXJyZW50U3Vic2NyaXB0aW9ucy5mb3JFYWNoKChfLCBrZXkpID0+IHVuc3Vic2NyaWJlRnJvbShrZXkpKTtcbiAgfSwgW2NvbXBvbmVudE5hbWUsIHN0b3JlUmVmLCB1bnN1YnNjcmliZUZyb20sIHVwZGF0ZVN0YXRlXSk7XG4gIHJldHVybiB1c2VNZW1vJDEoKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICBmdW5jdGlvbiB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlU2V0UmVjb2lsU3RhdGUnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1ZhbHVlT3JVcGRhdGVyID0+IHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICAgICAgfTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblxuXG4gICAgZnVuY3Rpb24gdXNlUmVzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVzZXRSZWNvaWxTdGF0ZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4gc2V0UmVjb2lsVmFsdWUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgREVGQVVMVF9WQUxVRSQyKTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblxuXG4gICAgZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSkge1xuICAgICAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50LmhhcyhyZWNvaWxWYWx1ZS5rZXkpKSB7XG4gICAgICAgIHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCA9IHNldEJ5QWRkaW5nVG9TZXQkMihyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIHJlY29pbFZhbHVlLmtleSk7XG4gICAgICB9IC8vIFRPRE8gUmVzdG9yZSBvcHRpbWl6YXRpb24gdG8gbWVtb2l6ZSBsb29rdXBcblxuXG4gICAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFZhbHVlLCByZWFjdE1vZGUkMygpLmVhcmx5ID8gKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuXG5cbiAgICBmdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZGFibGUgPSB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFZhbHVlKTtcbiAgICAgIHJldHVybiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblxuXG4gICAgZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdXNlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUpLCB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSldO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuXG5cbiAgICBmdW5jdGlvbiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlKHJlY29pbFN0YXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSxcbiAgICAgIGdldFJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZTogdXNlUmVjb2lsU3RhdGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlLFxuICAgICAgZ2V0U2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlLFxuICAgICAgZ2V0UmVzZXRSZWNvaWxTdGF0ZTogdXNlUmVzZXRSZWNvaWxTdGF0ZVxuICAgIH07XG4gIH0sIFtyZWNvaWxWYWx1ZXNVc2VkLCBzdG9yZVJlZl0pO1xufVxuXG5jb25zdCByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HID0ge1xuICBjdXJyZW50OiAwXG59O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1NZTkNfRVhURVJOQUxfU1RPUkUocmVjb2lsVmFsdWUpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSgpO1xuICBjb25zdCBnZXRTbmFwc2hvdCA9IHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTI7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLmN1cnJlbnQrKztcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgdHJlZVN0YXRlID0gcmVhY3RNb2RlJDMoKS5lYXJseSA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlMiA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmUsIHJlY29pbFZhbHVlLCB0cmVlU3RhdGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsb2FkYWJsZSxcbiAgICAgIGtleTogcmVjb2lsVmFsdWUua2V5XG4gICAgfTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZV0pOyAvLyBNZW1vaXplIHRoZSBzdGF0ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSByZXJlbmRlcnNcblxuICBjb25zdCBtZW1vaXplUHJldmlvdXNTbmFwc2hvdCA9IHVzZUNhbGxiYWNrJDEoZ2V0U3RhdGUgPT4ge1xuICAgIGxldCBwcmV2U3RhdGU7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHZhciBfcHJldlN0YXRlLCBfcHJldlN0YXRlMjtcblxuICAgICAgY29uc3QgbmV4dFN0YXRlID0gZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKChfcHJldlN0YXRlID0gcHJldlN0YXRlKSAhPT0gbnVsbCAmJiBfcHJldlN0YXRlICE9PSB2b2lkIDAgJiYgX3ByZXZTdGF0ZS5sb2FkYWJsZS5pcyhuZXh0U3RhdGUubG9hZGFibGUpICYmICgoX3ByZXZTdGF0ZTIgPSBwcmV2U3RhdGUpID09PSBudWxsIHx8IF9wcmV2U3RhdGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcHJldlN0YXRlMi5rZXkpID09PSBuZXh0U3RhdGUua2V5KSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHByZXZTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBnZXRNZW1vaXplZFNuYXBzaG90ID0gdXNlTWVtbyQxKCgpID0+IG1lbW9pemVQcmV2aW91c1NuYXBzaG90KGdldFNuYXBzaG90KSwgW2dldFNuYXBzaG90LCBtZW1vaXplUHJldmlvdXNTbmFwc2hvdF0pO1xuICBjb25zdCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjayQxKG5vdGlmeSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVjb2lsVmFsdWUkMShzdG9yZSwgcmVjb2lsVmFsdWUsIG5vdGlmeSwgY29tcG9uZW50TmFtZSk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5yZWxlYXNlO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFZhbHVlLCBjb21wb25lbnROYW1lXSk7XG4gIHJldHVybiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0TWVtb2l6ZWRTbmFwc2hvdCwgLy8gZ2V0U25hcHNob3QoKVxuICBnZXRNZW1vaXplZFNuYXBzaG90IC8vIGdldFNlcnZlclNuYXBzaG90KCkgZm9yIFNTUiBzdXBwb3J0XG4gICkubG9hZGFibGU7XG59XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfTVVUQUJMRV9TT1VSQ0UocmVjb2lsVmFsdWUpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIGNvbnN0IGdldExvYWRhYmxlID0gdXNlQ2FsbGJhY2skMSgoKSA9PiB7XG4gICAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlMztcblxuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCB0cmVlU3RhdGUgPSByZWFjdE1vZGUkMygpLmVhcmx5ID8gKF9zdG9yZVN0YXRlJG5leHRUcmVlMyA9IHN0b3JlU3RhdGUubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5leHRUcmVlMyAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbmV4dFRyZWUzIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7XG4gICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlLCByZWNvaWxWYWx1ZSwgdHJlZVN0YXRlKTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZV0pO1xuICBjb25zdCBnZXRMb2FkYWJsZVdpdGhUZXN0aW5nID0gdXNlQ2FsbGJhY2skMSgoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORy5jdXJyZW50Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldExvYWRhYmxlKCk7XG4gIH0sIFtnZXRMb2FkYWJsZV0pO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgY29uc3Qgc3Vic2NyaWJlID0gdXNlQ2FsbGJhY2skMSgoX3N0b3JlU3RhdGUsIG5vdGlmeSkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIHJlY29pbFZhbHVlLCAoKSA9PiB7XG4gICAgICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9zdXBwcmVzc19yZXJlbmRlcl9pbl9jYWxsYmFjaycpKSB7XG4gICAgICAgIHJldHVybiBub3RpZnkoKTtcbiAgICAgIH0gLy8gT25seSByZS1yZW5kZXIgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLlxuICAgICAgLy8gVGhpcyB3aWxsIGV2YWx1YXRlIHRoZSBhdG9tL3NlbGVjdG9yIG5vdyBhcyB3ZWxsIGFzIHdoZW4gdGhlXG4gICAgICAvLyBjb21wb25lbnQgcmVuZGVycywgYnV0IHRoYXQgbWF5IGhlbHAgd2l0aCBwcmVmZXRjaGluZy5cblxuXG4gICAgICBjb25zdCBuZXdMb2FkYWJsZSA9IGdldExvYWRhYmxlKCk7XG5cbiAgICAgIGlmICghcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQuaXMobmV3TG9hZGFibGUpKSB7XG4gICAgICAgIG5vdGlmeSgpO1xuICAgICAgfSAvLyBJZiB0aGUgY29tcG9uZW50IGlzIHN1c3BlbmRlZCB0aGVuIHRoZSBlZmZlY3Qgc2V0dGluZyBwcmV2TG9hZGFibGVSZWZcbiAgICAgIC8vIHdpbGwgbm90IHJ1bi4gIFNvLCBzZXQgdGhlIHByZXZpb3VzIHZhbHVlIGhlcmUgd2hlbiBpdHMgc3Vic2NyaXB0aW9uXG4gICAgICAvLyBpcyBmaXJlZCB0byB3YWtlIGl0IHVwLiAgV2UgY2FuJ3QganVzdCByZWx5IG9uIHRoaXMsIHRob3VnaCwgYmVjYXVzZVxuICAgICAgLy8gdGhpcyBvbmx5IGV4ZWN1dGVzIHdoZW4gYW4gYXRvbS9zZWxlY3RvciBpcyBkaXJ0eSBhbmQgdGhlIGF0b20vc2VsZWN0b3JcbiAgICAgIC8vIHBhc3NlZCB0byB0aGUgaG9vayBjYW4gZHluYW1pY2FsbHkgY2hhbmdlLlxuXG5cbiAgICAgIHByZXZMb2FkYWJsZVJlZi5jdXJyZW50ID0gbmV3TG9hZGFibGU7XG4gICAgfSwgY29tcG9uZW50TmFtZSk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5yZWxlYXNlO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFZhbHVlLCBjb21wb25lbnROYW1lLCBnZXRMb2FkYWJsZV0pO1xuICBjb25zdCBzb3VyY2UgPSB1c2VSZWNvaWxNdXRhYmxlU291cmNlJDEoKTtcblxuICBpZiAoc291cmNlID09IG51bGwpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdSZWNvaWwgaG9va3MgbXVzdCBiZSB1c2VkIGluIGNvbXBvbmVudHMgY29udGFpbmVkIHdpdGhpbiBhIDxSZWNvaWxSb290PiBjb21wb25lbnQuJyk7XG4gIH1cblxuICBjb25zdCBsb2FkYWJsZSA9IHVzZU11dGFibGVTb3VyY2UkMShzb3VyY2UsIGdldExvYWRhYmxlV2l0aFRlc3RpbmcsIHN1YnNjcmliZSk7XG4gIGNvbnN0IHByZXZMb2FkYWJsZVJlZiA9IHVzZVJlZiQ1KGxvYWRhYmxlKTtcbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIHByZXZMb2FkYWJsZVJlZi5jdXJyZW50ID0gbG9hZGFibGU7XG4gIH0pO1xuICByZXR1cm4gbG9hZGFibGU7XG59XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUKHJlY29pbFZhbHVlKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTsgLy8gQWNjZXNzb3JzIHRvIGdldCB0aGUgY3VycmVudCBzdGF0ZVxuXG4gIGNvbnN0IGdldExvYWRhYmxlID0gdXNlQ2FsbGJhY2skMSgoKSA9PiB7XG4gICAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlNDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkcuY3VycmVudCsrO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCB0cmVlU3RhdGUgPSByZWFjdE1vZGUkMygpLmVhcmx5ID8gKF9zdG9yZVN0YXRlJG5leHRUcmVlNCA9IHN0b3JlU3RhdGUubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5leHRUcmVlNCAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbmV4dFRyZWU0IDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7XG4gICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlLCByZWNvaWxWYWx1ZSwgdHJlZVN0YXRlKTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZV0pO1xuICBjb25zdCBnZXRTdGF0ZSA9IHVzZUNhbGxiYWNrJDEoKCkgPT4gKHtcbiAgICBsb2FkYWJsZTogZ2V0TG9hZGFibGUoKSxcbiAgICBrZXk6IHJlY29pbFZhbHVlLmtleVxuICB9KSwgW2dldExvYWRhYmxlLCByZWNvaWxWYWx1ZS5rZXldKTsgLy8gTWVtb2l6ZSBzdGF0ZSBzbmFwc2hvdHNcblxuICBjb25zdCB1cGRhdGVTdGF0ZSA9IHVzZUNhbGxiYWNrJDEocHJldlN0YXRlID0+IHtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgIHJldHVybiBwcmV2U3RhdGUubG9hZGFibGUuaXMobmV4dFN0YXRlLmxvYWRhYmxlKSAmJiBwcmV2U3RhdGUua2V5ID09PSBuZXh0U3RhdGUua2V5ID8gcHJldlN0YXRlIDogbmV4dFN0YXRlO1xuICB9LCBbZ2V0U3RhdGVdKTsgLy8gU3Vic2NyaWJlIHRvIFJlY29pbCBzdGF0ZSBjaGFuZ2VzXG5cbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVjb2lsVmFsdWUkMShzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxWYWx1ZSwgX3N0YXRlID0+IHtcbiAgICAgIHNldFN0YXRlKHVwZGF0ZVN0YXRlKTtcbiAgICB9LCBjb21wb25lbnROYW1lKTsgLy8gVXBkYXRlIHN0YXRlIGluIGNhc2Ugd2UgYXJlIHVzaW5nIGEgZGlmZmVyZW50IGtleVxuXG4gICAgc2V0U3RhdGUodXBkYXRlU3RhdGUpO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb24ucmVsZWFzZTtcbiAgfSwgW2NvbXBvbmVudE5hbWUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZiwgdXBkYXRlU3RhdGVdKTsgLy8gR2V0IHRoZSBjdXJyZW50IHN0YXRlXG5cbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSQxKGdldFN0YXRlKTsgLy8gSWYgd2UgY2hhbmdlZCBrZXlzLCB0aGVuIHJldHVybiB0aGUgc3RhdGUgZm9yIHRoZSBuZXcga2V5LlxuICAvLyBUaGlzIGlzIGltcG9ydGFudCBpbiBjYXNlIHRoZSBvbGQga2V5IHdvdWxkIGNhdXNlIHRoZSBjb21wb25lbnQgdG8gc3VzcGVuZC5cbiAgLy8gV2UgZG9uJ3QgaGF2ZSB0byBzZXQgdGhlIG5ldyBzdGF0ZSBoZXJlIHNpbmNlIHRoZSBzdWJzY3JpYmluZyBlZmZlY3QgYWJvdmVcbiAgLy8gd2lsbCBkbyB0aGF0LlxuXG4gIHJldHVybiBzdGF0ZS5rZXkgIT09IHJlY29pbFZhbHVlLmtleSA/IGdldFN0YXRlKCkubG9hZGFibGUgOiBzdGF0ZS5sb2FkYWJsZTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kocmVjb2lsVmFsdWUpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIGNvbnN0IFssIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlJDEoW10pO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgY29uc3QgZ2V0TG9hZGFibGUgPSB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWU1O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORy5jdXJyZW50Kys7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHRyZWVTdGF0ZSA9IHJlYWN0TW9kZSQzKCkuZWFybHkgPyAoX3N0b3JlU3RhdGUkbmV4dFRyZWU1ID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWU1ICE9PSB2b2lkIDAgPyBfc3RvcmVTdGF0ZSRuZXh0VHJlZTUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmUsIHJlY29pbFZhbHVlLCB0cmVlU3RhdGUpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFZhbHVlXSk7XG4gIGNvbnN0IGxvYWRhYmxlID0gZ2V0TG9hZGFibGUoKTtcbiAgY29uc3QgcHJldkxvYWRhYmxlUmVmID0gdXNlUmVmJDUobG9hZGFibGUpO1xuICB1c2VFZmZlY3QkMygoKSA9PiB7XG4gICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBsb2FkYWJsZTtcbiAgfSk7XG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCByZWNvaWxWYWx1ZSwgX3N0YXRlID0+IHtcbiAgICAgIHZhciBfcHJldkxvYWRhYmxlUmVmJGN1cnI7XG5cbiAgICAgIGlmICghUmVjb2lsX2dreCgncmVjb2lsX3N1cHByZXNzX3JlcmVuZGVyX2luX2NhbGxiYWNrJykpIHtcbiAgICAgICAgcmV0dXJuIGZvcmNlVXBkYXRlKFtdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBnZXRMb2FkYWJsZSgpO1xuXG4gICAgICBpZiAoISgoX3ByZXZMb2FkYWJsZVJlZiRjdXJyID0gcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQpICE9PSBudWxsICYmIF9wcmV2TG9hZGFibGVSZWYkY3VyciAhPT0gdm9pZCAwICYmIF9wcmV2TG9hZGFibGVSZWYkY3Vyci5pcyhuZXdMb2FkYWJsZSkpKSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKG5ld0xvYWRhYmxlKTtcbiAgICAgIH1cblxuICAgICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBuZXdMb2FkYWJsZTtcbiAgICB9LCBjb21wb25lbnROYW1lKTtcbiAgICAvKipcbiAgICAgKiBTaW5jZSB3ZSdyZSBzdWJzY3JpYmluZyBpbiBhbiBlZmZlY3Qgd2UgbmVlZCB0byB1cGRhdGUgdG8gdGhlIGxhdGVzdFxuICAgICAqIHZhbHVlIG9mIHRoZSBhdG9tIHNpbmNlIGl0IG1heSBoYXZlIGNoYW5nZWQgc2luY2Ugd2UgcmVuZGVyZWQuIFdlIGNhblxuICAgICAqIGdvIGFoZWFkIGFuZCBkbyB0aGF0IG5vdywgdW5sZXNzIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSBiYXRjaCAtLVxuICAgICAqIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRvIGl0IGF0IHRoZSBlbmQgb2YgdGhlIGJhdGNoLCBkdWUgdG8gdGhlXG4gICAgICogZm9sbG93aW5nIGVkZ2UgY2FzZTogU3VwcG9zZSBhbiBhdG9tIGlzIHVwZGF0ZWQgaW4gYW5vdGhlciB1c2VFZmZlY3RcbiAgICAgKiBvZiB0aGlzIHNhbWUgY29tcG9uZW50LiBUaGVuIHRoZSBmb2xsb3dpbmcgc2VxdWVuY2Ugb2YgZXZlbnRzIG9jY3VyOlxuICAgICAqIDEuIEF0b20gaXMgdXBkYXRlZCBhbmQgc3VicyBmaXJlZCAoYnV0IHdlIG1heSBub3QgYmUgc3Vic2NyaWJlZFxuICAgICAqICAgIHlldCBkZXBlbmRpbmcgb24gb3JkZXIgb2YgZWZmZWN0cywgc28gd2UgbWlzcyB0aGlzKSBVcGRhdGVkIHZhbHVlXG4gICAgICogICAgaXMgbm93IGluIG5leHRUcmVlLCBidXQgbm90IGN1cnJlbnRUcmVlLlxuICAgICAqIDIuIFRoaXMgZWZmZWN0IGhhcHBlbnMuIFdlIHN1YnNjcmliZSBhbmQgdXBkYXRlLlxuICAgICAqIDMuIEZyb20gdGhlIHVwZGF0ZSB3ZSByZS1yZW5kZXIgYW5kIHJlYWQgY3VycmVudFRyZWUsIHdpdGggb2xkIHZhbHVlLlxuICAgICAqIDQuIEJhdGNoZXIncyBlZmZlY3Qgc2V0cyBjdXJyZW50VHJlZSB0byBuZXh0VHJlZS5cbiAgICAgKiBJbiB0aGlzIHNlcXVlbmNlIHdlIG1pc3MgdGhlIHVwZGF0ZS4gVG8gYXZvaWQgdGhhdCwgYWRkIHRoZSB1cGRhdGVcbiAgICAgKiB0byBxdWV1ZWRDb21wb25lbnRDYWxsYmFjayBpZiBhIGJhdGNoIGlzIGluIHByb2dyZXNzLlxuICAgICAqL1xuXG4gICAgaWYgKHN0b3JlU3RhdGUubmV4dFRyZWUpIHtcbiAgICAgIHN0b3JlLmdldFN0YXRlKCkucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQucHVzaCgoKSA9PiB7XG4gICAgICAgIHByZXZMb2FkYWJsZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgZm9yY2VVcGRhdGUoW10pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcHJldkxvYWRhYmxlUmVmJGN1cnIyO1xuXG4gICAgICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9zdXBwcmVzc19yZXJlbmRlcl9pbl9jYWxsYmFjaycpKSB7XG4gICAgICAgIHJldHVybiBmb3JjZVVwZGF0ZShbXSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5ld0xvYWRhYmxlID0gZ2V0TG9hZGFibGUoKTtcblxuICAgICAgaWYgKCEoKF9wcmV2TG9hZGFibGVSZWYkY3VycjIgPSBwcmV2TG9hZGFibGVSZWYuY3VycmVudCkgIT09IG51bGwgJiYgX3ByZXZMb2FkYWJsZVJlZiRjdXJyMiAhPT0gdm9pZCAwICYmIF9wcmV2TG9hZGFibGVSZWYkY3VycjIuaXMobmV3TG9hZGFibGUpKSkge1xuICAgICAgICBmb3JjZVVwZGF0ZShuZXdMb2FkYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIHByZXZMb2FkYWJsZVJlZi5jdXJyZW50ID0gbmV3TG9hZGFibGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5yZWxlYXNlO1xuICB9LCBbY29tcG9uZW50TmFtZSwgZ2V0TG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZl0pO1xuICByZXR1cm4gbG9hZGFibGU7XG59XG4vKipcbiAgTGlrZSB1c2VSZWNvaWxWYWx1ZSgpLCBidXQgZWl0aGVyIHJldHVybnMgdGhlIHZhbHVlIGlmIGF2YWlsYWJsZSBvclxuICBqdXN0IHVuZGVmaW5lZCBpZiBub3QgYXZhaWxhYmxlIGZvciBhbnkgcmVhc29uLCBzdWNoIGFzIHBlbmRpbmcgb3IgZXJyb3IuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gIH1cblxuICBpZiAoUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3NcbiAgICBSZWNvaWxfdXNlUmV0YWluKHJlY29pbFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgVFJBTlNJVElPTl9TVVBQT1JUOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVCxcbiAgICBTWU5DX0VYVEVSTkFMX1NUT1JFOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1NZTkNfRVhURVJOQUxfU1RPUkUsXG4gICAgTVVUQUJMRV9TT1VSQ0U6IHVzZVJlY29pbFZhbHVlTG9hZGFibGVfTVVUQUJMRV9TT1VSQ0UsXG4gICAgTEVHQUNZOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX0xFR0FDWVxuICB9W3JlYWN0TW9kZSQzKCkubW9kZV0ocmVjb2lsVmFsdWUpO1xufVxuLyoqXG4gIFJldHVybnMgdGhlIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBSZWNvaWxWYWx1ZS5cbiAgSWYgdGhlIHZhbHVlIGlzIHBlbmRpbmcsIGl0IHdpbGwgdGhyb3cgYSBQcm9taXNlIHRvIHN1c3BlbmQgdGhlIGNvbXBvbmVudCxcbiAgaWYgdGhlIHZhbHVlIGlzIGFuIGVycm9yIGl0IHdpbGwgdGhyb3cgaXQgZm9yIHRoZSBuZWFyZXN0IFJlYWN0IGVycm9yIGJvdW5kYXJ5LlxuICBUaGlzIHdpbGwgYWxzbyBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCBmb3IgYW55IHVwZGF0ZXMgaW4gdGhlIHZhbHVlLlxuICAqL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBsb2FkYWJsZSA9IHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpO1xuICByZXR1cm4gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZik7XG59XG4vKipcbiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSB2YWx1ZSBvZiBhIFJlY29pbFN0YXRlIHRvIGJlIHVwZGF0ZWQsIGJ1dCBkb2VzXG4gIG5vdCBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCB0byBjaGFuZ2VzIHRvIHRoYXQgUmVjb2lsU3RhdGUuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlU2V0UmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2skMShuZXdWYWx1ZU9yVXBkYXRlciA9PiB7XG4gICAgc2V0UmVjb2lsVmFsdWUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFN0YXRlXSk7XG59XG4vKipcbiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXNldCB0aGUgdmFsdWUgb2YgYSBSZWNvaWxTdGF0ZSB0byBpdHMgZGVmYXVsdFxuKi9cblxuXG5mdW5jdGlvbiB1c2VSZXNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVzZXRSZWNvaWxTdGF0ZScpO1xuICB9XG5cbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDIpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFN0YXRlXSk7XG59XG4vKipcbiAgRXF1aXZhbGVudCB0byB1c2VTdGF0ZSgpLiBBbGxvd3MgdGhlIHZhbHVlIG9mIHRoZSBSZWNvaWxTdGF0ZSB0byBiZSByZWFkIGFuZCB3cml0dGVuLlxuICBTdWJzZXF1ZW50IHVwZGF0ZXMgdG8gdGhlIFJlY29pbFN0YXRlIHdpbGwgY2F1c2UgdGhlIGNvbXBvbmVudCB0byByZS1yZW5kZXIuIElmIHRoZVxuICBSZWNvaWxTdGF0ZSBpcyBwZW5kaW5nLCB0aGlzIHdpbGwgc3VzcGVuZCB0aGUgY29tcG9uZW50IGFuZCBpbml0aWF0ZSB0aGVcbiAgcmV0cmlldmFsIG9mIHRoZSB2YWx1ZS4gSWYgZXZhbHVhdGluZyB0aGUgUmVjb2lsU3RhdGUgcmVzdWx0ZWQgaW4gYW4gZXJyb3IsIHRoaXMgd2lsbFxuICB0aHJvdyB0aGUgZXJyb3Igc28gdGhhdCB0aGUgbmVhcmVzdCBSZWFjdCBlcnJvciBib3VuZGFyeSBjYW4gY2F0Y2ggaXQuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIHJldHVybiBbdXNlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUpLCB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSldO1xufVxuLyoqXG4gIExpa2UgdXNlUmVjb2lsU3RhdGUoKSwgYnV0IGRvZXMgbm90IGNhdXNlIFN1c3BlbnNlIG9yIFJlYWN0IGVycm9yIGhhbmRsaW5nLiBSZXR1cm5zXG4gIGFuIG9iamVjdCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBSZWNvaWxTdGF0ZSBpcyBhdmFpbGFibGUsIHBlbmRpbmcsIG9yXG4gIHVuYXZhaWxhYmxlIGR1ZSB0byBhbiBlcnJvci5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGVMb2FkYWJsZShyZWNvaWxTdGF0ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlY29pbFN0YXRlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHJldHVybiBbdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcygpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIHJldHVybiAodmFsdWVzLCB0cmFuc2FjdGlvbk1ldGFkYXRhID0ge30pID0+IHtcbiAgICBiYXRjaFVwZGF0ZXMkMigoKSA9PiB7XG4gICAgICBzdG9yZVJlZi5jdXJyZW50LmFkZFRyYW5zYWN0aW9uTWV0YWRhdGEodHJhbnNhY3Rpb25NZXRhZGF0YSk7XG4gICAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDMoa2V5KSwgdmFsdWUpKTtcbiAgICB9KTtcbiAgfTtcbn1cbi8qKlxuICogRXhwZXJpbWVudGFsIHZhcmlhbnRzIG9mIGhvb2tzIHdpdGggc3VwcG9ydCBmb3IgdXNlVHJhbnNpdGlvbigpXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgJ3VzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG5cbiAgICBpZiAoIXJlYWN0TW9kZSQzKCkuZWFybHkpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignQXR0ZXBtdCB0byB1c2UgYSBob29rIHdpdGggVU5TVEFCTEVfVFJBTlNJVElPTl9TVVBQT1JUIGluIGEgcmVuZGVyaW5nIG1vZGUgaW5jb21wYXRpYmxlIHdpdGggY29uY3VycmVudCByZW5kZXJpbmcuICBUcnkgZW5hYmxpbmcgdGhlIHJlY29pbF9zeW5jX2V4dGVybmFsX3N0b3JlIG9yIHJlY29pbF90cmFuc2l0aW9uX3N1cHBvcnQgR0tzLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuICAgIFJlY29pbF91c2VSZXRhaW4ocmVjb2lsVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUKHJlY29pbFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFKHJlY29pbFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgY29uc3QgbG9hZGFibGUgPSB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxWYWx1ZSk7XG4gIHJldHVybiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG4gIH1cblxuICByZXR1cm4gW3VzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG5cbnZhciBSZWNvaWxfSG9va3MgPSB7XG4gIHJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkcsXG4gIHVzZVJlY29pbEludGVyZmFjZTogdXNlUmVjb2lsSW50ZXJmYWNlX0RFUFJFQ0FURUQsXG4gIHVzZVJlY29pbFN0YXRlLFxuICB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlLFxuICB1c2VSZWNvaWxWYWx1ZSxcbiAgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZSxcbiAgdXNlUmVzZXRSZWNvaWxTdGF0ZSxcbiAgdXNlU2V0UmVjb2lsU3RhdGUsXG4gIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyxcbiAgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUsXG4gIHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSxcbiAgdXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8qKlxuICogUmV0dXJucyBhIG1hcCBjb250YWluaW5nIGFsbCBvZiB0aGUga2V5cyArIHZhbHVlcyBmcm9tIHRoZSBvcmlnaW5hbCBtYXAgd2hlcmVcbiAqIHRoZSBnaXZlbiBjYWxsYmFjayByZXR1cm5lZCB0cnVlLlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlck1hcChtYXAsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtYXApIHtcbiAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSkpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF9maWx0ZXJNYXAgPSBmaWx0ZXJNYXA7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB2YWx1ZXMgZnJvbSB0aGUgb3JpZ2luYWwgc2V0IHdoZXJlXG4gKiB0aGUgZ2l2ZW4gY2FsbGJhY2sgcmV0dXJuZWQgdHJ1ZS5cbiAqL1xuXG5mdW5jdGlvbiBmaWx0ZXJTZXQoc2V0LCBjYWxsYmFjaykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBzZXQpIHtcbiAgICBpZiAoY2FsbGJhY2sodmFsdWUpKSB7XG4gICAgICByZXN1bHQuYWRkKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX2ZpbHRlclNldCA9IGZpbHRlclNldDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmZ1bmN0aW9uIG1lcmdlTWFwcyguLi5tYXBzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IG1hcHNbaV0ua2V5cygpO1xuICAgIGxldCBuZXh0S2V5O1xuXG4gICAgd2hpbGUgKCEobmV4dEtleSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF0gLSBtYXAvaXRlcmF0b3Iga25vd3Mgbm90aGluZyBhYm91dCBmbG93IHR5cGVzXG4gICAgICByZXN1bHQuc2V0KG5leHRLZXkudmFsdWUsIG1hcHNbaV0uZ2V0KG5leHRLZXkudmFsdWUpKTtcbiAgICB9XG4gIH1cbiAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXSAoPj0wLjY2LjAgc2l0ZT13d3csbW9iaWxlKSBUaGlzIGNvbW1lbnRcbiAgICogc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuNjYgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yXG4gICAqIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuXG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF9tZXJnZU1hcHMgPSBtZXJnZU1hcHM7XG5cbmNvbnN0IHtcbiAgYmF0Y2hVcGRhdGVzOiBiYXRjaFVwZGF0ZXMkM1xufSA9IFJlY29pbF9CYXRjaGluZztcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDMsXG4gIGdldE5vZGU6IGdldE5vZGUkNCxcbiAgbm9kZXM6IG5vZGVzJDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkM1xufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5jb25zdCB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkNCxcbiAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZTogc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIFNVU1BFTlNFX1RJTUVPVVRfTVM6IFNVU1BFTlNFX1RJTUVPVVRfTVMkMlxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cbmNvbnN0IHtcbiAgY2xvbmVTbmFwc2hvdDogY2xvbmVTbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cbmNvbnN0IHtcbiAgdXNlQ2FsbGJhY2s6IHVzZUNhbGxiYWNrJDIsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0JDQsXG4gIHVzZVJlZjogdXNlUmVmJDYsXG4gIHVzZVN0YXRlOiB1c2VTdGF0ZSQyXG59ID0gcmVhY3Q7XG5cbmNvbnN0IHtcbiAgaXNTU1I6IGlzU1NSJDNcbn0gPSBSZWNvaWxfRW52aXJvbm1lbnQ7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbihjYWxsYmFjaykge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDMoKTtcbiAgdXNlRWZmZWN0JDQoKCkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN0b3JlUmVmLmN1cnJlbnQuc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMoY2FsbGJhY2spO1xuICAgIHJldHVybiBzdWIucmVsZWFzZTtcbiAgfSwgW2NhbGxiYWNrLCBzdG9yZVJlZl0pO1xufVxuXG5mdW5jdGlvbiBleHRlcm5hbGx5VmlzaWJsZUF0b21WYWx1ZXNJblN0YXRlKHN0YXRlKSB7XG4gIGNvbnN0IGF0b21WYWx1ZXMgPSBzdGF0ZS5hdG9tVmFsdWVzLnRvTWFwKCk7XG4gIGNvbnN0IHBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyA9IFJlY29pbF9tYXBNYXAoUmVjb2lsX2ZpbHRlck1hcChhdG9tVmFsdWVzLCAodiwgaykgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBnZXROb2RlJDQoayk7XG4gICAgY29uc3QgcGVyc2lzdGVuY2UgPSBub2RlLnBlcnNpc3RlbmNlX1VOU1RBQkxFO1xuICAgIHJldHVybiBwZXJzaXN0ZW5jZSAhPSBudWxsICYmIHBlcnNpc3RlbmNlLnR5cGUgIT09ICdub25lJyAmJiB2LnN0YXRlID09PSAnaGFzVmFsdWUnO1xuICB9KSwgdiA9PiB2LmNvbnRlbnRzKTsgLy8gTWVyZ2UgaW4gbm9udmFsaWRhdGVkIGF0b21zOyB3ZSBtYXkgbm90IGhhdmUgZGVmcyBmb3IgdGhlbSBidXQgdGhleSB3aWxsXG4gIC8vIGFsbCBoYXZlIHBlcnNpc3RlbmNlIG9uIG9yIHRoZXkgd291bGRuJ3QgYmUgdGhlcmUgaW4gdGhlIGZpcnN0IHBsYWNlLlxuXG4gIHJldHVybiBSZWNvaWxfbWVyZ2VNYXBzKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLnRvTWFwKCksIHBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyk7XG59XG5cbi8qKlxuICBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgYWZ0ZXIgYW55IGF0b21zIGhhdmUgYmVlbiBtb2RpZmllZCBhbmQgdGhlIGNvbnNlcXVlbnRcbiAgY29tcG9uZW50IHJlLXJlbmRlcnMgaGF2ZSBiZWVuIGNvbW1pdHRlZC4gVGhpcyBpcyBpbnRlbmRlZCBmb3IgcGVyc2lzdGluZ1xuICB0aGUgdmFsdWVzIG9mIHRoZSBhdG9tcyB0byBzdG9yYWdlLiBUaGUgc3RvcmVkIHZhbHVlcyBjYW4gdGhlbiBiZSByZXN0b3JlZFxuICB1c2luZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzIGhvb2suXG5cbiAgVGhlIGNhbGxiYWNrIHJlY2VpdmVzIHRoZSBmb2xsb3dpbmcgaW5mbzpcblxuICBhdG9tVmFsdWVzOiBUaGUgY3VycmVudCB2YWx1ZSBvZiBldmVyeSBhdG9tIHRoYXQgaXMgYm90aCBwZXJzaXN0YWJsZSAocGVyc2lzdGVuY2VcbiAgICAgICAgICAgICAgdHlwZSBub3Qgc2V0IHRvICdub25lJykgYW5kIHdob3NlIHZhbHVlIGlzIGF2YWlsYWJsZSAobm90IGluIGFuXG4gICAgICAgICAgICAgIGVycm9yIG9yIGxvYWRpbmcgc3RhdGUpLlxuXG4gIHByZXZpb3VzQXRvbVZhbHVlczogVGhlIHZhbHVlIG9mIGV2ZXJ5IHBlcnNpc3RhYmxlIGFuZCBhdmFpbGFibGUgYXRvbSBiZWZvcmVcbiAgICAgICAgICAgICAgIHRoZSB0cmFuc2FjdGlvbiBiZWdhbi5cblxuICBhdG9tSW5mbzogQSBtYXAgY29udGFpbmluZyB0aGUgcGVyc2lzdGVuY2Ugc2V0dGluZ3MgZm9yIGVhY2ggYXRvbS4gRXZlcnkga2V5XG4gICAgICAgICAgICB0aGF0IGV4aXN0cyBpbiBhdG9tVmFsdWVzIHdpbGwgYWxzbyBleGlzdCBpbiBhdG9tSW5mby5cblxuICBtb2RpZmllZEF0b21zOiBUaGUgc2V0IG9mIGF0b21zIHRoYXQgd2VyZSB3cml0dGVuIHRvIGR1cmluZyB0aGUgdHJhbnNhY3Rpb24uXG5cbiAgdHJhbnNhY3Rpb25NZXRhZGF0YTogQXJiaXRyYXJ5IGluZm9ybWF0aW9uIHRoYXQgd2FzIGFkZGVkIHZpYSB0aGVcbiAgICAgICAgICB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMgaG9vay4gVXNlZnVsIGZvciBpZ25vcmluZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzXG4gICAgICAgICAgdHJhbnNhY3Rpb24sIHRvIGF2b2lkIGxvb3BzLlxuKi9cbmZ1bmN0aW9uIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRChjYWxsYmFjaykge1xuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbih1c2VDYWxsYmFjayQyKHN0b3JlID0+IHtcbiAgICBsZXQgcHJldmlvdXNUcmVlID0gc3RvcmUuZ2V0U3RhdGUoKS5wcmV2aW91c1RyZWU7XG4gICAgY29uc3QgY3VycmVudFRyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgaWYgKCFwcmV2aW91c1RyZWUpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJhbnNhY3Rpb24gc3Vic2NyaWJlcnMgbm90aWZpZWQgd2l0aG91dCBhIHByZXZpb3VzIHRyZWUgYmVpbmcgcHJlc2VudCAtLSB0aGlzIGlzIGEgYnVnIGluIFJlY29pbCcpO1xuICAgICAgcHJldmlvdXNUcmVlID0gc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTsgLy8gYXR0ZW1wdCB0byB0cnVuZGxlIG9uXG4gICAgfVxuXG4gICAgY29uc3QgYXRvbVZhbHVlcyA9IGV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUoY3VycmVudFRyZWUpO1xuICAgIGNvbnN0IHByZXZpb3VzQXRvbVZhbHVlcyA9IGV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUocHJldmlvdXNUcmVlKTtcbiAgICBjb25zdCBhdG9tSW5mbyA9IFJlY29pbF9tYXBNYXAobm9kZXMkMSwgbm9kZSA9PiB7XG4gICAgICB2YXIgX25vZGUkcGVyc2lzdGVuY2VfVU5TLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMyLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRToge1xuICAgICAgICAgIHR5cGU6IChfbm9kZSRwZXJzaXN0ZW5jZV9VTlMgPSAoX25vZGUkcGVyc2lzdGVuY2VfVU5TMiA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEUpID09PSBudWxsIHx8IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIudHlwZSkgIT09IG51bGwgJiYgX25vZGUkcGVyc2lzdGVuY2VfVU5TICE9PSB2b2lkIDAgPyBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMgOiAnbm9uZScsXG4gICAgICAgICAgYmFja0J1dHRvbjogKF9ub2RlJHBlcnNpc3RlbmNlX1VOUzMgPSAoX25vZGUkcGVyc2lzdGVuY2VfVU5TNCA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEUpID09PSBudWxsIHx8IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQuYmFja0J1dHRvbikgIT09IG51bGwgJiYgX25vZGUkcGVyc2lzdGVuY2VfVU5TMyAhPT0gdm9pZCAwID8gX25vZGUkcGVyc2lzdGVuY2VfVU5TMyA6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7IC8vIEZpbHRlciBvbiBleGlzdGFuY2UgaW4gYXRvbVZhbHVlcyBzbyB0aGF0IGV4dGVybmFsbHktdmlzaWJsZSBydWxlc1xuICAgIC8vIGFyZSBhbHNvIGFwcGxpZWQgdG8gbW9kaWZpZWQgYXRvbXMgKHNwZWNpZmljYWxseSBleGNsdWRlIHNlbGVjdG9ycyk6XG5cbiAgICBjb25zdCBtb2RpZmllZEF0b21zID0gUmVjb2lsX2ZpbHRlclNldChjdXJyZW50VHJlZS5kaXJ0eUF0b21zLCBrID0+IGF0b21WYWx1ZXMuaGFzKGspIHx8IHByZXZpb3VzQXRvbVZhbHVlcy5oYXMoaykpO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIGF0b21WYWx1ZXMsXG4gICAgICBwcmV2aW91c0F0b21WYWx1ZXMsXG4gICAgICBhdG9tSW5mbyxcbiAgICAgIG1vZGlmaWVkQXRvbXMsXG4gICAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7IC4uLmN1cnJlbnRUcmVlLnRyYW5zYWN0aW9uTWV0YWRhdGFcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW2NhbGxiYWNrXSkpO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyKGNhbGxiYWNrKSB7XG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uKHVzZUNhbGxiYWNrJDIoc3RvcmUgPT4ge1xuICAgIGNvbnN0IHNuYXBzaG90ID0gY2xvbmVTbmFwc2hvdCQxKHN0b3JlLCAnY3VycmVudCcpO1xuICAgIGNvbnN0IHByZXZpb3VzU25hcHNob3QgPSBjbG9uZVNuYXBzaG90JDEoc3RvcmUsICdwcmV2aW91cycpO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIHNuYXBzaG90LFxuICAgICAgcHJldmlvdXNTbmFwc2hvdFxuICAgIH0pO1xuICB9LCBbY2FsbGJhY2tdKSk7XG59IC8vIFJldHVybiBhIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBzdWJzY3JpYmUgdG8gYWxsIHN0YXRlIGNoYW5nZXNcblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxTbmFwc2hvdCgpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQzKCk7XG4gIGNvbnN0IFtzbmFwc2hvdCwgc2V0U25hcHNob3RdID0gdXNlU3RhdGUkMigoKSA9PiBjbG9uZVNuYXBzaG90JDEoc3RvcmVSZWYuY3VycmVudCkpO1xuICBjb25zdCBwcmV2aW91c1NuYXBzaG90ID0gUmVjb2lsX3VzZVByZXZpb3VzKHNuYXBzaG90KTtcbiAgY29uc3QgdGltZW91dElEID0gdXNlUmVmJDYoKTtcbiAgY29uc3QgcmVsZWFzZVJlZiA9IHVzZVJlZiQ2KCk7XG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uKHVzZUNhbGxiYWNrJDIoc3RvcmUgPT4gc2V0U25hcHNob3QoY2xvbmVTbmFwc2hvdCQxKHN0b3JlKSksIFtdKSk7IC8vIFJldGFpbiBzbmFwc2hvdCBmb3IgZHVyYXRpb24gY29tcG9uZW50IGlzIG1vdW50ZWRcblxuICB1c2VFZmZlY3QkNCgoKSA9PiB7XG4gICAgY29uc3QgcmVsZWFzZSA9IHNuYXBzaG90LnJldGFpbigpOyAvLyBSZWxlYXNlIHRoZSByZXRhaW4gZnJvbSB0aGUgcmVuZGVyaW5nIGNhbGxcblxuICAgIGlmICh0aW1lb3V0SUQuY3VycmVudCAmJiAhaXNTU1IkMykge1xuICAgICAgdmFyIF9yZWxlYXNlUmVmJGN1cnJlbnQ7XG5cbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dElELmN1cnJlbnQpO1xuICAgICAgdGltZW91dElELmN1cnJlbnQgPSBudWxsO1xuICAgICAgKF9yZWxlYXNlUmVmJGN1cnJlbnQgPSByZWxlYXNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9yZWxlYXNlUmVmJGN1cnJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZWxlYXNlUmVmJGN1cnJlbnQuY2FsbChyZWxlYXNlUmVmKTtcbiAgICAgIHJlbGVhc2VSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGVhc2U7XG4gIH0sIFtzbmFwc2hvdF0pOyAvLyBSZXRhaW4gc25hcHNob3QgdW50aWwgYWJvdmUgZWZmZWN0IGlzIHJ1bi5cbiAgLy8gUmVsZWFzZSBhZnRlciBhIHRocmVzaG9sZCBpbiBjYXNlIGNvbXBvbmVudCBpcyBzdXNwZW5kZWQuXG5cbiAgaWYgKHByZXZpb3VzU25hcHNob3QgIT09IHNuYXBzaG90ICYmICFpc1NTUiQzKSB7XG4gICAgLy8gUmVsZWFzZSB0aGUgcHJldmlvdXMgc25hcHNob3RcbiAgICBpZiAodGltZW91dElELmN1cnJlbnQpIHtcbiAgICAgIHZhciBfcmVsZWFzZVJlZiRjdXJyZW50MjtcblxuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SUQuY3VycmVudCk7XG4gICAgICB0aW1lb3V0SUQuY3VycmVudCA9IG51bGw7XG4gICAgICAoX3JlbGVhc2VSZWYkY3VycmVudDIgPSByZWxlYXNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9yZWxlYXNlUmVmJGN1cnJlbnQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVsZWFzZVJlZiRjdXJyZW50Mi5jYWxsKHJlbGVhc2VSZWYpO1xuICAgICAgcmVsZWFzZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZWxlYXNlUmVmLmN1cnJlbnQgPSBzbmFwc2hvdC5yZXRhaW4oKTtcbiAgICB0aW1lb3V0SUQuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHZhciBfcmVsZWFzZVJlZiRjdXJyZW50MztcblxuICAgICAgdGltZW91dElELmN1cnJlbnQgPSBudWxsO1xuICAgICAgKF9yZWxlYXNlUmVmJGN1cnJlbnQzID0gcmVsZWFzZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcmVsZWFzZVJlZiRjdXJyZW50MyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlbGVhc2VSZWYkY3VycmVudDMuY2FsbChyZWxlYXNlUmVmKTtcbiAgICAgIHJlbGVhc2VSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfSwgU1VTUEVOU0VfVElNRU9VVF9NUyQyKTtcbiAgfVxuXG4gIHJldHVybiBzbmFwc2hvdDtcbn1cblxuZnVuY3Rpb24gZ290b1NuYXBzaG90KHN0b3JlLCBzbmFwc2hvdCkge1xuICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWU7XG5cbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHByZXYgPSAoX3N0b3JlU3RhdGUkbmV4dFRyZWUgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZSAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbmV4dFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICBjb25zdCBuZXh0ID0gc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuICBiYXRjaFVwZGF0ZXMkMygoKSA9PiB7XG4gICAgY29uc3Qga2V5c1RvVXBkYXRlID0gbmV3IFNldCgpO1xuXG4gICAgZm9yIChjb25zdCBrZXlzIG9mIFtwcmV2LmF0b21WYWx1ZXMua2V5cygpLCBuZXh0LmF0b21WYWx1ZXMua2V5cygpXSkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICB2YXIgX3ByZXYkYXRvbVZhbHVlcyRnZXQsIF9uZXh0JGF0b21WYWx1ZXMkZ2V0O1xuXG4gICAgICAgIGlmICgoKF9wcmV2JGF0b21WYWx1ZXMkZ2V0ID0gcHJldi5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfcHJldiRhdG9tVmFsdWVzJGdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ByZXYkYXRvbVZhbHVlcyRnZXQuY29udGVudHMpICE9PSAoKF9uZXh0JGF0b21WYWx1ZXMkZ2V0ID0gbmV4dC5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfbmV4dCRhdG9tVmFsdWVzJGdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25leHQkYXRvbVZhbHVlcyRnZXQuY29udGVudHMpICYmIGdldE5vZGUkNChrZXkpLnNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzKSB7XG4gICAgICAgICAga2V5c1RvVXBkYXRlLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5c1RvVXBkYXRlLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHNldFJlY29pbFZhbHVlTG9hZGFibGUkMShzdG9yZSwgbmV3IEFic3RyYWN0UmVjb2lsVmFsdWUkNChrZXkpLCBuZXh0LmF0b21WYWx1ZXMuaGFzKGtleSkgPyBSZWNvaWxfbnVsbHRocm93cyhuZXh0LmF0b21WYWx1ZXMuZ2V0KGtleSkpIDogREVGQVVMVF9WQUxVRSQzKTtcbiAgICB9KTtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsXG4gICAgICBzdGF0ZUlEOiBzbmFwc2hvdC5nZXRJRCgpXG4gICAgfSkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdXNlR290b1JlY29pbFNuYXBzaG90KCkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDMoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrJDIoc25hcHNob3QgPT4gZ290b1NuYXBzaG90KHN0b3JlUmVmLmN1cnJlbnQsIHNuYXBzaG90KSwgW3N0b3JlUmVmXSk7XG59XG5cbnZhciBSZWNvaWxfU25hcHNob3RIb29rcyA9IHtcbiAgdXNlUmVjb2lsU25hcHNob3QsXG4gIGdvdG9TbmFwc2hvdCxcbiAgdXNlR290b1JlY29pbFNuYXBzaG90LFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyLFxuICB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQsXG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uX0RFUFJFQ0FURUQ6IHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uXG59O1xuXG5jb25zdCB7XG4gIHBlZWtOb2RlSW5mbzogcGVla05vZGVJbmZvJDJcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDRcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuZnVuY3Rpb24gdXNlR2V0UmVjb2lsVmFsdWVJbmZvKCkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDQoKTtcbiAgcmV0dXJuICh7XG4gICAga2V5XG4gIH0pID0+IHBlZWtOb2RlSW5mbyQyKHN0b3JlUmVmLmN1cnJlbnQsIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZSwga2V5KTtcbn1cblxudmFyIFJlY29pbF91c2VHZXRSZWNvaWxWYWx1ZUluZm8gPSB1c2VHZXRSZWNvaWxWYWx1ZUluZm87XG5cbmNvbnN0IHtcbiAgcmVhY3RNb2RlOiByZWFjdE1vZGUkNFxufSA9IFJlY29pbF9SZWFjdE1vZGU7XG5cbmNvbnN0IHtcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQxLFxuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkNVxufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5cblxuY29uc3Qge1xuICB1c2VNZW1vOiB1c2VNZW1vJDJcbn0gPSByZWFjdDtcblxuZnVuY3Rpb24gdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cygpIHtcbiAgLy8gVGhlIHRlc3QgZmFpbHMgd2hlbiB1c2luZyB1c2VNdXRhYmxlU291cmNlKCksIGJ1dCBvbmx5IGlmIGFjdCgpIGlzIHVzZWRcbiAgLy8gZm9yIHRoZSBuZXN0ZWQgcm9vdC4gIFNvLCB0aGlzIG1heSBvbmx5IGJlIGEgdGVzdGluZyBlbnZpcm9ubWVudCBpc3N1ZS5cbiAgaWYgKHJlYWN0TW9kZSQ0KCkubW9kZSA9PT0gJ01VVEFCTEVfU09VUkNFJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybignV2FybmluZzogVGhlcmUgYXJlIGtub3duIGlzc3VlcyB1c2luZyB1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzKCkgaW4gcmVjb2lsX211dGFibGVfc291cmNlIHJlbmRlcmluZyBtb2RlLiAgUGxlYXNlIGNvbnNpZGVyIHVwZ3JhZGluZyB0byByZWNvaWxfc3luY19leHRlcm5hbF9zdG9yZSBtb2RlLicpO1xuICB9XG5cbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZVJlZiQ1KCkuY3VycmVudDtcbiAgcmV0dXJuIHVzZU1lbW8kMigoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgIGZ1bmN0aW9uIFJlY29pbEJyaWRnZSh7XG4gICAgICBjaGlsZHJlblxuICAgIH0pIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChSZWNvaWxSb290JDEsIHtcbiAgICAgICAgc3RvcmVfSU5URVJOQUw6IHN0b3JlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlY29pbEJyaWRnZTtcbiAgfSwgW3N0b3JlXSk7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cyA9IHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHM7XG5cbmNvbnN0IHtcbiAgbG9hZGFibGVXaXRoVmFsdWU6IGxvYWRhYmxlV2l0aFZhbHVlJDFcbn0gPSBSZWNvaWxfTG9hZGFibGUkMTtcblxuY29uc3Qge1xuICBpbml0aWFsaXplTm9kZTogaW5pdGlhbGl6ZU5vZGUkM1xufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDQsXG4gIGdldE5vZGU6IGdldE5vZGUkNVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGNvcHlUcmVlU3RhdGU6IGNvcHlUcmVlU3RhdGUkMSxcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMyxcbiAgaW52YWxpZGF0ZURvd25zdHJlYW1zOiBpbnZhbGlkYXRlRG93bnN0cmVhbXMkMSxcbiAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlOiB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuXG5cbmZ1bmN0aW9uIGlzQXRvbShyZWNvaWxWYWx1ZSkge1xuICByZXR1cm4gZ2V0Tm9kZSQ1KHJlY29pbFZhbHVlLmtleSkubm9kZVR5cGUgPT09ICdhdG9tJztcbn1cblxuY2xhc3MgVHJhbnNhY3Rpb25JbnRlcmZhY2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RvcmUsIHRyZWVTdGF0ZSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9yZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RyZWVTdGF0ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2NoYW5nZXNcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFwiLCByZWNvaWxWYWx1ZSA9PiB7XG4gICAgICBpZiAodGhpcy5fY2hhbmdlcy5oYXMocmVjb2lsVmFsdWUua2V5KSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFuZ2VzLmdldChyZWNvaWxWYWx1ZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQXRvbShyZWNvaWxWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgUmVjb2lsX2VycignUmVhZGluZyBzZWxlY3RvcnMgd2l0aGluIGF0b21pY1VwZGF0ZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDModGhpcy5fc3RvcmUsIHJlY29pbFZhbHVlLCB0aGlzLl90cmVlU3RhdGUpO1xuXG4gICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoYEV4cGVjdGVkIFJlY29pbCBhdG9tICR7cmVjb2lsVmFsdWUua2V5fSB0byBoYXZlIGEgdmFsdWUsIGJ1dCBpdCBpcyBpbiBhIGxvYWRpbmcgc3RhdGUuYCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRcIiwgKHJlY29pbFN0YXRlLCB2YWx1ZU9yVXBkYXRlcikgPT4ge1xuICAgICAgaWYgKCFpc0F0b20ocmVjb2lsU3RhdGUpKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NldHRpbmcgc2VsZWN0b3JzIHdpdGhpbiBhdG9taWNVcGRhdGUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldChyZWNvaWxTdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlcy5zZXQocmVjb2lsU3RhdGUua2V5LCB2YWx1ZU9yVXBkYXRlcihjdXJyZW50KSk7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbml0aWFsaXplIGF0b20gYW5kIHJ1biBlZmZlY3RzIGlmIG5vdCBpbml0aWFsaXplZCB5ZXRcbiAgICAgICAgaW5pdGlhbGl6ZU5vZGUkMyh0aGlzLl9zdG9yZSwgcmVjb2lsU3RhdGUua2V5LCAnc2V0Jyk7XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlcy5zZXQocmVjb2lsU3RhdGUua2V5LCB2YWx1ZU9yVXBkYXRlcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXNldFwiLCByZWNvaWxTdGF0ZSA9PiB7XG4gICAgICB0aGlzLnNldChyZWNvaWxTdGF0ZSwgREVGQVVMVF9WQUxVRSQ0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5fdHJlZVN0YXRlID0gdHJlZVN0YXRlO1xuICAgIHRoaXMuX2NoYW5nZXMgPSBuZXcgTWFwKCk7XG4gIH0gLy8gQWxsb3cgZGVzdHJ1Y3RpbmdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9leHRyYS1hcnJvdy1pbml0aWFsaXplclxuXG5cbiAgbmV3VHJlZVN0YXRlX0lOVEVSTkFMKCkge1xuICAgIGlmICh0aGlzLl9jaGFuZ2VzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmVlU3RhdGU7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U3RhdGUgPSBjb3B5VHJlZVN0YXRlJDEodGhpcy5fdHJlZVN0YXRlKTtcblxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHRoaXMuX2NoYW5nZXMpIHtcbiAgICAgIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZSQxKG5ld1N0YXRlLCBrLCBsb2FkYWJsZVdpdGhWYWx1ZSQxKHYpKTtcbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlRG93bnN0cmVhbXMkMSh0aGlzLl9zdG9yZSwgbmV3U3RhdGUpO1xuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGF0b21pY1VwZGF0ZXIoc3RvcmUpIHtcbiAgcmV0dXJuIGZuID0+IHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodHJlZVN0YXRlID0+IHtcbiAgICAgIGNvbnN0IGNoYW5nZXNldCA9IG5ldyBUcmFuc2FjdGlvbkludGVyZmFjZUltcGwoc3RvcmUsIHRyZWVTdGF0ZSk7XG4gICAgICBmbihjaGFuZ2VzZXQpO1xuICAgICAgcmV0dXJuIGNoYW5nZXNldC5uZXdUcmVlU3RhdGVfSU5URVJOQUwoKTtcbiAgICB9KTtcbiAgfTtcbn1cblxudmFyIFJlY29pbF9BdG9taWNVcGRhdGVzID0ge1xuICBhdG9taWNVcGRhdGVyXG59O1xuXG52YXIgUmVjb2lsX0F0b21pY1VwZGF0ZXNfMSA9IFJlY29pbF9BdG9taWNVcGRhdGVzLmF0b21pY1VwZGF0ZXI7XG5cbnZhciBSZWNvaWxfQXRvbWljVXBkYXRlcyQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGF0b21pY1VwZGF0ZXI6IFJlY29pbF9BdG9taWNVcGRhdGVzXzFcbn0pO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuXG52YXIgaW52YXJpYW50XzEgPSBpbnZhcmlhbnQ7XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfaW52YXJpYW50ID0gaW52YXJpYW50XzE7XG5cbmNvbnN0IHtcbiAgYXRvbWljVXBkYXRlcjogYXRvbWljVXBkYXRlciQxXG59ID0gUmVjb2lsX0F0b21pY1VwZGF0ZXMkMTtcblxuY29uc3Qge1xuICBiYXRjaFVwZGF0ZXM6IGJhdGNoVXBkYXRlcyQ0XG59ID0gUmVjb2lsX0JhdGNoaW5nO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkNVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIHVzZVN0b3JlUmVmOiB1c2VTdG9yZVJlZiQ2XG59ID0gUmVjb2lsX1JlY29pbFJvb3Q7XG5cbmNvbnN0IHtcbiAgcmVmcmVzaFJlY29pbFZhbHVlOiByZWZyZXNoUmVjb2lsVmFsdWUkMSxcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDNcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgU25hcHNob3Q6IFNuYXBzaG90JDEsXG4gIGNsb25lU25hcHNob3Q6IGNsb25lU25hcHNob3QkMlxufSA9IFJlY29pbF9TbmFwc2hvdCQxO1xuXG5jb25zdCB7XG4gIGdvdG9TbmFwc2hvdDogZ290b1NuYXBzaG90JDFcbn0gPSBSZWNvaWxfU25hcHNob3RIb29rcztcblxuY29uc3Qge1xuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2skM1xufSA9IHJlYWN0O1xuXG5cblxuXG5cblxuXG5jbGFzcyBTZW50aW5lbCB7fVxuXG5jb25zdCBTRU5USU5FTCA9IG5ldyBTZW50aW5lbCgpO1xuXG5mdW5jdGlvbiByZWNvaWxDYWxsYmFjayhzdG9yZSwgZm4sIGFyZ3MsIGV4dHJhSW50ZXJmYWNlKSB7XG4gIGxldCByZXQgPSBTRU5USU5FTDtcbiAgYmF0Y2hVcGRhdGVzJDQoKCkgPT4ge1xuICAgIGNvbnN0IGVyck1zZyA9ICd1c2VSZWNvaWxDYWxsYmFjaygpIGV4cGVjdHMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbjogJyArICdpdCBhY2NlcHRzIGEgZnVuY3Rpb24gb2YgdGhlIHR5cGUgKFJlY29pbEludGVyZmFjZSkgPT4gKEFyZ3MpID0+IFJldHVyblR5cGUgJyArICdhbmQgcmV0dXJucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIChBcmdzKSA9PiBSZXR1cm5UeXBlLCB3aGVyZSBSZWNvaWxJbnRlcmZhY2UgaXMgJyArICdhbiBvYmplY3Qge3NuYXBzaG90LCBzZXQsIC4uLn0gYW5kIEFyZ3MgYW5kIFJldHVyblR5cGUgYXJlIHRoZSBhcmd1bWVudCBhbmQgcmV0dXJuICcgKyAndHlwZXMgb2YgdGhlIGNhbGxiYWNrIHlvdSB3YW50IHRvIGNyZWF0ZS4gIFBsZWFzZSBzZWUgdGhlIGRvY3MgJyArICdhdCByZWNvaWxqcy5vcmcgZm9yIGRldGFpbHMuJztcblxuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoZXJyTXNnKTtcbiAgICB9IC8vIENsb25lIHRoZSBzbmFwc2hvdCBsYXppbHkgdG8gYXZvaWQgb3ZlcmhlYWQgaWYgdGhlIGNhbGxiYWNrIGRvZXMgbm90IHVzZSBpdC5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBtZWFucyB0aGUgc25hcHNob3QgbWF5IHJlcHJlc2VudCBsYXRlciBzdGF0ZSBmcm9tIHdoZW5cbiAgICAvLyB0aGUgY2FsbGJhY2sgd2FzIGNhbGxlZCBpZiBpdCBmaXJzdCBhY2Nlc3NlcyB0aGUgc25hcHNob3QgYXN5bmNocm9ub3VzbHkuXG5cblxuICAgIGNvbnN0IGNhbGxiYWNrSW50ZXJmYWNlID0gUmVjb2lsX2xhenlQcm94eSh7IC4uLihleHRyYUludGVyZmFjZSAhPT0gbnVsbCAmJiBleHRyYUludGVyZmFjZSAhPT0gdm9pZCAwID8gZXh0cmFJbnRlcmZhY2UgOiB7fSksXG4gICAgICAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgIHNldDogKG5vZGUsIG5ld1ZhbHVlKSA9PiBzZXRSZWNvaWxWYWx1ZSQzKHN0b3JlLCBub2RlLCBuZXdWYWx1ZSksXG4gICAgICByZXNldDogbm9kZSA9PiBzZXRSZWNvaWxWYWx1ZSQzKHN0b3JlLCBub2RlLCBERUZBVUxUX1ZBTFVFJDUpLFxuICAgICAgcmVmcmVzaDogbm9kZSA9PiByZWZyZXNoUmVjb2lsVmFsdWUkMShzdG9yZSwgbm9kZSksXG4gICAgICBnb3RvU25hcHNob3Q6IHNuYXBzaG90ID0+IGdvdG9TbmFwc2hvdCQxKHN0b3JlLCBzbmFwc2hvdCksXG4gICAgICB0cmFuc2FjdF9VTlNUQUJMRTogdHJhbnNhY3Rpb24gPT4gYXRvbWljVXBkYXRlciQxKHN0b3JlKSh0cmFuc2FjdGlvbilcbiAgICB9LCB7XG4gICAgICBzbmFwc2hvdDogKCkgPT4gY2xvbmVTbmFwc2hvdCQyKHN0b3JlKVxuICAgIH0pO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gZm4oY2FsbGJhY2tJbnRlcmZhY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgUmVjb2lsX2VycihlcnJNc2cpO1xuICAgIH1cblxuICAgIHJldCA9IGNhbGxiYWNrKC4uLmFyZ3MpO1xuICB9KTtcbiAgISEocmV0IGluc3RhbmNlb2YgU2VudGluZWwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ2JhdGNoVXBkYXRlcyBzaG91bGQgcmV0dXJuIGltbWVkaWF0ZWx5JykgOiBSZWNvaWxfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsQ2FsbGJhY2soZm4sIGRlcHMpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQ2KCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQzKCAvLyAkRmxvd0lzc3VlW2luY29tcGF0aWJsZS1jYWxsXVxuICAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiByZWNvaWxDYWxsYmFjayhzdG9yZVJlZi5jdXJyZW50LCBmbiwgYXJncyk7XG4gIH0sIGRlcHMgIT0gbnVsbCA/IFsuLi5kZXBzLCBzdG9yZVJlZl0gOiB1bmRlZmluZWQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICApO1xufVxuXG52YXIgUmVjb2lsX3VzZVJlY29pbENhbGxiYWNrID0ge1xuICByZWNvaWxDYWxsYmFjayxcbiAgdXNlUmVjb2lsQ2FsbGJhY2tcbn07XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDdcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuY29uc3Qge1xuICByZWZyZXNoUmVjb2lsVmFsdWU6IHJlZnJlc2hSZWNvaWxWYWx1ZSQyXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHVzZUNhbGxiYWNrOiB1c2VDYWxsYmFjayQ0XG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFJlZnJlc2hlcihyZWNvaWxWYWx1ZSkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDcoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrJDQoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICByZWZyZXNoUmVjb2lsVmFsdWUkMihzdG9yZSwgcmVjb2lsVmFsdWUpO1xuICB9LCBbcmVjb2lsVmFsdWUsIHN0b3JlUmVmXSk7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVjb2lsUmVmcmVzaGVyID0gdXNlUmVjb2lsUmVmcmVzaGVyO1xuXG5jb25zdCB7XG4gIGF0b21pY1VwZGF0ZXI6IGF0b21pY1VwZGF0ZXIkMlxufSA9IFJlY29pbF9BdG9taWNVcGRhdGVzJDE7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDhcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuY29uc3Qge1xuICB1c2VNZW1vOiB1c2VNZW1vJDNcbn0gPSByZWFjdDtcblxuZnVuY3Rpb24gdXNlUmVjb2lsVHJhbnNhY3Rpb24oZm4sIGRlcHMpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQ4KCk7XG4gIHJldHVybiB1c2VNZW1vJDMoKCkgPT4gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBhdG9taWNVcGRhdGUgPSBhdG9taWNVcGRhdGVyJDIoc3RvcmVSZWYuY3VycmVudCk7XG4gICAgYXRvbWljVXBkYXRlKHRyYW5zYWN0aW9uSW50ZXJmYWNlID0+IHtcbiAgICAgIGZuKHRyYW5zYWN0aW9uSW50ZXJmYWNlKSguLi5hcmdzKTtcbiAgICB9KTtcbiAgfSwgZGVwcyAhPSBudWxsID8gWy4uLmRlcHMsIHN0b3JlUmVmXSA6IHVuZGVmaW5lZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZiLXd3dy9yZWFjdC1ob29rcy1kZXBzXG4gICk7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVjb2lsVHJhbnNhY3Rpb24gPSB1c2VSZWNvaWxUcmFuc2FjdGlvbjtcblxuY2xhc3MgVHJlZUNhY2hlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHZhciBfb3B0aW9ucyRvbkhpdCwgX29wdGlvbnMkb25TZXQsIF9vcHRpb25zJG1hcE5vZGVWYWx1ZTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9udW1MZWFmc1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3Jvb3RcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9vbkhpdFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX29uU2V0XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWFwTm9kZVZhbHVlXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLl9udW1MZWFmcyA9IDA7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgdGhpcy5fb25IaXQgPSAoX29wdGlvbnMkb25IaXQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25IaXQpICE9PSBudWxsICYmIF9vcHRpb25zJG9uSGl0ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRvbkhpdCA6ICgpID0+IHt9O1xuICAgIHRoaXMuX29uU2V0ID0gKF9vcHRpb25zJG9uU2V0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uU2V0KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRvblNldCAhPT0gdm9pZCAwID8gX29wdGlvbnMkb25TZXQgOiAoKSA9PiB7fTtcbiAgICB0aGlzLl9tYXBOb2RlVmFsdWUgPSAoX29wdGlvbnMkbWFwTm9kZVZhbHVlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1hcE5vZGVWYWx1ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbWFwTm9kZVZhbHVlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRtYXBOb2RlVmFsdWUgOiB2YWwgPT4gdmFsO1xuICB9XG5cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbnVtTGVhZnM7XG4gIH0gLy8gVE9ETzogbm9kZUNvdW50KCk6IG51bWJlclxuXG5cbiAgcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIGdldChnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSB7XG4gICAgdmFyIF90aGlzJGdldExlYWZOb2RlO1xuXG4gICAgcmV0dXJuIChfdGhpcyRnZXRMZWFmTm9kZSA9IHRoaXMuZ2V0TGVhZk5vZGUoZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycykpID09PSBudWxsIHx8IF90aGlzJGdldExlYWZOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRnZXRMZWFmTm9kZS52YWx1ZTtcbiAgfVxuXG4gIGdldExlYWZOb2RlKGdldE5vZGVWYWx1ZSwgaGFuZGxlcnMpIHtcbiAgICByZXR1cm4gZmluZExlYWYodGhpcy5yb290KCksIG5vZGVLZXkgPT4gdGhpcy5fbWFwTm9kZVZhbHVlKGdldE5vZGVWYWx1ZShub2RlS2V5KSksIHtcbiAgICAgIG9uTm9kZVZpc2l0OiBub2RlID0+IHtcbiAgICAgICAgaGFuZGxlcnMgPT09IG51bGwgfHwgaGFuZGxlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXJzLm9uTm9kZVZpc2l0KG5vZGUpO1xuXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdsZWFmJykge1xuICAgICAgICAgIHRoaXMuX29uSGl0KG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXQocm91dGUsIHZhbHVlLCBoYW5kbGVycykge1xuICAgIGxldCBsZWFmTm9kZTtcbiAgICBsZXQgbmV3Um9vdCA9IG51bGw7XG5cbiAgICBjb25zdCBzZXRSZXRyeWFibGVQYXJ0ID0gKCkgPT4ge1xuICAgICAgbmV3Um9vdCA9IGFkZExlYWYodGhpcy5yb290KCksIHJvdXRlLm1hcCgoW25vZGVLZXksIG5vZGVWYWx1ZV0pID0+IFtub2RlS2V5LCB0aGlzLl9tYXBOb2RlVmFsdWUobm9kZVZhbHVlKV0pLCBudWxsLCB2YWx1ZSwgbnVsbCwge1xuICAgICAgICBvbk5vZGVWaXNpdDogbm9kZSA9PiB7XG4gICAgICAgICAgaGFuZGxlcnMgPT09IG51bGwgfHwgaGFuZGxlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXJzLm9uTm9kZVZpc2l0KG5vZGUpO1xuXG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2xlYWYnKSB7XG4gICAgICAgICAgICBsZWFmTm9kZSA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgc2V0UmV0cnlhYmxlUGFydCgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNldFJldHJ5YWJsZVBhcnQoKTtcblxuICAgIGlmICghdGhpcy5yb290KCkpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBuZXdSb290O1xuICAgIH1cblxuICAgIHRoaXMuX251bUxlYWZzKys7XG5cbiAgICB0aGlzLl9vblNldChSZWNvaWxfbnVsbHRocm93cyhsZWFmTm9kZSkpO1xuICB9XG5cbiAgZGVsZXRlKG5vZGUpIHtcbiAgICBpZiAoIXRoaXMucm9vdCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgcm9vdCA9IFJlY29pbF9udWxsdGhyb3dzKHRoaXMucm9vdCgpKTtcbiAgICBjb25zdCBleGlzdHNJblRyZWUgPSBwcnVuZU5vZGVGcm9tVHJlZShyb290LCBub2RlLCBub2RlLnBhcmVudCk7XG5cbiAgICBpZiAoIWV4aXN0c0luVHJlZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSByb290IHx8IHJvb3QudHlwZSA9PT0gJ2JyYW5jaCcgJiYgIXJvb3QuYnJhbmNoZXMuc2l6ZSkge1xuICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICB0aGlzLl9udW1MZWFmcyA9IDA7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9udW1MZWFmcyAtPSBjb3VudERvd25zdHJlYW1MZWF2ZXMobm9kZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9udW1MZWFmcyA9IDA7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gIH1cblxufVxuXG5jb25zdCBmaW5kTGVhZiA9IChyb290LCBnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSA9PiB7XG4gIHZhciBfaGFuZGxlcnMkb25Ob2RlVmlzaXQ7XG5cbiAgaWYgKHJvb3QgPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBoYW5kbGVycyA9PT0gbnVsbCB8fCBoYW5kbGVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9oYW5kbGVycyRvbk5vZGVWaXNpdCA9IGhhbmRsZXJzLm9uTm9kZVZpc2l0KSA9PT0gbnVsbCB8fCBfaGFuZGxlcnMkb25Ob2RlVmlzaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oYW5kbGVycyRvbk5vZGVWaXNpdC5jYWxsKGhhbmRsZXJzLCByb290KTtcblxuICBpZiAocm9vdC50eXBlID09PSAnbGVhZicpIHtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGNvbnN0IG5vZGVWYWx1ZSA9IGdldE5vZGVWYWx1ZShyb290Lm5vZGVLZXkpO1xuICByZXR1cm4gZmluZExlYWYocm9vdC5icmFuY2hlcy5nZXQobm9kZVZhbHVlKSwgZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycyk7XG59O1xuXG5jb25zdCBhZGRMZWFmID0gKHJvb3QsIHJvdXRlLCBwYXJlbnQsIHZhbHVlLCBicmFuY2hLZXksIGhhbmRsZXJzLCBvbkFib3J0KSA9PiB7XG4gIHZhciBfaGFuZGxlcnMkb25Ob2RlVmlzaXQyO1xuXG4gIGxldCBub2RlO1xuXG4gIGlmIChyb290ID09IG51bGwpIHtcbiAgICBpZiAocm91dGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBub2RlID0ge1xuICAgICAgICB0eXBlOiAnbGVhZicsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGJyYW5jaEtleVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW3BhdGgsIC4uLnJlc3RdID0gcm91dGU7XG4gICAgICBjb25zdCBbbm9kZUtleSwgbm9kZVZhbHVlXSA9IHBhdGg7XG4gICAgICBub2RlID0ge1xuICAgICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICAgICAgbm9kZUtleSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBicmFuY2hlczogbmV3IE1hcCgpLFxuICAgICAgICBicmFuY2hLZXlcbiAgICAgIH07XG4gICAgICBub2RlLmJyYW5jaGVzLnNldChub2RlVmFsdWUsIGFkZExlYWYobnVsbCwgcmVzdCwgbm9kZSwgdmFsdWUsIG5vZGVWYWx1ZSwgaGFuZGxlcnMsIG9uQWJvcnQpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZSA9IHJvb3Q7XG5cbiAgICBpZiAocm91dGUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBbcGF0aCwgLi4ucmVzdF0gPSByb3V0ZTtcbiAgICAgIGNvbnN0IFtub2RlS2V5LCBub2RlVmFsdWVdID0gcGF0aDtcblxuICAgICAgaWYgKHJvb3QudHlwZSAhPT0gJ2JyYW5jaCcgfHwgcm9vdC5ub2RlS2V5ICE9PSBub2RlS2V5KSB7XG4gICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignRXhpc3RpbmcgY2FjaGUgbXVzdCBoYXZlIGEgYnJhbmNoIG1pZHdheSB0aHJvdWdoIHRoZSAnICsgJ3JvdXRlIHdpdGggbWF0Y2hpbmcgbm9kZSBrZXkuIFJlc2V0dGluZyBjYWNoZS4nKTtcbiAgICAgICAgb25BYm9ydCgpO1xuICAgICAgICByZXR1cm4gbm9kZTsgLy8gaWdub3JlZFxuICAgICAgfVxuXG4gICAgICByb290LmJyYW5jaGVzLnNldChub2RlVmFsdWUsIGFkZExlYWYocm9vdC5icmFuY2hlcy5nZXQobm9kZVZhbHVlKSwgcmVzdCwgcm9vdCwgdmFsdWUsIG5vZGVWYWx1ZSwgaGFuZGxlcnMsIG9uQWJvcnQpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVycyA9PT0gbnVsbCB8fCBoYW5kbGVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9oYW5kbGVycyRvbk5vZGVWaXNpdDIgPSBoYW5kbGVycy5vbk5vZGVWaXNpdCkgPT09IG51bGwgfHwgX2hhbmRsZXJzJG9uTm9kZVZpc2l0MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2hhbmRsZXJzJG9uTm9kZVZpc2l0Mi5jYWxsKGhhbmRsZXJzLCBub2RlKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG5jb25zdCBwcnVuZU5vZGVGcm9tVHJlZSA9IChyb290LCBub2RlLCBwYXJlbnQpID0+IHtcbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm4gcm9vdCA9PT0gbm9kZTtcbiAgfVxuXG4gIHBhcmVudC5icmFuY2hlcy5kZWxldGUobm9kZS5icmFuY2hLZXkpO1xuICByZXR1cm4gcHJ1bmVVcHN0cmVhbUJyYW5jaGVzKHJvb3QsIHBhcmVudCwgcGFyZW50LnBhcmVudCk7XG59O1xuXG5jb25zdCBwcnVuZVVwc3RyZWFtQnJhbmNoZXMgPSAocm9vdCwgYnJhbmNoTm9kZSwgcGFyZW50KSA9PiB7XG4gIGlmICghcGFyZW50KSB7XG4gICAgcmV0dXJuIHJvb3QgPT09IGJyYW5jaE5vZGU7XG4gIH1cblxuICBpZiAoYnJhbmNoTm9kZS5icmFuY2hlcy5zaXplID09PSAwKSB7XG4gICAgcGFyZW50LmJyYW5jaGVzLmRlbGV0ZShicmFuY2hOb2RlLmJyYW5jaEtleSk7XG4gIH1cblxuICByZXR1cm4gcHJ1bmVVcHN0cmVhbUJyYW5jaGVzKHJvb3QsIHBhcmVudCwgcGFyZW50LnBhcmVudCk7XG59O1xuXG5jb25zdCBjb3VudERvd25zdHJlYW1MZWF2ZXMgPSBub2RlID0+IG5vZGUudHlwZSA9PT0gJ2xlYWYnID8gMSA6IEFycmF5LmZyb20obm9kZS5icmFuY2hlcy52YWx1ZXMoKSkucmVkdWNlKChzdW0sIGN1cnJOb2RlKSA9PiBzdW0gKyBjb3VudERvd25zdHJlYW1MZWF2ZXMoY3Vyck5vZGUpLCAwKTtcblxudmFyIFJlY29pbF9UcmVlQ2FjaGUgPSB7XG4gIFRyZWVDYWNoZVxufTtcblxudmFyIFJlY29pbF9UcmVlQ2FjaGVfMSA9IFJlY29pbF9UcmVlQ2FjaGUuVHJlZUNhY2hlO1xuXG52YXIgUmVjb2lsX1RyZWVDYWNoZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIFRyZWVDYWNoZTogUmVjb2lsX1RyZWVDYWNoZV8xXG59KTtcblxuY2xhc3MgTFJVQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zJG1hcEtleTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9tYXhTaXplXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc2l6ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2hlYWRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl90YWlsXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWFwXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfa2V5TWFwcGVyXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLl9tYXhTaXplID0gb3B0aW9ucy5tYXhTaXplO1xuICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIHRoaXMuX2hlYWQgPSBudWxsO1xuICAgIHRoaXMuX3RhaWwgPSBudWxsO1xuICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9rZXlNYXBwZXIgPSAoX29wdGlvbnMkbWFwS2V5ID0gb3B0aW9ucy5tYXBLZXkpICE9PSBudWxsICYmIF9vcHRpb25zJG1hcEtleSAhPT0gdm9pZCAwID8gX29wdGlvbnMkbWFwS2V5IDogdiA9PiB2O1xuICB9XG5cbiAgaGVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgbWF4U2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4U2l6ZTtcbiAgfVxuXG4gIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyh0aGlzLl9rZXlNYXBwZXIoa2V5KSk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgY29uc3QgbWFwcGVkS2V5ID0gdGhpcy5fa2V5TWFwcGVyKGtleSk7XG5cbiAgICBjb25zdCBub2RlID0gdGhpcy5fbWFwLmdldChtYXBwZWRLZXkpO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuc2V0KGtleSwgbm9kZS52YWx1ZSk7XG4gICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gIH1cblxuICBzZXQoa2V5LCB2YWwpIHtcbiAgICBjb25zdCBtYXBwZWRLZXkgPSB0aGlzLl9rZXlNYXBwZXIoa2V5KTtcblxuICAgIGNvbnN0IGV4aXN0aW5nTm9kZSA9IHRoaXMuX21hcC5nZXQobWFwcGVkS2V5KTtcblxuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZCA9IHRoaXMuaGVhZCgpO1xuICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICBrZXksXG4gICAgICByaWdodDogaGVhZCxcbiAgICAgIGxlZnQ6IG51bGwsXG4gICAgICB2YWx1ZTogdmFsXG4gICAgfTtcblxuICAgIGlmIChoZWFkKSB7XG4gICAgICBoZWFkLmxlZnQgPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90YWlsID0gbm9kZTtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXAuc2V0KG1hcHBlZEtleSwgbm9kZSk7XG5cbiAgICB0aGlzLl9oZWFkID0gbm9kZTtcbiAgICB0aGlzLl9zaXplKys7XG5cbiAgICB0aGlzLl9tYXliZURlbGV0ZUxSVSgpO1xuICB9XG5cbiAgX21heWJlRGVsZXRlTFJVKCkge1xuICAgIGlmICh0aGlzLnNpemUoKSA+IHRoaXMubWF4U2l6ZSgpKSB7XG4gICAgICB0aGlzLmRlbGV0ZUxydSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZUxydSgpIHtcbiAgICBjb25zdCB0YWlsID0gdGhpcy50YWlsKCk7XG5cbiAgICBpZiAodGFpbCkge1xuICAgICAgdGhpcy5kZWxldGUodGFpbC5rZXkpO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZShrZXkpIHtcbiAgICBjb25zdCBtYXBwZWRLZXkgPSB0aGlzLl9rZXlNYXBwZXIoa2V5KTtcblxuICAgIGlmICghdGhpcy5fc2l6ZSB8fCAhdGhpcy5fbWFwLmhhcyhtYXBwZWRLZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IFJlY29pbF9udWxsdGhyb3dzKHRoaXMuX21hcC5nZXQobWFwcGVkS2V5KSk7XG4gICAgY29uc3QgcmlnaHQgPSBub2RlLnJpZ2h0O1xuICAgIGNvbnN0IGxlZnQgPSBub2RlLmxlZnQ7XG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIHJpZ2h0LmxlZnQgPSBub2RlLmxlZnQ7XG4gICAgfVxuXG4gICAgaWYgKGxlZnQpIHtcbiAgICAgIGxlZnQucmlnaHQgPSBub2RlLnJpZ2h0O1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSB0aGlzLmhlYWQoKSkge1xuICAgICAgdGhpcy5faGVhZCA9IHJpZ2h0O1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSB0aGlzLnRhaWwoKSkge1xuICAgICAgdGhpcy5fdGFpbCA9IGxlZnQ7XG4gICAgfVxuXG4gICAgdGhpcy5fbWFwLmRlbGV0ZShtYXBwZWRLZXkpO1xuXG4gICAgdGhpcy5fc2l6ZS0tO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbn1cblxudmFyIFJlY29pbF9MUlVDYWNoZSA9IHtcbiAgTFJVQ2FjaGVcbn07XG5cbnZhciBSZWNvaWxfTFJVQ2FjaGVfMSA9IFJlY29pbF9MUlVDYWNoZS5MUlVDYWNoZTtcblxudmFyIFJlY29pbF9MUlVDYWNoZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIExSVUNhY2hlOiBSZWNvaWxfTFJVQ2FjaGVfMVxufSk7XG5cbmNvbnN0IHtcbiAgTFJVQ2FjaGU6IExSVUNhY2hlJDFcbn0gPSBSZWNvaWxfTFJVQ2FjaGUkMTtcblxuY29uc3Qge1xuICBUcmVlQ2FjaGU6IFRyZWVDYWNoZSQxXG59ID0gUmVjb2lsX1RyZWVDYWNoZSQxO1xuXG5mdW5jdGlvbiB0cmVlQ2FjaGVMUlUobWF4U2l6ZSwgbWFwTm9kZVZhbHVlID0gdiA9PiB2KSB7XG4gIGNvbnN0IGxydUNhY2hlID0gbmV3IExSVUNhY2hlJDEoe1xuICAgIG1heFNpemVcbiAgfSk7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFRyZWVDYWNoZSQxKHtcbiAgICBtYXBOb2RlVmFsdWUsXG4gICAgb25IaXQ6IG5vZGUgPT4ge1xuICAgICAgbHJ1Q2FjaGUuc2V0KG5vZGUsIHRydWUpO1xuICAgIH0sXG4gICAgb25TZXQ6IG5vZGUgPT4ge1xuICAgICAgY29uc3QgbHJ1Tm9kZSA9IGxydUNhY2hlLnRhaWwoKTtcbiAgICAgIGxydUNhY2hlLnNldChub2RlLCB0cnVlKTtcblxuICAgICAgaWYgKGxydU5vZGUgJiYgY2FjaGUuc2l6ZSgpID4gbWF4U2l6ZSkge1xuICAgICAgICBjYWNoZS5kZWxldGUobHJ1Tm9kZS5rZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7IC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cblxuICByZXR1cm4gY2FjaGU7XG59XG5cbnZhciBSZWNvaWxfdHJlZUNhY2hlTFJVID0gdHJlZUNhY2hlTFJVO1xuXG5jb25zdCBUSU1FX1dBUk5JTkdfVEhSRVNIT0xEX01TID0gMTU7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSh4LCBvcHQsIGtleSkge1xuICAvLyBBIG9wdGltaXphdGlvbiB0byBhdm9pZCB0aGUgbW9yZSBleHBlbnNpdmUgSlNPTi5zdHJpbmdpZnkoKSBmb3Igc2ltcGxlIHN0cmluZ3NcbiAgLy8gVGhpcyBtYXkgbG9zZSBwcm90ZWN0aW9uIGZvciB1MjAyOCBhbmQgdTIwMjksIHRob3VnaC5cbiAgaWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJyAmJiAheC5pbmNsdWRlcygnXCInKSAmJiAheC5pbmNsdWRlcygnXFxcXCcpKSB7XG4gICAgcmV0dXJuIGBcIiR7eH1cImA7XG4gIH0gLy8gSGFuZGxlIHByaW1pdGl2ZSB0eXBlc1xuXG5cbiAgc3dpdGNoICh0eXBlb2YgeCkge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gJyc7XG4gICAgLy8gSlNPTi5zdHJpbmdpZnkodW5kZWZpbmVkKSByZXR1cm5zIHVuZGVmaW5lZCwgYnV0IHdlIGFsd2F5cyB3YW50IHRvIHJldHVybiBhIHN0cmluZ1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4geCA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAvLyBjYXNlICdiaWdpbnQnOiAvLyBCaWdJbnQgaXMgbm90IHN1cHBvcnRlZCBpbiB3d3dcbiAgICAgIHJldHVybiBTdHJpbmcoeCk7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgLy8gQWRkIHN1cnJvdW5kaW5nIHF1b3RlcyBhbmQgZXNjYXBlIGludGVybmFsIHF1b3Rlc1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgaWYgKChvcHQgPT09IG51bGwgfHwgb3B0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHQuYWxsb3dGdW5jdGlvbnMpICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ0F0dGVtcHQgdG8gc2VyaWFsaXplIGZ1bmN0aW9uIGluIGEgUmVjb2lsIGNhY2hlIGtleScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYF9fRlVOQ1RJT04oJHt4Lm5hbWV9KV9fYDtcbiAgfVxuXG4gIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfSAvLyBGYWxsYmFjayBjYXNlIGZvciB1bmtub3duIHR5cGVzXG5cblxuICBpZiAodHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF9KU09OJHN0cmluZ2lmeTtcblxuICAgIHJldHVybiAoX0pTT04kc3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnkoeCkpICE9PSBudWxsICYmIF9KU09OJHN0cmluZ2lmeSAhPT0gdm9pZCAwID8gX0pTT04kc3RyaW5naWZ5IDogJyc7XG4gIH0gLy8gRGVhbCB3aXRoIGFsbCBwcm9taXNlcyBhcyBlcXVpdmFsZW50IGZvciBub3cuXG5cblxuICBpZiAoUmVjb2lsX2lzUHJvbWlzZSh4KSkge1xuICAgIHJldHVybiAnX19QUk9NSVNFX18nO1xuICB9IC8vIEFycmF5cyBoYW5kbGUgcmVjdXJzaXZlIHN0cmluZ2lmaWNhdGlvblxuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4gYFske3gubWFwKCh2LCBpKSA9PiBzdHJpbmdpZnkodiwgb3B0LCBpLnRvU3RyaW5nKCkpKX1dYDtcbiAgfSAvLyBJZiBhbiBvYmplY3QgZGVmaW5lcyBhIHRvSlNPTigpIG1ldGhvZCwgdGhlbiB1c2UgdGhhdCB0byBvdmVycmlkZSB0aGVcbiAgLy8gc2VyaWFsaXphdGlvbi4gIFRoaXMgbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgSlNPTi5zdHJpbmdpZnkoKS5cbiAgLy8gUGFzcyB0aGUga2V5IGZvciBjb21wYXRpYmlsaXR5LlxuICAvLyBJbW11dGFibGUuanMgY29sbGVjdGlvbnMgZGVmaW5lIHRoaXMgbWV0aG9kIHRvIGFsbG93IHVzIHRvIHNlcmlhbGl6ZSB0aGVtLlxuXG5cbiAgaWYgKHR5cGVvZiB4LnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICAgIHJldHVybiBzdHJpbmdpZnkoeC50b0pTT04oa2V5KSwgb3B0LCBrZXkpO1xuICB9IC8vIEZvciBidWlsdC1pbiBNYXBzLCBzb3J0IHRoZSBrZXlzIGluIGEgc3RhYmxlIG9yZGVyIGluc3RlYWQgb2YgdGhlXG4gIC8vIGRlZmF1bHQgaW5zZXJ0aW9uIG9yZGVyLiAgU3VwcG9ydCBub24tc3RyaW5nIGtleXMuXG5cblxuICBpZiAoeCBpbnN0YW5jZW9mIE1hcCkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgeCkge1xuICAgICAgLy8gU3RyaW5naWZ5IHdpbGwgZXNjYXBlIGFueSBuZXN0ZWQgcXVvdGVzXG4gICAgICBvYmpbdHlwZW9mIGsgPT09ICdzdHJpbmcnID8gayA6IHN0cmluZ2lmeShrLCBvcHQpXSA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ2lmeShvYmosIG9wdCwga2V5KTtcbiAgfSAvLyBGb3IgYnVpbHQtaW4gU2V0cywgc29ydCB0aGUga2V5cyBpbiBhIHN0YWJsZSBvcmRlciBpbnN0ZWFkIG9mIHRoZVxuICAvLyBkZWZhdWx0IGluc2VydGlvbiBvcmRlci5cblxuXG4gIGlmICh4IGluc3RhbmNlb2YgU2V0KSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeShBcnJheS5mcm9tKHgpLnNvcnQoKGEsIGIpID0+IHN0cmluZ2lmeShhLCBvcHQpLmxvY2FsZUNvbXBhcmUoc3RyaW5naWZ5KGIsIG9wdCkpKSwgb3B0LCBrZXkpO1xuICB9IC8vIEFueXRoaW5nIGVsc2UgdGhhdCBpcyBpdGVyYWJsZSBzZXJpYWxpemUgYXMgYW4gQXJyYXkuXG5cblxuICBpZiAoU3ltYm9sICE9PSB1bmRlZmluZWQgJiYgeFtTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgJiYgdHlwZW9mIHhbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICAgIHJldHVybiBzdHJpbmdpZnkoQXJyYXkuZnJvbSh4KSwgb3B0LCBrZXkpO1xuICB9IC8vIEZvciBhbGwgb3RoZXIgT2JqZWN0cywgc29ydCB0aGUga2V5cyBpbiBhIHN0YWJsZSBvcmRlci5cblxuXG4gIHJldHVybiBgeyR7T2JqZWN0LmtleXMoeCkuZmlsdGVyKGsgPT4geFtrXSAhPT0gdW5kZWZpbmVkKS5zb3J0KCkgLy8gc3RyaW5naWZ5IHRoZSBrZXkgdG8gYWRkIHF1b3RlcyBhbmQgZXNjYXBlIGFueSBuZXN0ZWQgc2xhc2hlcyBvciBxdW90ZXMuXG4gIC5tYXAoayA9PiBgJHtzdHJpbmdpZnkoaywgb3B0KX06JHtzdHJpbmdpZnkoeFtrXSwgb3B0LCBrKX1gKS5qb2luKCcsJyl9fWA7XG59IC8vIFV0aWxpdHkgc2ltaWxhciB0byBKU09OLnN0cmluZ2lmeSgpIGV4Y2VwdDpcbi8vICogU2VyaWFsaXplIGJ1aWx0LWluIFNldHMgYXMgYW4gQXJyYXlcbi8vICogU2VyaWFsaXplIGJ1aWx0LWluIE1hcHMgYXMgYW4gT2JqZWN0LiAgU3VwcG9ydHMgbm9uLXN0cmluZyBrZXlzLlxuLy8gKiBTZXJpYWxpemUgb3RoZXIgaXRlcmFibGVzIGFzIGFycmF5c1xuLy8gKiBTb3J0IHRoZSBrZXlzIG9mIE9iamVjdHMgYW5kIE1hcHMgdG8gaGF2ZSBhIHN0YWJsZSBvcmRlciBiYXNlZCBvbiBzdHJpbmcgY29udmVyc2lvbi5cbi8vICAgIFRoaXMgb3ZlcnJpZGVzIHRoZWlyIGRlZmF1bHQgaW5zZXJ0aW9uIG9yZGVyLlxuLy8gKiBTdGlsbCB1c2VzIHRvSlNPTigpIG9mIGFueSBvYmplY3QgdG8gb3ZlcnJpZGUgc2VyaWFsaXphdGlvblxuLy8gKiBTdXBwb3J0IFN5bWJvbHMgKHRob3VnaCBkb24ndCBndWFyYW50ZWUgdW5pcXVlbmVzcylcbi8vICogV2UgY291bGQgc3VwcG9ydCBCaWdJbnQsIGJ1dCBGbG93IGRvZXNuJ3Qgc2VlbSB0byBsaWtlIGl0LlxuLy8gU2VlIFJlY29pbF9zdGFibGVTdHJpbmdpZnktdGVzdC5qcyBmb3IgZXhhbXBsZXNcblxuXG5mdW5jdGlvbiBzdGFibGVTdHJpbmdpZnkoeCwgb3B0ID0ge1xuICBhbGxvd0Z1bmN0aW9uczogZmFsc2Vcbn0pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogMDtcbiAgICAgIGNvbnN0IHN0ciA9IHN0cmluZ2lmeSh4LCBvcHQpO1xuICAgICAgY29uc3QgZW5kVGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6IDA7XG5cbiAgICAgIGlmIChlbmRUaW1lIC0gc3RhcnRUaW1lID4gVElNRV9XQVJOSU5HX1RIUkVTSE9MRF9NUykge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvbm8tY29uc29sZSAqL1xuICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKGBSZWNvaWw6IFNwZW50ICR7ZW5kVGltZSAtIHN0YXJ0VGltZX1tcyBjb21wdXRpbmcgYSBjYWNoZSBrZXlgKTtcbiAgICAgICAgY29uc29sZS53YXJuKHgsIHN0cik7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBmYi13d3cvbm8tY29uc29sZSAqL1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmdpZnkoeCwgb3B0KTtcbn1cblxudmFyIFJlY29pbF9zdGFibGVTdHJpbmdpZnkgPSBzdGFibGVTdHJpbmdpZnk7XG5cbmNvbnN0IHtcbiAgVHJlZUNhY2hlOiBUcmVlQ2FjaGUkMlxufSA9IFJlY29pbF9UcmVlQ2FjaGUkMTtcblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IGRlZmF1bHRQb2xpY3kgPSB7XG4gIGVxdWFsaXR5OiAncmVmZXJlbmNlJyxcbiAgZXZpY3Rpb246ICdrZWVwLWFsbCcsXG4gIG1heFNpemU6IEluZmluaXR5XG59O1xuXG5mdW5jdGlvbiB0cmVlQ2FjaGVGcm9tUG9saWN5KHtcbiAgZXF1YWxpdHkgPSBkZWZhdWx0UG9saWN5LmVxdWFsaXR5LFxuICBldmljdGlvbiA9IGRlZmF1bHRQb2xpY3kuZXZpY3Rpb24sXG4gIG1heFNpemUgPSBkZWZhdWx0UG9saWN5Lm1heFNpemVcbn0gPSBkZWZhdWx0UG9saWN5KSB7XG4gIGNvbnN0IHZhbHVlTWFwcGVyID0gZ2V0VmFsdWVNYXBwZXIoZXF1YWxpdHkpO1xuICBjb25zdCB0cmVlQ2FjaGUgPSBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIHZhbHVlTWFwcGVyKTtcbiAgcmV0dXJuIHRyZWVDYWNoZTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVNYXBwZXIoZXF1YWxpdHkpIHtcbiAgc3dpdGNoIChlcXVhbGl0eSkge1xuICAgIGNhc2UgJ3JlZmVyZW5jZSc6XG4gICAgICByZXR1cm4gdmFsID0+IHZhbDtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiB2YWwgPT4gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSh2YWwpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGVxdWFsaXR5IHBvbGljeSAke2VxdWFsaXR5fWApO1xufVxuXG5mdW5jdGlvbiBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIG1hcE5vZGVWYWx1ZSkge1xuICBzd2l0Y2ggKGV2aWN0aW9uKSB7XG4gICAgY2FzZSAna2VlcC1hbGwnOlxuICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXVxuICAgICAgcmV0dXJuIG5ldyBUcmVlQ2FjaGUkMih7XG4gICAgICAgIG1hcE5vZGVWYWx1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdscnUnOlxuICAgICAgcmV0dXJuIFJlY29pbF90cmVlQ2FjaGVMUlUoUmVjb2lsX251bGx0aHJvd3MobWF4U2l6ZSksIG1hcE5vZGVWYWx1ZSk7XG5cbiAgICBjYXNlICdtb3N0LXJlY2VudCc6XG4gICAgICByZXR1cm4gUmVjb2lsX3RyZWVDYWNoZUxSVSgxLCBtYXBOb2RlVmFsdWUpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGV2aWN0aW9uIHBvbGljeSAke2V2aWN0aW9ufWApO1xufVxuXG52YXIgUmVjb2lsX3RyZWVDYWNoZUZyb21Qb2xpY3kgPSB0cmVlQ2FjaGVGcm9tUG9saWN5O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgX293bmVyRG9jdW1lbnQsIF9kb2MkZGVmYXVsdFZpZXc7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZG9jID0gb2JqZWN0ICE9IG51bGwgPyAoX293bmVyRG9jdW1lbnQgPSBvYmplY3Qub3duZXJEb2N1bWVudCkgIT09IG51bGwgJiYgX293bmVyRG9jdW1lbnQgIT09IHZvaWQgMCA/IF9vd25lckRvY3VtZW50IDogb2JqZWN0IDogZG9jdW1lbnQ7XG4gIGNvbnN0IGRlZmF1bHRWaWV3ID0gKF9kb2MkZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcpICE9PSBudWxsICYmIF9kb2MkZGVmYXVsdFZpZXcgIT09IHZvaWQgMCA/IF9kb2MkZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgIT0gbnVsbCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxudmFyIFJlY29pbF9pc05vZGUgPSBpc05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWFjdE5hdGl2ZTogaXNSZWFjdE5hdGl2ZSQxLFxuICBpc1NTUjogaXNTU1IkNFxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5mdW5jdGlvbiBzaG91bGROb3RCZUZyb3plbih2YWx1ZSkge1xuICAvLyBQcmltaXRpdmVzIGFuZCBmdW5jdGlvbnM6XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gUmVhY3QgZWxlbWVudHM6XG5cblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZS4kJHR5cGVvZikge1xuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJbW11dGFibGUgc3RydWN0dXJlczpcblxuXG4gIGlmICh2YWx1ZVsnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCddICE9IG51bGwgfHwgdmFsdWVbJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJ10gIT0gbnVsbCB8fCB2YWx1ZVsnQEBfX0lNTVVUQUJMRV9SRUNPUkRfX0BAJ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIERPTSBub2RlczpcblxuXG4gIGlmIChSZWNvaWxfaXNOb2RlKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFJlY29pbF9pc1Byb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBTb21lIGVudmlyb25tZW50cywganVzdCBhcyBKZXN0LCBkb24ndCB3b3JrIHdpdGggdGhlIGluc3RhbmNlb2YgY2hlY2tcblxuXG4gIGlmICghaXNTU1IkNCAmJiAhaXNSZWFjdE5hdGl2ZSQxICYmICggLy8gJEZsb3dGaXhNZShzaXRlPXJlY29pbCkgV2luZG93IGRvZXMgbm90IGhhdmUgYSBGbG93VHlwZSBkZWZpbml0aW9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy82NzA5XG4gIHZhbHVlID09PSB3aW5kb3cgfHwgdmFsdWUgaW5zdGFuY2VvZiBXaW5kb3cpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFJlY3Vyc2l2ZWx5IGZyZWV6ZSBhIHZhbHVlIHRvIGVuZm9yY2UgaXQgaXMgcmVhZC1vbmx5LlxuLy8gVGhpcyBtYXkgYWxzbyBoYXZlIG1pbmltYWwgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGZvciBlbnVtZXJhdGluZ1xuLy8gb2JqZWN0cyAoYmFzZWQgb24gYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMsIG9mIGNvdXJzZSlcblxuXG5mdW5jdGlvbiBkZWVwRnJlZXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgc2hvdWxkTm90QmVGcm96ZW4odmFsdWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7IC8vIE1ha2UgYWxsIHByb3BlcnRpZXMgcmVhZC1vbmx5XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgY29uc3QgcHJvcCA9IHZhbHVlW2tleV07IC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzc2lvbiBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcy5cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0JyAmJiBwcm9wICE9IG51bGwgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSkge1xuICAgICAgICBkZWVwRnJlZXplVmFsdWUocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LnNlYWwodmFsdWUpOyAvLyBUaGlzIGFsc28gbWFrZXMgZXhpc3RpbmcgcHJvcGVydGllcyBub24tY29uZmlndXJhYmxlLlxufVxuXG52YXIgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSA9IGRlZXBGcmVlemVWYWx1ZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICpcbiAqIFRoaXMgaXMgYSBzdHViIGZvciBzb21lIGludGVncmF0aW9uIGludG8gRkIgaW50ZXJuYWwgc3R1ZmZcbiAqL1xuZnVuY3Rpb24gc3RhcnRQZXJmQmxvY2soX2lkKSB7XG4gIHJldHVybiAoKSA9PiBudWxsO1xufVxuXG52YXIgUmVjb2lsX1BlcmZvcm1hbmNlVGltaW5ncyA9IHtcbiAgc3RhcnRQZXJmQmxvY2tcbn07XG5cbmNvbnN0IHtcbiAgbG9hZGFibGVXaXRoRXJyb3I6IGxvYWRhYmxlV2l0aEVycm9yJDEsXG4gIGxvYWRhYmxlV2l0aFByb21pc2U6IGxvYWRhYmxlV2l0aFByb21pc2UkMSxcbiAgbG9hZGFibGVXaXRoVmFsdWU6IGxvYWRhYmxlV2l0aFZhbHVlJDJcbn0gPSBSZWNvaWxfTG9hZGFibGUkMTtcblxuXG5cbmNvbnN0IHtcbiAgZ2V0Tm9kZUxvYWRhYmxlOiBnZXROb2RlTG9hZGFibGUkMixcbiAgcGVla05vZGVMb2FkYWJsZTogcGVla05vZGVMb2FkYWJsZSQxLFxuICBzZXROb2RlVmFsdWU6IHNldE5vZGVWYWx1ZSQzXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZTogc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDFcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ2LFxuICBSZWNvaWxWYWx1ZU5vdFJlYWR5OiBSZWNvaWxWYWx1ZU5vdFJlYWR5JDIsXG4gIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDEsXG4gIGdldE5vZGU6IGdldE5vZGUkNixcbiAgcmVnaXN0ZXJOb2RlOiByZWdpc3Rlck5vZGUkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkOiBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdDogcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0JDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIHJlY29pbENhbGxiYWNrOiByZWNvaWxDYWxsYmFjayQxXG59ID0gUmVjb2lsX3VzZVJlY29pbENhbGxiYWNrO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIHN0YXJ0UGVyZkJsb2NrOiBzdGFydFBlcmZCbG9jayQxXG59ID0gUmVjb2lsX1BlcmZvcm1hbmNlVGltaW5ncztcblxuY2xhc3MgQ2FuY2VsZWQge31cblxuY29uc3QgQ0FOQ0VMRUQgPSBuZXcgQ2FuY2VsZWQoKTtcbi8qKlxuICogQW4gRXhlY3V0aW9uSWQgaXMgYW4gYXJiaXRyYXJ5IElEIHRoYXQgbGV0cyB1cyBkaXN0aW5ndWlzaCBleGVjdXRpb25zIGZyb21cbiAqIGVhY2ggb3RoZXIuIFRoaXMgaXMgbmVjZXNzYXJ5IGFzIHdlIG5lZWQgYSB3YXkgb2Ygc29sdmluZyB0aGlzIHByb2JsZW06XG4gKiBcImdpdmVuIDMgYXN5bmMgZXhlY3V0aW9ucywgb25seSB1cGRhdGUgc3RhdGUgZm9yIHRoZSAnbGF0ZXN0JyBleGVjdXRpb24gd2hlblxuICogaXQgZmluaXNoZXMgcnVubmluZyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIG90aGVyIDIgZmluaXNoXCIuIEV4ZWN1dGlvbklkc1xuICogcHJvdmlkZSBhIGNvbnZlbmllbnQgd2F5IG9mIGlkZW50aWZ5aW5nIGV4ZWN1dGlvbnMgc28gdGhhdCB3ZSBjYW4gdHJhY2sgYW5kXG4gKiBtYW5hZ2UgdGhlbSBvdmVyIHRpbWUuXG4gKi9cblxuY29uc3QgZGVwZW5kZW5jeVN0YWNrID0gW107IC8vIGZvciBkZXRlY3RpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuXG5jb25zdCB3YWl0aW5nU3RvcmVzID0gbmV3IE1hcCgpO1xuXG5jb25zdCBnZXROZXdFeGVjdXRpb25JZCA9ICgoKSA9PiB7XG4gIGxldCBleGVjdXRpb25JZCA9IDA7XG4gIHJldHVybiAoKSA9PiBleGVjdXRpb25JZCsrO1xufSkoKTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbmZ1bmN0aW9uIHNlbGVjdG9yKG9wdGlvbnMpIHtcbiAgbGV0IHJlY29pbFZhbHVlID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBnZXQsXG4gICAgY2FjaGVQb2xpY3lfVU5TVEFCTEU6IGNhY2hlUG9saWN5XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBzZXQgPSBvcHRpb25zLnNldCAhPSBudWxsID8gb3B0aW9ucy5zZXQgOiB1bmRlZmluZWQ7IC8vIGZsb3dcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBIGtleSBvcHRpb24gd2l0aCBhIHVuaXF1ZSBzdHJpbmcgdmFsdWUgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIGEgc2VsZWN0b3IuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NlbGVjdG9ycyBtdXN0IHNwZWNpZnkgYSBnZXQgY2FsbGJhY2sgb3B0aW9uIHRvIGdldCB0aGUgc2VsZWN0b3IgdmFsdWUuJyk7XG4gICAgfVxuICB9IC8vIFRoaXMgaXMgZXZlcnkgZGlzY292ZXJlZCBkZXBlbmRlbmN5IGFjcm9zcyBhbGwgZXhlY3V0aW9uc1xuXG5cbiAgY29uc3QgZGlzY292ZXJlZERlcGVuZGVuY3lOb2RlS2V5cyA9IG5ldyBTZXQoKTtcbiAgY29uc3QgY2FjaGUgPSBSZWNvaWxfdHJlZUNhY2hlRnJvbVBvbGljeShjYWNoZVBvbGljeSAhPT0gbnVsbCAmJiBjYWNoZVBvbGljeSAhPT0gdm9pZCAwID8gY2FjaGVQb2xpY3kgOiB7XG4gICAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnLFxuICAgIGV2aWN0aW9uOiAna2VlcC1hbGwnXG4gIH0pO1xuICBjb25zdCByZXRhaW5lZEJ5ID0gcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0JDEob3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFKTtcbiAgY29uc3QgZXhlY3V0aW9uSW5mb01hcCA9IG5ldyBNYXAoKTtcbiAgbGV0IGxpdmVTdG9yZXNDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gc2VsZWN0b3JJc0xpdmUoKSB7XG4gICAgcmV0dXJuICFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpIHx8IGxpdmVTdG9yZXNDb3VudCA+IDA7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvckluaXQoc3RvcmUpIHtcbiAgICBzdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzLmFkZChrZXkpO1xuICAgIGxpdmVTdG9yZXNDb3VudCsrO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBsaXZlU3RvcmVzQ291bnQtLTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0b3JTaG91bGREZWxldGVDb25maWdPblJlbGVhc2UoKSB7XG4gICAgcmV0dXJuIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQxKGtleSkgIT09IHVuZGVmaW5lZCAmJiAhc2VsZWN0b3JJc0xpdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVBc3luYyhzdG9yZSwgc3RhdGUsIGV4ZWN1dGlvbklkLCBsb2FkYWJsZSwgZGVwVmFsdWVzKSB7XG4gICAgc2V0Q2FjaGUoc3RhdGUsIGxvYWRhYmxlLCBkZXBWYWx1ZXMpO1xuICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgbmV3IFNldChkZXBWYWx1ZXMua2V5cygpKSwgZXhlY3V0aW9uSWQpO1xuICAgIG5vdGlmeVN0b3Jlc09mUmVzb2x2ZWRBc3luYyhzdG9yZSwgZXhlY3V0aW9uSWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5U3RvcmVzT2ZSZXNvbHZlZEFzeW5jKHN0b3JlLCBleGVjdXRpb25JZCkge1xuICAgIGlmIChpc0xhdGVzdEV4ZWN1dGlvbihzdG9yZSwgZXhlY3V0aW9uSWQpKSB7XG4gICAgICBjbGVhckV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlcyA9IHdhaXRpbmdTdG9yZXMuZ2V0KGV4ZWN1dGlvbklkKTtcblxuICAgIGlmIChzdG9yZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChjb25zdCB3YWl0aW5nU3RvcmUgb2Ygc3RvcmVzKSB7XG4gICAgICAgIG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDEod2FpdGluZ1N0b3JlLCBSZWNvaWxfbnVsbHRocm93cyhyZWNvaWxWYWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICB3YWl0aW5nU3RvcmVzLmRlbGV0ZShleGVjdXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya1N0b3JlV2FpdGluZ0ZvclJlc29sdmVkQXN5bmMoc3RvcmUsIGV4ZWN1dGlvbklkKSB7XG4gICAgbGV0IHN0b3JlcyA9IHdhaXRpbmdTdG9yZXMuZ2V0KGV4ZWN1dGlvbklkKTtcblxuICAgIGlmIChzdG9yZXMgPT0gbnVsbCkge1xuICAgICAgd2FpdGluZ1N0b3Jlcy5zZXQoZXhlY3V0aW9uSWQsIHN0b3JlcyA9IG5ldyBTZXQoKSk7XG4gICAgfVxuXG4gICAgc3RvcmVzLmFkZChzdG9yZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBub2RlS2V5KSB7XG4gICAgY29uc3QgaXNLZXlQb2ludGluZ1RvU2VsZWN0b3IgPSBzdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzLmhhcyhub2RlS2V5KTtcbiAgICAvKipcbiAgICAgKiBJdCdzIGltcG9ydGFudCB0aGF0IHdlIGRvbid0IGJ5cGFzcyBjYWxsaW5nIGdldE5vZGVMb2FkYWJsZSBmb3IgYXRvbXNcbiAgICAgKiBhcyBnZXROb2RlTG9hZGFibGUgaGFzIHNpZGUgZWZmZWN0cyBpbiBzdGF0ZVxuICAgICAqL1xuXG4gICAgaWYgKGlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yICYmIHN0YXRlLmF0b21WYWx1ZXMuaGFzKG5vZGVLZXkpKSB7XG4gICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQobm9kZUtleSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0Tm9kZUxvYWRhYmxlJDIoc3RvcmUsIHN0YXRlLCBub2RlS2V5KTtcblxuICAgIGlmIChsb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnICYmIGlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yKSB7XG4gICAgICBzdGF0ZS5hdG9tVmFsdWVzLnNldChub2RlS2V5LCBsb2FkYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvYWRhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGF0dGFjaGVzIGEgdGhlbigpIGFuZCBhIGNhdGNoKCkgdG8gYSBwcm9taXNlIHRoYXQgd2FzXG4gICAqIHJldHVybmVkIGZyb20gYSBzZWxlY3RvcidzIGdldCgpIChlaXRoZXIgZXhwbGljaXRseSBvciBpbXBsaWNpdGx5IGJ5XG4gICAqIHJ1bm5pbmcgYSBmdW5jdGlvbiB0aGF0IHVzZXMgdGhlIFwiYXN5bmNcIiBrZXl3b3JkKS4gSWYgYSBzZWxlY3RvcidzIGdldCgpXG4gICAqIHJldHVybnMgYSBwcm9taXNlLCB3ZSBoYXZlIHR3byBwb3NzaWJpbGl0aWVzOlxuICAgKlxuICAgKiAxLiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUsIGluIHdoaWNoIGNhc2UgaXQgd2lsbCBoYXZlIGNvbXBsZXRlbHkgZmluaXNoZWRcbiAgICogICAgZXhlY3V0aW5nIHdpdGhvdXQgYW55IHJlbWFpbmluZyBwZW5kaW5nIGRlcGVuZGVuY2llcy4gTm8gbW9yZSByZXRyaWVzXG4gICAqICAgIGFyZSBuZWVkZWQgYW5kIHdlIGNhbiBwcm9jZWVkIHdpdGggdXBkYXRpbmcgdGhlIGNhY2hlIGFuZCBub3RpZnlpbmdcbiAgICogICAgc3Vic2NyaWJlcnMgKGlmIGl0IGlzIHRoZSBsYXRlc3QgZXhlY3V0aW9uLCBvdGhlcndpc2Ugb25seSB0aGUgY2FjaGVcbiAgICogICAgd2lsbCBiZSB1cGRhdGVkIGFuZCBzdWJzY3JpcHRpb25zIHdpbGwgbm90IGJlIGZpcmVkKS4gVGhpcyBpcyB0aGUgY2FzZVxuICAgKiAgICBoYW5kbGVkIGJ5IHRoZSBhdHRhY2hlZCB0aGVuKCkgaGFuZGxlci5cbiAgICpcbiAgICogMi4gVGhlIHByb21pc2Ugd2lsbCB0aHJvdyBiZWNhdXNlIGl0IGVpdGhlciBoYXMgYW4gZXJyb3Igb3IgaXQgY2FtZSBhY3Jvc3NcbiAgICogICAgYW4gYXN5bmMgZGVwZW5kZW5jeSB0aGF0IGhhcyBub3QgeWV0IHJlc29sdmVkLCBpbiB3aGljaCBjYXNlIHdlIHdpbGxcbiAgICogICAgY2FsbCB3cmFwRGVwZGVuY3lQcm9taXNlKCksIHdob3NlIHJlc3BvbnNpYmlsaXR5IGlzIHRvIGhhbmRsZSBkZXBlbmRlbmN5XG4gICAqICAgIHByb21pc2VzLiBUaGlzIGNhc2UgaXMgaGFuZGxlZCBieSB0aGUgYXR0YWNoZWQgY2F0Y2goKSBoYW5kbGVyLlxuICAgKlxuICAgKiBCb3RoIGJyYW5jaGVzIHdpbGwgZXZlbnR1YWxseSByZXNvbHZlIHRvIHRoZSBmaW5hbCByZXN1bHQgb2YgdGhlIHNlbGVjdG9yXG4gICAqIChvciBhbiBlcnJvciBpZiBhIHJlYWwgZXJyb3Igb2NjdXJyZWQpLlxuICAgKlxuICAgKiBUaGUgZXhlY3V0aW9uIHdpbGwgcnVuIHRvIGNvbXBsZXRpb24gZXZlbiBpZiBpdCBpcyBzdGFsZSwgYW5kIGl0cyB2YWx1ZVxuICAgKiB3aWxsIGJlIGNhY2hlZC4gQnV0IHN0YWxlIGV4ZWN1dGlvbnMgd2lsbCBub3QgdXBkYXRlIGdsb2JhbCBzdGF0ZSBvciB1cGRhdGVcbiAgICogZXhlY3V0aW9uSW5mbyBhcyB0aGF0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgJ2xhdGVzdCcgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBOb3RlIHRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBwYXNzZWQgYSBwcm9taXNlIHRoYXQgd2FzIHRocm93bi0tQUtBIGFcbiAgICogZGVwZW5kZW5jeSBwcm9taXNlLiBEZXBlbmRlbmN5IHByb21pc2VzIHNob3VsZCBiZSBwYXNzZWQgdG9cbiAgICogd3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZSgpKS5cbiAgICovXG5cblxuICBmdW5jdGlvbiB3cmFwUGVuZGluZ1Byb21pc2Uoc3RvcmUsIHByb21pc2UsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICBpZiAoIXNlbGVjdG9ySXNMaXZlKCkpIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdG9yIHdhcyByZWxlYXNlZCBzaW5jZSB0aGUgcmVxdWVzdCBiZWdhbjsgaWdub3JlIHRoZSByZXNwb25zZS5cbiAgICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMih2YWx1ZSk7XG4gICAgICByZXNvbHZlQXN5bmMoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JZCwgbG9hZGFibGUsIGRlcFZhbHVlcyk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSkuY2F0Y2goZXJyb3JPclByb21pc2UgPT4ge1xuICAgICAgaWYgKCFzZWxlY3RvcklzTGl2ZSgpKSB7XG4gICAgICAgIC8vIFRoZSBzZWxlY3RvciB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIHJlcXVlc3QgYmVnYW47IGlnbm9yZSB0aGUgcmVzcG9uc2UuXG4gICAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgICAgIHRocm93IENBTkNFTEVEO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVFeGVjdXRpb25JbmZvRGVwVmFsdWVzKHN0b3JlLCBleGVjdXRpb25JZCwgZGVwVmFsdWVzKTtcblxuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXJyb3JPclByb21pc2UpKSB7XG4gICAgICAgIHJldHVybiB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCBlcnJvck9yUHJvbWlzZSwgc3RhdGUsIGRlcFZhbHVlcywgZXhlY3V0aW9uSWQsIGxvYWRpbmdEZXBzU3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDEoZXJyb3JPclByb21pc2UpO1xuICAgICAgcmVzb2x2ZUFzeW5jKHN0b3JlLCBzdGF0ZSwgZXhlY3V0aW9uSWQsIGxvYWRhYmxlLCBkZXBWYWx1ZXMpO1xuICAgICAgdGhyb3cgZXJyb3JPclByb21pc2U7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gYXR0YWNoZXMgYSB0aGVuKCkgYW5kIGEgY2F0Y2goKSB0byBhIHByb21pc2UgdGhhdCB3YXNcbiAgICogdGhyb3duIGZyb20gYSBzZWxlY3RvcidzIGdldCgpLiBJZiBhIHNlbGVjdG9yJ3MgZ2V0KCkgdGhyb3dzIGEgcHJvbWlzZSxcbiAgICogd2UgaGF2ZSB0d28gcG9zc2liaWxpdGllczpcbiAgICpcbiAgICogMS4gVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlLCBtZWFuaW5nIG9uZSBvZiBvdXIgc2VsZWN0b3IncyBkZXBlbmRlbmNpZXMgaXNcbiAgICogICAgbm93IGF2YWlsYWJsZSBhbmQgd2Ugc2hvdWxkIFwicmV0cnlcIiBvdXIgZ2V0KCkgYnkgcnVubmluZyBpdCBhZ2Fpbi4gVGhpc1xuICAgKiAgICBpcyB0aGUgY2FzZSBoYW5kbGVkIGJ5IHRoZSBhdHRhY2hlZCB0aGVuKCkgaGFuZGxlci5cbiAgICpcbiAgICogMi4gVGhlIHByb21pc2Ugd2lsbCB0aHJvdyBiZWNhdXNlIHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGRlcGVuZGVuY3lcbiAgICogICAgcHJvbWlzZSAoaW4gb3RoZXIgd29yZHMgYSByZWFsIGVycm9yIG9jY3VycmVkKS4gVGhpcyBjYXNlIGlzIGhhbmRsZWQgYnlcbiAgICogICAgdGhlIGF0dGFjaGVkIGNhdGNoKCkgaGFuZGxlci4gSWYgdGhlIGRlcGVuZGVuY3kgcHJvbWlzZSB0aHJvd3MsIGl0IGlzXG4gICAqICAgIF9hbHdheXNfIGEgcmVhbCBlcnJvciBhbmQgbm90IGFub3RoZXIgZGVwZW5kZW5jeSBwcm9taXNlIChhbnkgZGVwZW5kZW5jeVxuICAgKiAgICBwcm9taXNlcyB3b3VsZCBoYXZlIGJlZW4gaGFuZGxlZCB1cHN0cmVhbSkuXG4gICAqXG4gICAqIFRoZSB0aGVuKCkgYnJhbmNoIHdpbGwgZXZlbnR1YWxseSByZXNvbHZlIHRvIHRoZSBmaW5hbCByZXN1bHQgb2YgdGhlXG4gICAqIHNlbGVjdG9yIChvciBhbiBlcnJvciBpZiBhIHJlYWwgZXJyb3Igb2NjdXJzKSwgYW5kIHRoZSBjYXRjaCgpIHdpbGwgYWx3YXlzXG4gICAqIHJlc29sdmUgdG8gYW4gZXJyb3IgYmVjYXVzZSB0aGUgZGVwZW5kZW5jeSBwcm9taXNlIGlzIGEgcHJvbWlzZSB0aGF0IHdhc1xuICAgKiB3cmFwcGVkIHVwc3RyZWFtLCBtZWFuaW5nIGl0IHdpbGwgb25seSByZXNvbHZlIHRvIGl0cyByZWFsIHZhbHVlIG9yIHRvIGFcbiAgICogcmVhbCBlcnJvci5cbiAgICpcbiAgICogVGhlIGV4ZWN1dGlvbiB3aWxsIHJ1biB0byBjb21wbGV0aW9uIGV2ZW4gaWYgaXQgaXMgc3RhbGUsIGFuZCBpdHMgdmFsdWVcbiAgICogd2lsbCBiZSBjYWNoZWQuIEJ1dCBzdGFsZSBleGVjdXRpb25zIHdpbGwgbm90IHVwZGF0ZSBnbG9iYWwgc3RhdGUgb3IgdXBkYXRlXG4gICAqIGV4ZWN1dGlvbkluZm8gYXMgdGhhdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlICdsYXRlc3QnIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogTm90ZSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgcGFzc2VkIGEgcHJvbWlzZSB0aGF0IHdhcyByZXR1cm5lZCBmcm9tXG4gICAqIGdldCgpLiBUaGUgaW50ZW50aW9uIGlzIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHBhc3NlZCBwcm9taXNlcyB0aGF0XG4gICAqIHdlcmUgdGhyb3duIGR1ZSB0byBhIHBlbmRpbmcgZGVwZW5kZW5jeS4gUHJvbWlzZXMgcmV0dXJuZWQgYnkgZ2V0KCkgc2hvdWxkXG4gICAqIGJlIHBhc3NlZCB0byB3cmFwUGVuZGluZ1Byb21pc2UoKSBpbnN0ZWFkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2Uoc3RvcmUsIHByb21pc2UsIHN0YXRlLCBleGlzdGluZ0RlcHMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihyZXNvbHZlZERlcCA9PiB7XG4gICAgICBpZiAoIXNlbGVjdG9ySXNMaXZlKCkpIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdG9yIHdhcyByZWxlYXNlZCBzaW5jZSB0aGUgcmVxdWVzdCBiZWdhbjsgaWdub3JlIHRoZSByZXNwb25zZS5cbiAgICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9IC8vIENoZWNrIGlmIHdlIGFyZSBoYW5kbGluZyBhIHBlbmRpbmcgUmVjb2lsIGRlcGVuZGVuY3kgb3IgaWYgdGhlIHVzZXJcbiAgICAgIC8vIHRocmV3IHRoZWlyIG93biBQcm9taXNlIHRvIFwic3VzcGVuZFwiIGEgc2VsZWN0b3IgZXZhbHVhdGlvbi4gIFdlIG5lZWRcbiAgICAgIC8vIHRvIGNoZWNrIHRoYXQgdGhlIGxvYWRpbmdEZXBQcm9taXNlIGFjdHVhbGx5IG1hdGNoZXMgdGhlIHByb21pc2UgdGhhdFxuICAgICAgLy8gd2UgY2F1Z2h0IGluIGNhc2UgdGhlIHNlbGVjdG9yIGhhcHBlbmVkIHRvIGNhdGNoIHRoZSBwcm9taXNlIHdlIHRocmV3XG4gICAgICAvLyBmb3IgYSBwZW5kaW5nIFJlY29pbCBkZXBlbmRlbmN5IGZyb20gYGdldFJlY29pbFZhbHVlKClgIGFuZCB0aHJld1xuICAgICAgLy8gdGhlaXIgb3duIHByb21pc2UgaW5zdGVhZC5cblxuXG4gICAgICBpZiAobG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwS2V5ICE9IG51bGwgJiYgbG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwUHJvbWlzZSA9PT0gcHJvbWlzZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTm90ZSBmb3IgYXN5bmMgYXRvbXMsIHRoaXMgbWVhbnMgd2UgYXJlIGNoYW5naW5nIHRoZSBhdG9tJ3MgdmFsdWVcbiAgICAgICAgICogaW4gdGhlIHN0b3JlIGZvciB0aGUgZ2l2ZW4gdmVyc2lvbi4gVGhpcyBzaG91bGQgYmUgYWxyaWdodCBiZWNhdXNlXG4gICAgICAgICAqIHRoZSB2ZXJzaW9uIG9mIHN0YXRlIGlzIG5vdyBzdGFsZSBhbmQgYSBuZXcgdmVyc2lvbiB3aWxsIGhhdmVcbiAgICAgICAgICogYWxyZWFkeSBiZWVuIHRyaWdnZXJlZCBieSB0aGUgYXRvbSBiZWluZyByZXNvbHZlZCAoc2VlIHRoaXMgbG9naWNcbiAgICAgICAgICogaW4gUmVjb2lsX2F0b20uanMpXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0ZS5hdG9tVmFsdWVzLnNldChsb2FkaW5nRGVwc1N0YXRlLmxvYWRpbmdEZXBLZXksIGxvYWRhYmxlV2l0aFZhbHVlJDIocmVzb2x2ZWREZXApKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiByZXNvbHZlZERlcEtleSBpcyBub3QgZGVmaW5lZCwgdGhlIHByb21pc2Ugd2FzIGEgdXNlci10aHJvd25cbiAgICAgICAgICogcHJvbWlzZS4gVXNlci10aHJvd24gcHJvbWlzZXMgYXJlIGFuIGFkdmFuY2VkIGZlYXR1cmUgYW5kIHRoZXlcbiAgICAgICAgICogc2hvdWxkIGJlIGF2b2lkZWQgaW4gYWxtb3N0IGFsbCBjYXNlcy4gVXNpbmcgYGxvYWRhYmxlLm1hcCgpYCBpbnNpZGVcbiAgICAgICAgICogb2Ygc2VsZWN0b3JzIGZvciBsb2FkaW5nIGxvYWRhYmxlcyBhbmQgdGhlbiB0aHJvd2luZyB0aGF0IG1hcHBlZFxuICAgICAgICAgKiBsb2FkYWJsZSdzIHByb21pc2UgaXMgYW4gZXhhbXBsZSBvZiBhIHVzZXItdGhyb3duIHByb21pc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIFdoZW4gd2UgaGl0IGEgdXNlci10aHJvd24gcHJvbWlzZSwgd2UgaGF2ZSB0byBiYWlsIG91dCBvZiBhbiBvcHRpbWl6YXRpb25cbiAgICAgICAgICogd2hlcmUgd2UgYnlwYXNzIGNhbGN1bGF0aW5nIHNlbGVjdG9yIGNhY2hlIGtleXMgZm9yIHNlbGVjdG9ycyB0aGF0XG4gICAgICAgICAqIGhhdmUgYmVlbiBwcmV2aW91c2x5IHNlZW4gZm9yIGEgZ2l2ZW4gc3RhdGUgKHRoZXNlIHNlbGVjdG9ycyBhcmUgc2F2ZWQgaW5cbiAgICAgICAgICogc3RhdGUuYXRvbVZhbHVlcykgdG8gYXZvaWQgc3RhbGUgc3RhdGUgYXMgd2UgaGF2ZSBubyB3YXkgb2Yga25vd2luZ1xuICAgICAgICAgKiB3aGF0IHN0YXRlIGNoYW5nZXMgaGFwcGVuZWQgKGlmIGFueSkgaW4gcmVzdWx0IHRvIHRoZSBwcm9taXNlIHJlc29sdmluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogSWRlYWxseSB3ZSB3b3VsZCBvbmx5IGJhaWwgb3V0IHNlbGVjdG9ycyB0aGF0IGFyZSBpbiB0aGUgY2hhaW4gb2ZcbiAgICAgICAgICogZGVwZW5kZW5jaWVzIGZvciB0aGlzIHNlbGVjdG9yLCBidXQgdGhlcmUncyBjdXJyZW50bHkgbm8gd2F5IHRvIGdldFxuICAgICAgICAgKiBhIGZ1bGwgbGlzdCBvZiBhIHNlbGVjdG9yJ3MgZG93bnN0cmVhbSBub2RlcyBiZWNhdXNlIHRoZSBzdGF0ZSB0aGF0XG4gICAgICAgICAqIGlzIGV4ZWN1dGluZyBtYXkgYmUgYSBkaXNjYXJkZWQgdHJlZSAoc28gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbilcbiAgICAgICAgICogd2lsbCBiZSBlbXB0eSksIGFuZCB0aGUgZnVsbCBkZXAgdHJlZSBtYXkgbm90IGJlIGluIHRoZSBzZWxlY3RvclxuICAgICAgICAgKiBjYWNoZXMgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHNlbGVjdG9yJ3MgY2FjaGUgd2FzIGNsZWFyZWQuIFRvIHNvbHZlXG4gICAgICAgICAqIGZvciB0aGlzIHdlIHdvdWxkIGhhdmUgdG8ga2VlcCB0cmFjayBvZiBhbGwgcnVubmluZyBzZWxlY3RvclxuICAgICAgICAgKiBleGVjdXRpb25zIGFuZCB0aGVpciBkb3duc3RyZWFtIGRlcHMuIEJlY2F1c2UgdGhpcyBvbmx5IGNvdmVycyBlZGdlXG4gICAgICAgICAqIGNhc2VzLCB0aGF0IGNvbXBsZXhpdHkgbWlnaHQgbm90IGJlIGp1c3RpZnlhYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9ycy5mb3JFYWNoKG5vZGVLZXkgPT4ge1xuICAgICAgICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKG5vZGVLZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW1pemF0aW9uOiBOb3cgdGhhdCB0aGUgZGVwZW5kZW5jeSBoYXMgcmVzb2x2ZWQsIGxldCdzIHRyeSBoaXR0aW5nXG4gICAgICAgKiB0aGUgY2FjaGUgaW4gY2FzZSB0aGUgZGVwIHJlc29sdmVkIHRvIGEgdmFsdWUgd2UgaGF2ZSBwcmV2aW91c2x5IHNlZW4uXG4gICAgICAgKlxuICAgICAgICogVE9ETzpcbiAgICAgICAqIE5vdGUgdGhpcyBvcHRpbWl6YXRpb24gaXMgbm90IHBlcmZlY3QgYmVjYXVzZSBpdCBvbmx5IHByZXZlbnRzIHJlLWV4ZWN1dGlvbnNcbiAgICAgICAqIF9hZnRlcl8gdGhlIHBvaW50IHdoZXJlIGFuIGFzeW5jIGRlcGVuZGVuY3kgaXMgZm91bmQuIEFueSBjb2RlIGxlYWRpbmdcbiAgICAgICAqIHVwIHRvIHRoZSBhc3luYyBkZXBlbmRlbmN5IG1heSBoYXZlIHJ1biB1bm5lY2Vzc2FyaWx5LiBUaGUgaWRlYWwgY2FzZVxuICAgICAgICogd291bGQgYmUgdG8gd2FpdCBmb3IgdGhlIGFzeW5jIGRlcGVuZGVuY3kgdG8gcmVzb2x2ZSBmaXJzdCwgY2hlY2sgdGhlXG4gICAgICAgKiBjYWNoZSwgYW5kIHByZXZlbnQgX2FueV8gZXhlY3V0aW9uIG9mIHRoZSBzZWxlY3RvciBpZiB0aGUgcmVzdWx0aW5nXG4gICAgICAgKiB2YWx1ZSBvZiB0aGUgZGVwZW5kZW5jeSBsZWFkcyB0byBhIHBhdGggdGhhdCBpcyBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gICAgICAgKiBUaGUgaWRlYWwgY2FzZSBpcyBtb3JlIGRpZmZpY3VsdCB0byBpbXBsZW1lbnQgYXMgaXQgd291bGQgcmVxdWlyZSB0aGF0XG4gICAgICAgKiB3ZSBjYXB0dXJlIGFuZCB3YWl0IGZvciB0aGUgdGhlIGFzeW5jIGRlcGVuZGVuY3kgcmlnaHQgYWZ0ZXIgY2hlY2tpbmdcbiAgICAgICAqIHRoZSBjYWNoZS4gVGhlIGN1cnJlbnQgYXBwcm9hY2ggdGFrZXMgYWR2YW50YWdlIG9mIHRoZSBmYWN0IHRoYXQgcnVubmluZ1xuICAgICAgICogdGhlIHNlbGVjdG9yIGFscmVhZHkgaGFzIGEgY29kZSBwYXRoIHRoYXQgbGV0cyB1cyBleGl0IGVhcmx5IHdoZW5cbiAgICAgICAqIGFuIGFzeW5jIGRlcCByZXNvbHZlcy5cbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbnN0IGNhY2hlZExvYWRhYmxlID0gZ2V0VmFsRnJvbUNhY2hlQW5kVXBkYXRlZERvd25zdHJlYW1EZXBzKHN0b3JlLCBzdGF0ZSk7XG5cbiAgICAgIGlmIChjYWNoZWRMb2FkYWJsZSAmJiBjYWNoZWRMb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGhhcyB0byBub3RpZnkgc3RvcmVzIG9mIGEgcmVzb2x2ZWQgYXN5bmMsIGV2ZW4gaWYgdGhlcmUgaXMgbm9cbiAgICAgICAgICogY3VycmVudCBwZW5kaW5nIGV4ZWN1dGlvbiBmb3IgdGhlIGZvbGxvd2luZyBjYXNlOlxuICAgICAgICAgKiAxKSBBIGNvbXBvbmVudCByZW5kZXJzIHdpdGggdGhpcyBwZW5kaW5nIGxvYWRhYmxlLlxuICAgICAgICAgKiAyKSBUaGUgdXBzdHJlYW0gZGVwZW5kZW5jeSByZXNvbHZlcy5cbiAgICAgICAgICogMykgV2hpbGUgcHJvY2Vzc2luZyBzb21lIG90aGVyIHNlbGVjdG9yIGl0IHJlYWRzIHRoaXMgb25lLCBzdWNoIGFzXG4gICAgICAgICAqICAgIHdoaWxlIHRyYXZlcnNpbmcgaXRzIGRlcGVuZGVuY2llcy4gIEF0IHRoaXMgcG9pbnQgaXQgZ2V0cyB0aGVcbiAgICAgICAgICogICAgbmV3IHJlc29sdmVkIHZhbHVlIHN5bmNocm9ub3VzbHkgYW5kIGNsZWFycyB0aGUgY3VycmVudFxuICAgICAgICAgKiAgICBleGVjdXRpb24gSUQuICBUaGUgY29tcG9uZW50IHdhc24ndCBnZXR0aW5nIHRoZSB2YWx1ZSBpdHNlbGYsXG4gICAgICAgICAqICAgIHRob3VnaCwgc28gaXQgc3RpbGwgaGFzIHRoZSBwZW5kaW5nIGxvYWRhYmxlLlxuICAgICAgICAgKiA0KSBXaGVuIHRoaXMgY29kZSBleGVjdXRlcyB0aGUgY3VycmVudCBleGVjdXRpb24gaWQgd2FzIGNsZWFyZWRcbiAgICAgICAgICogICAgYW5kIGl0IHdvdWxkbid0IG5vdGlmeSB0aGUgY29tcG9uZW50IG9mIHRoZSBuZXcgdmFsdWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEkgdGhpbmsgdGhpcyBpcyBvbmx5IGFuIGlzc3VlIHdpdGggXCJlYXJseVwiIHJlbmRlcmluZyBzaW5jZSB0aGVcbiAgICAgICAgICogY29tcG9uZW50cyBnb3QgdGhlaXIgdmFsdWUgdXNpbmcgdGhlIGluLXByb2dyZXNzIGV4ZWN1dGlvbi5cbiAgICAgICAgICogV2UgZG9uJ3QgaGF2ZSBhIHVuaXQgdGVzdCBmb3IgdGhpcyBjYXNlIHlldC4gIEknbSBub3Qgc3VyZSBpdCBpc1xuICAgICAgICAgKiBuZWNlc3Nhcnkgd2l0aCByZWNvaWxfY29uY3VycmVudF9zdXBwb3J0IG1vZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklkKSB8fCBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKSA9PSBudWxsKSB7XG4gICAgICAgICAgbm90aWZ5U3RvcmVzT2ZSZXNvbHZlZEFzeW5jKHN0b3JlLCBleGVjdXRpb25JZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FjaGVkTG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVkTG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgY2FjaGVkTG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogSWYgdGhpcyBleGVjdXRpb24gaXMgc3RhbGUsIGxldCdzIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBzb21lIGluXG4gICAgICAgKiBwcm9ncmVzcyBleGVjdXRpb24gd2l0aCBhIG1hdGNoaW5nIHN0YXRlLiBJZiB3ZSBmaW5kIGEgbWF0Y2gsIHRoZW5cbiAgICAgICAqIHdlIGNhbiB0YWtlIHRoZSB2YWx1ZSBmcm9tIHRoYXQgaW4tcHJvZ3Jlc3MgZXhlY3V0aW9uLiBOb3RlIHRoaXMgbWF5XG4gICAgICAgKiBzb3VuZCBsaWtlIGFuIGVkZ2UgY2FzZSwgYnV0IG1heSBiZSB2ZXJ5IGNvbW1vbiBpbiBjYXNlcyB3aGVyZSBhXG4gICAgICAgKiBsb2FkaW5nIGRlcGVuZGVuY3kgcmVzb2x2ZXMgZnJvbSBsb2FkaW5nIHRvIGhhdmluZyBhIHZhbHVlICh0aHVzXG4gICAgICAgKiBwb3NzaWJseSB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyKSwgYW5kIFJlYWN0IHJlLXJlbmRlcnMgYmVmb3JlIHRoZVxuICAgICAgICogY2hhaW5lZCAudGhlbigpIGZ1bmN0aW9ucyBydW4sIHRodXMgc3RhcnRpbmcgYSBuZXcgZXhlY3V0aW9uIGFzIHRoZVxuICAgICAgICogZGVwIGhhcyBjaGFuZ2VkIHZhbHVlLiBXaXRob3V0IHRoaXMgY2hlY2sgd2Ugd2lsbCBydW4gdGhlIHNlbGVjdG9yXG4gICAgICAgKiB0d2ljZSAob25jZSBpbiB0aGUgbmV3IGV4ZWN1dGlvbiBhbmQgb25jZSBhZ2FpbiBpbiB0aGlzIC50aGVuKCksIHNvXG4gICAgICAgKiB0aGlzIGNoZWNrIGlzIG5lY2Vzc2FyeSB0byBrZWVwIHVubmVjZXNzYXJ5IHJlLWV4ZWN1dGlvbnMgdG8gYVxuICAgICAgICogbWluaW11bSkuXG4gICAgICAgKlxuICAgICAgICogQWxzbyBub3RlIHRoaXMgY29kZSBkb2VzIG5vdCBjaGVjayBhY3Jvc3MgYWxsIGV4ZWN1dGlvbnMgdGhhdCBtYXkgYmVcbiAgICAgICAqIHJ1bm5pbmcuIEl0IG9ubHkgb3B0aW1pemVzIGZvciB0aGUgX2xhdGVzdF8gZXhlY3V0aW9uIHBlciBzdG9yZSBhc1xuICAgICAgICogd2UgY3VycmVudGx5IGRvIG5vdCBtYWludGFpbiBhIGxpc3Qgb2YgYWxsIGN1cnJlbnRseSBydW5uaW5nIGV4ZWN1dGlvbnMuXG4gICAgICAgKiBUaGlzIG1lYW5zIGluIHNvbWUgY2FzZXMgd2UgbWF5IHJ1biBzZWxlY3RvcnMgbW9yZSB0aGFuIHN0cmljdGx5XG4gICAgICAgKiBuZWNlc3Nhcnkgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZXhlY3V0aW9ucyBydW5uaW5nIGZvciB0aGUgc2FtZVxuICAgICAgICogc2VsZWN0b3IuIFRoaXMgbWF5IGJlIGEgdmFsaWQgdHJhZGVvZmYgYXMgY2hlY2tpbmcgZm9yIGRlcCBjaGFuZ2VzXG4gICAgICAgKiBhY3Jvc3MgYWxsIGluLXByb2dyZXNzIGV4ZWN1dGlvbnMgbWF5IHRha2UgbG9uZ2VyIHRoYW4ganVzdFxuICAgICAgICogcmUtcnVubmluZyB0aGUgc2VsZWN0b3IuIFRoaXMgd2lsbCBiZSBhcHAtZGVwZW5kZW50LCBhbmQgbWF5YmUgaW4gdGhlXG4gICAgICAgKiBmdXR1cmUgd2UgY2FuIG1ha2UgdGhlIGJlaGF2aW9yIGNvbmZpZ3VyYWJsZS4gQW4gaWRlYWwgZml4IG1heSBiZVxuICAgICAgICogdG8gZXh0ZW5kIHRoZSB0cmVlIGNhY2hlIHRvIHN1cHBvcnQgY2FjaGluZyBsb2FkaW5nIHN0YXRlcy5cbiAgICAgICAqL1xuXG5cbiAgICAgIGlmICghaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklkKSkge1xuICAgICAgICBjb25zdCBleGVjdXRpb25JbmZvID0gZ2V0RXhlY3V0aW9uSW5mb09mSW5Qcm9ncmVzc0V4ZWN1dGlvbihzdGF0ZSk7XG5cbiAgICAgICAgaWYgKChleGVjdXRpb25JbmZvID09PSBudWxsIHx8IGV4ZWN1dGlvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUuc3RhdGUpID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSZXR1cm5pbmcgcHJvbWlzZSBoZXJlIHdpdGhvdXQgd3JhcHBpbmcgYXMgdGhlIHdyYXBwZXIgbG9naWMgd2FzXG4gICAgICAgICAgICogYWxyZWFkeSBkb25lIHVwc3RyZWFtIHdoZW4gdGhpcyBwcm9taXNlIHdhcyBnZW5lcmF0ZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmV0cnkgdGhlIHNlbGVjdG9yIGV2YWx1YXRpb24gbm93IHRoYXQgdGhlIGRlcGVuZGVuY3kgaGFzIHJlc29sdmVkXG5cblxuICAgICAgY29uc3QgW2xvYWRhYmxlLCBkZXBWYWx1ZXNdID0gZXZhbHVhdGVTZWxlY3RvckdldHRlcihzdG9yZSwgc3RhdGUsIGV4ZWN1dGlvbklkKTtcbiAgICAgIHVwZGF0ZUV4ZWN1dGlvbkluZm9EZXBWYWx1ZXMoc3RvcmUsIGV4ZWN1dGlvbklkLCBkZXBWYWx1ZXMpO1xuXG4gICAgICBpZiAobG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgICByZXNvbHZlQXN5bmMoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JZCwgbG9hZGFibGUsIGRlcFZhbHVlcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIC8vIFRoZSBzZWxlY3RvciB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIHJlcXVlc3QgYmVnYW47IGlnbm9yZSB0aGUgcmVzcG9uc2UuXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBDYW5jZWxlZCkge1xuICAgICAgICB0aHJvdyBDQU5DRUxFRDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxlY3RvcklzTGl2ZSgpKSB7XG4gICAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgICAgIHRocm93IENBTkNFTEVEO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDEoZXJyb3IpO1xuICAgICAgcmVzb2x2ZUFzeW5jKHN0b3JlLCBzdGF0ZSwgZXhlY3V0aW9uSWQsIGxvYWRhYmxlLCBleGlzdGluZ0RlcHMpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXREZXBzSW5TdG9yZShzdG9yZSwgc3RhdGUsIGRlcHMsIGV4ZWN1dGlvbklkKSB7XG4gICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSwgX3N0b3JlJGdldFN0YXRlJGN1cnJlLCBfc3RvcmUkZ2V0U3RhdGUyLCBfc3RvcmUkZ2V0U3RhdGUyJG5leHQ7XG5cbiAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklkKSB8fCBzdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZSRnZXRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSA9IF9zdG9yZSRnZXRTdGF0ZS5jdXJyZW50VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJGN1cnJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUkY3VycmUudmVyc2lvbikgfHwgc3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmUkZ2V0U3RhdGUyID0gc3RvcmUuZ2V0U3RhdGUoKSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9IF9zdG9yZSRnZXRTdGF0ZTIubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlMiRuZXh0LnZlcnNpb24pKSB7XG4gICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRULCBfc3RvcmUkZ2V0U3RhdGUzLCBfc3RvcmUkZ2V0U3RhdGUzJG5leHQ7XG5cbiAgICAgIHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZSQxKG5ldyBNYXAoW1trZXksIGRlcHNdXSksIHN0b3JlLCAoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gKF9zdG9yZSRnZXRTdGF0ZTMgPSBzdG9yZS5nZXRTdGF0ZSgpKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0U3RhdGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3N0b3JlJGdldFN0YXRlMyRuZXh0ID0gX3N0b3JlJGdldFN0YXRlMy5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMyRuZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUzJG5leHQudmVyc2lvbikgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLnZlcnNpb24pO1xuICAgICAgZGVwcy5mb3JFYWNoKG5vZGVLZXkgPT4gZGlzY292ZXJlZERlcGVuZGVuY3lOb2RlS2V5cy5hZGQobm9kZUtleSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE5ld0RlcEluU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBuZXdEZXBLZXksIGV4ZWN1dGlvbklkKSB7XG4gICAgZGVwcy5hZGQobmV3RGVwS2V5KTtcbiAgICBzZXREZXBzSW5TdG9yZShzdG9yZSwgc3RhdGUsIGRlcHMsIGV4ZWN1dGlvbklkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2YWx1YXRlU2VsZWN0b3JHZXR0ZXIoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JZCkge1xuICAgIGNvbnN0IGVuZFBlcmZCbG9jayA9IHN0YXJ0UGVyZkJsb2NrJDEoa2V5KTsgLy8gVE9ETyBUNjM5NjU4NjY6IHVzZSBleGVjdXRpb24gSUQgaGVyZVxuXG4gICAgbGV0IGdhdGVDYWxsYmFjayA9IHRydWU7XG5cbiAgICBjb25zdCBmaW5pc2hFdmFsdWF0aW9uID0gKCkgPT4ge1xuICAgICAgZW5kUGVyZkJsb2NrKCk7XG4gICAgICBnYXRlQ2FsbGJhY2sgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgcmVzdWx0SXNFcnJvciA9IGZhbHNlO1xuICAgIGxldCBsb2FkYWJsZTtcbiAgICBjb25zdCBsb2FkaW5nRGVwc1N0YXRlID0ge1xuICAgICAgbG9hZGluZ0RlcEtleTogbnVsbCxcbiAgICAgIGxvYWRpbmdEZXBQcm9taXNlOiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBkZXBWYWx1ZXMgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgYSBmcmVzaCBzZXQgb2YgZGVwcyB0aGF0IHdlJ2xsIGJlIHVzaW5nIHRvIHVwZGF0ZSBzdGF0ZS4gV2UncmVcbiAgICAgKiBzdGFydGluZyBhIG5ldyBzZXQgdmVyc3VzIGFkZGluZyBpdCBpbiBleGlzdGluZyBzdGF0ZSBkZXBzIGJlY2F1c2VcbiAgICAgKiB0aGUgdmVyc2lvbiBvZiBzdGF0ZSB0aGF0IHdlIHVwZGF0ZSBkZXBzIGZvciBtYXkgYmUgYSBtb3JlIHJlY2VudCB2ZXJzaW9uXG4gICAgICogdGhhbiB0aGUgdmVyc2lvbiB0aGUgc2VsZWN0b3Igd2FzIGNhbGxlZCB3aXRoLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGxhdGVzdFxuICAgICAqIGV4ZWN1dGlvbiB3aWxsIHVwZGF0ZSB0aGUgZGVwcyBvZiB0aGUgY3VycmVudC9sYXRlc3QgdmVyc2lvbiBvZiBzdGF0ZSAoXG4gICAgICogdGhpcyBpcyBzYWZlIHRvIGRvIGJlY2F1c2UgdGhlIGZhY3QgdGhhdCB0aGUgc2VsZWN0b3IgaXMgdGhlIGxhdGVzdFxuICAgICAqIGV4ZWN1dGlvbiBtZWFucyB0aGUgZGVwcyB3ZSBkaXNjb3ZlciBiZWxvdyBhcmUgb3VyIGJlc3QgZ3Vlc3MgYXQgdGhlXG4gICAgICogZGVwcyBmb3IgdGhlIGN1cnJlbnQvbGF0ZXN0IHN0YXRlIGluIHRoZSBzdG9yZSlcbiAgICAgKi9cblxuICAgIGNvbnN0IGRlcHMgPSBuZXcgU2V0KCk7XG4gICAgc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBleGVjdXRpb25JZCk7XG5cbiAgICBmdW5jdGlvbiBnZXRSZWNvaWxWYWx1ZShkZXApIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAga2V5OiBkZXBLZXlcbiAgICAgIH0gPSBkZXA7XG4gICAgICBzZXROZXdEZXBJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgZGVwS2V5LCBleGVjdXRpb25JZCk7XG4gICAgICBjb25zdCBkZXBMb2FkYWJsZSA9IGdldENhY2hlZE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGRlcEtleSk7XG4gICAgICBkZXBWYWx1ZXMuc2V0KGRlcEtleSwgZGVwTG9hZGFibGUpO1xuXG4gICAgICBzd2l0Y2ggKGRlcExvYWRhYmxlLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgJ2hhc1ZhbHVlJzpcbiAgICAgICAgICByZXR1cm4gZGVwTG9hZGFibGUuY29udGVudHM7XG5cbiAgICAgICAgY2FzZSAnaGFzRXJyb3InOlxuICAgICAgICAgIHRocm93IGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgIGNhc2UgJ2xvYWRpbmcnOlxuICAgICAgICAgIGxvYWRpbmdEZXBzU3RhdGUubG9hZGluZ0RlcEtleSA9IGRlcEtleTtcbiAgICAgICAgICBsb2FkaW5nRGVwc1N0YXRlLmxvYWRpbmdEZXBQcm9taXNlID0gZGVwTG9hZGFibGUuY29udGVudHM7XG4gICAgICAgICAgdGhyb3cgZGVwTG9hZGFibGUuY29udGVudHM7XG4gICAgICB9XG5cbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ0ludmFsaWQgTG9hZGFibGUgc3RhdGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRDYWxsYmFjayA9IGZuID0+IHtcbiAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoZ2F0ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhyb3cgUmVjb2lsX2VycignQ2FsbGJhY2tzIGZyb20gZ2V0Q2FsbGJhY2soKSBzaG91bGQgb25seSBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIHNlbGVjdG9yIGlzIGV2YWx1dGF0ZWQuICBJdCBjYW4gYmUgdXNlZCBmb3Igc2VsZWN0b3JzIHRvIHJldHVybiBvYmplY3RzIHdpdGggY2FsbGJhY2tzIHRoYXQgY2FuIHdvcmsgd2l0aCBSZWNvaWwgc3RhdGUgd2l0aG91dCBhIHN1YnNjcmlwdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgICEocmVjb2lsVmFsdWUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnUmVjb2lsIFZhbHVlIGNhbiBuZXZlciBiZSBudWxsJykgOiBSZWNvaWxfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHJlY29pbENhbGxiYWNrJDEoc3RvcmUsIGZuLCBhcmdzLCB7XG4gICAgICAgICAgbm9kZTogcmVjb2lsVmFsdWVcbiAgICAgICAgfSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBnZXQoe1xuICAgICAgICBnZXQ6IGdldFJlY29pbFZhbHVlLFxuICAgICAgICBnZXRDYWxsYmFja1xuICAgICAgfSk7XG4gICAgICByZXN1bHQgPSBpc1JlY29pbFZhbHVlJDMocmVzdWx0KSA/IGdldFJlY29pbFZhbHVlKHJlc3VsdCkgOiByZXN1bHQ7XG5cbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gd3JhcFBlbmRpbmdQcm9taXNlKHN0b3JlLCByZXN1bHQsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKS5maW5hbGx5KGZpbmlzaEV2YWx1YXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluaXNoRXZhbHVhdGlvbigpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yT3JEZXBQcm9taXNlKSB7XG4gICAgICByZXN1bHQgPSBlcnJvck9yRGVwUHJvbWlzZTtcblxuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQgPSB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCByZXN1bHQsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKS5maW5hbGx5KGZpbmlzaEV2YWx1YXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0SXNFcnJvciA9IHRydWU7XG4gICAgICAgIGZpbmlzaEV2YWx1YXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVzdWx0SXNFcnJvcikge1xuICAgICAgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhFcnJvciQxKHJlc3VsdCk7XG4gICAgfSBlbHNlIGlmIChSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIGxvYWRhYmxlID0gbG9hZGFibGVXaXRoUHJvbWlzZSQxKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMihyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBbbG9hZGFibGUsIGRlcFZhbHVlc107XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWxGcm9tQ2FjaGVBbmRVcGRhdGVkRG93bnN0cmVhbURlcHMoc3RvcmUsIHN0YXRlKSB7XG4gICAgY29uc3QgZGVwc0FmdGVyQ2FjaGVEb25lID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGV4ZWN1dGlvbkluZm8gPSBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICBsZXQgY2FjaGVkVmFsO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhY2hlZFZhbCA9IGNhY2hlLmdldChub2RlS2V5ID0+IHtcbiAgICAgICAgISh0eXBlb2Ygbm9kZUtleSA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ0NhY2hlIG5vZGVLZXkgaXMgdHlwZSBzdHJpbmcnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBjb25zdCBsb2FkYWJsZSA9IGdldENhY2hlZE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIG5vZGVLZXkpO1xuICAgICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgICB9LCB7XG4gICAgICAgIG9uTm9kZVZpc2l0OiBub2RlID0+IHtcbiAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnYnJhbmNoJyAmJiBub2RlLm5vZGVLZXkgIT09IGtleSkge1xuICAgICAgICAgICAgZGVwc0FmdGVyQ2FjaGVEb25lLmFkZChub2RlLm5vZGVLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoYFByb2JsZW0gd2l0aCBjYWNoZSBsb29rdXAgZm9yIHNlbGVjdG9yIFwiJHtrZXl9XCI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlIHN0b3JlIGNvbnRhaW5zIGNvcnJlY3QgZGVwZW5kZW5jaWVzIGlmIHdlIGhpdCB0aGUgY2FjaGUgc28gdGhhdFxuICAgICAqIHRoZSBzdG9yZSBkZXBzIGFuZCBjYWNoZSBhcmUgaW4gc3luYyBmb3IgYSBnaXZlbiBzdGF0ZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgICAgKiBiZWNhdXNlIHN0b3JlIGRlcHMgYXJlIG5vcm1hbGx5IHVwZGF0ZWQgd2hlbiBuZXcgZXhlY3V0aW9ucyBhcmUgY3JlYXRlZCxcbiAgICAgKiBidXQgY2FjaGUgaGl0cyBkb24ndCB0cmlnZ2VyIG5ldyBleGVjdXRpb25zIGJ1dCB0aGV5IHN0aWxsIF9tYXlfIHNpZ25pZml5XG4gICAgICogYSBjaGFuZ2UgaW4gZGVwcyBpbiB0aGUgc3RvcmUgaWYgdGhlIHN0b3JlIGRlcHMgZm9yIHRoaXMgc3RhdGUgYXJlIGVtcHR5XG4gICAgICogb3Igc3RhbGUuXG4gICAgICovXG5cblxuICAgIGlmIChjYWNoZWRWYWwpIHtcbiAgICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwc0FmdGVyQ2FjaGVEb25lLCBleGVjdXRpb25JbmZvID09PSBudWxsIHx8IGV4ZWN1dGlvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4ZWN1dGlvbkluZm8ubGF0ZXN0RXhlY3V0aW9uSWQpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZWRWYWw7XG4gIH1cbiAgLyoqXG4gICAqIEZJWE1FOiBkZXAga2V5cyBzaG91bGQgdGFrZSBpbnRvIGFjY291bnQgdGhlIHN0YXRlIG9mIHRoZSBsb2FkYWJsZSB0b1xuICAgKiBwcmV2ZW50IHRoZSBlZGdlIGNhc2Ugd2hlcmUgYSBsb2FkYWJsZSB3aXRoIGFuIGVycm9yIGFuZCBhIGxvYWRhYmxlIHdpdGhcbiAgICogYW4gZXJyb3IgYXMgYSB2YWx1ZSBhcmUgdHJlYXRlZCBhcyB0aGUgc2FtZSB0aGluZyBpbmNvcnJlY3RseS4gRm9yIGV4YW1wbGVcbiAgICogdGhlc2UgdHdvIHNob3VsZCBiZSB0cmVhdGVkIGRpZmZlcmVudGx5OlxuICAgKlxuICAgKiBzZWxlY3Rvcih7a2V5OiAnJywgZ2V0OiAoKSA9PiBuZXcgRXJyb3IoJ2hpJyl9KTtcbiAgICogc2VsZWN0b3Ioe2tleTogJycsIGdldCAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdoaScpfX0pO1xuICAgKlxuICAgKiBXaXRoIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gdGhleSBhcmUgdHJlYXRlZCB0aGUgc2FtZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlcFZhbHVlc1RvRGVwUm91dGUoZGVwVmFsdWVzKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZGVwVmFsdWVzLmVudHJpZXMoKSkubWFwKChbZGVwS2V5LCB2YWxMb2FkYWJsZV0pID0+IFtkZXBLZXksIHZhbExvYWRhYmxlLmNvbnRlbnRzXSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWxGcm9tUnVubmluZ05ld0V4ZWN1dGlvbkFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSkge1xuICAgIGNvbnN0IG5ld0V4ZWN1dGlvbklkID0gZ2V0TmV3RXhlY3V0aW9uSWQoKTtcbiAgICBjb25zdCBbbG9hZGFibGUsIG5ld0RlcFZhbHVlc10gPSBldmFsdWF0ZVNlbGVjdG9yR2V0dGVyKHN0b3JlLCBzdGF0ZSwgbmV3RXhlY3V0aW9uSWQpO1xuICAgIC8qKlxuICAgICAqIENvbmRpdGlvbmFsbHkgdXBkYXRlcyB0aGUgY2FjaGUgd2l0aCBhIGdpdmVuIGxvYWRhYmxlLlxuICAgICAqXG4gICAgICogV2Ugb25seSBjYWNoZSBsb2FkYWJsZXMgdGhhdCBhcmUgbm90IGxvYWRpbmcgYmVjYXVzZSBvdXIgY2FjaGUga2V5cyBhcmVcbiAgICAgKiBiYXNlZCBvbiBkZXAgdmFsdWVzLCB3aGljaCBhcmUgaW4gYW4gdW5maW5pc2hlZCBzdGF0ZSBmb3IgbG9hZGFibGVzIHRoYXRcbiAgICAgKiBoYXZlIGEgJ2xvYWRpbmcnIHN0YXRlIChuZXcgZGVwcyBtYXkgYmUgZGlzY292ZXJlZCB3aGlsZSB0aGUgc2VsZWN0b3JcbiAgICAgKiBydW5zIGl0cyBhc3luYyBjb2RlKS4gV2UgbmV2ZXIgd2FudCB0byBjYWNoZSBwYXJ0aWFsIGRlcGVuZGVuY2llcyBiL2MgaXRcbiAgICAgKiBjb3VsZCBsZWFkIHRvIGVycm9ycywgc3VjaCBhcyBwcmVtYXR1cmVseSByZXR1cm5pbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiBhXG4gICAgICogcGFydGlhbCBsaXN0IG9mIGRlcHMtLSB3ZSBuZWVkIHRoZSBmdWxsIGxpc3Qgb2YgZGVwcyB0byBlbnN1cmUgdGhhdCB3ZVxuICAgICAqIGFyZSByZXR1cm5pbmcgdGhlIGNvcnJlY3QgcmVzdWx0IGZyb20gY2FjaGUuXG4gICAgICovXG5cbiAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgc2V0RXhlY3V0aW9uSW5mbyhzdG9yZSwgbmV3RXhlY3V0aW9uSWQsIGxvYWRhYmxlLCBuZXdEZXBWYWx1ZXMsIHN0YXRlKTtcbiAgICAgIG1hcmtTdG9yZVdhaXRpbmdGb3JSZXNvbHZlZEFzeW5jKHN0b3JlLCBuZXdFeGVjdXRpb25JZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgICBzZXRDYWNoZShzdGF0ZSwgbG9hZGFibGUsIG5ld0RlcFZhbHVlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvYWRhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBHaXZlbiBhIHRyZWUgc3RhdGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgXCJzZWxlY3RvciByZXN1bHRcIiwgd2hpY2ggaXNcbiAgICogZGVmaW5lZCBhcyBhIHNpemUtMiB0dXBsZSBvZiBbRGVwZW5kZW5jeU1hcCwgTG9hZGFibGU8VD5dLlxuICAgKlxuICAgKiBUaGUgc2VsZWN0b3IncyBnZXQoKSBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgcmUtZXZhbHVhdGVkIGlmIF9ib3RoXyBvZiB0aGVcbiAgICogZm9sbG93aW5nIHN0YXRlbWVudHMgYXJlIHRydWU6XG4gICAqXG4gICAqIDEuIFRoZSBjdXJyZW50IGRlcCB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgcHJvZHVjZWQgYSBjYWNoZSBrZXkgdGhhdFxuICAgKiAgICB3YXMgbm90IGZvdW5kIGluIHRoZSBjYWNoZS5cbiAgICogMi4gVGhlcmUgaXMgbm8gY3VycmVudGx5IHJ1bm5pbmcgYXN5bmMgZXhlY3V0aW9uIE9SIHRoZXJlIGlzIGFuXG4gICAqICAgIGFzeW5jIGV4ZWN1dGlvbiB0aGF0IGlzIHJ1bm5pbmcsIGJ1dCBhZnRlciBjb21wYXJpbmcgdGhlIGRlcCB2YWx1ZXMgaW5cbiAgICogICAgdGhlIGdpdmVuIHN0YXRlIHdpdGggdGhlIGRlcCB2YWx1ZXMgdGhhdCB0aGUgZXhlY3V0aW9uIGhhcyBkaXNjb3ZlcmVkIHNvXG4gICAqICAgIGZhciB3ZSBmaW5kIHRoYXQgYXQgbGVhc3Qgb25lIGRlcCB2YWx1ZSBoYXMgY2hhbmdlZCwgaW4gd2hpY2ggY2FzZSB3ZVxuICAgKiAgICBzdGFydCBhIG5ldyBleGVjdXRpb24gKHRoZSBwcmV2aW91c2x5IHJ1bm5pbmcgZXhlY3V0aW9uIHdpbGwgY29udGludWUgdG9cbiAgICogICAgcnVuIHRvIGNvbXBsZXRpb24sIGJ1dCBvbmx5IHRoZSBuZXcgZXhlY3V0aW9uIHdpbGwgYmUgZGVlbWVkIHRoZVxuICAgKiAgICAnbGF0ZXN0JyBleGVjdXRpb24sIG1lYW5pbmcgaXQgd2lsbCBiZSB0aGUgb25seSBleGVjdXRpb24gdGhhdCB3aWxsXG4gICAqICAgIHVwZGF0ZSBnbG9iYWwgc3RhdGUgd2hlbiBpdCBpcyBmaW5pc2hlZC4gQW55IG5vbi1sYXRlc3QgZXhlY3V0aW9ucyB3aWxsXG4gICAqICAgIHJ1biB0byBjb21wbGV0aW9uIGFuZCB1cGRhdGUgdGhlIHNlbGVjdG9yIGNhY2hlIGJ1dCBub3QgZ2xvYmFsIHN0YXRlKS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTZWxlY3RvclZhbEFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSkge1xuICAgIGNvbnN0IGNhY2hlZFZhbCA9IGdldFZhbEZyb21DYWNoZUFuZFVwZGF0ZWREb3duc3RyZWFtRGVwcyhzdG9yZSwgc3RhdGUpO1xuXG4gICAgaWYgKGNhY2hlZFZhbCAhPSBudWxsKSB7XG4gICAgICBjbGVhckV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuICAgICAgcmV0dXJuIGNhY2hlZFZhbDtcbiAgICB9XG5cbiAgICBjb25zdCBpblByb2dyZXNzRXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm9PZkluUHJvZ3Jlc3NFeGVjdXRpb24oc3RhdGUpOyAvLyBGSVhNRTogdGhpcyB3b24ndCB3b3JrIHdpdGggY3VzdG9tIGNhY2hpbmcgYi9jIGl0IHVzZXMgc2VwYXJhdGUgY2FjaGVcblxuICAgIGlmIChpblByb2dyZXNzRXhlY3V0aW9uSW5mbyAhPSBudWxsKSB7XG4gICAgICB2YXIgX2luUHJvZ3Jlc3NFeGVjdXRpb25JO1xuXG4gICAgICBpZiAoKChfaW5Qcm9ncmVzc0V4ZWN1dGlvbkkgPSBpblByb2dyZXNzRXhlY3V0aW9uSW5mby5sYXRlc3RMb2FkYWJsZSkgPT09IG51bGwgfHwgX2luUHJvZ3Jlc3NFeGVjdXRpb25JID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5Qcm9ncmVzc0V4ZWN1dGlvbkkuc3RhdGUpID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgbWFya1N0b3JlV2FpdGluZ0ZvclJlc29sdmVkQXN5bmMoc3RvcmUsIFJlY29pbF9udWxsdGhyb3dzKGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkKSk7XG4gICAgICB9IC8vIEZJWE1FOiBjaGVjayBhZnRlciB0aGUgZmFjdCB0byBzZWUgaWYgd2UgbWFkZSB0aGUgcmlnaHQgY2hvaWNlIGJ5IHdhaXRpbmdcblxuXG4gICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3MoaW5Qcm9ncmVzc0V4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRWYWxGcm9tUnVubmluZ05ld0V4ZWN1dGlvbkFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaGVzIGV4ZWN1dGlvbiBpbmZvIGFjcm9zcyBhbGwgc3RvcmVzIHRvIHNlZSBpZiB0aGVyZSBpcyBhbiBpbi1wcm9ncmVzc1xuICAgKiBleGVjdXRpb24gd2hvc2UgZGVwZW5kZW5jeSB2YWx1ZXMgbWF0Y2ggdGhlIHZhbHVlcyBvZiB0aGUgcmVxdWVzdGluZyBzdG9yZS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFeGVjdXRpb25JbmZvT2ZJblByb2dyZXNzRXhlY3V0aW9uKHN0YXRlKSB7XG4gICAgdmFyIF9BcnJheSRmcm9tJGZpbmQ7XG5cbiAgICBjb25zdCBbLCBleGVjdXRpb25JbmZvXSA9IChfQXJyYXkkZnJvbSRmaW5kID0gQXJyYXkuZnJvbShleGVjdXRpb25JbmZvTWFwLmVudHJpZXMoKSkuZmluZCgoW3N0b3JlLCBleGVjSW5mb10pID0+IHtcbiAgICAgIHJldHVybiBleGVjSW5mby5sYXRlc3RMb2FkYWJsZSAhPSBudWxsICYmIGV4ZWNJbmZvLmxhdGVzdEV4ZWN1dGlvbklkICE9IG51bGwgJiYgIWhhdmVBc3luY0RlcHNDaGFuZ2VkKHN0b3JlLCBzdGF0ZSk7XG4gICAgfSkpICE9PSBudWxsICYmIF9BcnJheSRmcm9tJGZpbmQgIT09IHZvaWQgMCA/IF9BcnJheSRmcm9tJGZpbmQgOiBbXTtcbiAgICByZXR1cm4gZXhlY3V0aW9uSW5mbztcbiAgfVxuXG4gIGNvbnN0IG1hcE9mQ2hlY2tlZFZlcnNpb25zID0gbmV3IE1hcCgpO1xuXG4gIGZ1bmN0aW9uIGhhdmVBc3luY0RlcHNDaGFuZ2VkKHN0b3JlLCBzdGF0ZSkge1xuICAgIHZhciBfZXhlY3V0aW9uSW5mbyRkZXBWYWwsIF9tYXBPZkNoZWNrZWRWZXJzaW9ucztcblxuICAgIGNvbnN0IGV4ZWN1dGlvbkluZm8gPSBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICBjb25zdCBvbGREZXBWYWx1ZXMgPSAoX2V4ZWN1dGlvbkluZm8kZGVwVmFsID0gZXhlY3V0aW9uSW5mbyA9PT0gbnVsbCB8fCBleGVjdXRpb25JbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleGVjdXRpb25JbmZvLmRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yaykgIT09IG51bGwgJiYgX2V4ZWN1dGlvbkluZm8kZGVwVmFsICE9PSB2b2lkIDAgPyBfZXhlY3V0aW9uSW5mbyRkZXBWYWwgOiBuZXcgTWFwKCk7XG4gICAgY29uc3QgY2FjaGVkRGVwVmFsdWVzQ2hlY2tlZEZvclRoaXNWZXJzaW9uID0gQXJyYXkoKChfbWFwT2ZDaGVja2VkVmVyc2lvbnMgPSBtYXBPZkNoZWNrZWRWZXJzaW9ucy5nZXQoc3RhdGUudmVyc2lvbikpICE9PSBudWxsICYmIF9tYXBPZkNoZWNrZWRWZXJzaW9ucyAhPT0gdm9pZCAwID8gX21hcE9mQ2hlY2tlZFZlcnNpb25zIDogbmV3IE1hcCgpKS5lbnRyaWVzKCkpO1xuICAgIGNvbnN0IGlzQ2FjaGVkVmVyc2lvblNhbWUgPSBtYXBPZkNoZWNrZWRWZXJzaW9ucy5oYXMoc3RhdGUudmVyc2lvbikgJiYgY2FjaGVkRGVwVmFsdWVzQ2hlY2tlZEZvclRoaXNWZXJzaW9uLmxlbmd0aCA9PT0gb2xkRGVwVmFsdWVzLnNpemUgJiYgY2FjaGVkRGVwVmFsdWVzQ2hlY2tlZEZvclRoaXNWZXJzaW9uLmV2ZXJ5KChbbm9kZUtleSwgbm9kZVZhbF0pID0+IHtcbiAgICAgIHJldHVybiBvbGREZXBWYWx1ZXMuZ2V0KG5vZGVLZXkpID09PSBub2RlVmFsO1xuICAgIH0pO1xuXG4gICAgaWYgKG9sZERlcFZhbHVlcyA9PSBudWxsIHx8IHN0YXRlLnZlcnNpb24gPT09IChleGVjdXRpb25JbmZvID09PSBudWxsIHx8IGV4ZWN1dGlvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4ZWN1dGlvbkluZm8uc3RhdGVWZXJzaW9uKSB8fCBpc0NhY2hlZFZlcnNpb25TYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbWFwT2ZDaGVja2VkVmVyc2lvbnMuc2V0KHN0YXRlLnZlcnNpb24sIG5ldyBNYXAob2xkRGVwVmFsdWVzKSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ob2xkRGVwVmFsdWVzKS5zb21lKChbbm9kZUtleSwgb2xkVmFsXSkgPT4ge1xuICAgICAgY29uc3QgbG9hZGFibGUgPSBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBub2RlS2V5KTtcbiAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cyAhPT0gb2xkVmFsLmNvbnRlbnRzO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSkge1xuICAgIHJldHVybiBleGVjdXRpb25JbmZvTWFwLmdldChzdG9yZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB1cGRhdGUgdGhlIHNlbGVjdG9yJ3MgZXhlY3V0aW9uIGluZm8gd2hlbiB0aGUgc2VsZWN0b3JcbiAgICogaGFzIGVpdGhlciBmaW5pc2hlZCBydW5uaW5nIGFuIGV4ZWN1dGlvbiBvciBoYXMgc3RhcnRlZCBhIG5ldyBleGVjdXRpb24uIElmXG4gICAqIHRoZSBnaXZlbiBsb2FkYWJsZSBpcyBpbiBhICdsb2FkaW5nJyBzdGF0ZSwgdGhlIGludGVudGlvbiBpcyB0aGF0IGEgbmV3XG4gICAqIGV4ZWN1dGlvbiBoYXMgc3RhcnRlZC4gT3RoZXJ3aXNlLCB0aGUgaW50ZW50aW9uIGlzIHRoYXQgYW4gZXhlY3V0aW9uIGhhc1xuICAgKiBqdXN0IGZpbmlzaGVkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldEV4ZWN1dGlvbkluZm8oc3RvcmUsIG5ld0V4ZWN1dGlvbklkLCBsb2FkYWJsZSwgZGVwVmFsdWVzLCBzdGF0ZSkge1xuICAgIGV4ZWN1dGlvbkluZm9NYXAuc2V0KHN0b3JlLCB7XG4gICAgICBkZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcms6IGRlcFZhbHVlcyxcbiAgICAgIGxhdGVzdEV4ZWN1dGlvbklkOiBuZXdFeGVjdXRpb25JZCxcbiAgICAgIGxhdGVzdExvYWRhYmxlOiBsb2FkYWJsZSxcbiAgICAgIHN0YXRlVmVyc2lvbjogc3RhdGUudmVyc2lvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhzdG9yZSwgZXhlY3V0aW9uSWQsIGRlcFZhbHVlcykge1xuICAgIGlmIChpc0xhdGVzdEV4ZWN1dGlvbihzdG9yZSwgZXhlY3V0aW9uSWQpKSB7XG4gICAgICBjb25zdCBleGVjdXRpb25JbmZvID0gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSk7XG5cbiAgICAgIGlmIChleGVjdXRpb25JbmZvICE9IG51bGwpIHtcbiAgICAgICAgZXhlY3V0aW9uSW5mby5kZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmsgPSBkZXBWYWx1ZXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKSB7XG4gICAgZXhlY3V0aW9uSW5mb01hcC5kZWxldGUoc3RvcmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklkKSB7XG4gICAgdmFyIF9nZXRFeGVjdXRpb25JbmZvO1xuXG4gICAgcmV0dXJuIGV4ZWN1dGlvbklkID09PSAoKF9nZXRFeGVjdXRpb25JbmZvID0gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSkpID09PSBudWxsIHx8IF9nZXRFeGVjdXRpb25JbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0RXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDYWNoZShzdGF0ZSwgbG9hZGFibGUsIGRlcFZhbHVlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnICYmIEJvb2xlYW4ob3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSkgPT09IGZhbHNlKSB7XG4gICAgICAgIFJlY29pbF9kZWVwRnJlZXplVmFsdWUobG9hZGFibGUuY29udGVudHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KGtleSwgbG9hZGFibGUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhY2hlLnNldChkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcyksIGxvYWRhYmxlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgUmVjb2lsX2VycihgUHJvYmxlbSB3aXRoIHNldHRpbmcgY2FjaGUgZm9yIHNlbGVjdG9yIFwiJHtrZXl9XCI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcyhmbikge1xuICAgIGlmIChkZXBlbmRlbmN5U3RhY2suaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBSZWNvaWwgc2VsZWN0b3IgaGFzIGNpcmN1bGFyIGRlcGVuZGVuY2llczogJHtkZXBlbmRlbmN5U3RhY2suc2xpY2UoZGVwZW5kZW5jeVN0YWNrLmluZGV4T2Yoa2V5KSkuam9pbignIFxcdTIxOTIgJyl9YDtcbiAgICAgIHJldHVybiBsb2FkYWJsZVdpdGhFcnJvciQxKFJlY29pbF9lcnIobWVzc2FnZSkpO1xuICAgIH1cblxuICAgIGRlcGVuZGVuY3lTdGFjay5wdXNoKGtleSk7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRlcGVuZGVuY3lTdGFjay5wb3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvclBlZWsoc3RvcmUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChub2RlS2V5ID0+IHtcbiAgICAgIHZhciBfcGVla05vZGVMb2FkYWJsZTtcblxuICAgICAgISh0eXBlb2Ygbm9kZUtleSA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ0NhY2hlIG5vZGVLZXkgaXMgdHlwZSBzdHJpbmcnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIChfcGVla05vZGVMb2FkYWJsZSA9IHBlZWtOb2RlTG9hZGFibGUkMShzdG9yZSwgc3RhdGUsIG5vZGVLZXkpKSA9PT0gbnVsbCB8fCBfcGVla05vZGVMb2FkYWJsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BlZWtOb2RlTG9hZGFibGUuY29udGVudHM7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvckdldChzdG9yZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gZGV0ZWN0Q2lyY3VsYXJEZXBlbmRlbmNpZXMoKCkgPT4gZ2V0U2VsZWN0b3JWYWxBbmRVcGRhdGVkRGVwcyhzdG9yZSwgc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRhdGVTZWxlY3RvcihzdGF0ZSkge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhclNlbGVjdG9yQ2FjaGUoc3RvcmUsIHRyZWVTdGF0ZSkge1xuICAgICEocmVjb2lsVmFsdWUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnUmVjb2lsIFZhbHVlIGNhbiBuZXZlciBiZSBudWxsJykgOiBSZWNvaWxfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGZvciAoY29uc3Qgbm9kZUtleSBvZiBkaXNjb3ZlcmVkRGVwZW5kZW5jeU5vZGVLZXlzKSB7XG4gICAgICB2YXIgX25vZGUkY2xlYXJDYWNoZTtcblxuICAgICAgY29uc3Qgbm9kZSA9IGdldE5vZGUkNihub2RlS2V5KTtcbiAgICAgIChfbm9kZSRjbGVhckNhY2hlID0gbm9kZS5jbGVhckNhY2hlKSA9PT0gbnVsbCB8fCBfbm9kZSRjbGVhckNhY2hlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRjbGVhckNhY2hlLmNhbGwobm9kZSwgc3RvcmUsIHRyZWVTdGF0ZSk7XG4gICAgfVxuXG4gICAgZGlzY292ZXJlZERlcGVuZGVuY3lOb2RlS2V5cy5jbGVhcigpO1xuICAgIGludmFsaWRhdGVTZWxlY3Rvcih0cmVlU3RhdGUpO1xuICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMShzdG9yZSwgcmVjb2lsVmFsdWUpO1xuICB9XG5cbiAgaWYgKHNldCAhPSBudWxsKSB7XG4gICAgLyoqXG4gICAgICogRVM1IHN0cmljdCBtb2RlIHByb2hpYml0cyBkZWZpbmluZyBub24tdG9wLWxldmVsIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucyxcbiAgICAgKiBzbyBkb24ndCB1c2UgZnVuY3Rpb24gZGVjbGFyYXRpb24gc3ludGF4IGhlcmVcbiAgICAgKi9cbiAgICBjb25zdCBzZWxlY3RvclNldCA9IChzdG9yZSwgc3RhdGUsIG5ld1ZhbHVlKSA9PiB7XG4gICAgICBsZXQgc3luY1NlbGVjdG9yU2V0RmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHdyaXRlcyA9IG5ldyBNYXAoKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0UmVjb2lsVmFsdWUoe1xuICAgICAgICBrZXk6IGRlcEtleVxuICAgICAgfSkge1xuICAgICAgICBpZiAoc3luY1NlbGVjdG9yU2V0RmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdSZWNvaWw6IEFzeW5jIHNlbGVjdG9yIHNldHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbG9hZGFibGUgPSBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBkZXBLZXkpO1xuXG4gICAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgICAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJlY29pbFZhbHVlTm90UmVhZHkkMihkZXBLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlLCB2YWx1ZU9yVXBkYXRlcikge1xuICAgICAgICBpZiAoc3luY1NlbGVjdG9yU2V0RmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdSZWNvaWw6IEFzeW5jIHNlbGVjdG9yIHNldHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2V0VmFsdWUgPSB0eXBlb2YgdmFsdWVPclVwZGF0ZXIgPT09ICdmdW5jdGlvbicgPyAvLyBjYXN0IHRvIGFueSBiZWNhdXNlIHdlIGNhbid0IHJlc3RyaWN0IHR5cGUgUyBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gaXRzZWxmIHdpdGhvdXQgbG9zaW5nIHN1cHBvcnQgZm9yIG9wYXF1ZSB0eXBlc1xuICAgICAgICAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgICB2YWx1ZU9yVXBkYXRlcihnZXRSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSkpIDogdmFsdWVPclVwZGF0ZXI7XG4gICAgICAgIGNvbnN0IHVwc3RyZWFtV3JpdGVzID0gc2V0Tm9kZVZhbHVlJDMoc3RvcmUsIHN0YXRlLCByZWNvaWxTdGF0ZS5rZXksIHNldFZhbHVlKTtcbiAgICAgICAgdXBzdHJlYW1Xcml0ZXMuZm9yRWFjaCgodiwgaykgPT4gd3JpdGVzLnNldChrLCB2KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgICAgc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkNik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJldCA9IHNldCggLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHtcbiAgICAgICAgc2V0OiBzZXRSZWNvaWxTdGF0ZSxcbiAgICAgICAgZ2V0OiBnZXRSZWNvaWxWYWx1ZSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0UmVjb2lsU3RhdGVcbiAgICAgIH0sIG5ld1ZhbHVlKTsgLy8gc2V0IHNob3VsZCBiZSBhIHZvaWQgbWV0aG9kLCBidXQgaWYgdGhlIHVzZXIgbWFrZXMgaXQgYGFzeW5jYCwgdGhlbiBpdFxuICAgICAgLy8gd2lsbCByZXR1cm4gYSBQcm9taXNlLCB3aGljaCB3ZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydC5cblxuICAgICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9pc1Byb21pc2UocmV0KSA/IFJlY29pbF9lcnIoJ1JlY29pbDogQXN5bmMgc2VsZWN0b3Igc2V0cyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuJykgOiBSZWNvaWxfZXJyKCdSZWNvaWw6IHNlbGVjdG9yIHNldCBzaG91bGQgYmUgYSB2b2lkIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICBzeW5jU2VsZWN0b3JTZXRGaW5pc2hlZCA9IHRydWU7XG4gICAgICByZXR1cm4gd3JpdGVzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVjb2lsVmFsdWUgPSByZWdpc3Rlck5vZGUkMSh7XG4gICAgICBrZXksXG4gICAgICBub2RlVHlwZTogJ3NlbGVjdG9yJyxcbiAgICAgIHBlZWs6IHNlbGVjdG9yUGVlayxcbiAgICAgIGdldDogc2VsZWN0b3JHZXQsXG4gICAgICBzZXQ6IHNlbGVjdG9yU2V0LFxuICAgICAgaW5pdDogc2VsZWN0b3JJbml0LFxuICAgICAgaW52YWxpZGF0ZTogaW52YWxpZGF0ZVNlbGVjdG9yLFxuICAgICAgY2xlYXJDYWNoZTogY2xlYXJTZWxlY3RvckNhY2hlLFxuICAgICAgc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlOiBzZWxlY3RvclNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSxcbiAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IGZhbHNlLFxuICAgICAgcmV0YWluZWRCeVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWNvaWxWYWx1ZSA9IHJlZ2lzdGVyTm9kZSQxKHtcbiAgICAgIGtleSxcbiAgICAgIG5vZGVUeXBlOiAnc2VsZWN0b3InLFxuICAgICAgcGVlazogc2VsZWN0b3JQZWVrLFxuICAgICAgZ2V0OiBzZWxlY3RvckdldCxcbiAgICAgIGluaXQ6IHNlbGVjdG9ySW5pdCxcbiAgICAgIGludmFsaWRhdGU6IGludmFsaWRhdGVTZWxlY3RvcixcbiAgICAgIGNsZWFyQ2FjaGU6IGNsZWFyU2VsZWN0b3JDYWNoZSxcbiAgICAgIHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZTogc2VsZWN0b3JTaG91bGREZWxldGVDb25maWdPblJlbGVhc2UsXG4gICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSxcbiAgICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiBmYWxzZSxcbiAgICAgIHJldGFpbmVkQnlcbiAgICB9KTtcbiAgfVxufVxuLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuXG52YXIgUmVjb2lsX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbi8vIEBmYi1vbmx5OiBpbXBvcnQgdHlwZSB7U2NvcGVSdWxlc30gZnJvbSAnUmVjb2lsX1Njb3BlZEF0b20nO1xuLy8gQGZiLW9ubHk6IGNvbnN0IHtzY29wZWRBdG9tfSA9IHJlcXVpcmUoJ1JlY29pbF9TY29wZWRBdG9tJyk7XG5jb25zdCB7XG4gIGxvYWRhYmxlV2l0aEVycm9yOiBsb2FkYWJsZVdpdGhFcnJvciQyLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBsb2FkYWJsZVdpdGhQcm9taXNlJDIsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQzXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgcGVla05vZGVJbmZvOiBwZWVrTm9kZUluZm8kM1xufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDcsXG4gIERlZmF1bHRWYWx1ZTogRGVmYXVsdFZhbHVlJDIsXG4gIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIsXG4gIHJlZ2lzdGVyTm9kZTogcmVnaXN0ZXJOb2RlJDIsXG4gIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBpc1JlY29pbFZhbHVlOiBpc1JlY29pbFZhbHVlJDRcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWUkMTtcblxuY29uc3Qge1xuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGU6IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQ0LFxuICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZDogbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMixcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDQsXG4gIHNldFJlY29pbFZhbHVlTG9hZGFibGU6IHNldFJlY29pbFZhbHVlTG9hZGFibGUkMlxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQ6IHJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGJhc2VBdG9tKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogcGVyc2lzdGVuY2VcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJldGFpbmVkQnkgPSByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMihvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUpO1xuICBsZXQgbGl2ZVN0b3Jlc0NvdW50ID0gMDtcbiAgbGV0IGRlZmF1bHRMb2FkYWJsZSA9IFJlY29pbF9pc1Byb21pc2Uob3B0aW9ucy5kZWZhdWx0KSA/IGxvYWRhYmxlV2l0aFByb21pc2UkMihvcHRpb25zLmRlZmF1bHQudGhlbih2YWx1ZSA9PiB7XG4gICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMyh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMihlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pKSA6IGxvYWRhYmxlV2l0aFZhbHVlJDMob3B0aW9ucy5kZWZhdWx0KTtcbiAgbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZShvcHRpb25zLmRlZmF1bHQpO1xuICBsZXQgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gQ2xlYW51cCBoYW5kbGVycyBmb3IgdGhpcyBhdG9tXG4gIC8vIFJlbHkgb24gc3RhYmxlIHJlZmVyZW5jZSBlcXVhbGl0eSBvZiB0aGUgc3RvcmUgdG8gdXNlIGl0IGFzIGEga2V5IHBlciA8UmVjb2lsUm9vdD5cblxuICBjb25zdCBjbGVhbnVwRWZmZWN0c0J5U3RvcmUgPSBuZXcgTWFwKCk7XG5cbiAgZnVuY3Rpb24gbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZSh2YWx1ZU9yUHJvbWlzZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5ICE9PSB0cnVlKSB7XG4gICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHZhbHVlT3JQcm9taXNlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIFJlY29pbF9kZWVwRnJlZXplVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlY29pbF9kZWVwRnJlZXplVmFsdWUodmFsdWVPclByb21pc2UpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgcHJvbWlzZSkge1xuICAgIGNvbnN0IHdyYXBwZWRQcm9taXNlID0gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQsIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDtcblxuICAgICAgY29uc3Qgc3RhdGUgPSAoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgICBpZiAoKChfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRhdG9tVmFsdWVzJGdldC5jb250ZW50cykgPT09IHdyYXBwZWRQcm9taXNlKSB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDQoc3RvcmUsIG5vZGUsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyLCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUMiAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUMiA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgIGlmICgoKF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyLmNvbnRlbnRzKSA9PT0gd3JhcHBlZFByb21pc2UpIHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQyKHN0b3JlLCBub2RlLCBsb2FkYWJsZVdpdGhFcnJvciQyKGVycm9yKSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICAgIHJldHVybiB3cmFwcGVkUHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRBdG9tKHN0b3JlLCBpbml0U3RhdGUsIHRyaWdnZXIpIHtcbiAgICB2YXIgX29wdGlvbnMkZWZmZWN0cztcblxuICAgIGxpdmVTdG9yZXNDb3VudCsrO1xuXG4gICAgY29uc3QgY2xlYW51cEF0b20gPSAoKSA9PiB7XG4gICAgICB2YXIgX2NsZWFudXBFZmZlY3RzQnlTdG9yO1xuXG4gICAgICBsaXZlU3RvcmVzQ291bnQtLTtcbiAgICAgIChfY2xlYW51cEVmZmVjdHNCeVN0b3IgPSBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZ2V0KHN0b3JlKSkgPT09IG51bGwgfHwgX2NsZWFudXBFZmZlY3RzQnlTdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xlYW51cEVmZmVjdHNCeVN0b3IuZm9yRWFjaChjbGVhbnVwID0+IGNsZWFudXAoKSk7XG4gICAgICBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZGVsZXRlKHN0b3JlKTtcbiAgICB9O1xuXG4gICAgc3RvcmUuZ2V0U3RhdGUoKS5rbm93bkF0b21zLmFkZChrZXkpOyAvLyBTZXR1cCBhc3luYyBkZWZhdWx0cyB0byBub3RpZnkgc3Vic2NyaWJlcnMgd2hlbiB0aGV5IHJlc29sdmVcblxuICAgIGlmIChkZWZhdWx0TG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgY29uc3Qgbm90aWZ5RGVmYXVsdFN1YnNjcmliZXJzID0gKCkgPT4ge1xuICAgICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRUMztcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUMyAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUMyA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5hdG9tVmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMihzdG9yZSwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGRlZmF1bHRMb2FkYWJsZS5jb250ZW50cy5maW5hbGx5KG5vdGlmeURlZmF1bHRTdWJzY3JpYmVycyk7XG4gICAgfSAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUnVuIEF0b20gRWZmZWN0c1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgY29uc3QgZWZmZWN0cyA9IChfb3B0aW9ucyRlZmZlY3RzID0gb3B0aW9ucy5lZmZlY3RzKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRlZmZlY3RzICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRlZmZlY3RzIDogb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFO1xuXG4gICAgaWYgKGVmZmVjdHMgIT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBzdGF0ZSBpcyBzY29wZWQgYnkgU3RvcmUsIHNpbmNlIHRoaXMgaXMgaW4gdGhlIGluaXRBdG9tKCkgY2xvc3VyZVxuICAgICAgbGV0IGR1cmluZ0luaXQgPSB0cnVlO1xuICAgICAgbGV0IGluaXRWYWx1ZSA9IERFRkFVTFRfVkFMVUUkNztcbiAgICAgIGxldCBpc0luaXRFcnJvciA9IGZhbHNlO1xuICAgICAgbGV0IHBlbmRpbmdTZXRTZWxmID0gbnVsbDtcblxuICAgICAgZnVuY3Rpb24gZ2V0TG9hZGFibGUocmVjb2lsVmFsdWUpIHtcbiAgICAgICAgLy8gTm9ybWFsbHkgd2UgY2FuIGp1c3QgZ2V0IHRoZSBjdXJyZW50IHZhbHVlIG9mIGFub3RoZXIgYXRvbS5cbiAgICAgICAgLy8gQnV0IGZvciBvdXIgb3duIHZhbHVlIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBwZW5kaW5nXG4gICAgICAgIC8vIGluaXRpYWxpemVkIHZhbHVlIG9yIGdldCB0aGUgZmFsbGJhY2sgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgaWYgKGR1cmluZ0luaXQgJiYgcmVjb2lsVmFsdWUua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAvLyBDYXN0IFQgdG8gU1xuICAgICAgICAgIGNvbnN0IHJldFZhbHVlID0gaW5pdFZhbHVlOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuICAgICAgICAgIHJldHVybiByZXRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gcGVla0F0b20oc3RvcmUsIGluaXRTdGF0ZSkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICAgOiBSZWNvaWxfaXNQcm9taXNlKHJldFZhbHVlKSA/IGxvYWRhYmxlV2l0aFByb21pc2UkMihyZXRWYWx1ZS50aGVuKHYgPT4gdiBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gLy8gQ2FzdCBUIHRvIFNcbiAgICAgICAgICBkZWZhdWx0TG9hZGFibGUudG9Qcm9taXNlKCkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICAgOiB2KSkgOiBsb2FkYWJsZVdpdGhWYWx1ZSQzKHJldFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkNChzdG9yZSwgcmVjb2lsVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQcm9taXNlKHJlY29pbFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSkudG9Qcm9taXNlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEluZm9fVU5TVEFCTEUocmVjb2lsVmFsdWUpIHtcbiAgICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQ7XG5cbiAgICAgICAgY29uc3QgaW5mbyA9IHBlZWtOb2RlSW5mbyQzKHN0b3JlLCAoX3N0b3JlJGdldFN0YXRlJG5leHRUNCA9IHN0b3JlLmdldFN0YXRlKCkubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCByZWNvaWxWYWx1ZS5rZXkpO1xuICAgICAgICByZXR1cm4gZHVyaW5nSW5pdCAmJiByZWNvaWxWYWx1ZS5rZXkgPT09IGtleSAmJiAhKGluaXRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyKSA/IHsgLi4uaW5mbyxcbiAgICAgICAgICBpc1NldDogdHJ1ZSxcbiAgICAgICAgICBsb2FkYWJsZTogZ2V0TG9hZGFibGUocmVjb2lsVmFsdWUpXG4gICAgICAgIH0gOiBpbmZvO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzZXRTZWxmID0gZWZmZWN0ID0+IHZhbHVlT3JVcGRhdGVyID0+IHtcbiAgICAgICAgaWYgKGR1cmluZ0luaXQpIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50TG9hZGFibGUgPSBnZXRMb2FkYWJsZShub2RlKTtcbiAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBjdXJyZW50TG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScgPyBjdXJyZW50TG9hZGFibGUuY29udGVudHMgOiBERUZBVUxUX1ZBTFVFJDc7XG4gICAgICAgICAgaW5pdFZhbHVlID0gdHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nID8gLy8gY2FzdCB0byBhbnkgYmVjYXVzZSB3ZSBjYW4ndCByZXN0cmljdCBUIGZyb20gYmVpbmcgYSBmdW5jdGlvbiB3aXRob3V0IGxvc2luZyBzdXBwb3J0IGZvciBvcGFxdWUgdHlwZXNcbiAgICAgICAgICB2YWx1ZU9yVXBkYXRlcihjdXJyZW50VmFsdWUpIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgICAgIDogdmFsdWVPclVwZGF0ZXI7XG5cbiAgICAgICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZShpbml0VmFsdWUpKSB7XG4gICAgICAgICAgICBpbml0VmFsdWUgPSBpbml0VmFsdWUudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgIC8vIEF2b2lkIGNhbGxpbmcgb25TZXQoKSB3aGVuIHNldFNlbGYoKSBpbml0aWFsaXplcyB3aXRoIGEgUHJvbWlzZVxuICAgICAgICAgICAgICBwZW5kaW5nU2V0U2VsZiA9IHtcbiAgICAgICAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHZhbHVlT3JVcGRhdGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgUmVjb2lsX2VycignU2V0dGluZyBhdG9tcyB0byBhc3luYyB2YWx1ZXMgaXMgbm90IGltcGxlbWVudGVkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVPclVwZGF0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0ge1xuICAgICAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZU9yVXBkYXRlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRSZWNvaWxWYWx1ZSQ0KHN0b3JlLCBub2RlLCB0eXBlb2YgdmFsdWVPclVwZGF0ZXIgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50VmFsdWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSAvLyBjYXN0IHRvIGFueSBiZWNhdXNlIHdlIGNhbid0IHJlc3RyaWN0IFQgZnJvbSBiZWluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgbG9zaW5nIHN1cHBvcnQgZm9yIG9wYXF1ZSB0eXBlc1xuICAgICAgICAgICAgdmFsdWVPclVwZGF0ZXIoY3VycmVudFZhbHVlKTsgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cbiAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0ge1xuICAgICAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICAgICAgICB9IDogdmFsdWVPclVwZGF0ZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNldFNlbGYgPSBlZmZlY3QgPT4gKCkgPT4gc2V0U2VsZihlZmZlY3QpKERFRkFVTFRfVkFMVUUkNyk7XG5cbiAgICAgIGNvbnN0IG9uU2V0ID0gZWZmZWN0ID0+IGhhbmRsZXIgPT4ge1xuICAgICAgICB2YXIgX2NsZWFudXBFZmZlY3RzQnlTdG9yMjtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVsZWFzZVxuICAgICAgICB9ID0gc3RvcmUuc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMoY3VycmVudFN0b3JlID0+IHtcbiAgICAgICAgICB2YXIgX2N1cnJlbnRUcmVlJGF0b21WYWx1O1xuXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjdXJyZW50VHJlZSxcbiAgICAgICAgICAgIHByZXZpb3VzVHJlZVxuICAgICAgICAgIH0gPSBjdXJyZW50U3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICAgIGlmICghcHJldmlvdXNUcmVlKSB7XG4gICAgICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyYW5zYWN0aW9uIHN1YnNjcmliZXJzIG5vdGlmaWVkIHdpdGhvdXQgYSBuZXh0IHRyZWUgYmVpbmcgcHJlc2VudCAtLSB0aGlzIGlzIGEgYnVnIGluIFJlY29pbCcpO1xuICAgICAgICAgICAgcHJldmlvdXNUcmVlID0gY3VycmVudFRyZWU7IC8vIGF0dGVtcHQgdG8gdHJ1bmRsZSBvblxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG5ld0xvYWRhYmxlID0gKF9jdXJyZW50VHJlZSRhdG9tVmFsdSA9IGN1cnJlbnRUcmVlLmF0b21WYWx1ZXMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9jdXJyZW50VHJlZSRhdG9tVmFsdSAhPT0gdm9pZCAwID8gX2N1cnJlbnRUcmVlJGF0b21WYWx1IDogZGVmYXVsdExvYWRhYmxlO1xuXG4gICAgICAgICAgaWYgKG5ld0xvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgICAgICAgICB2YXIgX3ByZXZpb3VzVHJlZSRhdG9tVmFsLCBfcGVuZGluZ1NldFNlbGYsIF9wZW5kaW5nU2V0U2VsZjIsIF9wZW5kaW5nU2V0U2VsZjM7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3TG9hZGFibGUuY29udGVudHM7XG4gICAgICAgICAgICBjb25zdCBvbGRMb2FkYWJsZSA9IChfcHJldmlvdXNUcmVlJGF0b21WYWwgPSBwcmV2aW91c1RyZWUuYXRvbVZhbHVlcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX3ByZXZpb3VzVHJlZSRhdG9tVmFsICE9PSB2b2lkIDAgPyBfcHJldmlvdXNUcmVlJGF0b21WYWwgOiBkZWZhdWx0TG9hZGFibGU7XG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnID8gb2xkTG9hZGFibGUuY29udGVudHMgOiBERUZBVUxUX1ZBTFVFJDc7IC8vIFRPRE8gVGhpcyBpc24ndCBhY3R1YWxseSB2YWxpZCwgdXNlIGFzIGEgcGxhY2Vob2xkZXIgZm9yIG5vdy5cbiAgICAgICAgICAgIC8vIElnbm9yZSBhdG9tIHZhbHVlIGNoYW5nZXMgdGhhdCB3ZXJlIHNldCB2aWEgc2V0U2VsZigpIGluIHRoZSBzYW1lIGVmZmVjdC5cbiAgICAgICAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvcGVybHkgY2FsbCB0aGUgaGFuZGxlciBpZiB0aGVyZSB3YXMgYSBzdWJzZXF1ZW50XG4gICAgICAgICAgICAvLyBzZXQgZnJvbSBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBhdG9tIGVmZmVjdCB3aGljaCB3YXMgYmF0Y2hlZFxuICAgICAgICAgICAgLy8gd2l0aCB0aGUgYHNldFNlbGYoKWAgY2FsbC4gIEhvd2V2ZXIsIHdlIG1heSBpbmNvcnJlY3RseSBpZ25vcmVcbiAgICAgICAgICAgIC8vIHRoZSBoYW5kbGVyIGlmIHRoZSBzdWJzZXF1ZW50IGJhdGNoZWQgY2FsbCBoYXBwZW5zIHRvIHNldCB0aGVcbiAgICAgICAgICAgIC8vIGF0b20gdG8gdGhlIGV4YWN0IHNhbWUgdmFsdWUgYXMgdGhlIGBzZXRTZWxmKClgLiAgIEJ1dCwgaW4gdGhhdFxuICAgICAgICAgICAgLy8gY2FzZSwgaXQgd2FzIGtpbmQgb2YgYSBub29wLCBzbyB0aGUgc2VtYW50aWNzIGFyZSBkZWJhdGFibGUuLlxuXG4gICAgICAgICAgICBpZiAoKChfcGVuZGluZ1NldFNlbGYgPSBwZW5kaW5nU2V0U2VsZikgPT09IG51bGwgfHwgX3BlbmRpbmdTZXRTZWxmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGVuZGluZ1NldFNlbGYuZWZmZWN0KSAhPT0gZWZmZWN0IHx8ICgoX3BlbmRpbmdTZXRTZWxmMiA9IHBlbmRpbmdTZXRTZWxmKSA9PT0gbnVsbCB8fCBfcGVuZGluZ1NldFNlbGYyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGVuZGluZ1NldFNlbGYyLnZhbHVlKSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgaGFuZGxlcihuZXdWYWx1ZSwgb2xkVmFsdWUsICFjdXJyZW50VHJlZS5hdG9tVmFsdWVzLmhhcyhrZXkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKChfcGVuZGluZ1NldFNlbGYzID0gcGVuZGluZ1NldFNlbGYpID09PSBudWxsIHx8IF9wZW5kaW5nU2V0U2VsZjMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wZW5kaW5nU2V0U2VsZjMuZWZmZWN0KSA9PT0gZWZmZWN0KSB7XG4gICAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIGtleSk7XG4gICAgICAgIGNsZWFudXBFZmZlY3RzQnlTdG9yZS5zZXQoc3RvcmUsIFsuLi4oKF9jbGVhbnVwRWZmZWN0c0J5U3RvcjIgPSBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZ2V0KHN0b3JlKSkgIT09IG51bGwgJiYgX2NsZWFudXBFZmZlY3RzQnlTdG9yMiAhPT0gdm9pZCAwID8gX2NsZWFudXBFZmZlY3RzQnlTdG9yMiA6IFtdKSwgcmVsZWFzZV0pO1xuICAgICAgfTtcblxuICAgICAgZm9yIChjb25zdCBlZmZlY3Qgb2YgZWZmZWN0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNsZWFudXAgPSBlZmZlY3Qoe1xuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIHN0b3JlSUQ6IHN0b3JlLnN0b3JlSUQsXG4gICAgICAgICAgICB0cmlnZ2VyLFxuICAgICAgICAgICAgc2V0U2VsZjogc2V0U2VsZihlZmZlY3QpLFxuICAgICAgICAgICAgcmVzZXRTZWxmOiByZXNldFNlbGYoZWZmZWN0KSxcbiAgICAgICAgICAgIG9uU2V0OiBvblNldChlZmZlY3QpLFxuICAgICAgICAgICAgZ2V0UHJvbWlzZSxcbiAgICAgICAgICAgIGdldExvYWRhYmxlLFxuICAgICAgICAgICAgZ2V0SW5mb19VTlNUQUJMRVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9jbGVhbnVwRWZmZWN0c0J5U3RvcjM7XG5cbiAgICAgICAgICAgIGNsZWFudXBFZmZlY3RzQnlTdG9yZS5zZXQoc3RvcmUsIFsuLi4oKF9jbGVhbnVwRWZmZWN0c0J5U3RvcjMgPSBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZ2V0KHN0b3JlKSkgIT09IG51bGwgJiYgX2NsZWFudXBFZmZlY3RzQnlTdG9yMyAhPT0gdm9pZCAwID8gX2NsZWFudXBFZmZlY3RzQnlTdG9yMyA6IFtdKSwgY2xlYW51cF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbml0VmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICBpc0luaXRFcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyaW5nSW5pdCA9IGZhbHNlOyAvLyBNdXRhdGUgaW5pdGlhbCBzdGF0ZSBpbiBwbGFjZSBzaW5jZSB3ZSBrbm93IHRoZXJlIGFyZSBubyBvdGhlciBzdWJzY3JpYmVyc1xuICAgICAgLy8gc2luY2Ugd2UgYXJlIHRoZSBvbmVzIGluaXRpYWxpemluZyBvbiBmaXJzdCB1c2UuXG5cbiAgICAgIGlmICghKGluaXRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyKSkge1xuICAgICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRUNTtcblxuICAgICAgICBjb25zdCBmcm96ZW5Jbml0VmFsdWUgPSBtYXliZUZyZWV6ZVZhbHVlT3JQcm9taXNlKGluaXRWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGluaXRMb2FkYWJsZSA9IGlzSW5pdEVycm9yID8gbG9hZGFibGVXaXRoRXJyb3IkMihpbml0VmFsdWUpIDogUmVjb2lsX2lzUHJvbWlzZShmcm96ZW5Jbml0VmFsdWUpID8gbG9hZGFibGVXaXRoUHJvbWlzZSQyKHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgZnJvemVuSW5pdFZhbHVlKSkgOiBsb2FkYWJsZVdpdGhWYWx1ZSQzKGZyb3plbkluaXRWYWx1ZSk7XG4gICAgICAgIGluaXRTdGF0ZS5hdG9tVmFsdWVzLnNldChrZXksIGluaXRMb2FkYWJsZSk7IC8vIElmIHRoZXJlIGlzIGEgcGVuZGluZyB0cmFuc2FjdGlvbiwgdGhlbiBhbHNvIG11dGF0ZSB0aGUgbmV4dCBzdGF0ZSB0cmVlLlxuICAgICAgICAvLyBUaGlzIGNvdWxkIGhhcHBlbiBpZiB0aGUgYXRvbSB3YXMgZmlyc3QgaW5pdGlhbGl6ZWQgaW4gYW4gYWN0aW9uIHRoYXRcbiAgICAgICAgLy8gYWxzbyB1cGRhdGVkIHNvbWUgb3RoZXIgYXRvbSdzIHN0YXRlLlxuXG4gICAgICAgIChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1ID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJG5leHRUNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlJG5leHRUNS5hdG9tVmFsdWVzLnNldChrZXksIGluaXRMb2FkYWJsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsZWFudXBBdG9tO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVla0F0b20oX3N0b3JlLCBzdGF0ZSkge1xuICAgIHZhciBfcmVmLCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQzO1xuXG4gICAgcmV0dXJuIChfcmVmID0gKF9zdGF0ZSRhdG9tVmFsdWVzJGdldDMgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfc3RhdGUkYXRvbVZhbHVlcyRnZXQzICE9PSB2b2lkIDAgPyBfc3RhdGUkYXRvbVZhbHVlcyRnZXQzIDogY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2FkYWJsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0b20oX3N0b3JlLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5hdG9tVmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBBdG9tIHZhbHVlIGlzIHN0b3JlZCBpbiBzdGF0ZTpcbiAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmhhcyhrZXkpKSB7XG4gICAgICAvLyBBdG9tIHZhbHVlIGlzIHN0b3JlZCBidXQgbmVlZHMgdmFsaWRhdGlvbiBiZWZvcmUgdXNlLlxuICAgICAgLy8gV2UgbWlnaHQgaGF2ZSBhbHJlYWR5IHZhbGlkYXRlZCBpdCBhbmQgaGF2ZSBhIGNhY2hlZCB2YWxpZGF0ZWQgdmFsdWU6XG4gICAgICBpZiAoY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocGVyc2lzdGVuY2UgPT0gbnVsbCkge1xuICAgICAgICBSZWNvaWxfZXhwZWN0YXRpb25WaW9sYXRpb24oYFRyaWVkIHRvIHJlc3RvcmUgYSBwZXJzaXN0ZWQgdmFsdWUgZm9yIGF0b20gJHtrZXl9IGJ1dCBpdCBoYXMgbm8gcGVyc2lzdGVuY2Ugc2V0dGluZ3MuYCk7XG4gICAgICAgIHJldHVybiBkZWZhdWx0TG9hZGFibGU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vbnZhbGlkYXRlZFZhbHVlID0gc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuZ2V0KGtleSk7XG4gICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSBwZXJzaXN0ZW5jZS52YWxpZGF0b3Iobm9udmFsaWRhdGVkVmFsdWUsIERFRkFVTFRfVkFMVUUkNyk7XG4gICAgICBjb25zdCB2YWxpZGF0ZWRWYWx1ZUxvYWRhYmxlID0gdmFsaWRhdG9yUmVzdWx0IGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgPyBkZWZhdWx0TG9hZGFibGUgOiBsb2FkYWJsZVdpdGhWYWx1ZSQzKHZhbGlkYXRvclJlc3VsdCk7XG4gICAgICBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlID0gdmFsaWRhdGVkVmFsdWVMb2FkYWJsZTtcbiAgICAgIHJldHVybiBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVmYXVsdExvYWRhYmxlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRhdGVBdG9tKCkge1xuICAgIGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBdG9tKF9zdG9yZSwgc3RhdGUsIG5ld1ZhbHVlKSB7XG4gICAgLy8gQmFpbCBvdXQgaWYgd2UncmUgYmVpbmcgc2V0IHRvIHRoZSBleGlzdGluZyB2YWx1ZSwgb3IgaWYgd2UncmUgYmVpbmdcbiAgICAvLyByZXNldCBidXQgaGF2ZSBubyBzdG9yZWQgdmFsdWUgKHZhbGlkYXRlZCBvciB1bnZhbGlkYXRlZCkgdG8gcmVzZXQgZnJvbTpcbiAgICBpZiAoc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSBSZWNvaWxfbnVsbHRocm93cyhzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKTtcblxuICAgICAgaWYgKGV4aXN0aW5nLnN0YXRlID09PSAnaGFzVmFsdWUnICYmIG5ld1ZhbHVlID09PSBleGlzdGluZy5jb250ZW50cykge1xuICAgICAgICByZXR1cm4gbmV3IE1hcCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmhhcyhrZXkpICYmIG5ld1ZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZShuZXdWYWx1ZSk7XG4gICAgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gY2FuIGJlIHJlbGVhc2VkIG5vdyBpZiBpdCB3YXMgcHJldmlvdXNseSBpbiB1c2VcblxuICAgIHJldHVybiBuZXcgTWFwKCkuc2V0KGtleSwgbG9hZGFibGVXaXRoVmFsdWUkMyhuZXdWYWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlQXRvbSgpIHtcbiAgICByZXR1cm4gZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIoa2V5KSAhPT0gdW5kZWZpbmVkICYmIGxpdmVTdG9yZXNDb3VudCA8PSAwO1xuICB9XG5cbiAgY29uc3Qgbm9kZSA9IHJlZ2lzdGVyTm9kZSQyKHtcbiAgICBrZXksXG4gICAgbm9kZVR5cGU6ICdhdG9tJyxcbiAgICBwZWVrOiBwZWVrQXRvbSxcbiAgICBnZXQ6IGdldEF0b20sXG4gICAgc2V0OiBzZXRBdG9tLFxuICAgIGluaXQ6IGluaXRBdG9tLFxuICAgIGludmFsaWRhdGU6IGludmFsaWRhdGVBdG9tLFxuICAgIHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZTogc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlQXRvbSxcbiAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogb3B0aW9ucy5wZXJzaXN0ZW5jZV9VTlNUQUJMRSA/IHtcbiAgICAgIHR5cGU6IG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUudHlwZSxcbiAgICAgIGJhY2tCdXR0b246IG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUuYmFja0J1dHRvblxuICAgIH0gOiB1bmRlZmluZWQsXG4gICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IHRydWUsXG4gICAgcmV0YWluZWRCeVxuICB9KTtcbiAgcmV0dXJuIG5vZGU7XG59IC8vIHByZXR0aWVyLWlnbm9yZVxuXG5cbmZ1bmN0aW9uIGF0b20ob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ0Ega2V5IG9wdGlvbiB3aXRoIGEgdW5pcXVlIHN0cmluZyB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkIHdoZW4gY3JlYXRpbmcgYW4gYXRvbS4nKTtcbiAgICB9XG5cbiAgICBpZiAoISgnZGVmYXVsdCcgaW4gb3B0aW9ucykpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ0EgZGVmYXVsdCB2YWx1ZSBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGNyZWF0aW5nIGFuIGF0b20uJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qge1xuICAgIGRlZmF1bHQ6IG9wdGlvbnNEZWZhdWx0LFxuICAgIC8vIEBmYi1vbmx5OiBzY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1MsXG4gICAgLi4ucmVzdE9wdGlvbnNcbiAgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGlzUmVjb2lsVmFsdWUkNChvcHRpb25zRGVmYXVsdCkgLy8gQ29udGludWUgdG8gdXNlIGF0b21XaXRoRmFsbGJhY2sgZm9yIHByb21pc2UgZGVmYXVsdHMgZm9yIHNjb3BlZCBhdG9tc1xuICAvLyBmb3Igbm93LCBzaW5jZSBzY29wZWQgYXRvbXMgZG9uJ3Qgc3VwcG9ydCBhc3luYyBkZWZhdWx0c1xuICAvLyBAZmItb25seTogfHwgKGlzUHJvbWlzZShvcHRpb25zRGVmYXVsdCkgJiYgc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTKVxuICApIHtcbiAgICByZXR1cm4gYXRvbVdpdGhGYWxsYmFjayh7IC4uLnJlc3RPcHRpb25zLFxuICAgICAgZGVmYXVsdDogb3B0aW9uc0RlZmF1bHQgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcblxuICAgIH0pOyAvLyBAZmItb25seTogfSBlbHNlIGlmIChzY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1MgJiYgIWlzUHJvbWlzZShvcHRpb25zRGVmYXVsdCkpIHtcbiAgICAvLyBAZmItb25seTogcmV0dXJuIHNjb3BlZEF0b208VD4oe1xuICAgIC8vIEBmYi1vbmx5OiAuLi5yZXN0T3B0aW9ucyxcbiAgICAvLyBAZmItb25seTogZGVmYXVsdDogb3B0aW9uc0RlZmF1bHQsXG4gICAgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgICAvLyBAZmItb25seTogfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2VBdG9tKHsgLi4ucmVzdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGF0b21XaXRoRmFsbGJhY2sob3B0aW9ucykge1xuICBjb25zdCBiYXNlID0gYXRvbSh7IC4uLm9wdGlvbnMsXG4gICAgZGVmYXVsdDogREVGQVVMVF9WQUxVRSQ3LFxuICAgIHBlcnNpc3RlbmNlX1VOU1RBQkxFOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB7IC4uLm9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUsXG4gICAgICB2YWxpZGF0b3I6IHN0b3JlZFZhbHVlID0+IHN0b3JlZFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgPyBzdG9yZWRWYWx1ZSA6IFJlY29pbF9udWxsdGhyb3dzKG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUpLnZhbGlkYXRvcihzdG9yZWRWYWx1ZSwgREVGQVVMVF9WQUxVRSQ3KVxuICAgIH0sXG4gICAgLy8gVE9ETyBIYWNrIGZvciBub3cuXG4gICAgZWZmZWN0czogb3B0aW9ucy5lZmZlY3RzLFxuICAgIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOiBvZmZcbiAgICBlZmZlY3RzX1VOU1RBQkxFOiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuXG4gIH0pO1xuICBjb25zdCBzZWwgPSBSZWNvaWxfc2VsZWN0b3Ioe1xuICAgIGtleTogYCR7b3B0aW9ucy5rZXl9X193aXRoRmFsbGJhY2tgLFxuICAgIGdldDogKHtcbiAgICAgIGdldFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGJhc2VWYWx1ZSA9IGdldChiYXNlKTtcbiAgICAgIHJldHVybiBiYXNlVmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMiA/IG9wdGlvbnMuZGVmYXVsdCA6IGJhc2VWYWx1ZTtcbiAgICB9LFxuICAgIHNldDogKHtcbiAgICAgIHNldFxuICAgIH0sIG5ld1ZhbHVlKSA9PiBzZXQoYmFzZSwgbmV3VmFsdWUpLFxuICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5XG4gIH0pO1xuICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMShzZWwua2V5LCBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMihvcHRpb25zLmtleSkpO1xuICByZXR1cm4gc2VsO1xufVxuXG52YXIgUmVjb2lsX2F0b20gPSBhdG9tO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuY2xhc3MgTWFwQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zJG1hcEtleTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9tYXBcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9rZXlNYXBwZXJcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9rZXlNYXBwZXIgPSAoX29wdGlvbnMkbWFwS2V5ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1hcEtleSkgIT09IG51bGwgJiYgX29wdGlvbnMkbWFwS2V5ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRtYXBLZXkgOiB2ID0+IHY7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuc2l6ZTtcbiAgfVxuXG4gIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyh0aGlzLl9rZXlNYXBwZXIoa2V5KSk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5nZXQodGhpcy5fa2V5TWFwcGVyKGtleSkpO1xuICB9XG5cbiAgc2V0KGtleSwgdmFsKSB7XG4gICAgdGhpcy5fbWFwLnNldCh0aGlzLl9rZXlNYXBwZXIoa2V5KSwgdmFsKTtcbiAgfVxuXG4gIGRlbGV0ZShrZXkpIHtcbiAgICB0aGlzLl9tYXAuZGVsZXRlKHRoaXMuX2tleU1hcHBlcihrZXkpKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICB9XG5cbn1cblxudmFyIFJlY29pbF9NYXBDYWNoZSA9IHtcbiAgTWFwQ2FjaGVcbn07XG5cbnZhciBSZWNvaWxfTWFwQ2FjaGVfMSA9IFJlY29pbF9NYXBDYWNoZS5NYXBDYWNoZTtcblxudmFyIFJlY29pbF9NYXBDYWNoZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIE1hcENhY2hlOiBSZWNvaWxfTWFwQ2FjaGVfMVxufSk7XG5cbmNvbnN0IHtcbiAgTFJVQ2FjaGU6IExSVUNhY2hlJDJcbn0gPSBSZWNvaWxfTFJVQ2FjaGUkMTtcblxuY29uc3Qge1xuICBNYXBDYWNoZTogTWFwQ2FjaGUkMVxufSA9IFJlY29pbF9NYXBDYWNoZSQxO1xuXG5cblxuXG5cblxuXG5jb25zdCBkZWZhdWx0UG9saWN5JDEgPSB7XG4gIGVxdWFsaXR5OiAncmVmZXJlbmNlJyxcbiAgZXZpY3Rpb246ICdub25lJyxcbiAgbWF4U2l6ZTogSW5maW5pdHlcbn07XG5cbmZ1bmN0aW9uIGNhY2hlRnJvbVBvbGljeSh7XG4gIGVxdWFsaXR5ID0gZGVmYXVsdFBvbGljeSQxLmVxdWFsaXR5LFxuICBldmljdGlvbiA9IGRlZmF1bHRQb2xpY3kkMS5ldmljdGlvbixcbiAgbWF4U2l6ZSA9IGRlZmF1bHRQb2xpY3kkMS5tYXhTaXplXG59ID0gZGVmYXVsdFBvbGljeSQxKSB7XG4gIGNvbnN0IHZhbHVlTWFwcGVyID0gZ2V0VmFsdWVNYXBwZXIkMShlcXVhbGl0eSk7XG4gIGNvbnN0IGNhY2hlID0gZ2V0Q2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIHZhbHVlTWFwcGVyKTtcbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZU1hcHBlciQxKGVxdWFsaXR5KSB7XG4gIHN3aXRjaCAoZXF1YWxpdHkpIHtcbiAgICBjYXNlICdyZWZlcmVuY2UnOlxuICAgICAgcmV0dXJuIHZhbCA9PiB2YWw7XG5cbiAgICBjYXNlICd2YWx1ZSc6XG4gICAgICByZXR1cm4gdmFsID0+IFJlY29pbF9zdGFibGVTdHJpbmdpZnkodmFsKTtcbiAgfVxuXG4gIHRocm93IFJlY29pbF9lcnIoYFVucmVjb2duaXplZCBlcXVhbGl0eSBwb2xpY3kgJHtlcXVhbGl0eX1gKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIG1hcEtleSkge1xuICBzd2l0Y2ggKGV2aWN0aW9uKSB7XG4gICAgY2FzZSAna2VlcC1hbGwnOlxuICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXVxuICAgICAgcmV0dXJuIG5ldyBNYXBDYWNoZSQxKHtcbiAgICAgICAgbWFwS2V5XG4gICAgICB9KTtcblxuICAgIGNhc2UgJ2xydSc6XG4gICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gICAgICByZXR1cm4gbmV3IExSVUNhY2hlJDIoe1xuICAgICAgICBtYXBLZXksXG4gICAgICAgIG1heFNpemU6IFJlY29pbF9udWxsdGhyb3dzKG1heFNpemUpXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ21vc3QtcmVjZW50JzpcbiAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbiAgICAgIHJldHVybiBuZXcgTFJVQ2FjaGUkMih7XG4gICAgICAgIG1hcEtleSxcbiAgICAgICAgbWF4U2l6ZTogMVxuICAgICAgfSk7XG4gIH1cblxuICB0aHJvdyBSZWNvaWxfZXJyKGBVbnJlY29nbml6ZWQgZXZpY3Rpb24gcG9saWN5ICR7ZXZpY3Rpb259YCk7XG59XG5cbnZhciBSZWNvaWxfY2FjaGVGcm9tUG9saWN5ID0gY2FjaGVGcm9tUG9saWN5O1xuXG5jb25zdCB7XG4gIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDJcbn0gPSBSZWNvaWxfTm9kZTtcblxuXG5cblxuXG4vLyBQcm9jZXNzIHNjb3BlUnVsZXMgdG8gaGFuZGxlIGFueSBlbnRyaWVzIHdoaWNoIGFyZSBmdW5jdGlvbnMgdGFraW5nIHBhcmFtZXRlcnNcbi8vIHByZXR0aWVyLWlnbm9yZVxuLy8gQGZiLW9ubHk6IGZ1bmN0aW9uIG1hcFNjb3BlUnVsZXM8UD4oXG4vLyBAZmItb25seTogc2NvcGVSdWxlcz86IFBhcmFtZXRlcml6ZWRTY29wZVJ1bGVzPFA+LFxuLy8gQGZiLW9ubHk6IHBhcmFtOiBQLFxuLy8gQGZiLW9ubHk6ICk6IFNjb3BlUnVsZXMgfCB2b2lkIHtcbi8vIEBmYi1vbmx5OiByZXR1cm4gc2NvcGVSdWxlcz8ubWFwKHJ1bGUgPT5cbi8vIEBmYi1vbmx5OiBBcnJheS5pc0FycmF5KHJ1bGUpXG4vLyBAZmItb25seTogPyBydWxlLm1hcChlbnRyeSA9PiAodHlwZW9mIGVudHJ5ID09PSAnZnVuY3Rpb24nID8gZW50cnkocGFyYW0pIDogZW50cnkpKVxuLy8gQGZiLW9ubHk6IDogcnVsZSxcbi8vIEBmYi1vbmx5OiApO1xuLy8gQGZiLW9ubHk6IH1cblxuLypcbkEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBhdG9tIGJhc2VkIG9uIHRoZSBpbnB1dCBwYXJhbWV0ZXIuXG5cbkVhY2ggdW5pcXVlIHBhcmFtZXRlciByZXR1cm5zIGEgdW5pcXVlIGF0b20uIEUuZy4sXG5cbiAgY29uc3QgZiA9IGF0b21GYW1pbHkoLi4uKTtcbiAgZih7YTogMX0pID0+IGFuIGF0b21cbiAgZih7YTogMn0pID0+IGEgZGlmZmVyZW50IGF0b21cblxuVGhpcyBhbGxvd3MgY29tcG9uZW50cyB0byBwZXJzaXN0IGxvY2FsLCBwcml2YXRlIHN0YXRlIHVzaW5nIGF0b21zLiAgRWFjaFxuaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBtYXkgaGF2ZSBhIGRpZmZlcmVudCBrZXksIHdoaWNoIGl0IHVzZXMgYXMgdGhlXG5wYXJhbWV0ZXIgZm9yIGEgZmFtaWx5IG9mIGF0b21zOyBpbiB0aGlzIHdheSwgZWFjaCBjb21wb25lbnQgd2lsbCBoYXZlXG5pdHMgb3duIGF0b20gbm90IHNoYXJlZCBieSBvdGhlciBpbnN0YW5jZXMuICBUaGVzZSBzdGF0ZSBrZXlzIG1heSBiZSBjb21wb3NlZFxuaW50byBjaGlsZHJlbidzIHN0YXRlIGtleXMgYXMgd2VsbC5cbiovXG5mdW5jdGlvbiBhdG9tRmFtaWx5KG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGNhY2hlUG9saWN5RiwgX29wdGlvbnMkY2FjaGVQb2xpY3lGMjtcblxuICBjb25zdCBhdG9tQ2FjaGUgPSBSZWNvaWxfY2FjaGVGcm9tUG9saWN5KHtcbiAgICBlcXVhbGl0eTogKF9vcHRpb25zJGNhY2hlUG9saWN5RiA9IChfb3B0aW9ucyRjYWNoZVBvbGljeUYyID0gb3B0aW9ucy5jYWNoZVBvbGljeUZvclBhcmFtc19VTlNUQUJMRSkgPT09IG51bGwgfHwgX29wdGlvbnMkY2FjaGVQb2xpY3lGMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkY2FjaGVQb2xpY3lGMi5lcXVhbGl0eSkgIT09IG51bGwgJiYgX29wdGlvbnMkY2FjaGVQb2xpY3lGICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRjYWNoZVBvbGljeUYgOiAndmFsdWUnLFxuICAgIGV2aWN0aW9uOiAna2VlcC1hbGwnXG4gIH0pOyAvLyBTaW1wbGUgYXRvbUZhbWlseSBpbXBsZW1lbnRhdGlvbiB0byBjYWNoZSBpbmRpdmlkdWFsIGF0b21zIGJhc2VkXG4gIC8vIG9uIHRoZSBwYXJhbWV0ZXIgdmFsdWUgZXF1YWxpdHkuXG5cbiAgcmV0dXJuIHBhcmFtcyA9PiB7XG4gICAgdmFyIF9zdGFibGVTdHJpbmdpZnksIF9vcHRpb25zJGVmZmVjdHM7XG5cbiAgICBjb25zdCBjYWNoZWRBdG9tID0gYXRvbUNhY2hlLmdldChwYXJhbXMpO1xuXG4gICAgaWYgKGNhY2hlZEF0b20gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlZEF0b207XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUsXG4gICAgICAuLi5hdG9tT3B0aW9uc1xuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG5ld0F0b20gPSBSZWNvaWxfYXRvbSh7IC4uLmF0b21PcHRpb25zLFxuICAgICAga2V5OiBgJHtvcHRpb25zLmtleX1fXyR7KF9zdGFibGVTdHJpbmdpZnkgPSBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5KHBhcmFtcykpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9YCxcbiAgICAgIGRlZmF1bHQ6IHR5cGVvZiBvcHRpb25zLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgPyAvLyBUaGUgZGVmYXVsdCB3YXMgcGFyYW1ldGVyaXplZFxuICAgICAgLy8gRmxvdyBkb2Vzbid0IGtub3cgdGhhdCBUIGlzbid0IGEgZnVuY3Rpb24sIHNvIHdlIG5lZWQgdG8gY2FzZSB0byBhbnlcbiAgICAgIG9wdGlvbnMuZGVmYXVsdChwYXJhbXMpIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgOiAvLyBEZWZhdWx0IG1heSBiZSBhIHN0YXRpYyB2YWx1ZSwgcHJvbWlzZSwgb3IgUmVjb2lsVmFsdWVcbiAgICAgIG9wdGlvbnMuZGVmYXVsdCxcbiAgICAgIHJldGFpbmVkQnlfVU5TVEFCTEU6IHR5cGVvZiBvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUocGFyYW1zKSA6IG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRSxcbiAgICAgIGVmZmVjdHM6IHR5cGVvZiBvcHRpb25zLmVmZmVjdHMgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmVmZmVjdHMocGFyYW1zKSA6IHR5cGVvZiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUocGFyYW1zKSA6IChfb3B0aW9ucyRlZmZlY3RzID0gb3B0aW9ucy5lZmZlY3RzKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRlZmZlY3RzICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRlZmZlY3RzIDogb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUzogbWFwU2NvcGVSdWxlcyhcbiAgICAgIC8vIEBmYi1vbmx5OiBvcHRpb25zLnNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgICAgIC8vIEBmYi1vbmx5OiBwYXJhbXMsXG4gICAgICAvLyBAZmItb25seTogKSxcblxuICAgIH0pO1xuICAgIGF0b21DYWNoZS5zZXQocGFyYW1zLCBuZXdBdG9tKTtcbiAgICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMihuZXdBdG9tLmtleSwgKCkgPT4ge1xuICAgICAgYXRvbUNhY2hlLmRlbGV0ZShwYXJhbXMpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdBdG9tO1xuICB9O1xufVxuXG52YXIgUmVjb2lsX2F0b21GYW1pbHkgPSBhdG9tRmFtaWx5O1xuXG5jb25zdCB7XG4gIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDNcbn0gPSBSZWNvaWxfTm9kZTtcblxuXG5cbiAvLyBLZWVwIGluIG1pbmQgdGhlIHBhcmFtZXRlciBuZWVkcyB0byBiZSBzZXJpYWxpemFibGUgYXMgYSBjYWhjaGUga2V5XG4vLyB1c2luZyBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5XG5cblxuLy8gQWRkIGEgdW5pcXVlIGluZGV4IHRvIGVhY2ggc2VsZWN0b3IgaW4gY2FzZSB0aGUgY2FjaGUgaW1wbGVtZW50YXRpb24gYWxsb3dzXG4vLyBkdXBsaWNhdGUga2V5cyBiYXNlZCBvbiBlcXVpdmFsZW50IHN0cmluZ2lmaWVkIHBhcmFtZXRlcnNcbmxldCBuZXh0SW5kZXggPSAwO1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbi8vIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBtZW1iZXJzIG9mIGEgZmFtaWx5IG9mIHNlbGVjdG9ycyBvZiB0aGUgc2FtZSB0eXBlXG4vLyBFLmcuLFxuLy9cbi8vIGNvbnN0IHMgPSBzZWxlY3RvckZhbWlseSguLi4pO1xuLy8gcyh7YTogMX0pID0+IGEgc2VsZWN0b3Jcbi8vIHMoe2E6IDJ9KSA9PiBhIGRpZmZlcmVudCBzZWxlY3RvclxuLy9cbi8vIEJ5IGRlZmF1bHQsIHRoZSBzZWxlY3RvcnMgYXJlIGRpc3Rpbmd1aXNoZWQgYnkgZGlzdGluY3QgdmFsdWVzIG9mIHRoZVxuLy8gcGFyYW1ldGVyIGJhc2VkIG9uIHZhbHVlIGVxdWFsaXR5LCBub3QgcmVmZXJlbmNlIGVxdWFsaXR5LiAgVGhpcyBhbGxvd3MgdXNpbmdcbi8vIG9iamVjdCBsaXRlcmFscyBvciBvdGhlciBlcXVpdmFsZW50IG9iamVjdHMgYXQgY2FsbHNpdGVzIHRvIG5vdCBjcmVhdGVcbi8vIGR1cGxpY2F0ZSBjYWNoZSBlbnRyaWVzLiAgVGhpcyBiZWhhdmlvciBtYXkgYmUgb3ZlcnJpZGRlbiB3aXRoIHRoZVxuLy8gY2FjaGVJbXBsZW1lbnRhdGlvbkZvclBhcmFtcyBvcHRpb24uXG5mdW5jdGlvbiBzZWxlY3RvckZhbWlseShvcHRpb25zKSB7XG4gIHZhciBfb3B0aW9ucyRjYWNoZVBvbGljeUYsIF9vcHRpb25zJGNhY2hlUG9saWN5RjI7XG5cbiAgY29uc3Qgc2VsZWN0b3JDYWNoZSA9IFJlY29pbF9jYWNoZUZyb21Qb2xpY3koe1xuICAgIGVxdWFsaXR5OiAoX29wdGlvbnMkY2FjaGVQb2xpY3lGID0gKF9vcHRpb25zJGNhY2hlUG9saWN5RjIgPSBvcHRpb25zLmNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRjYWNoZVBvbGljeUYyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRjYWNoZVBvbGljeUYyLmVxdWFsaXR5KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRjYWNoZVBvbGljeUYgIT09IHZvaWQgMCA/IF9vcHRpb25zJGNhY2hlUG9saWN5RiA6ICd2YWx1ZScsXG4gICAgZXZpY3Rpb246ICdrZWVwLWFsbCdcbiAgfSk7XG4gIHJldHVybiBwYXJhbXMgPT4ge1xuICAgIHZhciBfc3RhYmxlU3RyaW5naWZ5O1xuXG4gICAgY29uc3QgY2FjaGVkU2VsZWN0b3IgPSBzZWxlY3RvckNhY2hlLmdldChwYXJhbXMpO1xuXG4gICAgaWYgKGNhY2hlZFNlbGVjdG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZWRTZWxlY3RvcjtcbiAgICB9XG5cbiAgICBjb25zdCBteUtleSA9IGAke29wdGlvbnMua2V5fV9fc2VsZWN0b3JGYW1pbHkvJHsoX3N0YWJsZVN0cmluZ2lmeSA9IFJlY29pbF9zdGFibGVTdHJpbmdpZnkocGFyYW1zLCB7XG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byB1c2UgZnVuY3Rpb25zIGluIHBhcmFtZXRlcnMgaWYgdGhlIHVzZXIgdXNlc1xuICAgICAgLy8gYSBjYWNoZSB3aXRoIHJlZmVyZW5jZSBlcXVhbGl0eSB0aGFua3MgdG8gdGhlIGluY3JlbWVudGluZyBpbmRleC5cbiAgICAgIGFsbG93RnVuY3Rpb25zOiB0cnVlXG4gICAgfSkpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9LyR7bmV4dEluZGV4Kyt9YDsgLy8gQXBwZW5kIGluZGV4IGluIGNhc2UgdmFsdWVzIHNlcmlhbGl6ZSB0byB0aGUgc2FtZSBrZXkgc3RyaW5nXG5cbiAgICBjb25zdCBteUdldCA9IGNhbGxiYWNrcyA9PiBvcHRpb25zLmdldChwYXJhbXMpKGNhbGxiYWNrcyk7XG5cbiAgICBjb25zdCBteUNhY2hlUG9saWN5ID0gb3B0aW9ucy5jYWNoZVBvbGljeV9VTlNUQUJMRTtcbiAgICBjb25zdCByZXRhaW5lZEJ5ID0gdHlwZW9mIG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRShwYXJhbXMpIDogb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFO1xuICAgIGxldCBuZXdTZWxlY3RvcjtcblxuICAgIGlmIChvcHRpb25zLnNldCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBzZXQgPSBvcHRpb25zLnNldDtcblxuICAgICAgY29uc3QgbXlTZXQgPSAoY2FsbGJhY2tzLCBuZXdWYWx1ZSkgPT4gc2V0KHBhcmFtcykoY2FsbGJhY2tzLCBuZXdWYWx1ZSk7XG5cbiAgICAgIG5ld1NlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yKHtcbiAgICAgICAga2V5OiBteUtleSxcbiAgICAgICAgZ2V0OiBteUdldCxcbiAgICAgICAgc2V0OiBteVNldCxcbiAgICAgICAgY2FjaGVQb2xpY3lfVU5TVEFCTEU6IG15Q2FjaGVQb2xpY3ksXG4gICAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgICByZXRhaW5lZEJ5X1VOU1RBQkxFOiByZXRhaW5lZEJ5XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U2VsZWN0b3IgPSBSZWNvaWxfc2VsZWN0b3Ioe1xuICAgICAgICBrZXk6IG15S2V5LFxuICAgICAgICBnZXQ6IG15R2V0LFxuICAgICAgICBjYWNoZVBvbGljeV9VTlNUQUJMRTogbXlDYWNoZVBvbGljeSxcbiAgICAgICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgICAgIHJldGFpbmVkQnlfVU5TVEFCTEU6IHJldGFpbmVkQnlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdG9yQ2FjaGUuc2V0KHBhcmFtcywgbmV3U2VsZWN0b3IpO1xuICAgIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQzKG5ld1NlbGVjdG9yLmtleSwgKCkgPT4ge1xuICAgICAgc2VsZWN0b3JDYWNoZS5kZWxldGUocGFyYW1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2VsZWN0b3I7XG4gIH07XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbnZhciBSZWNvaWxfc2VsZWN0b3JGYW1pbHkgPSBzZWxlY3RvckZhbWlseTtcblxuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCBjb25zdGFudFNlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX19jb25zdGFudCcsXG4gIGdldDogY29uc3RhbnQgPT4gKCkgPT4gY29uc3RhbnQsXG4gIGNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFOiB7XG4gICAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnXG4gIH1cbn0pOyAvLyBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZWxlY3RvciB3aGljaCBhbHdheXMgcHJvZHVjZXMgdGhlXG4vLyBzYW1lIGNvbnN0YW50IHZhbHVlLiAgSXQgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZVxuLy8gc2FtZSB2YWx1ZSwgYmFzZWQgb24gcmVmZXJlbmNlIGVxdWFsaXR5LCBhbmQgd2lsbCBwcm92aWRlIHRoZVxuLy8gc2FtZSBzZWxlY3Rvci5cblxuZnVuY3Rpb24gY29uc3RTZWxlY3Rvcihjb25zdGFudCkge1xuICByZXR1cm4gY29uc3RhbnRTZWxlY3Rvcihjb25zdGFudCk7XG59XG5cbnZhciBSZWNvaWxfY29uc3RTZWxlY3RvciA9IGNvbnN0U2VsZWN0b3I7XG5cbi8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuY29uc3QgdGhyb3dpbmdTZWxlY3RvciA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fZXJyb3InLFxuICBnZXQ6IG1lc3NhZ2UgPT4gKCkgPT4ge1xuICAgIHRocm93IFJlY29pbF9lcnIobWVzc2FnZSk7XG4gIH0sXG4gIC8vIFRPRE8gV2h5P1xuICBjYWNoZVBvbGljeUZvclBhcmFtc19VTlNUQUJMRToge1xuICAgIGVxdWFsaXR5OiAncmVmZXJlbmNlJ1xuICB9XG59KTsgLy8gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2VsZWN0b3Igd2hpY2ggYWx3YXlzIHRocm93cyBhbiBlcnJvclxuLy8gd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZS5cblxuZnVuY3Rpb24gZXJyb3JTZWxlY3RvcihtZXNzYWdlKSB7XG4gIHJldHVybiB0aHJvd2luZ1NlbGVjdG9yKG1lc3NhZ2UpO1xufVxuXG52YXIgUmVjb2lsX2Vycm9yU2VsZWN0b3IgPSBlcnJvclNlbGVjdG9yO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFdyYXBzIGFub3RoZXIgcmVjb2lsIHZhbHVlIGFuZCBwcmV2ZW50cyB3cml0aW5nIHRvIGl0LlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gcmVhZE9ubHlTZWxlY3RvcihhdG9tKSB7XG4gIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICByZXR1cm4gYXRvbTtcbn1cblxudmFyIFJlY29pbF9yZWFkT25seVNlbGVjdG9yID0gcmVhZE9ubHlTZWxlY3RvcjtcblxuY29uc3Qge1xuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkMyxcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQzLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkNFxufSA9IFJlY29pbF9Mb2FkYWJsZSQxO1xuXG5cblxuIC8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgVFJVVEggVEFCTEVcbi8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEZXBlbmRlbmNpZXMgICAgICAgIHdhaXRGb3JOb25lICAgICAgICAgd2FpdEZvckFueSAgICAgICAgd2FpdEZvckFsbCAgICAgICB3YWl0Rm9yQWxsU2V0dGxlZFxuLy8gIFtsb2FkaW5nLCBsb2FkaW5nXSAgW1Byb21pc2UsIFByb21pc2VdICBQcm9taXNlICAgICAgICAgICBQcm9taXNlICAgICAgICAgUHJvbWlzZVxuLy8gIFt2YWx1ZSwgbG9hZGluZ10gICAgW3ZhbHVlLCBQcm9taXNlXSAgICBbdmFsdWUsIFByb21pc2VdICBQcm9taXNlICAgICAgICAgUHJvbWlzZVxuLy8gIFt2YWx1ZSwgdmFsdWVdICAgICAgW3ZhbHVlLCB2YWx1ZV0gICAgICBbdmFsdWUsIHZhbHVlXSAgICBbdmFsdWUsIHZhbHVlXSAgW3ZhbHVlLCB2YWx1ZV1cbi8vXG4vLyAgW2Vycm9yLCBsb2FkaW5nXSAgICBbRXJyb3IsIFByb21pc2VdICAgIFtFcnJvciwgUHJvbWlzZV0gIEVycm9yICAgICAgICAgICBQcm9taXNlXG4vLyAgW2Vycm9yLCBlcnJvcl0gICAgICBbRXJyb3IsIEVycm9yXSAgICAgIFtFcnJvciwgRXJyb3JdICAgIEVycm9yICAgICAgICAgICBbZXJyb3IsIGVycm9yXVxuLy8gIFt2YWx1ZSwgZXJyb3JdICAgICAgW3ZhbHVlLCBFcnJvcl0gICAgICBbdmFsdWUsIEVycm9yXSAgICBFcnJvciAgICAgICAgICAgW3ZhbHVlLCBlcnJvcl1cbi8vIElzc3VlIHBhcmFsbGVsIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGFuZCByZXR1cm4gdGhlIGN1cnJlbnRcbi8vIHN0YXR1cyBpZiB0aGV5IGhhdmUgcmVzdWx0cywgaGF2ZSBzb21lIGVycm9yLCBvciBhcmUgc3RpbGwgcGVuZGluZy5cblxuXG5mdW5jdGlvbiBjb25jdXJyZW50UmVxdWVzdHMoZ2V0UmVjb2lsVmFsdWUsIGRlcHMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IEFycmF5KGRlcHMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG4gIGNvbnN0IGV4Y2VwdGlvbnMgPSBBcnJheShkZXBzLmxlbmd0aCkuZmlsbCh1bmRlZmluZWQpO1xuXG4gIGZvciAoY29uc3QgW2ksIGRlcF0gb2YgZGVwcy5lbnRyaWVzKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0c1tpXSA9IGdldFJlY29pbFZhbHVlKGRlcCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHRzLCBleGNlcHRpb25zXTtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcihleHApIHtcbiAgcmV0dXJuIGV4cCAhPSBudWxsICYmICFSZWNvaWxfaXNQcm9taXNlKGV4cCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGVwZW5kZW5jaWVzKSA/IGRlcGVuZGVuY2llcyA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlcGVuZGVuY2llcykubWFwKGtleSA9PiBkZXBlbmRlbmNpZXNba2V5XSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcywgcmVzdWx0cykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkZXBlbmRlbmNpZXMpID8gcmVzdWx0cyA6IC8vIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCkgaGFzIGNvbnNpc3RlbnQga2V5IG9yZGVyaW5nIHdpdGggRVM2XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlcGVuZGVuY2llcykucmVkdWNlKChvdXQsIGtleSwgaWR4KSA9PiAoeyAuLi5vdXQsXG4gICAgW2tleV06IHJlc3VsdHNbaWR4XVxuICB9KSwge30pO1xufVxuXG5mdW5jdGlvbiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucykge1xuICBjb25zdCBvdXRwdXQgPSBleGNlcHRpb25zLm1hcCgoZXhjZXB0aW9uLCBpZHgpID0+IGV4Y2VwdGlvbiA9PSBudWxsID8gbG9hZGFibGVXaXRoVmFsdWUkNChyZXN1bHRzW2lkeF0pIDogUmVjb2lsX2lzUHJvbWlzZShleGNlcHRpb24pID8gbG9hZGFibGVXaXRoUHJvbWlzZSQzKGV4Y2VwdGlvbikgOiBsb2FkYWJsZVdpdGhFcnJvciQzKGV4Y2VwdGlvbikpO1xuICByZXR1cm4gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCBvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lQXN5bmNSZXN1bHRzV2l0aFN5bmNSZXN1bHRzKHN5bmNSZXN1bHRzLCBhc3luY1Jlc3VsdHMpIHtcbiAgcmV0dXJuIGFzeW5jUmVzdWx0cy5tYXAoKHJlc3VsdCwgaWR4KSA9PlxuICAvKipcbiAgICogaXQncyBpbXBvcnRhbnQgd2UgdXNlID09PSB1bmRlZmluZWQgYXMgb3Bwb3NlZCB0byA9PSBudWxsLCBiZWNhdXNlIHRoZVxuICAgKiByZXNvbHZlZCB2YWx1ZSBvZiB0aGUgYXN5bmMgcHJvbWlzZSBjb3VsZCBiZSBgbnVsbGAsIGluIHdoaWNoIGNhc2Ugd2VcbiAgICogZG9uJ3Qgd2FudCB0byB1c2Ugc3luY1Jlc3VsdHNbaWR4XSwgd2hpY2ggd291bGQgYmUgdW5kZWZpbmVkLiBJZiBhc3luY1xuICAgKiBwcm9taXNlIHJlc29sdmVzIHRvIGB1bmRlZmluZWRgLCB0aGF0J3Mgb2sgYmVjYXVzZSBgc3luY1Jlc3VsdHNbaWR4XWBcbiAgICogd2lsbCBhbHNvIGJlIGB1bmRlZmluZWRgLiBUaGF0J3MgYSBsaXR0bGUgaGFja3ksIGJ1dCBpdCB3b3Jrcy5cbiAgICovXG4gIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gc3luY1Jlc3VsdHNbaWR4XSA6IHJlc3VsdCk7XG59IC8vIFNlbGVjdG9yIHRoYXQgcmVxdWVzdHMgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbCBhbmQgaW1tZWRpYXRlbHkgcmV0dXJuc1xuLy8gY3VycmVudCByZXN1bHRzIHdpdGhvdXQgd2FpdGluZy5cblxuXG5jb25zdCB3YWl0Rm9yTm9uZSA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fd2FpdEZvck5vbmUnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgY29uc3QgZGVwcyA9IHVud3JhcERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpO1xuICAgIGNvbnN0IFtyZXN1bHRzLCBleGNlcHRpb25zXSA9IGNvbmN1cnJlbnRSZXF1ZXN0cyhnZXQsIGRlcHMpOyAvLyBBbHdheXMgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgcmVzdWx0czsgbmV2ZXIgYmxvY2suXG5cbiAgICByZXR1cm4gd3JhcExvYWRhYmxlcyhkZXBlbmRlbmNpZXMsIHJlc3VsdHMsIGV4Y2VwdGlvbnMpO1xuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7IC8vIFNlbGVjdG9yIHRoYXQgcmVxdWVzdHMgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbCBhbmQgd2FpdHMgZm9yIGF0IGxlYXN0XG4vLyBvbmUgdG8gYmUgYXZhaWxhYmxlIGJlZm9yZSByZXR1cm5pbmcgcmVzdWx0cy4gIEl0IHdpbGwgb25seSBlcnJvciBpZiBhbGxcbi8vIGRlcGVuZGVuY2llcyBoYXZlIGVycm9ycy5cblxuY29uc3Qgd2FpdEZvckFueSA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fd2FpdEZvckFueScsXG4gIGdldDogZGVwZW5kZW5jaWVzID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICAvLyBJc3N1ZSByZXF1ZXN0cyBmb3IgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbC5cbiAgICAvLyBFeGNlcHRpb25zIGNhbiBlaXRoZXIgYmUgUHJvbWlzZXMgb2YgcGVuZGluZyByZXN1bHRzIG9yIHJlYWwgZXJyb3JzXG4gICAgY29uc3QgZGVwcyA9IHVud3JhcERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpO1xuICAgIGNvbnN0IFtyZXN1bHRzLCBleGNlcHRpb25zXSA9IGNvbmN1cnJlbnRSZXF1ZXN0cyhnZXQsIGRlcHMpOyAvLyBJZiBhbnkgcmVzdWx0cyBhcmUgYXZhaWxhYmxlLCB2YWx1ZSBvciBlcnJvciwgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXR1c1xuXG4gICAgaWYgKGV4Y2VwdGlvbnMuc29tZShleHAgPT4gIVJlY29pbF9pc1Byb21pc2UoZXhwKSkpIHtcbiAgICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gICAgfSAvLyBPdGhlcndpc2UsIHJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGUgbmV4dCByZXN1bHQgaXNcbiAgICAvLyBhdmFpbGFibGUsIHdoaWNoZXZlciBvbmUgaGFwcGVucyB0byBiZSBuZXh0LiAgQnV0LCBpZiBhbGwgcGVuZGluZ1xuICAgIC8vIGRlcGVuZGVuY2llcyBlbmQgdXAgd2l0aCBlcnJvcnMsIHRoZW4gcmVqZWN0IHRoZSBwcm9taXNlLlxuXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IFtpLCBleHBdIG9mIGV4Y2VwdGlvbnMuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKGV4cCkpIHtcbiAgICAgICAgICBleHAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgcmVzdWx0c1tpXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGV4Y2VwdGlvbnNbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgZXhjZXB0aW9uc1tpXSA9IGVycm9yO1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTsgLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCB3YWl0cyBmb3IgYWxsIHRvIGJlXG4vLyBhdmFpbGFibGUgYmVmb3JlIHJldHVybmluZyBhIHZhbHVlLiAgSXQgd2lsbCBlcnJvciBpZiBhbnkgZGVwZW5kZW5jaWVzIGVycm9yLlxuXG5jb25zdCB3YWl0Rm9yQWxsID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yQWxsJyxcbiAgZ2V0OiBkZXBlbmRlbmNpZXMgPT4gKHtcbiAgICBnZXRcbiAgfSkgPT4ge1xuICAgIC8vIElzc3VlIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsLlxuICAgIC8vIEV4Y2VwdGlvbnMgY2FuIGVpdGhlciBiZSBQcm9taXNlcyBvZiBwZW5kaW5nIHJlc3VsdHMgb3IgcmVhbCBlcnJvcnNcbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIElmIGFsbCByZXN1bHRzIGFyZSBhdmFpbGFibGUsIHJldHVybiB0aGUgcmVzdWx0c1xuXG4gICAgaWYgKGV4Y2VwdGlvbnMuZXZlcnkoZXhwID0+IGV4cCA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcywgcmVzdWx0cyk7XG4gICAgfSAvLyBJZiB3ZSBoYXZlIGFueSBlcnJvcnMsIHRocm93IHRoZSBmaXJzdCBlcnJvclxuXG5cbiAgICBjb25zdCBlcnJvciA9IGV4Y2VwdGlvbnMuZmluZChpc0Vycm9yKTtcblxuICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIE90aGVyd2lzZSwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aGVuIGFsbCByZXN1bHRzIGFyZSBhdmFpbGFibGVcblxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGV4Y2VwdGlvbnMpLnRoZW4oZXhjZXB0aW9uUmVzdWx0cyA9PiB3cmFwUmVzdWx0cyhkZXBlbmRlbmNpZXMsIGNvbWJpbmVBc3luY1Jlc3VsdHNXaXRoU3luY1Jlc3VsdHMocmVzdWx0cywgZXhjZXB0aW9uUmVzdWx0cykpKTtcbiAgfSxcbiAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IHRydWVcbn0pO1xuY29uc3Qgd2FpdEZvckFsbFNldHRsZWQgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX3dhaXRGb3JBbGxTZXR0bGVkJyxcbiAgZ2V0OiBkZXBlbmRlbmNpZXMgPT4gKHtcbiAgICBnZXRcbiAgfSkgPT4ge1xuICAgIC8vIElzc3VlIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsLlxuICAgIC8vIEV4Y2VwdGlvbnMgY2FuIGVpdGhlciBiZSBQcm9taXNlcyBvZiBwZW5kaW5nIHJlc3VsdHMgb3IgcmVhbCBlcnJvcnNcbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIElmIGFsbCByZXN1bHRzIGFyZSBhdmFpbGFibGUsIHJldHVybiB0aGUgcmVzdWx0c1xuXG4gICAgaWYgKGV4Y2VwdGlvbnMuZXZlcnkoZXhwID0+ICFSZWNvaWxfaXNQcm9taXNlKGV4cCkpKSB7XG4gICAgICByZXR1cm4gd3JhcExvYWRhYmxlcyhkZXBlbmRlbmNpZXMsIHJlc3VsdHMsIGV4Y2VwdGlvbnMpO1xuICAgIH0gLy8gV2FpdCBmb3IgYWxsIHJlc3VsdHMgdG8gc2V0dGxlXG5cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChleGNlcHRpb25zLm1hcCgoZXhwLCBpKSA9PiBSZWNvaWxfaXNQcm9taXNlKGV4cCkgPyBleHAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgcmVzdWx0c1tpXSA9IHJlc3VsdDtcbiAgICAgIGV4Y2VwdGlvbnNbaV0gPSB1bmRlZmluZWQ7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgcmVzdWx0c1tpXSA9IHVuZGVmaW5lZDtcbiAgICAgIGV4Y2VwdGlvbnNbaV0gPSBlcnJvcjtcbiAgICB9KSA6IG51bGwpKSAvLyBUaGVuIHdyYXAgdGhlbSBhcyBsb2FkYWJsZXNcbiAgICAudGhlbigoKSA9PiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucykpO1xuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7XG5jb25zdCBub1dhaXQgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX25vV2FpdCcsXG4gIGdldDogZGVwZW5kZW5jeSA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBsb2FkYWJsZVdpdGhWYWx1ZSQ0KGdldChkZXBlbmRlbmN5KSk7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICByZXR1cm4gUmVjb2lsX2lzUHJvbWlzZShleGNlcHRpb24pID8gbG9hZGFibGVXaXRoUHJvbWlzZSQzKGV4Y2VwdGlvbikgOiBsb2FkYWJsZVdpdGhFcnJvciQzKGV4Y2VwdGlvbik7XG4gICAgfVxuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7XG52YXIgUmVjb2lsX1dhaXRGb3IgPSB7XG4gIHdhaXRGb3JOb25lLFxuICB3YWl0Rm9yQW55LFxuICB3YWl0Rm9yQWxsLFxuICB3YWl0Rm9yQWxsU2V0dGxlZCxcbiAgbm9XYWl0XG59O1xuXG5jb25zdCB7XG4gIFJlY29pbExvYWRhYmxlXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkM1xufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIFJlY29pbFJvb3Q6IFJlY29pbFJvb3QkMixcbiAgdXNlUmVjb2lsU3RvcmVJRDogdXNlUmVjb2lsU3RvcmVJRCQxXG59ID0gUmVjb2lsX1JlY29pbFJvb3Q7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ1XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgcmV0ZW50aW9uWm9uZTogcmV0ZW50aW9uWm9uZSQxXG59ID0gUmVjb2lsX1JldGVudGlvblpvbmU7XG5cbmNvbnN0IHtcbiAgZnJlc2hTbmFwc2hvdDogZnJlc2hTbmFwc2hvdCQyXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cbmNvbnN0IHtcbiAgdXNlUmVjb2lsU3RhdGU6IHVzZVJlY29pbFN0YXRlJDEsXG4gIHVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRTogdXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJDEsXG4gIHVzZVJlY29pbFN0YXRlTG9hZGFibGU6IHVzZVJlY29pbFN0YXRlTG9hZGFibGUkMSxcbiAgdXNlUmVjb2lsVmFsdWU6IHVzZVJlY29pbFZhbHVlJDEsXG4gIHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRTogdXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJDEsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSxcbiAgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJDEsXG4gIHVzZVJlc2V0UmVjb2lsU3RhdGU6IHVzZVJlc2V0UmVjb2lsU3RhdGUkMSxcbiAgdXNlU2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlJDFcbn0gPSBSZWNvaWxfSG9va3M7XG5cbmNvbnN0IHtcbiAgdXNlR290b1JlY29pbFNuYXBzaG90OiB1c2VHb3RvUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsU25hcHNob3Q6IHVzZVJlY29pbFNuYXBzaG90JDEsXG4gIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXI6IHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIkMVxufSA9IFJlY29pbF9TbmFwc2hvdEhvb2tzO1xuXG5cblxuXG5cbmNvbnN0IHtcbiAgdXNlUmVjb2lsQ2FsbGJhY2s6IHVzZVJlY29pbENhbGxiYWNrJDFcbn0gPSBSZWNvaWxfdXNlUmVjb2lsQ2FsbGJhY2s7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIG5vV2FpdDogbm9XYWl0JDEsXG4gIHdhaXRGb3JBbGw6IHdhaXRGb3JBbGwkMSxcbiAgd2FpdEZvckFsbFNldHRsZWQ6IHdhaXRGb3JBbGxTZXR0bGVkJDEsXG4gIHdhaXRGb3JBbnk6IHdhaXRGb3JBbnkkMSxcbiAgd2FpdEZvck5vbmU6IHdhaXRGb3JOb25lJDFcbn0gPSBSZWNvaWxfV2FpdEZvcjtcblxudmFyIFJlY29pbF9pbmRleCA9IHtcbiAgLy8gVHlwZXNcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkMyxcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ1LFxuICBSZWNvaWxMb2FkYWJsZSxcbiAgLy8gUmVjb2lsIFJvb3RcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQyLFxuICB1c2VSZWNvaWxTdG9yZUlEOiB1c2VSZWNvaWxTdG9yZUlEJDEsXG4gIHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEU6IFJlY29pbF91c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzLFxuICAvLyBBdG9tcy9TZWxlY3RvcnNcbiAgYXRvbTogUmVjb2lsX2F0b20sXG4gIHNlbGVjdG9yOiBSZWNvaWxfc2VsZWN0b3IsXG4gIC8vIENvbnZlbmllbmNlIEF0b21zL1NlbGVjdG9yc1xuICBhdG9tRmFtaWx5OiBSZWNvaWxfYXRvbUZhbWlseSxcbiAgc2VsZWN0b3JGYW1pbHk6IFJlY29pbF9zZWxlY3RvckZhbWlseSxcbiAgY29uc3RTZWxlY3RvcjogUmVjb2lsX2NvbnN0U2VsZWN0b3IsXG4gIGVycm9yU2VsZWN0b3I6IFJlY29pbF9lcnJvclNlbGVjdG9yLFxuICByZWFkT25seVNlbGVjdG9yOiBSZWNvaWxfcmVhZE9ubHlTZWxlY3RvcixcbiAgLy8gQ29uY3VycmVuY3kgSGVscGVycyBmb3IgQXRvbXMvU2VsZWN0b3JzXG4gIG5vV2FpdDogbm9XYWl0JDEsXG4gIHdhaXRGb3JOb25lOiB3YWl0Rm9yTm9uZSQxLFxuICB3YWl0Rm9yQW55OiB3YWl0Rm9yQW55JDEsXG4gIHdhaXRGb3JBbGw6IHdhaXRGb3JBbGwkMSxcbiAgd2FpdEZvckFsbFNldHRsZWQ6IHdhaXRGb3JBbGxTZXR0bGVkJDEsXG4gIC8vIEhvb2tzIGZvciBBdG9tcy9TZWxlY3RvcnNcbiAgdXNlUmVjb2lsVmFsdWU6IHVzZVJlY29pbFZhbHVlJDEsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSxcbiAgdXNlUmVjb2lsU3RhdGU6IHVzZVJlY29pbFN0YXRlJDEsXG4gIHVzZVJlY29pbFN0YXRlTG9hZGFibGU6IHVzZVJlY29pbFN0YXRlTG9hZGFibGUkMSxcbiAgdXNlU2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlJDEsXG4gIHVzZVJlc2V0UmVjb2lsU3RhdGU6IHVzZVJlc2V0UmVjb2lsU3RhdGUkMSxcbiAgdXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFOiBSZWNvaWxfdXNlR2V0UmVjb2lsVmFsdWVJbmZvLFxuICB1c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEU6IFJlY29pbF91c2VSZWNvaWxSZWZyZXNoZXIsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxWYWx1ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICAvLyBIb29rcyBmb3IgY29tcGxleCBvcGVyYXRpb25zXG4gIHVzZVJlY29pbENhbGxiYWNrOiB1c2VSZWNvaWxDYWxsYmFjayQxLFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRTogUmVjb2lsX3VzZVJlY29pbFRyYW5zYWN0aW9uLFxuICAvLyBTbmFwc2hvdHNcbiAgdXNlR290b1JlY29pbFNuYXBzaG90OiB1c2VHb3RvUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsU25hcHNob3Q6IHVzZVJlY29pbFNuYXBzaG90JDEsXG4gIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEU6IHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIkMSxcbiAgc25hcHNob3RfVU5TVEFCTEU6IGZyZXNoU25hcHNob3QkMixcbiAgLy8gTWVtb3J5IE1hbmFnZW1lbnRcbiAgdXNlUmV0YWluOiBSZWNvaWxfdXNlUmV0YWluLFxuICByZXRlbnRpb25ab25lOiByZXRlbnRpb25ab25lJDFcbn07XG52YXIgUmVjb2lsX2luZGV4XzEgPSBSZWNvaWxfaW5kZXguRGVmYXVsdFZhbHVlO1xudmFyIFJlY29pbF9pbmRleF8yID0gUmVjb2lsX2luZGV4LmlzUmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX2luZGV4XzMgPSBSZWNvaWxfaW5kZXguUmVjb2lsTG9hZGFibGU7XG52YXIgUmVjb2lsX2luZGV4XzQgPSBSZWNvaWxfaW5kZXguUmVjb2lsUm9vdDtcbnZhciBSZWNvaWxfaW5kZXhfNSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdG9yZUlEO1xudmFyIFJlY29pbF9pbmRleF82ID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzcgPSBSZWNvaWxfaW5kZXguYXRvbTtcbnZhciBSZWNvaWxfaW5kZXhfOCA9IFJlY29pbF9pbmRleC5zZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfOSA9IFJlY29pbF9pbmRleC5hdG9tRmFtaWx5O1xudmFyIFJlY29pbF9pbmRleF8xMCA9IFJlY29pbF9pbmRleC5zZWxlY3RvckZhbWlseTtcbnZhciBSZWNvaWxfaW5kZXhfMTEgPSBSZWNvaWxfaW5kZXguY29uc3RTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTIgPSBSZWNvaWxfaW5kZXguZXJyb3JTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTMgPSBSZWNvaWxfaW5kZXgucmVhZE9ubHlTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTQgPSBSZWNvaWxfaW5kZXgubm9XYWl0O1xudmFyIFJlY29pbF9pbmRleF8xNSA9IFJlY29pbF9pbmRleC53YWl0Rm9yTm9uZTtcbnZhciBSZWNvaWxfaW5kZXhfMTYgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFueTtcbnZhciBSZWNvaWxfaW5kZXhfMTcgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFsbDtcbnZhciBSZWNvaWxfaW5kZXhfMTggPSBSZWNvaWxfaW5kZXgud2FpdEZvckFsbFNldHRsZWQ7XG52YXIgUmVjb2lsX2luZGV4XzE5ID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFZhbHVlO1xudmFyIFJlY29pbF9pbmRleF8yMCA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxWYWx1ZUxvYWRhYmxlO1xudmFyIFJlY29pbF9pbmRleF8yMSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMjIgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsU3RhdGVMb2FkYWJsZTtcbnZhciBSZWNvaWxfaW5kZXhfMjMgPSBSZWNvaWxfaW5kZXgudXNlU2V0UmVjb2lsU3RhdGU7XG52YXIgUmVjb2lsX2luZGV4XzI0ID0gUmVjb2lsX2luZGV4LnVzZVJlc2V0UmVjb2lsU3RhdGU7XG52YXIgUmVjb2lsX2luZGV4XzI1ID0gUmVjb2lsX2luZGV4LnVzZUdldFJlY29pbFZhbHVlSW5mb19VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMjYgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8yNyA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMjggPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8yOSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzMwID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbENhbGxiYWNrO1xudmFyIFJlY29pbF9pbmRleF8zMSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMzIgPSBSZWNvaWxfaW5kZXgudXNlR290b1JlY29pbFNuYXBzaG90O1xudmFyIFJlY29pbF9pbmRleF8zMyA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTbmFwc2hvdDtcbnZhciBSZWNvaWxfaW5kZXhfMzQgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcl9VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMzUgPSBSZWNvaWxfaW5kZXguc25hcHNob3RfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzM2ID0gUmVjb2lsX2luZGV4LnVzZVJldGFpbjtcbnZhciBSZWNvaWxfaW5kZXhfMzcgPSBSZWNvaWxfaW5kZXgucmV0ZW50aW9uWm9uZTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjb2lsX2luZGV4O1xuZXhwb3J0IHsgUmVjb2lsX2luZGV4XzEgYXMgRGVmYXVsdFZhbHVlLCBSZWNvaWxfaW5kZXhfMyBhcyBSZWNvaWxMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzQgYXMgUmVjb2lsUm9vdCwgUmVjb2lsX2luZGV4XzcgYXMgYXRvbSwgUmVjb2lsX2luZGV4XzkgYXMgYXRvbUZhbWlseSwgUmVjb2lsX2luZGV4XzExIGFzIGNvbnN0U2VsZWN0b3IsIFJlY29pbF9pbmRleF8xMiBhcyBlcnJvclNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfMiBhcyBpc1JlY29pbFZhbHVlLCBSZWNvaWxfaW5kZXhfMTQgYXMgbm9XYWl0LCBSZWNvaWxfaW5kZXhfMTMgYXMgcmVhZE9ubHlTZWxlY3RvciwgUmVjb2lsX2luZGV4XzM3IGFzIHJldGVudGlvblpvbmUsIFJlY29pbF9pbmRleF84IGFzIHNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfMTAgYXMgc2VsZWN0b3JGYW1pbHksIFJlY29pbF9pbmRleF8zNSBhcyBzbmFwc2hvdF9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzI1IGFzIHVzZUdldFJlY29pbFZhbHVlSW5mb19VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzMyIGFzIHVzZUdvdG9SZWNvaWxTbmFwc2hvdCwgUmVjb2lsX2luZGV4XzYgYXMgdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290c19VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzMwIGFzIHVzZVJlY29pbENhbGxiYWNrLCBSZWNvaWxfaW5kZXhfMjYgYXMgdXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMzMgYXMgdXNlUmVjb2lsU25hcHNob3QsIFJlY29pbF9pbmRleF8yMSBhcyB1c2VSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzIyIGFzIHVzZVJlY29pbFN0YXRlTG9hZGFibGUsIFJlY29pbF9pbmRleF8yOSBhcyB1c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUsIFJlY29pbF9pbmRleF81IGFzIHVzZVJlY29pbFN0b3JlSUQsIFJlY29pbF9pbmRleF8zNCBhcyB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMzEgYXMgdXNlUmVjb2lsVHJhbnNhY3Rpb25fVU5TVEFCTEUsIFJlY29pbF9pbmRleF8xOSBhcyB1c2VSZWNvaWxWYWx1ZSwgUmVjb2lsX2luZGV4XzIwIGFzIHVzZVJlY29pbFZhbHVlTG9hZGFibGUsIFJlY29pbF9pbmRleF8yNyBhcyB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzI4IGFzIHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzI0IGFzIHVzZVJlc2V0UmVjb2lsU3RhdGUsIFJlY29pbF9pbmRleF8zNiBhcyB1c2VSZXRhaW4sIFJlY29pbF9pbmRleF8yMyBhcyB1c2VTZXRSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzE3IGFzIHdhaXRGb3JBbGwsIFJlY29pbF9pbmRleF8xOCBhcyB3YWl0Rm9yQWxsU2V0dGxlZCwgUmVjb2lsX2luZGV4XzE2IGFzIHdhaXRGb3JBbnksIFJlY29pbF9pbmRleF8xNSBhcyB3YWl0Rm9yTm9uZSB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20nQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7dmFyIHIsQj1yfHwocj17fSk7Qi5Qb3A9XCJQT1BcIjtCLlB1c2g9XCJQVVNIXCI7Qi5SZXBsYWNlPVwiUkVQTEFDRVwiO3ZhciBDPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ZnVuY3Rpb24oYil7cmV0dXJuIE9iamVjdC5mcmVlemUoYil9OmZ1bmN0aW9uKGIpe3JldHVybiBifTtmdW5jdGlvbiBEKGIsaCl7aWYoIWIpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmY29uc29sZS53YXJuKGgpO3RyeXt0aHJvdyBFcnJvcihoKTt9Y2F0Y2goZSl7fX19ZnVuY3Rpb24gRShiKXtiLnByZXZlbnREZWZhdWx0KCk7Yi5yZXR1cm5WYWx1ZT1cIlwifVxuZnVuY3Rpb24gRigpe3ZhciBiPVtdO3JldHVybntnZXQgbGVuZ3RoKCl7cmV0dXJuIGIubGVuZ3RofSxwdXNoOmZ1bmN0aW9uKGgpe2IucHVzaChoKTtyZXR1cm4gZnVuY3Rpb24oKXtiPWIuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09aH0pfX0sY2FsbDpmdW5jdGlvbihoKXtiLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUoaCl9KX19fWZ1bmN0aW9uIEgoKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsOCl9ZnVuY3Rpb24gSShiKXt2YXIgaD1iLnBhdGhuYW1lO2g9dm9pZCAwPT09aD9cIi9cIjpoO3ZhciBlPWIuc2VhcmNoO2U9dm9pZCAwPT09ZT9cIlwiOmU7Yj1iLmhhc2g7Yj12b2lkIDA9PT1iP1wiXCI6YjtlJiZcIj9cIiE9PWUmJihoKz1cIj9cIj09PWUuY2hhckF0KDApP2U6XCI/XCIrZSk7YiYmXCIjXCIhPT1iJiYoaCs9XCIjXCI9PT1iLmNoYXJBdCgwKT9iOlwiI1wiK2IpO3JldHVybiBofVxuZnVuY3Rpb24gSihiKXt2YXIgaD17fTtpZihiKXt2YXIgZT1iLmluZGV4T2YoXCIjXCIpOzA8PWUmJihoLmhhc2g9Yi5zdWJzdHIoZSksYj1iLnN1YnN0cigwLGUpKTtlPWIuaW5kZXhPZihcIj9cIik7MDw9ZSYmKGguc2VhcmNoPWIuc3Vic3RyKGUpLGI9Yi5zdWJzdHIoMCxlKSk7YiYmKGgucGF0aG5hbWU9Yil9cmV0dXJuIGh9XG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShiKXtmdW5jdGlvbiBoKCl7dmFyIGM9cC5sb2NhdGlvbixhPW0uc3RhdGV8fHt9O3JldHVyblthLmlkeCxDKHtwYXRobmFtZTpjLnBhdGhuYW1lLHNlYXJjaDpjLnNlYXJjaCxoYXNoOmMuaGFzaCxzdGF0ZTphLnVzcnx8bnVsbCxrZXk6YS5rZXl8fFwiZGVmYXVsdFwifSldfWZ1bmN0aW9uIGUoYyl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBjP2M6SShjKX1mdW5jdGlvbiB4KGMsYSl7dm9pZCAwPT09YSYmKGE9bnVsbCk7cmV0dXJuIEMoX2V4dGVuZHMoe3BhdGhuYW1lOnEucGF0aG5hbWUsaGFzaDpcIlwiLHNlYXJjaDpcIlwifSxcInN0cmluZ1wiPT09dHlwZW9mIGM/SihjKTpjLHtzdGF0ZTphLGtleTpIKCl9KSl9ZnVuY3Rpb24geihjKXt0PWM7Yz1oKCk7dj1jWzBdO3E9Y1sxXTtkLmNhbGwoe2FjdGlvbjp0LGxvY2F0aW9uOnF9KX1mdW5jdGlvbiBBKGMsYSl7ZnVuY3Rpb24gZigpe0EoYyxhKX12YXIgbD1yLlB1c2gsaz14KGMsXG5hKTtpZighZy5sZW5ndGh8fChnLmNhbGwoe2FjdGlvbjpsLGxvY2F0aW9uOmsscmV0cnk6Zn0pLCExKSl7dmFyIG49W3t1c3I6ay5zdGF0ZSxrZXk6ay5rZXksaWR4OnYrMX0sZShrKV07az1uWzBdO249blsxXTt0cnl7bS5wdXNoU3RhdGUoayxcIlwiLG4pfWNhdGNoKEcpe3AubG9jYXRpb24uYXNzaWduKG4pfXoobCl9fWZ1bmN0aW9uIHkoYyxhKXtmdW5jdGlvbiBmKCl7eShjLGEpfXZhciBsPXIuUmVwbGFjZSxrPXgoYyxhKTtnLmxlbmd0aCYmKGcuY2FsbCh7YWN0aW9uOmwsbG9jYXRpb246ayxyZXRyeTpmfSksMSl8fChrPVt7dXNyOmsuc3RhdGUsa2V5Omsua2V5LGlkeDp2fSxlKGspXSxtLnJlcGxhY2VTdGF0ZShrWzBdLFwiXCIsa1sxXSkseihsKSl9ZnVuY3Rpb24gdyhjKXttLmdvKGMpfXZvaWQgMD09PWImJihiPXt9KTtiPWIud2luZG93O3ZhciBwPXZvaWQgMD09PWI/ZG9jdW1lbnQuZGVmYXVsdFZpZXc6YixtPXAuaGlzdG9yeSx1PW51bGw7cC5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIixcbmZ1bmN0aW9uKCl7aWYodSlnLmNhbGwodSksdT1udWxsO2Vsc2V7dmFyIGM9ci5Qb3AsYT1oKCksZj1hWzBdO2E9YVsxXTtpZihnLmxlbmd0aClpZihudWxsIT1mKXt2YXIgbD12LWY7bCYmKHU9e2FjdGlvbjpjLGxvY2F0aW9uOmEscmV0cnk6ZnVuY3Rpb24oKXt3KC0xKmwpfX0sdyhsKSl9ZWxzZVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/RCghMSxcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgY3JlYXRlZCBieSB0aGUgaGlzdG9yeSBsaWJyYXJ5LiBUaGUgYmxvY2sgd2lsbCBmYWlsIHNpbGVudGx5IGluIHByb2R1Y3Rpb24sIGJ1dCBpbiBnZW5lcmFsIHlvdSBzaG91bGQgZG8gYWxsIG5hdmlnYXRpb24gd2l0aCB0aGUgaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgdG8gYXZvaWQgdGhpcyBzaXR1YXRpb24uXCIpOlxudm9pZCAwO2Vsc2UgeihjKX19KTt2YXIgdD1yLlBvcDtiPWgoKTt2YXIgdj1iWzBdLHE9YlsxXSxkPUYoKSxnPUYoKTtudWxsPT12JiYodj0wLG0ucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LG0uc3RhdGUse2lkeDp2fSksXCJcIikpO3JldHVybntnZXQgYWN0aW9uKCl7cmV0dXJuIHR9LGdldCBsb2NhdGlvbigpe3JldHVybiBxfSxjcmVhdGVIcmVmOmUscHVzaDpBLHJlcGxhY2U6eSxnbzp3LGJhY2s6ZnVuY3Rpb24oKXt3KC0xKX0sZm9yd2FyZDpmdW5jdGlvbigpe3coMSl9LGxpc3RlbjpmdW5jdGlvbihjKXtyZXR1cm4gZC5wdXNoKGMpfSxibG9jazpmdW5jdGlvbihjKXt2YXIgYT1nLnB1c2goYyk7MT09PWcubGVuZ3RoJiZwLmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIixFKTtyZXR1cm4gZnVuY3Rpb24oKXthKCk7Zy5sZW5ndGh8fHAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLEUpfX19fTtcbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KGIpe2Z1bmN0aW9uIGgoKXt2YXIgYT1KKG0ubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLGY9YS5wYXRobmFtZSxsPWEuc2VhcmNoO2E9YS5oYXNoO3ZhciBrPXUuc3RhdGV8fHt9O3JldHVybltrLmlkeCxDKHtwYXRobmFtZTp2b2lkIDA9PT1mP1wiL1wiOmYsc2VhcmNoOnZvaWQgMD09PWw/XCJcIjpsLGhhc2g6dm9pZCAwPT09YT9cIlwiOmEsc3RhdGU6ay51c3J8fG51bGwsa2V5Omsua2V5fHxcImRlZmF1bHRcIn0pXX1mdW5jdGlvbiBlKCl7aWYodCljLmNhbGwodCksdD1udWxsO2Vsc2V7dmFyIGE9ci5Qb3AsZj1oKCksbD1mWzBdO2Y9ZlsxXTtpZihjLmxlbmd0aClpZihudWxsIT1sKXt2YXIgaz1xLWw7ayYmKHQ9e2FjdGlvbjphLGxvY2F0aW9uOmYscmV0cnk6ZnVuY3Rpb24oKXtwKC0xKmspfX0scChrKSl9ZWxzZVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/RCghMSxcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgY3JlYXRlZCBieSB0aGUgaGlzdG9yeSBsaWJyYXJ5LiBUaGUgYmxvY2sgd2lsbCBmYWlsIHNpbGVudGx5IGluIHByb2R1Y3Rpb24sIGJ1dCBpbiBnZW5lcmFsIHlvdSBzaG91bGQgZG8gYWxsIG5hdmlnYXRpb24gd2l0aCB0aGUgaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgdG8gYXZvaWQgdGhpcyBzaXR1YXRpb24uXCIpOlxudm9pZCAwO2Vsc2UgQShhKX19ZnVuY3Rpb24geChhKXt2YXIgZj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKSxsPVwiXCI7ZiYmZi5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpJiYoZj1tLmxvY2F0aW9uLmhyZWYsbD1mLmluZGV4T2YoXCIjXCIpLGw9LTE9PT1sP2Y6Zi5zbGljZSgwLGwpKTtyZXR1cm4gbCtcIiNcIisoXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6SShhKSl9ZnVuY3Rpb24geihhLGYpe3ZvaWQgMD09PWYmJihmPW51bGwpO3JldHVybiBDKF9leHRlbmRzKHtwYXRobmFtZTpkLnBhdGhuYW1lLGhhc2g6XCJcIixzZWFyY2g6XCJcIn0sXCJzdHJpbmdcIj09PXR5cGVvZiBhP0ooYSk6YSx7c3RhdGU6ZixrZXk6SCgpfSkpfWZ1bmN0aW9uIEEoYSl7dj1hO2E9aCgpO3E9YVswXTtkPWFbMV07Zy5jYWxsKHthY3Rpb246dixsb2NhdGlvbjpkfSl9ZnVuY3Rpb24geShhLGYpe2Z1bmN0aW9uIGwoKXt5KGEsZil9dmFyIGs9ci5QdXNoLG49eihhLGYpO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/XG5EKFwiL1wiPT09bi5wYXRobmFtZS5jaGFyQXQoMCksXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIrSlNPTi5zdHJpbmdpZnkoYSkrXCIpXCIpOnZvaWQgMDtpZighYy5sZW5ndGh8fChjLmNhbGwoe2FjdGlvbjprLGxvY2F0aW9uOm4scmV0cnk6bH0pLCExKSl7dmFyIEc9W3t1c3I6bi5zdGF0ZSxrZXk6bi5rZXksaWR4OnErMX0seChuKV07bj1HWzBdO0c9R1sxXTt0cnl7dS5wdXNoU3RhdGUobixcIlwiLEcpfWNhdGNoKEspe20ubG9jYXRpb24uYXNzaWduKEcpfUEoayl9fWZ1bmN0aW9uIHcoYSxmKXtmdW5jdGlvbiBsKCl7dyhhLGYpfXZhciBrPXIuUmVwbGFjZSxuPXooYSxmKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP0QoXCIvXCI9PT1uLnBhdGhuYW1lLmNoYXJBdCgwKSxcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucmVwbGFjZShcIitKU09OLnN0cmluZ2lmeShhKStcblwiKVwiKTp2b2lkIDA7Yy5sZW5ndGgmJihjLmNhbGwoe2FjdGlvbjprLGxvY2F0aW9uOm4scmV0cnk6bH0pLDEpfHwobj1be3VzcjpuLnN0YXRlLGtleTpuLmtleSxpZHg6cX0seChuKV0sdS5yZXBsYWNlU3RhdGUoblswXSxcIlwiLG5bMV0pLEEoaykpfWZ1bmN0aW9uIHAoYSl7dS5nbyhhKX12b2lkIDA9PT1iJiYoYj17fSk7Yj1iLndpbmRvdzt2YXIgbT12b2lkIDA9PT1iP2RvY3VtZW50LmRlZmF1bHRWaWV3OmIsdT1tLmhpc3RvcnksdD1udWxsO20uYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsZSk7bS5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLGZ1bmN0aW9uKCl7dmFyIGE9aCgpWzFdO0koYSkhPT1JKGQpJiZlKCl9KTt2YXIgdj1yLlBvcDtiPWgoKTt2YXIgcT1iWzBdLGQ9YlsxXSxnPUYoKSxjPUYoKTtudWxsPT1xJiYocT0wLHUucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LHUuc3RhdGUse2lkeDpxfSksXCJcIikpO3JldHVybntnZXQgYWN0aW9uKCl7cmV0dXJuIHZ9LGdldCBsb2NhdGlvbigpe3JldHVybiBkfSxcbmNyZWF0ZUhyZWY6eCxwdXNoOnkscmVwbGFjZTp3LGdvOnAsYmFjazpmdW5jdGlvbigpe3AoLTEpfSxmb3J3YXJkOmZ1bmN0aW9uKCl7cCgxKX0sbGlzdGVuOmZ1bmN0aW9uKGEpe3JldHVybiBnLnB1c2goYSl9LGJsb2NrOmZ1bmN0aW9uKGEpe3ZhciBmPWMucHVzaChhKTsxPT09Yy5sZW5ndGgmJm0uYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLEUpO3JldHVybiBmdW5jdGlvbigpe2YoKTtjLmxlbmd0aHx8bS5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsRSl9fX19O1xuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShiKXtmdW5jdGlvbiBoKGQsZyl7dm9pZCAwPT09ZyYmKGc9bnVsbCk7cmV0dXJuIEMoX2V4dGVuZHMoe3BhdGhuYW1lOnQucGF0aG5hbWUsc2VhcmNoOlwiXCIsaGFzaDpcIlwifSxcInN0cmluZ1wiPT09dHlwZW9mIGQ/SihkKTpkLHtzdGF0ZTpnLGtleTpIKCl9KSl9ZnVuY3Rpb24gZShkLGcsYyl7cmV0dXJuIXEubGVuZ3RofHwocS5jYWxsKHthY3Rpb246ZCxsb2NhdGlvbjpnLHJldHJ5OmN9KSwhMSl9ZnVuY3Rpb24geChkLGcpe3U9ZDt0PWc7di5jYWxsKHthY3Rpb246dSxsb2NhdGlvbjp0fSl9ZnVuY3Rpb24geihkLGcpe3ZhciBjPXIuUHVzaCxhPWgoZCxnKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP0QoXCIvXCI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKSxcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5wdXNoKFwiK0pTT04uc3RyaW5naWZ5KGQpK1wiKVwiKTpcbnZvaWQgMDtlKGMsYSxmdW5jdGlvbigpe3ooZCxnKX0pJiYobSs9MSxwLnNwbGljZShtLHAubGVuZ3RoLGEpLHgoYyxhKSl9ZnVuY3Rpb24gQShkLGcpe3ZhciBjPXIuUmVwbGFjZSxhPWgoZCxnKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP0QoXCIvXCI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKSxcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiK0pTT04uc3RyaW5naWZ5KGQpK1wiKVwiKTp2b2lkIDA7ZShjLGEsZnVuY3Rpb24oKXtBKGQsZyl9KSYmKHBbbV09YSx4KGMsYSkpfWZ1bmN0aW9uIHkoZCl7dmFyIGc9TWF0aC5taW4oTWF0aC5tYXgobStkLDApLHAubGVuZ3RoLTEpLGM9ci5Qb3AsYT1wW2ddO2UoYyxhLGZ1bmN0aW9uKCl7eShkKX0pJiYobT1nLHgoYyxhKSl9dm9pZCAwPT09YiYmKGI9e30pO3ZhciB3PWI7Yj13LmluaXRpYWxFbnRyaWVzO3c9dy5pbml0aWFsSW5kZXg7dmFyIHA9KHZvaWQgMD09PVxuYj9bXCIvXCJdOmIpLm1hcChmdW5jdGlvbihkKXt2YXIgZz1DKF9leHRlbmRzKHtwYXRobmFtZTpcIi9cIixzZWFyY2g6XCJcIixoYXNoOlwiXCIsc3RhdGU6bnVsbCxrZXk6SCgpfSxcInN0cmluZ1wiPT09dHlwZW9mIGQ/SihkKTpkKSk7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9EKFwiL1wiPT09Zy5wYXRobmFtZS5jaGFyQXQoMCksXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gY3JlYXRlTWVtb3J5SGlzdG9yeSh7IGluaXRpYWxFbnRyaWVzIH0pIChpbnZhbGlkIGVudHJ5OiBcIitKU09OLnN0cmluZ2lmeShkKStcIilcIik6dm9pZCAwO3JldHVybiBnfSksbT1NYXRoLm1pbihNYXRoLm1heChudWxsPT13P3AubGVuZ3RoLTE6dywwKSxwLmxlbmd0aC0xKSx1PXIuUG9wLHQ9cFttXSx2PUYoKSxxPUYoKTtyZXR1cm57Z2V0IGluZGV4KCl7cmV0dXJuIG19LGdldCBhY3Rpb24oKXtyZXR1cm4gdX0sZ2V0IGxvY2F0aW9uKCl7cmV0dXJuIHR9LGNyZWF0ZUhyZWY6ZnVuY3Rpb24oZCl7cmV0dXJuXCJzdHJpbmdcIj09PVxudHlwZW9mIGQ/ZDpJKGQpfSxwdXNoOnoscmVwbGFjZTpBLGdvOnksYmFjazpmdW5jdGlvbigpe3koLTEpfSxmb3J3YXJkOmZ1bmN0aW9uKCl7eSgxKX0sbGlzdGVuOmZ1bmN0aW9uKGQpe3JldHVybiB2LnB1c2goZCl9LGJsb2NrOmZ1bmN0aW9uKGQpe3JldHVybiBxLnB1c2goZCl9fX07ZXhwb3J0e3IgYXMgQWN0aW9uLGNyZWF0ZUJyb3dzZXJIaXN0b3J5LGNyZWF0ZUhhc2hIaXN0b3J5LGNyZWF0ZU1lbW9yeUhpc3RvcnksSSBhcyBjcmVhdGVQYXRoLEogYXMgcGFyc2VQYXRofVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrLCBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWN0aW9uLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5JztcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDT05URVhUXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIDxSb3V0ZXI+IEFQSVxuICogd2hlcmUgYm90aCB0aGUgbG9jYXRpb24gYW5kIGEgbmF2aWdhdG9yIG11c3QgYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBpbiBvcmRlclxuICogdG8gYXZvaWQgXCJ0ZWFyaW5nXCIgdGhhdCBtYXkgb2NjdXIgaW4gYSBzdXNwZW5zZS1lbmFibGVkIGFwcCBpZiB0aGUgYWN0aW9uXG4gKiBhbmQvb3IgbG9jYXRpb24gd2VyZSB0byBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGhpc3RvcnkgaW5zdGFuY2UuXG4gKi9cblxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTVBPTkVOVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWVtb3J5cm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNuYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMikge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZVxuICB9ID0gX3JlZjM7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBiYXNlbmFtZSA9IG5vcm1hbGl6ZVBhdGhuYW1lKGJhc2VuYW1lUHJvcCk7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wXG4gIH0pLCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG5cbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoLFxuICAgICAgc3RhdGUsXG4gICAgICBrZXlcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXldKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbiAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcblxuICBpZiAobG9jYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZToge1xuICAgICAgbG9jYXRpb24sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH1cbiAgfSkpO1xufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNCkge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNDtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGxldCB0b1BhdGhuYW1lID0gZ2V0VG9QYXRobmFtZSh0byk7XG4gICAgbGV0IGVuZHNXaXRoU2xhc2ggPSB0b1BhdGhuYW1lICE9IG51bGwgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSArIChlbmRzV2l0aFNsYXNoID8gXCIvXCIgOiBcIlwiKSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaW5yb3V0ZXJjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VuYXZpZ2F0aW9udHlwZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSk7XG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0Y29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VyZXNvbHZlZHBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8pIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzKTtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjY3JlYXRlcm91dGVzZnJvbWNoaWxkcmVuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoXG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFyc2VkIGZyb20gdGhlIFVSTCBwYXRoLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjZ2VuZXJhdGVwYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBrZXkpID0+IHtcbiAgICAhKHBhcmFtc1trZXldICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHBhcmFtc1trZXldO1xuICB9KS5yZXBsYWNlKC9cXC8qXFwqJC8sIF8gPT4gcGFyYW1zW1wiKlwiXSA9PSBudWxsID8gXCJcIiA6IHBhcmFtc1tcIipcIl0ucmVwbGFjZSgvXlxcLyovLCBcIi9cIikpO1xufVxuLyoqXG4gKiBBIFJvdXRlTWF0Y2ggY29udGFpbnMgaW5mbyBhYm91dCBob3cgYSByb3V0ZSBtYXRjaGVkIGEgVVJMLlxuICovXG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCBwYXRobmFtZSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cblxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cblxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJvdXRlLnBhdGggfHwgXCJcIixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgIW1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAhKHJvdXRlLmluZGV4ICE9PSB0cnVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzKSB7XG4gIGlmIChwYXJlbnRNYXRjaGVzID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRNYXRjaGVzID0gW107XG4gIH1cblxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChPdXRsZXQsIG51bGwpLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChtYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpXG4gICAgICB9XG4gICAgfSk7XG4gIH0sIG51bGwpO1xufVxuLyoqXG4gKiBBIFBhdGhQYXR0ZXJuIGlzIHVzZWQgdG8gbWF0Y2ggb24gc29tZSBwb3J0aW9uIG9mIGEgVVJMIHBhdGhuYW1lLlxuICovXG5cblxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgbGV0IFttYXRjaGVyLCBwYXJhbU5hbWVzXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cblxuICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudChjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSkgOiB2b2lkIDA7XG4gIGxldCBwYXJhbU5hbWVzID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvOihcXHcrKS9nLCAoXywgcGFyYW1OYW1lKSA9PiB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIFwiKFteXFxcXC9dKylcIjtcbiAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIHtcbiAgICByZWdleHBTb3VyY2UgKz0gZW5kID8gXCJcXFxcLyokXCIgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIDogLy8gT3RoZXJ3aXNlLCBtYXRjaCBhIHdvcmQgYm91bmRhcnkgb3IgYSBwcm9jZWVkaW5nIC8uIFRoZSB3b3JkIGJvdW5kYXJ5IHJlc3RyaWN0c1xuICAgIC8vIHBhcmVudCByb3V0ZXMgdG8gbWF0Y2hpbmcgb25seSB0aGVpciBvd24gd29yZHMgYW5kIG5vdGhpbmcgbW9yZSwgZS5nLiBwYXJlbnRcbiAgICAvLyByb3V0ZSBcIi9ob21lXCIgc2hvdWxkIG5vdCBtYXRjaCBcIi9ob21lMlwiLlxuICAgIFwiKD86XFxcXGJ8XFxcXC98JClcIjtcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3Jlc29sdmVwYXRoXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSkge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lOyAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgbGV0IGZyb207XG5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG5cbiAgaWYgKHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoYmFzZW5hbWUubGVuZ3RoKTtcblxuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRobmFtZS5zbGljZShiYXNlbmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xufVxuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBjcmVhdGVFbGVtZW50LCBmb3J3YXJkUmVmLCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgUm91dGVyLCB1c2VIcmVmLCB1c2VMb2NhdGlvbiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdO1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ09NUE9ORU5UU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3dcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgIG9uQ2xpY2ssXG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSA9IGZhbHNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICB0b1xuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvKTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldFxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAhcmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIjtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG5cbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cblxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlXG4gIH0pIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5cblxuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIHJldHVybiB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICApIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlLlxuXG4gICAgICBsZXQgcmVwbGFjZSA9ICEhcmVwbGFjZVByb3AgfHwgY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG9dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IHVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQua2V5cygpKSB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbiAgfSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gdXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIGNyZWF0ZVNlYXJjaFBhcmFtcyhuZXh0SW5pdCksIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZV0pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImNvbnN0IGRlZmF1bHRUaW1lc3RlcCA9ICgxIC8gNjApICogMTAwMDtcbmNvbnN0IGdldEN1cnJlbnRUaW1lID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmNvbnN0IG9uTmV4dEZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gKGNhbGxiYWNrKSA9PiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKVxuICAgIDogKGNhbGxiYWNrKSA9PiBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKGdldEN1cnJlbnRUaW1lKCkpLCBkZWZhdWx0VGltZXN0ZXApO1xuXG5leHBvcnQgeyBkZWZhdWx0VGltZXN0ZXAsIG9uTmV4dEZyYW1lIH07XG4iLCJpbXBvcnQgeyBvbk5leHRGcmFtZSwgZGVmYXVsdFRpbWVzdGVwIH0gZnJvbSAnLi9vbi1uZXh0LWZyYW1lLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVSZW5kZXJTdGVwIH0gZnJvbSAnLi9jcmVhdGUtcmVuZGVyLXN0ZXAubWpzJztcblxuY29uc3QgbWF4RWxhcHNlZCA9IDQwO1xubGV0IHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbmxldCBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbmxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbmNvbnN0IGZyYW1lID0ge1xuICAgIGRlbHRhOiAwLFxuICAgIHRpbWVzdGFtcDogMCxcbn07XG5jb25zdCBzdGVwc09yZGVyID0gW1xuICAgIFwicmVhZFwiLFxuICAgIFwidXBkYXRlXCIsXG4gICAgXCJwcmVSZW5kZXJcIixcbiAgICBcInJlbmRlclwiLFxuICAgIFwicG9zdFJlbmRlclwiLFxuXTtcbmNvbnN0IHN0ZXBzID0gc3RlcHNPcmRlci5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSBjcmVhdGVSZW5kZXJTdGVwKCgpID0+IChydW5OZXh0RnJhbWUgPSB0cnVlKSk7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IHN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBzdGVwID0gc3RlcHNba2V5XTtcbiAgICBhY2Nba2V5XSA9IChwcm9jZXNzLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgaWYgKCFydW5OZXh0RnJhbWUpXG4gICAgICAgICAgICBzdGFydExvb3AoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuc2NoZWR1bGUocHJvY2Vzcywga2VlcEFsaXZlLCBpbW1lZGlhdGUpO1xuICAgIH07XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IGNhbmNlbFN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9IHN0ZXBzW2tleV0uY2FuY2VsO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG5jb25zdCBmbHVzaFN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9ICgpID0+IHN0ZXBzW2tleV0ucHJvY2VzcyhmcmFtZSk7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbmNvbnN0IHByb2Nlc3NTdGVwID0gKHN0ZXBJZCkgPT4gc3RlcHNbc3RlcElkXS5wcm9jZXNzKGZyYW1lKTtcbmNvbnN0IHByb2Nlc3NGcmFtZSA9ICh0aW1lc3RhbXApID0+IHtcbiAgICBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbiAgICBmcmFtZS5kZWx0YSA9IHVzZURlZmF1bHRFbGFwc2VkXG4gICAgICAgID8gZGVmYXVsdFRpbWVzdGVwXG4gICAgICAgIDogTWF0aC5tYXgoTWF0aC5taW4odGltZXN0YW1wIC0gZnJhbWUudGltZXN0YW1wLCBtYXhFbGFwc2VkKSwgMSk7XG4gICAgZnJhbWUudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgc3RlcHNPcmRlci5mb3JFYWNoKHByb2Nlc3NTdGVwKTtcbiAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBpZiAocnVuTmV4dEZyYW1lKSB7XG4gICAgICAgIHVzZURlZmF1bHRFbGFwc2VkID0gZmFsc2U7XG4gICAgICAgIG9uTmV4dEZyYW1lKHByb2Nlc3NGcmFtZSk7XG4gICAgfVxufTtcbmNvbnN0IHN0YXJ0TG9vcCA9ICgpID0+IHtcbiAgICBydW5OZXh0RnJhbWUgPSB0cnVlO1xuICAgIHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbiAgICBpZiAoIWlzUHJvY2Vzc2luZylcbiAgICAgICAgb25OZXh0RnJhbWUocHJvY2Vzc0ZyYW1lKTtcbn07XG5jb25zdCBnZXRGcmFtZURhdGEgPSAoKSA9PiBmcmFtZTtcblxuZXhwb3J0IGRlZmF1bHQgc3luYztcbmV4cG9ydCB7IGNhbmNlbFN5bmMsIGZsdXNoU3luYywgZ2V0RnJhbWVEYXRhIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVSZW5kZXJTdGVwKHJ1bk5leHRGcmFtZSkge1xuICAgIGxldCB0b1J1biA9IFtdO1xuICAgIGxldCB0b1J1bk5leHRGcmFtZSA9IFtdO1xuICAgIGxldCBudW1Ub1J1biA9IDA7XG4gICAgbGV0IGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIGxldCBmbHVzaE5leHRGcmFtZSA9IGZhbHNlO1xuICAgIGNvbnN0IHRvS2VlcEFsaXZlID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBzdGVwID0ge1xuICAgICAgICBzY2hlZHVsZTogKGNhbGxiYWNrLCBrZWVwQWxpdmUgPSBmYWxzZSwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZFRvQ3VycmVudEZyYW1lID0gaW1tZWRpYXRlICYmIGlzUHJvY2Vzc2luZztcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGFkZFRvQ3VycmVudEZyYW1lID8gdG9SdW4gOiB0b1J1bk5leHRGcmFtZTtcbiAgICAgICAgICAgIGlmIChrZWVwQWxpdmUpXG4gICAgICAgICAgICAgICAgdG9LZWVwQWxpdmUuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChhZGRUb0N1cnJlbnRGcmFtZSAmJiBpc1Byb2Nlc3NpbmcpXG4gICAgICAgICAgICAgICAgICAgIG51bVRvUnVuID0gdG9SdW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0b1J1bk5leHRGcmFtZS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgdG9SdW5OZXh0RnJhbWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRvS2VlcEFsaXZlLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3M6IChmcmFtZURhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFt0b1J1biwgdG9SdW5OZXh0RnJhbWVdID0gW3RvUnVuTmV4dEZyYW1lLCB0b1J1bl07XG4gICAgICAgICAgICB0b1J1bk5leHRGcmFtZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgbnVtVG9SdW4gPSB0b1J1bi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobnVtVG9SdW4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRvUnVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0b1J1bltpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZnJhbWVEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvS2VlcEFsaXZlLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAuc2NoZWR1bGUoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuTmV4dEZyYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChmbHVzaE5leHRGcmFtZSkge1xuICAgICAgICAgICAgICAgIGZsdXNoTmV4dEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3RlcC5wcm9jZXNzKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3RlcDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVuZGVyU3RlcCB9O1xuIiwiZnVuY3Rpb24gdmVsb2NpdHlQZXJTZWNvbmQodmVsb2NpdHksIGZyYW1lRHVyYXRpb24pIHtcbiAgICByZXR1cm4gZnJhbWVEdXJhdGlvbiA/IHZlbG9jaXR5ICogKDEwMDAgLyBmcmFtZUR1cmF0aW9uKSA6IDA7XG59XG5cbmV4cG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH07XG4iLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5cbmZ1bmN0aW9uIGFkZFVuaXF1ZUl0ZW0oYXJyLCBpdGVtKSB7XG4gICAgYXJyLmluZGV4T2YoaXRlbSkgPT09IC0xICYmIGFyci5wdXNoKGl0ZW0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpbmRleCA+IC0xICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xufVxuLy8gQWRhcHRlZCBmcm9tIGFycmF5LW1vdmVcbmZ1bmN0aW9uIG1vdmVJdGVtKF9hLCBmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgICB2YXIgX2IgPSBfX3JlYWQoX2EpLCBhcnIgPSBfYi5zbGljZSgwKTtcbiAgICB2YXIgc3RhcnRJbmRleCA9IGZyb21JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgZnJvbUluZGV4IDogZnJvbUluZGV4O1xuICAgIGlmIChzdGFydEluZGV4ID49IDAgJiYgc3RhcnRJbmRleCA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGVuZEluZGV4ID0gdG9JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgdG9JbmRleCA6IHRvSW5kZXg7XG4gICAgICAgIHZhciBfYyA9IF9fcmVhZChhcnIuc3BsaWNlKGZyb21JbmRleCwgMSksIDEpLCBpdGVtID0gX2NbMF07XG4gICAgICAgIGFyci5zcGxpY2UoZW5kSW5kZXgsIDAsIGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgeyBhZGRVbmlxdWVJdGVtLCBtb3ZlSXRlbSwgcmVtb3ZlSXRlbSB9O1xuIiwiaW1wb3J0IHsgYWRkVW5pcXVlSXRlbSwgcmVtb3ZlSXRlbSB9IGZyb20gJy4vYXJyYXkubWpzJztcblxudmFyIFN1YnNjcmlwdGlvbk1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uTWFuYWdlcigpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUl0ZW0oX3RoaXMuc3Vic2NyaXB0aW9ucywgaGFuZGxlcik7IH07XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICB2YXIgbnVtU3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgIGlmICghbnVtU3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG51bVN1YnNjcmlwdGlvbnMgPT09IDEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIGhhbmRsZXIgd2UgY2FuIGp1c3QgY2FsbCBpdCB3aXRob3V0IGludm9raW5nIGEgbG9vcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zWzBdKGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1TdWJzY3JpcHRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBoYW5kbGVyIGV4aXN0cyBiZWZvcmUgZmlyaW5nIGFzIGl0J3MgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgKiB0aGUgc3Vic2NyaXB0aW9ucyB3ZXJlIG1vZGlmaWVkIGR1cmluZyB0aGlzIGxvb3AgcnVubmluZy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMuc3Vic2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyICYmIGhhbmRsZXIoYSwgYiwgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbk1hbmFnZXI7XG59KCkpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH07XG4iLCJpbXBvcnQgc3luYywgeyBnZXRGcmFtZURhdGEgfSBmcm9tICdmcmFtZXN5bmMnO1xuaW1wb3J0IHsgdmVsb2NpdHlQZXJTZWNvbmQgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyc7XG5cbnZhciBpc0Zsb2F0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG59O1xuLyoqXG4gKiBgTW90aW9uVmFsdWVgIGlzIHVzZWQgdG8gdHJhY2sgdGhlIHN0YXRlIGFuZCB2ZWxvY2l0eSBvZiBtb3Rpb24gdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIE1vdGlvblZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbml0IC0gVGhlIGluaXRpYXRpbmcgdmFsdWVcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAgICpcbiAgICAgKiAtICBgdHJhbnNmb3JtZXJgOiBBIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSBpbmNvbWluZyB2YWx1ZXMgd2l0aC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1vdGlvblZhbHVlKGluaXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIER1cmF0aW9uLCBpbiBtaWxsaXNlY29uZHMsIHNpbmNlIGxhc3QgdXBkYXRpbmcgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aW1lRGVsdGEgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGltZXN0YW1wIG9mIHRoZSBsYXN0IHRpbWUgdGhpcyBgTW90aW9uVmFsdWVgIHdhcyB1cGRhdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb25zIHRvIG5vdGlmeSB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycyA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW5jdGlvbnMgdG8gbm90aWZ5IHdoZW4gdGhlIHZlbG9jaXR5IHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bmN0aW9ucyB0byBub3RpZnkgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCB1cGRhdGVzIGFuZCBgcmVuZGVyYCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2tzIHdoZXRoZXIgdGhpcyB2YWx1ZSBjYW4gb3V0cHV0IGEgdmVsb2NpdHkuIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdHJ1ZVxuICAgICAgICAgKiBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpY2FsLCBidXQgd2UgbWlnaHQgYmUgYWJsZSB0byB3aWRlbiB0aGUgc2NvcGUgaGVyZSBhbmQgc3VwcG9ydFxuICAgICAgICAgKiBvdGhlciB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkgPSBmdW5jdGlvbiAodiwgcmVuZGVyKSB7XG4gICAgICAgICAgICBpZiAocmVuZGVyID09PSB2b2lkIDApIHsgcmVuZGVyID0gdHJ1ZTsgfVxuICAgICAgICAgICAgX3RoaXMucHJldiA9IF90aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBcbiAgICAgICAgICAgIHZhciBfYSA9IGdldEZyYW1lRGF0YSgpLCBkZWx0YSA9IF9hLmRlbHRhLCB0aW1lc3RhbXAgPSBfYS50aW1lc3RhbXA7XG4gICAgICAgICAgICBpZiAoX3RoaXMubGFzdFVwZGF0ZWQgIT09IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWVEZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgICAgIF90aGlzLmxhc3RVcGRhdGVkID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHN5bmMucG9zdFJlbmRlcihfdGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKF90aGlzLnByZXYgIT09IF90aGlzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmVsb2NpdHkgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmIChfdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLmdldFNpemUoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KF90aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHJlbmRlciBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclN1YnNjcmliZXJzLm5vdGlmeShfdGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luYy5wb3N0UmVuZGVyKF90aGlzLnZlbG9jaXR5Q2hlY2spOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyBgcHJldmAgd2l0aCBgY3VycmVudGAgaWYgdGhlIHZhbHVlIGhhc24ndCBiZWVuIHVwZGF0ZWQgdGhpcyBmcmFtZS5cbiAgICAgICAgICogVGhpcyBlbnN1cmVzIHZlbG9jaXR5IGNhbGN1bGF0aW9ucyByZXR1cm4gYDBgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVsb2NpdHlDaGVjayA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IF9hLnRpbWVzdGFtcDtcbiAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgIT09IF90aGlzLmxhc3RVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJldiA9IF90aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgX3RoaXMudmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuZ2V0VmVsb2NpdHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50ID0gaW5pdDtcbiAgICAgICAgdGhpcy5jYW5UcmFja1ZlbG9jaXR5ID0gaXNGbG9hdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgaXMgdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGluZyBgb25DaGFuZ2VgIGluc2lkZSBhIFJlYWN0IGNvbXBvbmVudCwgaXQgc2hvdWxkIGJlIHdyYXBwZWQgd2l0aCB0aGVcbiAgICAgKiBgdXNlRWZmZWN0YCBob29rLiBBcyBpdCByZXR1cm5zIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLCB0aGlzIHNob3VsZCBiZSByZXR1cm5lZFxuICAgICAqIGZyb20gdGhlIGB1c2VFZmZlY3RgIGZ1bmN0aW9uIHRvIGVuc3VyZSB5b3UgZG9uJ3QgYWRkIGR1cGxpY2F0ZSBzdWJzY3JpYmVycy4uXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICogICBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IHkgPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqICAgY29uc3Qgb3BhY2l0eSA9IHVzZU1vdGlvblZhbHVlKDEpXG4gICAgICpcbiAgICAgKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICogICAgIGZ1bmN0aW9uIHVwZGF0ZU9wYWNpdHkoKSB7XG4gICAgICogICAgICAgY29uc3QgbWF4WFkgPSBNYXRoLm1heCh4LmdldCgpLCB5LmdldCgpKVxuICAgICAqICAgICAgIGNvbnN0IG5ld09wYWNpdHkgPSB0cmFuc2Zvcm0obWF4WFksIFswLCAxMDBdLCBbMSwgMF0pXG4gICAgICogICAgICAgb3BhY2l0eS5zZXQobmV3T3BhY2l0eSlcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWCA9IHgub25DaGFuZ2UodXBkYXRlT3BhY2l0eSlcbiAgICAgKiAgICAgY29uc3QgdW5zdWJzY3JpYmVZID0geS5vbkNoYW5nZSh1cGRhdGVPcGFjaXR5KVxuICAgICAqXG4gICAgICogICAgIHJldHVybiAoKSA9PiB7XG4gICAgICogICAgICAgdW5zdWJzY3JpYmVYKClcbiAgICAgKiAgICAgICB1bnN1YnNjcmliZVkoKVxuICAgICAqICAgICB9XG4gICAgICogICB9LCBbXSlcbiAgICAgKlxuICAgICAqICAgcmV0dXJuIDxtb3Rpb24uZGl2IHN0eWxlPXt7IHggfX0gLz5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxyZW1hcmtzXG4gICAgICpcbiAgICAgKiBXZSBjb3VsZCBsb29rIGludG8gYSBgdXNlT25DaGFuZ2VgIGhvb2sgaWYgdGhlIGFib3ZlIGxpZmVjeWNsZSBtYW5hZ2VtZW50IHByb3ZlcyBjb25mdXNpbmcuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB1c2VPbkNoYW5nZSh4LCAoKSA9PiB7fSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gQSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVTdWJzY3JpYmVycy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5jbGVhckxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBub3RpZmllZCB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHJlcXVlc3RzIGEgcmVuZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YnNjcmliZXIgLSBBIGZ1bmN0aW9uIHRoYXQncyBwcm92aWRlZCB0aGUgbGF0ZXN0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLm9uUmVuZGVyUmVxdWVzdCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgLy8gUmVuZGVyIGltbWVkaWF0ZWx5XG4gICAgICAgIHN1YnNjcmlwdGlvbih0aGlzLmdldCgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHBhc3NpdmUgZWZmZWN0IHRvIHRoZSBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChwYXNzaXZlRWZmZWN0KSB7XG4gICAgICAgIHRoaXMucGFzc2l2ZUVmZmVjdCA9IHBhc3NpdmVFZmZlY3Q7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiB4LnNldCgxMClcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXRlc3QgLSBMYXRlc3QgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSByZW5kZXIgLSBXaGV0aGVyIHRvIG5vdGlmeSByZW5kZXIgc3Vic2NyaWJlcnMuIERlZmF1bHRzIHRvIGB0cnVlYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgcmVuZGVyKSB7XG4gICAgICAgIGlmIChyZW5kZXIgPT09IHZvaWQgMCkgeyByZW5kZXIgPSB0cnVlOyB9XG4gICAgICAgIGlmICghcmVuZGVyIHx8ICF0aGlzLnBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5kTm90aWZ5KHYsIHJlbmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhc3NpdmVFZmZlY3QodiwgdGhpcy51cGRhdGVBbmROb3RpZnkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHN0YXRlIG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5nZXRQcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBgTW90aW9uVmFsdWVgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyAtIFRoZSBsYXRlc3QgdmVsb2NpdHkgb2YgYE1vdGlvblZhbHVlYC4gUmV0dXJucyBgMGAgaWYgdGhlIHN0YXRlIGlzIG5vbi1udW1lcmljYWwuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGlzRmxvYXQodGhpcy5wcmV2KSAmJiBpc0Zsb2F0KHRoaXMuY3VycmVudCksIGJ1dCB0aGF0IHdvdWxkIGJlIHdhc3RlZnVsXG4gICAgICAgIHJldHVybiB0aGlzLmNhblRyYWNrVmVsb2NpdHlcbiAgICAgICAgICAgID8gLy8gVGhlc2UgY2FzdHMgY291bGQgYmUgYXZvaWRlZCBpZiBwYXJzZUZsb2F0IHdvdWxkIGJlIHR5cGVkIGJldHRlclxuICAgICAgICAgICAgICAgIHZlbG9jaXR5UGVyU2Vjb25kKHBhcnNlRmxvYXQodGhpcy5jdXJyZW50KSAtXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodGhpcy5wcmV2KSwgdGhpcy50aW1lRGVsdGEpXG4gICAgICAgICAgICA6IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgYW5pbWF0aW9uIHRvIGNvbnRyb2wgdGhpcyBgTW90aW9uVmFsdWVgLiBPbmx5IG9uZVxuICAgICAqIGFuaW1hdGlvbiBjYW4gZHJpdmUgYSBgTW90aW9uVmFsdWVgIGF0IG9uZSB0aW1lLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogdmFsdWUuc3RhcnQoKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGFuaW1hdGlvbiAtIEEgZnVuY3Rpb24gdGhhdCBzdGFydHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvblxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBfdGhpcy5oYXNBbmltYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5zdG9wQW5pbWF0aW9uID0gYW5pbWF0aW9uKHJlc29sdmUpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmNsZWFyQW5pbWF0aW9uKCk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgY3VycmVudGx5IGFjdGl2ZSBhbmltYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0b3BBbmltYXRpb24pXG4gICAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbGVhckFuaW1hdGlvbigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyB2YWx1ZSBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5pc0FuaW1hdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdG9wQW5pbWF0aW9uO1xuICAgIH07XG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmNsZWFyQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24gPSBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVzdHJveSBhbmQgY2xlYW4gdXAgc3Vic2NyaWJlcnMgdG8gdGhpcyBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogVGhlIGBNb3Rpb25WYWx1ZWAgaG9va3MgbGlrZSBgdXNlTW90aW9uVmFsdWVgIGFuZCBgdXNlVHJhbnNmb3JtYCBhdXRvbWF0aWNhbGx5XG4gICAgICogaGFuZGxlIHRoZSBsaWZlY3ljbGUgb2YgdGhlIHJldHVybmVkIGBNb3Rpb25WYWx1ZWAsIHNvIHRoaXMgbWV0aG9kIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHlvdSd2ZSBtYW51YWxseVxuICAgICAqIGNyZWF0ZWQgYSBgTW90aW9uVmFsdWVgIHZpYSB0aGUgYG1vdGlvblZhbHVlYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycy5jbGVhcigpO1xuICAgICAgICB0aGlzLnJlbmRlclN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1vdGlvblZhbHVlO1xufSgpKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG1vdGlvblZhbHVlKGluaXQpIHtcbiAgICByZXR1cm4gbmV3IE1vdGlvblZhbHVlKGluaXQpO1xufVxuXG5leHBvcnQgeyBNb3Rpb25WYWx1ZSwgbW90aW9uVmFsdWUgfTtcbiIsImltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vaW5kZXgubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlU2Nyb2xsTW90aW9uVmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbFg6IG1vdGlvblZhbHVlKDApLFxuICAgICAgICBzY3JvbGxZOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICAgICAgc2Nyb2xsWFByb2dyZXNzOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICAgICAgc2Nyb2xsWVByb2dyZXNzOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0UHJvZ3Jlc3Mob2Zmc2V0LCBtYXhPZmZzZXQsIHZhbHVlKSB7XG4gICAgdmFsdWUuc2V0KCFvZmZzZXQgfHwgIW1heE9mZnNldCA/IDAgOiBvZmZzZXQgLyBtYXhPZmZzZXQpO1xufVxuZnVuY3Rpb24gY3JlYXRlU2Nyb2xsVXBkYXRlcih2YWx1ZXMsIGdldE9mZnNldHMpIHtcbiAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSBnZXRPZmZzZXRzKCksIHhPZmZzZXQgPSBfYS54T2Zmc2V0LCB5T2Zmc2V0ID0gX2EueU9mZnNldCwgeE1heE9mZnNldCA9IF9hLnhNYXhPZmZzZXQsIHlNYXhPZmZzZXQgPSBfYS55TWF4T2Zmc2V0O1xuICAgICAgICAvLyBTZXQgYWJzb2x1dGUgcG9zaXRpb25zXG4gICAgICAgIHZhbHVlcy5zY3JvbGxYLnNldCh4T2Zmc2V0KTtcbiAgICAgICAgdmFsdWVzLnNjcm9sbFkuc2V0KHlPZmZzZXQpO1xuICAgICAgICAvLyBTZXQgMC0xIHByb2dyZXNzXG4gICAgICAgIHNldFByb2dyZXNzKHhPZmZzZXQsIHhNYXhPZmZzZXQsIHZhbHVlcy5zY3JvbGxYUHJvZ3Jlc3MpO1xuICAgICAgICBzZXRQcm9ncmVzcyh5T2Zmc2V0LCB5TWF4T2Zmc2V0LCB2YWx1ZXMuc2Nyb2xsWVByb2dyZXNzKTtcbiAgICB9O1xuICAgIHVwZGF0ZSgpO1xuICAgIHJldHVybiB1cGRhdGU7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcywgY3JlYXRlU2Nyb2xsVXBkYXRlciB9O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBhZGREb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07XG59XG4vKipcbiAqIEF0dGFjaGVzIGFuIGV2ZW50IGxpc3RlbmVyIGRpcmVjdGx5IHRvIHRoZSBwcm92aWRlZCBET00gZWxlbWVudC5cbiAqXG4gKiBCeXBhc3NpbmcgUmVhY3QncyBldmVudCBzeXN0ZW0gY2FuIGJlIGRlc2lyYWJsZSwgZm9yIGluc3RhbmNlIHdoZW4gYXR0YWNoaW5nIG5vbi1wYXNzaXZlXG4gKiBldmVudCBoYW5kbGVycy5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKVxuICpcbiAqIHVzZURvbUV2ZW50KHJlZiwgJ3doZWVsJywgb25XaGVlbCwgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICpcbiAqIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHJlZiAtIFJlYWN0LlJlZk9iamVjdCB0aGF0J3MgYmVlbiBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB5b3Ugd2FudCB0byBiaW5kIHRoZSBsaXN0ZW5lciB0by5cbiAqIEBwYXJhbSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB5b3Ugd2FudCBsaXN0ZW4gZm9yLlxuICogQHBhcmFtIGhhbmRsZXIgLSBGdW5jdGlvbiB0byBmaXJlIHdoZW4gcmVjZWl2aW5nIHRoZSBldmVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIGBFdmVudC5hZGRFdmVudExpc3RlbmVyYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZURvbUV2ZW50KHJlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgaWYgKGhhbmRsZXIgJiYgZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkZERvbUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LCBbcmVmLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnNdKTtcbn1cblxuZXhwb3J0IHsgYWRkRG9tRXZlbnQsIHVzZURvbUV2ZW50IH07XG4iLCJ2YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcblxuZXhwb3J0IHsgaXNCcm93c2VyIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVTY3JvbGxNb3Rpb25WYWx1ZXMsIGNyZWF0ZVNjcm9sbFVwZGF0ZXIgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy91c2UtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWlzb21vcnBoaWMtZWZmZWN0Lm1qcyc7XG5cbnZhciB2aWV3cG9ydFNjcm9sbFZhbHVlcztcbmZ1bmN0aW9uIGdldFZpZXdwb3J0U2Nyb2xsT2Zmc2V0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4T2Zmc2V0OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHlPZmZzZXQ6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgeE1heE9mZnNldDogZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICB5TWF4T2Zmc2V0OiBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICB9O1xufVxudmFyIGhhc0xpc3RlbmVycyA9IGZhbHNlO1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaGFzTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB1cGRhdGVTY3JvbGxWYWx1ZXMgPSBjcmVhdGVTY3JvbGxVcGRhdGVyKHZpZXdwb3J0U2Nyb2xsVmFsdWVzLCBnZXRWaWV3cG9ydFNjcm9sbE9mZnNldHMpO1xuICAgIGFkZERvbUV2ZW50KHdpbmRvdywgXCJzY3JvbGxcIiwgdXBkYXRlU2Nyb2xsVmFsdWVzLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgYWRkRG9tRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCB1cGRhdGVTY3JvbGxWYWx1ZXMpO1xufVxuLyoqXG4gKiBSZXR1cm5zIE1vdGlvblZhbHVlcyB0aGF0IHVwZGF0ZSB3aGVuIHRoZSB2aWV3cG9ydCBzY3JvbGxzOlxuICpcbiAqIC0gYHNjcm9sbFhgIOKAlCBIb3Jpem9udGFsIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHMuXG4gKiAtIGBzY3JvbGxZYCDigJQgVmVydGljYWwgc2Nyb2xsIGRpc3RhbmNlIGluIHBpeGVscy5cbiAqIC0gYHNjcm9sbFhQcm9ncmVzc2Ag4oCUIEhvcml6b250YWwgc2Nyb2xsIHByb2dyZXNzIGJldHdlZW4gYDBgIGFuZCBgMWAuXG4gKiAtIGBzY3JvbGxZUHJvZ3Jlc3NgIOKAlCBWZXJ0aWNhbCBzY3JvbGwgcHJvZ3Jlc3MgYmV0d2VlbiBgMGAgYW5kIGAxYC5cbiAqXG4gKiAqKldhcm5pbmc6KiogU2V0dGluZyBgYm9keWAgb3IgYGh0bWxgIHRvIGBoZWlnaHQ6IDEwMCVgIG9yIHNpbWlsYXIgd2lsbCBicmVhayB0aGUgYFByb2dyZXNzYFxuICogdmFsdWVzIGFzIHRoaXMgYnJlYWtzIHRoZSBicm93c2VyJ3MgY2FwYWJpbGl0eSB0byBhY2N1cmF0ZWx5IG1lYXN1cmUgdGhlIHBhZ2UgbGVuZ3RoLlxuICpcbiAqIGBgYGpzeFxuICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCB7IHNjcm9sbFlQcm9ncmVzcyB9ID0gdXNlVmlld3BvcnRTY3JvbGwoKVxuICogICByZXR1cm4gPG1vdGlvbi5kaXYgc3R5bGU9e3sgc2NhbGVYOiBzY3JvbGxZUHJvZ3Jlc3MgfX0gLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlVmlld3BvcnRTY3JvbGwoKSB7XG4gICAgLyoqXG4gICAgICogTGF6eS1pbml0aWFsaXNlIHRoZSB2aWV3cG9ydCBzY3JvbGwgdmFsdWVzXG4gICAgICovXG4gICAgaWYgKCF2aWV3cG9ydFNjcm9sbFZhbHVlcykge1xuICAgICAgICB2aWV3cG9ydFNjcm9sbFZhbHVlcyA9IGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcygpO1xuICAgIH1cbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWhhc0xpc3RlbmVycyAmJiBhZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gdmlld3BvcnRTY3JvbGxWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHVzZVZpZXdwb3J0U2Nyb2xsIH07XG4iLCJpbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4vaXMtYnJvd3Nlci5tanMnO1xuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzQnJvd3NlciA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9O1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJ2YXIgY3JlYXRlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChwcm9wTmFtZXMpIHsgcmV0dXJuICh7XG4gICAgaXNFbmFibGVkOiBmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuIHByb3BOYW1lcy5zb21lKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhIXByb3BzW25hbWVdOyB9KTsgfSxcbn0pOyB9O1xudmFyIGZlYXR1cmVEZWZpbml0aW9ucyA9IHtcbiAgICBtZWFzdXJlTGF5b3V0OiBjcmVhdGVEZWZpbml0aW9uKFtcImxheW91dFwiLCBcImxheW91dElkXCIsIFwiZHJhZ1wiXSksXG4gICAgYW5pbWF0aW9uOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcInZhcmlhbnRzXCIsXG4gICAgICAgIFwid2hpbGVIb3ZlclwiLFxuICAgICAgICBcIndoaWxlVGFwXCIsXG4gICAgICAgIFwid2hpbGVGb2N1c1wiLFxuICAgICAgICBcIndoaWxlRHJhZ1wiLFxuICAgICAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgXSksXG4gICAgZXhpdDogY3JlYXRlRGVmaW5pdGlvbihbXCJleGl0XCJdKSxcbiAgICBkcmFnOiBjcmVhdGVEZWZpbml0aW9uKFtcImRyYWdcIiwgXCJkcmFnQ29udHJvbHNcIl0pLFxuICAgIGZvY3VzOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlRm9jdXNcIl0pLFxuICAgIGhvdmVyOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlSG92ZXJcIiwgXCJvbkhvdmVyU3RhcnRcIiwgXCJvbkhvdmVyRW5kXCJdKSxcbiAgICB0YXA6IGNyZWF0ZURlZmluaXRpb24oW1wid2hpbGVUYXBcIiwgXCJvblRhcFwiLCBcIm9uVGFwU3RhcnRcIiwgXCJvblRhcENhbmNlbFwiXSksXG4gICAgcGFuOiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJvblBhblwiLFxuICAgICAgICBcIm9uUGFuU3RhcnRcIixcbiAgICAgICAgXCJvblBhblNlc3Npb25TdGFydFwiLFxuICAgICAgICBcIm9uUGFuRW5kXCIsXG4gICAgXSksXG4gICAgaW5WaWV3OiBjcmVhdGVEZWZpbml0aW9uKFtcbiAgICAgICAgXCJ3aGlsZUluVmlld1wiLFxuICAgICAgICBcIm9uVmlld3BvcnRFbnRlclwiLFxuICAgICAgICBcIm9uVmlld3BvcnRMZWF2ZVwiLFxuICAgIF0pLFxufTtcbmZ1bmN0aW9uIGxvYWRGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBmZWF0dXJlcykge1xuICAgICAgICBpZiAoZmVhdHVyZXNba2V5XSA9PT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoa2V5ID09PSBcInByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgZmVhdHVyZURlZmluaXRpb25zLnByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IgPSBmZWF0dXJlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmVhdHVyZURlZmluaXRpb25zW2tleV0uQ29tcG9uZW50ID0gZmVhdHVyZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgZmVhdHVyZURlZmluaXRpb25zLCBsb2FkRmVhdHVyZXMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBMYXp5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBzdHJpY3Q6IGZhbHNlIH0pO1xuXG5leHBvcnQgeyBMYXp5Q29udGV4dCB9O1xuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi9kZWZpbml0aW9ucy5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBMYXp5Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTGF6eUNvbnRleHQubWpzJztcblxudmFyIGZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVEZWZpbml0aW9ucyk7XG52YXIgbnVtRmVhdHVyZXMgPSBmZWF0dXJlTmFtZXMubGVuZ3RoO1xuLyoqXG4gKiBMb2FkIGZlYXR1cmVzIHZpYSByZW5kZXJsZXNzIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIE1vdGlvblByb3BzLlxuICovXG5mdW5jdGlvbiB1c2VGZWF0dXJlcyhwcm9wcywgdmlzdWFsRWxlbWVudCwgcHJlbG9hZGVkRmVhdHVyZXMpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICB2YXIgbGF6eUNvbnRleHQgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KTtcbiAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIGluIGRldmVsb3BtZW50IG1vZGUsIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSdyZSBub3QgcmVuZGVyaW5nIGEgbW90aW9uIGNvbXBvbmVudFxuICAgICAqIGFzIGEgY2hpbGQgb2YgTGF6eU1vdGlvbiwgYXMgdGhpcyB3aWxsIGJyZWFrIHRoZSBmaWxlLXNpemUgYmVuZWZpdHMgb2YgdXNpbmcgaXQuXG4gICAgICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBwcmVsb2FkZWRGZWF0dXJlcyAmJlxuICAgICAgICBsYXp5Q29udGV4dC5zdHJpY3QpIHtcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBoYXZlIHJlbmRlcmVkIGEgYG1vdGlvbmAgY29tcG9uZW50IHdpdGhpbiBhIGBMYXp5TW90aW9uYCBjb21wb25lbnQuIFRoaXMgd2lsbCBicmVhayB0cmVlIHNoYWtpbmcuIEltcG9ydCBhbmQgcmVuZGVyIGEgYG1gIGNvbXBvbmVudCBpbnN0ZWFkLlwiKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GZWF0dXJlczsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lXzEgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgIHZhciBfYSA9IGZlYXR1cmVEZWZpbml0aW9uc1tuYW1lXzFdLCBpc0VuYWJsZWQgPSBfYS5pc0VuYWJsZWQsIENvbXBvbmVudCA9IF9hLkNvbXBvbmVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0IG1pZ2h0IGJlIHBvc3NpYmxlIGluIHRoZSBmdXR1cmUgdG8gdXNlIHRoaXMgbW9tZW50IHRvXG4gICAgICAgICAqIGR5bmFtaWNhbGx5IHJlcXVlc3QgZnVuY3Rpb25hbGl0eS4gSW4gaW5pdGlhbCB0ZXN0cyB0aGlzXG4gICAgICAgICAqIHdhcyBwcm9kdWNpbmcgYSBsb3Qgb2YgZHVwbGljYXRpb24gYW1vbmdzdCBidW5kbGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzRW5hYmxlZChwcm9wcykgJiYgQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfX2Fzc2lnbih7IGtleTogbmFtZV8xIH0sIHByb3BzLCB7IHZpc3VhbEVsZW1lbnQ6IHZpc3VhbEVsZW1lbnQgfSkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmVhdHVyZXM7XG59XG5cbmV4cG9ydCB7IHVzZUZlYXR1cmVzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIE1vdGlvbkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgICB0cmFuc2Zvcm1QYWdlUG9pbnQ6IGZ1bmN0aW9uIChwKSB7IHJldHVybiBwOyB9LFxuICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICByZWR1Y2VkTW90aW9uOiBcIm5ldmVyXCIsXG59KTtcblxuZXhwb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxudmFyIE1vdGlvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIHVzZVZpc3VhbEVsZW1lbnRDb250ZXh0KCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpLnZpc3VhbEVsZW1lbnQ7XG59XG5cbmV4cG9ydCB7IE1vdGlvbkNvbnRleHQsIHVzZVZpc3VhbEVsZW1lbnRDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFByZXNlbmNlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmV4cG9ydCB7IFByZXNlbmNlQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5cbi8vIERvZXMgdGhpcyBkZXZpY2UgcHJlZmVyIHJlZHVjZWQgbW90aW9uPyBSZXR1cm5zIGBudWxsYCBzZXJ2ZXItc2lkZS5cbnZhciBwcmVmZXJzUmVkdWNlZE1vdGlvbiA9IHsgY3VycmVudDogbnVsbCB9O1xudmFyIGhhc0RldGVjdGVkID0gZmFsc2U7XG5mdW5jdGlvbiBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24oKSB7XG4gICAgaGFzRGV0ZWN0ZWQgPSB0cnVlO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIHZhciBtb3Rpb25NZWRpYVF1ZXJ5XzEgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uKVwiKTtcbiAgICAgICAgdmFyIHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAocHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudCA9IG1vdGlvbk1lZGlhUXVlcnlfMS5tYXRjaGVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW90aW9uTWVkaWFRdWVyeV8xLmFkZExpc3RlbmVyKHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyk7XG4gICAgICAgIHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQSBob29rIHRoYXQgcmV0dXJucyBgdHJ1ZWAgaWYgd2Ugc2hvdWxkIGJlIHVzaW5nIHJlZHVjZWQgbW90aW9uIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRldmljZSdzIFJlZHVjZWQgTW90aW9uIHNldHRpbmcuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnQgY2hhbmdlcyB0byB5b3VyIFVJIGJhc2VkIG9uIFJlZHVjZWQgTW90aW9uLiBGb3IgaW5zdGFuY2UsIHJlcGxhY2luZyBtb3Rpb24tc2lja25lc3MgaW5kdWNpbmdcbiAqIGB4YC9geWAgYW5pbWF0aW9ucyB3aXRoIGBvcGFjaXR5YCwgZGlzYWJsaW5nIHRoZSBhdXRvcGxheSBvZiBiYWNrZ3JvdW5kIHZpZGVvcywgb3IgdHVybmluZyBvZmYgcGFyYWxsYXggbW90aW9uLlxuICpcbiAqIEl0IHdpbGwgYWN0aXZlbHkgcmVzcG9uZCB0byBjaGFuZ2VzIGFuZCByZS1yZW5kZXIgeW91ciBjb21wb25lbnRzIHdpdGggdGhlIGxhdGVzdCBzZXR0aW5nLlxuICpcbiAqIGBgYGpzeFxuICogZXhwb3J0IGZ1bmN0aW9uIFNpZGViYXIoeyBpc09wZW4gfSkge1xuICogICBjb25zdCBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1c2VSZWR1Y2VkTW90aW9uKClcbiAqICAgY29uc3QgY2xvc2VkWCA9IHNob3VsZFJlZHVjZU1vdGlvbiA/IDAgOiBcIi0xMDAlXCJcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPG1vdGlvbi5kaXYgYW5pbWF0ZT17e1xuICogICAgICAgb3BhY2l0eTogaXNPcGVuID8gMSA6IDAsXG4gKiAgICAgICB4OiBpc09wZW4gPyAwIDogY2xvc2VkWFxuICogICAgIH19IC8+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEByZXR1cm4gYm9vbGVhblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlUmVkdWNlZE1vdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBMYXp5IGluaXRpYWxpc2F0aW9uIG9mIHByZWZlcnNSZWR1Y2VkTW90aW9uXG4gICAgICovXG4gICAgIWhhc0RldGVjdGVkICYmIGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbigpO1xuICAgIHZhciBfYSA9IF9fcmVhZCh1c2VTdGF0ZShwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50KSwgMSksIHNob3VsZFJlZHVjZU1vdGlvbiA9IF9hWzBdO1xuICAgIC8qKlxuICAgICAqIFRPRE8gU2VlIGlmIHBlb3BsZSBtaXNzIGF1dG9tYXRpY2FsbHkgdXBkYXRpbmcgc2hvdWxkUmVkdWNlTW90aW9uIHNldHRpbmdcbiAgICAgKi9cbiAgICByZXR1cm4gc2hvdWxkUmVkdWNlTW90aW9uO1xufVxuZnVuY3Rpb24gdXNlUmVkdWNlZE1vdGlvbkNvbmZpZygpIHtcbiAgICB2YXIgcmVkdWNlZE1vdGlvblByZWZlcmVuY2UgPSB1c2VSZWR1Y2VkTW90aW9uKCk7XG4gICAgdmFyIHJlZHVjZWRNb3Rpb24gPSB1c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLnJlZHVjZWRNb3Rpb247XG4gICAgaWYgKHJlZHVjZWRNb3Rpb24gPT09IFwibmV2ZXJcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlZHVjZWRNb3Rpb24gPT09IFwiYWx3YXlzXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVkdWNlZE1vdGlvblByZWZlcmVuY2U7XG4gICAgfVxufVxuXG5leHBvcnQgeyB1c2VSZWR1Y2VkTW90aW9uLCB1c2VSZWR1Y2VkTW90aW9uQ29uZmlnIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByZXNlbmNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgTGF6eUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyB1c2VSZWR1Y2VkTW90aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLXJlZHVjZWQtbW90aW9uLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgcHJvcHMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgbGF6eUNvbnRleHQgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KTtcbiAgICB2YXIgcGFyZW50ID0gdXNlVmlzdWFsRWxlbWVudENvbnRleHQoKTtcbiAgICB2YXIgcHJlc2VuY2VDb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIHZhciBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1c2VSZWR1Y2VkTW90aW9uQ29uZmlnKCk7XG4gICAgdmFyIHZpc3VhbEVsZW1lbnRSZWYgPSB1c2VSZWYodW5kZWZpbmVkKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlbid0IHByZWxvYWRlZCBhIHJlbmRlcmVyLCBjaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBvbmUgbGF6eS1sb2FkZWRcbiAgICAgKi9cbiAgICBpZiAoIWNyZWF0ZVZpc3VhbEVsZW1lbnQpXG4gICAgICAgIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBsYXp5Q29udGV4dC5yZW5kZXJlcjtcbiAgICBpZiAoIXZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCAmJiBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCA9IGNyZWF0ZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICB2aXN1YWxTdGF0ZTogdmlzdWFsU3RhdGUsXG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICAgIHByZXNlbmNlSWQ6IHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5pZCxcbiAgICAgICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbjogKHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5pbml0aWFsKSA9PT0gZmFsc2UsXG4gICAgICAgICAgICBzaG91bGRSZWR1Y2VNb3Rpb246IHNob3VsZFJlZHVjZU1vdGlvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciB2aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50O1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICB2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIH0pO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICB9KTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5ub3RpZnlVbm1vdW50KCk7IH07IH0sIFtdKTtcbiAgICByZXR1cm4gdmlzdWFsRWxlbWVudDtcbn1cblxuZXhwb3J0IHsgdXNlVmlzdWFsRWxlbWVudCB9O1xuIiwiZnVuY3Rpb24gaXNSZWZPYmplY3QocmVmKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcmVmID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWYsIFwiY3VycmVudFwiKSk7XG59XG5cbmV4cG9ydCB7IGlzUmVmT2JqZWN0IH07XG4iLCIvKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIGFuIGFycmF5IG9mIHZhcmlhbnQgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGlzVmFyaWFudExhYmVscyh2KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59XG4vKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIHZhcmlhbnQgbGFiZWxcbiAqL1xuZnVuY3Rpb24gaXNWYXJpYW50TGFiZWwodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiB8fCBpc1ZhcmlhbnRMYWJlbHModik7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCBzdGF0ZSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGN1cnJlbnQgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gKGN1cnJlbnRba2V5XSA9IHZhbHVlLmdldCgpKTsgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkodmlzdWFsRWxlbWVudCkge1xuICAgIHZhciB2ZWxvY2l0eSA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQuZm9yRWFjaFZhbHVlKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7IHJldHVybiAodmVsb2NpdHlba2V5XSA9IHZhbHVlLmdldFZlbG9jaXR5KCkpOyB9KTtcbiAgICByZXR1cm4gdmVsb2NpdHk7XG59XG5mdW5jdGlvbiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGN1cnJlbnRWYWx1ZXMgPT09IHZvaWQgMCkgeyBjdXJyZW50VmFsdWVzID0ge307IH1cbiAgICBpZiAoY3VycmVudFZlbG9jaXR5ID09PSB2b2lkIDApIHsgY3VycmVudFZlbG9jaXR5ID0ge307IH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBkZWZpbml0aW9uIGlzIGEgZnVuY3Rpb24sIHJlc29sdmUuXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24oY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBkZWZpbml0aW9uIGlzIGEgdmFyaWFudCBsYWJlbCwgb3JcbiAgICAgKiB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYSB2YXJpYW50IGxhYmVsLCByZXNvbHZlLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkZWZpbml0aW9uID0gKF9hID0gcHJvcHMudmFyaWFudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXQgdGhpcyBwb2ludCB3ZSd2ZSByZXNvbHZlZCBib3RoIGZ1bmN0aW9ucyBhbmQgdmFyaWFudCBsYWJlbHMsXG4gICAgICogYnV0IHRoZSByZXNvbHZlZCB2YXJpYW50IGxhYmVsIG1pZ2h0IGl0c2VsZiBoYXZlIGJlZW4gYSBmdW5jdGlvbi5cbiAgICAgKiBJZiBzbywgcmVzb2x2ZS4gVGhpcyBjYW4gb25seSBoYXZlIHJldHVybmVkIGEgdmFsaWQgdGFyZ2V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbihjdXN0b20gIT09IG51bGwgJiYgY3VzdG9tICE9PSB2b2lkIDAgPyBjdXN0b20gOiBwcm9wcy5jdXN0b20sIGN1cnJlbnRWYWx1ZXMsIGN1cnJlbnRWZWxvY2l0eSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZpbml0aW9uO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgY3VzdG9tKSB7XG4gICAgdmFyIHByb3BzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgIHJldHVybiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBnZXRDdXJyZW50KHZpc3VhbEVsZW1lbnQpLCBnZXRWZWxvY2l0eSh2aXN1YWxFbGVtZW50KSk7XG59XG5mdW5jdGlvbiBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKHR5cGVvZiAoKF9hID0gcHJvcHMuYW5pbWF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXJ0KSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmluaXRpYWwpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmFuaW1hdGUpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlSG92ZXIpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRHJhZykgfHxcbiAgICAgICAgaXNWYXJpYW50TGFiZWwocHJvcHMud2hpbGVUYXApIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRm9jdXMpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmV4aXQpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZWYXJpYW50Tm9kZShwcm9wcykge1xuICAgIHJldHVybiBCb29sZWFuKGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB8fCBwcm9wcy52YXJpYW50cyk7XG59XG5cbmV4cG9ydCB7IGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzLCBjaGVja0lmVmFyaWFudE5vZGUsIGlzVmFyaWFudExhYmVsLCBpc1ZhcmlhbnRMYWJlbHMsIHJlc29sdmVWYXJpYW50LCByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50VHJlZVZhcmlhbnRzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiB1c2VDcmVhdGVNb3Rpb25Db250ZXh0KHByb3BzKSB7XG4gICAgdmFyIF9hID0gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KSksIGluaXRpYWwgPSBfYS5pbml0aWFsLCBhbmltYXRlID0gX2EuYW5pbWF0ZTtcbiAgICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoeyBpbml0aWFsOiBpbml0aWFsLCBhbmltYXRlOiBhbmltYXRlIH0pOyB9LCBbdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShpbml0aWFsKSwgdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShhbmltYXRlKV0pO1xufVxuZnVuY3Rpb24gdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShwcm9wKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocHJvcCkgPyBwcm9wLmpvaW4oXCIgXCIpIDogcHJvcDtcbn1cblxuZXhwb3J0IHsgdXNlQ3JlYXRlTW90aW9uQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdGFudCB2YWx1ZSBvdmVyIHRoZSBsaWZlY3ljbGUgb2YgYSBjb21wb25lbnQuXG4gKlxuICogRXZlbiBpZiBgdXNlTWVtb2AgaXMgcHJvdmlkZWQgYW4gZW1wdHkgYXJyYXkgYXMgaXRzIGZpbmFsIGFyZ3VtZW50LCBpdCBkb2Vzbid0IG9mZmVyXG4gKiBhIGd1YXJhbnRlZSB0aGF0IGl0IHdvbid0IHJlLXJ1biBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBsYXRlciBvbi4gQnkgdXNpbmcgYHVzZUNvbnN0YW50YFxuICogeW91IGNhbiBlbnN1cmUgdGhhdCBpbml0aWFsaXNlcnMgZG9uJ3QgZXhlY3V0ZSB0d2ljZSBvciBtb3JlLlxuICovXG5mdW5jdGlvbiB1c2VDb25zdGFudChpbml0KSB7XG4gICAgdmFyIHJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBpbml0KCk7XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuZXhwb3J0IHsgdXNlQ29uc3RhbnQgfTtcbiIsImNvbnN0IG1peCA9IChmcm9tLCB0bywgcHJvZ3Jlc3MpID0+IC1wcm9ncmVzcyAqIGZyb20gKyBwcm9ncmVzcyAqIHRvICsgZnJvbTtcblxuZXhwb3J0IHsgbWl4IH07XG4iLCJ2YXIgaXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBCb29sZWFuKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5nZXRWZWxvY2l0eSk7XG59O1xuXG5leHBvcnQgeyBpc01vdGlvblZhbHVlIH07XG4iLCJjb25zdCBjbGFtcCA9IChtaW4sIG1heCwgdikgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcblxuZXhwb3J0IHsgY2xhbXAgfTtcbiIsImltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICdoZXktbGlzdGVuJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcblxuY29uc3Qgc2FmZU1pbiA9IDAuMDAxO1xuY29uc3QgbWluRHVyYXRpb24gPSAwLjAxO1xuY29uc3QgbWF4RHVyYXRpb24gPSAxMC4wO1xuY29uc3QgbWluRGFtcGluZyA9IDAuMDU7XG5jb25zdCBtYXhEYW1waW5nID0gMTtcbmZ1bmN0aW9uIGZpbmRTcHJpbmcoeyBkdXJhdGlvbiA9IDgwMCwgYm91bmNlID0gMC4yNSwgdmVsb2NpdHkgPSAwLCBtYXNzID0gMSwgfSkge1xuICAgIGxldCBlbnZlbG9wZTtcbiAgICBsZXQgZGVyaXZhdGl2ZTtcbiAgICB3YXJuaW5nKGR1cmF0aW9uIDw9IG1heER1cmF0aW9uICogMTAwMCwgXCJTcHJpbmcgZHVyYXRpb24gbXVzdCBiZSAxMCBzZWNvbmRzIG9yIGxlc3NcIik7XG4gICAgbGV0IGRhbXBpbmdSYXRpbyA9IDEgLSBib3VuY2U7XG4gICAgZGFtcGluZ1JhdGlvID0gY2xhbXAobWluRGFtcGluZywgbWF4RGFtcGluZywgZGFtcGluZ1JhdGlvKTtcbiAgICBkdXJhdGlvbiA9IGNsYW1wKG1pbkR1cmF0aW9uLCBtYXhEdXJhdGlvbiwgZHVyYXRpb24gLyAxMDAwKTtcbiAgICBpZiAoZGFtcGluZ1JhdGlvIDwgMSkge1xuICAgICAgICBlbnZlbG9wZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBleHBvbmVudGlhbERlY2F5IC0gdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBiID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHNhZmVNaW4gLSAoYSAvIGIpICogYztcbiAgICAgICAgfTtcbiAgICAgICAgZGVyaXZhdGl2ZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkZWx0YSAqIHZlbG9jaXR5ICsgdmVsb2NpdHk7XG4gICAgICAgICAgICBjb25zdCBlID0gTWF0aC5wb3coZGFtcGluZ1JhdGlvLCAyKSAqIE1hdGgucG93KHVuZGFtcGVkRnJlcSwgMikgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGYgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgY29uc3QgZyA9IGNhbGNBbmd1bGFyRnJlcShNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gLWVudmVsb3BlKHVuZGFtcGVkRnJlcSkgKyBzYWZlTWluID4gMCA/IC0xIDogMTtcbiAgICAgICAgICAgIHJldHVybiAoZmFjdG9yICogKChkIC0gZSkgKiBmKSkgLyBnO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW52ZWxvcGUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodW5kYW1wZWRGcmVxIC0gdmVsb2NpdHkpICogZHVyYXRpb24gKyAxO1xuICAgICAgICAgICAgcmV0dXJuIC1zYWZlTWluICsgYSAqIGI7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSAodW5kYW1wZWRGcmVxKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSAodmVsb2NpdHkgLSB1bmRhbXBlZEZyZXEpICogKGR1cmF0aW9uICogZHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGEgKiBiO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbml0aWFsR3Vlc3MgPSA1IC8gZHVyYXRpb247XG4gICAgY29uc3QgdW5kYW1wZWRGcmVxID0gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpO1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gKiAxMDAwO1xuICAgIGlmIChpc05hTih1bmRhbXBlZEZyZXEpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgICAgIGRhbXBpbmc6IDEwLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzdGlmZm5lc3MgPSBNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpICogbWFzcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0aWZmbmVzcyxcbiAgICAgICAgICAgIGRhbXBpbmc6IGRhbXBpbmdSYXRpbyAqIDIgKiBNYXRoLnNxcnQobWFzcyAqIHN0aWZmbmVzcyksXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG59XG5jb25zdCByb290SXRlcmF0aW9ucyA9IDEyO1xuZnVuY3Rpb24gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpIHtcbiAgICBsZXQgcmVzdWx0ID0gaW5pdGlhbEd1ZXNzO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcm9vdEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgLSBlbnZlbG9wZShyZXN1bHQpIC8gZGVyaXZhdGl2ZShyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKSB7XG4gICAgcmV0dXJuIHVuZGFtcGVkRnJlcSAqIE1hdGguc3FydCgxIC0gZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvKTtcbn1cblxuZXhwb3J0IHsgY2FsY0FuZ3VsYXJGcmVxLCBmaW5kU3ByaW5nLCBtYXhEYW1waW5nLCBtYXhEdXJhdGlvbiwgbWluRGFtcGluZywgbWluRHVyYXRpb24gfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGZpbmRTcHJpbmcsIGNhbGNBbmd1bGFyRnJlcSB9IGZyb20gJy4uL3V0aWxzL2ZpbmQtc3ByaW5nLm1qcyc7XG5cbmNvbnN0IGR1cmF0aW9uS2V5cyA9IFtcImR1cmF0aW9uXCIsIFwiYm91bmNlXCJdO1xuY29uc3QgcGh5c2ljc0tleXMgPSBbXCJzdGlmZm5lc3NcIiwgXCJkYW1waW5nXCIsIFwibWFzc1wiXTtcbmZ1bmN0aW9uIGlzU3ByaW5nVHlwZShvcHRpb25zLCBrZXlzKSB7XG4gICAgcmV0dXJuIGtleXMuc29tZSgoa2V5KSA9PiBvcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBnZXRTcHJpbmdPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBsZXQgc3ByaW5nT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB2ZWxvY2l0eTogMC4wLCBzdGlmZm5lc3M6IDEwMCwgZGFtcGluZzogMTAsIG1hc3M6IDEuMCwgaXNSZXNvbHZlZEZyb21EdXJhdGlvbjogZmFsc2UgfSwgb3B0aW9ucyk7XG4gICAgaWYgKCFpc1NwcmluZ1R5cGUob3B0aW9ucywgcGh5c2ljc0tleXMpICYmXG4gICAgICAgIGlzU3ByaW5nVHlwZShvcHRpb25zLCBkdXJhdGlvbktleXMpKSB7XG4gICAgICAgIGNvbnN0IGRlcml2ZWQgPSBmaW5kU3ByaW5nKG9wdGlvbnMpO1xuICAgICAgICBzcHJpbmdPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNwcmluZ09wdGlvbnMpLCBkZXJpdmVkKSwgeyB2ZWxvY2l0eTogMC4wLCBtYXNzOiAxLjAgfSk7XG4gICAgICAgIHNwcmluZ09wdGlvbnMuaXNSZXNvbHZlZEZyb21EdXJhdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzcHJpbmdPcHRpb25zO1xufVxuZnVuY3Rpb24gc3ByaW5nKF9hKSB7XG4gICAgdmFyIHsgZnJvbSA9IDAuMCwgdG8gPSAxLjAsIHJlc3RTcGVlZCA9IDIsIHJlc3REZWx0YSB9ID0gX2EsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImZyb21cIiwgXCJ0b1wiLCBcInJlc3RTcGVlZFwiLCBcInJlc3REZWx0YVwiXSk7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGxldCB7IHN0aWZmbmVzcywgZGFtcGluZywgbWFzcywgdmVsb2NpdHksIGR1cmF0aW9uLCBpc1Jlc29sdmVkRnJvbUR1cmF0aW9uLCB9ID0gZ2V0U3ByaW5nT3B0aW9ucyhvcHRpb25zKTtcbiAgICBsZXQgcmVzb2x2ZVNwcmluZyA9IHplcm87XG4gICAgbGV0IHJlc29sdmVWZWxvY2l0eSA9IHplcm87XG4gICAgZnVuY3Rpb24gY3JlYXRlU3ByaW5nKCkge1xuICAgICAgICBjb25zdCBpbml0aWFsVmVsb2NpdHkgPSB2ZWxvY2l0eSA/IC0odmVsb2NpdHkgLyAxMDAwKSA6IDAuMDtcbiAgICAgICAgY29uc3QgaW5pdGlhbERlbHRhID0gdG8gLSBmcm9tO1xuICAgICAgICBjb25zdCBkYW1waW5nUmF0aW8gPSBkYW1waW5nIC8gKDIgKiBNYXRoLnNxcnQoc3RpZmZuZXNzICogbWFzcykpO1xuICAgICAgICBjb25zdCB1bmRhbXBlZEFuZ3VsYXJGcmVxID0gTWF0aC5zcXJ0KHN0aWZmbmVzcyAvIG1hc3MpIC8gMTAwMDtcbiAgICAgICAgaWYgKHJlc3REZWx0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN0RGVsdGEgPSBNYXRoLm1pbihNYXRoLmFicyh0byAtIGZyb20pIC8gMTAwLCAwLjQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYW1waW5nUmF0aW8gPCAxKSB7XG4gICAgICAgICAgICBjb25zdCBhbmd1bGFyRnJlcSA9IGNhbGNBbmd1bGFyRnJlcSh1bmRhbXBlZEFuZ3VsYXJGcmVxLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAgICAgcmVzb2x2ZVNwcmluZyA9ICh0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAodG8gLVxuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoKChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyRnJlcSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGFuZ3VsYXJGcmVxICogdCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSAqIE1hdGguY29zKGFuZ3VsYXJGcmVxICogdCkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlVmVsb2NpdHkgPSAodCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudmVsb3BlID0gTWF0aC5leHAoLWRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiB0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRhbXBpbmdSYXRpbyAqXG4gICAgICAgICAgICAgICAgICAgIHVuZGFtcGVkQW5ndWxhckZyZXEgKlxuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICgoTWF0aC5zaW4oYW5ndWxhckZyZXEgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhKSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckZyZXEgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICogTWF0aC5jb3MoYW5ndWxhckZyZXEgKiB0KSkgLVxuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoTWF0aC5jb3MoYW5ndWxhckZyZXEgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oYW5ndWxhckZyZXEgKiB0KSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYW1waW5nUmF0aW8gPT09IDEpIHtcbiAgICAgICAgICAgIHJlc29sdmVTcHJpbmcgPSAodCkgPT4gdG8gLVxuICAgICAgICAgICAgICAgIE1hdGguZXhwKC11bmRhbXBlZEFuZ3VsYXJGcmVxICogdCkgKlxuICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbERlbHRhICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpbml0aWFsVmVsb2NpdHkgKyB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkYW1wZWRBbmd1bGFyRnJlcSA9IHVuZGFtcGVkQW5ndWxhckZyZXEgKiBNYXRoLnNxcnQoZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvIC0gMSk7XG4gICAgICAgICAgICByZXNvbHZlU3ByaW5nID0gKHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJlcUZvclQgPSBNYXRoLm1pbihkYW1wZWRBbmd1bGFyRnJlcSAqIHQsIDMwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0byAtXG4gICAgICAgICAgICAgICAgICAgIChlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luaChmcmVxRm9yVCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3NoKGZyZXFGb3JUKSkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBlZEFuZ3VsYXJGcmVxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlU3ByaW5nKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogKHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSByZXNvbHZlU3ByaW5nKHQpO1xuICAgICAgICAgICAgaWYgKCFpc1Jlc29sdmVkRnJvbUR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFZlbG9jaXR5ID0gcmVzb2x2ZVZlbG9jaXR5KHQpICogMTAwMDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0JlbG93VmVsb2NpdHlUaHJlc2hvbGQgPSBNYXRoLmFicyhjdXJyZW50VmVsb2NpdHkpIDw9IHJlc3RTcGVlZDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkID0gTWF0aC5hYnModG8gLSBjdXJyZW50KSA8PSByZXN0RGVsdGE7XG4gICAgICAgICAgICAgICAgc3RhdGUuZG9uZSA9XG4gICAgICAgICAgICAgICAgICAgIGlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCAmJiBpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZSA9IHN0YXRlLmRvbmUgPyB0byA6IGN1cnJlbnQ7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGZsaXBUYXJnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gLXZlbG9jaXR5O1xuICAgICAgICAgICAgW2Zyb20sIHRvXSA9IFt0bywgZnJvbV07XG4gICAgICAgICAgICBjcmVhdGVTcHJpbmcoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuc3ByaW5nLm5lZWRzSW50ZXJwb2xhdGlvbiA9IChhLCBiKSA9PiB0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYiA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IHplcm8gPSAoX3QpID0+IDA7XG5cbmV4cG9ydCB7IHNwcmluZyB9O1xuIiwiY29uc3QgcHJvZ3Jlc3MgPSAoZnJvbSwgdG8sIHZhbHVlKSA9PiB7XG4gICAgY29uc3QgdG9Gcm9tRGlmZmVyZW5jZSA9IHRvIC0gZnJvbTtcbiAgICByZXR1cm4gdG9Gcm9tRGlmZmVyZW5jZSA9PT0gMCA/IDEgOiAodmFsdWUgLSBmcm9tKSAvIHRvRnJvbURpZmZlcmVuY2U7XG59O1xuXG5leHBvcnQgeyBwcm9ncmVzcyB9O1xuIiwiY29uc3QgY2xhbXAgPSAobWluLCBtYXgpID0+ICh2KSA9PiBNYXRoLm1heChNYXRoLm1pbih2LCBtYXgpLCBtaW4pO1xuY29uc3Qgc2FuaXRpemUgPSAodikgPT4gKHYgJSAxID8gTnVtYmVyKHYudG9GaXhlZCg1KSkgOiB2KTtcbmNvbnN0IGZsb2F0UmVnZXggPSAvKC0pPyhbXFxkXSpcXC4/W1xcZF0pKy9nO1xuY29uc3QgY29sb3JSZWdleCA9IC8oI1swLTlhLWZdezZ9fCNbMC05YS1mXXszfXwjKD86WzAtOWEtZl17Mn0pezIsNH18KHJnYnxoc2wpYT9cXCgoLT9bXFxkXFwuXSslP1ssXFxzXSspezIsM31cXHMqXFwvKlxccypbXFxkXFwuXSslP1xcKSkvZ2k7XG5jb25zdCBzaW5nbGVDb2xvclJlZ2V4ID0gL14oI1swLTlhLWZdezN9fCMoPzpbMC05YS1mXXsyfSl7Miw0fXwocmdifGhzbClhP1xcKCgtP1tcXGRcXC5dKyU/WyxcXHNdKyl7MiwzfVxccypcXC8qXFxzKltcXGRcXC5dKyU/XFwpKSQvaTtcbmZ1bmN0aW9uIGlzU3RyaW5nKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgeyBjbGFtcCwgY29sb3JSZWdleCwgZmxvYXRSZWdleCwgaXNTdHJpbmcsIHNhbml0aXplLCBzaW5nbGVDb2xvclJlZ2V4IH07XG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IG51bWJlciA9IHtcbiAgICB0ZXN0OiAodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInLFxuICAgIHBhcnNlOiBwYXJzZUZsb2F0LFxuICAgIHRyYW5zZm9ybTogKHYpID0+IHYsXG59O1xuY29uc3QgYWxwaGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG51bWJlciksIHsgdHJhbnNmb3JtOiBjbGFtcCgwLCAxKSB9KTtcbmNvbnN0IHNjYWxlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXIpLCB7IGRlZmF1bHQ6IDEgfSk7XG5cbmV4cG9ydCB7IGFscGhhLCBudW1iZXIsIHNjYWxlIH07XG4iLCJpbXBvcnQgeyBpc1N0cmluZywgc2luZ2xlQ29sb3JSZWdleCwgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGlzQ29sb3JTdHJpbmcgPSAodHlwZSwgdGVzdFByb3ApID0+ICh2KSA9PiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGlzU3RyaW5nKHYpICYmIHNpbmdsZUNvbG9yUmVnZXgudGVzdCh2KSAmJiB2LnN0YXJ0c1dpdGgodHlwZSkpIHx8XG4gICAgICAgICh0ZXN0UHJvcCAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodiwgdGVzdFByb3ApKSk7XG59O1xuY29uc3Qgc3BsaXRDb2xvciA9IChhTmFtZSwgYk5hbWUsIGNOYW1lKSA9PiAodikgPT4ge1xuICAgIGlmICghaXNTdHJpbmcodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGNvbnN0IFthLCBiLCBjLCBhbHBoYV0gPSB2Lm1hdGNoKGZsb2F0UmVnZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFthTmFtZV06IHBhcnNlRmxvYXQoYSksXG4gICAgICAgIFtiTmFtZV06IHBhcnNlRmxvYXQoYiksXG4gICAgICAgIFtjTmFtZV06IHBhcnNlRmxvYXQoYyksXG4gICAgICAgIGFscGhhOiBhbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyc2VGbG9hdChhbHBoYSkgOiAxLFxuICAgIH07XG59O1xuXG5leHBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH07XG4iLCJpbXBvcnQgeyBudW1iZXIsIGFscGhhIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgc2FuaXRpemUsIGNsYW1wIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IGlzQ29sb3JTdHJpbmcsIHNwbGl0Q29sb3IgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGNsYW1wUmdiVW5pdCA9IGNsYW1wKDAsIDI1NSk7XG5jb25zdCByZ2JVbml0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXIpLCB7IHRyYW5zZm9ybTogKHYpID0+IE1hdGgucm91bmQoY2xhbXBSZ2JVbml0KHYpKSB9KTtcbmNvbnN0IHJnYmEgPSB7XG4gICAgdGVzdDogaXNDb2xvclN0cmluZygncmdiJywgJ3JlZCcpLFxuICAgIHBhcnNlOiBzcGxpdENvbG9yKCdyZWQnLCAnZ3JlZW4nLCAnYmx1ZScpLFxuICAgIHRyYW5zZm9ybTogKHsgcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+ICdyZ2JhKCcgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShyZWQpICtcbiAgICAgICAgJywgJyArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGdyZWVuKSArXG4gICAgICAgICcsICcgK1xuICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShibHVlKSArXG4gICAgICAgICcsICcgK1xuICAgICAgICBzYW5pdGl6ZShhbHBoYS50cmFuc2Zvcm0oYWxwaGEkMSkpICtcbiAgICAgICAgJyknLFxufTtcblxuZXhwb3J0IHsgcmdiVW5pdCwgcmdiYSB9O1xuIiwiaW1wb3J0IHsgcmdiYSB9IGZyb20gJy4vcmdiYS5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gcGFyc2VIZXgodikge1xuICAgIGxldCByID0gJyc7XG4gICAgbGV0IGcgPSAnJztcbiAgICBsZXQgYiA9ICcnO1xuICAgIGxldCBhID0gJyc7XG4gICAgaWYgKHYubGVuZ3RoID4gNSkge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMik7XG4gICAgICAgIGcgPSB2LnN1YnN0cigzLCAyKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDUsIDIpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNywgMik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMSk7XG4gICAgICAgIGcgPSB2LnN1YnN0cigyLCAxKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDMsIDEpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNCwgMSk7XG4gICAgICAgIHIgKz0gcjtcbiAgICAgICAgZyArPSBnO1xuICAgICAgICBiICs9IGI7XG4gICAgICAgIGEgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiBwYXJzZUludChyLCAxNiksXG4gICAgICAgIGdyZWVuOiBwYXJzZUludChnLCAxNiksXG4gICAgICAgIGJsdWU6IHBhcnNlSW50KGIsIDE2KSxcbiAgICAgICAgYWxwaGE6IGEgPyBwYXJzZUludChhLCAxNikgLyAyNTUgOiAxLFxuICAgIH07XG59XG5jb25zdCBoZXggPSB7XG4gICAgdGVzdDogaXNDb2xvclN0cmluZygnIycpLFxuICAgIHBhcnNlOiBwYXJzZUhleCxcbiAgICB0cmFuc2Zvcm06IHJnYmEudHJhbnNmb3JtLFxufTtcblxuZXhwb3J0IHsgaGV4IH07XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGNyZWF0ZVVuaXRUeXBlID0gKHVuaXQpID0+ICh7XG4gICAgdGVzdDogKHYpID0+IGlzU3RyaW5nKHYpICYmIHYuZW5kc1dpdGgodW5pdCkgJiYgdi5zcGxpdCgnICcpLmxlbmd0aCA9PT0gMSxcbiAgICBwYXJzZTogcGFyc2VGbG9hdCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBgJHt2fSR7dW5pdH1gLFxufSk7XG5jb25zdCBkZWdyZWVzID0gY3JlYXRlVW5pdFR5cGUoJ2RlZycpO1xuY29uc3QgcGVyY2VudCA9IGNyZWF0ZVVuaXRUeXBlKCclJyk7XG5jb25zdCBweCA9IGNyZWF0ZVVuaXRUeXBlKCdweCcpO1xuY29uc3QgdmggPSBjcmVhdGVVbml0VHlwZSgndmgnKTtcbmNvbnN0IHZ3ID0gY3JlYXRlVW5pdFR5cGUoJ3Z3Jyk7XG5jb25zdCBwcm9ncmVzc1BlcmNlbnRhZ2UgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBlcmNlbnQpLCB7IHBhcnNlOiAodikgPT4gcGVyY2VudC5wYXJzZSh2KSAvIDEwMCwgdHJhbnNmb3JtOiAodikgPT4gcGVyY2VudC50cmFuc2Zvcm0odiAqIDEwMCkgfSk7XG5cbmV4cG9ydCB7IGRlZ3JlZXMsIHBlcmNlbnQsIHByb2dyZXNzUGVyY2VudGFnZSwgcHgsIHZoLCB2dyB9O1xuIiwiaW1wb3J0IHsgYWxwaGEgfSBmcm9tICcuLi9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwZXJjZW50IH0gZnJvbSAnLi4vbnVtYmVycy91bml0cy5tanMnO1xuaW1wb3J0IHsgc2FuaXRpemUgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZywgc3BsaXRDb2xvciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgaHNsYSA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKCdoc2wnLCAnaHVlJyksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoJ2h1ZScsICdzYXR1cmF0aW9uJywgJ2xpZ2h0bmVzcycpLFxuICAgIHRyYW5zZm9ybTogKHsgaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhOiBhbHBoYSQxID0gMSB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoJ2hzbGEoJyArXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGh1ZSkgK1xuICAgICAgICAgICAgJywgJyArXG4gICAgICAgICAgICBwZXJjZW50LnRyYW5zZm9ybShzYW5pdGl6ZShzYXR1cmF0aW9uKSkgK1xuICAgICAgICAgICAgJywgJyArXG4gICAgICAgICAgICBwZXJjZW50LnRyYW5zZm9ybShzYW5pdGl6ZShsaWdodG5lc3MpKSArXG4gICAgICAgICAgICAnLCAnICtcbiAgICAgICAgICAgIHNhbml0aXplKGFscGhhLnRyYW5zZm9ybShhbHBoYSQxKSkgK1xuICAgICAgICAgICAgJyknKTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgaHNsYSB9O1xuIiwiZnVuY3Rpb24gaHVlVG9SZ2IocCwgcSwgdCkge1xuICAgIGlmICh0IDwgMClcbiAgICAgICAgdCArPSAxO1xuICAgIGlmICh0ID4gMSlcbiAgICAgICAgdCAtPSAxO1xuICAgIGlmICh0IDwgMSAvIDYpXG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgIGlmICh0IDwgMSAvIDIpXG4gICAgICAgIHJldHVybiBxO1xuICAgIGlmICh0IDwgMiAvIDMpXG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGhzbGFUb1JnYmEoeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGEgfSkge1xuICAgIGh1ZSAvPSAzNjA7XG4gICAgc2F0dXJhdGlvbiAvPSAxMDA7XG4gICAgbGlnaHRuZXNzIC89IDEwMDtcbiAgICBsZXQgcmVkID0gMDtcbiAgICBsZXQgZ3JlZW4gPSAwO1xuICAgIGxldCBibHVlID0gMDtcbiAgICBpZiAoIXNhdHVyYXRpb24pIHtcbiAgICAgICAgcmVkID0gZ3JlZW4gPSBibHVlID0gbGlnaHRuZXNzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcSA9IGxpZ2h0bmVzcyA8IDAuNVxuICAgICAgICAgICAgPyBsaWdodG5lc3MgKiAoMSArIHNhdHVyYXRpb24pXG4gICAgICAgICAgICA6IGxpZ2h0bmVzcyArIHNhdHVyYXRpb24gLSBsaWdodG5lc3MgKiBzYXR1cmF0aW9uO1xuICAgICAgICBjb25zdCBwID0gMiAqIGxpZ2h0bmVzcyAtIHE7XG4gICAgICAgIHJlZCA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSArIDEgLyAzKTtcbiAgICAgICAgZ3JlZW4gPSBodWVUb1JnYihwLCBxLCBodWUpO1xuICAgICAgICBibHVlID0gaHVlVG9SZ2IocCwgcSwgaHVlIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZWQ6IE1hdGgucm91bmQocmVkICogMjU1KSxcbiAgICAgICAgZ3JlZW46IE1hdGgucm91bmQoZ3JlZW4gKiAyNTUpLFxuICAgICAgICBibHVlOiBNYXRoLnJvdW5kKGJsdWUgKiAyNTUpLFxuICAgICAgICBhbHBoYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBoc2xhVG9SZ2JhIH07XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgaHNsYSwgcmdiYSwgaGV4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBoc2xhVG9SZ2JhIH0gZnJvbSAnLi9oc2xhLXRvLXJnYmEubWpzJztcblxuY29uc3QgbWl4TGluZWFyQ29sb3IgPSAoZnJvbSwgdG8sIHYpID0+IHtcbiAgICBjb25zdCBmcm9tRXhwbyA9IGZyb20gKiBmcm9tO1xuICAgIGNvbnN0IHRvRXhwbyA9IHRvICogdG87XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLm1heCgwLCB2ICogKHRvRXhwbyAtIGZyb21FeHBvKSArIGZyb21FeHBvKSk7XG59O1xuY29uc3QgY29sb3JUeXBlcyA9IFtoZXgsIHJnYmEsIGhzbGFdO1xuY29uc3QgZ2V0Q29sb3JUeXBlID0gKHYpID0+IGNvbG9yVHlwZXMuZmluZCgodHlwZSkgPT4gdHlwZS50ZXN0KHYpKTtcbmNvbnN0IG5vdEFuaW1hdGFibGUgPSAoY29sb3IpID0+IGAnJHtjb2xvcn0nIGlzIG5vdCBhbiBhbmltYXRhYmxlIGNvbG9yLiBVc2UgdGhlIGVxdWl2YWxlbnQgY29sb3IgY29kZSBpbnN0ZWFkLmA7XG5jb25zdCBtaXhDb2xvciA9IChmcm9tLCB0bykgPT4ge1xuICAgIGxldCBmcm9tQ29sb3JUeXBlID0gZ2V0Q29sb3JUeXBlKGZyb20pO1xuICAgIGxldCB0b0NvbG9yVHlwZSA9IGdldENvbG9yVHlwZSh0byk7XG4gICAgaW52YXJpYW50KCEhZnJvbUNvbG9yVHlwZSwgbm90QW5pbWF0YWJsZShmcm9tKSk7XG4gICAgaW52YXJpYW50KCEhdG9Db2xvclR5cGUsIG5vdEFuaW1hdGFibGUodG8pKTtcbiAgICBsZXQgZnJvbUNvbG9yID0gZnJvbUNvbG9yVHlwZS5wYXJzZShmcm9tKTtcbiAgICBsZXQgdG9Db2xvciA9IHRvQ29sb3JUeXBlLnBhcnNlKHRvKTtcbiAgICBpZiAoZnJvbUNvbG9yVHlwZSA9PT0gaHNsYSkge1xuICAgICAgICBmcm9tQ29sb3IgPSBoc2xhVG9SZ2JhKGZyb21Db2xvcik7XG4gICAgICAgIGZyb21Db2xvclR5cGUgPSByZ2JhO1xuICAgIH1cbiAgICBpZiAodG9Db2xvclR5cGUgPT09IGhzbGEpIHtcbiAgICAgICAgdG9Db2xvciA9IGhzbGFUb1JnYmEodG9Db2xvcik7XG4gICAgICAgIHRvQ29sb3JUeXBlID0gcmdiYTtcbiAgICB9XG4gICAgY29uc3QgYmxlbmRlZCA9IE9iamVjdC5hc3NpZ24oe30sIGZyb21Db2xvcik7XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJsZW5kZWQpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiYWxwaGFcIikge1xuICAgICAgICAgICAgICAgIGJsZW5kZWRba2V5XSA9IG1peExpbmVhckNvbG9yKGZyb21Db2xvcltrZXldLCB0b0NvbG9yW2tleV0sIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsZW5kZWQuYWxwaGEgPSBtaXgoZnJvbUNvbG9yLmFscGhhLCB0b0NvbG9yLmFscGhhLCB2KTtcbiAgICAgICAgcmV0dXJuIGZyb21Db2xvclR5cGUudHJhbnNmb3JtKGJsZW5kZWQpO1xuICAgIH07XG59O1xuXG5leHBvcnQgeyBtaXhDb2xvciwgbWl4TGluZWFyQ29sb3IgfTtcbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IGhleCB9IGZyb20gJy4vaGV4Lm1qcyc7XG5pbXBvcnQgeyBoc2xhIH0gZnJvbSAnLi9oc2xhLm1qcyc7XG5pbXBvcnQgeyByZ2JhIH0gZnJvbSAnLi9yZ2JhLm1qcyc7XG5cbmNvbnN0IGNvbG9yID0ge1xuICAgIHRlc3Q6ICh2KSA9PiByZ2JhLnRlc3QodikgfHwgaGV4LnRlc3QodikgfHwgaHNsYS50ZXN0KHYpLFxuICAgIHBhcnNlOiAodikgPT4ge1xuICAgICAgICBpZiAocmdiYS50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmdiYS5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoc2xhLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2xhLnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhleC5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNmb3JtOiAodikgPT4ge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodilcbiAgICAgICAgICAgID8gdlxuICAgICAgICAgICAgOiB2Lmhhc093blByb3BlcnR5KCdyZWQnKVxuICAgICAgICAgICAgICAgID8gcmdiYS50cmFuc2Zvcm0odilcbiAgICAgICAgICAgICAgICA6IGhzbGEudHJhbnNmb3JtKHYpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb2xvciB9O1xuIiwiaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGZsb2F0UmVnZXgsIGNvbG9yUmVnZXgsIHNhbml0aXplIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcblxuY29uc3QgY29sb3JUb2tlbiA9ICcke2N9JztcbmNvbnN0IG51bWJlclRva2VuID0gJyR7bn0nO1xuZnVuY3Rpb24gdGVzdCh2KSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHJldHVybiAoaXNOYU4odikgJiZcbiAgICAgICAgaXNTdHJpbmcodikgJiZcbiAgICAgICAgKChfYiA9IChfYSA9IHYubWF0Y2goZmxvYXRSZWdleCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApICsgKChfZCA9IChfYyA9IHYubWF0Y2goY29sb3JSZWdleCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sZW5ndGgpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDApID4gMCk7XG59XG5mdW5jdGlvbiBhbmFseXNlKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKVxuICAgICAgICB2ID0gYCR7dn1gO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGxldCBudW1Db2xvcnMgPSAwO1xuICAgIGNvbnN0IGNvbG9ycyA9IHYubWF0Y2goY29sb3JSZWdleCk7XG4gICAgaWYgKGNvbG9ycykge1xuICAgICAgICBudW1Db2xvcnMgPSBjb2xvcnMubGVuZ3RoO1xuICAgICAgICB2ID0gdi5yZXBsYWNlKGNvbG9yUmVnZXgsIGNvbG9yVG9rZW4pO1xuICAgICAgICB2YWx1ZXMucHVzaCguLi5jb2xvcnMubWFwKGNvbG9yLnBhcnNlKSk7XG4gICAgfVxuICAgIGNvbnN0IG51bWJlcnMgPSB2Lm1hdGNoKGZsb2F0UmVnZXgpO1xuICAgIGlmIChudW1iZXJzKSB7XG4gICAgICAgIHYgPSB2LnJlcGxhY2UoZmxvYXRSZWdleCwgbnVtYmVyVG9rZW4pO1xuICAgICAgICB2YWx1ZXMucHVzaCguLi5udW1iZXJzLm1hcChudW1iZXIucGFyc2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWVzLCBudW1Db2xvcnMsIHRva2VuaXNlZDogdiB9O1xufVxuZnVuY3Rpb24gcGFyc2Uodikge1xuICAgIHJldHVybiBhbmFseXNlKHYpLnZhbHVlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZm9ybWVyKHYpIHtcbiAgICBjb25zdCB7IHZhbHVlcywgbnVtQ29sb3JzLCB0b2tlbmlzZWQgfSA9IGFuYWx5c2Uodik7XG4gICAgY29uc3QgbnVtVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuaXNlZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoaSA8IG51bUNvbG9ycyA/IGNvbG9yVG9rZW4gOiBudW1iZXJUb2tlbiwgaSA8IG51bUNvbG9ycyA/IGNvbG9yLnRyYW5zZm9ybSh2W2ldKSA6IHNhbml0aXplKHZbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5jb25zdCBjb252ZXJ0TnVtYmVyc1RvWmVybyA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgPyAwIDogdjtcbmZ1bmN0aW9uIGdldEFuaW1hdGFibGVOb25lKHYpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZSh2KTtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVRyYW5zZm9ybWVyKHYpO1xuICAgIHJldHVybiB0cmFuc2Zvcm1lcihwYXJzZWQubWFwKGNvbnZlcnROdW1iZXJzVG9aZXJvKSk7XG59XG5jb25zdCBjb21wbGV4ID0geyB0ZXN0LCBwYXJzZSwgY3JlYXRlVHJhbnNmb3JtZXIsIGdldEFuaW1hdGFibGVOb25lIH07XG5cbmV4cG9ydCB7IGNvbXBsZXggfTtcbiIsImNvbnN0IHplcm9Qb2ludCA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMFxufTtcbmNvbnN0IGlzTnVtID0gKHYpID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJztcblxuZXhwb3J0IHsgaXNOdW0sIHplcm9Qb2ludCB9O1xuIiwiY29uc3QgY29tYmluZUZ1bmN0aW9ucyA9IChhLCBiKSA9PiAodikgPT4gYihhKHYpKTtcbmNvbnN0IHBpcGUgPSAoLi4udHJhbnNmb3JtZXJzKSA9PiB0cmFuc2Zvcm1lcnMucmVkdWNlKGNvbWJpbmVGdW5jdGlvbnMpO1xuXG5leHBvcnQgeyBwaXBlIH07XG4iLCJpbXBvcnQgeyBjb21wbGV4LCBjb2xvciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvciB9IGZyb20gJy4vbWl4LWNvbG9yLm1qcyc7XG5pbXBvcnQgeyBpc051bSB9IGZyb20gJy4vaW5jLm1qcyc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnLi9waXBlLm1qcyc7XG5pbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5cbmZ1bmN0aW9uIGdldE1peGVyKG9yaWdpbiwgdGFyZ2V0KSB7XG4gICAgaWYgKGlzTnVtKG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuICh2KSA9PiBtaXgob3JpZ2luLCB0YXJnZXQsIHYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvci50ZXN0KG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuIG1peENvbG9yKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtaXhDb21wbGV4KG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59XG5jb25zdCBtaXhBcnJheSA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IFsuLi5mcm9tXTtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSBvdXRwdXQubGVuZ3RoO1xuICAgIGNvbnN0IGJsZW5kVmFsdWUgPSBmcm9tLm1hcCgoZnJvbVRoaXMsIGkpID0+IGdldE1peGVyKGZyb21UaGlzLCB0b1tpXSkpO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXRbaV0gPSBibGVuZFZhbHVlW2ldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG5jb25zdCBtaXhPYmplY3QgPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbiksIHRhcmdldCk7XG4gICAgY29uc3QgYmxlbmRWYWx1ZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG91dHB1dCkge1xuICAgICAgICBpZiAob3JpZ2luW2tleV0gIT09IHVuZGVmaW5lZCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBibGVuZFZhbHVlW2tleV0gPSBnZXRNaXhlcihvcmlnaW5ba2V5XSwgdGFyZ2V0W2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBibGVuZFZhbHVlKSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IGJsZW5kVmFsdWVba2V5XSh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59O1xuZnVuY3Rpb24gYW5hbHlzZSh2YWx1ZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IGNvbXBsZXgucGFyc2UodmFsdWUpO1xuICAgIGNvbnN0IG51bVZhbHVlcyA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IG51bU51bWJlcnMgPSAwO1xuICAgIGxldCBudW1SR0IgPSAwO1xuICAgIGxldCBudW1IU0wgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgaWYgKG51bU51bWJlcnMgfHwgdHlwZW9mIHBhcnNlZFtpXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgbnVtTnVtYmVycysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhcnNlZFtpXS5odWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG51bUhTTCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbnVtUkdCKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcGFyc2VkLCBudW1OdW1iZXJzLCBudW1SR0IsIG51bUhTTCB9O1xufVxuY29uc3QgbWl4Q29tcGxleCA9IChvcmlnaW4sIHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gY29tcGxleC5jcmVhdGVUcmFuc2Zvcm1lcih0YXJnZXQpO1xuICAgIGNvbnN0IG9yaWdpblN0YXRzID0gYW5hbHlzZShvcmlnaW4pO1xuICAgIGNvbnN0IHRhcmdldFN0YXRzID0gYW5hbHlzZSh0YXJnZXQpO1xuICAgIGNvbnN0IGNhbkludGVycG9sYXRlID0gb3JpZ2luU3RhdHMubnVtSFNMID09PSB0YXJnZXRTdGF0cy5udW1IU0wgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtUkdCID09PSB0YXJnZXRTdGF0cy5udW1SR0IgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtTnVtYmVycyA+PSB0YXJnZXRTdGF0cy5udW1OdW1iZXJzO1xuICAgIGlmIChjYW5JbnRlcnBvbGF0ZSkge1xuICAgICAgICByZXR1cm4gcGlwZShtaXhBcnJheShvcmlnaW5TdGF0cy5wYXJzZWQsIHRhcmdldFN0YXRzLnBhcnNlZCksIHRlbXBsYXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdhcm5pbmcodHJ1ZSwgYENvbXBsZXggdmFsdWVzICcke29yaWdpbn0nIGFuZCAnJHt0YXJnZXR9JyB0b28gZGlmZmVyZW50IHRvIG1peC4gRW5zdXJlIGFsbCBjb2xvcnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUsIGFuZCB0aGF0IGVhY2ggY29udGFpbnMgdGhlIHNhbWUgcXVhbnRpdHkgb2YgbnVtYmVyIGFuZCBjb2xvciB2YWx1ZXMuIEZhbGxpbmcgYmFjayB0byBpbnN0YW50IHRyYW5zaXRpb24uYCk7XG4gICAgICAgIHJldHVybiAocCkgPT4gYCR7cCA+IDAgPyB0YXJnZXQgOiBvcmlnaW59YDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBtaXhBcnJheSwgbWl4Q29tcGxleCwgbWl4T2JqZWN0IH07XG4iLCJpbXBvcnQgeyBwcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MubWpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4vbWl4Lm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvciB9IGZyb20gJy4vbWl4LWNvbG9yLm1qcyc7XG5pbXBvcnQgeyBtaXhDb21wbGV4LCBtaXhBcnJheSwgbWl4T2JqZWN0IH0gZnJvbSAnLi9taXgtY29tcGxleC5tanMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vY2xhbXAubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuL3BpcGUubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuXG5jb25zdCBtaXhOdW1iZXIgPSAoZnJvbSwgdG8pID0+IChwKSA9PiBtaXgoZnJvbSwgdG8sIHApO1xuZnVuY3Rpb24gZGV0ZWN0TWl4ZXJGYWN0b3J5KHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBtaXhOdW1iZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoY29sb3IudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1peENvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1peENvbXBsZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gbWl4QXJyYXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbWl4T2JqZWN0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU1peGVycyhvdXRwdXQsIGVhc2UsIGN1c3RvbU1peGVyKSB7XG4gICAgY29uc3QgbWl4ZXJzID0gW107XG4gICAgY29uc3QgbWl4ZXJGYWN0b3J5ID0gY3VzdG9tTWl4ZXIgfHwgZGV0ZWN0TWl4ZXJGYWN0b3J5KG91dHB1dFswXSk7XG4gICAgY29uc3QgbnVtTWl4ZXJzID0gb3V0cHV0Lmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1NaXhlcnM7IGkrKykge1xuICAgICAgICBsZXQgbWl4ZXIgPSBtaXhlckZhY3Rvcnkob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdKTtcbiAgICAgICAgaWYgKGVhc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2VbaV0gOiBlYXNlO1xuICAgICAgICAgICAgbWl4ZXIgPSBwaXBlKGVhc2luZ0Z1bmN0aW9uLCBtaXhlcik7XG4gICAgICAgIH1cbiAgICAgICAgbWl4ZXJzLnB1c2gobWl4ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWl4ZXJzO1xufVxuZnVuY3Rpb24gZmFzdEludGVycG9sYXRlKFtmcm9tLCB0b10sIFttaXhlcl0pIHtcbiAgICByZXR1cm4gKHYpID0+IG1peGVyKHByb2dyZXNzKGZyb20sIHRvLCB2KSk7XG59XG5mdW5jdGlvbiBzbG93SW50ZXJwb2xhdGUoaW5wdXQsIG1peGVycykge1xuICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIGNvbnN0IGxhc3RJbnB1dEluZGV4ID0gaW5wdXRMZW5ndGggLSAxO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICBsZXQgbWl4ZXJJbmRleCA9IDA7XG4gICAgICAgIGxldCBmb3VuZE1peGVySW5kZXggPSBmYWxzZTtcbiAgICAgICAgaWYgKHYgPD0gaW5wdXRbMF0pIHtcbiAgICAgICAgICAgIGZvdW5kTWl4ZXJJbmRleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA+PSBpbnB1dFtsYXN0SW5wdXRJbmRleF0pIHtcbiAgICAgICAgICAgIG1peGVySW5kZXggPSBsYXN0SW5wdXRJbmRleCAtIDE7XG4gICAgICAgICAgICBmb3VuZE1peGVySW5kZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZm91bmRNaXhlckluZGV4KSB7XG4gICAgICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGlucHV0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRbaV0gPiB2IHx8IGkgPT09IGxhc3RJbnB1dEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1peGVySW5kZXggPSBpIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9ncmVzc0luUmFuZ2UgPSBwcm9ncmVzcyhpbnB1dFttaXhlckluZGV4XSwgaW5wdXRbbWl4ZXJJbmRleCArIDFdLCB2KTtcbiAgICAgICAgcmV0dXJuIG1peGVyc1ttaXhlckluZGV4XShwcm9ncmVzc0luUmFuZ2UpO1xuICAgIH07XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShpbnB1dCwgb3V0cHV0LCB7IGNsYW1wOiBpc0NsYW1wID0gdHJ1ZSwgZWFzZSwgbWl4ZXIgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgaW52YXJpYW50KGlucHV0TGVuZ3RoID09PSBvdXRwdXQubGVuZ3RoLCAnQm90aCBpbnB1dCBhbmQgb3V0cHV0IHJhbmdlcyBtdXN0IGJlIHRoZSBzYW1lIGxlbmd0aCcpO1xuICAgIGludmFyaWFudCghZWFzZSB8fCAhQXJyYXkuaXNBcnJheShlYXNlKSB8fCBlYXNlLmxlbmd0aCA9PT0gaW5wdXRMZW5ndGggLSAxLCAnQXJyYXkgb2YgZWFzaW5nIGZ1bmN0aW9ucyBtdXN0IGJlIG9mIGxlbmd0aCBgaW5wdXQubGVuZ3RoIC0gMWAsIGFzIGl0IGFwcGxpZXMgdG8gdGhlIHRyYW5zaXRpb25zICoqYmV0d2VlbioqIHRoZSBkZWZpbmVkIHZhbHVlcy4nKTtcbiAgICBpZiAoaW5wdXRbMF0gPiBpbnB1dFtpbnB1dExlbmd0aCAtIDFdKSB7XG4gICAgICAgIGlucHV0ID0gW10uY29uY2F0KGlucHV0KTtcbiAgICAgICAgb3V0cHV0ID0gW10uY29uY2F0KG91dHB1dCk7XG4gICAgICAgIGlucHV0LnJldmVyc2UoKTtcbiAgICAgICAgb3V0cHV0LnJldmVyc2UoKTtcbiAgICB9XG4gICAgY29uc3QgbWl4ZXJzID0gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgbWl4ZXIpO1xuICAgIGNvbnN0IGludGVycG9sYXRvciA9IGlucHV0TGVuZ3RoID09PSAyXG4gICAgICAgID8gZmFzdEludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpXG4gICAgICAgIDogc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpO1xuICAgIHJldHVybiBpc0NsYW1wXG4gICAgICAgID8gKHYpID0+IGludGVycG9sYXRvcihjbGFtcChpbnB1dFswXSwgaW5wdXRbaW5wdXRMZW5ndGggLSAxXSwgdikpXG4gICAgICAgIDogaW50ZXJwb2xhdG9yO1xufVxuXG5leHBvcnQgeyBpbnRlcnBvbGF0ZSB9O1xuIiwiY29uc3QgcmV2ZXJzZUVhc2luZyA9IGVhc2luZyA9PiBwID0+IDEgLSBlYXNpbmcoMSAtIHApO1xuY29uc3QgbWlycm9yRWFzaW5nID0gZWFzaW5nID0+IHAgPT4gcCA8PSAwLjUgPyBlYXNpbmcoMiAqIHApIC8gMiA6ICgyIC0gZWFzaW5nKDIgKiAoMSAtIHApKSkgLyAyO1xuY29uc3QgY3JlYXRlRXhwb0luID0gKHBvd2VyKSA9PiBwID0+IE1hdGgucG93KHAsIHBvd2VyKTtcbmNvbnN0IGNyZWF0ZUJhY2tJbiA9IChwb3dlcikgPT4gcCA9PiBwICogcCAqICgocG93ZXIgKyAxKSAqIHAgLSBwb3dlcik7XG5jb25zdCBjcmVhdGVBbnRpY2lwYXRlID0gKHBvd2VyKSA9PiB7XG4gICAgY29uc3QgYmFja0Vhc2luZyA9IGNyZWF0ZUJhY2tJbihwb3dlcik7XG4gICAgcmV0dXJuIHAgPT4gKHAgKj0gMikgPCAxXG4gICAgICAgID8gMC41ICogYmFja0Vhc2luZyhwKVxuICAgICAgICA6IDAuNSAqICgyIC0gTWF0aC5wb3coMiwgLTEwICogKHAgLSAxKSkpO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQW50aWNpcGF0ZSwgY3JlYXRlQmFja0luLCBjcmVhdGVFeHBvSW4sIG1pcnJvckVhc2luZywgcmV2ZXJzZUVhc2luZyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlRXhwb0luLCByZXZlcnNlRWFzaW5nLCBtaXJyb3JFYXNpbmcsIGNyZWF0ZUJhY2tJbiwgY3JlYXRlQW50aWNpcGF0ZSB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgREVGQVVMVF9PVkVSU0hPT1RfU1RSRU5HVEggPSAxLjUyNTtcbmNvbnN0IEJPVU5DRV9GSVJTVF9USFJFU0hPTEQgPSA0LjAgLyAxMS4wO1xuY29uc3QgQk9VTkNFX1NFQ09ORF9USFJFU0hPTEQgPSA4LjAgLyAxMS4wO1xuY29uc3QgQk9VTkNFX1RISVJEX1RIUkVTSE9MRCA9IDkuMCAvIDEwLjA7XG5jb25zdCBsaW5lYXIgPSBwID0+IHA7XG5jb25zdCBlYXNlSW4gPSBjcmVhdGVFeHBvSW4oMik7XG5jb25zdCBlYXNlT3V0ID0gcmV2ZXJzZUVhc2luZyhlYXNlSW4pO1xuY29uc3QgZWFzZUluT3V0ID0gbWlycm9yRWFzaW5nKGVhc2VJbik7XG5jb25zdCBjaXJjSW4gPSBwID0+IDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpO1xuY29uc3QgY2lyY091dCA9IHJldmVyc2VFYXNpbmcoY2lyY0luKTtcbmNvbnN0IGNpcmNJbk91dCA9IG1pcnJvckVhc2luZyhjaXJjT3V0KTtcbmNvbnN0IGJhY2tJbiA9IGNyZWF0ZUJhY2tJbihERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG5jb25zdCBiYWNrT3V0ID0gcmV2ZXJzZUVhc2luZyhiYWNrSW4pO1xuY29uc3QgYmFja0luT3V0ID0gbWlycm9yRWFzaW5nKGJhY2tJbik7XG5jb25zdCBhbnRpY2lwYXRlID0gY3JlYXRlQW50aWNpcGF0ZShERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG5jb25zdCBjYSA9IDQzNTYuMCAvIDM2MS4wO1xuY29uc3QgY2IgPSAzNTQ0Mi4wIC8gMTgwNS4wO1xuY29uc3QgY2MgPSAxNjA2MS4wIC8gMTgwNS4wO1xuY29uc3QgYm91bmNlT3V0ID0gKHApID0+IHtcbiAgICBpZiAocCA9PT0gMSB8fCBwID09PSAwKVxuICAgICAgICByZXR1cm4gcDtcbiAgICBjb25zdCBwMiA9IHAgKiBwO1xuICAgIHJldHVybiBwIDwgQk9VTkNFX0ZJUlNUX1RIUkVTSE9MRFxuICAgICAgICA/IDcuNTYyNSAqIHAyXG4gICAgICAgIDogcCA8IEJPVU5DRV9TRUNPTkRfVEhSRVNIT0xEXG4gICAgICAgICAgICA/IDkuMDc1ICogcDIgLSA5LjkgKiBwICsgMy40XG4gICAgICAgICAgICA6IHAgPCBCT1VOQ0VfVEhJUkRfVEhSRVNIT0xEXG4gICAgICAgICAgICAgICAgPyBjYSAqIHAyIC0gY2IgKiBwICsgY2NcbiAgICAgICAgICAgICAgICA6IDEwLjggKiBwICogcCAtIDIwLjUyICogcCArIDEwLjcyO1xufTtcbmNvbnN0IGJvdW5jZUluID0gcmV2ZXJzZUVhc2luZyhib3VuY2VPdXQpO1xuY29uc3QgYm91bmNlSW5PdXQgPSAocCkgPT4gcCA8IDAuNVxuICAgID8gMC41ICogKDEuMCAtIGJvdW5jZU91dCgxLjAgLSBwICogMi4wKSlcbiAgICA6IDAuNSAqIGJvdW5jZU91dChwICogMi4wIC0gMS4wKSArIDAuNTtcblxuZXhwb3J0IHsgYW50aWNpcGF0ZSwgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQsIGxpbmVhciB9O1xuIiwiaW1wb3J0IHsgaW50ZXJwb2xhdGUgfSBmcm9tICcuLi8uLi91dGlscy9pbnRlcnBvbGF0ZS5tanMnO1xuaW1wb3J0IHsgZWFzZUluT3V0IH0gZnJvbSAnLi4vLi4vZWFzaW5nL2luZGV4Lm1qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRFYXNpbmcodmFsdWVzLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdmFsdWVzLm1hcCgoKSA9PiBlYXNpbmcgfHwgZWFzZUluT3V0KS5zcGxpY2UoMCwgdmFsdWVzLmxlbmd0aCAtIDEpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9mZnNldCh2YWx1ZXMpIHtcbiAgICBjb25zdCBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiB2YWx1ZXMubWFwKChfdmFsdWUsIGkpID0+IGkgIT09IDAgPyBpIC8gKG51bVZhbHVlcyAtIDEpIDogMCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2Zmc2V0VG9UaW1lcyhvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG9mZnNldC5tYXAoKG8pID0+IG8gKiBkdXJhdGlvbik7XG59XG5mdW5jdGlvbiBrZXlmcmFtZXMoeyBmcm9tID0gMCwgdG8gPSAxLCBlYXNlLCBvZmZzZXQsIGR1cmF0aW9uID0gMzAwLCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGNvbnN0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodG8pID8gdG8gOiBbZnJvbSwgdG9dO1xuICAgIGNvbnN0IHRpbWVzID0gY29udmVydE9mZnNldFRvVGltZXMob2Zmc2V0ICYmIG9mZnNldC5sZW5ndGggPT09IHZhbHVlcy5sZW5ndGhcbiAgICAgICAgPyBvZmZzZXRcbiAgICAgICAgOiBkZWZhdWx0T2Zmc2V0KHZhbHVlcyksIGR1cmF0aW9uKTtcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnRlcnBvbGF0b3IoKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aW1lcywgdmFsdWVzLCB7XG4gICAgICAgICAgICBlYXNlOiBBcnJheS5pc0FycmF5KGVhc2UpID8gZWFzZSA6IGRlZmF1bHRFYXNpbmcodmFsdWVzLCBlYXNlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnRlcnBvbGF0b3IgPSBjcmVhdGVJbnRlcnBvbGF0b3IoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBpbnRlcnBvbGF0b3IodCk7XG4gICAgICAgICAgICBzdGF0ZS5kb25lID0gdCA+PSBkdXJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcFRhcmdldDogKCkgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRvciA9IGNyZWF0ZUludGVycG9sYXRvcigpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRPZmZzZXRUb1RpbWVzLCBkZWZhdWx0RWFzaW5nLCBkZWZhdWx0T2Zmc2V0LCBrZXlmcmFtZXMgfTtcbiIsImltcG9ydCB7IHNwcmluZyB9IGZyb20gJy4uL2dlbmVyYXRvcnMvc3ByaW5nLm1qcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICcuLi9nZW5lcmF0b3JzL2tleWZyYW1lcy5tanMnO1xuaW1wb3J0IHsgZGVjYXkgfSBmcm9tICcuLi9nZW5lcmF0b3JzL2RlY2F5Lm1qcyc7XG5cbmNvbnN0IHR5cGVzID0geyBrZXlmcmFtZXMsIHNwcmluZywgZGVjYXkgfTtcbmZ1bmN0aW9uIGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zKGNvbmZpZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy50bykpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXNbY29uZmlnLnR5cGVdKSB7XG4gICAgICAgIHJldHVybiB0eXBlc1tjb25maWcudHlwZV07XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKGNvbmZpZykpO1xuICAgIGlmIChrZXlzLmhhcyhcImVhc2VcIikgfHxcbiAgICAgICAgKGtleXMuaGFzKFwiZHVyYXRpb25cIikgJiYgIWtleXMuaGFzKFwiZGFtcGluZ1JhdGlvXCIpKSkge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXlzLmhhcyhcImRhbXBpbmdSYXRpb1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcInN0aWZmbmVzc1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcIm1hc3NcIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJkYW1waW5nXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwicmVzdFNwZWVkXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwicmVzdERlbHRhXCIpKSB7XG4gICAgICAgIHJldHVybiBzcHJpbmc7XG4gICAgfVxuICAgIHJldHVybiBrZXlmcmFtZXM7XG59XG5cbmV4cG9ydCB7IGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zIH07XG4iLCJmdW5jdGlvbiBkZWNheSh7IHZlbG9jaXR5ID0gMCwgZnJvbSA9IDAsIHBvd2VyID0gMC44LCB0aW1lQ29uc3RhbnQgPSAzNTAsIHJlc3REZWx0YSA9IDAuNSwgbW9kaWZ5VGFyZ2V0LCB9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIGxldCBhbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIGNvbnN0IGlkZWFsID0gZnJvbSArIGFtcGxpdHVkZTtcbiAgICBjb25zdCB0YXJnZXQgPSBtb2RpZnlUYXJnZXQgPT09IHVuZGVmaW5lZCA/IGlkZWFsIDogbW9kaWZ5VGFyZ2V0KGlkZWFsKTtcbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gZnJvbTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiAodCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSAtYW1wbGl0dWRlICogTWF0aC5leHAoLXQgLyB0aW1lQ29uc3RhbnQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9ICEoZGVsdGEgPiByZXN0RGVsdGEgfHwgZGVsdGEgPCAtcmVzdERlbHRhKTtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRhcmdldCA6IHRhcmdldCArIGRlbHRhO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBmbGlwVGFyZ2V0OiAoKSA9PiB7IH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVjYXkgfTtcbiIsImZ1bmN0aW9uIGxvb3BFbGFwc2VkKGVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSA9IDApIHtcbiAgICByZXR1cm4gZWxhcHNlZCAtIGR1cmF0aW9uIC0gZGVsYXk7XG59XG5mdW5jdGlvbiByZXZlcnNlRWxhcHNlZChlbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXkgPSAwLCBpc0ZvcndhcmRQbGF5YmFjayA9IHRydWUpIHtcbiAgICByZXR1cm4gaXNGb3J3YXJkUGxheWJhY2tcbiAgICAgICAgPyBsb29wRWxhcHNlZChkdXJhdGlvbiArIC1lbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXkpXG4gICAgICAgIDogZHVyYXRpb24gLSAoZWxhcHNlZCAtIGR1cmF0aW9uKSArIGRlbGF5O1xufVxuZnVuY3Rpb24gaGFzUmVwZWF0RGVsYXlFbGFwc2VkKGVsYXBzZWQsIGR1cmF0aW9uLCBkZWxheSwgaXNGb3J3YXJkUGxheWJhY2spIHtcbiAgICByZXR1cm4gaXNGb3J3YXJkUGxheWJhY2sgPyBlbGFwc2VkID49IGR1cmF0aW9uICsgZGVsYXkgOiBlbGFwc2VkIDw9IC1kZWxheTtcbn1cblxuZXhwb3J0IHsgaGFzUmVwZWF0RGVsYXlFbGFwc2VkLCBsb29wRWxhcHNlZCwgcmV2ZXJzZUVsYXBzZWQgfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zIH0gZnJvbSAnLi91dGlscy9kZXRlY3QtYW5pbWF0aW9uLWZyb20tb3B0aW9ucy5tanMnO1xuaW1wb3J0IHN5bmMsIHsgY2FuY2VsU3luYyB9IGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uL3V0aWxzL2ludGVycG9sYXRlLm1qcyc7XG5pbXBvcnQgeyBoYXNSZXBlYXREZWxheUVsYXBzZWQsIHJldmVyc2VFbGFwc2VkLCBsb29wRWxhcHNlZCB9IGZyb20gJy4vdXRpbHMvZWxhcHNlZC5tanMnO1xuXG5jb25zdCBmcmFtZXN5bmMgPSAodXBkYXRlKSA9PiB7XG4gICAgY29uc3QgcGFzc1RpbWVzdGFtcCA9ICh7IGRlbHRhIH0pID0+IHVwZGF0ZShkZWx0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6ICgpID0+IHN5bmMudXBkYXRlKHBhc3NUaW1lc3RhbXAsIHRydWUpLFxuICAgICAgICBzdG9wOiAoKSA9PiBjYW5jZWxTeW5jLnVwZGF0ZShwYXNzVGltZXN0YW1wKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGFuaW1hdGUoX2EpIHtcbiAgICB2YXIgX2IsIF9jO1xuICAgIHZhciB7IGZyb20sIGF1dG9wbGF5ID0gdHJ1ZSwgZHJpdmVyID0gZnJhbWVzeW5jLCBlbGFwc2VkID0gMCwgcmVwZWF0OiByZXBlYXRNYXggPSAwLCByZXBlYXRUeXBlID0gXCJsb29wXCIsIHJlcGVhdERlbGF5ID0gMCwgb25QbGF5LCBvblN0b3AsIG9uQ29tcGxldGUsIG9uUmVwZWF0LCBvblVwZGF0ZSB9ID0gX2EsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImZyb21cIiwgXCJhdXRvcGxheVwiLCBcImRyaXZlclwiLCBcImVsYXBzZWRcIiwgXCJyZXBlYXRcIiwgXCJyZXBlYXRUeXBlXCIsIFwicmVwZWF0RGVsYXlcIiwgXCJvblBsYXlcIiwgXCJvblN0b3BcIiwgXCJvbkNvbXBsZXRlXCIsIFwib25SZXBlYXRcIiwgXCJvblVwZGF0ZVwiXSk7XG4gICAgbGV0IHsgdG8gfSA9IG9wdGlvbnM7XG4gICAgbGV0IGRyaXZlckNvbnRyb2xzO1xuICAgIGxldCByZXBlYXRDb3VudCA9IDA7XG4gICAgbGV0IGNvbXB1dGVkRHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuICAgIGxldCBsYXRlc3Q7XG4gICAgbGV0IGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICBsZXQgaXNGb3J3YXJkUGxheWJhY2sgPSB0cnVlO1xuICAgIGxldCBpbnRlcnBvbGF0ZUZyb21OdW1iZXI7XG4gICAgY29uc3QgYW5pbWF0b3IgPSBkZXRlY3RBbmltYXRpb25Gcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICBpZiAoKF9jID0gKF9iID0gYW5pbWF0b3IpLm5lZWRzSW50ZXJwb2xhdGlvbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIGZyb20sIHRvKSkge1xuICAgICAgICBpbnRlcnBvbGF0ZUZyb21OdW1iZXIgPSBpbnRlcnBvbGF0ZShbMCwgMTAwXSwgW2Zyb20sIHRvXSwge1xuICAgICAgICAgICAgY2xhbXA6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgIHRvID0gMTAwO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRvcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZyb20sIHRvIH0pKTtcbiAgICBmdW5jdGlvbiByZXBlYXQoKSB7XG4gICAgICAgIHJlcGVhdENvdW50Kys7XG4gICAgICAgIGlmIChyZXBlYXRUeXBlID09PSBcInJldmVyc2VcIikge1xuICAgICAgICAgICAgaXNGb3J3YXJkUGxheWJhY2sgPSByZXBlYXRDb3VudCAlIDIgPT09IDA7XG4gICAgICAgICAgICBlbGFwc2VkID0gcmV2ZXJzZUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsYXBzZWQgPSBsb29wRWxhcHNlZChlbGFwc2VkLCBjb21wdXRlZER1cmF0aW9uLCByZXBlYXREZWxheSk7XG4gICAgICAgICAgICBpZiAocmVwZWF0VHlwZSA9PT0gXCJtaXJyb3JcIilcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZmxpcFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgb25SZXBlYXQgJiYgb25SZXBlYXQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAoIWlzRm9yd2FyZFBsYXliYWNrKVxuICAgICAgICAgICAgZGVsdGEgPSAtZGVsdGE7XG4gICAgICAgIGVsYXBzZWQgKz0gZGVsdGE7XG4gICAgICAgIGlmICghaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhbmltYXRpb24ubmV4dChNYXRoLm1heCgwLCBlbGFwc2VkKSk7XG4gICAgICAgICAgICBsYXRlc3QgPSBzdGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZUZyb21OdW1iZXIpXG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gaW50ZXJwb2xhdGVGcm9tTnVtYmVyKGxhdGVzdCk7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gaXNGb3J3YXJkUGxheWJhY2sgPyBzdGF0ZS5kb25lIDogZWxhcHNlZCA8PSAwO1xuICAgICAgICB9XG4gICAgICAgIG9uVXBkYXRlID09PSBudWxsIHx8IG9uVXBkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblVwZGF0ZShsYXRlc3QpO1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGNvbXB1dGVkRHVyYXRpb24gIT09IG51bGwgJiYgY29tcHV0ZWREdXJhdGlvbiAhPT0gdm9pZCAwID8gY29tcHV0ZWREdXJhdGlvbiA6IChjb21wdXRlZER1cmF0aW9uID0gZWxhcHNlZCk7XG4gICAgICAgICAgICBpZiAocmVwZWF0Q291bnQgPCByZXBlYXRNYXgpIHtcbiAgICAgICAgICAgICAgICBoYXNSZXBlYXREZWxheUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKSAmJiByZXBlYXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgb25QbGF5ID09PSBudWxsIHx8IG9uUGxheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25QbGF5KCk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzID0gZHJpdmVyKHVwZGF0ZSk7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0YXJ0KCk7XG4gICAgfVxuICAgIGF1dG9wbGF5ICYmIHBsYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBvblN0b3AgPT09IG51bGwgfHwgb25TdG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblN0b3AoKTtcbiAgICAgICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmltYXRlIH07XG4iLCIvKipcbiAqIENvbnZlcnRzIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gKlxuICogQHBhcmFtIHNlY29uZHMgLSBUaW1lIGluIHNlY29uZHMuXG4gKiBAcmV0dXJuIG1pbGxpc2Vjb25kcyAtIENvbnZlcnRlZCB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xudmFyIHNlY29uZHNUb01pbGxpc2Vjb25kcyA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7IHJldHVybiBzZWNvbmRzICogMTAwMDsgfTtcblxuZXhwb3J0IHsgc2Vjb25kc1RvTWlsbGlzZWNvbmRzIH07XG4iLCJpbXBvcnQgeyBsaW5lYXIgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5cbmNvbnN0IGEgPSAoYTEsIGEyKSA9PiAxLjAgLSAzLjAgKiBhMiArIDMuMCAqIGExO1xuY29uc3QgYiA9IChhMSwgYTIpID0+IDMuMCAqIGEyIC0gNi4wICogYTE7XG5jb25zdCBjID0gKGExKSA9PiAzLjAgKiBhMTtcbmNvbnN0IGNhbGNCZXppZXIgPSAodCwgYTEsIGEyKSA9PiAoKGEoYTEsIGEyKSAqIHQgKyBiKGExLCBhMikpICogdCArIGMoYTEpKSAqIHQ7XG5jb25zdCBnZXRTbG9wZSA9ICh0LCBhMSwgYTIpID0+IDMuMCAqIGEoYTEsIGEyKSAqIHQgKiB0ICsgMi4wICogYihhMSwgYTIpICogdCArIGMoYTEpO1xuY29uc3Qgc3ViZGl2aXNpb25QcmVjaXNpb24gPSAwLjAwMDAwMDE7XG5jb25zdCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMgPSAxMDtcbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICAgIGxldCBjdXJyZW50WDtcbiAgICBsZXQgY3VycmVudFQ7XG4gICAgbGV0IGkgPSAwO1xuICAgIGRvIHtcbiAgICAgICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICAgICAgICBhQiA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IHN1YmRpdmlzaW9uUHJlY2lzaW9uICYmXG4gICAgICAgICsraSA8IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyk7XG4gICAgcmV0dXJuIGN1cnJlbnRUO1xufVxuY29uc3QgbmV3dG9uSXRlcmF0aW9ucyA9IDg7XG5jb25zdCBuZXd0b25NaW5TbG9wZSA9IDAuMDAxO1xuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXd0b25JdGVyYXRpb25zOyArK2kpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsb3BlID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xuICAgICAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgICB9XG4gICAgcmV0dXJuIGFHdWVzc1Q7XG59XG5jb25zdCBrU3BsaW5lVGFibGVTaXplID0gMTE7XG5jb25zdCBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5mdW5jdGlvbiBjdWJpY0JlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpXG4gICAgICAgIHJldHVybiBsaW5lYXI7XG4gICAgY29uc3Qgc2FtcGxlVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VEZvclgoYVgpIHtcbiAgICAgICAgbGV0IGludGVydmFsU3RhcnQgPSAwLjA7XG4gICAgICAgIGxldCBjdXJyZW50U2FtcGxlID0gMTtcbiAgICAgICAgY29uc3QgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuICAgICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgLS1jdXJyZW50U2FtcGxlO1xuICAgICAgICBjb25zdCBkaXN0ID0gKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvXG4gICAgICAgICAgICAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICAgIGNvbnN0IGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICBjb25zdCBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSBuZXd0b25NaW5TbG9wZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKHQpID0+IHQgPT09IDAgfHwgdCA9PT0gMSA/IHQgOiBjYWxjQmV6aWVyKGdldFRGb3JYKHQpLCBtWTEsIG1ZMik7XG59XG5cbmV4cG9ydCB7IGN1YmljQmV6aWVyIH07XG4iLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdoZXktbGlzdGVuJztcbmltcG9ydCB7IGN1YmljQmV6aWVyLCBsaW5lYXIsIGVhc2VJbiwgZWFzZUluT3V0LCBlYXNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGFudGljaXBhdGUsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0IH0gZnJvbSAncG9wbW90aW9uJztcblxudmFyIGVhc2luZ0xvb2t1cCA9IHtcbiAgICBsaW5lYXI6IGxpbmVhcixcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dCxcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGNpcmNJbjogY2lyY0luLFxuICAgIGNpcmNJbk91dDogY2lyY0luT3V0LFxuICAgIGNpcmNPdXQ6IGNpcmNPdXQsXG4gICAgYmFja0luOiBiYWNrSW4sXG4gICAgYmFja0luT3V0OiBiYWNrSW5PdXQsXG4gICAgYmFja091dDogYmFja091dCxcbiAgICBhbnRpY2lwYXRlOiBhbnRpY2lwYXRlLFxuICAgIGJvdW5jZUluOiBib3VuY2VJbixcbiAgICBib3VuY2VJbk91dDogYm91bmNlSW5PdXQsXG4gICAgYm91bmNlT3V0OiBib3VuY2VPdXQsXG59O1xudmFyIGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICAvLyBJZiBjdWJpYyBiZXppZXIgZGVmaW5pdGlvbiwgY3JlYXRlIGJlemllciBjdXJ2ZVxuICAgICAgICBpbnZhcmlhbnQoZGVmaW5pdGlvbi5sZW5ndGggPT09IDQsIFwiQ3ViaWMgYmV6aWVyIGFycmF5cyBtdXN0IGNvbnRhaW4gZm91ciBudW1lcmljYWwgdmFsdWVzLlwiKTtcbiAgICAgICAgdmFyIF9hID0gX19yZWFkKGRlZmluaXRpb24sIDQpLCB4MSA9IF9hWzBdLCB5MSA9IF9hWzFdLCB4MiA9IF9hWzJdLCB5MiA9IF9hWzNdO1xuICAgICAgICByZXR1cm4gY3ViaWNCZXppZXIoeDEsIHkxLCB4MiwgeTIpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBFbHNlIGxvb2t1cCBmcm9tIHRhYmxlXG4gICAgICAgIGludmFyaWFudChlYXNpbmdMb29rdXBbZGVmaW5pdGlvbl0gIT09IHVuZGVmaW5lZCwgXCJJbnZhbGlkIGVhc2luZyB0eXBlICdcIi5jb25jYXQoZGVmaW5pdGlvbiwgXCInXCIpKTtcbiAgICAgICAgcmV0dXJuIGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmluaXRpb247XG59O1xudmFyIGlzRWFzaW5nQXJyYXkgPSBmdW5jdGlvbiAoZWFzZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGVhc2UpICYmIHR5cGVvZiBlYXNlWzBdICE9PSBcIm51bWJlclwiO1xufTtcblxuZXhwb3J0IHsgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24sIGlzRWFzaW5nQXJyYXkgfTtcbiIsImltcG9ydCB7IGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbmltYXRhYmxlLiBFeGFtcGxlczpcbiAqXG4gKiDinIU6IDEwMCwgXCIxMDBweFwiLCBcIiNmZmZcIlxuICog4p2MOiBcImJsb2NrXCIsIFwidXJsKDIuanBnKVwiXG4gKiBAcGFyYW0gdmFsdWVcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIGlzQW5pbWF0YWJsZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgLy8gSWYgdGhlIGxpc3Qgb2Yga2V5cyB0YXQgbWlnaHQgYmUgbm9uLWFuaW1hdGFibGUgZ3Jvd3MsIHJlcGxhY2Ugd2l0aCBTZXRcbiAgICBpZiAoa2V5ID09PSBcInpJbmRleFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gSWYgaXQncyBhIG51bWJlciBvciBhIGtleWZyYW1lcyBhcnJheSwgd2UgY2FuIGFuaW1hdGUgaXQuIFdlIG1pZ2h0IGF0IHNvbWUgcG9pbnRcbiAgICAvLyBuZWVkIHRvIGRvIGEgZGVlcCBpc0FuaW1hdGFibGUgY2hlY2sgb2Yga2V5ZnJhbWVzLCBvciBsZXQgUG9wbW90aW9uIGhhbmRsZSB0aGlzLFxuICAgIC8vIGJ1dCBmb3Igbm93IGxldHMgbGVhdmUgaXQgbGlrZSB0aGlzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAvLyBJdCdzIGFuaW1hdGFibGUgaWYgd2UgaGF2ZSBhIHN0cmluZ1xuICAgICAgICBjb21wbGV4LnRlc3QodmFsdWUpICYmIC8vIEFuZCBpdCBjb250YWlucyBudW1iZXJzIGFuZC9vciBjb2xvcnNcbiAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpIC8vIFVubGVzcyBpdCBzdGFydHMgd2l0aCBcInVybChcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgaXNBbmltYXRhYmxlIH07XG4iLCJ2YXIgaXNLZXlmcmFtZXNUYXJnZXQgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfTtcbiIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcblxudmFyIHVuZGVyRGFtcGVkU3ByaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTAwLFxuICAgIGRhbXBpbmc6IDI1LFxuICAgIHJlc3RTcGVlZDogMTAsXG59KTsgfTtcbnZhciBjcml0aWNhbGx5RGFtcGVkU3ByaW5nID0gZnVuY3Rpb24gKHRvKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1NTAsXG4gICAgZGFtcGluZzogdG8gPT09IDAgPyAyICogTWF0aC5zcXJ0KDU1MCkgOiAzMCxcbiAgICByZXN0U3BlZWQ6IDEwLFxufSk7IH07XG52YXIgbGluZWFyVHdlZW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZWFzZTogXCJsaW5lYXJcIixcbiAgICBkdXJhdGlvbjogMC4zLFxufSk7IH07XG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24gKHZhbHVlcykgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGR1cmF0aW9uOiAwLjgsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG59KTsgfTtcbnZhciBkZWZhdWx0VHJhbnNpdGlvbnMgPSB7XG4gICAgeDogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgeTogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgejogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVYOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVZOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVaOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICBzY2FsZVg6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG4gICAgc2NhbGVZOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIHNjYWxlOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIG9wYWNpdHk6IGxpbmVhclR3ZWVuLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGluZWFyVHdlZW4sXG4gICAgY29sb3I6IGxpbmVhclR3ZWVuLFxuICAgIGRlZmF1bHQ6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG59O1xudmFyIGdldERlZmF1bHRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHZhbHVlS2V5LCB0bykge1xuICAgIHZhciB0cmFuc2l0aW9uRmFjdG9yeTtcbiAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQodG8pKSB7XG4gICAgICAgIHRyYW5zaXRpb25GYWN0b3J5ID0ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkZhY3RvcnkgPVxuICAgICAgICAgICAgZGVmYXVsdFRyYW5zaXRpb25zW3ZhbHVlS2V5XSB8fCBkZWZhdWx0VHJhbnNpdGlvbnMuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIF9fYXNzaWduKHsgdG86IHRvIH0sIHRyYW5zaXRpb25GYWN0b3J5KHRvKSk7XG59O1xuXG5leHBvcnQgeyBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLCBnZXREZWZhdWx0VHJhbnNpdGlvbiwgbGluZWFyVHdlZW4sIHVuZGVyRGFtcGVkU3ByaW5nIH07XG4iLCJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmNvbnN0IG1heERlZmF1bHRzID0gbmV3IFNldChbJ2JyaWdodG5lc3MnLCAnY29udHJhc3QnLCAnc2F0dXJhdGUnLCAnb3BhY2l0eSddKTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdEZpbHRlcih2KSB7XG4gICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSB2LnNsaWNlKDAsIC0xKS5zcGxpdCgnKCcpO1xuICAgIGlmIChuYW1lID09PSAnZHJvcC1zaGFkb3cnKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCBbbnVtYmVyXSA9IHZhbHVlLm1hdGNoKGZsb2F0UmVnZXgpIHx8IFtdO1xuICAgIGlmICghbnVtYmVyKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCB1bml0ID0gdmFsdWUucmVwbGFjZShudW1iZXIsICcnKTtcbiAgICBsZXQgZGVmYXVsdFZhbHVlID0gbWF4RGVmYXVsdHMuaGFzKG5hbWUpID8gMSA6IDA7XG4gICAgaWYgKG51bWJlciAhPT0gdmFsdWUpXG4gICAgICAgIGRlZmF1bHRWYWx1ZSAqPSAxMDA7XG4gICAgcmV0dXJuIG5hbWUgKyAnKCcgKyBkZWZhdWx0VmFsdWUgKyB1bml0ICsgJyknO1xufVxuY29uc3QgZnVuY3Rpb25SZWdleCA9IC8oW2Etei1dKilcXCguKj9cXCkvZztcbmNvbnN0IGZpbHRlciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tcGxleCksIHsgZ2V0QW5pbWF0YWJsZU5vbmU6ICh2KSA9PiB7XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9ucyA9IHYubWF0Y2goZnVuY3Rpb25SZWdleCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbnMgPyBmdW5jdGlvbnMubWFwKGFwcGx5RGVmYXVsdEZpbHRlcikuam9pbignICcpIDogdjtcbiAgICB9IH0pO1xuXG5leHBvcnQgeyBmaWx0ZXIgfTtcbiIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuXG52YXIgaW50ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG51bWJlciksIHsgdHJhbnNmb3JtOiBNYXRoLnJvdW5kIH0pO1xuXG5leHBvcnQgeyBpbnQgfTtcbiIsImltcG9ydCB7IHB4LCBkZWdyZWVzLCBzY2FsZSwgYWxwaGEsIHByb2dyZXNzUGVyY2VudGFnZSB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGludCB9IGZyb20gJy4vdHlwZS1pbnQubWpzJztcblxudmFyIG51bWJlclZhbHVlVHlwZXMgPSB7XG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyV2lkdGg6IHB4LFxuICAgIGJvcmRlclRvcFdpZHRoOiBweCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiBweCxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogcHgsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiBweCxcbiAgICBib3JkZXJSYWRpdXM6IHB4LFxuICAgIHJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBweCxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBweCxcbiAgICAvLyBQb3NpdGlvbmluZyBwcm9wc1xuICAgIHdpZHRoOiBweCxcbiAgICBtYXhXaWR0aDogcHgsXG4gICAgaGVpZ2h0OiBweCxcbiAgICBtYXhIZWlnaHQ6IHB4LFxuICAgIHNpemU6IHB4LFxuICAgIHRvcDogcHgsXG4gICAgcmlnaHQ6IHB4LFxuICAgIGJvdHRvbTogcHgsXG4gICAgbGVmdDogcHgsXG4gICAgLy8gU3BhY2luZyBwcm9wc1xuICAgIHBhZGRpbmc6IHB4LFxuICAgIHBhZGRpbmdUb3A6IHB4LFxuICAgIHBhZGRpbmdSaWdodDogcHgsXG4gICAgcGFkZGluZ0JvdHRvbTogcHgsXG4gICAgcGFkZGluZ0xlZnQ6IHB4LFxuICAgIG1hcmdpbjogcHgsXG4gICAgbWFyZ2luVG9wOiBweCxcbiAgICBtYXJnaW5SaWdodDogcHgsXG4gICAgbWFyZ2luQm90dG9tOiBweCxcbiAgICBtYXJnaW5MZWZ0OiBweCxcbiAgICAvLyBUcmFuc2Zvcm0gcHJvcHNcbiAgICByb3RhdGU6IGRlZ3JlZXMsXG4gICAgcm90YXRlWDogZGVncmVlcyxcbiAgICByb3RhdGVZOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVo6IGRlZ3JlZXMsXG4gICAgc2NhbGU6IHNjYWxlLFxuICAgIHNjYWxlWDogc2NhbGUsXG4gICAgc2NhbGVZOiBzY2FsZSxcbiAgICBzY2FsZVo6IHNjYWxlLFxuICAgIHNrZXc6IGRlZ3JlZXMsXG4gICAgc2tld1g6IGRlZ3JlZXMsXG4gICAgc2tld1k6IGRlZ3JlZXMsXG4gICAgZGlzdGFuY2U6IHB4LFxuICAgIHRyYW5zbGF0ZVg6IHB4LFxuICAgIHRyYW5zbGF0ZVk6IHB4LFxuICAgIHRyYW5zbGF0ZVo6IHB4LFxuICAgIHg6IHB4LFxuICAgIHk6IHB4LFxuICAgIHo6IHB4LFxuICAgIHBlcnNwZWN0aXZlOiBweCxcbiAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZTogcHgsXG4gICAgb3BhY2l0eTogYWxwaGEsXG4gICAgb3JpZ2luWDogcHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIG9yaWdpblk6IHByb2dyZXNzUGVyY2VudGFnZSxcbiAgICBvcmlnaW5aOiBweCxcbiAgICAvLyBNaXNjXG4gICAgekluZGV4OiBpbnQsXG4gICAgLy8gU1ZHXG4gICAgZmlsbE9wYWNpdHk6IGFscGhhLFxuICAgIHN0cm9rZU9wYWNpdHk6IGFscGhhLFxuICAgIG51bU9jdGF2ZXM6IGludCxcbn07XG5cbmV4cG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfTtcbiIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgY29sb3IsIGZpbHRlciB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfSBmcm9tICcuL251bWJlci5tanMnO1xuXG4vKipcbiAqIEEgbWFwIG9mIGRlZmF1bHQgdmFsdWUgdHlwZXMgZm9yIGNvbW1vbiB2YWx1ZXNcbiAqL1xudmFyIGRlZmF1bHRWYWx1ZVR5cGVzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG51bWJlclZhbHVlVHlwZXMpLCB7IFxuICAgIC8vIENvbG9yIHByb3BzXG4gICAgY29sb3I6IGNvbG9yLCBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLCBvdXRsaW5lQ29sb3I6IGNvbG9yLCBmaWxsOiBjb2xvciwgc3Ryb2tlOiBjb2xvciwgXG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyQ29sb3I6IGNvbG9yLCBib3JkZXJUb3BDb2xvcjogY29sb3IsIGJvcmRlclJpZ2h0Q29sb3I6IGNvbG9yLCBib3JkZXJCb3R0b21Db2xvcjogY29sb3IsIGJvcmRlckxlZnRDb2xvcjogY29sb3IsIGZpbHRlcjogZmlsdGVyLCBXZWJraXRGaWx0ZXI6IGZpbHRlciB9KTtcbi8qKlxuICogR2V0cyB0aGUgZGVmYXVsdCBWYWx1ZVR5cGUgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZSBrZXlcbiAqL1xudmFyIGdldERlZmF1bHRWYWx1ZVR5cGUgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBkZWZhdWx0VmFsdWVUeXBlc1trZXldOyB9O1xuXG5leHBvcnQgeyBkZWZhdWx0VmFsdWVUeXBlcywgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9O1xuIiwiaW1wb3J0IHsgZmlsdGVyLCBjb21wbGV4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4vZGVmYXVsdHMubWpzJztcblxuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZGVmYXVsdFZhbHVlVHlwZSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KTtcbiAgICBpZiAoZGVmYXVsdFZhbHVlVHlwZSAhPT0gZmlsdGVyKVxuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gY29tcGxleDtcbiAgICAvLyBJZiB2YWx1ZSBpcyBub3QgcmVjb2duaXNlZCBhcyBhbmltYXRhYmxlLCBpZSBcIm5vbmVcIiwgY3JlYXRlIGFuIGFuaW1hdGFibGUgdmVyc2lvbiBvcmlnaW4gYmFzZWQgb24gdGhlIHRhcmdldFxuICAgIHJldHVybiAoX2EgPSBkZWZhdWx0VmFsdWVUeXBlLmdldEFuaW1hdGFibGVOb25lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChkZWZhdWx0VmFsdWVUeXBlLCB2YWx1ZSk7XG59XG5cbmV4cG9ydCB7IGdldEFuaW1hdGFibGVOb25lIH07XG4iLCJ2YXIgaW5zdGFudEFuaW1hdGlvblN0YXRlID0ge1xuICAgIGN1cnJlbnQ6IGZhbHNlLFxufTtcblxuZXhwb3J0IHsgaW5zdGFudEFuaW1hdGlvblN0YXRlIH07XG4iLCJpbXBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9IGZyb20gJy4uL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyc7XG5cbnZhciBpc0N1c3RvbVZhbHVlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2ICYmIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYubWl4ICYmIHYudG9WYWx1ZSk7XG59O1xudmFyIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgPSBmdW5jdGlvbiAodikge1xuICAgIC8vIFRPRE8gbWF5YmUgdGhyb3cgaWYgdi5sZW5ndGggLSAxIGlzIHBsYWNlaG9sZGVyIHRva2VuP1xuICAgIHJldHVybiBpc0tleWZyYW1lc1RhcmdldCh2KSA/IHZbdi5sZW5ndGggLSAxXSB8fCAwIDogdjtcbn07XG5cbmV4cG9ydCB7IGlzQ3VzdG9tVmFsdWUsIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgfTtcbiIsImltcG9ydCB7IF9fYXNzaWduLCBfX3Jlc3QsIF9fc3ByZWFkQXJyYXksIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGluZXJ0aWEsIGFuaW1hdGUgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgc2Vjb25kc1RvTWlsbGlzZWNvbmRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZS1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBpc0Vhc2luZ0FycmF5LCBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiB9IGZyb20gJy4vZWFzaW5nLm1qcyc7XG5pbXBvcnQgeyBpc0FuaW1hdGFibGUgfSBmcm9tICcuL2lzLWFuaW1hdGFibGUubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRUcmFuc2l0aW9uIH0gZnJvbSAnLi9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyc7XG5pbXBvcnQgeyB3YXJuaW5nIH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBnZXRBbmltYXRhYmxlTm9uZSB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyc7XG5pbXBvcnQgeyBpbnN0YW50QW5pbWF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi91dGlscy91c2UtaW5zdGFudC10cmFuc2l0aW9uLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIGEgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIG9uIGEgZ2l2ZW4gVHJhbnNpdGlvbi5cbiAqIFRoaXMgZmlsdGVycyBvdXQgb3JjaGVzdHJhdGlvbiBvcHRpb25zIGFuZCByZXR1cm5zIHRydWVcbiAqIGlmIGFueSBvcHRpb25zIGFyZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25EZWZpbmVkKF9hKSB7XG4gICAgX2Eud2hlbjsgX2EuZGVsYXk7IF9hLmRlbGF5Q2hpbGRyZW47IF9hLnN0YWdnZXJDaGlsZHJlbjsgX2Euc3RhZ2dlckRpcmVjdGlvbjsgX2EucmVwZWF0OyBfYS5yZXBlYXRUeXBlOyBfYS5yZXBlYXREZWxheTsgX2EuZnJvbTsgdmFyIHRyYW5zaXRpb24gPSBfX3Jlc3QoX2EsIFtcIndoZW5cIiwgXCJkZWxheVwiLCBcImRlbGF5Q2hpbGRyZW5cIiwgXCJzdGFnZ2VyQ2hpbGRyZW5cIiwgXCJzdGFnZ2VyRGlyZWN0aW9uXCIsIFwicmVwZWF0XCIsIFwicmVwZWF0VHlwZVwiLCBcInJlcGVhdERlbGF5XCIsIFwiZnJvbVwiXSk7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModHJhbnNpdGlvbikubGVuZ3RoO1xufVxudmFyIGxlZ2FjeVJlcGVhdFdhcm5pbmcgPSBmYWxzZTtcbi8qKlxuICogQ29udmVydCBGcmFtZXIgTW90aW9uJ3MgVHJhbnNpdGlvbiB0eXBlIGludG8gUG9wbW90aW9uLWNvbXBhdGlibGUgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnMoX2EpIHtcbiAgICB2YXIgZWFzZSA9IF9hLmVhc2UsIHRpbWVzID0gX2EudGltZXMsIHlveW8gPSBfYS55b3lvLCBmbGlwID0gX2EuZmxpcCwgbG9vcCA9IF9hLmxvb3AsIHRyYW5zaXRpb24gPSBfX3Jlc3QoX2EsIFtcImVhc2VcIiwgXCJ0aW1lc1wiLCBcInlveW9cIiwgXCJmbGlwXCIsIFwibG9vcFwiXSk7XG4gICAgdmFyIG9wdGlvbnMgPSBfX2Fzc2lnbih7fSwgdHJhbnNpdGlvbik7XG4gICAgaWYgKHRpbWVzKVxuICAgICAgICBvcHRpb25zW1wib2Zmc2V0XCJdID0gdGltZXM7XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbnkgZXhpc3RpbmcgZHVyYXRpb25zIGZyb20gc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBpZiAodHJhbnNpdGlvbi5kdXJhdGlvbilcbiAgICAgICAgb3B0aW9uc1tcImR1cmF0aW9uXCJdID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24uZHVyYXRpb24pO1xuICAgIGlmICh0cmFuc2l0aW9uLnJlcGVhdERlbGF5KVxuICAgICAgICBvcHRpb25zLnJlcGVhdERlbGF5ID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24ucmVwZWF0RGVsYXkpO1xuICAgIC8qKlxuICAgICAqIE1hcCBlYXNpbmcgbmFtZXMgdG8gUG9wbW90aW9uJ3MgZWFzaW5nIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIGlmIChlYXNlKSB7XG4gICAgICAgIG9wdGlvbnNbXCJlYXNlXCJdID0gaXNFYXNpbmdBcnJheShlYXNlKVxuICAgICAgICAgICAgPyBlYXNlLm1hcChlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbilcbiAgICAgICAgICAgIDogZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24oZWFzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1cHBvcnQgbGVnYWN5IHRyYW5zaXRpb24gQVBJXG4gICAgICovXG4gICAgaWYgKHRyYW5zaXRpb24udHlwZSA9PT0gXCJ0d2VlblwiKVxuICAgICAgICBvcHRpb25zLnR5cGUgPSBcImtleWZyYW1lc1wiO1xuICAgIC8qKlxuICAgICAqIFRPRE86IFRoZXNlIG9wdGlvbnMgYXJlIG9mZmljaWFsbHkgcmVtb3ZlZCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgaWYgKHlveW8gfHwgbG9vcCB8fCBmbGlwKSB7XG4gICAgICAgIHdhcm5pbmcoIWxlZ2FjeVJlcGVhdFdhcm5pbmcsIFwieW95bywgbG9vcCBhbmQgZmxpcCBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBBUEkuIFJlcGxhY2Ugd2l0aCByZXBlYXQgYW5kIHJlcGVhdFR5cGUgb3B0aW9ucy5cIik7XG4gICAgICAgIGxlZ2FjeVJlcGVhdFdhcm5pbmcgPSB0cnVlO1xuICAgICAgICBpZiAoeW95bykge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXBlYXRUeXBlID0gXCJyZXZlcnNlXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobG9vcCkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXBlYXRUeXBlID0gXCJsb29wXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmxpcCkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXBlYXRUeXBlID0gXCJtaXJyb3JcIjtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnJlcGVhdCA9IGxvb3AgfHwgeW95byB8fCBmbGlwIHx8IHRyYW5zaXRpb24ucmVwZWF0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUT0RPOiBQb3Btb3Rpb24gOSBoYXMgdGhlIGFiaWxpdHkgdG8gYXV0b21hdGljYWxseSBkZXRlY3Qgd2hldGhlciB0byB1c2VcbiAgICAgKiBhIGtleWZyYW1lcyBvciBzcHJpbmcgYW5pbWF0aW9uLCBidXQgZG9lcyBzbyBieSBkZXRlY3RpbmcgdmVsb2NpdHkgYW5kIG90aGVyIHNwcmluZyBvcHRpb25zLlxuICAgICAqIEl0J2QgYmUgZ29vZCB0byBpbnRyb2R1Y2UgYSBzaW1pbGFyIHRoaW5nIGhlcmUuXG4gICAgICovXG4gICAgaWYgKHRyYW5zaXRpb24udHlwZSAhPT0gXCJzcHJpbmdcIilcbiAgICAgICAgb3B0aW9ucy50eXBlID0gXCJrZXlmcmFtZXNcIjtcbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbi8qKlxuICogR2V0IHRoZSBkZWxheSBmb3IgYSB2YWx1ZSBieSBjaGVja2luZyBUcmFuc2l0aW9uIHdpdGggZGVjcmVhc2luZyBzcGVjaWZpY2l0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVsYXlGcm9tVHJhbnNpdGlvbih0cmFuc2l0aW9uLCBrZXkpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB8fCB7fTtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gdmFsdWVUcmFuc2l0aW9uLmRlbGF5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cmFuc2l0aW9uLmRlbGF5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xufVxuZnVuY3Rpb24gaHlkcmF0ZUtleWZyYW1lcyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy50bykgJiYgb3B0aW9ucy50b1swXSA9PT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnRvID0gX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG9wdGlvbnMudG8pLCBmYWxzZSk7XG4gICAgICAgIG9wdGlvbnMudG9bMF0gPSBvcHRpb25zLmZyb207XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucyh0cmFuc2l0aW9uLCBvcHRpb25zLCBrZXkpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy50bykpIHtcbiAgICAgICAgKF9hID0gdHJhbnNpdGlvbi5kdXJhdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRyYW5zaXRpb24uZHVyYXRpb24gPSAwLjgpO1xuICAgIH1cbiAgICBoeWRyYXRlS2V5ZnJhbWVzKG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIEdldCBhIGRlZmF1bHQgdHJhbnNpdGlvbiBpZiBub25lIGlzIGRldGVybWluZWQgdG8gYmUgZGVmaW5lZC5cbiAgICAgKi9cbiAgICBpZiAoIWlzVHJhbnNpdGlvbkRlZmluZWQodHJhbnNpdGlvbikpIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0cmFuc2l0aW9uKSwgZ2V0RGVmYXVsdFRyYW5zaXRpb24oa2V5LCBvcHRpb25zLnRvKSk7XG4gICAgfVxuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIGNvbnZlcnRUcmFuc2l0aW9uVG9BbmltYXRpb25PcHRpb25zKHRyYW5zaXRpb24pKTtcbn1cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uKGtleSwgdmFsdWUsIHRhcmdldCwgdHJhbnNpdGlvbiwgb25Db21wbGV0ZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgdmFsdWVUcmFuc2l0aW9uID0gZ2V0VmFsdWVUcmFuc2l0aW9uKHRyYW5zaXRpb24sIGtleSk7XG4gICAgdmFyIG9yaWdpbiA9IChfYSA9IHZhbHVlVHJhbnNpdGlvbi5mcm9tKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWx1ZS5nZXQoKTtcbiAgICB2YXIgaXNUYXJnZXRBbmltYXRhYmxlID0gaXNBbmltYXRhYmxlKGtleSwgdGFyZ2V0KTtcbiAgICBpZiAob3JpZ2luID09PSBcIm5vbmVcIiAmJiBpc1RhcmdldEFuaW1hdGFibGUgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgdHJ5aW5nIHRvIGFuaW1hdGUgZnJvbSBcIm5vbmVcIiwgdHJ5IGFuZCBnZXQgYW4gYW5pbWF0YWJsZSB2ZXJzaW9uXG4gICAgICAgICAqIG9mIHRoZSB0YXJnZXQuIFRoaXMgY291bGQgYmUgaW1wcm92ZWQgdG8gd29yayBib3RoIHdheXMuXG4gICAgICAgICAqL1xuICAgICAgICBvcmlnaW4gPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzWmVybyhvcmlnaW4pICYmIHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgb3JpZ2luID0gZ2V0WmVyb1VuaXQodGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJlxuICAgICAgICBpc1plcm8odGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRhcmdldCA9IGdldFplcm9Vbml0KG9yaWdpbik7XG4gICAgfVxuICAgIHZhciBpc09yaWdpbkFuaW1hdGFibGUgPSBpc0FuaW1hdGFibGUoa2V5LCBvcmlnaW4pO1xuICAgIHdhcm5pbmcoaXNPcmlnaW5BbmltYXRhYmxlID09PSBpc1RhcmdldEFuaW1hdGFibGUsIFwiWW91IGFyZSB0cnlpbmcgdG8gYW5pbWF0ZSBcIi5jb25jYXQoa2V5LCBcIiBmcm9tIFxcXCJcIikuY29uY2F0KG9yaWdpbiwgXCJcXFwiIHRvIFxcXCJcIikuY29uY2F0KHRhcmdldCwgXCJcXFwiLiBcIikuY29uY2F0KG9yaWdpbiwgXCIgaXMgbm90IGFuIGFuaW1hdGFibGUgdmFsdWUgLSB0byBlbmFibGUgdGhpcyBhbmltYXRpb24gc2V0IFwiKS5jb25jYXQob3JpZ2luLCBcIiB0byBhIHZhbHVlIGFuaW1hdGFibGUgdG8gXCIpLmNvbmNhdCh0YXJnZXQsIFwiIHZpYSB0aGUgYHN0eWxlYCBwcm9wZXJ0eS5cIikpO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZyb206IG9yaWdpbixcbiAgICAgICAgICAgIHRvOiB0YXJnZXQsXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmFsdWUuZ2V0VmVsb2NpdHkoKSxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZhbHVlLnNldCh2KTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHZhbHVlVHJhbnNpdGlvbi50eXBlID09PSBcImluZXJ0aWFcIiB8fFxuICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uLnR5cGUgPT09IFwiZGVjYXlcIlxuICAgICAgICAgICAgPyBpbmVydGlhKF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgdmFsdWVUcmFuc2l0aW9uKSlcbiAgICAgICAgICAgIDogYW5pbWF0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucyh2YWx1ZVRyYW5zaXRpb24sIG9wdGlvbnMsIGtleSkpLCB7IG9uVXBkYXRlOiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25VcGRhdGUodik7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHZhbHVlVHJhbnNpdGlvbi5vblVwZGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodmFsdWVUcmFuc2l0aW9uLCB2KTtcbiAgICAgICAgICAgICAgICB9LCBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHZhbHVlVHJhbnNpdGlvbi5vbkNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh2YWx1ZVRyYW5zaXRpb24pO1xuICAgICAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBmaW5hbFRhcmdldCA9IHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXModGFyZ2V0KTtcbiAgICAgICAgdmFsdWUuc2V0KGZpbmFsVGFyZ2V0KTtcbiAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAoX2EgPSB2YWx1ZVRyYW5zaXRpb24gPT09IG51bGwgfHwgdmFsdWVUcmFuc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZVRyYW5zaXRpb24ub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZhbHVlVHJhbnNpdGlvbiwgZmluYWxUYXJnZXQpO1xuICAgICAgICAoX2IgPSB2YWx1ZVRyYW5zaXRpb24gPT09IG51bGwgfHwgdmFsdWVUcmFuc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodmFsdWVUcmFuc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHsgc3RvcDogZnVuY3Rpb24gKCkgeyB9IH07XG4gICAgfVxuICAgIHJldHVybiAhaXNPcmlnaW5BbmltYXRhYmxlIHx8XG4gICAgICAgICFpc1RhcmdldEFuaW1hdGFibGUgfHxcbiAgICAgICAgdmFsdWVUcmFuc2l0aW9uLnR5cGUgPT09IGZhbHNlXG4gICAgICAgID8gc2V0XG4gICAgICAgIDogc3RhcnQ7XG59XG5mdW5jdGlvbiBpc1plcm8odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlID09PSAwIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIHBhcnNlRmxvYXQodmFsdWUpID09PSAwICYmXG4gICAgICAgICAgICB2YWx1ZS5pbmRleE9mKFwiIFwiKSA9PT0gLTEpKTtcbn1cbmZ1bmN0aW9uIGdldFplcm9Vbml0KHBvdGVudGlhbFVuaXRUeXBlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwb3RlbnRpYWxVbml0VHlwZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IDBcbiAgICAgICAgOiBnZXRBbmltYXRhYmxlTm9uZShcIlwiLCBwb3RlbnRpYWxVbml0VHlwZSk7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25ba2V5XSB8fCB0cmFuc2l0aW9uW1wiZGVmYXVsdFwiXSB8fCB0cmFuc2l0aW9uO1xufVxuLyoqXG4gKiBTdGFydCBhbmltYXRpb24gb24gYSBNb3Rpb25WYWx1ZS4gVGhpcyBmdW5jdGlvbiBpcyBhbiBpbnRlcmZhY2UgYmV0d2VlblxuICogRnJhbWVyIE1vdGlvbiBhbmQgUG9wbW90aW9uXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKGtleSwgdmFsdWUsIHRhcmdldCwgdHJhbnNpdGlvbikge1xuICAgIGlmICh0cmFuc2l0aW9uID09PSB2b2lkIDApIHsgdHJhbnNpdGlvbiA9IHt9OyB9XG4gICAgaWYgKGluc3RhbnRBbmltYXRpb25TdGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSB7IHR5cGU6IGZhbHNlIH07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5zdGFydChmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICAgICAgICB2YXIgZGVsYXlUaW1lcjtcbiAgICAgICAgdmFyIGNvbnRyb2xzO1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0gZ2V0QW5pbWF0aW9uKGtleSwgdmFsdWUsIHRhcmdldCwgdHJhbnNpdGlvbiwgb25Db21wbGV0ZSk7XG4gICAgICAgIHZhciBkZWxheSA9IGdldERlbGF5RnJvbVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKGNvbnRyb2xzID0gYW5pbWF0aW9uKCkpOyB9O1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIGRlbGF5VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChzdGFydCwgc2Vjb25kc1RvTWlsbGlzZWNvbmRzKGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZGVsYXlUaW1lcik7XG4gICAgICAgICAgICBjb250cm9scyA9PT0gbnVsbCB8fCBjb250cm9scyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udHJvbHMuc3RvcCgpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0VHJhbnNpdGlvblRvQW5pbWF0aW9uT3B0aW9ucywgZ2V0RGVsYXlGcm9tVHJhbnNpdGlvbiwgZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucywgZ2V0VmFsdWVUcmFuc2l0aW9uLCBnZXRaZXJvVW5pdCwgaHlkcmF0ZUtleWZyYW1lcywgaXNUcmFuc2l0aW9uRGVmaW5lZCwgaXNaZXJvLCBzdGFydEFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgYW5pbWF0ZSB9IGZyb20gJy4vaW5kZXgubWpzJztcbmltcG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH0gZnJvbSAnLi4vdXRpbHMvdmVsb2NpdHktcGVyLXNlY29uZC5tanMnO1xuaW1wb3J0IHsgZ2V0RnJhbWVEYXRhIH0gZnJvbSAnZnJhbWVzeW5jJztcblxuZnVuY3Rpb24gaW5lcnRpYSh7IGZyb20gPSAwLCB2ZWxvY2l0eSA9IDAsIG1pbiwgbWF4LCBwb3dlciA9IDAuOCwgdGltZUNvbnN0YW50ID0gNzUwLCBib3VuY2VTdGlmZm5lc3MgPSA1MDAsIGJvdW5jZURhbXBpbmcgPSAxMCwgcmVzdERlbHRhID0gMSwgbW9kaWZ5VGFyZ2V0LCBkcml2ZXIsIG9uVXBkYXRlLCBvbkNvbXBsZXRlLCBvblN0b3AsIH0pIHtcbiAgICBsZXQgY3VycmVudEFuaW1hdGlvbjtcbiAgICBmdW5jdGlvbiBpc091dE9mQm91bmRzKHYpIHtcbiAgICAgICAgcmV0dXJuIChtaW4gIT09IHVuZGVmaW5lZCAmJiB2IDwgbWluKSB8fCAobWF4ICE9PSB1bmRlZmluZWQgJiYgdiA+IG1heCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJvdW5kYXJ5TmVhcmVzdCh2KSB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBtaW47XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhtaW4gLSB2KSA8IE1hdGguYWJzKG1heCAtIHYpID8gbWluIDogbWF4O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGN1cnJlbnRBbmltYXRpb24gPT09IG51bGwgfHwgY3VycmVudEFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZHJpdmVyLCBvblVwZGF0ZTogKHYpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgb25VcGRhdGUgPT09IG51bGwgfHwgb25VcGRhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVXBkYXRlKHYpO1xuICAgICAgICAgICAgICAgIChfYSA9IG9wdGlvbnMub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIHYpO1xuICAgICAgICAgICAgfSwgb25Db21wbGV0ZSxcbiAgICAgICAgICAgIG9uU3RvcCB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0U3ByaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgc3RhcnRBbmltYXRpb24oT2JqZWN0LmFzc2lnbih7IHR5cGU6IFwic3ByaW5nXCIsIHN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLCBkYW1waW5nOiBib3VuY2VEYW1waW5nLCByZXN0RGVsdGEgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoaXNPdXRPZkJvdW5kcyhmcm9tKSkge1xuICAgICAgICBzdGFydFNwcmluZyh7IGZyb20sIHZlbG9jaXR5LCB0bzogYm91bmRhcnlOZWFyZXN0KGZyb20pIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHRhcmdldCA9IHBvd2VyICogdmVsb2NpdHkgKyBmcm9tO1xuICAgICAgICBpZiAodHlwZW9mIG1vZGlmeVRhcmdldCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRhcmdldCA9IG1vZGlmeVRhcmdldCh0YXJnZXQpO1xuICAgICAgICBjb25zdCBib3VuZGFyeSA9IGJvdW5kYXJ5TmVhcmVzdCh0YXJnZXQpO1xuICAgICAgICBjb25zdCBoZWFkaW5nID0gYm91bmRhcnkgPT09IG1pbiA/IC0xIDogMTtcbiAgICAgICAgbGV0IHByZXY7XG4gICAgICAgIGxldCBjdXJyZW50O1xuICAgICAgICBjb25zdCBjaGVja0JvdW5kYXJ5ID0gKHYpID0+IHtcbiAgICAgICAgICAgIHByZXYgPSBjdXJyZW50O1xuICAgICAgICAgICAgY3VycmVudCA9IHY7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IHZlbG9jaXR5UGVyU2Vjb25kKHYgLSBwcmV2LCBnZXRGcmFtZURhdGEoKS5kZWx0YSk7XG4gICAgICAgICAgICBpZiAoKGhlYWRpbmcgPT09IDEgJiYgdiA+IGJvdW5kYXJ5KSB8fFxuICAgICAgICAgICAgICAgIChoZWFkaW5nID09PSAtMSAmJiB2IDwgYm91bmRhcnkpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRTcHJpbmcoeyBmcm9tOiB2LCB0bzogYm91bmRhcnksIHZlbG9jaXR5IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzdGFydEFuaW1hdGlvbih7XG4gICAgICAgICAgICB0eXBlOiBcImRlY2F5XCIsXG4gICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgdmVsb2NpdHksXG4gICAgICAgICAgICB0aW1lQ29uc3RhbnQsXG4gICAgICAgICAgICBwb3dlcixcbiAgICAgICAgICAgIHJlc3REZWx0YSxcbiAgICAgICAgICAgIG1vZGlmeVRhcmdldCxcbiAgICAgICAgICAgIG9uVXBkYXRlOiBpc091dE9mQm91bmRzKHRhcmdldCkgPyBjaGVja0JvdW5kYXJ5IDogdW5kZWZpbmVkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RvcDogKCkgPT4gY3VycmVudEFuaW1hdGlvbiA9PT0gbnVsbCB8fCBjdXJyZW50QW5pbWF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50QW5pbWF0aW9uLnN0b3AoKSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBpbmVydGlhIH07XG4iLCJpbXBvcnQgeyBtaXgsIHByb2dyZXNzLCBsaW5lYXIsIGNpcmNPdXQgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgcHgsIHBlcmNlbnQgfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbnZhciBib3JkZXJzID0gW1wiVG9wTGVmdFwiLCBcIlRvcFJpZ2h0XCIsIFwiQm90dG9tTGVmdFwiLCBcIkJvdHRvbVJpZ2h0XCJdO1xudmFyIG51bUJvcmRlcnMgPSBib3JkZXJzLmxlbmd0aDtcbnZhciBhc051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyBwYXJzZUZsb2F0KHZhbHVlKSA6IHZhbHVlO1xufTtcbnZhciBpc1B4ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBweC50ZXN0KHZhbHVlKTtcbn07XG5mdW5jdGlvbiBtaXhWYWx1ZXModGFyZ2V0LCBmb2xsb3csIGxlYWQsIHByb2dyZXNzLCBzaG91bGRDcm9zc2ZhZGVPcGFjaXR5LCBpc09ubHlNZW1iZXIpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgaWYgKHNob3VsZENyb3NzZmFkZU9wYWNpdHkpIHtcbiAgICAgICAgdGFyZ2V0Lm9wYWNpdHkgPSBtaXgoMCwgXG4gICAgICAgIC8vIChmb2xsb3c/Lm9wYWNpdHkgYXMgbnVtYmVyKSA/PyAwLFxuICAgICAgICAvLyBUT0RPIFJlaW5zdGF0ZSB0aGlzIGlmIG9ubHkgY2hpbGRcbiAgICAgICAgKF9hID0gbGVhZC5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxLCBlYXNlQ3Jvc3NmYWRlSW4ocHJvZ3Jlc3MpKTtcbiAgICAgICAgdGFyZ2V0Lm9wYWNpdHlFeGl0ID0gbWl4KChfYiA9IGZvbGxvdy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxLCAwLCBlYXNlQ3Jvc3NmYWRlT3V0KHByb2dyZXNzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT25seU1lbWJlcikge1xuICAgICAgICB0YXJnZXQub3BhY2l0eSA9IG1peCgoX2MgPSBmb2xsb3cub3BhY2l0eSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMSwgKF9kID0gbGVhZC5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAxLCBwcm9ncmVzcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1peCBib3JkZXIgcmFkaXVzXG4gICAgICovXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Cb3JkZXJzOyBpKyspIHtcbiAgICAgICAgdmFyIGJvcmRlckxhYmVsID0gXCJib3JkZXJcIi5jb25jYXQoYm9yZGVyc1tpXSwgXCJSYWRpdXNcIik7XG4gICAgICAgIHZhciBmb2xsb3dSYWRpdXMgPSBnZXRSYWRpdXMoZm9sbG93LCBib3JkZXJMYWJlbCk7XG4gICAgICAgIHZhciBsZWFkUmFkaXVzID0gZ2V0UmFkaXVzKGxlYWQsIGJvcmRlckxhYmVsKTtcbiAgICAgICAgaWYgKGZvbGxvd1JhZGl1cyA9PT0gdW5kZWZpbmVkICYmIGxlYWRSYWRpdXMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb2xsb3dSYWRpdXMgfHwgKGZvbGxvd1JhZGl1cyA9IDApO1xuICAgICAgICBsZWFkUmFkaXVzIHx8IChsZWFkUmFkaXVzID0gMCk7XG4gICAgICAgIHZhciBjYW5NaXggPSBmb2xsb3dSYWRpdXMgPT09IDAgfHxcbiAgICAgICAgICAgIGxlYWRSYWRpdXMgPT09IDAgfHxcbiAgICAgICAgICAgIGlzUHgoZm9sbG93UmFkaXVzKSA9PT0gaXNQeChsZWFkUmFkaXVzKTtcbiAgICAgICAgaWYgKGNhbk1peCkge1xuICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSA9IE1hdGgubWF4KG1peChhc051bWJlcihmb2xsb3dSYWRpdXMpLCBhc051bWJlcihsZWFkUmFkaXVzKSwgcHJvZ3Jlc3MpLCAwKTtcbiAgICAgICAgICAgIGlmIChwZXJjZW50LnRlc3QobGVhZFJhZGl1cykgfHwgcGVyY2VudC50ZXN0KGZvbGxvd1JhZGl1cykpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbYm9yZGVyTGFiZWxdICs9IFwiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W2JvcmRlckxhYmVsXSA9IGxlYWRSYWRpdXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTWl4IHJvdGF0aW9uXG4gICAgICovXG4gICAgaWYgKGZvbGxvdy5yb3RhdGUgfHwgbGVhZC5yb3RhdGUpIHtcbiAgICAgICAgdGFyZ2V0LnJvdGF0ZSA9IG1peChmb2xsb3cucm90YXRlIHx8IDAsIGxlYWQucm90YXRlIHx8IDAsIHByb2dyZXNzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSYWRpdXModmFsdWVzLCByYWRpdXNOYW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSB2YWx1ZXNbcmFkaXVzTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZhbHVlcy5ib3JkZXJSYWRpdXM7XG59XG4vLyAvKipcbi8vICAqIFdlIG9ubHkgd2FudCB0byBtaXggdGhlIGJhY2tncm91bmQgY29sb3IgaWYgdGhlcmUncyBhIGZvbGxvdyBlbGVtZW50XG4vLyAgKiB0aGF0IHdlJ3JlIG5vdCBjcm9zc2ZhZGluZyBvcGFjaXR5IGJldHdlZW4uIEZvciBpbnN0YW5jZSB3aXRoIHN3aXRjaFxuLy8gICogQW5pbWF0ZVNoYXJlZExheW91dCBhbmltYXRpb25zLCB0aGlzIGhlbHBzIHRoZSBpbGx1c2lvbiBvZiBhIGNvbnRpbnVvdXNcbi8vICAqIGVsZW1lbnQgYmVpbmcgYW5pbWF0ZWQgYnV0IGFsc28gY3V0cyBkb3duIG9uIHRoZSBudW1iZXIgb2YgcGFpbnRzIHRyaWdnZXJlZFxuLy8gICogZm9yIGVsZW1lbnRzIHdoZXJlIG9wYWNpdHkgaXMgZG9pbmcgdGhhdCB3b3JrIGZvciB1cy5cbi8vICAqL1xuLy8gaWYgKFxuLy8gICAgICFoYXNGb2xsb3dFbGVtZW50ICYmXG4vLyAgICAgbGF0ZXN0TGVhZFZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IgJiZcbi8vICAgICBsYXRlc3RGb2xsb3dWYWx1ZXMuYmFja2dyb3VuZENvbG9yXG4vLyApIHtcbi8vICAgICAvKipcbi8vICAgICAgKiBUaGlzIGlzbid0IGlkZWFsIHBlcmZvcm1hbmNlLXdpc2UgYXMgbWl4Q29sb3IgaXMgY3JlYXRpbmcgYSBuZXcgZnVuY3Rpb24gZXZlcnkgZnJhbWUuXG4vLyAgICAgICogV2UgY291bGQgcHJvYmFibHkgY3JlYXRlIGEgbWl4ZXIgdGhhdCBydW5zIGF0IHRoZSBzdGFydCBvZiB0aGUgYW5pbWF0aW9uIGJ1dFxuLy8gICAgICAqIHRoZSBpZGVhIGJlaGluZCB0aGUgY3Jvc3NmYWRlciBpcyB0aGF0IGl0IHJ1bnMgZHluYW1pY2FsbHkgYmV0d2VlbiB0d28gcG90ZW50aWFsbHlcbi8vICAgICAgKiBjaGFuZ2luZyB0YXJnZXRzIChpZSBvcGFjaXR5IG9yIGJvcmRlclJhZGl1cyBtYXkgYmUgYW5pbWF0aW5nIGluZGVwZW5kZW50bHkgdmlhIHZhcmlhbnRzKVxuLy8gICAgICAqL1xuLy8gICAgIGxlYWRTdGF0ZS5iYWNrZ3JvdW5kQ29sb3IgPSBmb2xsb3dTdGF0ZS5iYWNrZ3JvdW5kQ29sb3IgPSBtaXhDb2xvcihcbi8vICAgICAgICAgbGF0ZXN0Rm9sbG93VmFsdWVzLmJhY2tncm91bmRDb2xvciBhcyBzdHJpbmcsXG4vLyAgICAgICAgIGxhdGVzdExlYWRWYWx1ZXMuYmFja2dyb3VuZENvbG9yIGFzIHN0cmluZ1xuLy8gICAgICkocClcbi8vIH1cbnZhciBlYXNlQ3Jvc3NmYWRlSW4gPSBjb21wcmVzcygwLCAwLjUsIGNpcmNPdXQpO1xudmFyIGVhc2VDcm9zc2ZhZGVPdXQgPSBjb21wcmVzcygwLjUsIDAuOTUsIGxpbmVhcik7XG5mdW5jdGlvbiBjb21wcmVzcyhtaW4sIG1heCwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIC8vIENvdWxkIHJlcGxhY2UgaWZzIHdpdGggY2xhbXBcbiAgICAgICAgaWYgKHAgPCBtaW4pXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgaWYgKHAgPiBtYXgpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyhtaW4sIG1heCwgcCkpO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG1peFZhbHVlcyB9O1xuIiwiLyoqXG4gKiBSZXNldCBhbiBheGlzIHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvcHlBeGlzSW50byhheGlzLCBvcmlnaW5BeGlzKSB7XG4gICAgYXhpcy5taW4gPSBvcmlnaW5BeGlzLm1pbjtcbiAgICBheGlzLm1heCA9IG9yaWdpbkF4aXMubWF4O1xufVxuLyoqXG4gKiBSZXNldCBhIGJveCB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5Qm94SW50byhib3gsIG9yaWdpbkJveCkge1xuICAgIGNvcHlBeGlzSW50byhib3gueCwgb3JpZ2luQm94LngpO1xuICAgIGNvcHlBeGlzSW50byhib3gueSwgb3JpZ2luQm94LnkpO1xufVxuXG5leHBvcnQgeyBjb3B5QXhpc0ludG8sIGNvcHlCb3hJbnRvIH07XG4iLCJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKF9hKSB7XG4gICAgdmFyIHNjYWxlID0gX2Euc2NhbGUsIHNjYWxlWCA9IF9hLnNjYWxlWCwgc2NhbGVZID0gX2Euc2NhbGVZO1xuICAgIHJldHVybiAoIWlzSWRlbnRpdHlTY2FsZShzY2FsZSkgfHxcbiAgICAgICAgIWlzSWRlbnRpdHlTY2FsZShzY2FsZVgpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVZKSk7XG59XG5mdW5jdGlvbiBoYXNUcmFuc2Zvcm0odmFsdWVzKSB7XG4gICAgcmV0dXJuIChoYXNTY2FsZSh2YWx1ZXMpIHx8XG4gICAgICAgIGhhc1RyYW5zbGF0ZSh2YWx1ZXMueCkgfHxcbiAgICAgICAgaGFzVHJhbnNsYXRlKHZhbHVlcy55KSB8fFxuICAgICAgICB2YWx1ZXMueiB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVYIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVZKTtcbn1cbmZ1bmN0aW9uIGhhc1RyYW5zbGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZSAhPT0gXCIwJVwiO1xufVxuXG5leHBvcnQgeyBoYXNTY2FsZSwgaGFzVHJhbnNmb3JtIH07XG4iLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBtaXggfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgaGFzVHJhbnNmb3JtIH0gZnJvbSAnLi4vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanMnO1xuXG4vKipcbiAqIFNjYWxlcyBhIHBvaW50IGJhc2VkIG9uIGEgZmFjdG9yIGFuZCBhbiBvcmlnaW5Qb2ludFxuICovXG5mdW5jdGlvbiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpIHtcbiAgICB2YXIgZGlzdGFuY2VGcm9tT3JpZ2luID0gcG9pbnQgLSBvcmlnaW5Qb2ludDtcbiAgICB2YXIgc2NhbGVkID0gc2NhbGUgKiBkaXN0YW5jZUZyb21PcmlnaW47XG4gICAgcmV0dXJuIG9yaWdpblBvaW50ICsgc2NhbGVkO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgcG9pbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpICsgdHJhbnNsYXRlO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGFuIGF4aXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7IHRyYW5zbGF0ZSA9IDA7IH1cbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICBheGlzLm1pbiA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogQXBwbGllcyBhIHRyYW5zbGF0ZS9zY2FsZSBkZWx0YSB0byBhIGJveFxuICovXG5mdW5jdGlvbiBhcHBseUJveERlbHRhKGJveCwgX2EpIHtcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC54LCB4LnRyYW5zbGF0ZSwgeC5zY2FsZSwgeC5vcmlnaW5Qb2ludCk7XG4gICAgYXBwbHlBeGlzRGVsdGEoYm94LnksIHkudHJhbnNsYXRlLCB5LnNjYWxlLCB5Lm9yaWdpblBvaW50KTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmVlIG9mIGRlbHRhcyB0byBhIGJveC4gV2UgZG8gdGhpcyB0byBjYWxjdWxhdGUgdGhlIGVmZmVjdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXNcbiAqIGluIGEgdHJlZSB1cG9uIG91ciBib3ggYmVmb3JlIHRoZW4gY2FsY3VsYXRpbmcgaG93IHRvIHByb2plY3QgaXQgaW50byBvdXIgZGVzaXJlZCB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqXG4gKiBUaGlzIGlzIHRoZSBmaW5hbCBuZXN0ZWQgbG9vcCB3aXRoaW4gdXBkYXRlTGF5b3V0RGVsdGEgZm9yIGZ1dHVyZSByZWZhY3RvcmluZ1xuICovXG5mdW5jdGlvbiBhcHBseVRyZWVEZWx0YXMoYm94LCB0cmVlU2NhbGUsIHRyZWVQYXRoLCBpc1NoYXJlZFRyYW5zaXRpb24pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChpc1NoYXJlZFRyYW5zaXRpb24gPT09IHZvaWQgMCkgeyBpc1NoYXJlZFRyYW5zaXRpb24gPSBmYWxzZTsgfVxuICAgIHZhciB0cmVlTGVuZ3RoID0gdHJlZVBhdGgubGVuZ3RoO1xuICAgIGlmICghdHJlZUxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIFJlc2V0IHRoZSB0cmVlU2NhbGVcbiAgICB0cmVlU2NhbGUueCA9IHRyZWVTY2FsZS55ID0gMTtcbiAgICB2YXIgbm9kZTtcbiAgICB2YXIgZGVsdGE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZSA9IHRyZWVQYXRoW2ldO1xuICAgICAgICBkZWx0YSA9IG5vZGUucHJvamVjdGlvbkRlbHRhO1xuICAgICAgICBpZiAoKChfYiA9IChfYSA9IG5vZGUuaW5zdGFuY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdHlsZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc3BsYXkpID09PSBcImNvbnRlbnRzXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGlzU2hhcmVkVHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgbm9kZS5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgbm9kZS5zY3JvbGwgJiZcbiAgICAgICAgICAgIG5vZGUgIT09IG5vZGUucm9vdCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KGJveCwgeyB4OiAtbm9kZS5zY3JvbGwueCwgeTogLW5vZGUuc2Nyb2xsLnkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAvLyBJbmNvcG9yYXRlIGVhY2ggYW5jZXN0b3IncyBzY2FsZSBpbnRvIGEgY3VsbXVsYXRpdmUgdHJlZVNjYWxlIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAgICAgICAgdHJlZVNjYWxlLnggKj0gZGVsdGEueC5zY2FsZTtcbiAgICAgICAgICAgIHRyZWVTY2FsZS55ICo9IGRlbHRhLnkuc2NhbGU7XG4gICAgICAgICAgICAvLyBBcHBseSBlYWNoIGFuY2VzdG9yJ3MgY2FsY3VsYXRlZCBkZWx0YSBpbnRvIHRoaXMgY29tcG9uZW50J3MgcmVjb3JkZWQgbGF5b3V0IGJveFxuICAgICAgICAgICAgYXBwbHlCb3hEZWx0YShib3gsIGRlbHRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTaGFyZWRUcmFuc2l0aW9uICYmIGhhc1RyYW5zZm9ybShub2RlLmxhdGVzdFZhbHVlcykpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybUJveChib3gsIG5vZGUubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZUF4aXMoYXhpcywgZGlzdGFuY2UpIHtcbiAgICBheGlzLm1pbiA9IGF4aXMubWluICsgZGlzdGFuY2U7XG4gICAgYXhpcy5tYXggPSBheGlzLm1heCArIGRpc3RhbmNlO1xufVxuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhbiBheGlzIGZyb20gdGhlIGxhdGVzdCByZXNvbHZlZCBtb3Rpb24gdmFsdWVzLlxuICogVGhpcyBmdW5jdGlvbiBiYXNpY2FsbHkgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIGEgZmxhdCBtb3Rpb24gdmFsdWUgbWFwXG4gKiBhbmQgYXBwbHlBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQXhpcyhheGlzLCB0cmFuc2Zvcm1zLCBfYSkge1xuICAgIHZhciBfYiA9IF9fcmVhZChfYSwgMyksIGtleSA9IF9iWzBdLCBzY2FsZUtleSA9IF9iWzFdLCBvcmlnaW5LZXkgPSBfYlsyXTtcbiAgICB2YXIgYXhpc09yaWdpbiA9IHRyYW5zZm9ybXNbb3JpZ2luS2V5XSAhPT0gdW5kZWZpbmVkID8gdHJhbnNmb3Jtc1tvcmlnaW5LZXldIDogMC41O1xuICAgIHZhciBvcmlnaW5Qb2ludCA9IG1peChheGlzLm1pbiwgYXhpcy5tYXgsIGF4aXNPcmlnaW4pO1xuICAgIC8vIEFwcGx5IHRoZSBheGlzIGRlbHRhIHRvIHRoZSBmaW5hbCBheGlzXG4gICAgYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNmb3Jtc1trZXldLCB0cmFuc2Zvcm1zW3NjYWxlS2V5XSwgb3JpZ2luUG9pbnQsIHRyYW5zZm9ybXMuc2NhbGUpO1xufVxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIG1vdGlvbiB2YWx1ZXMgd2Ugd2FudCB0byBhcHBseSBhcyB0cmFuc2xhdGlvbiwgc2NhbGUgYW5kIG9yaWdpbi5cbiAqL1xudmFyIHhLZXlzID0gW1wieFwiLCBcInNjYWxlWFwiLCBcIm9yaWdpblhcIl07XG52YXIgeUtleXMgPSBbXCJ5XCIsIFwic2NhbGVZXCIsIFwib3JpZ2luWVwiXTtcbi8qKlxuICogQXBwbHkgYSB0cmFuc2Zvcm0gdG8gYSBib3ggZnJvbSB0aGUgbGF0ZXN0IHJlc29sdmVkIG1vdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveChib3gsIHRyYW5zZm9ybSkge1xuICAgIHRyYW5zZm9ybUF4aXMoYm94LngsIHRyYW5zZm9ybSwgeEtleXMpO1xuICAgIHRyYW5zZm9ybUF4aXMoYm94LnksIHRyYW5zZm9ybSwgeUtleXMpO1xufVxuXG5leHBvcnQgeyBhcHBseUF4aXNEZWx0YSwgYXBwbHlCb3hEZWx0YSwgYXBwbHlQb2ludERlbHRhLCBhcHBseVRyZWVEZWx0YXMsIHNjYWxlUG9pbnQsIHRyYW5zZm9ybUF4aXMsIHRyYW5zZm9ybUJveCwgdHJhbnNsYXRlQXhpcyB9O1xuIiwiY29uc3QgaXNQb2ludCA9IChwb2ludCkgPT4gcG9pbnQuaGFzT3duUHJvcGVydHkoJ3gnKSAmJiBwb2ludC5oYXNPd25Qcm9wZXJ0eSgneScpO1xuXG5leHBvcnQgeyBpc1BvaW50IH07XG4iLCJpbXBvcnQgeyBpc1BvaW50IH0gZnJvbSAnLi9pcy1wb2ludC5tanMnO1xuXG5jb25zdCBpc1BvaW50M0QgPSAocG9pbnQpID0+IGlzUG9pbnQocG9pbnQpICYmIHBvaW50Lmhhc093blByb3BlcnR5KCd6Jyk7XG5cbmV4cG9ydCB7IGlzUG9pbnQzRCB9O1xuIiwiaW1wb3J0IHsgaXNQb2ludCB9IGZyb20gJy4vaXMtcG9pbnQubWpzJztcbmltcG9ydCB7IGlzUG9pbnQzRCB9IGZyb20gJy4vaXMtcG9pbnQtM2QubWpzJztcbmltcG9ydCB7IGlzTnVtIH0gZnJvbSAnLi9pbmMubWpzJztcblxuY29uc3QgZGlzdGFuY2UxRCA9IChhLCBiKSA9PiBNYXRoLmFicyhhIC0gYik7XG5mdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgaWYgKGlzTnVtKGEpICYmIGlzTnVtKGIpKSB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTFEKGEsIGIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BvaW50KGEpICYmIGlzUG9pbnQoYikpIHtcbiAgICAgICAgY29uc3QgeERlbHRhID0gZGlzdGFuY2UxRChhLngsIGIueCk7XG4gICAgICAgIGNvbnN0IHlEZWx0YSA9IGRpc3RhbmNlMUQoYS55LCBiLnkpO1xuICAgICAgICBjb25zdCB6RGVsdGEgPSBpc1BvaW50M0QoYSkgJiYgaXNQb2ludDNEKGIpID8gZGlzdGFuY2UxRChhLnosIGIueikgOiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHhEZWx0YSwgMikgKyBNYXRoLnBvdyh5RGVsdGEsIDIpICsgTWF0aC5wb3coekRlbHRhLCAyKSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkaXN0YW5jZSB9O1xuIiwiaW1wb3J0IHsgbWl4LCBkaXN0YW5jZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5cbmZ1bmN0aW9uIGNhbGNMZW5ndGgoYXhpcykge1xuICAgIHJldHVybiBheGlzLm1heCAtIGF4aXMubWluO1xufVxuZnVuY3Rpb24gaXNOZWFyKHZhbHVlLCB0YXJnZXQsIG1heERpc3RhbmNlKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IDA7IH1cbiAgICBpZiAobWF4RGlzdGFuY2UgPT09IHZvaWQgMCkgeyBtYXhEaXN0YW5jZSA9IDAuMDE7IH1cbiAgICByZXR1cm4gZGlzdGFuY2UodmFsdWUsIHRhcmdldCkgPCBtYXhEaXN0YW5jZTtcbn1cbmZ1bmN0aW9uIGNhbGNBeGlzRGVsdGEoZGVsdGEsIHNvdXJjZSwgdGFyZ2V0LCBvcmlnaW4pIHtcbiAgICBpZiAob3JpZ2luID09PSB2b2lkIDApIHsgb3JpZ2luID0gMC41OyB9XG4gICAgZGVsdGEub3JpZ2luID0gb3JpZ2luO1xuICAgIGRlbHRhLm9yaWdpblBvaW50ID0gbWl4KHNvdXJjZS5taW4sIHNvdXJjZS5tYXgsIGRlbHRhLm9yaWdpbik7XG4gICAgZGVsdGEuc2NhbGUgPSBjYWxjTGVuZ3RoKHRhcmdldCkgLyBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgaWYgKGlzTmVhcihkZWx0YS5zY2FsZSwgMSwgMC4wMDAxKSB8fCBpc05hTihkZWx0YS5zY2FsZSkpXG4gICAgICAgIGRlbHRhLnNjYWxlID0gMTtcbiAgICBkZWx0YS50cmFuc2xhdGUgPVxuICAgICAgICBtaXgodGFyZ2V0Lm1pbiwgdGFyZ2V0Lm1heCwgZGVsdGEub3JpZ2luKSAtIGRlbHRhLm9yaWdpblBvaW50O1xuICAgIGlmIChpc05lYXIoZGVsdGEudHJhbnNsYXRlKSB8fCBpc05hTihkZWx0YS50cmFuc2xhdGUpKVxuICAgICAgICBkZWx0YS50cmFuc2xhdGUgPSAwO1xufVxuZnVuY3Rpb24gY2FsY0JveERlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS54LCBzb3VyY2UueCwgdGFyZ2V0LngsIG9yaWdpbiA9PT0gbnVsbCB8fCBvcmlnaW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbi5vcmlnaW5YKTtcbiAgICBjYWxjQXhpc0RlbHRhKGRlbHRhLnksIHNvdXJjZS55LCB0YXJnZXQueSwgb3JpZ2luID09PSBudWxsIHx8IG9yaWdpbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luLm9yaWdpblkpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gcGFyZW50Lm1pbiArIHJlbGF0aXZlLm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgocmVsYXRpdmUpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQm94KHRhcmdldCwgcmVsYXRpdmUsIHBhcmVudCkge1xuICAgIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LngsIHJlbGF0aXZlLngsIHBhcmVudC54KTtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC55LCByZWxhdGl2ZS55LCBwYXJlbnQueSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LCBsYXlvdXQsIHBhcmVudCkge1xuICAgIHRhcmdldC5taW4gPSBsYXlvdXQubWluIC0gcGFyZW50Lm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgobGF5b3V0KTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LngsIGxheW91dC54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC55LCBsYXlvdXQueSwgcGFyZW50LnkpO1xufVxuXG5leHBvcnQgeyBjYWxjQXhpc0RlbHRhLCBjYWxjQm94RGVsdGEsIGNhbGNMZW5ndGgsIGNhbGNSZWxhdGl2ZUF4aXMsIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbiwgY2FsY1JlbGF0aXZlQm94LCBjYWxjUmVsYXRpdmVQb3NpdGlvbiwgaXNOZWFyIH07XG4iLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBtaXggfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IHNjYWxlUG9pbnQgfSBmcm9tICcuL2RlbHRhLWFwcGx5Lm1qcyc7XG5cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhIHBvaW50LiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseVBvaW50RGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBwb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgcG9pbnQgPSBzY2FsZVBvaW50KHBvaW50LCAxIC8gc2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBib3hTY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnQ7XG59XG4vKipcbiAqIFJlbW92ZSBhIGRlbHRhIGZyb20gYW4gYXhpcy4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzRGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luLCBib3hTY2FsZSwgb3JpZ2luQXhpcywgc291cmNlQXhpcykge1xuICAgIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkgeyB0cmFuc2xhdGUgPSAwOyB9XG4gICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XG4gICAgaWYgKG9yaWdpbiA9PT0gdm9pZCAwKSB7IG9yaWdpbiA9IDAuNTsgfVxuICAgIGlmIChvcmlnaW5BeGlzID09PSB2b2lkIDApIHsgb3JpZ2luQXhpcyA9IGF4aXM7IH1cbiAgICBpZiAoc291cmNlQXhpcyA9PT0gdm9pZCAwKSB7IHNvdXJjZUF4aXMgPSBheGlzOyB9XG4gICAgaWYgKHBlcmNlbnQudGVzdCh0cmFuc2xhdGUpKSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHBhcnNlRmxvYXQodHJhbnNsYXRlKTtcbiAgICAgICAgdmFyIHJlbGF0aXZlUHJvZ3Jlc3MgPSBtaXgoc291cmNlQXhpcy5taW4sIHNvdXJjZUF4aXMubWF4LCB0cmFuc2xhdGUgLyAxMDApO1xuICAgICAgICB0cmFuc2xhdGUgPSByZWxhdGl2ZVByb2dyZXNzIC0gc291cmNlQXhpcy5taW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlICE9PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIG9yaWdpblBvaW50ID0gbWl4KG9yaWdpbkF4aXMubWluLCBvcmlnaW5BeGlzLm1heCwgb3JpZ2luKTtcbiAgICBpZiAoYXhpcyA9PT0gb3JpZ2luQXhpcylcbiAgICAgICAgb3JpZ2luUG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIGF4aXMubWluID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IHJlbW92ZVBvaW50RGVsdGEoYXhpcy5tYXgsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNUcmFuc2Zvcm1zIGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGF4aXMsIHRyYW5zZm9ybXMsIF9hLCBvcmlnaW4sIHNvdXJjZUF4aXMpIHtcbiAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDMpLCBrZXkgPSBfYlswXSwgc2NhbGVLZXkgPSBfYlsxXSwgb3JpZ2luS2V5ID0gX2JbMl07XG4gICAgcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIHRyYW5zZm9ybXNbb3JpZ2luS2V5XSwgdHJhbnNmb3Jtcy5zY2FsZSwgb3JpZ2luLCBzb3VyY2VBeGlzKTtcbn1cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBtb3Rpb24gdmFsdWVzIHdlIHdhbnQgdG8gYXBwbHkgYXMgdHJhbnNsYXRpb24sIHNjYWxlIGFuZCBvcmlnaW4uXG4gKi9cbnZhciB4S2V5cyA9IFtcInhcIiwgXCJzY2FsZVhcIiwgXCJvcmlnaW5YXCJdO1xudmFyIHlLZXlzID0gW1wieVwiLCBcInNjYWxlWVwiLCBcIm9yaWdpbllcIl07XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBib3guIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0JveCBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveCwgdHJhbnNmb3Jtcywgb3JpZ2luQm94LCBzb3VyY2VCb3gpIHtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueCwgdHJhbnNmb3JtcywgeEtleXMsIG9yaWdpbkJveCA9PT0gbnVsbCB8fCBvcmlnaW5Cb3ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbkJveC54LCBzb3VyY2VCb3ggPT09IG51bGwgfHwgc291cmNlQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VCb3gueCk7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LnksIHRyYW5zZm9ybXMsIHlLZXlzLCBvcmlnaW5Cb3ggPT09IG51bGwgfHwgb3JpZ2luQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5Cb3gueSwgc291cmNlQm94ID09PSBudWxsIHx8IHNvdXJjZUJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlQm94LnkpO1xufVxuXG5leHBvcnQgeyByZW1vdmVBeGlzRGVsdGEsIHJlbW92ZUF4aXNUcmFuc2Zvcm1zLCByZW1vdmVCb3hUcmFuc2Zvcm1zLCByZW1vdmVQb2ludERlbHRhIH07XG4iLCJmdW5jdGlvbiBpc0F4aXNEZWx0YVplcm8oZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEudHJhbnNsYXRlID09PSAwICYmIGRlbHRhLnNjYWxlID09PSAxO1xufVxuZnVuY3Rpb24gaXNEZWx0YVplcm8oZGVsdGEpIHtcbiAgICByZXR1cm4gaXNBeGlzRGVsdGFaZXJvKGRlbHRhLngpICYmIGlzQXhpc0RlbHRhWmVybyhkZWx0YS55KTtcbn1cbmZ1bmN0aW9uIGJveEVxdWFscyhhLCBiKSB7XG4gICAgcmV0dXJuIChhLngubWluID09PSBiLngubWluICYmXG4gICAgICAgIGEueC5tYXggPT09IGIueC5tYXggJiZcbiAgICAgICAgYS55Lm1pbiA9PT0gYi55Lm1pbiAmJlxuICAgICAgICBhLnkubWF4ID09PSBiLnkubWF4KTtcbn1cblxuZXhwb3J0IHsgYm94RXF1YWxzLCBpc0RlbHRhWmVybyB9O1xuIiwiaW1wb3J0IHsgYWRkVW5pcXVlSXRlbSwgcmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxzL2FycmF5Lm1qcyc7XG5cbnZhciBOb2RlU3RhY2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9kZVN0YWNrKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBbXTtcbiAgICB9XG4gICAgTm9kZVN0YWNrLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMubWVtYmVycywgbm9kZSk7XG4gICAgICAgIG5vZGUuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICB9O1xuICAgIE5vZGVTdGFjay5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLm1lbWJlcnMsIG5vZGUpO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5wcmV2TGVhZCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2TGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5sZWFkKSB7XG4gICAgICAgICAgICB2YXIgcHJldkxlYWQgPSB0aGlzLm1lbWJlcnNbdGhpcy5tZW1iZXJzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHByZXZMZWFkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9tb3RlKHByZXZMZWFkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTm9kZVN0YWNrLnByb3RvdHlwZS5yZWxlZ2F0ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBpbmRleE9mTm9kZSA9IHRoaXMubWVtYmVycy5maW5kSW5kZXgoZnVuY3Rpb24gKG1lbWJlcikgeyByZXR1cm4gbm9kZSA9PT0gbWVtYmVyOyB9KTtcbiAgICAgICAgaWYgKGluZGV4T2ZOb2RlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmluZCB0aGUgbmV4dCBwcm9qZWN0aW9uIG5vZGUgdGhhdCBpcyBwcmVzZW50XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcHJldkxlYWQ7XG4gICAgICAgIGZvciAodmFyIGkgPSBpbmRleE9mTm9kZTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBtZW1iZXIgPSB0aGlzLm1lbWJlcnNbaV07XG4gICAgICAgICAgICBpZiAobWVtYmVyLmlzUHJlc2VudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwcmV2TGVhZCA9IG1lbWJlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvbW90ZShwcmV2TGVhZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm9kZVN0YWNrLnByb3RvdHlwZS5wcm9tb3RlID0gZnVuY3Rpb24gKG5vZGUsIHByZXNlcnZlRm9sbG93T3BhY2l0eSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBwcmV2TGVhZCA9IHRoaXMubGVhZDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHByZXZMZWFkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnByZXZMZWFkID0gcHJldkxlYWQ7XG4gICAgICAgIHRoaXMubGVhZCA9IG5vZGU7XG4gICAgICAgIG5vZGUuc2hvdygpO1xuICAgICAgICBpZiAocHJldkxlYWQpIHtcbiAgICAgICAgICAgIHByZXZMZWFkLmluc3RhbmNlICYmIHByZXZMZWFkLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICBub2RlLnJlc3VtZUZyb20gPSBwcmV2TGVhZDtcbiAgICAgICAgICAgIGlmIChwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlc3VtZUZyb20ucHJlc2VydmVPcGFjaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2TGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QgPSBwcmV2TGVhZC5zbmFwc2hvdDtcbiAgICAgICAgICAgICAgICBub2RlLnNuYXBzaG90LmxhdGVzdFZhbHVlcyA9XG4gICAgICAgICAgICAgICAgICAgIHByZXZMZWFkLmFuaW1hdGlvblZhbHVlcyB8fCBwcmV2TGVhZC5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICAgICAgbm9kZS5zbmFwc2hvdC5pc1NoYXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKF9hID0gbm9kZS5yb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIG5vZGUuaXNMYXlvdXREaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3Jvc3NmYWRlID0gbm9kZS5vcHRpb25zLmNyb3NzZmFkZTtcbiAgICAgICAgICAgIGlmIChjcm9zc2ZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldkxlYWQuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUT0RPOlxuICAgICAgICAgICAgICogICAtIFRlc3QgYm9yZGVyIHJhZGl1cyB3aGVuIHByZXZpb3VzIG5vZGUgd2FzIGRlbGV0ZWRcbiAgICAgICAgICAgICAqICAgLSBib3hTaGFkb3cgbWl4aW5nXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHNjcm9sbGVkIGNvbnRhaW5lciBhbmQgZWxlbWVudCBCIChzY3JvbGwgc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gdHJhbnNmb3JtZWQgY29udGFpbmVyIGFuZCBlbGVtZW50IEIgKHRyYW5zZm9ybSBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiBzY3JvbGxlZCBwYWdlIGFuZCBlbGVtZW50IEIgKHNjcm9sbCBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogLS0tXG4gICAgICAgICAgICAgKiAgIC0gQ3Jvc3NmYWRlIG9wYWNpdHkgb2Ygcm9vdCBub2Rlc1xuICAgICAgICAgICAgICogICAtIGxheW91dElkIGNoYW5nZXMgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiAgIC0gbGF5b3V0SWQgY2hhbmdlcyBtaWQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH07XG4gICAgTm9kZVN0YWNrLnByb3RvdHlwZS5leGl0QW5pbWF0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICAgICAgKF9iID0gKF9hID0gbm9kZS5vcHRpb25zKS5vbkV4aXRDb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgKF9lID0gKF9jID0gbm9kZS5yZXN1bWluZ0Zyb20pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2QgPSBfYy5vcHRpb25zKS5vbkV4aXRDb21wbGV0ZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwoX2QpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE5vZGVTdGFjay5wcm90b3R5cGUuc2NoZWR1bGVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBub2RlLmluc3RhbmNlICYmIG5vZGUuc2NoZWR1bGVSZW5kZXIoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFyIGFueSBsZWFkcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkIHRoaXMgcmVuZGVyIHRvIHByZXZlbnQgdGhlbSBmcm9tIGJlaW5nXG4gICAgICogdXNlZCBpbiBmdXR1cmUgYW5pbWF0aW9ucyBhbmQgdG8gcHJldmVudCBtZW1vcnkgbGVha3NcbiAgICAgKi9cbiAgICBOb2RlU3RhY2sucHJvdG90eXBlLnJlbW92ZUxlYWRTbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVhZCAmJiB0aGlzLmxlYWQuc25hcHNob3QpIHtcbiAgICAgICAgICAgIHRoaXMubGVhZC5zbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE5vZGVTdGFjaztcbn0oKSk7XG5cbmV4cG9ydCB7IE5vZGVTdGFjayB9O1xuIiwidmFyIHNjYWxlQ29ycmVjdG9ycyA9IHt9O1xuZnVuY3Rpb24gYWRkU2NhbGVDb3JyZWN0b3IoY29ycmVjdG9ycykge1xuICAgIE9iamVjdC5hc3NpZ24oc2NhbGVDb3JyZWN0b3JzLCBjb3JyZWN0b3JzKTtcbn1cblxuZXhwb3J0IHsgYWRkU2NhbGVDb3JyZWN0b3IsIHNjYWxlQ29ycmVjdG9ycyB9O1xuIiwidmFyIGlkZW50aXR5UHJvamVjdGlvbiA9IFwidHJhbnNsYXRlM2QoMHB4LCAwcHgsIDApIHNjYWxlKDEsIDEpXCI7XG5mdW5jdGlvbiBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0oZGVsdGEsIHRyZWVTY2FsZSwgbGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zbGF0aW9ucyB3ZSB1c2UgdG8gY2FsY3VsYXRlIGFyZSBhbHdheXMgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3BhY2UuXG4gICAgICogQnV0IHdoZW4gd2UgYXBwbHkgc2NhbGVzLCB3ZSBhbHNvIHNjYWxlIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBGb3IgaW5zdGFuY2UgaWYgd2UgaGF2ZSBhIHRyZWVTY2FsZSAodGhlIGN1bG1pbmF0aW9uIG9mIGFsbCBwYXJlbnQgc2NhbGVzKSBvZiAwLjUgYW5kIHdlIG5lZWRcbiAgICAgKiB0byBtb3ZlIGFuIGVsZW1lbnQgMTAwIHBpeGVscywgd2UgYWN0dWFsbHkgbmVlZCB0byBtb3ZlIGl0IDIwMCBpbiB3aXRoaW4gdGhhdCBzY2FsZWQgc3BhY2UuXG4gICAgICovXG4gICAgdmFyIHhUcmFuc2xhdGUgPSBkZWx0YS54LnRyYW5zbGF0ZSAvIHRyZWVTY2FsZS54O1xuICAgIHZhciB5VHJhbnNsYXRlID0gZGVsdGEueS50cmFuc2xhdGUgLyB0cmVlU2NhbGUueTtcbiAgICB2YXIgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIi5jb25jYXQoeFRyYW5zbGF0ZSwgXCJweCwgXCIpLmNvbmNhdCh5VHJhbnNsYXRlLCBcInB4LCAwKSBcIik7XG4gICAgaWYgKGxhdGVzdFRyYW5zZm9ybSkge1xuICAgICAgICB2YXIgcm90YXRlID0gbGF0ZXN0VHJhbnNmb3JtLnJvdGF0ZSwgcm90YXRlWCA9IGxhdGVzdFRyYW5zZm9ybS5yb3RhdGVYLCByb3RhdGVZID0gbGF0ZXN0VHJhbnNmb3JtLnJvdGF0ZVk7XG4gICAgICAgIGlmIChyb3RhdGUpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gXCJyb3RhdGUoXCIuY29uY2F0KHJvdGF0ZSwgXCJkZWcpIFwiKTtcbiAgICAgICAgaWYgKHJvdGF0ZVgpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gXCJyb3RhdGVYKFwiLmNvbmNhdChyb3RhdGVYLCBcImRlZykgXCIpO1xuICAgICAgICBpZiAocm90YXRlWSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBcInJvdGF0ZVkoXCIuY29uY2F0KHJvdGF0ZVksIFwiZGVnKSBcIik7XG4gICAgfVxuICAgIHRyYW5zZm9ybSArPSBcInNjYWxlKFwiLmNvbmNhdChkZWx0YS54LnNjYWxlLCBcIiwgXCIpLmNvbmNhdChkZWx0YS55LnNjYWxlLCBcIilcIik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSA9PT0gaWRlbnRpdHlQcm9qZWN0aW9uID8gXCJub25lXCIgOiB0cmFuc2Zvcm07XG59XG5cbmV4cG9ydCB7IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSwgaWRlbnRpdHlQcm9qZWN0aW9uIH07XG4iLCJmdW5jdGlvbiBlYWNoQXhpcyhjYWxsYmFjaykge1xuICAgIHJldHVybiBbY2FsbGJhY2soXCJ4XCIpLCBjYWxsYmFjayhcInlcIildO1xufVxuXG5leHBvcnQgeyBlYWNoQXhpcyB9O1xuIiwiLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIHRyYW5zZm9ybWFibGUgYXhlcy4gV2UnbGwgdXNlIHRoaXMgbGlzdCB0byBnZW5lcmF0ZWQgYSB2ZXJzaW9uXG4gKiBvZiBlYWNoIGF4ZXMgZm9yIGVhY2ggdHJhbnNmb3JtLlxuICovXG52YXIgdHJhbnNmb3JtQXhlcyA9IFtcIlwiLCBcIlhcIiwgXCJZXCIsIFwiWlwiXTtcbi8qKlxuICogQW4gb3JkZXJlZCBhcnJheSBvZiBlYWNoIHRyYW5zZm9ybWFibGUgdmFsdWUuIEJ5IGRlZmF1bHQsIHRyYW5zZm9ybSB2YWx1ZXNcbiAqIHdpbGwgYmUgc29ydGVkIHRvIHRoaXMgb3JkZXIuXG4gKi9cbnZhciBvcmRlciA9IFtcInRyYW5zbGF0ZVwiLCBcInNjYWxlXCIsIFwicm90YXRlXCIsIFwic2tld1wiXTtcbi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIGV2ZXJ5IHBvc3NpYmxlIHRyYW5zZm9ybSBrZXkuXG4gKi9cbnZhciB0cmFuc2Zvcm1Qcm9wcyA9IFtcInRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwieFwiLCBcInlcIiwgXCJ6XCJdO1xub3JkZXIuZm9yRWFjaChmdW5jdGlvbiAob3BlcmF0aW9uS2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybUF4ZXMuZm9yRWFjaChmdW5jdGlvbiAoYXhlc0tleSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtUHJvcHMucHVzaChvcGVyYXRpb25LZXkgKyBheGVzS2V5KTtcbiAgICB9KTtcbn0pO1xuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIHVzZSB3aXRoIEFycmF5LnNvcnQgdG8gc29ydCB0cmFuc2Zvcm0ga2V5cyBieSB0aGVpciBkZWZhdWx0IG9yZGVyLlxuICovXG5mdW5jdGlvbiBzb3J0VHJhbnNmb3JtUHJvcHMoYSwgYikge1xuICAgIHJldHVybiB0cmFuc2Zvcm1Qcm9wcy5pbmRleE9mKGEpIC0gdHJhbnNmb3JtUHJvcHMuaW5kZXhPZihiKTtcbn1cbi8qKlxuICogQSBxdWljayBsb29rdXAgZm9yIHRyYW5zZm9ybSBwcm9wcy5cbiAqL1xudmFyIHRyYW5zZm9ybVByb3BTZXQgPSBuZXcgU2V0KHRyYW5zZm9ybVByb3BzKTtcbmZ1bmN0aW9uIGlzVHJhbnNmb3JtUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUHJvcFNldC5oYXMoa2V5KTtcbn1cbi8qKlxuICogQSBxdWljayBsb29rdXAgZm9yIHRyYW5zZm9ybSBvcmlnaW4gcHJvcHNcbiAqL1xudmFyIHRyYW5zZm9ybU9yaWdpblByb3BzID0gbmV3IFNldChbXCJvcmlnaW5YXCIsIFwib3JpZ2luWVwiLCBcIm9yaWdpblpcIl0pO1xuZnVuY3Rpb24gaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wKGtleSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1PcmlnaW5Qcm9wcy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IHsgaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wLCBpc1RyYW5zZm9ybVByb3AsIHNvcnRUcmFuc2Zvcm1Qcm9wcywgdHJhbnNmb3JtQXhlcywgdHJhbnNmb3JtUHJvcHMgfTtcbiIsInZhciBjb21wYXJlQnlEZXB0aCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZGVwdGggLSBiLmRlcHRoO1xufTtcblxuZXhwb3J0IHsgY29tcGFyZUJ5RGVwdGggfTtcbiIsImltcG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIHJlbW92ZUl0ZW0gfSBmcm9tICcuLi8uLi91dGlscy9hcnJheS5tanMnO1xuaW1wb3J0IHsgY29tcGFyZUJ5RGVwdGggfSBmcm9tICcuL2NvbXBhcmUtYnktZGVwdGgubWpzJztcblxudmFyIEZsYXRUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXRUcmVlKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgICBGbGF0VHJlZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH07XG4gICAgRmxhdFRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZW1vdmVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9O1xuICAgIEZsYXRUcmVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSAmJiB0aGlzLmNoaWxkcmVuLnNvcnQoY29tcGFyZUJ5RGVwdGgpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0VHJlZTtcbn0oKSk7XG5cbmV4cG9ydCB7IEZsYXRUcmVlIH07XG4iLCJpbXBvcnQgeyBpc0N1c3RvbVZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4vaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbi8qKlxuICogSWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGEgTW90aW9uVmFsdWUsIHRoaXMgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlLCBvdGhlcndpc2UganVzdCB0aGUgdmFsdWUgaXRzZWxmXG4gKlxuICogVE9ETzogUmVtb3ZlIGFuZCBtb3ZlIHRvIGxpYnJhcnlcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHVud3JhcHBlZFZhbHVlID0gaXNNb3Rpb25WYWx1ZSh2YWx1ZSkgPyB2YWx1ZS5nZXQoKSA6IHZhbHVlO1xuICAgIHJldHVybiBpc0N1c3RvbVZhbHVlKHVud3JhcHBlZFZhbHVlKVxuICAgICAgICA/IHVud3JhcHBlZFZhbHVlLnRvVmFsdWUoKVxuICAgICAgICA6IHVud3JhcHBlZFZhbHVlO1xufVxuXG5leHBvcnQgeyByZXNvbHZlTW90aW9uVmFsdWUgfTtcbiIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXksIF9fcmVhZCwgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgc3luYywgeyBjYW5jZWxTeW5jLCBmbHVzaFN5bmMgfSBmcm9tICdmcmFtZXN5bmMnO1xuaW1wb3J0IHsgbWl4IH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IGFuaW1hdGUgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vYW5pbWF0ZS5tanMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uLy4uL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyc7XG5pbXBvcnQgeyBtaXhWYWx1ZXMgfSBmcm9tICcuLi9hbmltYXRpb24vbWl4LXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgY29weUJveEludG8gfSBmcm9tICcuLi9nZW9tZXRyeS9jb3B5Lm1qcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGVBeGlzLCB0cmFuc2Zvcm1Cb3gsIGFwcGx5Qm94RGVsdGEsIGFwcGx5VHJlZURlbHRhcyB9IGZyb20gJy4uL2dlb21ldHJ5L2RlbHRhLWFwcGx5Lm1qcyc7XG5pbXBvcnQgeyBjYWxjUmVsYXRpdmVQb3NpdGlvbiwgY2FsY1JlbGF0aXZlQm94LCBjYWxjQm94RGVsdGEsIGNhbGNMZW5ndGggfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1jYWxjLm1qcyc7XG5pbXBvcnQgeyByZW1vdmVCb3hUcmFuc2Zvcm1zIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVCb3gsIGNyZWF0ZURlbHRhIH0gZnJvbSAnLi4vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcbmltcG9ydCB7IGJveEVxdWFscywgaXNEZWx0YVplcm8gfSBmcm9tICcuLi9nZW9tZXRyeS91dGlscy5tanMnO1xuaW1wb3J0IHsgTm9kZVN0YWNrIH0gZnJvbSAnLi4vc2hhcmVkL3N0YWNrLm1qcyc7XG5pbXBvcnQgeyBzY2FsZUNvcnJlY3RvcnMgfSBmcm9tICcuLi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIH0gZnJvbSAnLi4vc3R5bGVzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgZWFjaEF4aXMgfSBmcm9tICcuLi91dGlscy9lYWNoLWF4aXMubWpzJztcbmltcG9ydCB7IGhhc1RyYW5zZm9ybSwgaGFzU2NhbGUgfSBmcm9tICcuLi91dGlscy9oYXMtdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1BeGVzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBGbGF0VHJlZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzJztcbmltcG9ydCB7IHJlc29sdmVNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyc7XG5cbi8qKlxuICogV2UgdXNlIDEwMDAgYXMgdGhlIGFuaW1hdGlvbiB0YXJnZXQgYXMgMC0xMDAwIG1hcHMgYmV0dGVyIHRvIHBpeGVscyB0aGFuIDAtMVxuICogd2hpY2ggaGFzIGEgbm90aWNlYWJsZSBkaWZmZXJlbmNlIGluIHNwcmluZyBhbmltYXRpb25zXG4gKi9cbnZhciBhbmltYXRpb25UYXJnZXQgPSAxMDAwO1xuLyoqXG4gKiBUaGlzIHNob3VsZCBvbmx5IGV2ZXIgYmUgbW9kaWZpZWQgb24gdGhlIGNsaWVudCBvdGhlcndpc2UgaXQnbGxcbiAqIHBlcnNpc3QgdGhyb3VnaCBzZXJ2ZXIgcmVxdWVzdHMuIElmIHdlIG5lZWQgaW5zdGFuY2VkIHN0YXRlcyB3ZVxuICogY291bGQgbGF6eS1pbml0IHZpYSByb290LlxuICovXG52YXIgZ2xvYmFsUHJvamVjdGlvblN0YXRlID0ge1xuICAgIC8qKlxuICAgICAqIEdsb2JhbCBmbGFnIGFzIHRvIHdoZXRoZXIgdGhlIHRyZWUgaGFzIGFuaW1hdGVkIHNpbmNlIHRoZSBsYXN0IHRpbWVcbiAgICAgKiB3ZSByZXNpemVkIHRoZSB3aW5kb3dcbiAgICAgKi9cbiAgICBoYXNBbmltYXRlZFNpbmNlUmVzaXplOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIFdlIHNldCB0aGlzIHRvIHRydWUgb25jZSwgb24gdGhlIGZpcnN0IHVwZGF0ZS4gQW55IG5vZGVzIGFkZGVkIHRvIHRoZSB0cmVlIGJleW9uZCB0aGF0XG4gICAgICogdXBkYXRlIHdpbGwgYmUgZ2l2ZW4gYSBgZGF0YS1wcm9qZWN0aW9uLWlkYCBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgaGFzRXZlclVwZGF0ZWQ6IGZhbHNlLFxufTtcbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3Rpb25Ob2RlKF9hKSB7XG4gICAgdmFyIGF0dGFjaFJlc2l6ZUxpc3RlbmVyID0gX2EuYXR0YWNoUmVzaXplTGlzdGVuZXIsIGRlZmF1bHRQYXJlbnQgPSBfYS5kZWZhdWx0UGFyZW50LCBtZWFzdXJlU2Nyb2xsID0gX2EubWVhc3VyZVNjcm9sbCwgcmVzZXRUcmFuc2Zvcm0gPSBfYS5yZXNldFRyYW5zZm9ybTtcbiAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBQcm9qZWN0aW9uTm9kZShpZCwgbGF0ZXN0VmFsdWVzLCBwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzID09PSB2b2lkIDApIHsgbGF0ZXN0VmFsdWVzID0ge307IH1cbiAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IHZvaWQgMCkgeyBwYXJlbnQgPSBkZWZhdWx0UGFyZW50ID09PSBudWxsIHx8IGRlZmF1bHRQYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRQYXJlbnQoKTsgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIFNldCBjb250YWluaW5nIGFsbCB0aGlzIGNvbXBvbmVudCdzIGNoaWxkcmVuLiBUaGlzIGlzIHVzZWQgdG8gaXRlcmF0ZVxuICAgICAgICAgICAgICogdGhyb3VnaCB0aGUgY2hpbGRyZW4uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogVGhpcyBjb3VsZCBiZSBmYXN0ZXIgdG8gaXRlcmF0ZSBhcyBhIGZsYXQgYXJyYXkgc3RvcmVkIG9uIHRoZSByb290IG5vZGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9wdGlvbnMgZm9yIHRoZSBub2RlLiBXZSB1c2UgdGhpcyB0byBjb25maWd1cmUgd2hhdCBraW5kIG9mIGxheW91dCBhbmltYXRpb25zXG4gICAgICAgICAgICAgKiB3ZSBzaG91bGQgcGVyZm9ybSAoaWYgYW55KS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdlIHVzZSB0aGlzIHRvIGRldGVjdCB3aGVuIGl0cyBzYWZlIHRvIHNodXQgZG93biBwYXJ0IG9mIGEgcHJvamVjdGlvbiB0cmVlLlxuICAgICAgICAgICAgICogV2UgaGF2ZSB0byBrZWVwIHByb2plY3RpbmcgY2hpbGRyZW4gZm9yIHNjYWxlIGNvcnJlY3Rpb24gYW5kIHJlbGF0aXZlIHByb2plY3Rpb25cbiAgICAgICAgICAgICAqIHVudGlsIGFsbCB0aGVpciBwYXJlbnRzIHN0b3AgcGVyZm9ybWluZyBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1RyZWVBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpb25CbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZsYWcgdG8gdHJ1ZSBpZiB3ZSB0aGluayB0aGlzIGxheW91dCBoYXMgYmVlbiBjaGFuZ2VkLiBXZSBjYW4ndCBhbHdheXMga25vdyB0aGlzLFxuICAgICAgICAgICAgICogY3VycmVudGx5IHdlIHNldCBpdCB0byB0cnVlIGV2ZXJ5IHRpbWUgYSBjb21wb25lbnQgcmVuZGVycywgb3IgaWYgaXQgaGFzIGEgbGF5b3V0RGVwZW5kZW5jeVxuICAgICAgICAgICAgICogaWYgdGhhdCBoYXMgY2hhbmdlZCBiZXR3ZWVuIHJlbmRlcnMuIEFkZGl0aW9uYWxseSwgY29tcG9uZW50cyBjYW4gYmUgZ3JvdXBlZCBieSBMYXlvdXRHcm91cFxuICAgICAgICAgICAgICogYW5kIGlmIG9uZSBub2RlIGlzIGRpcnRpZWQsIHRoZXkgYWxsIGFyZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJsb2NrIGxheW91dCB1cGRhdGVzIGZvciBpbnN0YW50IGxheW91dCB0cmFuc2l0aW9ucyB0aHJvdWdob3V0IHRoZSB0cmVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVCbG9ja2VkQnlSZXNpemUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRvIHRydWUgYmV0d2VlbiB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGB3aWxsVXBkYXRlYCBjYWxsIGFuZCB0aGUgZW5kIG9mIHRoZSBgZGlkVXBkYXRlYFxuICAgICAgICAgICAgICogY2FsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gU1ZHIGVsZW1lbnQgd2UgY3VycmVudGx5IGRpc2FibGUgcHJvamVjdGlvbiB0cmFuc2Zvcm1zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNTVkcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZyB0byB0cnVlIChkdXJpbmcgcHJvbW90aW9uKSBpZiBhIG5vZGUgZG9pbmcgYW4gaW5zdGFudCBsYXlvdXQgdHJhbnNpdGlvbiBuZWVkcyB0byByZXNldFxuICAgICAgICAgICAgICogaXRzIHByb2plY3Rpb24gc3R5bGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmxhZ3Mgd2hldGhlciB0aGlzIG5vZGUgc2hvdWxkIGhhdmUgaXRzIHRyYW5zZm9ybSByZXNldCBwcmlvciB0byBtZWFzdXJpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVzZXRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY2FsY3VsYXRlZCBjb250ZXh0dWFsL2FjY3VtdWxhdGVkL3RyZWUgc2NhbGUuXG4gICAgICAgICAgICAgKiBUaGlzIHdpbGwgYmUgdXNlZCB0byBzY2FsZSBjYWxjdWxjYXRlZCBwcm9qZWN0aW9uIHRyYW5zZm9ybXMsIGFzIHRoZXNlIGFyZVxuICAgICAgICAgICAgICogY2FsY3VsYXRlZCBpbiBzY3JlZW4tc3BhY2UgYnV0IG5lZWQgdG8gYmUgc2NhbGVkIGZvciBlbGVtZW50cyB0byBhY3R1YWxseVxuICAgICAgICAgICAgICogbWFrZSBpdCB0byB0aGVpciBjYWxjdWxhdGVkIGRlc3RpbmF0aW9ucy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBMYXp5LWluaXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy50cmVlU2NhbGUgPSB7IHg6IDEsIHk6IDEgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgLy8gTm90ZTogQ3VycmVudGx5IG9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgICAgIHRoaXMucG90ZW50aWFsTm9kZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVXBkYXRlRmFpbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xlYXJBbGxTbmFwc2hvdHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm5vZGVzLmZvckVhY2gocmVzb2x2ZVRhcmdldERlbHRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub2Rlcy5mb3JFYWNoKGNhbGNQcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNoYXJlZCBsYXlvdXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gVE9ETyBPbmx5IHJ1bm5pbmcgb24gcm9vdCBub2RlXG4gICAgICAgICAgICB0aGlzLnNoYXJlZE5vZGVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5sYXRlc3RWYWx1ZXMgPSBsYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCB8fCBwYXJlbnQgOiB0aGlzO1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcGFyZW50ID8gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocGFyZW50LnBhdGgpLCBmYWxzZSksIFtwYXJlbnRdLCBmYWxzZSkgOiBbXTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICAgICAgdGhpcy5kZXB0aCA9IHBhcmVudCA/IHBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgICAgICAgaWQgJiYgdGhpcy5yb290LnJlZ2lzdGVyUG90ZW50aWFsTm9kZShpZCwgdGhpcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aFtpXS5zaG91bGRSZXNldFRyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yb290ID09PSB0aGlzKVxuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMgPSBuZXcgRmxhdFRyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVycy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMuc2V0KG5hbWUsIG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRIYW5kbGVycy5nZXQobmFtZSkuYWRkKGhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUubm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uTWFuYWdlciA9IHRoaXMuZXZlbnRIYW5kbGVycy5nZXQobmFtZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25NYW5hZ2VyID09PSBudWxsIHx8IHN1YnNjcmlwdGlvbk1hbmFnZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1YnNjcmlwdGlvbk1hbmFnZXIubm90aWZ5LmFwcGx5KHN1YnNjcmlwdGlvbk1hbmFnZXIsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSwgZmFsc2UpKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudEhhbmRsZXJzLmhhcyhuYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlZ2lzdGVyUG90ZW50aWFsTm9kZSA9IGZ1bmN0aW9uIChpZCwgbm9kZSkge1xuICAgICAgICAgICAgdGhpcy5wb3RlbnRpYWxOb2Rlcy5zZXQoaWQsIG5vZGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlmZWN5Y2xlc1xuICAgICAgICAgKi9cbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBpc0xheW91dERpcnR5KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKGlzTGF5b3V0RGlydHkgPT09IHZvaWQgMCkgeyBpc0xheW91dERpcnR5ID0gZmFsc2U7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaXNTVkcgPVxuICAgICAgICAgICAgICAgIGluc3RhbmNlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiBpbnN0YW5jZS50YWdOYW1lICE9PSBcInN2Z1wiO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5vcHRpb25zLCBsYXlvdXRJZCA9IF9iLmxheW91dElkLCBsYXlvdXQgPSBfYi5sYXlvdXQsIHZpc3VhbEVsZW1lbnQgPSBfYi52aXN1YWxFbGVtZW50O1xuICAgICAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQgJiYgIXZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSkge1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLmFkZCh0aGlzKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4uYWRkKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pZCAmJiB0aGlzLnJvb3QucG90ZW50aWFsTm9kZXMuZGVsZXRlKHRoaXMuaWQpO1xuICAgICAgICAgICAgaWYgKGlzTGF5b3V0RGlydHkgJiYgKGxheW91dCB8fCBsYXlvdXRJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dGFjaFJlc2l6ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVuYmxvY2tUaW1lb3V0XzE7XG4gICAgICAgICAgICAgICAgdmFyIHJlc2l6ZVVuYmxvY2tVcGRhdGVfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfdGhpcy5yb290LnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGF0dGFjaFJlc2l6ZUxpc3RlbmVyKGluc3RhbmNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJvb3QudXBkYXRlQmxvY2tlZEJ5UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHVuYmxvY2tUaW1lb3V0XzEpO1xuICAgICAgICAgICAgICAgICAgICB1bmJsb2NrVGltZW91dF8xID0gd2luZG93LnNldFRpbWVvdXQocmVzaXplVW5ibG9ja1VwZGF0ZV8xLCAyNTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0FuaW1hdGVkU2luY2VSZXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub2Rlcy5mb3JFYWNoKGZpbmlzaEFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYXlvdXRJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdC5yZWdpc3RlclNoYXJlZE5vZGUobGF5b3V0SWQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT25seSByZWdpc3RlciB0aGUgaGFuZGxlciBpZiBpdCByZXF1aXJlcyBsYXlvdXQgYW5pbWF0aW9uXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIChsYXlvdXRJZCB8fCBsYXlvdXQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZGlkVXBkYXRlXCIsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBfYS5kZWx0YSwgaGFzTGF5b3V0Q2hhbmdlZCA9IF9hLmhhc0xheW91dENoYW5nZWQsIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9IF9hLmhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCwgbmV3TGF5b3V0ID0gX2EubGF5b3V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWxhdGl2ZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBDaGVjayBoZXJlIGlmIGFuIGFuaW1hdGlvbiBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxheW91dFRyYW5zaXRpb24gPSAoX2MgPSAoX2IgPSBfdGhpcy5vcHRpb25zLnRyYW5zaXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGVmYXVsdExheW91dFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpLm9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGU7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUaGUgdGFyZ2V0IGxheW91dCBvZiB0aGUgZWxlbWVudCBtaWdodCBzdGF5IHRoZSBzYW1lLFxuICAgICAgICAgICAgICAgICAgICAgKiBidXQgaXRzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0Q2hhbmdlZCA9ICFfdGhpcy50YXJnZXRMYXlvdXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFib3hFcXVhbHMoX3RoaXMudGFyZ2V0TGF5b3V0LCBuZXdMYXlvdXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGUgbGF5b3V0IGhhc24ndCBzZWVtZWQgdG8gaGF2ZSBjaGFuZ2VkLCBpdCBtaWdodCBiZSB0aGF0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgKiBlbGVtZW50IGlzIHZpc3VhbGx5IGluIHRoZSBzYW1lIHBsYWNlIGluIHRoZSBkb2N1bWVudCBidXQgaXRzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgaGFzIGluZGVlZCBjaGFuZ2VkLiBTbyBoZXJlIHdlIGNoZWNrIGZvciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQgPSAhaGFzTGF5b3V0Q2hhbmdlZCAmJiBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoKF9kID0gX3RoaXMucmVzdW1lRnJvbSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmluc3RhbmNlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGhhc0xheW91dENoYW5nZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0Q2hhbmdlZCB8fCAhX3RoaXMuY3VycmVudEFuaW1hdGlvbikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucmVzdW1lRnJvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc3VtaW5nRnJvbSA9IF90aGlzLnJlc3VtZUZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzdW1pbmdGcm9tLnJlc3VtaW5nRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEFuaW1hdGlvbk9yaWdpbihkZWx0YSwgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uT3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBnZXRWYWx1ZVRyYW5zaXRpb24obGF5b3V0VHJhbnNpdGlvbiwgXCJsYXlvdXRcIikpLCB7IG9uQ29tcGxldGU6IG9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC5zaG91bGRSZWR1Y2VNb3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25PcHRpb25zLmRlbGF5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25PcHRpb25zLnR5cGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0QW5pbWF0aW9uKGFuaW1hdGlvbk9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBJZiB0aGUgbGF5b3V0IGhhc24ndCBjaGFuZ2VkIGFuZCB3ZSBoYXZlIGFuIGFuaW1hdGlvbiB0aGF0IGhhc24ndCBzdGFydGVkIHlldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGZpbmlzaCBpdCBpbW1lZGlhdGVseS4gT3RoZXJ3aXNlIGl0IHdpbGwgYmUgYW5pbWF0aW5nIGZyb20gYSBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICogdGhhdCB3YXMgcHJvYmFibHkgbmV2ZXIgY29tbWl0ZWQgdG8gc2NyZWVuIGFuZCBsb29rIGxpa2UgYSBqdW1weSBib3guXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzTGF5b3V0Q2hhbmdlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvblByb2dyZXNzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmluaXNoQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc0xlYWQoKSAmJiAoKF9mID0gKF9lID0gX3RoaXMub3B0aW9ucykub25FeGl0Q29tcGxldGUpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudGFyZ2V0TGF5b3V0ID0gbmV3TGF5b3V0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGF5b3V0SWQgJiYgdGhpcy53aWxsVXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgKF9iID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jaGlsZHJlbi5kZWxldGUodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuY2VsU3luYy5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gb25seSBvbiB0aGUgcm9vdFxuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuYmxvY2tVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS51bmJsb2NrVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYW51YWxseUJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmlzVXBkYXRlQmxvY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1hbnVhbGx5QmxvY2tlZCB8fCB0aGlzLnVwZGF0ZUJsb2NrZWRCeVJlc2l6ZTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmlzVHJlZUFuaW1hdGlvbkJsb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuaXNBbmltYXRpb25CbG9ja2VkIHx8XG4gICAgICAgICAgICAgICAgKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCgpKSB8fFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTm90ZTogY3VycmVudGx5IG9ubHkgcnVubmluZyBvbiByb290IG5vZGVcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnN0YXJ0VXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNVcGRhdGVCbG9ja2VkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMubm9kZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKHJlc2V0Um90YXRpb24pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUud2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIChzaG91bGROb3RpZnlMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUxpc3RlbmVycyA9PT0gdm9pZCAwKSB7IHNob3VsZE5vdGlmeUxpc3RlbmVycyA9IHRydWU7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QuaXNVcGRhdGVCbG9ja2VkKCkpIHtcbiAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uRXhpdENvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIXRoaXMucm9vdC5pc1VwZGF0aW5nICYmIHRoaXMucm9vdC5zdGFydFVwZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXREaXJ0eSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICBub2RlLnNob3VsZFJlc2V0VHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUT0RPOiBDaGVjayB3ZSBoYXZlbid0IHVwZGF0ZWQgdGhlIHNjcm9sbFxuICAgICAgICAgICAgICAgICAqIHNpbmNlIHRoZSBsYXN0IGRpZFVwZGF0ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2QgPSB0aGlzLm9wdGlvbnMsIGxheW91dElkID0gX2QubGF5b3V0SWQsIGxheW91dCA9IF9kLmxheW91dDtcbiAgICAgICAgICAgIGlmIChsYXlvdXRJZCA9PT0gdW5kZWZpbmVkICYmICFsYXlvdXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlID0gKF9jID0gdGhpcy5vcHRpb25zLnZpc3VhbEVsZW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5nZXRQcm9wcygpLnRyYW5zZm9ybVRlbXBsYXRlO1xuICAgICAgICAgICAgdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHRyYW5zZm9ybVRlbXBsYXRlID09PSBudWxsIHx8IHRyYW5zZm9ybVRlbXBsYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zvcm1UZW1wbGF0ZSh0aGlzLmxhdGVzdFZhbHVlcywgXCJcIik7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNuYXBzaG90KCk7XG4gICAgICAgICAgICBzaG91bGROb3RpZnlMaXN0ZW5lcnMgJiYgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoXCJ3aWxsVXBkYXRlXCIpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBOb3RlOiBDdXJyZW50bHkgb25seSBydW5uaW5nIG9uIHJvb3Qgbm9kZVxuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZVdhc0Jsb2NrZWQgPSB0aGlzLmlzVXBkYXRlQmxvY2tlZCgpO1xuICAgICAgICAgICAgLy8gV2hlbiBkb2luZyBhbiBpbnN0YW50IHRyYW5zaXRpb24sIHdlIHNraXAgdGhlIGxheW91dCB1cGRhdGUsXG4gICAgICAgICAgICAvLyBidXQgc2hvdWxkIHN0aWxsIGNsZWFuIHVwIHRoZSBtZWFzdXJlbWVudHMgc28gdGhhdCB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gc25hcHNob3QgY291bGQgYmUgdGFrZW4gY29ycmVjdGx5LlxuICAgICAgICAgICAgaWYgKHVwZGF0ZVdhc0Jsb2NrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmxvY2tVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFyTWVhc3VyZW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGluZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2VhcmNoIGZvciBhbmQgbW91bnQgbmV3bHktYWRkZWQgcHJvamVjdGlvbiBlbGVtZW50cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBFdmVyeSB0aW1lIGEgbmV3IGNvbXBvbmVudCBpcyByZW5kZXJlZCB3ZSBjb3VsZCBzZWFyY2ggdXAgdGhlIHRyZWUgZm9yXG4gICAgICAgICAgICAgKiB0aGUgY2xvc2VzdCBtb3VudGVkIG5vZGUgYW5kIHF1ZXJ5IGZyb20gdGhlcmUgcmF0aGVyIHRoYW4gZG9jdW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnBvdGVudGlhbE5vZGVzLnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvdGVudGlhbE5vZGVzLmZvckVhY2gobW91bnROb2RlRWFybHkpO1xuICAgICAgICAgICAgICAgIHRoaXMucG90ZW50aWFsTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV3JpdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKHJlc2V0VHJhbnNmb3JtU3R5bGUpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZWFkID09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBVcGRhdGUgbGF5b3V0IG1lYXN1cmVtZW50cyBvZiB1cGRhdGVkIGNoaWxkcmVuXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2godXBkYXRlTGF5b3V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV3JpdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVycyB0aGF0IHRoZSBsYXlvdXQgaXMgdXBkYXRlZFxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKG5vdGlmeUxheW91dFVwZGF0ZSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQWxsU25hcHNob3RzKCk7XG4gICAgICAgICAgICAvLyBGbHVzaCBhbnkgc2NoZWR1bGVkIHVwZGF0ZXNcbiAgICAgICAgICAgIGZsdXNoU3luYy51cGRhdGUoKTtcbiAgICAgICAgICAgIGZsdXNoU3luYy5wcmVSZW5kZXIoKTtcbiAgICAgICAgICAgIGZsdXNoU3luYy5yZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmNsZWFyQWxsU25hcHNob3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGNsZWFyU25hcHNob3QpO1xuICAgICAgICAgICAgdGhpcy5zaGFyZWROb2Rlcy5mb3JFYWNoKHJlbW92ZUxlYWRTbmFwc2hvdHMpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuc2NoZWR1bGVVcGRhdGVQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3luYy5wcmVSZW5kZXIodGhpcy51cGRhdGVQcm9qZWN0aW9uLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5zY2hlZHVsZUNoZWNrQWZ0ZXJVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIHVubW91bnRpbmcgbm9kZSBpcyBpbiBhIGxheW91dEdyb3VwIGFuZCBkaWQgdHJpZ2dlciBhIHdpbGxVcGRhdGUsXG4gICAgICAgICAgICAgKiB3ZSBtYW51YWxseSBjYWxsIGRpZFVwZGF0ZSB0byBnaXZlIGEgY2hhbmNlIHRvIHRoZSBzaWJsaW5ncyB0byBhbmltYXRlLlxuICAgICAgICAgICAgICogT3RoZXJ3aXNlLCBjbGVhbnVwIGFsbCBzbmFwc2hvdHMgdG8gcHJldmVudHMgZnV0dXJlIG5vZGVzIGZyb20gcmV1c2luZyB0aGVtLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzeW5jLnBvc3RSZW5kZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0xheW91dERpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJvb3QuZGlkVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb290LmNoZWNrVXBkYXRlRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgbWVhc3VyZW1lbnRzXG4gICAgICAgICAqL1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUudXBkYXRlU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zbmFwc2hvdCB8fCAhdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgbWVhc3VyZWQgPSB0aGlzLm1lYXN1cmUoKTtcbiAgICAgICAgICAgIHZhciBsYXlvdXQgPSB0aGlzLnJlbW92ZVRyYW5zZm9ybSh0aGlzLnJlbW92ZUVsZW1lbnRTY3JvbGwobWVhc3VyZWQpKTtcbiAgICAgICAgICAgIHJvdW5kQm94KGxheW91dCk7XG4gICAgICAgICAgICB0aGlzLnNuYXBzaG90ID0ge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVkOiBtZWFzdXJlZCxcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dCxcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXM6IHt9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnVwZGF0ZUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBUT0RPOiBJbmNvcnBvcmF0ZSBpbnRvIGEgZm9yd2FyZGVkIHNjcm9sbCBvZmZzZXRcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWx3YXlzTWVhc3VyZUxheW91dCAmJiB0aGlzLmlzTGVhZCgpKSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmlzTGF5b3V0RGlydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gYSBub2RlIGlzIG1vdW50ZWQsIGl0IHNpbXBseSByZXN1bWVzIGZyb20gdGhlIHByZXZMZWFkJ3NcbiAgICAgICAgICAgICAqIHNuYXBzaG90IGluc3RlYWQgb2YgdGFraW5nIGEgbmV3IG9uZSwgYnV0IHRoZSBhbmNlc3RvcnMgc2Nyb2xsXG4gICAgICAgICAgICAgKiBtaWdodCBoYXZlIHVwZGF0ZWQgd2hpbGUgdGhlIHByZXZMZWFkIGlzIHVubW91bnRlZC4gV2UgbmVlZCB0b1xuICAgICAgICAgICAgICogdXBkYXRlIHRoZSBzY3JvbGwgYWdhaW4gdG8gbWFrZSBzdXJlIHRoZSBsYXlvdXQgd2UgbWVhc3VyZSBpc1xuICAgICAgICAgICAgICogdXAgdG8gZGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdW1lRnJvbSAmJiAhdGhpcy5yZXN1bWVGcm9tLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1lYXN1cmVkID0gdGhpcy5tZWFzdXJlKCk7XG4gICAgICAgICAgICByb3VuZEJveChtZWFzdXJlZCk7XG4gICAgICAgICAgICB2YXIgcHJldkxheW91dCA9IHRoaXMubGF5b3V0O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZWQ6IG1lYXN1cmVkLFxuICAgICAgICAgICAgICAgIGFjdHVhbDogdGhpcy5yZW1vdmVFbGVtZW50U2Nyb2xsKG1lYXN1cmVkKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmxheW91dENvcnJlY3RlZCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgdGhpcy5pc0xheW91dERpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwibWVhc3VyZVwiLCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5vcHRpb25zLnZpc3VhbEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub3RpZnlMYXlvdXRNZWFzdXJlKHRoaXMubGF5b3V0LmFjdHVhbCwgcHJldkxheW91dCA9PT0gbnVsbCB8fCBwcmV2TGF5b3V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmV2TGF5b3V0LmFjdHVhbCk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS51cGRhdGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheW91dFNjcm9sbCAmJiB0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSBtZWFzdXJlU2Nyb2xsKHRoaXMuaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVzZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIXJlc2V0VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpc1Jlc2V0UmVxdWVzdGVkID0gdGhpcy5pc0xheW91dERpcnR5IHx8IHRoaXMuc2hvdWxkUmVzZXRUcmFuc2Zvcm07XG4gICAgICAgICAgICB2YXIgaGFzUHJvamVjdGlvbiA9IHRoaXMucHJvamVjdGlvbkRlbHRhICYmICFpc0RlbHRhWmVybyh0aGlzLnByb2plY3Rpb25EZWx0YSk7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHRyYW5zZm9ybVRlbXBsYXRlID09PSBudWxsIHx8IHRyYW5zZm9ybVRlbXBsYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zvcm1UZW1wbGF0ZSh0aGlzLmxhdGVzdFZhbHVlcywgXCJcIik7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGVIYXNDaGFuZ2VkID0gdHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSAhPT0gdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChpc1Jlc2V0UmVxdWVzdGVkICYmXG4gICAgICAgICAgICAgICAgKGhhc1Byb2plY3Rpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSB8fFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgcmVzZXRUcmFuc2Zvcm0odGhpcy5pbnN0YW5jZSwgdHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRSZXNldFRyYW5zZm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmlzdWFsRWxlbWVudCA9IHRoaXMub3B0aW9ucy52aXN1YWxFbGVtZW50O1xuICAgICAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIHZhciBib3ggPSB2aXN1YWxFbGVtZW50Lm1lYXN1cmVWaWV3cG9ydEJveCgpO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHZpZXdwb3J0IHNjcm9sbCB0byBnaXZlIHBhZ2UtcmVsYXRpdmUgY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIHZhciBzY3JvbGwgPSB0aGlzLnJvb3Quc2Nyb2xsO1xuICAgICAgICAgICAgaWYgKHNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94LngsIHNjcm9sbC54KTtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVBeGlzKGJveC55LCBzY3JvbGwueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94O1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVtb3ZlRWxlbWVudFNjcm9sbCA9IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgICAgIHZhciBib3hXaXRob3V0U2Nyb2xsID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb3B5Qm94SW50byhib3hXaXRob3V0U2Nyb2xsLCBib3gpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQZXJmb3JtYW5jZSBUT0RPOiBLZWVwIGEgY3VtdWxhdGl2ZSBzY3JvbGwgb2Zmc2V0IGRvd24gdGhlIHRyZWVcbiAgICAgICAgICAgICAqIHJhdGhlciB0aGFuIGxvb3AgYmFjayB1cCB0aGUgcGF0aC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucGF0aFtpXTtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsXzEgPSBub2RlLnNjcm9sbCwgb3B0aW9ucyA9IG5vZGUub3B0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAhPT0gdGhpcy5yb290ICYmIHNjcm9sbF8xICYmIG9wdGlvbnMubGF5b3V0U2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUF4aXMoYm94V2l0aG91dFNjcm9sbC54LCBzY3JvbGxfMS54KTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlQXhpcyhib3hXaXRob3V0U2Nyb2xsLnksIHNjcm9sbF8xLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3hXaXRob3V0U2Nyb2xsO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuYXBwbHlUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoYm94LCB0cmFuc2Zvcm1Pbmx5KSB7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtT25seSA9PT0gdm9pZCAwKSB7IHRyYW5zZm9ybU9ubHkgPSBmYWxzZTsgfVxuICAgICAgICAgICAgdmFyIHdpdGhUcmFuc2Zvcm1zID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICBjb3B5Qm94SW50byh3aXRoVHJhbnNmb3JtcywgYm94KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Pbmx5ICYmXG4gICAgICAgICAgICAgICAgICAgIG5vZGUub3B0aW9ucy5sYXlvdXRTY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zY3JvbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZSAhPT0gbm9kZS5yb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJveCh3aXRoVHJhbnNmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogLW5vZGUuc2Nyb2xsLngsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAtbm9kZS5zY3JvbGwueSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaGFzVHJhbnNmb3JtKG5vZGUubGF0ZXN0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtQm94KHdpdGhUcmFuc2Zvcm1zLCBub2RlLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJveCh3aXRoVHJhbnNmb3JtcywgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpdGhUcmFuc2Zvcm1zO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVtb3ZlVHJhbnNmb3JtID0gZnVuY3Rpb24gKGJveCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGJveFdpdGhvdXRUcmFuc2Zvcm0gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKGJveFdpdGhvdXRUcmFuc2Zvcm0sIGJveCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wYXRoW2ldO1xuICAgICAgICAgICAgICAgIGlmICghbm9kZS5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNUcmFuc2Zvcm0obm9kZS5sYXRlc3RWYWx1ZXMpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBoYXNTY2FsZShub2RlLmxhdGVzdFZhbHVlcykgJiYgbm9kZS51cGRhdGVTbmFwc2hvdCgpO1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VCb3ggPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUJveCA9IG5vZGUubWVhc3VyZSgpO1xuICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHNvdXJjZUJveCwgbm9kZUJveCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQm94VHJhbnNmb3Jtcyhib3hXaXRob3V0VHJhbnNmb3JtLCBub2RlLmxhdGVzdFZhbHVlcywgKF9hID0gbm9kZS5zbmFwc2hvdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxheW91dCwgc291cmNlQm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zvcm0odGhpcy5sYXRlc3RWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQm94VHJhbnNmb3Jtcyhib3hXaXRob3V0VHJhbnNmb3JtLCB0aGlzLmxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94V2l0aG91dFRyYW5zZm9ybTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuc2V0VGFyZ2V0RGVsdGEgPSBmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgIHRoaXMucm9vdC5zY2hlZHVsZVVwZGF0ZVByb2plY3Rpb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIG9wdGlvbnMpLCB7IGNyb3NzZmFkZTogKF9hID0gb3B0aW9ucy5jcm9zc2ZhZGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5jbGVhck1lYXN1cmVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5wcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RGVsdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRnJhbWUgY2FsY3VsYXRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVzb2x2ZVRhcmdldERlbHRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5vcHRpb25zLCBsYXlvdXQgPSBfYi5sYXlvdXQsIGxheW91dElkID0gX2IubGF5b3V0SWQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgbm8gbGF5b3V0LCB3ZSBjYW4ndCBwZXJmb3JtIHByb2plY3Rpb24sIHNvIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMubGF5b3V0IHx8ICEobGF5b3V0IHx8IGxheW91dElkKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGRvbid0IGhhdmUgYSB0YXJnZXREZWx0YSBidXQgZG8gaGF2ZSBhIGxheW91dCwgd2UgY2FuIGF0dGVtcHQgdG8gcmVzb2x2ZVxuICAgICAgICAgICAgICogYSByZWxhdGl2ZVBhcmVudC4gVGhpcyB3aWxsIGFsbG93IGEgY29tcG9uZW50IHRvIHBlcmZvcm0gc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICogZXZlbiBpZiBubyBhbmltYXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIFRPRE8gSWYgdGhpcyBpcyB1bnN1Y2Nlc3NmdWwgdGhpcyBjdXJyZW50bHkgaGFwcGVucyBldmVyeSBmcmFtZVxuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldERlbHRhICYmICF0aGlzLnJlbGF0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBhIHNlbWktcmVwZXRpdGlvbiBvZiBmdXJ0aGVyIGRvd24gdGhpcyBmdW5jdGlvbiwgbWFrZSBEUllcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50ID0gdGhpcy5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlUGFyZW50ICYmIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbih0aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luLCB0aGlzLmxheW91dC5hY3R1YWwsIHRoaXMucmVsYXRpdmVQYXJlbnQubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMucmVsYXRpdmVUYXJnZXQsIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBubyByZWxhdGl2ZSB0YXJnZXQgb3Igbm8gdGFyZ2V0IGRlbHRhIG91ciB0YXJnZXQgaXNuJ3QgdmFsaWRcbiAgICAgICAgICAgICAqIGZvciB0aGlzIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVsYXRpdmVUYXJnZXQgJiYgIXRoaXMudGFyZ2V0RGVsdGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMYXp5LWluaXQgdGFyZ2V0IGRhdGEgc3RydWN0dXJlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V2l0aFRyYW5zZm9ybXMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UndmUgZ290IGEgcmVsYXRpdmUgYm94IGZvciB0aGlzIGNvbXBvbmVudCwgcmVzb2x2ZSBpdCBpbnRvIGEgdGFyZ2V0IHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiAmJlxuICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLnJlbGF0aXZlUGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZUJveCh0aGlzLnRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVBhcmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlJ3ZlIG9ubHkgZ290IGEgdGFyZ2V0RGVsdGEsIHJlc29sdmUgaXQgaW50byBhIHRhcmdldFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50YXJnZXREZWx0YSkge1xuICAgICAgICAgICAgICAgIGlmIChCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGlzIGNyZWF0aW5nIGEgbmV3IG9iamVjdCBldmVyeSBmcmFtZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuYXBwbHlUcmFuc2Zvcm0odGhpcy5sYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRoaXMudGFyZ2V0LCB0aGlzLmxheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcHBseUJveERlbHRhKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldERlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIG5vIHRhcmdldCwgdXNlIG93biBsYXlvdXQgYXMgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy50YXJnZXQsIHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3ZlIGJlZW4gdG9sZCB0byBhdHRlbXB0IHRvIHJlc29sdmUgYSByZWxhdGl2ZSB0YXJnZXQsIGRvIHNvLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5hdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGVtcHRUb1Jlc29sdmVSZWxhdGl2ZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVQYXJlbnQgPSB0aGlzLmdldENsb3Nlc3RQcm9qZWN0aW5nUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmVQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgQm9vbGVhbih0aGlzLnJlbGF0aXZlUGFyZW50LnJlc3VtaW5nRnJvbSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHRoaXMucmVzdW1pbmdGcm9tKSAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5yZWxhdGl2ZVBhcmVudC5vcHRpb25zLmxheW91dFNjcm9sbCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlUGFyZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gY3JlYXRlQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVUYXJnZXRPcmlnaW4gPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlUG9zaXRpb24odGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgdGhpcy50YXJnZXQsIHRoaXMucmVsYXRpdmVQYXJlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgY29weUJveEludG8odGhpcy5yZWxhdGl2ZVRhcmdldCwgdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZ2V0Q2xvc2VzdFByb2plY3RpbmdQYXJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50IHx8IGhhc1RyYW5zZm9ybSh0aGlzLnBhcmVudC5sYXRlc3RWYWx1ZXMpKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoKHRoaXMucGFyZW50LnJlbGF0aXZlVGFyZ2V0IHx8IHRoaXMucGFyZW50LnRhcmdldERlbHRhKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmxheW91dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuY2FsY1Byb2plY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgX2IgPSB0aGlzLm9wdGlvbnMsIGxheW91dCA9IF9iLmxheW91dCwgbGF5b3V0SWQgPSBfYi5sYXlvdXRJZDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBzZWN0aW9uIG9mIHRoZSB0cmVlIGlzbid0IGFuaW1hdGluZyB3ZSBjYW5cbiAgICAgICAgICAgICAqIGRlbGV0ZSBvdXIgdGFyZ2V0IHNvdXJjZXMgZm9yIHRoZSBmb2xsb3dpbmcgZnJhbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuaXNUcmVlQW5pbWF0aW5nID0gQm9vbGVhbigoKF9hID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc1RyZWVBbmltYXRpbmcpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1RyZWVBbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldERlbHRhID0gdGhpcy5yZWxhdGl2ZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5sYXlvdXQgfHwgIShsYXlvdXQgfHwgbGF5b3V0SWQpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBsZWFkID0gdGhpcy5nZXRMZWFkKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlc2V0IHRoZSBjb3JyZWN0ZWQgYm94IHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBib3gsIGFzIHdlJ3JlIHRoZW4gZ29pbmdcbiAgICAgICAgICAgICAqIHRvIHBlcmZvcm0gbXV0YXRpdmUgb3BlcmF0aW9ucyBvbiBpdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29weUJveEludG8odGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRoaXMubGF5b3V0LmFjdHVhbCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFwcGx5IGFsbCB0aGUgcGFyZW50IGRlbHRhcyB0byB0aGlzIGJveCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0ZWQgYm94LiBUaGlzXG4gICAgICAgICAgICAgKiBpcyB0aGUgbGF5b3V0IGJveCwgYXMgaXQgd2lsbCBhcHBlYXIgb24gc2NyZWVuIGFzIGEgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1zIG9mIGl0cyBwYXJlbnRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhcHBseVRyZWVEZWx0YXModGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRoaXMudHJlZVNjYWxlLCB0aGlzLnBhdGgsIEJvb2xlYW4odGhpcy5yZXN1bWluZ0Zyb20pIHx8IHRoaXMgIT09IGxlYWQpO1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGxlYWQudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2plY3Rpb25EZWx0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbkRlbHRhID0gY3JlYXRlRGVsdGEoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0gPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByZXZUcmVlU2NhbGVYID0gdGhpcy50cmVlU2NhbGUueDtcbiAgICAgICAgICAgIHZhciBwcmV2VHJlZVNjYWxlWSA9IHRoaXMudHJlZVNjYWxlLnk7XG4gICAgICAgICAgICB2YXIgcHJldlByb2plY3Rpb25UcmFuc2Zvcm0gPSB0aGlzLnByb2plY3Rpb25UcmFuc2Zvcm07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgZGVsdGEgYmV0d2VlbiB0aGUgY29ycmVjdGVkIGJveCBhbmQgdGhlIHRhcmdldCBib3ggYmVmb3JlIHVzZXItc2V0IHRyYW5zZm9ybXMgd2VyZSBhcHBsaWVkLlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIGFsbG93IHVzIHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdGVkIGJvcmRlclJhZGl1cyBhbmQgYm94U2hhZG93IHRvIGNvbXBlbnNhdGVcbiAgICAgICAgICAgICAqIGZvciBvdXIgbGF5b3V0IHJlcHJvamVjdGlvbiwgYnV0IHN0aWxsIGFsbG93IHRoZW0gdG8gYmUgc2NhbGVkIGNvcnJlY3RseSBieSB0aGUgdXNlci5cbiAgICAgICAgICAgICAqIEl0IG1pZ2h0IGJlIHRoYXQgdG8gc2ltcGxpZnkgdGhpcyB3ZSBtYXkgd2FudCB0byBhY2NlcHQgdGhhdCB1c2VyLXNldCBzY2FsZSBpcyBhbHNvIGNvcnJlY3RlZFxuICAgICAgICAgICAgICogYW5kIHdlIHdvdWxkbid0IGhhdmUgdG8ga2VlcCBhbmQgY2FsYyBib3RoIGRlbHRhcywgT1Igd2UgY291bGQgc3VwcG9ydCBhIHVzZXIgc2V0dGluZ1xuICAgICAgICAgICAgICogdG8gYWxsb3cgcGVvcGxlIHRvIGNob29zZSB3aGV0aGVyIHRoZXNlIHN0eWxlcyBhcmUgY29ycmVjdGVkIGJhc2VkIG9uIGp1c3QgdGhlXG4gICAgICAgICAgICAgKiBsYXlvdXQgcmVwcm9qZWN0aW9uIG9yIHRoZSBmaW5hbCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh0aGlzLnByb2plY3Rpb25EZWx0YSwgdGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRhcmdldCwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtID0gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKHRoaXMucHJvamVjdGlvbkRlbHRhLCB0aGlzLnRyZWVTY2FsZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uVHJhbnNmb3JtICE9PSBwcmV2UHJvamVjdGlvblRyYW5zZm9ybSB8fFxuICAgICAgICAgICAgICAgIHRoaXMudHJlZVNjYWxlLnggIT09IHByZXZUcmVlU2NhbGVYIHx8XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlU2NhbGUueSAhPT0gcHJldlRyZWVTY2FsZVkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1Byb2plY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwicHJvamVjdGlvblVwZGF0ZVwiLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBUT0RPOiBTY2hlZHVsZSByZW5kZXJcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAvLyBUT0RPOiBTY2hlZHVsZSByZW5kZXJcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnNjaGVkdWxlUmVuZGVyID0gZnVuY3Rpb24gKG5vdGlmeUFsbCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBpZiAobm90aWZ5QWxsID09PSB2b2lkIDApIHsgbm90aWZ5QWxsID0gdHJ1ZTsgfVxuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5zY2hlZHVsZVJlbmRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgbm90aWZ5QWxsICYmICgoX2MgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zY2hlZHVsZVJlbmRlcigpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VtaW5nRnJvbSAmJiAhdGhpcy5yZXN1bWluZ0Zyb20uaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnNldEFuaW1hdGlvbk9yaWdpbiA9IGZ1bmN0aW9uIChkZWx0YSwgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChoYXNPbmx5UmVsYXRpdmVUYXJnZXRDaGFuZ2VkID09PSB2b2lkIDApIHsgaGFzT25seVJlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9IGZhbHNlOyB9XG4gICAgICAgICAgICB2YXIgc25hcHNob3QgPSB0aGlzLnNuYXBzaG90O1xuICAgICAgICAgICAgdmFyIHNuYXBzaG90TGF0ZXN0VmFsdWVzID0gKHNuYXBzaG90ID09PSBudWxsIHx8IHNuYXBzaG90ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzbmFwc2hvdC5sYXRlc3RWYWx1ZXMpIHx8IHt9O1xuICAgICAgICAgICAgdmFyIG1peGVkVmFsdWVzID0gX19hc3NpZ24oe30sIHRoaXMubGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZWx0YSA9IGNyZWF0ZURlbHRhKCk7XG4gICAgICAgICAgICB0aGlzLnJlbGF0aXZlVGFyZ2V0ID0gdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuYXR0ZW1wdFRvUmVzb2x2ZVJlbGF0aXZlVGFyZ2V0ID0gIWhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQ7XG4gICAgICAgICAgICB2YXIgcmVsYXRpdmVMYXlvdXQgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgICAgIHZhciBpc1NoYXJlZExheW91dEFuaW1hdGlvbiA9IHNuYXBzaG90ID09PSBudWxsIHx8IHNuYXBzaG90ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzbmFwc2hvdC5pc1NoYXJlZDtcbiAgICAgICAgICAgIHZhciBpc09ubHlNZW1iZXIgPSAoKChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lbWJlcnMubGVuZ3RoKSB8fCAwKSA8PSAxO1xuICAgICAgICAgICAgdmFyIHNob3VsZENyb3NzZmFkZU9wYWNpdHkgPSBCb29sZWFuKGlzU2hhcmVkTGF5b3V0QW5pbWF0aW9uICYmXG4gICAgICAgICAgICAgICAgIWlzT25seU1lbWJlciAmJlxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jcm9zc2ZhZGUgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5wYXRoLnNvbWUoaGFzT3BhY2l0eUNyb3NzZmFkZSkpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhID0gZnVuY3Rpb24gKGxhdGVzdCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBsYXRlc3QgLyAxMDAwO1xuICAgICAgICAgICAgICAgIG1peEF4aXNEZWx0YSh0YXJnZXREZWx0YS54LCBkZWx0YS54LCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgbWl4QXhpc0RlbHRhKHRhcmdldERlbHRhLnksIGRlbHRhLnksIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRUYXJnZXREZWx0YSh0YXJnZXREZWx0YSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnJlbGF0aXZlVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbGF0aXZlVGFyZ2V0T3JpZ2luICYmXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxheW91dCAmJlxuICAgICAgICAgICAgICAgICAgICAoKF9hID0gX3RoaXMucmVsYXRpdmVQYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXlvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHJlbGF0aXZlTGF5b3V0LCBfdGhpcy5sYXlvdXQuYWN0dWFsLCBfdGhpcy5yZWxhdGl2ZVBhcmVudC5sYXlvdXQuYWN0dWFsKTtcbiAgICAgICAgICAgICAgICAgICAgbWl4Qm94KF90aGlzLnJlbGF0aXZlVGFyZ2V0LCBfdGhpcy5yZWxhdGl2ZVRhcmdldE9yaWdpbiwgcmVsYXRpdmVMYXlvdXQsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU2hhcmVkTGF5b3V0QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvblZhbHVlcyA9IG1peGVkVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBtaXhWYWx1ZXMobWl4ZWRWYWx1ZXMsIHNuYXBzaG90TGF0ZXN0VmFsdWVzLCBfdGhpcy5sYXRlc3RWYWx1ZXMsIHByb2dyZXNzLCBzaG91bGRDcm9zc2ZhZGVPcGFjaXR5LCBpc09ubHlNZW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5yb290LnNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbigpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uUHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm1peFRhcmdldERlbHRhKDApO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmN1cnJlbnRBbmltYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdG9wKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWluZ0Zyb20pIHtcbiAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0FuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIGNhbmNlbFN5bmMudXBkYXRlKHRoaXMucGVuZGluZ0FuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdGFydCB0aGUgYW5pbWF0aW9uIGluIHRoZSBuZXh0IGZyYW1lIHRvIGhhdmUgYSBmcmFtZSB3aXRoIHByb2dyZXNzIDAsXG4gICAgICAgICAgICAgKiB3aGVyZSB0aGUgdGFyZ2V0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydGVkLCBzbyB3ZSBjYW5cbiAgICAgICAgICAgICAqIGNhbGN1bGF0ZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25zIGNvcnJlY3RseSBmb3IgaW5zdGFudCB0cmFuc2l0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nQW5pbWF0aW9uID0gc3luYy51cGRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdsb2JhbFByb2plY3Rpb25TdGF0ZS5oYXNBbmltYXRlZFNpbmNlUmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50QW5pbWF0aW9uID0gYW5pbWF0ZSgwLCBhbmltYXRpb25UYXJnZXQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBvblVwZGF0ZTogZnVuY3Rpb24gKGxhdGVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWl4VGFyZ2V0RGVsdGEobGF0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IG9wdGlvbnMub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIGxhdGVzdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IG9wdGlvbnMub25Db21wbGV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9IH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucmVzdW1pbmdGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uID0gX3RoaXMuY3VycmVudEFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucGVuZGluZ0FuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuY29tcGxldGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bWluZ0Zyb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtaW5nRnJvbS5jdXJyZW50QW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1pbmdGcm9tLnByZXNlcnZlT3BhY2l0eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYSA9IHRoaXMuZ2V0U3RhY2soKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV4aXRBbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXN1bWluZ0Zyb20gPVxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVmFsdWVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKFwiYW5pbWF0aW9uQ29tcGxldGVcIik7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5maW5pc2hBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5taXhUYXJnZXREZWx0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgYW5pbWF0aW9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFuaW1hdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuYXBwbHlUcmFuc2Zvcm1zVG9UYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLmdldExlYWQoKSwgdGFyZ2V0V2l0aFRyYW5zZm9ybXMgPSBfYS50YXJnZXRXaXRoVHJhbnNmb3JtcywgdGFyZ2V0ID0gX2EudGFyZ2V0LCBsYXlvdXQgPSBfYS5sYXlvdXQsIGxhdGVzdFZhbHVlcyA9IF9hLmxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIGlmICghdGFyZ2V0V2l0aFRyYW5zZm9ybXMgfHwgIXRhcmdldCB8fCAhbGF5b3V0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvcHlCb3hJbnRvKHRhcmdldFdpdGhUcmFuc2Zvcm1zLCB0YXJnZXQpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBcHBseSB0aGUgbGF0ZXN0IHVzZXItc2V0IHRyYW5zZm9ybXMgdG8gdGhlIHRhcmdldEJveCB0byBwcm9kdWNlIHRoZSB0YXJnZXRCb3hGaW5hbC5cbiAgICAgICAgICAgICAqIFRoaXMgaXMgdGhlIGZpbmFsIGJveCB0aGF0IHdlIHdpbGwgdGhlbiBwcm9qZWN0IGludG8gYnkgY2FsY3VsYXRpbmcgYSB0cmFuc2Zvcm0gZGVsdGEgYW5kXG4gICAgICAgICAgICAgKiBhcHBseWluZyBpdCB0byB0aGUgY29ycmVjdGVkIGJveC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHJhbnNmb3JtQm94KHRhcmdldFdpdGhUcmFuc2Zvcm1zLCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSBmaW5hbCB0YXJnZXQgYm94LCBhZnRlclxuICAgICAgICAgICAgICogdXNlci1zZXQgdHJhbnNmb3JtcyBhcmUgYXBwbGllZCB0byBpdC4gVGhpcyB3aWxsIGJlIHVzZWQgYnkgdGhlIHJlbmRlcmVyIHRvXG4gICAgICAgICAgICAgKiBjcmVhdGUgYSB0cmFuc2Zvcm0gc3R5bGUgdGhhdCB3aWxsIHJlcHJvamVjdCB0aGUgZWxlbWVudCBmcm9tIGl0cyBhY3R1YWwgbGF5b3V0XG4gICAgICAgICAgICAgKiBpbnRvIHRoZSBkZXNpcmVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2FsY0JveERlbHRhKHRoaXMucHJvamVjdGlvbkRlbHRhV2l0aFRyYW5zZm9ybSwgdGhpcy5sYXlvdXRDb3JyZWN0ZWQsIHRhcmdldFdpdGhUcmFuc2Zvcm1zLCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVnaXN0ZXJTaGFyZWROb2RlID0gZnVuY3Rpb24gKGxheW91dElkLCBub2RlKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIGlmICghdGhpcy5zaGFyZWROb2Rlcy5oYXMobGF5b3V0SWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZWROb2Rlcy5zZXQobGF5b3V0SWQsIG5ldyBOb2RlU3RhY2soKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLnNoYXJlZE5vZGVzLmdldChsYXlvdXRJZCk7XG4gICAgICAgICAgICBzdGFjay5hZGQobm9kZSk7XG4gICAgICAgICAgICBub2RlLnByb21vdGUoe1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IChfYSA9IG5vZGUub3B0aW9ucy5pbml0aWFsUHJvbW90aW9uQ29uZmlnKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJhbnNpdGlvbixcbiAgICAgICAgICAgICAgICBwcmVzZXJ2ZUZvbGxvd09wYWNpdHk6IChfYyA9IChfYiA9IG5vZGUub3B0aW9ucy5pbml0aWFsUHJvbW90aW9uQ29uZmlnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2hvdWxkUHJlc2VydmVGb2xsb3dPcGFjaXR5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYiwgbm9kZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmlzTGVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFjayA9IHRoaXMuZ2V0U3RhY2soKTtcbiAgICAgICAgICAgIHJldHVybiBzdGFjayA/IHN0YWNrLmxlYWQgPT09IHRoaXMgOiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUuZ2V0TGVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBsYXlvdXRJZCA9IHRoaXMub3B0aW9ucy5sYXlvdXRJZDtcbiAgICAgICAgICAgIHJldHVybiBsYXlvdXRJZCA/ICgoX2EgPSB0aGlzLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZWFkKSB8fCB0aGlzIDogdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmdldFByZXZMZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGxheW91dElkID0gdGhpcy5vcHRpb25zLmxheW91dElkO1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dElkID8gKF9hID0gdGhpcy5nZXRTdGFjaygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkxlYWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5nZXRTdGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsYXlvdXRJZCA9IHRoaXMub3B0aW9ucy5sYXlvdXRJZDtcbiAgICAgICAgICAgIGlmIChsYXlvdXRJZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb290LnNoYXJlZE5vZGVzLmdldChsYXlvdXRJZCk7XG4gICAgICAgIH07XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5wcm9tb3RlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgbmVlZHNSZXNldCA9IF9iLm5lZWRzUmVzZXQsIHRyYW5zaXRpb24gPSBfYi50cmFuc2l0aW9uLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkgPSBfYi5wcmVzZXJ2ZUZvbGxvd09wYWNpdHk7XG4gICAgICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoc3RhY2spXG4gICAgICAgICAgICAgICAgc3RhY2sucHJvbW90ZSh0aGlzLCBwcmVzZXJ2ZUZvbGxvd09wYWNpdHkpO1xuICAgICAgICAgICAgaWYgKG5lZWRzUmVzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25EZWx0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRzUmVzZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKHsgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLnJlbGVnYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5nZXRTdGFjaygpO1xuICAgICAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnJlbGVnYXRlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBQcm9qZWN0aW9uTm9kZS5wcm90b3R5cGUucmVzZXRSb3RhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2aXN1YWxFbGVtZW50ID0gdGhpcy5vcHRpb25zLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBkZXRlY3RlZCByb3RhdGlvbiB2YWx1ZXMsIHdlIGNhbiBlYXJseSByZXR1cm4gd2l0aG91dCBhIGZvcmNlZCByZW5kZXIuXG4gICAgICAgICAgICB2YXIgaGFzUm90YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBLZWVwIGEgcmVjb3JkIG9mIGFsbCB0aGUgdmFsdWVzIHdlJ3ZlIHJlc2V0XG4gICAgICAgICAgICB2YXIgcmVzZXRWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIC8vIENoZWNrIHRoZSByb3RhdGUgdmFsdWUgb2YgYWxsIGF4ZXMgYW5kIHJlc2V0IHRvIDBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3JtQXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBheGlzID0gdHJhbnNmb3JtQXhlc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gXCJyb3RhdGVcIiArIGF4aXM7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyByb3RhdGlvbiBkb2Vzbid0IGV4aXN0IGFzIGEgbW90aW9uIHZhbHVlLCB0aGVuIHdlIGRvbid0XG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byByZXNldCBpdFxuICAgICAgICAgICAgICAgIGlmICghdmlzdWFsRWxlbWVudC5nZXRTdGF0aWNWYWx1ZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXNSb3RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgcm90YXRpb24gYW5kIHRoZW4gdGVtcG9yYXJpbHkgc2V0IGl0IHRvIDBcbiAgICAgICAgICAgICAgICByZXNldFZhbHVlc1trZXldID0gdmlzdWFsRWxlbWVudC5nZXRTdGF0aWNWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0U3RhdGljVmFsdWUoa2V5LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gcm90YXRpb24gdmFsdWVzLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueSBtb3JlLlxuICAgICAgICAgICAgaWYgKCFoYXNSb3RhdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gRm9yY2UgYSByZW5kZXIgb2YgdGhpcyBlbGVtZW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gd2l0aCBhbGwgcm90YXRpb25zXG4gICAgICAgICAgICAvLyBzZXQgdG8gMC5cbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgICAgICAgICAvLyBQdXQgYmFjayBhbGwgdGhlIHZhbHVlcyB3ZSByZXNldFxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHJlc2V0VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShrZXksIHJlc2V0VmFsdWVzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgYSByZW5kZXIgZm9yIHRoZSBuZXh0IGZyYW1lLiBUaGlzIGVuc3VyZXMgd2Ugd29uJ3QgdmlzdWFsbHlcbiAgICAgICAgICAgIC8vIHNlZSB0aGUgZWxlbWVudCB3aXRoIHRoZSByZXNldCByb3RhdGUgdmFsdWUgYXBwbGllZC5cbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmdldFByb2plY3Rpb25TdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVQcm9wKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgICAgIGlmIChzdHlsZVByb3AgPT09IHZvaWQgMCkgeyBzdHlsZVByb3AgPSB7fTsgfVxuICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuIGxpZmVjeWNsZS1wZXJzaXN0ZW50IG9iamVjdFxuICAgICAgICAgICAgdmFyIHN0eWxlcyA9IHt9O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlIHx8IHRoaXMuaXNTVkcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2aXNpYmlsaXR5OiBcImhpZGRlblwiIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMudmlzaWJpbGl0eSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSAoX2EgPSB0aGlzLm9wdGlvbnMudmlzdWFsRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFByb3BzKCkudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgICAgICAgICBpZiAodGhpcy5uZWVkc1Jlc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3R5bGVzLm9wYWNpdHkgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wb2ludGVyRXZlbnRzID1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHRoaXMubGF0ZXN0VmFsdWVzLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGVhZCA9IHRoaXMuZ2V0TGVhZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2plY3Rpb25EZWx0YSB8fCAhdGhpcy5sYXlvdXQgfHwgIWxlYWQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVtcHR5U3R5bGVzID0ge307XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sYXlvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICBlbXB0eVN0eWxlcy5vcGFjaXR5ID0gKF9iID0gdGhpcy5sYXRlc3RWYWx1ZXMub3BhY2l0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMTtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlTdHlsZXMucG9pbnRlckV2ZW50cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlTW90aW9uVmFsdWUoc3R5bGVQcm9wLnBvaW50ZXJFdmVudHMpIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1Byb2plY3RlZCAmJiAhaGFzVHJhbnNmb3JtKHRoaXMubGF0ZXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBlbXB0eVN0eWxlcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzUHJvamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVN0eWxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZXNUb1JlbmRlciA9IGxlYWQuYW5pbWF0aW9uVmFsdWVzIHx8IGxlYWQubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXNUb1RhcmdldCgpO1xuICAgICAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSh0aGlzLnByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0sIHRoaXMudHJlZVNjYWxlLCB2YWx1ZXNUb1JlbmRlcik7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGUodmFsdWVzVG9SZW5kZXIsIHN0eWxlcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9nID0gdGhpcy5wcm9qZWN0aW9uRGVsdGEsIHggPSBfZy54LCB5ID0gX2cueTtcbiAgICAgICAgICAgIHN0eWxlcy50cmFuc2Zvcm1PcmlnaW4gPSBcIlwiLmNvbmNhdCh4Lm9yaWdpbiAqIDEwMCwgXCIlIFwiKS5jb25jYXQoeS5vcmlnaW4gKiAxMDAsIFwiJSAwXCIpO1xuICAgICAgICAgICAgaWYgKGxlYWQuYW5pbWF0aW9uVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIGxlYWQgY29tcG9uZW50IGlzIGFuaW1hdGluZywgYXNzaWduIHRoaXMgZWl0aGVyIHRoZSBlbnRlcmluZy9sZWF2aW5nXG4gICAgICAgICAgICAgICAgICogb3BhY2l0eVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHN0eWxlcy5vcGFjaXR5ID1cbiAgICAgICAgICAgICAgICAgICAgbGVhZCA9PT0gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoX2QgPSAoX2MgPSB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMucHJlc2VydmVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmxhdGVzdFZhbHVlcy5vcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE9yIHdlJ3JlIG5vdCBhbmltYXRpbmcgYXQgYWxsLCBzZXQgdGhlIGxlYWQgY29tcG9uZW50IHRvIGl0cyBhY3R1YWxcbiAgICAgICAgICAgICAgICAgKiBvcGFjaXR5IGFuZCBvdGhlciBjb21wb25lbnRzIHRvIGhpZGRlbi5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzdHlsZXMub3BhY2l0eSA9XG4gICAgICAgICAgICAgICAgICAgIGxlYWQgPT09IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKF9lID0gdmFsdWVzVG9SZW5kZXIub3BhY2l0eSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoX2YgPSB2YWx1ZXNUb1JlbmRlci5vcGFjaXR5RXhpdCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXBwbHkgc2NhbGUgY29ycmVjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NhbGVDb3JyZWN0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1RvUmVuZGVyW2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIF9oID0gc2NhbGVDb3JyZWN0b3JzW2tleV0sIGNvcnJlY3QgPSBfaC5jb3JyZWN0LCBhcHBseVRvID0gX2guYXBwbHlUbztcbiAgICAgICAgICAgICAgICB2YXIgY29ycmVjdGVkID0gY29ycmVjdCh2YWx1ZXNUb1JlbmRlcltrZXldLCBsZWFkKTtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbHlUbykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtID0gYXBwbHlUby5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlc1thcHBseVRvW2ldXSA9IGNvcnJlY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2tleV0gPSBjb3JyZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEaXNhYmxlIHBvaW50ZXIgZXZlbnRzIG9uIGZvbGxvdyBjb21wb25lbnRzLiBUaGlzIGlzIHRvIGVuc3VyZVxuICAgICAgICAgICAgICogdGhhdCBpZiBhIGZvbGxvdyBjb21wb25lbnQgY292ZXJzIGEgbGVhZCBjb21wb25lbnQgaXQgZG9lc24ndCBibG9ja1xuICAgICAgICAgICAgICogcG9pbnRlciBldmVudHMgb24gdGhlIGxlYWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMucG9pbnRlckV2ZW50cyA9XG4gICAgICAgICAgICAgICAgICAgIGxlYWQgPT09IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZU1vdGlvblZhbHVlKHN0eWxlUHJvcC5wb2ludGVyRXZlbnRzKSB8fCBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfTtcbiAgICAgICAgUHJvamVjdGlvbk5vZGUucHJvdG90eXBlLmNsZWFyU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZUZyb20gPSB0aGlzLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICAvLyBPbmx5IHJ1biBvbiByb290XG4gICAgICAgIFByb2plY3Rpb25Ob2RlLnByb3RvdHlwZS5yZXNldFRyZWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Qubm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBub2RlLmN1cnJlbnRBbmltYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdG9wKCk7IH0pO1xuICAgICAgICAgICAgdGhpcy5yb290Lm5vZGVzLmZvckVhY2goY2xlYXJNZWFzdXJlbWVudHMpO1xuICAgICAgICAgICAgdGhpcy5yb290LnNoYXJlZE5vZGVzLmNsZWFyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBQcm9qZWN0aW9uTm9kZTtcbiAgICB9KCkpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0KG5vZGUpIHtcbiAgICBub2RlLnVwZGF0ZUxheW91dCgpO1xufVxuZnVuY3Rpb24gbm90aWZ5TGF5b3V0VXBkYXRlKG5vZGUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgdmFyIHNuYXBzaG90ID0gKF9iID0gKF9hID0gbm9kZS5yZXN1bWVGcm9tKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc25hcHNob3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5vZGUuc25hcHNob3Q7XG4gICAgaWYgKG5vZGUuaXNMZWFkKCkgJiZcbiAgICAgICAgbm9kZS5sYXlvdXQgJiZcbiAgICAgICAgc25hcHNob3QgJiZcbiAgICAgICAgbm9kZS5oYXNMaXN0ZW5lcnMoXCJkaWRVcGRhdGVcIikpIHtcbiAgICAgICAgdmFyIF9lID0gbm9kZS5sYXlvdXQsIGxheW91dF8xID0gX2UuYWN0dWFsLCBtZWFzdXJlZExheW91dCA9IF9lLm1lYXN1cmVkO1xuICAgICAgICAvLyBUT0RPIE1heWJlIHdlIHdhbnQgdG8gYWxzbyByZXNpemUgdGhlIGxheW91dCBzbmFwc2hvdCBzbyB3ZSBkb24ndCB0cmlnZ2VyXG4gICAgICAgIC8vIGFuaW1hdGlvbnMgZm9yIGluc3RhbmNlIGlmIGxheW91dD1cInNpemVcIiBhbmQgYW4gZWxlbWVudCBoYXMgb25seSBjaGFuZ2VkIHBvc2l0aW9uXG4gICAgICAgIGlmIChub2RlLm9wdGlvbnMuYW5pbWF0aW9uVHlwZSA9PT0gXCJzaXplXCIpIHtcbiAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF4aXNTbmFwc2hvdCA9IHNuYXBzaG90LmlzU2hhcmVkXG4gICAgICAgICAgICAgICAgICAgID8gc25hcHNob3QubWVhc3VyZWRbYXhpc11cbiAgICAgICAgICAgICAgICAgICAgOiBzbmFwc2hvdC5sYXlvdXRbYXhpc107XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGNhbGNMZW5ndGgoYXhpc1NuYXBzaG90KTtcbiAgICAgICAgICAgICAgICBheGlzU25hcHNob3QubWluID0gbGF5b3V0XzFbYXhpc10ubWluO1xuICAgICAgICAgICAgICAgIGF4aXNTbmFwc2hvdC5tYXggPSBheGlzU25hcHNob3QubWluICsgbGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5vcHRpb25zLmFuaW1hdGlvblR5cGUgPT09IFwicG9zaXRpb25cIikge1xuICAgICAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXhpc1NuYXBzaG90ID0gc25hcHNob3QuaXNTaGFyZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzbmFwc2hvdC5tZWFzdXJlZFtheGlzXVxuICAgICAgICAgICAgICAgICAgICA6IHNuYXBzaG90LmxheW91dFtheGlzXTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gY2FsY0xlbmd0aChsYXlvdXRfMVtheGlzXSk7XG4gICAgICAgICAgICAgICAgYXhpc1NuYXBzaG90Lm1heCA9IGF4aXNTbmFwc2hvdC5taW4gKyBsZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGF5b3V0RGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBjYWxjQm94RGVsdGEobGF5b3V0RGVsdGEsIGxheW91dF8xLCBzbmFwc2hvdC5sYXlvdXQpO1xuICAgICAgICB2YXIgdmlzdWFsRGVsdGEgPSBjcmVhdGVEZWx0YSgpO1xuICAgICAgICBpZiAoc25hcHNob3QuaXNTaGFyZWQpIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbm9kZS5hcHBseVRyYW5zZm9ybShtZWFzdXJlZExheW91dCwgdHJ1ZSksIHNuYXBzaG90Lm1lYXN1cmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGNCb3hEZWx0YSh2aXN1YWxEZWx0YSwgbGF5b3V0XzEsIHNuYXBzaG90LmxheW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhc0xheW91dENoYW5nZWQgPSAhaXNEZWx0YVplcm8obGF5b3V0RGVsdGEpO1xuICAgICAgICB2YXIgaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmICghbm9kZS5yZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICBub2RlLnJlbGF0aXZlUGFyZW50ID0gbm9kZS5nZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCgpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGUgcmVsYXRpdmVQYXJlbnQgaXMgaXRzZWxmIHJlc3VtaW5nIGZyb20gYSBkaWZmZXJlbnQgZWxlbWVudCB0aGVuXG4gICAgICAgICAgICAgKiB0aGUgcmVsYXRpdmUgc25hcHNob3QgaXMgbm90IHJlbGF2ZW50XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChub2RlLnJlbGF0aXZlUGFyZW50ICYmICFub2RlLnJlbGF0aXZlUGFyZW50LnJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2YgPSBub2RlLnJlbGF0aXZlUGFyZW50LCBwYXJlbnRTbmFwc2hvdCA9IF9mLnNuYXBzaG90LCBwYXJlbnRMYXlvdXQgPSBfZi5sYXlvdXQ7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFNuYXBzaG90ICYmIHBhcmVudExheW91dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRpdmVTbmFwc2hvdCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZVNuYXBzaG90LCBzbmFwc2hvdC5sYXlvdXQsIHBhcmVudFNuYXBzaG90LmxheW91dCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZUxheW91dCA9IGNyZWF0ZUJveCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxjUmVsYXRpdmVQb3NpdGlvbihyZWxhdGl2ZUxheW91dCwgbGF5b3V0XzEsIHBhcmVudExheW91dC5hY3R1YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJveEVxdWFscyhyZWxhdGl2ZVNuYXBzaG90LCByZWxhdGl2ZUxheW91dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5ub3RpZnlMaXN0ZW5lcnMoXCJkaWRVcGRhdGVcIiwge1xuICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXRfMSxcbiAgICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgICAgICAgIGRlbHRhOiB2aXN1YWxEZWx0YSxcbiAgICAgICAgICAgIGxheW91dERlbHRhOiBsYXlvdXREZWx0YSxcbiAgICAgICAgICAgIGhhc0xheW91dENoYW5nZWQ6IGhhc0xheW91dENoYW5nZWQsXG4gICAgICAgICAgICBoYXNSZWxhdGl2ZVRhcmdldENoYW5nZWQ6IGhhc1JlbGF0aXZlVGFyZ2V0Q2hhbmdlZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuaXNMZWFkKCkpIHtcbiAgICAgICAgKF9kID0gKF9jID0gbm9kZS5vcHRpb25zKS5vbkV4aXRDb21wbGV0ZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcmluZyB0cmFuc2l0aW9uXG4gICAgICogVE9ETzogSW52ZXN0aWdhdGUgd2h5IHRoaXMgdHJhbnNpdGlvbiBpcyBiZWluZyBwYXNzZWQgaW4gYXMge3R5cGU6IGZhbHNlIH0gZnJvbSBGcmFtZXJcbiAgICAgKiBhbmQgd2h5IHdlIG5lZWQgaXQgYXQgYWxsXG4gICAgICovXG4gICAgbm9kZS5vcHRpb25zLnRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBjbGVhclNuYXBzaG90KG5vZGUpIHtcbiAgICBub2RlLmNsZWFyU25hcHNob3QoKTtcbn1cbmZ1bmN0aW9uIGNsZWFyTWVhc3VyZW1lbnRzKG5vZGUpIHtcbiAgICBub2RlLmNsZWFyTWVhc3VyZW1lbnRzKCk7XG59XG5mdW5jdGlvbiByZXNldFRyYW5zZm9ybVN0eWxlKG5vZGUpIHtcbiAgICB2YXIgdmlzdWFsRWxlbWVudCA9IG5vZGUub3B0aW9ucy52aXN1YWxFbGVtZW50O1xuICAgIGlmICh2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKS5vbkJlZm9yZUxheW91dE1lYXN1cmUpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5ub3RpZnlCZWZvcmVMYXlvdXRNZWFzdXJlKCk7XG4gICAgfVxuICAgIG5vZGUucmVzZXRUcmFuc2Zvcm0oKTtcbn1cbmZ1bmN0aW9uIGZpbmlzaEFuaW1hdGlvbihub2RlKSB7XG4gICAgbm9kZS5maW5pc2hBbmltYXRpb24oKTtcbiAgICBub2RlLnRhcmdldERlbHRhID0gbm9kZS5yZWxhdGl2ZVRhcmdldCA9IG5vZGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldERlbHRhKG5vZGUpIHtcbiAgICBub2RlLnJlc29sdmVUYXJnZXREZWx0YSgpO1xufVxuZnVuY3Rpb24gY2FsY1Byb2plY3Rpb24obm9kZSkge1xuICAgIG5vZGUuY2FsY1Byb2plY3Rpb24oKTtcbn1cbmZ1bmN0aW9uIHJlc2V0Um90YXRpb24obm9kZSkge1xuICAgIG5vZGUucmVzZXRSb3RhdGlvbigpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGVhZFNuYXBzaG90cyhzdGFjaykge1xuICAgIHN0YWNrLnJlbW92ZUxlYWRTbmFwc2hvdCgpO1xufVxuZnVuY3Rpb24gbWl4QXhpc0RlbHRhKG91dHB1dCwgZGVsdGEsIHApIHtcbiAgICBvdXRwdXQudHJhbnNsYXRlID0gbWl4KGRlbHRhLnRyYW5zbGF0ZSwgMCwgcCk7XG4gICAgb3V0cHV0LnNjYWxlID0gbWl4KGRlbHRhLnNjYWxlLCAxLCBwKTtcbiAgICBvdXRwdXQub3JpZ2luID0gZGVsdGEub3JpZ2luO1xuICAgIG91dHB1dC5vcmlnaW5Qb2ludCA9IGRlbHRhLm9yaWdpblBvaW50O1xufVxuZnVuY3Rpb24gbWl4QXhpcyhvdXRwdXQsIGZyb20sIHRvLCBwKSB7XG4gICAgb3V0cHV0Lm1pbiA9IG1peChmcm9tLm1pbiwgdG8ubWluLCBwKTtcbiAgICBvdXRwdXQubWF4ID0gbWl4KGZyb20ubWF4LCB0by5tYXgsIHApO1xufVxuZnVuY3Rpb24gbWl4Qm94KG91dHB1dCwgZnJvbSwgdG8sIHApIHtcbiAgICBtaXhBeGlzKG91dHB1dC54LCBmcm9tLngsIHRvLngsIHApO1xuICAgIG1peEF4aXMob3V0cHV0LnksIGZyb20ueSwgdG8ueSwgcCk7XG59XG5mdW5jdGlvbiBoYXNPcGFjaXR5Q3Jvc3NmYWRlKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuYW5pbWF0aW9uVmFsdWVzICYmIG5vZGUuYW5pbWF0aW9uVmFsdWVzLm9wYWNpdHlFeGl0ICE9PSB1bmRlZmluZWQpO1xufVxudmFyIGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiAwLjQ1LFxuICAgIGVhc2U6IFswLjQsIDAsIDAuMSwgMV0sXG59O1xuZnVuY3Rpb24gbW91bnROb2RlRWFybHkobm9kZSwgaWQpIHtcbiAgICAvKipcbiAgICAgKiBSYXRoZXIgdGhhbiBzZWFyY2hpbmcgdGhlIERPTSBmcm9tIGRvY3VtZW50IHdlIGNhbiBzZWFyY2ggdGhlXG4gICAgICogcGF0aCBmb3IgdGhlIGRlZXBlc3QgbW91bnRlZCBhbmNlc3RvciBhbmQgc2VhcmNoIGZyb20gdGhlcmVcbiAgICAgKi9cbiAgICB2YXIgc2VhcmNoTm9kZSA9IG5vZGUucm9vdDtcbiAgICBmb3IgKHZhciBpID0gbm9kZS5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChCb29sZWFuKG5vZGUucGF0aFtpXS5pbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHNlYXJjaE5vZGUgPSBub2RlLnBhdGhbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2VhcmNoRWxlbWVudCA9IHNlYXJjaE5vZGUgJiYgc2VhcmNoTm9kZSAhPT0gbm9kZS5yb290ID8gc2VhcmNoTm9kZS5pbnN0YW5jZSA6IGRvY3VtZW50O1xuICAgIHZhciBlbGVtZW50ID0gc2VhcmNoRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtcHJvamVjdGlvbi1pZD1cXFwiXCIuY29uY2F0KGlkLCBcIlxcXCJdXCIpKTtcbiAgICBpZiAoZWxlbWVudClcbiAgICAgICAgbm9kZS5tb3VudChlbGVtZW50LCB0cnVlKTtcbn1cbmZ1bmN0aW9uIHJvdW5kQXhpcyhheGlzKSB7XG4gICAgYXhpcy5taW4gPSBNYXRoLnJvdW5kKGF4aXMubWluKTtcbiAgICBheGlzLm1heCA9IE1hdGgucm91bmQoYXhpcy5tYXgpO1xufVxuZnVuY3Rpb24gcm91bmRCb3goYm94KSB7XG4gICAgcm91bmRBeGlzKGJveC54KTtcbiAgICByb3VuZEF4aXMoYm94LnkpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVQcm9qZWN0aW9uTm9kZSwgZ2xvYmFsUHJvamVjdGlvblN0YXRlLCBtaXhBeGlzLCBtaXhBeGlzRGVsdGEsIG1peEJveCB9O1xuIiwidmFyIGNyZWF0ZUF4aXNEZWx0YSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgdHJhbnNsYXRlOiAwLFxuICAgIHNjYWxlOiAxLFxuICAgIG9yaWdpbjogMCxcbiAgICBvcmlnaW5Qb2ludDogMCxcbn0pOyB9O1xudmFyIGNyZWF0ZURlbHRhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB4OiBjcmVhdGVBeGlzRGVsdGEoKSxcbiAgICB5OiBjcmVhdGVBeGlzRGVsdGEoKSxcbn0pOyB9O1xudmFyIGNyZWF0ZUF4aXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyBtaW46IDAsIG1heDogMCB9KTsgfTtcbnZhciBjcmVhdGVCb3ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHg6IGNyZWF0ZUF4aXMoKSxcbiAgICB5OiBjcmVhdGVBeGlzKCksXG59KTsgfTtcblxuZXhwb3J0IHsgY3JlYXRlQXhpcywgY3JlYXRlQXhpc0RlbHRhLCBjcmVhdGVCb3gsIGNyZWF0ZURlbHRhIH07XG4iLCJpbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzdGFydEFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcblxuLyoqXG4gKiBBbmltYXRlIGEgc2luZ2xlIHZhbHVlIG9yIGEgYE1vdGlvblZhbHVlYC5cbiAqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgZWl0aGVyIGEgYE1vdGlvblZhbHVlYCB0byBhbmltYXRlLCBvciBhbiBpbml0aWFsIGFuaW1hdGlvbiB2YWx1ZS5cbiAqXG4gKiBUaGUgc2Vjb25kIGlzIGVpdGhlciBhIHZhbHVlIHRvIGFuaW1hdGUgdG8sIG9yIGFuIGFycmF5IG9mIGtleWZyYW1lcyB0byBhbmltYXRlIHRocm91Z2guXG4gKlxuICogVGhlIHRoaXJkIGFyZ3VtZW50IGNhbiBiZSBlaXRoZXIgdHdlZW4gb3Igc3ByaW5nIG9wdGlvbnMsIGFuZCBvcHRpb25hbCBsaWZlY3ljbGUgbWV0aG9kczogYG9uVXBkYXRlYCwgYG9uUGxheWAsIGBvbkNvbXBsZXRlYCwgYG9uUmVwZWF0YCBhbmQgYG9uU3RvcGAuXG4gKlxuICogUmV0dXJucyBgQW5pbWF0aW9uUGxheWJhY2tDb250cm9sc2AsIGN1cnJlbnRseSBqdXN0IGEgYHN0b3BgIG1ldGhvZC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBjb25zdCBjb250cm9scyA9IGFuaW1hdGUoeCwgMTAwLCB7XG4gKiAgICAgdHlwZTogXCJzcHJpbmdcIixcbiAqICAgICBzdGlmZm5lc3M6IDIwMDAsXG4gKiAgICAgb25Db21wbGV0ZTogdiA9PiB7fVxuICogICB9KVxuICpcbiAqICAgcmV0dXJuIGNvbnRyb2xzLnN0b3BcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoZnJvbSwgdG8sIHRyYW5zaXRpb24pIHtcbiAgICBpZiAodHJhbnNpdGlvbiA9PT0gdm9pZCAwKSB7IHRyYW5zaXRpb24gPSB7fTsgfVxuICAgIHZhciB2YWx1ZSA9IGlzTW90aW9uVmFsdWUoZnJvbSkgPyBmcm9tIDogbW90aW9uVmFsdWUoZnJvbSk7XG4gICAgc3RhcnRBbmltYXRpb24oXCJcIiwgdmFsdWUsIHRvLCB0cmFuc2l0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5zdG9wKCk7IH0sXG4gICAgICAgIGlzQW5pbWF0aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5pc0FuaW1hdGluZygpOyB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGFuaW1hdGUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyc7XG5pbXBvcnQgeyBnbG9iYWxQcm9qZWN0aW9uU3RhdGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcblxudmFyIGlkID0gMTtcbmZ1bmN0aW9uIHVzZVByb2plY3Rpb25JZCgpIHtcbiAgICByZXR1cm4gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZ2xvYmFsUHJvamVjdGlvblN0YXRlLmhhc0V2ZXJVcGRhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQrKztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnQgeyB1c2VQcm9qZWN0aW9uSWQgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciBMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCB7IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCB9O1xuIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcblxudmFyIFZpc3VhbEVsZW1lbnRIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaXN1YWxFbGVtZW50SGFuZGxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWaXN1YWxFbGVtZW50SGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdmlzdWFsIGVsZW1lbnQgcHJvcHMgYXMgc29vbiBhcyB3ZSBrbm93IHRoaXMgdXBkYXRlIGlzIGdvaW5nIHRvIGJlIGNvbW1pdGVkLlxuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnRIYW5kbGVyLnByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9wcygpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnRIYW5kbGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgVmlzdWFsRWxlbWVudEhhbmRsZXIucHJvdG90eXBlLnVwZGF0ZVByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgcHJvcHMgPSBfYS5wcm9wcztcbiAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQpXG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LnNldFByb3BzKHByb3BzKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnRIYW5kbGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG4gICAgcmV0dXJuIFZpc3VhbEVsZW1lbnRIYW5kbGVyO1xufShSZWFjdF9fZGVmYXVsdC5Db21wb25lbnQpKTtcblxuZXhwb3J0IHsgVmlzdWFsRWxlbWVudEhhbmRsZXIgfTtcbiIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZm9yd2FyZFJlZiwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZlYXR1cmVzIH0gZnJvbSAnLi9mZWF0dXJlcy91c2UtZmVhdHVyZXMubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbnRleHQvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuL3V0aWxzL3VzZS12aXN1YWwtZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgdXNlTW90aW9uUmVmIH0gZnJvbSAnLi91dGlscy91c2UtbW90aW9uLXJlZi5tanMnO1xuaW1wb3J0IHsgdXNlQ3JlYXRlTW90aW9uQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzJztcbmltcG9ydCB7IGxvYWRGZWF0dXJlcywgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMnO1xuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vdXRpbHMvaXMtYnJvd3Nlci5tanMnO1xuaW1wb3J0IHsgdXNlUHJvamVjdGlvbklkIH0gZnJvbSAnLi4vcHJvamVjdGlvbi9ub2RlL2lkLm1qcyc7XG5pbXBvcnQgeyBMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgdXNlUHJvamVjdGlvbiB9IGZyb20gJy4vZmVhdHVyZXMvdXNlLXByb2plY3Rpb24ubWpzJztcbmltcG9ydCB7IFZpc3VhbEVsZW1lbnRIYW5kbGVyIH0gZnJvbSAnLi91dGlscy9WaXN1YWxFbGVtZW50SGFuZGxlci5tanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIGBtb3Rpb25gIGNvbXBvbmVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSBDb21wb25lbnQgYXJndW1lbnQsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgKGllIFwiZGl2XCJcbiAqIGZvciBgbW90aW9uLmRpdmApLCBvciBhbiBhY3R1YWwgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEFsb25nc2lkZSB0aGlzIGlzIGEgY29uZmlnIG9wdGlvbiB3aGljaCBwcm92aWRlcyBhIHdheSBvZiByZW5kZXJpbmcgdGhlIHByb3ZpZGVkXG4gKiBjb21wb25lbnQgXCJvZmZsaW5lXCIsIG9yIG91dHNpZGUgdGhlIFJlYWN0IHJlbmRlciBjeWNsZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uQ29tcG9uZW50KF9hKSB7XG4gICAgdmFyIHByZWxvYWRlZEZlYXR1cmVzID0gX2EucHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBfYS5jcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gX2EucHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciwgdXNlUmVuZGVyID0gX2EudXNlUmVuZGVyLCB1c2VWaXN1YWxTdGF0ZSA9IF9hLnVzZVZpc3VhbFN0YXRlLCBDb21wb25lbnQgPSBfYS5Db21wb25lbnQ7XG4gICAgcHJlbG9hZGVkRmVhdHVyZXMgJiYgbG9hZEZlYXR1cmVzKHByZWxvYWRlZEZlYXR1cmVzKTtcbiAgICBmdW5jdGlvbiBNb3Rpb25Db21wb25lbnQocHJvcHMsIGV4dGVybmFsUmVmKSB7XG4gICAgICAgIHZhciBsYXlvdXRJZCA9IHVzZUxheW91dElkKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGxheW91dElkOiBsYXlvdXRJZCB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBlbnZpcm9ubWVudCwgd2Ugb25seSB2aXN1YWxseSB1cGRhdGUgdGhlIGNvbXBvbmVudFxuICAgICAgICAgKiBhcyBhIHJlc3VsdCBvZiBhIFJlYWN0LXJlcmVuZGVyIHJhdGhlciB0aGFuIGludGVyYWN0aW9ucyBvciBhbmltYXRpb25zLiBUaGlzXG4gICAgICAgICAqIG1lYW5zIHdlIGRvbid0IG5lZWQgdG8gbG9hZCBhZGRpdGlvbmFsIG1lbW9yeSBzdHJ1Y3R1cmVzIGxpa2UgVmlzdWFsRWxlbWVudCxcbiAgICAgICAgICogb3IgYW55IGdlc3R1cmUvYW5pbWF0aW9uIGZlYXR1cmVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNvbmZpZyA9IHVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCk7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IG51bGw7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdXNlQ3JlYXRlTW90aW9uQ29udGV4dChwcm9wcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSB1bmlxdWUgcHJvamVjdGlvbiBJRCBmb3IgdGhpcyBjb21wb25lbnQuIElmIGEgbmV3IGNvbXBvbmVudCBpcyBhZGRlZFxuICAgICAgICAgKiBkdXJpbmcgYSBsYXlvdXQgYW5pbWF0aW9uIHdlJ2xsIHVzZSB0aGlzIHRvIHF1ZXJ5IHRoZSBET00gYW5kIGh5ZHJhdGUgaXRzIHJlZiBlYXJseSwgYWxsb3dpbmdcbiAgICAgICAgICogdXMgdG8gbWVhc3VyZSBpdCBhcyBzb29uIGFzIGFueSBsYXlvdXQgZWZmZWN0IGZsdXNoZXMgcGVuZGluZyBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogUGVyZm9ybWFuY2Ugbm90ZTogSXQnZCBiZSBiZXR0ZXIgbm90IHRvIGhhdmUgdG8gc2VhcmNoIHRoZSBET00gZm9yIHRoZXNlIGVsZW1lbnRzLlxuICAgICAgICAgKiBGb3IgbmV3bHktZW50ZXJpbmcgY29tcG9uZW50cyBpdCBjb3VsZCBiZSBlbm91Z2ggdG8gb25seSBjb3JyZWN0IHRyZWVTY2FsZSwgaW4gd2hpY2hcbiAgICAgICAgICogY2FzZSB3ZSBjb3VsZCBtb3VudCBpbiBhIHNjYWxlLWNvcnJlY3Rpb24gbW9kZS4gVGhpcyB3b3VsZG4ndCBiZSBlbm91Z2ggZm9yXG4gICAgICAgICAqIHNoYXJlZCBlbGVtZW50IHRyYW5zaXRpb25zIGhvd2V2ZXIuIFBlcmhhcHMgZm9yIHRob3NlIHdlIGNvdWxkIHJldmVydCB0byBhIHJvb3Qgbm9kZVxuICAgICAgICAgKiB0aGF0IGdldHMgZm9yY2VSZW5kZXJlZCBhbmQgbGF5b3V0IGFuaW1hdGlvbnMgYXJlIHRyaWdnZXJlZCBvbiBpdHMgbGF5b3V0IGVmZmVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBwcm9qZWN0aW9uSWQgPSBjb25maWcuaXNTdGF0aWMgPyB1bmRlZmluZWQgOiB1c2VQcm9qZWN0aW9uSWQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdmlzdWFsU3RhdGUgPSB1c2VWaXN1YWxTdGF0ZShwcm9wcywgY29uZmlnLmlzU3RhdGljKTtcbiAgICAgICAgaWYgKCFjb25maWcuaXNTdGF0aWMgJiYgaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIFZpc3VhbEVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LiBBIFZpc3VhbEVsZW1lbnQgcHJvdmlkZXMgYSBjb21tb25cbiAgICAgICAgICAgICAqIGludGVyZmFjZSB0byByZW5kZXJlci1zcGVjaWZpYyBBUElzIChpZSBET00vVGhyZWUuanMgZXRjKSBhcyB3ZWxsIGFzXG4gICAgICAgICAgICAgKiBwcm92aWRpbmcgYSB3YXkgb2YgcmVuZGVyaW5nIHRvIHRoZXNlIEFQSXMgb3V0c2lkZSBvZiB0aGUgUmVhY3QgcmVuZGVyIGxvb3BcbiAgICAgICAgICAgICAqIGZvciBtb3JlIHBlcmZvcm1hbnQgYW5pbWF0aW9ucyBhbmQgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnRleHQudmlzdWFsRWxlbWVudCA9IHVzZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB2aXN1YWxTdGF0ZSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbmZpZyksIHByb3BzKSwgY3JlYXRlVmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICB1c2VQcm9qZWN0aW9uKHByb2plY3Rpb25JZCwgcHJvcHMsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciB8fFxuICAgICAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9ucy5wcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9hZCBNb3Rpb24gZ2VzdHVyZSBhbmQgYW5pbWF0aW9uIGZlYXR1cmVzLiBUaGVzZSBhcmUgcmVuZGVyZWQgYXMgcmVuZGVybGVzc1xuICAgICAgICAgICAgICogY29tcG9uZW50cyBzbyBlYWNoIGZlYXR1cmUgY2FuIG9wdGlvbmFsbHkgbWFrZSB1c2Ugb2YgUmVhY3QgbGlmZWN5Y2xlIG1ldGhvZHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZlYXR1cmVzID0gdXNlRmVhdHVyZXMocHJvcHMsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJlbG9hZGVkRmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW91bnQgb3JkZXIgYW5kIGhpZXJhcmNoeSBpcyBzcGVjaWZpYyB0byBlbnN1cmUgb3VyIGVsZW1lbnQgcmVmXG4gICAgICAgICAqIGlzIGh5ZHJhdGVkIGJ5IHRoZSB0aW1lIGZlYXR1cmVzIGZpcmUgdGhlaXIgZWZmZWN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChWaXN1YWxFbGVtZW50SGFuZGxlciwgeyB2aXN1YWxFbGVtZW50OiBjb250ZXh0LnZpc3VhbEVsZW1lbnQsIHByb3BzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29uZmlnKSwgcHJvcHMpIH0sXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW90aW9uQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCB1c2VSZW5kZXIoQ29tcG9uZW50LCBwcm9wcywgcHJvamVjdGlvbklkLCB1c2VNb3Rpb25SZWYodmlzdWFsU3RhdGUsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgZXh0ZXJuYWxSZWYpLCB2aXN1YWxTdGF0ZSwgY29uZmlnLmlzU3RhdGljLCBjb250ZXh0LnZpc3VhbEVsZW1lbnQpKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZm9yd2FyZFJlZihNb3Rpb25Db21wb25lbnQpO1xufVxuZnVuY3Rpb24gdXNlTGF5b3V0SWQoX2EpIHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIGxheW91dElkID0gX2EubGF5b3V0SWQ7XG4gICAgdmFyIGxheW91dEdyb3VwSWQgPSAoX2IgPSB1c2VDb250ZXh0KExheW91dEdyb3VwQ29udGV4dCkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pZDtcbiAgICByZXR1cm4gbGF5b3V0R3JvdXBJZCAmJiBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGF5b3V0R3JvdXBJZCArIFwiLVwiICsgbGF5b3V0SWRcbiAgICAgICAgOiBsYXlvdXRJZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH07XG4iLCJpbXBvcnQgeyBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cywgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvdmFyaWFudHMubWpzJztcblxuZnVuY3Rpb24gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgY29udGV4dCkge1xuICAgIGlmIChjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykpIHtcbiAgICAgICAgdmFyIGluaXRpYWwgPSBwcm9wcy5pbml0aWFsLCBhbmltYXRlID0gcHJvcHMuYW5pbWF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRpYWw6IGluaXRpYWwgPT09IGZhbHNlIHx8IGlzVmFyaWFudExhYmVsKGluaXRpYWwpXG4gICAgICAgICAgICAgICAgPyBpbml0aWFsXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhbmltYXRlOiBpc1ZhcmlhbnRMYWJlbChhbmltYXRlKSA/IGFuaW1hdGUgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwcm9wcy5pbmhlcml0ICE9PSBmYWxzZSA/IGNvbnRleHQgOiB7fTtcbn1cblxuZXhwb3J0IHsgZ2V0Q3VycmVudFRyZWVWYXJpYW50cyB9O1xuIiwiaW1wb3J0IHsgaXNSZWZPYmplY3QgfSBmcm9tICcuLi8uLi91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzJztcblxuZnVuY3Rpb24gdXNlUHJvamVjdGlvbihwcm9qZWN0aW9uSWQsIF9hLCB2aXN1YWxFbGVtZW50LCBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgdmFyIF9iO1xuICAgIHZhciBsYXlvdXRJZCA9IF9hLmxheW91dElkLCBsYXlvdXQgPSBfYS5sYXlvdXQsIGRyYWcgPSBfYS5kcmFnLCBkcmFnQ29uc3RyYWludHMgPSBfYS5kcmFnQ29uc3RyYWludHMsIGxheW91dFNjcm9sbCA9IF9hLmxheW91dFNjcm9sbDtcbiAgICB2YXIgaW5pdGlhbFByb21vdGlvbkNvbmZpZyA9IHVzZUNvbnRleHQoU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0KTtcbiAgICBpZiAoIVByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IgfHxcbiAgICAgICAgIXZpc3VhbEVsZW1lbnQgfHxcbiAgICAgICAgKHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKHByb2plY3Rpb25JZCwgdmlzdWFsRWxlbWVudC5nZXRMYXRlc3RWYWx1ZXMoKSwgKF9iID0gdmlzdWFsRWxlbWVudC5wYXJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wcm9qZWN0aW9uKTtcbiAgICB2aXN1YWxFbGVtZW50LnByb2plY3Rpb24uc2V0T3B0aW9ucyh7XG4gICAgICAgIGxheW91dElkOiBsYXlvdXRJZCxcbiAgICAgICAgbGF5b3V0OiBsYXlvdXQsXG4gICAgICAgIGFsd2F5c01lYXN1cmVMYXlvdXQ6IEJvb2xlYW4oZHJhZykgfHwgKGRyYWdDb25zdHJhaW50cyAmJiBpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpKSxcbiAgICAgICAgdmlzdWFsRWxlbWVudDogdmlzdWFsRWxlbWVudCxcbiAgICAgICAgc2NoZWR1bGVSZW5kZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZpc3VhbEVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTsgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE86IFVwZGF0ZSBvcHRpb25zIGluIGFuIGVmZmVjdC4gVGhpcyBjb3VsZCBiZSB0cmlja3kgYXMgaXQnbGwgYmUgdG9vIGxhdGVcbiAgICAgICAgICogdG8gdXBkYXRlIGJ5IHRoZSB0aW1lIGxheW91dCBhbmltYXRpb25zIHJ1bi5cbiAgICAgICAgICogV2UgYWxzbyBuZWVkIHRvIGZpeCB0aGlzIHNhZmVUb1JlbW92ZSBieSBsaW5raW5nIGl0IHVwIHRvIHRoZSBvbmUgcmV0dXJuZWQgYnkgdXNlUHJlc2VuY2UsXG4gICAgICAgICAqIGVuc3VyaW5nIGl0IGdldHMgY2FsbGVkIGlmIHRoZXJlJ3Mgbm8gcG90ZW50aWFsIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgYW5pbWF0aW9uVHlwZTogdHlwZW9mIGxheW91dCA9PT0gXCJzdHJpbmdcIiA/IGxheW91dCA6IFwiYm90aFwiLFxuICAgICAgICBpbml0aWFsUHJvbW90aW9uQ29uZmlnOiBpbml0aWFsUHJvbW90aW9uQ29uZmlnLFxuICAgICAgICBsYXlvdXRTY3JvbGw6IGxheW91dFNjcm9sbCxcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgdXNlUHJvamVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVmIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBoeWRyYXRlcyB0aGUgcHJvdmlkZWRcbiAqIGV4dGVybmFsIHJlZiBhbmQgVmlzdWFsRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCB2aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZikge1xuICAgIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpbnN0YW5jZSAmJiAoKF9hID0gdmlzdWFsU3RhdGUubW91bnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpc3VhbFN0YXRlLCBpbnN0YW5jZSkpO1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICA/IHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgOiB2aXN1YWxFbGVtZW50LnVubW91bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmT2JqZWN0KGV4dGVybmFsUmVmKSkge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmLmN1cnJlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE9ubHkgcGFzcyBhIG5ldyByZWYgY2FsbGJhY2sgdG8gUmVhY3QgaWYgd2UndmUgcmVjZWl2ZWQgYSB2aXN1YWwgZWxlbWVudFxuICAgICAqIGZhY3RvcnkuIE90aGVyd2lzZSB3ZSdsbCBiZSBtb3VudGluZy9yZW1vdW50aW5nIGV2ZXJ5IHRpbWUgZXh0ZXJuYWxSZWZcbiAgICAgKiBvciBvdGhlciBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICAgICAqL1xuICAgIFt2aXN1YWxFbGVtZW50XSk7XG59XG5cbmV4cG9ydCB7IHVzZU1vdGlvblJlZiB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW90aW9uL2luZGV4Lm1qcyc7XG5cbi8qKlxuICogQ29udmVydCBhbnkgUmVhY3QgY29tcG9uZW50IGludG8gYSBgbW90aW9uYCBjb21wb25lbnQuIFRoZSBwcm92aWRlZCBjb21wb25lbnRcbiAqICoqbXVzdCoqIHVzZSBgUmVhY3QuZm9yd2FyZFJlZmAgdG8gdGhlIHVuZGVybHlpbmcgRE9NIGNvbXBvbmVudCB5b3Ugd2FudCB0byBhbmltYXRlLlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICogICByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIH0pXG4gKlxuICogY29uc3QgTW90aW9uQ29tcG9uZW50ID0gbW90aW9uKENvbXBvbmVudClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uUHJveHkoY3JlYXRlQ29uZmlnKSB7XG4gICAgZnVuY3Rpb24gY3VzdG9tKENvbXBvbmVudCwgY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPT09IHZvaWQgMCkgeyBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fTsgfVxuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgdmFyIGNvbXBvbmVudENhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBuZXcgUHJveHkoY3VzdG9tLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBgbW90aW9uYCBpcyByZWZlcmVuY2VkIHdpdGggYSBwcm9wOiBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgICAgICogVGhlIHByb3AgbmFtZSBpcyBwYXNzZWQgdGhyb3VnaCBhcyBga2V5YCBhbmQgd2UgY2FuIHVzZSB0aGF0IHRvIGdlbmVyYXRlIGEgYG1vdGlvbmBcbiAgICAgICAgICogRE9NIGNvbXBvbmVudCB3aXRoIHRoYXQgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKF90YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBleGlzdCBpbiB0aGUgY29tcG9uZW50IGNhY2hlLCBjcmVhdGUgaXQgYW5kIGNhY2hlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Q2FjaGUuc2V0KGtleSwgY3VzdG9tKGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVNb3Rpb25Qcm94eSB9O1xuIiwiLyoqXG4gKiBXZSBrZWVwIHRoZXNlIGxpc3RlZCBzZXBlcmF0ZWx5IGFzIHdlIHVzZSB0aGUgbG93ZXJjYXNlIHRhZyBuYW1lcyBhcyBwYXJ0XG4gKiBvZiB0aGUgcnVudGltZSBidW5kbGUgdG8gZGV0ZWN0IFNWRyBjb21wb25lbnRzXG4gKi9cbnZhciBsb3dlcmNhc2VTVkdFbGVtZW50cyA9IFtcbiAgICBcImFuaW1hdGVcIixcbiAgICBcImNpcmNsZVwiLFxuICAgIFwiZGVmc1wiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwiZWxsaXBzZVwiLFxuICAgIFwiZ1wiLFxuICAgIFwiaW1hZ2VcIixcbiAgICBcImxpbmVcIixcbiAgICBcImZpbHRlclwiLFxuICAgIFwibWFya2VyXCIsXG4gICAgXCJtYXNrXCIsXG4gICAgXCJtZXRhZGF0YVwiLFxuICAgIFwicGF0aFwiLFxuICAgIFwicGF0dGVyblwiLFxuICAgIFwicG9seWdvblwiLFxuICAgIFwicG9seWxpbmVcIixcbiAgICBcInJlY3RcIixcbiAgICBcInN0b3BcIixcbiAgICBcInN2Z1wiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcInRleHRcIixcbiAgICBcInRzcGFuXCIsXG4gICAgXCJ1c2VcIixcbiAgICBcInZpZXdcIixcbl07XG5cbmV4cG9ydCB7IGxvd2VyY2FzZVNWR0VsZW1lbnRzIH07XG4iLCJpbXBvcnQgeyBsb3dlcmNhc2VTVkdFbGVtZW50cyB9IGZyb20gJy4uLy4uL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzJztcblxuZnVuY3Rpb24gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KSB7XG4gICAgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIGl0J3Mgbm90IGEgc3RyaW5nLCBpdCdzIGEgY3VzdG9tIFJlYWN0IGNvbXBvbmVudC4gQ3VycmVudGx5IHdlIG9ubHkgc3VwcG9ydFxuICAgICAqIEhUTUwgY3VzdG9tIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdHlwZW9mIENvbXBvbmVudCAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaXQgY29udGFpbnMgYSBkYXNoLCB0aGUgZWxlbWVudCBpcyBhIGN1c3RvbSBIVE1MIHdlYmNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIENvbXBvbmVudC5pbmNsdWRlcyhcIi1cIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIGluIG91ciBsaXN0IG9mIGxvd2VyY2FzZSBTVkcgdGFncywgaXQncyBhbiBTVkcgY29tcG9uZW50XG4gICAgICovXG4gICAgbG93ZXJjYXNlU1ZHRWxlbWVudHMuaW5kZXhPZihDb21wb25lbnQpID4gLTEgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgY2FwaXRhbCBsZXR0ZXIsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAgICAgKi9cbiAgICAgICAgL1tBLVpdLy50ZXN0KENvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgaXNTVkdDb21wb25lbnQgfTtcbiIsImltcG9ydCB7IHNjYWxlQ29ycmVjdG9ycyB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzJztcbmltcG9ydCB7IGlzVHJhbnNmb3JtUHJvcCwgaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5cbmZ1bmN0aW9uIGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBfYSkge1xuICAgIHZhciBsYXlvdXQgPSBfYS5sYXlvdXQsIGxheW91dElkID0gX2EubGF5b3V0SWQ7XG4gICAgcmV0dXJuIChpc1RyYW5zZm9ybVByb3Aoa2V5KSB8fFxuICAgICAgICBpc1RyYW5zZm9ybU9yaWdpblByb3Aoa2V5KSB8fFxuICAgICAgICAoKGxheW91dCB8fCBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKCEhc2NhbGVDb3JyZWN0b3JzW2tleV0gfHwga2V5ID09PSBcIm9wYWNpdHlcIikpKTtcbn1cblxuZXhwb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9O1xuIiwiaW1wb3J0IHsgc29ydFRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcblxudmFyIHRyYW5zbGF0ZUFsaWFzID0ge1xuICAgIHg6IFwidHJhbnNsYXRlWFwiLFxuICAgIHk6IFwidHJhbnNsYXRlWVwiLFxuICAgIHo6IFwidHJhbnNsYXRlWlwiLFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBcInBlcnNwZWN0aXZlXCIsXG59O1xuLyoqXG4gKiBCdWlsZCBhIENTUyB0cmFuc2Zvcm0gc3R5bGUgZnJvbSBpbmRpdmlkdWFsIHgveS9zY2FsZSBldGMgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG91dHB1dHMgd2l0aCBhIGRlZmF1bHQgb3JkZXIgb2YgdHJhbnNmb3Jtcy9zY2FsZXMvcm90YXRpb25zLCB0aGlzIGNhbiBiZSBjdXN0b21pc2VkIGJ5XG4gKiBwcm92aWRpbmcgYSB0cmFuc2Zvcm1UZW1wbGF0ZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm0oX2EsIF9iLCB0cmFuc2Zvcm1Jc0RlZmF1bHQsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9IF9hLnRyYW5zZm9ybSwgdHJhbnNmb3JtS2V5cyA9IF9hLnRyYW5zZm9ybUtleXM7XG4gICAgdmFyIF9jID0gX2IuZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24sIGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYywgX2QgPSBfYi5hbGxvd1RyYW5zZm9ybU5vbmUsIGFsbG93VHJhbnNmb3JtTm9uZSA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2Q7XG4gICAgLy8gVGhlIHRyYW5zZm9ybSBzdHJpbmcgd2UncmUgZ29pbmcgdG8gYnVpbGQgaW50by5cbiAgICB2YXIgdHJhbnNmb3JtU3RyaW5nID0gXCJcIjtcbiAgICAvLyBUcmFuc2Zvcm0ga2V5cyBpbnRvIHRoZWlyIGRlZmF1bHQgb3JkZXIgLSB0aGlzIHdpbGwgZGV0ZXJtaW5lIHRoZSBvdXRwdXQgb3JkZXIuXG4gICAgdHJhbnNmb3JtS2V5cy5zb3J0KHNvcnRUcmFuc2Zvcm1Qcm9wcyk7XG4gICAgLy8gVHJhY2sgd2hldGhlciB0aGUgZGVmaW5lZCB0cmFuc2Zvcm0gaGFzIGEgZGVmaW5lZCB6IHNvIHdlIGRvbid0IGFkZCBhXG4gICAgLy8gc2Vjb25kIHRvIGVuYWJsZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cbiAgICB2YXIgdHJhbnNmb3JtSGFzWiA9IGZhbHNlO1xuICAgIC8vIExvb3Agb3ZlciBlYWNoIHRyYW5zZm9ybSBhbmQgYnVpbGQgdGhlbSBpbnRvIHRyYW5zZm9ybVN0cmluZ1xuICAgIHZhciBudW1UcmFuc2Zvcm1LZXlzID0gdHJhbnNmb3JtS2V5cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UcmFuc2Zvcm1LZXlzOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHRyYW5zZm9ybUtleXNbaV07XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBcIlwiLmNvbmNhdCh0cmFuc2xhdGVBbGlhc1trZXldIHx8IGtleSwgXCIoXCIpLmNvbmNhdCh0cmFuc2Zvcm1ba2V5XSwgXCIpIFwiKTtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJ6XCIpXG4gICAgICAgICAgICB0cmFuc2Zvcm1IYXNaID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF0cmFuc2Zvcm1IYXNaICYmIGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uKSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBcInRyYW5zbGF0ZVooMClcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVN0cmluZy50cmltKCk7XG4gICAgfVxuICAgIC8vIElmIHdlIGhhdmUgYSBjdXN0b20gYHRyYW5zZm9ybWAgdGVtcGxhdGUsIHBhc3Mgb3VyIHRyYW5zZm9ybSB2YWx1ZXMgYW5kXG4gICAgLy8gZ2VuZXJhdGVkIHRyYW5zZm9ybVN0cmluZyB0byB0aGF0IGJlZm9yZSByZXR1cm5pbmdcbiAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtLCB0cmFuc2Zvcm1Jc0RlZmF1bHQgPyBcIlwiIDogdHJhbnNmb3JtU3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWxsb3dUcmFuc2Zvcm1Ob25lICYmIHRyYW5zZm9ybUlzRGVmYXVsdCkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZztcbn1cbi8qKlxuICogQnVpbGQgYSB0cmFuc2Zvcm1PcmlnaW4gc3R5bGUuIFVzZXMgdGhlIHNhbWUgZGVmYXVsdHMgYXMgdGhlIGJyb3dzZXIgZm9yXG4gKiB1bmRlZmluZWQgb3JpZ2lucy5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm1PcmlnaW4oX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5vcmlnaW5YLCBvcmlnaW5YID0gX2IgPT09IHZvaWQgMCA/IFwiNTAlXCIgOiBfYiwgX2MgPSBfYS5vcmlnaW5ZLCBvcmlnaW5ZID0gX2MgPT09IHZvaWQgMCA/IFwiNTAlXCIgOiBfYywgX2QgPSBfYS5vcmlnaW5aLCBvcmlnaW5aID0gX2QgPT09IHZvaWQgMCA/IDAgOiBfZDtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQob3JpZ2luWCwgXCIgXCIpLmNvbmNhdChvcmlnaW5ZLCBcIiBcIikuY29uY2F0KG9yaWdpblopO1xufVxuXG5leHBvcnQgeyBidWlsZFRyYW5zZm9ybSwgYnVpbGRUcmFuc2Zvcm1PcmlnaW4gfTtcbiIsIi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBrZXkgaXMgYSBDU1MgdmFyaWFibGVcbiAqL1xuZnVuY3Rpb24gaXNDU1NWYXJpYWJsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCItLVwiKTtcbn1cblxuZXhwb3J0IHsgaXNDU1NWYXJpYWJsZSB9O1xuIiwiLyoqXG4gKiBQcm92aWRlZCBhIHZhbHVlIGFuZCBhIFZhbHVlVHlwZSwgcmV0dXJucyB0aGUgdmFsdWUgYXMgdGhhdCB2YWx1ZSB0eXBlLlxuICovXG52YXIgZ2V0VmFsdWVBc1R5cGUgPSBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB0eXBlLnRyYW5zZm9ybSh2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbn07XG5cbmV4cG9ydCB7IGdldFZhbHVlQXNUeXBlIH07XG4iLCJpbXBvcnQgeyBidWlsZFRyYW5zZm9ybSwgYnVpbGRUcmFuc2Zvcm1PcmlnaW4gfSBmcm9tICcuL2J1aWxkLXRyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZSB9IGZyb20gJy4uLy4uL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzJztcbmltcG9ydCB7IGlzVHJhbnNmb3JtUHJvcCwgaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGdldFZhbHVlQXNUeXBlIH0gZnJvbSAnLi4vLi4vZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcyc7XG5pbXBvcnQgeyBudW1iZXJWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vZG9tL3ZhbHVlLXR5cGVzL251bWJlci5tanMnO1xuXG5mdW5jdGlvbiBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGUsIHZhcnMgPSBzdGF0ZS52YXJzLCB0cmFuc2Zvcm0gPSBzdGF0ZS50cmFuc2Zvcm0sIHRyYW5zZm9ybUtleXMgPSBzdGF0ZS50cmFuc2Zvcm1LZXlzLCB0cmFuc2Zvcm1PcmlnaW4gPSBzdGF0ZS50cmFuc2Zvcm1PcmlnaW47XG4gICAgLy8gRW1wdHkgdGhlIHRyYW5zZm9ybUtleXMgYXJyYXkuIEFzIHdlJ3JlIHRocm93aW5nIG91dCByZWZzIHRvIGl0cyBpdGVtc1xuICAgIC8vIHRoaXMgbWlnaHQgbm90IGJlIGFzIGNoZWFwIGFzIHN1c3BlY3RlZC4gTWF5YmUgdXNpbmcgdGhlIGFycmF5IGFzIGEgYnVmZmVyXG4gICAgLy8gd2l0aCBhIG1hbnVhbCBpbmNyZW1lbnRhdGlvbiB3b3VsZCBiZSBiZXR0ZXIuXG4gICAgdHJhbnNmb3JtS2V5cy5sZW5ndGggPSAwO1xuICAgIC8vIFRyYWNrIHdoZXRoZXIgd2UgZW5jb3VudGVyIGFueSB0cmFuc2Zvcm0gb3IgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcy5cbiAgICB2YXIgaGFzVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgdmFyIGhhc1RyYW5zZm9ybU9yaWdpbiA9IGZhbHNlO1xuICAgIC8vIERvZXMgdGhlIGNhbGN1bGF0ZWQgdHJhbnNmb3JtIGVzc2VudGlhbGx5IGVxdWFsIFwibm9uZVwiP1xuICAgIHZhciB0cmFuc2Zvcm1Jc05vbmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIExvb3Agb3ZlciBhbGwgb3VyIGxhdGVzdCBhbmltYXRlZCB2YWx1ZXMgYW5kIGRlY2lkZSB3aGV0aGVyIHRvIGhhbmRsZSB0aGVtXG4gICAgICogYXMgYSBzdHlsZSBvciBDU1MgdmFyaWFibGUuXG4gICAgICpcbiAgICAgKiBUcmFuc2Zvcm1zIGFuZCB0cmFuc2Zvcm0gb3JpZ2lucyBhcmUga2VwdCBzZXBlcmF0ZWx5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICovXG4gICAgZm9yICh2YXIga2V5IGluIGxhdGVzdFZhbHVlcykge1xuICAgICAgICB2YXIgdmFsdWUgPSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgaXMgYSBDU1MgdmFyaWFibGUgd2UgZG9uJ3QgZG8gYW55IGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0NTU1ZhcmlhYmxlKGtleSkpIHtcbiAgICAgICAgICAgIHZhcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gaXRzIGRlZmF1bHQgdmFsdWUgdHlwZSwgaWUgMCAtPiBcIjBweFwiXG4gICAgICAgIHZhciB2YWx1ZVR5cGUgPSBudW1iZXJWYWx1ZVR5cGVzW2tleV07XG4gICAgICAgIHZhciB2YWx1ZUFzVHlwZSA9IGdldFZhbHVlQXNUeXBlKHZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0sIGZsYWcgdG8gZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgdHJhbnNmb3JtS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgd2UgaGF2ZSBhIG5vbi1kZWZhdWx0IHRyYW5zZm9ybSwgZWFybHkgcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybUlzTm9uZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBjaGVjayB0byBzZWUgaWYgdGhpcyBpcyBhIGRlZmF1bHQgdHJhbnNmb3JtXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09ICgoX2EgPSB2YWx1ZVR5cGUuZGVmYXVsdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkpXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtSXNOb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbltrZXldID0gdmFsdWVBc1R5cGU7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgdHJhbnNmb3JtIG9yaWdpbiwgZmxhZyBhbmQgZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtLW9yaWdpbiBwcm9jZXNzaW5nXG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm1PcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNUcmFuc2Zvcm0pIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYnVpbGRUcmFuc2Zvcm0oc3RhdGUsIG9wdGlvbnMsIHRyYW5zZm9ybUlzTm9uZSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFsYXRlc3RWYWx1ZXMudHJhbnNmb3JtICYmIHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgaWYgKGhhc1RyYW5zZm9ybU9yaWdpbikge1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBidWlsZFRyYW5zZm9ybU9yaWdpbih0cmFuc2Zvcm1PcmlnaW4pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZvcmNlZE1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL2lzLWZvcmNlZC1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxuZnVuY3Rpb24gY29weVJhd1ZhbHVlc09ubHkodGFyZ2V0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoIWlzTW90aW9uVmFsdWUoc291cmNlW2tleV0pICYmICFpc0ZvcmNlZE1vdGlvblZhbHVlKGtleSwgcHJvcHMpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdXNlSW5pdGlhbE1vdGlvblZhbHVlcyhfYSwgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSB7XG4gICAgdmFyIHRyYW5zZm9ybVRlbXBsYXRlID0gX2EudHJhbnNmb3JtVGVtcGxhdGU7XG4gICAgcmV0dXJuIHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBjcmVhdGVIdG1sUmVuZGVyU3RhdGUoKTtcbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogIWlzU3RhdGljIH0sIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgdmFyIHZhcnMgPSBzdGF0ZS52YXJzLCBzdHlsZSA9IHN0YXRlLnN0eWxlO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHZhcnMpLCBzdHlsZSk7XG4gICAgfSwgW3Zpc3VhbFN0YXRlXSk7XG59XG5mdW5jdGlvbiB1c2VTdHlsZShwcm9wcywgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSB7XG4gICAgdmFyIHN0eWxlUHJvcCA9IHByb3BzLnN0eWxlIHx8IHt9O1xuICAgIHZhciBzdHlsZSA9IHt9O1xuICAgIC8qKlxuICAgICAqIENvcHkgbm9uLU1vdGlvbiBWYWx1ZXMgc3RyYWlnaHQgaW50byBzdHlsZVxuICAgICAqL1xuICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHN0eWxlLCBzdHlsZVByb3AsIHByb3BzKTtcbiAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpKTtcbiAgICBpZiAocHJvcHMudHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgIHN0eWxlID0gcHJvcHMudHJhbnNmb3JtVmFsdWVzKHN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gdXNlSFRNTFByb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICAvLyBUaGUgYGFueWAgaXNuJ3QgaWRlYWwgYnV0IGl0IGlzIHRoZSB0eXBlIG9mIGNyZWF0ZUVsZW1lbnQgcHJvcHMgYXJndW1lbnRcbiAgICB2YXIgaHRtbFByb3BzID0ge307XG4gICAgdmFyIHN0eWxlID0gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYyk7XG4gICAgaWYgKEJvb2xlYW4ocHJvcHMuZHJhZykgJiYgcHJvcHMuZHJhZ0xpc3RlbmVyICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBnaG9zdCBlbGVtZW50IHdoZW4gYSB1c2VyIGRyYWdzXG4gICAgICAgIGh0bWxQcm9wcy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgLy8gRGlzYWJsZSB0ZXh0IHNlbGVjdGlvblxuICAgICAgICBzdHlsZS51c2VyU2VsZWN0ID1cbiAgICAgICAgICAgIHN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPVxuICAgICAgICAgICAgICAgIHN0eWxlLldlYmtpdFRvdWNoQ2FsbG91dCA9XG4gICAgICAgICAgICAgICAgICAgIFwibm9uZVwiO1xuICAgICAgICAvLyBEaXNhYmxlIHNjcm9sbGluZyBvbiB0aGUgZHJhZ2dhYmxlIGRpcmVjdGlvblxuICAgICAgICBzdHlsZS50b3VjaEFjdGlvbiA9XG4gICAgICAgICAgICBwcm9wcy5kcmFnID09PSB0cnVlXG4gICAgICAgICAgICAgICAgPyBcIm5vbmVcIlxuICAgICAgICAgICAgICAgIDogXCJwYW4tXCIuY29uY2F0KHByb3BzLmRyYWcgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIik7XG4gICAgfVxuICAgIGh0bWxQcm9wcy5zdHlsZSA9IHN0eWxlO1xuICAgIHJldHVybiBodG1sUHJvcHM7XG59XG5cbmV4cG9ydCB7IGNvcHlSYXdWYWx1ZXNPbmx5LCB1c2VIVE1MUHJvcHMsIHVzZVN0eWxlIH07XG4iLCJ2YXIgY3JlYXRlSHRtbFJlbmRlclN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICBzdHlsZToge30sXG4gICAgdHJhbnNmb3JtOiB7fSxcbiAgICB0cmFuc2Zvcm1LZXlzOiBbXSxcbiAgICB0cmFuc2Zvcm1PcmlnaW46IHt9LFxuICAgIHZhcnM6IHt9LFxufSk7IH07XG5cbmV4cG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9O1xuIiwiLyoqXG4gKiBBIGxpc3Qgb2YgYWxsIHZhbGlkIE1vdGlvblByb3BzLlxuICpcbiAqIEBpbnRlcm5hbHJlbWFya3NcbiAqIFRoaXMgZG9lc24ndCB0aHJvdyBpZiBhIGBNb3Rpb25Qcm9wYCBuYW1lIGlzIG1pc3NpbmcgLSBpdCBzaG91bGQuXG4gKi9cbnZhciB2YWxpZE1vdGlvblByb3BzID0gbmV3IFNldChbXG4gICAgXCJpbml0aWFsXCIsXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJleGl0XCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwidmFyaWFudHNcIixcbiAgICBcInRyYW5zaXRpb25cIixcbiAgICBcInRyYW5zZm9ybVRlbXBsYXRlXCIsXG4gICAgXCJ0cmFuc2Zvcm1WYWx1ZXNcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW5oZXJpdFwiLFxuICAgIFwibGF5b3V0XCIsXG4gICAgXCJsYXlvdXRJZFwiLFxuICAgIFwibGF5b3V0RGVwZW5kZW5jeVwiLFxuICAgIFwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25MYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJvbkJlZm9yZUxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIm9uQW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIm9uVXBkYXRlXCIsXG4gICAgXCJvbkRyYWdTdGFydFwiLFxuICAgIFwib25EcmFnXCIsXG4gICAgXCJvbkRyYWdFbmRcIixcbiAgICBcIm9uTWVhc3VyZURyYWdDb25zdHJhaW50c1wiLFxuICAgIFwib25EaXJlY3Rpb25Mb2NrXCIsXG4gICAgXCJvbkRyYWdUcmFuc2l0aW9uRW5kXCIsXG4gICAgXCJkcmFnXCIsXG4gICAgXCJkcmFnQ29udHJvbHNcIixcbiAgICBcImRyYWdMaXN0ZW5lclwiLFxuICAgIFwiZHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJkcmFnRGlyZWN0aW9uTG9ja1wiLFxuICAgIFwiZHJhZ1NuYXBUb09yaWdpblwiLFxuICAgIFwiX2RyYWdYXCIsXG4gICAgXCJfZHJhZ1lcIixcbiAgICBcImRyYWdFbGFzdGljXCIsXG4gICAgXCJkcmFnTW9tZW50dW1cIixcbiAgICBcImRyYWdQcm9wYWdhdGlvblwiLFxuICAgIFwiZHJhZ1RyYW5zaXRpb25cIixcbiAgICBcIndoaWxlRHJhZ1wiLFxuICAgIFwib25QYW5cIixcbiAgICBcIm9uUGFuU3RhcnRcIixcbiAgICBcIm9uUGFuRW5kXCIsXG4gICAgXCJvblBhblNlc3Npb25TdGFydFwiLFxuICAgIFwib25UYXBcIixcbiAgICBcIm9uVGFwU3RhcnRcIixcbiAgICBcIm9uVGFwQ2FuY2VsXCIsXG4gICAgXCJvbkhvdmVyU3RhcnRcIixcbiAgICBcIm9uSG92ZXJFbmRcIixcbiAgICBcIndoaWxlRm9jdXNcIixcbiAgICBcIndoaWxlVGFwXCIsXG4gICAgXCJ3aGlsZUhvdmVyXCIsXG4gICAgXCJ3aGlsZUluVmlld1wiLFxuICAgIFwib25WaWV3cG9ydEVudGVyXCIsXG4gICAgXCJvblZpZXdwb3J0TGVhdmVcIixcbiAgICBcInZpZXdwb3J0XCIsXG4gICAgXCJsYXlvdXRTY3JvbGxcIixcbl0pO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcHJvcCBuYW1lIGlzIGEgdmFsaWQgYE1vdGlvblByb3BgIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5IC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gY2hlY2tcbiAqIEByZXR1cm5zIGB0cnVlYCBpcyBrZXkgaXMgYSB2YWxpZCBgTW90aW9uUHJvcGAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkTW90aW9uUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdmFsaWRNb3Rpb25Qcm9wcy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IHsgaXNWYWxpZE1vdGlvblByb3AgfTtcbiIsImltcG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vbW90aW9uL3V0aWxzL3ZhbGlkLXByb3AubWpzJztcblxudmFyIHNob3VsZEZvcndhcmQgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KTsgfTtcbmZ1bmN0aW9uIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wKGlzVmFsaWRQcm9wKSB7XG4gICAgaWYgKCFpc1ZhbGlkUHJvcClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEV4cGxpY2l0bHkgZmlsdGVyIG91ciBldmVudHNcbiAgICBzaG91bGRGb3J3YXJkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCJvblwiKSA/ICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpIDogaXNWYWxpZFByb3Aoa2V5KTtcbiAgICB9O1xufVxuLyoqXG4gKiBFbW90aW9uIGFuZCBTdHlsZWQgQ29tcG9uZW50cyBib3RoIGFsbG93IHVzZXJzIHRvIHBhc3MgdGhyb3VnaCBhcmJpdHJhcnkgcHJvcHMgdG8gdGhlaXIgY29tcG9uZW50c1xuICogdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgQ1NTLiBUaGV5IGJvdGggdXNlIHRoZSBgQGVtb3Rpb24vaXMtcHJvcC12YWxpZGAgcGFja2FnZSB0byBkZXRlcm1pbmUgd2hpY2hcbiAqIG9mIHRoZXNlIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHVuZGVybHlpbmcgRE9NIG5vZGUuXG4gKlxuICogSG93ZXZlciwgd2hlbiBzdHlsaW5nIGEgTW90aW9uIGNvbXBvbmVudCBgc3R5bGVkKG1vdGlvbi5kaXYpYCwgYm90aCBwYWNrYWdlcyBwYXNzIHRocm91Z2ggKmFsbCogcHJvcHNcbiAqIGFzIGl0J3Mgc2VlbiBhcyBhbiBhcmJpdHJhcnkgY29tcG9uZW50IHJhdGhlciB0aGFuIGEgRE9NIG5vZGUuIE1vdGlvbiBvbmx5IGFsbG93cyBhcmJpdHJhcnkgcHJvcHNcbiAqIHBhc3NlZCB0aHJvdWdoIHRoZSBgY3VzdG9tYCBwcm9wIHNvIGl0IGRvZXNuJ3QgKm5lZWQqIHRoZSBwYXlsb2FkIG9yIGNvbXB1dGF0aW9uYWwgb3ZlcmhlYWQgb2ZcbiAqIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCwgaG93ZXZlciB0byBmaXggdGhpcyBwcm9ibGVtIHdlIG5lZWQgdG8gdXNlIGl0LlxuICpcbiAqIEJ5IG1ha2luZyBpdCBhbiBvcHRpb25hbERlcGVuZGVuY3kgd2UgY2FuIG9mZmVyIHRoaXMgZnVuY3Rpb25hbGl0eSBvbmx5IGluIHRoZSBzaXR1YXRpb25zIHdoZXJlIGl0J3NcbiAqIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG50cnkge1xuICAgIC8qKlxuICAgICAqIFdlIGF0dGVtcHQgdG8gaW1wb3J0IHRoaXMgcGFja2FnZSBidXQgcmVxdWlyZSB3b24ndCBiZSBkZWZpbmVkIGluIGVzbSBlbnZpcm9ubWVudHMsIGluIHRoYXQgY2FzZVxuICAgICAqIGlzUHJvcFZhbGlkIHdpbGwgaGF2ZSB0byBiZSBwcm92aWRlZCB2aWEgYE1vdGlvbkNvbnRleHRgLiBJbiBhIDYuMC4wIHRoaXMgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWRcbiAgICAgKiBpbiBmYXZvdXIgb2YgZXhwbGljaXQgaW5qZWN0aW9uLlxuICAgICAqL1xuICAgIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wKHJlcXVpcmUoXCJAZW1vdGlvbi9pcy1wcm9wLXZhbGlkXCIpLmRlZmF1bHQpO1xufVxuY2F0Y2ggKF9hKSB7XG4gICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBhY3R1YWxseSBkbyBhbnl0aGluZyBoZXJlIC0gdGhlIGZhbGxiYWNrIGlzIHRoZSBleGlzdGluZyBgaXNQcm9wVmFsaWRgLlxufVxuZnVuY3Rpb24gZmlsdGVyUHJvcHMocHJvcHMsIGlzRG9tLCBmb3J3YXJkTW90aW9uUHJvcHMpIHtcbiAgICB2YXIgZmlsdGVyZWRQcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkRm9yd2FyZChrZXkpIHx8XG4gICAgICAgICAgICAoZm9yd2FyZE1vdGlvblByb3BzID09PSB0cnVlICYmIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAoIWlzRG9tICYmICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgLy8gSWYgdHJ5aW5nIHRvIHVzZSBuYXRpdmUgSFRNTCBkcmFnIGV2ZW50cywgZm9yd2FyZCBkcmFnIGxpc3RlbmVyc1xuICAgICAgICAgICAgKHByb3BzW1wiZHJhZ2dhYmxlXCJdICYmIGtleS5zdGFydHNXaXRoKFwib25EcmFnXCIpKSkge1xuICAgICAgICAgICAgZmlsdGVyZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRQcm9wcztcbn1cblxuZXhwb3J0IHsgZmlsdGVyUHJvcHMsIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wIH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuZnVuY3Rpb24gY2FsY09yaWdpbihvcmlnaW4sIG9mZnNldCwgc2l6ZSkge1xuICAgIHJldHVybiB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gb3JpZ2luXG4gICAgICAgIDogcHgudHJhbnNmb3JtKG9mZnNldCArIHNpemUgKiBvcmlnaW4pO1xufVxuLyoqXG4gKiBUaGUgU1ZHIHRyYW5zZm9ybSBvcmlnaW4gZGVmYXVsdHMgYXJlIGRpZmZlcmVudCB0byBDU1MgYW5kIGlzIGxlc3MgaW50dWl0aXZlLFxuICogc28gd2UgdXNlIHRoZSBtZWFzdXJlZCBkaW1lbnNpb25zIG9mIHRoZSBTVkcgdG8gcmVjb25jaWxlIHRoZXNlLlxuICovXG5mdW5jdGlvbiBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luKGRpbWVuc2lvbnMsIG9yaWdpblgsIG9yaWdpblkpIHtcbiAgICB2YXIgcHhPcmlnaW5YID0gY2FsY09yaWdpbihvcmlnaW5YLCBkaW1lbnNpb25zLngsIGRpbWVuc2lvbnMud2lkdGgpO1xuICAgIHZhciBweE9yaWdpblkgPSBjYWxjT3JpZ2luKG9yaWdpblksIGRpbWVuc2lvbnMueSwgZGltZW5zaW9ucy5oZWlnaHQpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChweE9yaWdpblgsIFwiIFwiKS5jb25jYXQocHhPcmlnaW5ZKTtcbn1cblxuZXhwb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9O1xuIiwiaW1wb3J0IHsgcHggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbnZhciBkYXNoS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlLWRhc2hvZmZzZXRcIixcbiAgICBhcnJheTogXCJzdHJva2UtZGFzaGFycmF5XCIsXG59O1xudmFyIGNhbWVsS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlRGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZURhc2hhcnJheVwiLFxufTtcbi8qKlxuICogQnVpbGQgU1ZHIHBhdGggcHJvcGVydGllcy4gVXNlcyB0aGUgcGF0aCdzIG1lYXN1cmVkIGxlbmd0aCB0byBjb252ZXJ0XG4gKiBvdXIgY3VzdG9tIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nIGFuZCBwYXRoT2Zmc2V0IGludG8gc3Ryb2tlLWRhc2hvZmZzZXRcbiAqIGFuZCBzdHJva2UtZGFzaGFycmF5IGF0dHJpYnV0ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBtdXRhdGl2ZSB0byByZWR1Y2UgcGVyLWZyYW1lIEdDLlxuICovXG5mdW5jdGlvbiBidWlsZFNWR1BhdGgoYXR0cnMsIGxlbmd0aCwgc3BhY2luZywgb2Zmc2V0LCB1c2VEYXNoQ2FzZSkge1xuICAgIGlmIChzcGFjaW5nID09PSB2b2lkIDApIHsgc3BhY2luZyA9IDE7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIGlmICh1c2VEYXNoQ2FzZSA9PT0gdm9pZCAwKSB7IHVzZURhc2hDYXNlID0gdHJ1ZTsgfVxuICAgIC8vIE5vcm1hbGlzZSBwYXRoIGxlbmd0aCBieSBzZXR0aW5nIFNWRyBhdHRyaWJ1dGUgcGF0aExlbmd0aCB0byAxXG4gICAgYXR0cnMucGF0aExlbmd0aCA9IDE7XG4gICAgLy8gV2UgdXNlIGRhc2ggY2FzZSB3aGVuIHNldHRpbmcgYXR0cmlidXRlcyBkaXJlY3RseSB0byB0aGUgRE9NIG5vZGUgYW5kIGNhbWVsIGNhc2VcbiAgICAvLyB3aGVuIGRlZmluaW5nIHByb3BzIG9uIGEgUmVhY3QgY29tcG9uZW50LlxuICAgIHZhciBrZXlzID0gdXNlRGFzaENhc2UgPyBkYXNoS2V5cyA6IGNhbWVsS2V5cztcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBvZmZzZXRcbiAgICBhdHRyc1trZXlzLm9mZnNldF0gPSBweC50cmFuc2Zvcm0oLW9mZnNldCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICB2YXIgcGF0aExlbmd0aCA9IHB4LnRyYW5zZm9ybShsZW5ndGgpO1xuICAgIHZhciBwYXRoU3BhY2luZyA9IHB4LnRyYW5zZm9ybShzcGFjaW5nKTtcbiAgICBhdHRyc1trZXlzLmFycmF5XSA9IFwiXCIuY29uY2F0KHBhdGhMZW5ndGgsIFwiIFwiKS5jb25jYXQocGF0aFNwYWNpbmcpO1xufVxuXG5leHBvcnQgeyBidWlsZFNWR1BhdGggfTtcbiIsImltcG9ydCB7IF9fcmVzdCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIH0gZnJvbSAnLi90cmFuc2Zvcm0tb3JpZ2luLm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR1BhdGggfSBmcm9tICcuL3BhdGgubWpzJztcblxuLyoqXG4gKiBCdWlsZCBTVkcgdmlzdWFsIGF0dHJidXRlcywgbGlrZSBjeCBhbmQgc3R5bGUudHJhbnNmb3JtXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIF9hLCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgIHZhciBhdHRyWCA9IF9hLmF0dHJYLCBhdHRyWSA9IF9hLmF0dHJZLCBvcmlnaW5YID0gX2Eub3JpZ2luWCwgb3JpZ2luWSA9IF9hLm9yaWdpblksIHBhdGhMZW5ndGggPSBfYS5wYXRoTGVuZ3RoLCBfYiA9IF9hLnBhdGhTcGFjaW5nLCBwYXRoU3BhY2luZyA9IF9iID09PSB2b2lkIDAgPyAxIDogX2IsIF9jID0gX2EucGF0aE9mZnNldCwgcGF0aE9mZnNldCA9IF9jID09PSB2b2lkIDAgPyAwIDogX2MsIFxuICAgIC8vIFRoaXMgaXMgb2JqZWN0IGNyZWF0aW9uLCB3aGljaCB3ZSB0cnkgdG8gYXZvaWQgcGVyLWZyYW1lLlxuICAgIGxhdGVzdCA9IF9fcmVzdChfYSwgW1wiYXR0clhcIiwgXCJhdHRyWVwiLCBcIm9yaWdpblhcIiwgXCJvcmlnaW5ZXCIsIFwicGF0aExlbmd0aFwiLCBcInBhdGhTcGFjaW5nXCIsIFwicGF0aE9mZnNldFwiXSk7XG4gICAgYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3QsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICBzdGF0ZS5hdHRycyA9IHN0YXRlLnN0eWxlO1xuICAgIHN0YXRlLnN0eWxlID0ge307XG4gICAgdmFyIGF0dHJzID0gc3RhdGUuYXR0cnMsIHN0eWxlID0gc3RhdGUuc3R5bGUsIGRpbWVuc2lvbnMgPSBzdGF0ZS5kaW1lbnNpb25zO1xuICAgIC8qKlxuICAgICAqIEhvd2V2ZXIsIHdlIGFwcGx5IHRyYW5zZm9ybXMgYXMgQ1NTIHRyYW5zZm9ybXMuIFNvIGlmIHdlIGRldGVjdCBhIHRyYW5zZm9ybSB3ZSB0YWtlIGl0IGZyb20gYXR0cnNcbiAgICAgKiBhbmQgY29weSBpdCBpbnRvIHN0eWxlLlxuICAgICAqL1xuICAgIGlmIChhdHRycy50cmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKGRpbWVuc2lvbnMpXG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBhdHRycy50cmFuc2Zvcm07XG4gICAgICAgIGRlbGV0ZSBhdHRycy50cmFuc2Zvcm07XG4gICAgfVxuICAgIC8vIFBhcnNlIHRyYW5zZm9ybU9yaWdpblxuICAgIGlmIChkaW1lbnNpb25zICYmXG4gICAgICAgIChvcmlnaW5YICE9PSB1bmRlZmluZWQgfHwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkIHx8IHN0eWxlLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YICE9PSB1bmRlZmluZWQgPyBvcmlnaW5YIDogMC41LCBvcmlnaW5ZICE9PSB1bmRlZmluZWQgPyBvcmlnaW5ZIDogMC41KTtcbiAgICB9XG4gICAgLy8gVHJlYXQgeC95IG5vdCBhcyBzaG9ydGN1dHMgYnV0IGFzIGFjdHVhbCBhdHRyaWJ1dGVzXG4gICAgaWYgKGF0dHJYICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnggPSBhdHRyWDtcbiAgICBpZiAoYXR0clkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYXR0cnMueSA9IGF0dHJZO1xuICAgIC8vIEJ1aWxkIFNWRyBwYXRoIGlmIG9uZSBoYXMgYmVlbiBkZWZpbmVkXG4gICAgaWYgKHBhdGhMZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBidWlsZFNWR1BhdGgoYXR0cnMsIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nLCBwYXRoT2Zmc2V0LCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBidWlsZFNWR0F0dHJzIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG52YXIgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpKSwgeyBhdHRyczoge30gfSkpOyB9O1xuXG5leHBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9O1xuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29weVJhd1ZhbHVlc09ubHkgfSBmcm9tICcuLi9odG1sL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcbmltcG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVNWR1Byb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSkge1xuICAgIHZhciB2aXN1YWxQcm9wcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBjcmVhdGVTdmdSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZFNWR0F0dHJzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlLmF0dHJzKSwgeyBzdHlsZTogX19hc3NpZ24oe30sIHN0YXRlLnN0eWxlKSB9KTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbiAgICBpZiAocHJvcHMuc3R5bGUpIHtcbiAgICAgICAgdmFyIHJhd1N0eWxlcyA9IHt9O1xuICAgICAgICBjb3B5UmF3VmFsdWVzT25seShyYXdTdHlsZXMsIHByb3BzLnN0eWxlLCBwcm9wcyk7XG4gICAgICAgIHZpc3VhbFByb3BzLnN0eWxlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJhd1N0eWxlcyksIHZpc3VhbFByb3BzLnN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc3VhbFByb3BzO1xufVxuXG5leHBvcnQgeyB1c2VTVkdQcm9wcyB9O1xuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSFRNTFByb3BzIH0gZnJvbSAnLi4vaHRtbC91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGZpbHRlclByb3BzIH0gZnJvbSAnLi91dGlscy9maWx0ZXItcHJvcHMubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VTVkdQcm9wcyB9IGZyb20gJy4uL3N2Zy91c2UtcHJvcHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcykge1xuICAgIGlmIChmb3J3YXJkTW90aW9uUHJvcHMgPT09IHZvaWQgMCkgeyBmb3J3YXJkTW90aW9uUHJvcHMgPSBmYWxzZTsgfVxuICAgIHZhciB1c2VSZW5kZXIgPSBmdW5jdGlvbiAoQ29tcG9uZW50LCBwcm9wcywgcHJvamVjdGlvbklkLCByZWYsIF9hLCBpc1N0YXRpYykge1xuICAgICAgICB2YXIgbGF0ZXN0VmFsdWVzID0gX2EubGF0ZXN0VmFsdWVzO1xuICAgICAgICB2YXIgdXNlVmlzdWFsUHJvcHMgPSBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpXG4gICAgICAgICAgICA/IHVzZVNWR1Byb3BzXG4gICAgICAgICAgICA6IHVzZUhUTUxQcm9wcztcbiAgICAgICAgdmFyIHZpc3VhbFByb3BzID0gdXNlVmlzdWFsUHJvcHMocHJvcHMsIGxhdGVzdFZhbHVlcywgaXNTdGF0aWMpO1xuICAgICAgICB2YXIgZmlsdGVyZWRQcm9wcyA9IGZpbHRlclByb3BzKHByb3BzLCB0eXBlb2YgQ29tcG9uZW50ID09PSBcInN0cmluZ1wiLCBmb3J3YXJkTW90aW9uUHJvcHMpO1xuICAgICAgICB2YXIgZWxlbWVudFByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGZpbHRlcmVkUHJvcHMpLCB2aXN1YWxQcm9wcyksIHsgcmVmOiByZWYgfSk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnRQcm9wc1tcImRhdGEtcHJvamVjdGlvbi1pZFwiXSA9IHByb2plY3Rpb25JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnRQcm9wcyk7XG4gICAgfTtcbiAgICByZXR1cm4gdXNlUmVuZGVyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfTtcbiIsInZhciBDQU1FTF9DQVNFX1BBVFRFUk4gPSAvKFthLXpdKShbQS1aXSkvZztcbnZhciBSRVBMQUNFX1RFTVBMQVRFID0gXCIkMS0kMlwiO1xuLyoqXG4gKiBDb252ZXJ0IGNhbWVsQ2FzZSB0byBkYXNoLWNhc2UgcHJvcGVydGllcy5cbiAqL1xudmFyIGNhbWVsVG9EYXNoID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShDQU1FTF9DQVNFX1BBVFRFUk4sIFJFUExBQ0VfVEVNUExBVEUpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgeyBjYW1lbFRvRGFzaCB9O1xuIiwiZnVuY3Rpb24gcmVuZGVySFRNTChlbGVtZW50LCBfYSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgdmFyIHN0eWxlID0gX2Euc3R5bGUsIHZhcnMgPSBfYS52YXJzO1xuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUsIHByb2plY3Rpb24gJiYgcHJvamVjdGlvbi5nZXRQcm9qZWN0aW9uU3R5bGVzKHN0eWxlUHJvcCkpO1xuICAgIC8vIExvb3Agb3ZlciBhbnkgQ1NTIHZhcmlhYmxlcyBhbmQgYXNzaWduIHRob3NlLlxuICAgIGZvciAodmFyIGtleSBpbiB2YXJzKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YXJzW2tleV0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgcmVuZGVySFRNTCB9O1xuIiwiLyoqXG4gKiBBIHNldCBvZiBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBhcmUgYWx3YXlzIHJlYWQvd3JpdHRlbiBhcyBjYW1lbCBjYXNlLlxuICovXG52YXIgY2FtZWxDYXNlQXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgIFwiYmFzZUZyZXF1ZW5jeVwiLFxuICAgIFwiZGlmZnVzZUNvbnN0YW50XCIsXG4gICAgXCJrZXJuZWxNYXRyaXhcIixcbiAgICBcImtlcm5lbFVuaXRMZW5ndGhcIixcbiAgICBcImtleVNwbGluZXNcIixcbiAgICBcImtleVRpbWVzXCIsXG4gICAgXCJsaW1pdGluZ0NvbmVBbmdsZVwiLFxuICAgIFwibWFya2VySGVpZ2h0XCIsXG4gICAgXCJtYXJrZXJXaWR0aFwiLFxuICAgIFwibnVtT2N0YXZlc1wiLFxuICAgIFwidGFyZ2V0WFwiLFxuICAgIFwidGFyZ2V0WVwiLFxuICAgIFwic3VyZmFjZVNjYWxlXCIsXG4gICAgXCJzcGVjdWxhckNvbnN0YW50XCIsXG4gICAgXCJzcGVjdWxhckV4cG9uZW50XCIsXG4gICAgXCJzdGREZXZpYXRpb25cIixcbiAgICBcInRhYmxlVmFsdWVzXCIsXG4gICAgXCJ2aWV3Qm94XCIsXG4gICAgXCJncmFkaWVudFRyYW5zZm9ybVwiLFxuICAgIFwicGF0aExlbmd0aFwiLFxuXSk7XG5cbmV4cG9ydCB7IGNhbWVsQ2FzZUF0dHJpYnV0ZXMgfTtcbiIsImltcG9ydCB7IGNhbWVsVG9EYXNoIH0gZnJvbSAnLi4vLi4vZG9tL3V0aWxzL2NhbWVsLXRvLWRhc2gubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuXG5mdW5jdGlvbiByZW5kZXJTVkcoZWxlbWVudCwgcmVuZGVyU3RhdGUpIHtcbiAgICByZW5kZXJIVE1MKGVsZW1lbnQsIHJlbmRlclN0YXRlKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcmVuZGVyU3RhdGUuYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoIWNhbWVsQ2FzZUF0dHJpYnV0ZXMuaGFzKGtleSkgPyBjYW1lbFRvRGFzaChrZXkpIDoga2V5LCByZW5kZXJTdGF0ZS5hdHRyc1trZXldKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbmRlclNWRyB9O1xuIiwiaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcykge1xuICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuICAgIHZhciBuZXdWYWx1ZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUoc3R5bGVba2V5XSkgfHwgaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHByb3BzKSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIGFzIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMpIHtcbiAgICB2YXIgbmV3VmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEocHJvcHMpO1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShwcm9wc1trZXldKSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEtleSA9IGtleSA9PT0gXCJ4XCIgfHwga2V5ID09PSBcInlcIiA/IFwiYXR0clwiICsga2V5LnRvVXBwZXJDYXNlKCkgOiBrZXk7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbdGFyZ2V0S2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlcztcbn1cblxuZXhwb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iLCJmdW5jdGlvbiBpc0FuaW1hdGlvbkNvbnRyb2xzKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHYuc3RhcnQgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZXhwb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9O1xuIiwiaW1wb3J0IHsgX19yZXN0IH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMsIGNoZWNrSWZWYXJpYW50Tm9kZSwgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvdmFyaWFudHMubWpzJztcbmltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9yZXNvbHZlLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuXG5mdW5jdGlvbiBtYWtlU3RhdGUoX2EsIHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQpIHtcbiAgICB2YXIgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzID0gX2Euc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCBjcmVhdGVSZW5kZXJTdGF0ZSA9IF9hLmNyZWF0ZVJlbmRlclN0YXRlLCBvbk1vdW50ID0gX2Eub25Nb3VudDtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIGxhdGVzdFZhbHVlczogbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMpLFxuICAgICAgICByZW5kZXJTdGF0ZTogY3JlYXRlUmVuZGVyU3RhdGUoKSxcbiAgICB9O1xuICAgIGlmIChvbk1vdW50KSB7XG4gICAgICAgIHN0YXRlLm1vdW50ID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7IHJldHVybiBvbk1vdW50KHByb3BzLCBpbnN0YW5jZSwgc3RhdGUpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG52YXIgbWFrZVVzZVZpc3VhbFN0YXRlID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIGlzU3RhdGljKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KTtcbiAgICAgICAgdmFyIHByZXNlbmNlQ29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGlzU3RhdGljXG4gICAgICAgICAgICA/IG1ha2VTdGF0ZShjb25maWcsIHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQpXG4gICAgICAgICAgICA6IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVN0YXRlKGNvbmZpZywgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xufTtcbmZ1bmN0aW9uIG1ha2VMYXRlc3RWYWx1ZXMocHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCwgc2NyYXBlTW90aW9uVmFsdWVzKSB7XG4gICAgdmFyIHZhbHVlcyA9IHt9O1xuICAgIHZhciBibG9ja0luaXRpYWxBbmltYXRpb24gPSAocHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmluaXRpYWwpID09PSBmYWxzZTtcbiAgICB2YXIgbW90aW9uVmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzKHByb3BzKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbW90aW9uVmFsdWVzKSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gcmVzb2x2ZU1vdGlvblZhbHVlKG1vdGlvblZhbHVlc1trZXldKTtcbiAgICB9XG4gICAgdmFyIGluaXRpYWwgPSBwcm9wcy5pbml0aWFsLCBhbmltYXRlID0gcHJvcHMuYW5pbWF0ZTtcbiAgICB2YXIgaXNDb250cm9sbGluZ1ZhcmlhbnRzID0gY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpO1xuICAgIHZhciBpc1ZhcmlhbnROb2RlID0gY2hlY2tJZlZhcmlhbnROb2RlKHByb3BzKTtcbiAgICBpZiAoY29udGV4dCAmJlxuICAgICAgICBpc1ZhcmlhbnROb2RlICYmXG4gICAgICAgICFpc0NvbnRyb2xsaW5nVmFyaWFudHMgJiZcbiAgICAgICAgcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaW5pdGlhbCAhPT0gbnVsbCAmJiBpbml0aWFsICE9PSB2b2lkIDAgPyBpbml0aWFsIDogKGluaXRpYWwgPSBjb250ZXh0LmluaXRpYWwpO1xuICAgICAgICBhbmltYXRlICE9PSBudWxsICYmIGFuaW1hdGUgIT09IHZvaWQgMCA/IGFuaW1hdGUgOiAoYW5pbWF0ZSA9IGNvbnRleHQuYW5pbWF0ZSk7XG4gICAgfVxuICAgIHZhciBpbml0aWFsQW5pbWF0aW9uSXNCbG9ja2VkID0gYmxvY2tJbml0aWFsQW5pbWF0aW9uIHx8IGluaXRpYWwgPT09IGZhbHNlO1xuICAgIHZhciB2YXJpYW50VG9TZXQgPSBpbml0aWFsQW5pbWF0aW9uSXNCbG9ja2VkID8gYW5pbWF0ZSA6IGluaXRpYWw7XG4gICAgaWYgKHZhcmlhbnRUb1NldCAmJlxuICAgICAgICB0eXBlb2YgdmFyaWFudFRvU2V0ICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICAhaXNBbmltYXRpb25Db250cm9scyh2YXJpYW50VG9TZXQpKSB7XG4gICAgICAgIHZhciBsaXN0ID0gQXJyYXkuaXNBcnJheSh2YXJpYW50VG9TZXQpID8gdmFyaWFudFRvU2V0IDogW3ZhcmlhbnRUb1NldF07XG4gICAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24pO1xuICAgICAgICAgICAgaWYgKCFyZXNvbHZlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbkVuZCA9IHJlc29sdmVkLnRyYW5zaXRpb25FbmQ7IHJlc29sdmVkLnRyYW5zaXRpb247IHZhciB0YXJnZXQgPSBfX3Jlc3QocmVzb2x2ZWQsIFtcInRyYW5zaXRpb25FbmRcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVUYXJnZXQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRha2UgZmluYWwga2V5ZnJhbWUgaWYgdGhlIGluaXRpYWwgYW5pbWF0aW9uIGlzIGJsb2NrZWQgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAgKiB3ZSB3YW50IHRvIGluaXRpYWxpc2UgYXQgdGhlIGVuZCBvZiB0aGF0IGJsb2NrZWQgYW5pbWF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5pdGlhbEFuaW1hdGlvbklzQmxvY2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVRhcmdldC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVGFyZ2V0ID0gdmFsdWVUYXJnZXRbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWVUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB2YWx1ZVRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHRyYW5zaXRpb25FbmRba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9O1xuIiwiaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcblxudmFyIHN2Z01vdGlvbkNvbmZpZyA9IHtcbiAgICB1c2VWaXN1YWxTdGF0ZTogbWFrZVVzZVZpc3VhbFN0YXRlKHtcbiAgICAgICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMsXG4gICAgICAgIGNyZWF0ZVJlbmRlclN0YXRlOiBjcmVhdGVTdmdSZW5kZXJTdGF0ZSxcbiAgICAgICAgb25Nb3VudDogZnVuY3Rpb24gKHByb3BzLCBpbnN0YW5jZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJTdGF0ZSA9IF9hLnJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMgPSBfYS5sYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLmRpbWVuc2lvbnMgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaW5zdGFuY2UuZ2V0QkJveCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpbnN0YW5jZS5nZXRCQm94KClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1vc3QgbGlrZWx5IHRyeWluZyB0byBtZWFzdXJlIGFuIHVucmVuZGVyZWQgZWxlbWVudCB1bmRlciBGaXJlZm94XG4gICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggZGlyZWN0IGFzc2lnbm1lbnRcbiAgICAgICAgICAgIHJlbmRlclNWRyhpbnN0YW5jZSwgcmVuZGVyU3RhdGUpO1xuICAgICAgICB9LFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgc3ZnTW90aW9uQ29uZmlnIH07XG4iLCJ2YXIgQW5pbWF0aW9uVHlwZTtcbihmdW5jdGlvbiAoQW5pbWF0aW9uVHlwZSkge1xuICAgIEFuaW1hdGlvblR5cGVbXCJBbmltYXRlXCJdID0gXCJhbmltYXRlXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkhvdmVyXCJdID0gXCJ3aGlsZUhvdmVyXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIlRhcFwiXSA9IFwid2hpbGVUYXBcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiRHJhZ1wiXSA9IFwid2hpbGVEcmFnXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkZvY3VzXCJdID0gXCJ3aGlsZUZvY3VzXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkluVmlld1wiXSA9IFwid2hpbGVJblZpZXdcIjtcbiAgICBBbmltYXRpb25UeXBlW1wiRXhpdFwiXSA9IFwiZXhpdFwiO1xufSkoQW5pbWF0aW9uVHlwZSB8fCAoQW5pbWF0aW9uVHlwZSA9IHt9KSk7XG5cbmV4cG9ydCB7IEFuaW1hdGlvblR5cGUgfTtcbiIsImltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxudmFyIGh0bWxNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlSHRtbFJlbmRlclN0YXRlLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9O1xuIiwiZnVuY3Rpb24gaXNNb3VzZUV2ZW50KGV2ZW50KSB7XG4gICAgLy8gUG9pbnRlckV2ZW50IGluaGVyaXRzIGZyb20gTW91c2VFdmVudCBzbyB3ZSBjYW4ndCB1c2UgYSBzdHJhaWdodCBpbnN0YW5jZW9mIGNoZWNrLlxuICAgIGlmICh0eXBlb2YgUG9pbnRlckV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGV2ZW50IGluc3RhbmNlb2YgUG9pbnRlckV2ZW50KSB7XG4gICAgICAgIHJldHVybiAhIShldmVudC5wb2ludGVyVHlwZSA9PT0gXCJtb3VzZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudDtcbn1cbmZ1bmN0aW9uIGlzVG91Y2hFdmVudChldmVudCkge1xuICAgIHZhciBoYXNUb3VjaGVzID0gISFldmVudC50b3VjaGVzO1xuICAgIHJldHVybiBoYXNUb3VjaGVzO1xufVxuXG5leHBvcnQgeyBpc01vdXNlRXZlbnQsIGlzVG91Y2hFdmVudCB9O1xuIiwiaW1wb3J0IHsgaXNUb3VjaEV2ZW50IH0gZnJvbSAnLi4vZ2VzdHVyZXMvdXRpbHMvZXZlbnQtdHlwZS5tanMnO1xuXG4vKipcbiAqIEZpbHRlcnMgb3V0IGV2ZW50cyBub3QgYXR0YWNoZWQgdG8gdGhlIHByaW1hcnkgcG9pbnRlciAoY3VycmVudGx5IGxlZnQgbW91c2UgYnV0dG9uKVxuICogQHBhcmFtIGV2ZW50SGFuZGxlclxuICovXG5mdW5jdGlvbiBmaWx0ZXJQcmltYXJ5UG9pbnRlcihldmVudEhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBpc01vdXNlRXZlbnQgPSBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQ7XG4gICAgICAgIHZhciBpc1ByaW1hcnlQb2ludGVyID0gIWlzTW91c2VFdmVudCB8fFxuICAgICAgICAgICAgKGlzTW91c2VFdmVudCAmJiBldmVudC5idXR0b24gPT09IDApO1xuICAgICAgICBpZiAoaXNQcmltYXJ5UG9pbnRlcikge1xuICAgICAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgZGVmYXVsdFBhZ2VQb2ludCA9IHsgcGFnZVg6IDAsIHBhZ2VZOiAwIH07XG5mdW5jdGlvbiBwb2ludEZyb21Ub3VjaChlLCBwb2ludFR5cGUpIHtcbiAgICBpZiAocG9pbnRUeXBlID09PSB2b2lkIDApIHsgcG9pbnRUeXBlID0gXCJwYWdlXCI7IH1cbiAgICB2YXIgcHJpbWFyeVRvdWNoID0gZS50b3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgdmFyIHBvaW50ID0gcHJpbWFyeVRvdWNoIHx8IGRlZmF1bHRQYWdlUG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcG9pbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICB5OiBwb2ludFtwb2ludFR5cGUgKyBcIllcIl0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBvaW50RnJvbU1vdXNlKHBvaW50LCBwb2ludFR5cGUpIHtcbiAgICBpZiAocG9pbnRUeXBlID09PSB2b2lkIDApIHsgcG9pbnRUeXBlID0gXCJwYWdlXCI7IH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwb2ludFtwb2ludFR5cGUgKyBcIlhcIl0sXG4gICAgICAgIHk6IHBvaW50W3BvaW50VHlwZSArIFwiWVwiXSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50SW5mbyhldmVudCwgcG9pbnRUeXBlKSB7XG4gICAgaWYgKHBvaW50VHlwZSA9PT0gdm9pZCAwKSB7IHBvaW50VHlwZSA9IFwicGFnZVwiOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IGlzVG91Y2hFdmVudChldmVudClcbiAgICAgICAgICAgID8gcG9pbnRGcm9tVG91Y2goZXZlbnQsIHBvaW50VHlwZSlcbiAgICAgICAgICAgIDogcG9pbnRGcm9tTW91c2UoZXZlbnQsIHBvaW50VHlwZSksXG4gICAgfTtcbn1cbnZhciB3cmFwSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyLCBzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlcikge1xuICAgIGlmIChzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlciA9PT0gdm9pZCAwKSB7IHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyID0gZmFsc2U7IH1cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIoZXZlbnQsIGV4dHJhY3RFdmVudEluZm8oZXZlbnQpKTtcbiAgICB9O1xuICAgIHJldHVybiBzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlclxuICAgICAgICA/IGZpbHRlclByaW1hcnlQb2ludGVyKGxpc3RlbmVyKVxuICAgICAgICA6IGxpc3RlbmVyO1xufTtcblxuZXhwb3J0IHsgZXh0cmFjdEV2ZW50SW5mbywgd3JhcEhhbmRsZXIgfTtcbiIsImltcG9ydCB7IGFkZERvbUV2ZW50LCB1c2VEb21FdmVudCB9IGZyb20gJy4vdXNlLWRvbS1ldmVudC5tanMnO1xuaW1wb3J0IHsgd3JhcEhhbmRsZXIgfSBmcm9tICcuL2V2ZW50LWluZm8ubWpzJztcbmltcG9ydCB7IHN1cHBvcnRzUG9pbnRlckV2ZW50cywgc3VwcG9ydHNUb3VjaEV2ZW50cywgc3VwcG9ydHNNb3VzZUV2ZW50cyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxudmFyIG1vdXNlRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJtb3VzZWRvd25cIixcbiAgICBwb2ludGVybW92ZTogXCJtb3VzZW1vdmVcIixcbiAgICBwb2ludGVydXA6IFwibW91c2V1cFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwibW91c2VjYW5jZWxcIixcbiAgICBwb2ludGVyb3ZlcjogXCJtb3VzZW92ZXJcIixcbiAgICBwb2ludGVyb3V0OiBcIm1vdXNlb3V0XCIsXG4gICAgcG9pbnRlcmVudGVyOiBcIm1vdXNlZW50ZXJcIixcbiAgICBwb2ludGVybGVhdmU6IFwibW91c2VsZWF2ZVwiLFxufTtcbnZhciB0b3VjaEV2ZW50TmFtZXMgPSB7XG4gICAgcG9pbnRlcmRvd246IFwidG91Y2hzdGFydFwiLFxuICAgIHBvaW50ZXJtb3ZlOiBcInRvdWNobW92ZVwiLFxuICAgIHBvaW50ZXJ1cDogXCJ0b3VjaGVuZFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwidG91Y2hjYW5jZWxcIixcbn07XG5mdW5jdGlvbiBnZXRQb2ludGVyRXZlbnROYW1lKG5hbWUpIHtcbiAgICBpZiAoc3VwcG9ydHNQb2ludGVyRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN1cHBvcnRzVG91Y2hFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gdG91Y2hFdmVudE5hbWVzW25hbWVdO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdXBwb3J0c01vdXNlRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnROYW1lc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBhZGRQb2ludGVyRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRG9tRXZlbnQodGFyZ2V0LCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIHdyYXBIYW5kbGVyKGhhbmRsZXIsIGV2ZW50TmFtZSA9PT0gXCJwb2ludGVyZG93blwiKSwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiB1c2VQb2ludGVyRXZlbnQocmVmLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdXNlRG9tRXZlbnQocmVmLCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIGhhbmRsZXIgJiYgd3JhcEhhbmRsZXIoaGFuZGxlciwgZXZlbnROYW1lID09PSBcInBvaW50ZXJkb3duXCIpLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgYWRkUG9pbnRlckV2ZW50LCB1c2VQb2ludGVyRXZlbnQgfTtcbiIsImltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uL3V0aWxzL2lzLWJyb3dzZXIubWpzJztcblxuLy8gV2UgY2hlY2sgZm9yIGV2ZW50IHN1cHBvcnQgdmlhIGZ1bmN0aW9ucyBpbiBjYXNlIHRoZXkndmUgYmVlbiBtb2NrZWQgYnkgYSB0ZXN0aW5nIHN1aXRlLlxudmFyIHN1cHBvcnRzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyICYmIHdpbmRvdy5vbnBvaW50ZXJkb3duID09PSBudWxsO1xufTtcbnZhciBzdXBwb3J0c1RvdWNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9udG91Y2hzdGFydCA9PT0gbnVsbDtcbn07XG52YXIgc3VwcG9ydHNNb3VzZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyICYmIHdpbmRvdy5vbm1vdXNlZG93biA9PT0gbnVsbDtcbn07XG5cbmV4cG9ydCB7IHN1cHBvcnRzTW91c2VFdmVudHMsIHN1cHBvcnRzUG9pbnRlckV2ZW50cywgc3VwcG9ydHNUb3VjaEV2ZW50cyB9O1xuIiwiZnVuY3Rpb24gY3JlYXRlTG9jayhuYW1lKSB7XG4gICAgdmFyIGxvY2sgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVuTG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvY2sgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAobG9jayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jayA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG52YXIgZ2xvYmFsSG9yaXpvbnRhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ0hvcml6b250YWxcIik7XG52YXIgZ2xvYmFsVmVydGljYWxMb2NrID0gY3JlYXRlTG9jayhcImRyYWdWZXJ0aWNhbFwiKTtcbmZ1bmN0aW9uIGdldEdsb2JhbExvY2soZHJhZykge1xuICAgIHZhciBsb2NrID0gZmFsc2U7XG4gICAgaWYgKGRyYWcgPT09IFwieVwiKSB7XG4gICAgICAgIGxvY2sgPSBnbG9iYWxWZXJ0aWNhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZyA9PT0gXCJ4XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgb3Blbkhvcml6b250YWxfMSA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgICAgIHZhciBvcGVuVmVydGljYWxfMSA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSAmJiBvcGVuVmVydGljYWxfMSkge1xuICAgICAgICAgICAgbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIHRoZSBsb2NrcyBiZWNhdXNlIHdlIGRvbid0IHVzZSB0aGVtXG4gICAgICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSlcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICBpZiAob3BlblZlcnRpY2FsXzEpXG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jaztcbn1cbmZ1bmN0aW9uIGlzRHJhZ0FjdGl2ZSgpIHtcbiAgICAvLyBDaGVjayB0aGUgZ2VzdHVyZSBsb2NrIC0gaWYgd2UgZ2V0IGl0LCBpdCBtZWFucyBubyBkcmFnIGdlc3R1cmUgaXMgYWN0aXZlXG4gICAgLy8gYW5kIHdlIGNhbiBzYWZlbHkgZmlyZSB0aGUgdGFwIGdlc3R1cmUuXG4gICAgdmFyIG9wZW5HZXN0dXJlTG9jayA9IGdldEdsb2JhbExvY2sodHJ1ZSk7XG4gICAgaWYgKCFvcGVuR2VzdHVyZUxvY2spXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIG9wZW5HZXN0dXJlTG9jaygpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTG9jaywgZ2V0R2xvYmFsTG9jaywgaXNEcmFnQWN0aXZlIH07XG4iLCJpbXBvcnQgeyBpc01vdXNlRXZlbnQgfSBmcm9tICcuL3V0aWxzL2V2ZW50LXR5cGUubWpzJztcbmltcG9ydCB7IEFuaW1hdGlvblR5cGUgfSBmcm9tICcuLi9yZW5kZXIvdXRpbHMvdHlwZXMubWpzJztcbmltcG9ydCB7IHVzZVBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgaXNEcmFnQWN0aXZlIH0gZnJvbSAnLi9kcmFnL3V0aWxzL2xvY2subWpzJztcblxuZnVuY3Rpb24gY3JlYXRlSG92ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBpc0FjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFpc01vdXNlRXZlbnQoZXZlbnQpIHx8IGlzRHJhZ0FjdGl2ZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5zdXJlIHdlIHRyaWdnZXIgYW5pbWF0aW9ucyBiZWZvcmUgZmlyaW5nIGV2ZW50IGNhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuSG92ZXIsIGlzQWN0aXZlKTtcbiAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKGV2ZW50LCBpbmZvKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdXNlSG92ZXJHZXN0dXJlKF9hKSB7XG4gICAgdmFyIG9uSG92ZXJTdGFydCA9IF9hLm9uSG92ZXJTdGFydCwgb25Ib3ZlckVuZCA9IF9hLm9uSG92ZXJFbmQsIHdoaWxlSG92ZXIgPSBfYS53aGlsZUhvdmVyLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZW50ZXJcIiwgb25Ib3ZlclN0YXJ0IHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIHRydWUsIG9uSG92ZXJTdGFydClcbiAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJsZWF2ZVwiLCBvbkhvdmVyRW5kIHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIGZhbHNlLCBvbkhvdmVyRW5kKVxuICAgICAgICA6IHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCB7IHVzZUhvdmVyR2VzdHVyZSB9O1xuIiwiLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSB1cCB0aGUgdHJlZSB0byBjaGVjayB3aGV0aGVyIHRoZSBwcm92aWRlZCBjaGlsZCBub2RlXG4gKiBpcyB0aGUgcGFyZW50IG9yIGEgZGVzY2VuZGFudCBvZiBpdC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50IC0gRWxlbWVudCB0byBmaW5kXG4gKiBAcGFyYW0gY2hpbGQgLSBFbGVtZW50IHRvIHRlc3QgYWdhaW5zdCBwYXJlbnRcbiAqL1xudmFyIGlzTm9kZU9yQ2hpbGQgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCkge1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXJlbnQgPT09IGNoaWxkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTm9kZU9yQ2hpbGQocGFyZW50LCBjaGlsZC5wYXJlbnRFbGVtZW50KTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBpc05vZGVPckNoaWxkIH07XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIHVzZVVubW91bnRFZmZlY3QoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKCk7IH07IH0sIFtdKTtcbn1cblxuZXhwb3J0IHsgdXNlVW5tb3VudEVmZmVjdCB9O1xuIiwiaW1wb3J0IHsgX19yZXN0LCBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcblxuLyoqXG4gKiBNYXAgYW4gSW50ZXJzZWN0aW9uSGFuZGxlciBjYWxsYmFjayB0byBhbiBlbGVtZW50LiBXZSBvbmx5IGV2ZXIgbWFrZSBvbmUgaGFuZGxlciBmb3Igb25lXG4gKiBlbGVtZW50LCBzbyBldmVuIHRob3VnaCB0aGVzZSBoYW5kbGVycyBtaWdodCBhbGwgYmUgdHJpZ2dlcmVkIGJ5IGRpZmZlcmVudFxuICogb2JzZXJ2ZXJzLCB3ZSBjYW4ga2VlcCB0aGVtIGluIHRoZSBzYW1lIG1hcC5cbiAqL1xudmFyIG9ic2VydmVyQ2FsbGJhY2tzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogTXVsdGlwbGUgb2JzZXJ2ZXJzIGNhbiBiZSBjcmVhdGVkIGZvciBtdWx0aXBsZSBlbGVtZW50L2RvY3VtZW50IHJvb3RzLiBFYWNoIHdpdGhcbiAqIGRpZmZlcmVudCBzZXR0aW5ncy4gU28gaGVyZSB3ZSBzdG9yZSBkaWN0aW9uYXJpZXMgb2Ygb2JzZXJ2ZXJzIHRvIGVhY2ggcm9vdCxcbiAqIHVzaW5nIHNlcmlhbGlzZWQgc2V0dGluZ3MgKHRocmVzaG9sZC9tYXJnaW4pIGFzIGxvb2t1cCBrZXlzLlxuICovXG52YXIgb2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXAoKTtcbnZhciBmaXJlT2JzZXJ2ZXJDYWxsYmFjayA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSBvYnNlcnZlckNhbGxiYWNrcy5nZXQoZW50cnkudGFyZ2V0KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKGVudHJ5KTtcbn07XG52YXIgZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICBlbnRyaWVzLmZvckVhY2goZmlyZU9ic2VydmVyQ2FsbGJhY2spO1xufTtcbmZ1bmN0aW9uIGluaXRJbnRlcnNlY3Rpb25PYnNlcnZlcihfYSkge1xuICAgIHZhciByb290ID0gX2Eucm9vdCwgb3B0aW9ucyA9IF9fcmVzdChfYSwgW1wicm9vdFwiXSk7XG4gICAgdmFyIGxvb2t1cFJvb3QgPSByb290IHx8IGRvY3VtZW50O1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgbG9va3VwIG1hcCBmb3IgdGhpcyByb290LCBjcmVhdGUgb25lLlxuICAgICAqL1xuICAgIGlmICghb2JzZXJ2ZXJzLmhhcyhsb29rdXBSb290KSkge1xuICAgICAgICBvYnNlcnZlcnMuc2V0KGxvb2t1cFJvb3QsIHt9KTtcbiAgICB9XG4gICAgdmFyIHJvb3RPYnNlcnZlcnMgPSBvYnNlcnZlcnMuZ2V0KGxvb2t1cFJvb3QpO1xuICAgIHZhciBrZXkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGFuIG9ic2VydmVyIGZvciB0aGlzIGNvbWJpbmF0aW9uIG9mIHJvb3QgYW5kIHNldHRpbmdzLFxuICAgICAqIGNyZWF0ZSBvbmUuXG4gICAgICovXG4gICAgaWYgKCFyb290T2JzZXJ2ZXJzW2tleV0pIHtcbiAgICAgICAgcm9vdE9ic2VydmVyc1trZXldID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZpcmVBbGxPYnNlcnZlckNhbGxiYWNrcywgX19hc3NpZ24oeyByb290OiByb290IH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3RPYnNlcnZlcnNba2V5XTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVJbnRlcnNlY3Rpb24oZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciA9IGluaXRJbnRlcnNlY3Rpb25PYnNlcnZlcihvcHRpb25zKTtcbiAgICBvYnNlcnZlckNhbGxiYWNrcy5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBvYnNlcnZlckNhbGxiYWNrcy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG9ic2VydmVJbnRlcnNlY3Rpb24gfTtcbiIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi8uLi91dGlscy93YXJuLW9uY2UubWpzJztcbmltcG9ydCB7IG9ic2VydmVJbnRlcnNlY3Rpb24gfSBmcm9tICcuL29ic2VydmVycy5tanMnO1xuXG5mdW5jdGlvbiB1c2VWaWV3cG9ydChfYSkge1xuICAgIHZhciB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgd2hpbGVJblZpZXcgPSBfYS53aGlsZUluVmlldywgb25WaWV3cG9ydEVudGVyID0gX2Eub25WaWV3cG9ydEVudGVyLCBvblZpZXdwb3J0TGVhdmUgPSBfYS5vblZpZXdwb3J0TGVhdmUsIF9iID0gX2Eudmlld3BvcnQsIHZpZXdwb3J0ID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgdmFyIHN0YXRlID0gdXNlUmVmKHtcbiAgICAgICAgaGFzRW50ZXJlZFZpZXc6IGZhbHNlLFxuICAgICAgICBpc0luVmlldzogZmFsc2UsXG4gICAgfSk7XG4gICAgdmFyIHNob3VsZE9ic2VydmUgPSBCb29sZWFuKHdoaWxlSW5WaWV3IHx8IG9uVmlld3BvcnRFbnRlciB8fCBvblZpZXdwb3J0TGVhdmUpO1xuICAgIGlmICh2aWV3cG9ydC5vbmNlICYmIHN0YXRlLmN1cnJlbnQuaGFzRW50ZXJlZFZpZXcpXG4gICAgICAgIHNob3VsZE9ic2VydmUgPSBmYWxzZTtcbiAgICB2YXIgdXNlT2JzZXJ2ZXIgPSB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyB1c2VNaXNzaW5nSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbiAgICAgICAgOiB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbiAgICB1c2VPYnNlcnZlcihzaG91bGRPYnNlcnZlLCBzdGF0ZS5jdXJyZW50LCB2aXN1YWxFbGVtZW50LCB2aWV3cG9ydCk7XG59XG52YXIgdGhyZXNob2xkTmFtZXMgPSB7XG4gICAgc29tZTogMCxcbiAgICBhbGw6IDEsXG59O1xuZnVuY3Rpb24gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoc2hvdWxkT2JzZXJ2ZSwgc3RhdGUsIHZpc3VhbEVsZW1lbnQsIF9hKSB7XG4gICAgdmFyIHJvb3QgPSBfYS5yb290LCByb290TWFyZ2luID0gX2EubWFyZ2luLCBfYiA9IF9hLmFtb3VudCwgYW1vdW50ID0gX2IgPT09IHZvaWQgMCA/IFwic29tZVwiIDogX2IsIG9uY2UgPSBfYS5vbmNlO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkT2JzZXJ2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByb290OiByb290ID09PSBudWxsIHx8IHJvb3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJvb3QuY3VycmVudCxcbiAgICAgICAgICAgIHJvb3RNYXJnaW46IHJvb3RNYXJnaW4sXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHR5cGVvZiBhbW91bnQgPT09IFwibnVtYmVyXCIgPyBhbW91bnQgOiB0aHJlc2hvbGROYW1lc1thbW91bnRdLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBpc0ludGVyc2VjdGluZyA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSdzIGJlZW4gbm8gY2hhbmdlIGluIHRoZSB2aWV3cG9ydCBzdGF0ZSwgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNJblZpZXcgPT09IGlzSW50ZXJzZWN0aW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlLmlzSW5WaWV3ID0gaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhhbmRsZSBoYXNFbnRlcmVkVmlldy4gSWYgdGhpcyBpcyBvbmx5IG1lYW50IHRvIHJ1biBvbmNlLCBhbmRcbiAgICAgICAgICAgICAqIGVsZW1lbnQgaXNuJ3QgdmlzaWJsZSwgZWFybHkgcmV0dXJuLiBPdGhlcndpc2Ugc2V0IGhhc0VudGVyZWRWaWV3IHRvIHRydWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChvbmNlICYmICFpc0ludGVyc2VjdGluZyAmJiBzdGF0ZS5oYXNFbnRlcmVkVmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaGFzRW50ZXJlZFZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkluVmlldywgaXNJbnRlcnNlY3RpbmcpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2UgdGhlIGxhdGVzdCBjb21taXR0ZWQgcHJvcHMgcmF0aGVyIHRoYW4gdGhlIG9uZXMgaW4gc2NvcGVcbiAgICAgICAgICAgICAqIHdoZW4gdGhpcyBvYnNlcnZlciBpcyBjcmVhdGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGlzSW50ZXJzZWN0aW5nXG4gICAgICAgICAgICAgICAgPyBwcm9wcy5vblZpZXdwb3J0RW50ZXJcbiAgICAgICAgICAgICAgICA6IHByb3BzLm9uVmlld3BvcnRMZWF2ZTtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlbnRyeSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvYnNlcnZlSW50ZXJzZWN0aW9uKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgb3B0aW9ucywgaW50ZXJzZWN0aW9uQ2FsbGJhY2spO1xuICAgIH0sIFtzaG91bGRPYnNlcnZlLCByb290LCByb290TWFyZ2luLCBhbW91bnRdKTtcbn1cbi8qKlxuICogSWYgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbWlzc2luZywgd2UgYWN0aXZhdGUgaW5WaWV3IGFuZCBmaXJlIG9uVmlld3BvcnRFbnRlclxuICogb24gbW91bnQuIFRoaXMgd2F5LCB0aGUgcGFnZSB3aWxsIGJlIGluIHRoZSBzdGF0ZSB0aGUgYXV0aG9yIGV4cGVjdHMgdXNlcnNcbiAqIHRvIHNlZSBpdCBpbiBmb3IgZXZlcnlvbmUuXG4gKi9cbmZ1bmN0aW9uIHVzZU1pc3NpbmdJbnRlcnNlY3Rpb25PYnNlcnZlcihzaG91bGRPYnNlcnZlLCBzdGF0ZSwgdmlzdWFsRWxlbWVudCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5mYWxsYmFjaywgZmFsbGJhY2sgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkT2JzZXJ2ZSB8fCAhZmFsbGJhY2spXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKGZhbHNlLCBcIkludGVyc2VjdGlvbk9ic2VydmVyIG5vdCBhdmFpbGFibGUgb24gdGhpcyBkZXZpY2UuIHdoaWxlSW5WaWV3IGFuaW1hdGlvbnMgd2lsbCB0cmlnZ2VyIG9uIG1vdW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZSB0aGlzIGluIGFuIHJBRiBiZWNhdXNlLCBhdCB0aGlzIHBvaW50LCB0aGUgYW5pbWF0aW9uIHN0YXRlXG4gICAgICAgICAqIHdvbid0IGhhdmUgZmx1c2hlZCBmb3IgdGhlIGZpcnN0IHRpbWUgYW5kIHRoZXJlJ3MgY2VydGFpbiBsb2dpYyBpblxuICAgICAgICAgKiB0aGVyZSB0aGF0IGJlaGF2ZXMgZGlmZmVyZW50bHkgb24gdGhlIGluaXRpYWwgYW5pbWF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGhvb2sgc2hvdWxkIGJlIHF1aXRlIHJhcmVseSBjYWxsZWQgc28gc2V0dGluZyB0aGlzIGluIGFuIHJBRlxuICAgICAgICAgKiBpcyBwcmVmZXJyZWQgdG8gY2hhbmdpbmcgdGhlIGJlaGF2aW91ciBvZiB0aGUgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHN0YXRlLmhhc0VudGVyZWRWaWV3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvblZpZXdwb3J0RW50ZXIgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCkub25WaWV3cG9ydEVudGVyO1xuICAgICAgICAgICAgb25WaWV3cG9ydEVudGVyID09PSBudWxsIHx8IG9uVmlld3BvcnRFbnRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25WaWV3cG9ydEVudGVyKG51bGwpO1xuICAgICAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkluVmlldywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtzaG91bGRPYnNlcnZlXSk7XG59XG5cbmV4cG9ydCB7IHVzZVZpZXdwb3J0IH07XG4iLCJ2YXIgbWFrZVJlbmRlcmxlc3NDb21wb25lbnQgPSBmdW5jdGlvbiAoaG9vaykgeyByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaG9vayhwcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG59OyB9O1xuXG5leHBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9O1xuIiwiaW1wb3J0IHsgdXNlRm9jdXNHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLWZvY3VzLWdlc3R1cmUubWpzJztcbmltcG9ydCB7IHVzZUhvdmVyR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3VzZS1ob3Zlci1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VUYXBHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLXRhcC1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydCB9IGZyb20gJy4vdmlld3BvcnQvdXNlLXZpZXdwb3J0Lm1qcyc7XG5pbXBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzJztcblxudmFyIGdlc3R1cmVBbmltYXRpb25zID0ge1xuICAgIGluVmlldzogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlVmlld3BvcnQpLFxuICAgIHRhcDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlVGFwR2VzdHVyZSksXG4gICAgZm9jdXM6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUZvY3VzR2VzdHVyZSksXG4gICAgaG92ZXI6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUhvdmVyR2VzdHVyZSksXG59O1xuXG5leHBvcnQgeyBnZXN0dXJlQW5pbWF0aW9ucyB9O1xuIiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNOb2RlT3JDaGlsZCB9IGZyb20gJy4vdXRpbHMvaXMtbm9kZS1vci1jaGlsZC5tanMnO1xuaW1wb3J0IHsgdXNlUG9pbnRlckV2ZW50LCBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvdXNlLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2UtdW5tb3VudC1lZmZlY3QubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgaXNEcmFnQWN0aXZlIH0gZnJvbSAnLi9kcmFnL3V0aWxzL2xvY2subWpzJztcblxuLyoqXG4gKiBAcGFyYW0gaGFuZGxlcnMgLVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZVRhcEdlc3R1cmUoX2EpIHtcbiAgICB2YXIgb25UYXAgPSBfYS5vblRhcCwgb25UYXBTdGFydCA9IF9hLm9uVGFwU3RhcnQsIG9uVGFwQ2FuY2VsID0gX2Eub25UYXBDYW5jZWwsIHdoaWxlVGFwID0gX2Eud2hpbGVUYXAsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50O1xuICAgIHZhciBoYXNQcmVzc0xpc3RlbmVycyA9IG9uVGFwIHx8IG9uVGFwU3RhcnQgfHwgb25UYXBDYW5jZWwgfHwgd2hpbGVUYXA7XG4gICAgdmFyIGlzUHJlc3NpbmcgPSB1c2VSZWYoZmFsc2UpO1xuICAgIHZhciBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzID0gdXNlUmVmKG51bGwpO1xuICAgIGZ1bmN0aW9uIHJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMpO1xuICAgICAgICBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1BvaW50ZXJFbmQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCk7XG4gICAgICAgIGlzUHJlc3NpbmcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuVGFwLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAhaXNEcmFnQWN0aXZlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlclVwKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGlmICghY2hlY2tQb2ludGVyRW5kKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBvbmx5IGNvdW50IHRoaXMgYXMgYSB0YXAgZ2VzdHVyZSBpZiB0aGUgZXZlbnQudGFyZ2V0IGlzIHRoZSBzYW1lXG4gICAgICAgICAqIGFzLCBvciBhIGNoaWxkIG9mLCB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgICFpc05vZGVPckNoaWxkKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgPyBvblRhcENhbmNlbCA9PT0gbnVsbCB8fCBvblRhcENhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pXG4gICAgICAgICAgICA6IG9uVGFwID09PSBudWxsIHx8IG9uVGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblRhcChldmVudCwgaW5mbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckNhbmNlbChldmVudCwgaW5mbykge1xuICAgICAgICBpZiAoIWNoZWNrUG9pbnRlckVuZCgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvblRhcENhbmNlbCA9PT0gbnVsbCB8fCBvblRhcENhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCk7XG4gICAgICAgIGlmIChpc1ByZXNzaW5nLmN1cnJlbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlzUHJlc3NpbmcuY3VycmVudCA9IHRydWU7XG4gICAgICAgIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCA9IHBpcGUoYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVydXBcIiwgb25Qb2ludGVyVXApLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJjYW5jZWxcIiwgb25Qb2ludGVyQ2FuY2VsKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbnN1cmUgd2UgdHJpZ2dlciBhbmltYXRpb25zIGJlZm9yZSBmaXJpbmcgZXZlbnQgY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5UYXAsIHRydWUpO1xuICAgICAgICBvblRhcFN0YXJ0ID09PSBudWxsIHx8IG9uVGFwU3RhcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVGFwU3RhcnQoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQcmVzc0xpc3RlbmVycyA/IG9uUG9pbnRlckRvd24gOiB1bmRlZmluZWQpO1xuICAgIHVzZVVubW91bnRFZmZlY3QocmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKTtcbn1cblxuZXhwb3J0IHsgdXNlVGFwR2VzdHVyZSB9O1xuIiwiaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgdXNlRG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvdXNlLWRvbS1ldmVudC5tanMnO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gcHJvcHNcbiAqIEBwYXJhbSByZWZcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VGb2N1c0dlc3R1cmUoX2EpIHtcbiAgICB2YXIgd2hpbGVGb2N1cyA9IF9hLndoaWxlRm9jdXMsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50O1xuICAgIHZhciBvbkZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5Gb2N1cywgdHJ1ZSk7XG4gICAgfTtcbiAgICB2YXIgb25CbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5Gb2N1cywgZmFsc2UpO1xuICAgIH07XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJmb2N1c1wiLCB3aGlsZUZvY3VzID8gb25Gb2N1cyA6IHVuZGVmaW5lZCk7XG4gICAgdXNlRG9tRXZlbnQodmlzdWFsRWxlbWVudCwgXCJibHVyXCIsIHdoaWxlRm9jdXMgPyBvbkJsdXIgOiB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgeyB1c2VGb2N1c0dlc3R1cmUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi91c2UtY29uc3RhbnQubWpzJztcblxudmFyIGNvdW50ZXIgPSAwO1xudmFyIGluY3JlbWVudElkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY291bnRlcisrOyB9O1xudmFyIHVzZUlkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNlQ29uc3RhbnQoaW5jcmVtZW50SWQpOyB9O1xuLyoqXG4gKiBJZGVhbGx5IHdlJ2QgdXNlIHRoZSBmb2xsb3dpbmcgY29kZSB0byBzdXBwb3J0IFJlYWN0IDE4IG9wdGlvbmFsbHkuXG4gKiBCdXQgdGhpcyBmYWlybHkgZmFpbHMgaW4gV2VicGFjayAob3RoZXJ3aXNlIHRyZWVzaGFraW5nIHdvdWxkbid0IHdvcmsgYXQgYWxsKS5cbiAqIE5lZWQgdG8gY29tZSB1cCB3aXRoIGEgZGlmZmVyZW50IHdheSBvZiBmaWd1cmluZyB0aGlzIG91dC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IHVzZUlkID0gKFJlYWN0IGFzIGFueSkudXNlSWRcbi8vICAgICA/IChSZWFjdCBhcyBhbnkpLnVzZUlkXG4vLyAgICAgOiAoKSA9PiB1c2VDb25zdGFudChpbmNyZW1lbnRJZClcblxuZXhwb3J0IHsgdXNlSWQgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByZXNlbmNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pZC5tanMnO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgdGhlIGNoaWxkIG9mIGBBbmltYXRlUHJlc2VuY2VgLCBpdCBjYW4gdXNlIGB1c2VQcmVzZW5jZWBcbiAqIHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIGl0J3Mgc3RpbGwgcHJlc2VudCBpbiB0aGUgUmVhY3QgdHJlZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtpc1ByZXNlbnQsIHNhZmVUb1JlbW92ZV0gPSB1c2VQcmVzZW5jZSgpXG4gKlxuICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgICFpc1ByZXNlbnQgJiYgc2V0VGltZW91dChzYWZlVG9SZW1vdmUsIDEwMDApXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIElmIGBpc1ByZXNlbnRgIGlzIGBmYWxzZWAsIGl0IG1lYW5zIHRoYXQgYSBjb21wb25lbnQgaGFzIGJlZW4gcmVtb3ZlZCB0aGUgdHJlZSwgYnV0XG4gKiBgQW5pbWF0ZVByZXNlbmNlYCB3b24ndCByZWFsbHkgcmVtb3ZlIGl0IHVudGlsIGBzYWZlVG9SZW1vdmVgIGhhcyBiZWVuIGNhbGxlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZVByZXNlbmNlKCkge1xuICAgIHZhciBjb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIGlmIChjb250ZXh0ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gW3RydWUsIG51bGxdO1xuICAgIHZhciBpc1ByZXNlbnQgPSBjb250ZXh0LmlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUgPSBjb250ZXh0Lm9uRXhpdENvbXBsZXRlLCByZWdpc3RlciA9IGNvbnRleHQucmVnaXN0ZXI7XG4gICAgLy8gSXQncyBzYWZlIHRvIGNhbGwgdGhlIGZvbGxvd2luZyBob29rcyBjb25kaXRpb25hbGx5IChhZnRlciBhbiBlYXJseSByZXR1cm4pIGJlY2F1c2UgdGhlIGNvbnRleHQgd2lsbCBhbHdheXNcbiAgICAvLyBlaXRoZXIgYmUgbnVsbCBvciBub24tbnVsbCBmb3IgdGhlIGxpZmVzcGFuIG9mIHRoZSBjb21wb25lbnQuXG4gICAgLy8gUmVwbGFjZSB3aXRoIHVzZUlkIHdoZW4gcmVsZWFzZWQgaW4gUmVhY3RcbiAgICB2YXIgaWQgPSB1c2VJZCgpO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiByZWdpc3RlcihpZCk7IH0sIFtdKTtcbiAgICB2YXIgc2FmZVRvUmVtb3ZlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb25FeGl0Q29tcGxldGUgPT09IG51bGwgfHwgb25FeGl0Q29tcGxldGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRXhpdENvbXBsZXRlKGlkKTsgfTtcbiAgICByZXR1cm4gIWlzUHJlc2VudCAmJiBvbkV4aXRDb21wbGV0ZSA/IFtmYWxzZSwgc2FmZVRvUmVtb3ZlXSA6IFt0cnVlXTtcbn1cbi8qKlxuICogU2ltaWxhciB0byBgdXNlUHJlc2VuY2VgLCBleGNlcHQgYHVzZUlzUHJlc2VudGAgc2ltcGx5IHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyBwcmVzZW50LlxuICogVGhlcmUgaXMgbm8gYHNhZmVUb1JlbW92ZWAgZnVuY3Rpb24uXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyB1c2VJc1ByZXNlbnQgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgaXNQcmVzZW50ID0gdXNlSXNQcmVzZW50KClcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgIWlzUHJlc2VudCAmJiBjb25zb2xlLmxvZyhcIkkndmUgYmVlbiByZW1vdmVkIVwiKVxuICogICB9LCBbaXNQcmVzZW50XSlcbiAqXG4gKiAgIHJldHVybiA8ZGl2IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gaXNQcmVzZW50KHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KSk7XG59XG5mdW5jdGlvbiBpc1ByZXNlbnQoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0ID09PSBudWxsID8gdHJ1ZSA6IGNvbnRleHQuaXNQcmVzZW50O1xufVxuXG5leHBvcnQgeyBpc1ByZXNlbnQsIHVzZUlzUHJlc2VudCwgdXNlUHJlc2VuY2UgfTtcbiIsImZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJldikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcHJldkxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICAgIGlmIChwcmV2TGVuZ3RoICE9PSBuZXh0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwcmV2W2ldICE9PSBuZXh0W2ldKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgc2hhbGxvd0NvbXBhcmUgfTtcbiIsIi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBudW1lcmljYWwgc3RyaW5nLCBpZSBhIHN0cmluZyB0aGF0IGlzIHB1cmVseSBhIG51bWJlciBlZyBcIjEwMFwiIG9yIFwiLTEwMC4xXCJcbiAqL1xudmFyIGlzTnVtZXJpY2FsU3RyaW5nID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9eXFwtP1xcZCpcXC4/XFxkKyQvLnRlc3Qodik7IH07XG5cbmV4cG9ydCB7IGlzTnVtZXJpY2FsU3RyaW5nIH07XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBhIHplcm8gdmFsdWUgc3RyaW5nIGxpa2UgXCIwcHhcIiBvciBcIjAlXCJcbiAqL1xudmFyIGlzWmVyb1ZhbHVlU3RyaW5nID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9eMFteLlxcc10rJC8udGVzdCh2KTsgfTtcblxuZXhwb3J0IHsgaXNaZXJvVmFsdWVTdHJpbmcgfTtcbiIsIi8qKlxuICogVGVzdHMgYSBwcm92aWRlZCB2YWx1ZSBhZ2FpbnN0IGEgVmFsdWVUeXBlXG4gKi9cbnZhciB0ZXN0VmFsdWVUeXBlID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiB0eXBlLnRlc3Qodik7IH07IH07XG5cbmV4cG9ydCB7IHRlc3RWYWx1ZVR5cGUgfTtcbiIsImltcG9ydCB7IG51bWJlciwgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcbmltcG9ydCB7IGF1dG8gfSBmcm9tICcuL3R5cGUtYXV0by5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZSB0eXBlcyBjb21tb25seSB1c2VkIGZvciBkaW1lbnNpb25zXG4gKi9cbnZhciBkaW1lbnNpb25WYWx1ZVR5cGVzID0gW251bWJlciwgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCwgYXV0b107XG4vKipcbiAqIFRlc3RzIGEgZGltZW5zaW9uYWwgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBkaW1lbnNpb24gVmFsdWVUeXBlc1xuICovXG52YXIgZmluZERpbWVuc2lvblZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIGRpbWVuc2lvblZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTtcbn07XG5cbmV4cG9ydCB7IGRpbWVuc2lvblZhbHVlVHlwZXMsIGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgfTtcbiIsIi8qKlxuICogVmFsdWVUeXBlIGZvciBcImF1dG9cIlxuICovXG52YXIgYXV0byA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA9PT0gXCJhdXRvXCI7IH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9LFxufTtcblxuZXhwb3J0IHsgYXV0byB9O1xuIiwiaW1wb3J0IHsgX19zcHJlYWRBcnJheSwgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgY29sb3IsIGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBkaW1lbnNpb25WYWx1ZVR5cGVzIH0gZnJvbSAnLi9kaW1lbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB0ZXN0VmFsdWVUeXBlIH0gZnJvbSAnLi90ZXN0Lm1qcyc7XG5cbi8qKlxuICogQSBsaXN0IG9mIGFsbCBWYWx1ZVR5cGVzXG4gKi9cbnZhciB2YWx1ZVR5cGVzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZGltZW5zaW9uVmFsdWVUeXBlcyksIGZhbHNlKSwgW2NvbG9yLCBjb21wbGV4XSwgZmFsc2UpO1xuLyoqXG4gKiBUZXN0cyBhIHZhbHVlIGFnYWluc3QgdGhlIGxpc3Qgb2YgVmFsdWVUeXBlc1xuICovXG52YXIgZmluZFZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2YWx1ZVR5cGVzLmZpbmQodGVzdFZhbHVlVHlwZSh2KSk7IH07XG5cbmV4cG9ydCB7IGZpbmRWYWx1ZVR5cGUgfTtcbiIsImltcG9ydCB7IF9fcmVzdCwgX19hc3NpZ24sIF9fc3ByZWFkQXJyYXksIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBpc051bWVyaWNhbFN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzJztcbmltcG9ydCB7IGlzWmVyb1ZhbHVlU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtemVyby12YWx1ZS1zdHJpbmcubWpzJztcbmltcG9ydCB7IHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRBbmltYXRhYmxlTm9uZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9hbmltYXRhYmxlLW5vbmUubWpzJztcbmltcG9ydCB7IGZpbmRWYWx1ZVR5cGUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvZmluZC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuL3ZhcmlhbnRzLm1qcyc7XG5cbi8qKlxuICogU2V0IFZpc3VhbEVsZW1lbnQncyBNb3Rpb25WYWx1ZSwgY3JlYXRpbmcgYSBuZXcgTW90aW9uVmFsdWUgZm9yIGl0IGlmXG4gKiBpdCBkb2Vzbid0IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXRNb3Rpb25WYWx1ZSh2aXN1YWxFbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkuc2V0KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSh2YWx1ZSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgdmFyIF9hID0gcmVzb2x2ZWQgPyB2aXN1YWxFbGVtZW50Lm1ha2VUYXJnZXRBbmltYXRhYmxlKHJlc29sdmVkLCBmYWxzZSkgOiB7fSwgX2IgPSBfYS50cmFuc2l0aW9uRW5kLCB0cmFuc2l0aW9uRW5kID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7IF9hLnRyYW5zaXRpb247IHZhciB0YXJnZXQgPSBfX3Jlc3QoX2EsIFtcInRyYW5zaXRpb25FbmRcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcbiAgICB0YXJnZXQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGFyZ2V0KSwgdHJhbnNpdGlvbkVuZCk7XG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICB2YXIgdmFsdWUgPSByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzKHRhcmdldFtrZXldKTtcbiAgICAgICAgc2V0TW90aW9uVmFsdWUodmlzdWFsRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgdmFyaWFudExhYmVscykge1xuICAgIHZhciByZXZlcnNlZExhYmVscyA9IF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh2YXJpYW50TGFiZWxzKSwgZmFsc2UpLnJldmVyc2UoKTtcbiAgICByZXZlcnNlZExhYmVscy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgdmFyaWFudCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudChrZXkpO1xuICAgICAgICB2YXJpYW50ICYmIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCB2YXJpYW50KTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgc2V0VmFyaWFudHMoY2hpbGQsIHZhcmlhbnRMYWJlbHMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlcyh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgW2RlZmluaXRpb25dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHZhciBfZDtcbiAgICB2YXIgbmV3VmFsdWVLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIXZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KTsgfSk7XG4gICAgdmFyIG51bU5ld1ZhbHVlcyA9IG5ld1ZhbHVlS2V5cy5sZW5ndGg7XG4gICAgaWYgKCFudW1OZXdWYWx1ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU5ld1ZhbHVlczsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBuZXdWYWx1ZUtleXNbaV07XG4gICAgICAgIHZhciB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHRhcmdldCBpcyBhIHNlcmllcyBvZiBrZXlmcmFtZXMsIHdlIGNhbiB1c2UgdGhlIGZpcnN0IHZhbHVlXG4gICAgICAgICAqIGluIHRoZSBhcnJheS4gSWYgdGhpcyBmaXJzdCB2YWx1ZSBpcyBudWxsLCB3ZSdsbCBzdGlsbCBuZWVkIHRvIHJlYWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0VmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRhcmdldFZhbHVlWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzbid0IGtleWZyYW1lcywgb3IgdGhlIGZpcnN0IGtleWZyYW1lIHdhcyBudWxsLCB3ZSBuZWVkIHRvXG4gICAgICAgICAqIGZpcnN0IGNoZWNrIGlmIGFuIG9yaWdpbiB2YWx1ZSB3YXMgZXhwbGljaXRseSBkZWZpbmVkIGluIHRoZSB0cmFuc2l0aW9uIGFzIFwiZnJvbVwiLFxuICAgICAgICAgKiBpZiBub3QgcmVhZCB0aGUgdmFsdWUgZnJvbSB0aGUgRE9NLiBBcyBhbiBhYnNvbHV0ZSBmYWxsYmFjaywgdGFrZSB0aGUgZGVmaW5lZCB0YXJnZXQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gKF9iID0gKF9hID0gb3JpZ2luW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZpc3VhbEVsZW1lbnQucmVhZFZhbHVlKGtleSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRhcmdldFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB2YWx1ZSBpcyBzdGlsbCB1bmRlZmluZWQgb3IgbnVsbCwgaWdub3JlIGl0LiBQcmVmZXJhYmx5IHRoaXMgd291bGQgdGhyb3csXG4gICAgICAgICAqIGJ1dCB0aGlzIHdhcyBjYXVzaW5nIGlzc3VlcyBpbiBGcmFtZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAoaXNOdW1lcmljYWxTdHJpbmcodmFsdWUpIHx8IGlzWmVyb1ZhbHVlU3RyaW5nKHZhbHVlKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBudW1iZXIgcmVhZCBhcyBhIHN0cmluZywgaWUgXCIwXCIgb3IgXCIyMDBcIiwgY29udmVydCBpdCB0byBhIG51bWJlclxuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghZmluZFZhbHVlVHlwZSh2YWx1ZSkgJiYgY29tcGxleC50ZXN0KHRhcmdldFZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2aXN1YWxFbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUodmFsdWUpKTtcbiAgICAgICAgKF9jID0gKF9kID0gb3JpZ2luKVtrZXldKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2Rba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbikge1xuICAgIGlmICghdHJhbnNpdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbiAgICByZXR1cm4gdmFsdWVUcmFuc2l0aW9uLmZyb207XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uLCB2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgb3JpZ2luID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvcmlnaW5ba2V5XSA9XG4gICAgICAgICAgICAoX2EgPSBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2IgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbjtcbn1cblxuZXhwb3J0IHsgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMsIGdldE9yaWdpbiwgZ2V0T3JpZ2luRnJvbVRyYW5zaXRpb24sIHNldFRhcmdldCwgc2V0VmFsdWVzIH07XG4iLCJpbXBvcnQgeyBfX3JlYWQsIF9fcmVzdCwgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBzdGFydEFuaW1hdGlvbiB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy90cmFuc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgc2V0VGFyZ2V0IH0gZnJvbSAnLi9zZXR0ZXJzLm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlVmFyaWFudCB9IGZyb20gJy4vdmFyaWFudHMubWpzJztcbmltcG9ydCB7IGlzVHJhbnNmb3JtUHJvcCB9IGZyb20gJy4uL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGVWaXN1YWxFbGVtZW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZpc3VhbEVsZW1lbnQubm90aWZ5QW5pbWF0aW9uU3RhcnQoZGVmaW5pdGlvbik7XG4gICAgdmFyIGFuaW1hdGlvbjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IGRlZmluaXRpb24ubWFwKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgICBhbmltYXRpb24gPSBQcm9taXNlLmFsbChhbmltYXRpb25zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcmVzb2x2ZWREZWZpbml0aW9uID0gdHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBvcHRpb25zLmN1c3RvbSlcbiAgICAgICAgICAgIDogZGVmaW5pdGlvbjtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCByZXNvbHZlZERlZmluaXRpb24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9uLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmlzdWFsRWxlbWVudC5ub3RpZnlBbmltYXRpb25Db21wbGV0ZShkZWZpbml0aW9uKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zLmN1c3RvbSk7XG4gICAgdmFyIF9iID0gKHJlc29sdmVkIHx8IHt9KS50cmFuc2l0aW9uLCB0cmFuc2l0aW9uID0gX2IgPT09IHZvaWQgMCA/IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB8fCB7fSA6IF9iO1xuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb25PdmVycmlkZSkge1xuICAgICAgICB0cmFuc2l0aW9uID0gb3B0aW9ucy50cmFuc2l0aW9uT3ZlcnJpZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmUgYSB2YXJpYW50LCBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IHJ1bnMgaXQgYXMgYW4gYW5pbWF0aW9uLlxuICAgICAqIE90aGVyd2lzZSwgd2UgcmVzb2x2ZSBhIFByb21pc2UgaW1tZWRpYXRlbHkgZm9yIGEgY29tcG9zYWJsZSBuby1vcC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0QW5pbWF0aW9uID0gcmVzb2x2ZWRcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmltYXRlVGFyZ2V0KHZpc3VhbEVsZW1lbnQsIHJlc29sdmVkLCBvcHRpb25zKTsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9O1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmUgY2hpbGRyZW4sIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBhbGwgdGhlaXIgYW5pbWF0aW9ucy5cbiAgICAgKiBPdGhlcndpc2UsIHdlIHJlc29sdmUgYSBQcm9taXNlIGltbWVkaWF0ZWx5IGZvciBhIGNvbXBvc2FibGUgbm8tb3AuXG4gICAgICovXG4gICAgdmFyIGdldENoaWxkQW5pbWF0aW9ucyA9ICgoX2EgPSB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNpemUpXG4gICAgICAgID8gZnVuY3Rpb24gKGZvcndhcmREZWxheSkge1xuICAgICAgICAgICAgaWYgKGZvcndhcmREZWxheSA9PT0gdm9pZCAwKSB7IGZvcndhcmREZWxheSA9IDA7IH1cbiAgICAgICAgICAgIHZhciBfYSA9IHRyYW5zaXRpb24uZGVsYXlDaGlsZHJlbiwgZGVsYXlDaGlsZHJlbiA9IF9hID09PSB2b2lkIDAgPyAwIDogX2EsIHN0YWdnZXJDaGlsZHJlbiA9IHRyYW5zaXRpb24uc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uID0gdHJhbnNpdGlvbi5zdGFnZ2VyRGlyZWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGVDaGlsZHJlbih2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBkZWxheUNoaWxkcmVuICsgZm9yd2FyZERlbGF5LCBzdGFnZ2VyQ2hpbGRyZW4sIHN0YWdnZXJEaXJlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7IH07XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHRyYW5zaXRpb24gZXhwbGljaXRseSBkZWZpbmVzIGEgXCJ3aGVuXCIgb3B0aW9uLCB3ZSBuZWVkIHRvIHJlc29sdmUgZWl0aGVyXG4gICAgICogdGhpcyBhbmltYXRpb24gb3IgYWxsIGNoaWxkcmVuIGFuaW1hdGlvbnMgYmVmb3JlIHBsYXlpbmcgdGhlIG90aGVyLlxuICAgICAqL1xuICAgIHZhciB3aGVuID0gdHJhbnNpdGlvbi53aGVuO1xuICAgIGlmICh3aGVuKSB7XG4gICAgICAgIHZhciBfYyA9IF9fcmVhZCh3aGVuID09PSBcImJlZm9yZUNoaWxkcmVuXCJcbiAgICAgICAgICAgID8gW2dldEFuaW1hdGlvbiwgZ2V0Q2hpbGRBbmltYXRpb25zXVxuICAgICAgICAgICAgOiBbZ2V0Q2hpbGRBbmltYXRpb25zLCBnZXRBbmltYXRpb25dLCAyKSwgZmlyc3QgPSBfY1swXSwgbGFzdCA9IF9jWzFdO1xuICAgICAgICByZXR1cm4gZmlyc3QoKS50aGVuKGxhc3QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtnZXRBbmltYXRpb24oKSwgZ2V0Q2hpbGRBbmltYXRpb25zKG9wdGlvbnMuZGVsYXkpXSk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBfYSkge1xuICAgIHZhciBfYjtcbiAgICB2YXIgX2MgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2QgPSBfYy5kZWxheSwgZGVsYXkgPSBfZCA9PT0gdm9pZCAwID8gMCA6IF9kLCB0cmFuc2l0aW9uT3ZlcnJpZGUgPSBfYy50cmFuc2l0aW9uT3ZlcnJpZGUsIHR5cGUgPSBfYy50eXBlO1xuICAgIHZhciBfZSA9IHZpc3VhbEVsZW1lbnQubWFrZVRhcmdldEFuaW1hdGFibGUoZGVmaW5pdGlvbiksIF9mID0gX2UudHJhbnNpdGlvbiwgdHJhbnNpdGlvbiA9IF9mID09PSB2b2lkIDAgPyB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCkgOiBfZiwgdHJhbnNpdGlvbkVuZCA9IF9lLnRyYW5zaXRpb25FbmQsIHRhcmdldCA9IF9fcmVzdChfZSwgW1widHJhbnNpdGlvblwiLCBcInRyYW5zaXRpb25FbmRcIl0pO1xuICAgIGlmICh0cmFuc2l0aW9uT3ZlcnJpZGUpXG4gICAgICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uT3ZlcnJpZGU7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICB2YXIgYW5pbWF0aW9uVHlwZVN0YXRlID0gdHlwZSAmJiAoKF9iID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmdldFN0YXRlKClbdHlwZV0pO1xuICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICB2YXIgdmFsdWVUYXJnZXQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCF2YWx1ZSB8fFxuICAgICAgICAgICAgdmFsdWVUYXJnZXQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKGFuaW1hdGlvblR5cGVTdGF0ZSAmJlxuICAgICAgICAgICAgICAgIHNob3VsZEJsb2NrQW5pbWF0aW9uKGFuaW1hdGlvblR5cGVTdGF0ZSwga2V5KSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSBfX2Fzc2lnbih7IGRlbGF5OiBkZWxheSB9LCB0cmFuc2l0aW9uKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2UgYW5pbWF0aW9uIGluc3RhbnQgaWYgdGhpcyBpcyBhIHRyYW5zZm9ybSBwcm9wIGFuZCB3ZSBzaG91bGQgcmVkdWNlIG1vdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnNob3VsZFJlZHVjZU1vdGlvbiAmJiBpc1RyYW5zZm9ybVByb3Aoa2V5KSkge1xuICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHZhbHVlVHJhbnNpdGlvbiksIHsgdHlwZTogZmFsc2UsIGRlbGF5OiAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmltYXRpb24gPSBzdGFydEFuaW1hdGlvbihrZXksIHZhbHVlLCB2YWx1ZVRhcmdldCwgdmFsdWVUcmFuc2l0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZCAmJiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgaWYgKGRlbGF5Q2hpbGRyZW4gPT09IHZvaWQgMCkgeyBkZWxheUNoaWxkcmVuID0gMDsgfVxuICAgIGlmIChzdGFnZ2VyQ2hpbGRyZW4gPT09IHZvaWQgMCkgeyBzdGFnZ2VyQ2hpbGRyZW4gPSAwOyB9XG4gICAgaWYgKHN0YWdnZXJEaXJlY3Rpb24gPT09IHZvaWQgMCkgeyBzdGFnZ2VyRGlyZWN0aW9uID0gMTsgfVxuICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgdmFyIG1heFN0YWdnZXJEdXJhdGlvbiA9ICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplIC0gMSkgKiBzdGFnZ2VyQ2hpbGRyZW47XG4gICAgdmFyIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uID0gc3RhZ2dlckRpcmVjdGlvbiA9PT0gMVxuICAgICAgICA/IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdm9pZCAwKSB7IGkgPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gaSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdm9pZCAwKSB7IGkgPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gbWF4U3RhZ2dlckR1cmF0aW9uIC0gaSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICAgICAgfTtcbiAgICBBcnJheS5mcm9tKHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKVxuICAgICAgICAuc29ydChzb3J0QnlUcmVlT3JkZXIpXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0ZVZhcmlhbnQoY2hpbGQsIHZhcmlhbnQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBkZWxheTogZGVsYXlDaGlsZHJlbiArIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uKGkpIH0pKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoaWxkLm5vdGlmeUFuaW1hdGlvbkNvbXBsZXRlKHZhcmlhbnQpOyB9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xufVxuZnVuY3Rpb24gc3RvcEFuaW1hdGlvbih2aXN1YWxFbGVtZW50KSB7XG4gICAgdmlzdWFsRWxlbWVudC5mb3JFYWNoVmFsdWUoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZS5zdG9wKCk7IH0pO1xufVxuZnVuY3Rpb24gc29ydEJ5VHJlZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYS5zb3J0Tm9kZVBvc2l0aW9uKGIpO1xufVxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciB3ZSBzaG91bGQgYmxvY2sgdGhpcyBhbmltYXRpb24uIFByZXZpb3VzbHksIHdlIGFjaGlldmVkIHRoaXNcbiAqIGp1c3QgYnkgY2hlY2tpbmcgd2hldGhlciB0aGUga2V5IHdhcyBsaXN0ZWQgaW4gcHJvdGVjdGVkS2V5cywgYnV0IHRoaXNcbiAqIHBvc2VkIHByb2JsZW1zIGlmIGFuIGFuaW1hdGlvbiB3YXMgdHJpZ2dlcmVkIGJ5IGFmdGVyQ2hpbGRyZW4gYW5kIHByb3RlY3RlZEtleXNcbiAqIGhhZCBiZWVuIHNldCB0byB0cnVlIGluIHRoZSBtZWFudGltZS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkQmxvY2tBbmltYXRpb24oX2EsIGtleSkge1xuICAgIHZhciBwcm90ZWN0ZWRLZXlzID0gX2EucHJvdGVjdGVkS2V5cywgbmVlZHNBbmltYXRpbmcgPSBfYS5uZWVkc0FuaW1hdGluZztcbiAgICB2YXIgc2hvdWxkQmxvY2sgPSBwcm90ZWN0ZWRLZXlzLmhhc093blByb3BlcnR5KGtleSkgJiYgbmVlZHNBbmltYXRpbmdba2V5XSAhPT0gdHJ1ZTtcbiAgICBuZWVkc0FuaW1hdGluZ1trZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrO1xufVxuXG5leHBvcnQgeyBhbmltYXRlVmlzdWFsRWxlbWVudCwgc29ydEJ5VHJlZU9yZGVyLCBzdG9wQW5pbWF0aW9uIH07XG4iLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5LCBfX3JlYWQsIF9fYXNzaWduLCBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBpc0FuaW1hdGlvbkNvbnRyb2xzIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanMnO1xuaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMta2V5ZnJhbWVzLXRhcmdldC5tanMnO1xuaW1wb3J0IHsgc2hhbGxvd0NvbXBhcmUgfSBmcm9tICcuLi8uLi91dGlscy9zaGFsbG93LWNvbXBhcmUubWpzJztcbmltcG9ydCB7IGFuaW1hdGVWaXN1YWxFbGVtZW50IH0gZnJvbSAnLi9hbmltYXRpb24ubWpzJztcbmltcG9ydCB7IEFuaW1hdGlvblR5cGUgfSBmcm9tICcuL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbHMsIHJlc29sdmVWYXJpYW50LCBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4vdmFyaWFudHMubWpzJztcblxudmFyIHZhcmlhbnRQcmlvcml0eU9yZGVyID0gW1xuICAgIEFuaW1hdGlvblR5cGUuQW5pbWF0ZSxcbiAgICBBbmltYXRpb25UeXBlLkluVmlldyxcbiAgICBBbmltYXRpb25UeXBlLkZvY3VzLFxuICAgIEFuaW1hdGlvblR5cGUuSG92ZXIsXG4gICAgQW5pbWF0aW9uVHlwZS5UYXAsXG4gICAgQW5pbWF0aW9uVHlwZS5EcmFnLFxuICAgIEFuaW1hdGlvblR5cGUuRXhpdCxcbl07XG52YXIgcmV2ZXJzZVByaW9yaXR5T3JkZXIgPSBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQodmFyaWFudFByaW9yaXR5T3JkZXIpLCBmYWxzZSkucmV2ZXJzZSgpO1xudmFyIG51bUFuaW1hdGlvblR5cGVzID0gdmFyaWFudFByaW9yaXR5T3JkZXIubGVuZ3RoO1xuZnVuY3Rpb24gYW5pbWF0ZUxpc3QodmlzdWFsRWxlbWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbWF0aW9ucykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gX2EuYW5pbWF0aW9uLCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRlVmlzdWFsRWxlbWVudCh2aXN1YWxFbGVtZW50LCBhbmltYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvblN0YXRlKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgYW5pbWF0ZSA9IGFuaW1hdGVMaXN0KHZpc3VhbEVsZW1lbnQpO1xuICAgIHZhciBzdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XG4gICAgdmFyIGFsbEFuaW1hdGVkS2V5cyA9IHt9O1xuICAgIHZhciBpc0luaXRpYWxSZW5kZXIgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIHRvIHJlZHVjZSB0aGUgYW5pbWF0aW9uIGRlZmluaXRpb25zIGZvclxuICAgICAqIGVhY2ggYWN0aXZlIGFuaW1hdGlvbiB0eXBlIGludG8gYW4gb2JqZWN0IG9mIHJlc29sdmVkIHZhbHVlcyBmb3IgaXQuXG4gICAgICovXG4gICAgdmFyIGJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzID0gZnVuY3Rpb24gKGFjYywgZGVmaW5pdGlvbikge1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXNvbHZlZC50cmFuc2l0aW9uOyB2YXIgdHJhbnNpdGlvbkVuZCA9IHJlc29sdmVkLnRyYW5zaXRpb25FbmQsIHRhcmdldCA9IF9fcmVzdChyZXNvbHZlZCwgW1widHJhbnNpdGlvblwiLCBcInRyYW5zaXRpb25FbmRcIl0pO1xuICAgICAgICAgICAgYWNjID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGFjYyksIHRhcmdldCksIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBpc0FuaW1hdGVkKGtleSkge1xuICAgICAgICByZXR1cm4gYWxsQW5pbWF0ZWRLZXlzW2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBqdXN0IGFsbG93cyB1cyB0byBpbmplY3QgbW9ja2VkIGFuaW1hdGlvbiBmdW5jdGlvbnNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRBbmltYXRlRnVuY3Rpb24obWFrZUFuaW1hdG9yKSB7XG4gICAgICAgIGFuaW1hdGUgPSBtYWtlQW5pbWF0b3IodmlzdWFsRWxlbWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gd2UgcmVjZWl2ZSBuZXcgcHJvcHMsIHdlIG5lZWQgdG86XG4gICAgICogMS4gQ3JlYXRlIGEgbGlzdCBvZiBwcm90ZWN0ZWQga2V5cyBmb3IgZWFjaCB0eXBlLiBUaGlzIGlzIGEgZGlyZWN0b3J5IG9mXG4gICAgICogICAgdmFsdWUga2V5cyB0aGF0IGFyZSBjdXJyZW50bHkgYmVpbmcgXCJoYW5kbGVkXCIgYnkgdHlwZXMgb2YgYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgKiAgICBzbyB0aGF0IHdoZW5ldmVyIGFuIGFuaW1hdGlvbiBpcyBwbGF5ZWQgb2YgYSBnaXZlbiB0eXBlLCB0aGVzZSB2YWx1ZXMgYXJlXG4gICAgICogICAgcHJvdGVjdGVkIGZyb20gYmVpbmcgYW5pbWF0ZWQuXG4gICAgICogMi4gRGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiB0eXBlIG5lZWRzIGFuaW1hdGluZy5cbiAgICAgKiAzLiBEZXRlcm1pbmUgaWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIGEgdHlwZSBhbmQgZmlndXJlIG91dFxuICAgICAqICAgIHdoYXQgdG8gYW5pbWF0ZSB0aG9zZSB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbmltYXRlQ2hhbmdlcyhvcHRpb25zLCBjaGFuZ2VkQWN0aXZlVHlwZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBwcm9wcyA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB2aXN1YWxFbGVtZW50LmdldFZhcmlhbnRDb250ZXh0KHRydWUpIHx8IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIGFuaW1hdGlvbnMgdGhhdCB3ZSdsbCBidWlsZCBpbnRvIGFzIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAqIHR5cGVzLiBUaGlzIHdpbGwgZ2V0IGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXAgdHJhY2sgb2Ygd2hpY2ggdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLiBUaGVuLCBhcyB3ZSBoaXQgbG93ZXIgcHJpb3JpdHlcbiAgICAgICAgICogYW5pbWF0aW9uIHR5cGVzLCB3ZSBjYW4gY2hlY2sgaWYgdGhleSBjb250YWluIHJlbW92ZWQgdmFsdWVzIGFuZCBhbmltYXRlIHRvIHRoYXQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVtb3ZlZEtleXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRpY3Rpb25hcnkgb2YgYWxsIGVuY291bnRlcmVkIGtleXMuIFRoaXMgaXMgYW4gb2JqZWN0IHRvIGxldCB1cyBidWlsZCBpbnRvIGFuZFxuICAgICAgICAgKiBjb3B5IGl0IHdpdGhvdXQgaXRlcmF0aW9uLiBFYWNoIHRpbWUgd2UgaGl0IGFuIGFuaW1hdGlvbiB0eXBlIHdlIHNldCBpdHMgcHJvdGVjdGVkXG4gICAgICAgICAqIGtleXMgLSB0aGUga2V5cyBpdHMgbm90IGFsbG93ZWQgdG8gYW5pbWF0ZSAtIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBlbmNvdW50ZXJlZEtleXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgdmFyaWFudCBoYXMgYmVlbiByZW1vdmVkIGF0IGEgZ2l2ZW4gaW5kZXgsIGFuZCB0aGlzIGNvbXBvbmVudCBpcyBjb250cm9sbGluZ1xuICAgICAgICAgKiB2YXJpYW50IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gZW5zdXJlIGxvd2VyLXByaW9yaXR5IHZhcmlhbnRzIGFyZSBmb3JjZWQgdG8gYW5pbWF0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciByZW1vdmVkVmFyaWFudEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gcmV2ZXJzZVByaW9yaXR5T3JkZXJbaV07XG4gICAgICAgICAgICB2YXIgdHlwZVN0YXRlID0gc3RhdGVbdHlwZV07XG4gICAgICAgICAgICB2YXIgcHJvcCA9IChfYSA9IHByb3BzW3R5cGVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250ZXh0W3R5cGVdO1xuICAgICAgICAgICAgdmFyIHByb3BJc1ZhcmlhbnQgPSBpc1ZhcmlhbnRMYWJlbChwcm9wKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyB0eXBlIGhhcyAqanVzdCogY2hhbmdlZCBpc0FjdGl2ZSBzdGF0dXMsIHNldCBhY3RpdmVEZWx0YVxuICAgICAgICAgICAgICogdG8gdGhhdCBzdGF0dXMuIE90aGVyd2lzZSBzZXQgdG8gbnVsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGFjdGl2ZURlbHRhID0gdHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgPyB0eXBlU3RhdGUuaXNBY3RpdmUgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZW1vdmVkVmFyaWFudEluZGV4ID0gaTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBwcm9wIGlzIGFuIGluaGVyaXRlZCB2YXJpYW50LCByYXRoZXIgdGhhbiBiZWVuIHNldCBkaXJlY3RseSBvbiB0aGVcbiAgICAgICAgICAgICAqIGNvbXBvbmVudCBpdHNlbGYsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFsbG93IHRoZSBwYXJlbnQgdG8gdHJpZ2dlciBhbmltYXRpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IENhbiBwcm9iYWJseSBjaGFuZ2UgdGhpcyB0byBhICFpc0NvbnRyb2xsaW5nVmFyaWFudHMgY2hlY2tcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGlzSW5oZXJpdGVkID0gcHJvcCA9PT0gY29udGV4dFt0eXBlXSAmJiBwcm9wICE9PSBwcm9wc1t0eXBlXSAmJiBwcm9wSXNWYXJpYW50O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNJbmhlcml0ZWQgJiZcbiAgICAgICAgICAgICAgICBpc0luaXRpYWxSZW5kZXIgJiZcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgICAgICBpc0luaGVyaXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgYWxsIGVuY291bnRlcmVkIGtleXMgc28gZmFyIGFzIHRoZSBwcm90ZWN0ZWQga2V5cyBmb3IgdGhpcyB0eXBlLiBUaGlzIHdpbGxcbiAgICAgICAgICAgICAqIGJlIGFueSBrZXkgdGhhdCBoYXMgYmVlbiBhbmltYXRlZCBvciBvdGhlcndpc2UgaGFuZGxlZCBieSBhY3RpdmUsIGhpZ2hlci1wcmlvcnRpeSB0eXBlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXMgPSBfX2Fzc2lnbih7fSwgZW5jb3VudGVyZWRLZXlzKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBza2lwIGFuYWx5c2luZyB0aGlzIHByb3AgZWFybHlcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIElmIGl0IGlzbid0IGFjdGl2ZSBhbmQgaGFzbid0ICpqdXN0KiBiZWVuIHNldCBhcyBpbmFjdGl2ZVxuICAgICAgICAgICAgKCF0eXBlU3RhdGUuaXNBY3RpdmUgJiYgYWN0aXZlRGVsdGEgPT09IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZGlkbid0IGFuZCBkb24ndCBoYXZlIGFueSBkZWZpbmVkIHByb3AgZm9yIHRoaXMgYW5pbWF0aW9uIHR5cGVcbiAgICAgICAgICAgICAgICAoIXByb3AgJiYgIXR5cGVTdGF0ZS5wcmV2UHJvcCkgfHxcbiAgICAgICAgICAgICAgICAvLyBPciBpZiB0aGUgcHJvcCBkb2Vzbid0IGRlZmluZSBhbiBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBpc0FuaW1hdGlvbkNvbnRyb2xzKHByb3ApIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3AgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgd2UgZ28gbG9vayB0aHJvdWdoIHRoZSB2YWx1ZXMgZGVmaW5lZCBvbiB0aGlzIHR5cGUsIGlmIHdlIGRldGVjdFxuICAgICAgICAgICAgICogYSBjaGFuZ2VkIHZhbHVlIG9yIGEgdmFsdWUgdGhhdCB3YXMgcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSwgd2Ugc2V0XG4gICAgICAgICAgICAgKiB0aGlzIHRvIHRydWUgYW5kIGFkZCB0aGlzIHByb3AgdG8gdGhlIGFuaW1hdGlvbiBsaXN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgdmFyaWFudERpZENoYW5nZSA9IGNoZWNrVmFyaWFudHNEaWRDaGFuZ2UodHlwZVN0YXRlLnByZXZQcm9wLCBwcm9wKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRBbmltYXRlVHlwZSA9IHZhcmlhbnREaWRDaGFuZ2UgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBtYWtpbmcgdGhpcyB2YXJpYW50IGFjdGl2ZSwgd2Ugd2FudCB0byBhbHdheXMgbWFrZSBpdCBhY3RpdmVcbiAgICAgICAgICAgICAgICAodHlwZSA9PT0gY2hhbmdlZEFjdGl2ZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLmlzQWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICAgICFpc0luaGVyaXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICBwcm9wSXNWYXJpYW50KSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZWQgYSBoaWdoZXItcHJpb3JpdHkgdmFyaWFudCAoaSBpcyBpbiByZXZlcnNlIG9yZGVyKVxuICAgICAgICAgICAgICAgIChpID4gcmVtb3ZlZFZhcmlhbnRJbmRleCAmJiBwcm9wSXNWYXJpYW50KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXMgYW5pbWF0aW9ucyBjYW4gYmUgc2V0IGFzIHZhcmlhbnQgbGlzdHMsIHZhcmlhbnRzIG9yIHRhcmdldCBvYmplY3RzLCB3ZVxuICAgICAgICAgICAgICogY29lcmNlIGV2ZXJ5dGhpbmcgdG8gYW4gYXJyYXkgaWYgaXQgaXNuJ3Qgb25lIGFscmVhZHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGRlZmluaXRpb25MaXN0ID0gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3AgOiBbcHJvcF07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIGFuIG9iamVjdCBvZiBhbGwgdGhlIHJlc29sdmVkIHZhbHVlcy4gV2UnbGwgdXNlIHRoaXMgaW4gdGhlIHN1YnNlcXVlbnRcbiAgICAgICAgICAgICAqIGFuaW1hdGVDaGFuZ2VzIGNhbGxzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByZXNvbHZlZFZhbHVlcyA9IGRlZmluaXRpb25MaXN0LnJlZHVjZShidWlsZFJlc29sdmVkVHlwZVZhbHVlcywge30pO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZURlbHRhID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXNvbHZlZFZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3cgd2UgbmVlZCB0byBsb29wIHRocm91Z2ggYWxsIHRoZSBrZXlzIGluIHRoZSBwcmV2IHByb3AgYW5kIHRoaXMgcHJvcCxcbiAgICAgICAgICAgICAqIGFuZCBkZWNpZGU6XG4gICAgICAgICAgICAgKiAxLiBJZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQsIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDIuIElmIGl0IGhhcyBiZWVuIHJlbW92ZWQsIGFuZCBuZWVkcyBhZGRpbmcgdG8gdGhlIHJlbW92ZWRLZXlzIHNldFxuICAgICAgICAgICAgICogMy4gSWYgaXQgaGFzIGJlZW4gcmVtb3ZlZCBpbiBhIGhpZ2hlciBwcmlvcml0eSB0eXBlIGFuZCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAqIDQuIElmIGl0IGhhc24ndCBiZWVuIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHkgYnV0IGhhc24ndCBjaGFuZ2VkLCBhbmRcbiAgICAgICAgICAgICAqICAgIG5lZWRzIGFkZGluZyB0byB0aGUgdHlwZSdzIHByb3RlY3RlZEtleXMgbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9iID0gdHlwZVN0YXRlLnByZXZSZXNvbHZlZFZhbHVlcywgcHJldlJlc29sdmVkVmFsdWVzID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgICAgICAgICB2YXIgYWxsS2V5cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2UmVzb2x2ZWRWYWx1ZXMpLCByZXNvbHZlZFZhbHVlcyk7XG4gICAgICAgICAgICB2YXIgbWFya1RvQW5pbWF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRBbmltYXRlVHlwZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgdHlwZVN0YXRlLm5lZWRzQW5pbWF0aW5nW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSByZXNvbHZlZFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gcHJldlJlc29sdmVkVmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoaXMgd2UgY2FuIGp1c3Qgc2tpcCBhaGVhZFxuICAgICAgICAgICAgICAgIGlmIChlbmNvdW50ZXJlZEtleXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCB3ZSBwcm9iYWJseSB3YW50IHRvIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGJvdGggdmFsdWVzIGFyZSBrZXlmcmFtZXMsIHdlIG5lZWQgdG8gc2hhbGxvdyBjb21wYXJlIHRoZW0gdG9cbiAgICAgICAgICAgICAgICAgICAgICogZGV0ZWN0IHdoZXRoZXIgYW55IHZhbHVlIGhhcyBjaGFuZ2VkLiBJZiBpdCBoYXMsIHdlIGFuaW1hdGUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQobmV4dCkgJiYgaXNLZXlmcmFtZXNUYXJnZXQocHJldikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikgfHwgdmFyaWFudERpZENoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBkb2Vzbid0IGFuaW1hdGUgYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBhZGRpbmcgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIGtleXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVN0YXRlLnByb3RlY3RlZEtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBuZXh0IGlzIGRlZmluZWQgYW5kIGRvZXNuJ3QgZXF1YWwgcHJldiwgaXQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIHVuZGVmaW5lZCwgaXQncyBiZWVuIHJlbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSB1bmRlZmluZWQgJiYgcmVtb3ZlZEtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIG5leHQgaGFzbid0IGNoYW5nZWQgYW5kIGl0IGlzbid0IHVuZGVmaW5lZCwgd2Ugd2FudCB0byBjaGVjayBpZiBpdCdzXG4gICAgICAgICAgICAgICAgICAgICAqIGJlZW4gcmVtb3ZlZCBieSBhIGhpZ2hlciBwcmlvcml0eVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIElmIGl0IGhhc24ndCBjaGFuZ2VkLCB3ZSBhZGQgaXQgdG8gdGhlIGxpc3Qgb2YgcHJvdGVjdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgKiB0byBlbnN1cmUgaXQgZG9lc24ndCBnZXQgYW5pbWF0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgdHlwZVN0YXRlIHNvIG5leHQgdGltZSBhbmltYXRlQ2hhbmdlcyBpcyBjYWxsZWQgd2UgY2FuIGNvbXBhcmUgdGhlXG4gICAgICAgICAgICAgKiBsYXRlc3QgcHJvcCBhbmQgcmVzb2x2ZWRWYWx1ZXMgdG8gdGhlc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcmV2UHJvcCA9IHByb3A7XG4gICAgICAgICAgICB0eXBlU3RhdGUucHJldlJlc29sdmVkVmFsdWVzID0gcmVzb2x2ZWRWYWx1ZXM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0eXBlU3RhdGUuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJlZEtleXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZW5jb3VudGVyZWRLZXlzKSwgcmVzb2x2ZWRWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJiB2aXN1YWxFbGVtZW50LmJsb2NrSW5pdGlhbEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHNob3VsZEFuaW1hdGVUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYW4gaW5oZXJpdGVkIHByb3Agd2Ugd2FudCB0byBoYXJkLWJsb2NrIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIFRPRE86IFRlc3QgYXMgdGhpcyBzaG91bGQgcHJvYmFibHkgc3RpbGwgaGFuZGxlIGFuaW1hdGlvbnMgdHJpZ2dlcmVkXG4gICAgICAgICAgICAgKiBieSByZW1vdmVkIHZhbHVlcz9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHNob3VsZEFuaW1hdGVUeXBlICYmICFpc0luaGVyaXRlZCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaC5hcHBseShhbmltYXRpb25zLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZGVmaW5pdGlvbkxpc3QubWFwKGZ1bmN0aW9uIChhbmltYXRpb24pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfX2Fzc2lnbih7IHR5cGU6IHR5cGUgfSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgfSk7IH0pKSwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0ZXJhdGUgdGhyb3VnaCBhbGwgYW5pbWF0aW9uIHR5cGVzIGluIHJldmVyc2UgcHJpb3JpdHkgb3JkZXIuIEZvciBlYWNoLCB3ZSB3YW50IHRvXG4gICAgICAgICAqIGRldGVjdCB3aGljaCB2YWx1ZXMgaXQncyBoYW5kbGluZyBhbmQgd2hldGhlciBvciBub3QgdGhleSd2ZSBjaGFuZ2VkIChhbmQgdGhlcmVmb3JlXG4gICAgICAgICAqIG5lZWQgdG8gYmUgYW5pbWF0ZWQpLiBJZiBhbnkgdmFsdWVzIGhhdmUgYmVlbiByZW1vdmVkLCB3ZSB3YW50IHRvIGRldGVjdCB0aG9zZSBpblxuICAgICAgICAgKiBsb3dlciBwcmlvcml0eSBwcm9wcyBhbmQgZmxhZyBmb3IgYW5pbWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1BbmltYXRpb25UeXBlczsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIGFsbEFuaW1hdGVkS2V5cyA9IF9fYXNzaWduKHt9LCBlbmNvdW50ZXJlZEtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUgYXJlIHNvbWUgcmVtb3ZlZCB2YWx1ZSB0aGF0IGhhdmVuJ3QgYmVlbiBkZWFsdCB3aXRoLFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24gdGhhdCBmYWxscyBiYWNrIGVpdGhlciB0byB0aGUgdmFsdWVcbiAgICAgICAgICogZGVmaW5lZCBpbiB0aGUgc3R5bGUgcHJvcCwgb3IgdGhlIGxhc3QgcmVhZCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChyZW1vdmVkS2V5cy5zaXplKSB7XG4gICAgICAgICAgICB2YXIgZmFsbGJhY2tBbmltYXRpb25fMSA9IHt9O1xuICAgICAgICAgICAgcmVtb3ZlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZhbGxiYWNrVGFyZ2V0ID0gdmlzdWFsRWxlbWVudC5nZXRCYXNlVGFyZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrVGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tBbmltYXRpb25fMVtrZXldID0gZmFsbGJhY2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbmltYXRpb25zLnB1c2goeyBhbmltYXRpb246IGZhbGxiYWNrQW5pbWF0aW9uXzEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZEFuaW1hdGUgPSBCb29sZWFuKGFuaW1hdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgaWYgKGlzSW5pdGlhbFJlbmRlciAmJlxuICAgICAgICAgICAgcHJvcHMuaW5pdGlhbCA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICF2aXN1YWxFbGVtZW50Lm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQpIHtcbiAgICAgICAgICAgIHNob3VsZEFuaW1hdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpc0luaXRpYWxSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHNob3VsZEFuaW1hdGUgPyBhbmltYXRlKGFuaW1hdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB3aGV0aGVyIGEgY2VydGFpbiBhbmltYXRpb24gdHlwZSBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWN0aXZlKHR5cGUsIGlzQWN0aXZlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gSWYgdGhlIGFjdGl2ZSBzdGF0ZSBoYXNuJ3QgY2hhbmdlZCwgd2UgY2FuIHNhZmVseSBkbyBub3RoaW5nIGhlcmVcbiAgICAgICAgaWYgKHN0YXRlW3R5cGVdLmlzQWN0aXZlID09PSBpc0FjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgLy8gUHJvcGFnYXRlIGFjdGl2ZSBjaGFuZ2UgdG8gY2hpbGRyZW5cbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBjaGlsZC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZSh0eXBlLCBpc0FjdGl2ZSk7IH0pO1xuICAgICAgICBzdGF0ZVt0eXBlXS5pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IGFuaW1hdGVDaGFuZ2VzKG9wdGlvbnMsIHR5cGUpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlW2tleV0ucHJvdGVjdGVkS2V5cyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpc0FuaW1hdGVkOiBpc0FuaW1hdGVkLFxuICAgICAgICBhbmltYXRlQ2hhbmdlczogYW5pbWF0ZUNoYW5nZXMsXG4gICAgICAgIHNldEFjdGl2ZTogc2V0QWN0aXZlLFxuICAgICAgICBzZXRBbmltYXRlRnVuY3Rpb246IHNldEFuaW1hdGVGdW5jdGlvbixcbiAgICAgICAgZ2V0U3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXRlOyB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlKHByZXYsIG5leHQpIHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQgIT09IHByZXY7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFyaWFudExhYmVscyhuZXh0KSkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVUeXBlU3RhdGUoaXNBY3RpdmUpIHtcbiAgICBpZiAoaXNBY3RpdmUgPT09IHZvaWQgMCkgeyBpc0FjdGl2ZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICBwcm90ZWN0ZWRLZXlzOiB7fSxcbiAgICAgICAgbmVlZHNBbmltYXRpbmc6IHt9LFxuICAgICAgICBwcmV2UmVzb2x2ZWRWYWx1ZXM6IHt9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuQW5pbWF0ZV0gPSBjcmVhdGVUeXBlU3RhdGUodHJ1ZSksXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuSW5WaWV3XSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtBbmltYXRpb25UeXBlLkhvdmVyXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtBbmltYXRpb25UeXBlLlRhcF0gPSBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgX2FbQW5pbWF0aW9uVHlwZS5EcmFnXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtBbmltYXRpb25UeXBlLkZvY3VzXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtBbmltYXRpb25UeXBlLkV4aXRdID0gY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIF9hO1xufVxuXG5leHBvcnQgeyBjaGVja1ZhcmlhbnRzRGlkQ2hhbmdlLCBjcmVhdGVBbmltYXRpb25TdGF0ZSwgdmFyaWFudFByaW9yaXR5T3JkZXIgfTtcbiIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfSBmcm9tICcuLi8uLi9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0aW9uLWNvbnRyb2xzLm1qcyc7XG5pbXBvcnQgeyB1c2VQcmVzZW5jZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IGNyZWF0ZUFuaW1hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgbWFrZVJlbmRlcmxlc3NDb21wb25lbnQgfSBmcm9tICcuLi91dGlscy9tYWtlLXJlbmRlcmxlc3MtY29tcG9uZW50Lm1qcyc7XG5cbnZhciBhbmltYXRpb25zID0ge1xuICAgIGFuaW1hdGlvbjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgYW5pbWF0ZSA9IF9hLmFuaW1hdGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBkeW5hbWljYWxseSBnZW5lcmF0ZSB0aGUgQW5pbWF0aW9uU3RhdGUgbWFuYWdlciBhcyBpdCBjb250YWlucyBhIHJlZmVyZW5jZVxuICAgICAgICAgKiB0byB0aGUgdW5kZXJseWluZyBhbmltYXRpb24gbGlicmFyeS4gV2Ugb25seSB3YW50IHRvIGxvYWQgdGhhdCBpZiB3ZSBsb2FkIHRoaXMsXG4gICAgICAgICAqIHNvIHBlb3BsZSBjYW4gb3B0aW9uYWxseSBjb2RlIHNwbGl0IGl0IG91dCB1c2luZyB0aGUgYG1gIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgfHwgKHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgPSBjcmVhdGVBbmltYXRpb25TdGF0ZSh2aXN1YWxFbGVtZW50KSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdWJzY3JpYmUgYW55IHByb3ZpZGVkIEFuaW1hdGlvbkNvbnRyb2xzIHRvIHRoZSBjb21wb25lbnQncyBWaXN1YWxFbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNBbmltYXRpb25Db250cm9scyhhbmltYXRlKSkge1xuICAgICAgICAgICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGUuc3Vic2NyaWJlKHZpc3VhbEVsZW1lbnQpOyB9LCBbYW5pbWF0ZV0pO1xuICAgICAgICB9XG4gICAgfSksXG4gICAgZXhpdDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBjdXN0b20gPSBwcm9wcy5jdXN0b20sIHZpc3VhbEVsZW1lbnQgPSBwcm9wcy52aXN1YWxFbGVtZW50O1xuICAgICAgICB2YXIgX2EgPSBfX3JlYWQodXNlUHJlc2VuY2UoKSwgMiksIGlzUHJlc2VudCA9IF9hWzBdLCBzYWZlVG9SZW1vdmUgPSBfYVsxXTtcbiAgICAgICAgdmFyIHByZXNlbmNlQ29udGV4dCA9IHVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICAgICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB2aXN1YWxFbGVtZW50LmlzUHJlc2VudCA9IGlzUHJlc2VudDtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuRXhpdCwgIWlzUHJlc2VudCwgeyBjdXN0b206IChfYiA9IHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5jdXN0b20pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGN1c3RvbSB9KTtcbiAgICAgICAgICAgICFpc1ByZXNlbnQgJiYgKGFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFuaW1hdGlvbi50aGVuKHNhZmVUb1JlbW92ZSkpO1xuICAgICAgICB9LCBbaXNQcmVzZW50XSk7XG4gICAgfSksXG59O1xuXG5leHBvcnQgeyBhbmltYXRpb25zIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGlzTW91c2VFdmVudCwgaXNUb3VjaEV2ZW50IH0gZnJvbSAnLi91dGlscy9ldmVudC10eXBlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0RXZlbnRJbmZvIH0gZnJvbSAnLi4vZXZlbnRzL2V2ZW50LWluZm8ubWpzJztcbmltcG9ydCBzeW5jLCB7IGdldEZyYW1lRGF0YSwgY2FuY2VsU3luYyB9IGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyBzZWNvbmRzVG9NaWxsaXNlY29uZHMgfSBmcm9tICcuLi91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgZGlzdGFuY2UsIHBpcGUgfSBmcm9tICdwb3Btb3Rpb24nO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUGFuU2Vzc2lvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYW5TZXNzaW9uKGV2ZW50LCBoYW5kbGVycywgX2EpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHRyYW5zZm9ybVBhZ2VQb2ludCA9IF9iLnRyYW5zZm9ybVBhZ2VQb2ludDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFydEV2ZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0TW92ZUV2ZW50SW5mbyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy51cGRhdGVQb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghKF90aGlzLmxhc3RNb3ZlRXZlbnQgJiYgX3RoaXMubGFzdE1vdmVFdmVudEluZm8pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpbmZvID0gZ2V0UGFuSW5mbyhfdGhpcy5sYXN0TW92ZUV2ZW50SW5mbywgX3RoaXMuaGlzdG9yeSk7XG4gICAgICAgICAgICB2YXIgaXNQYW5TdGFydGVkID0gX3RoaXMuc3RhcnRFdmVudCAhPT0gbnVsbDtcbiAgICAgICAgICAgIC8vIE9ubHkgc3RhcnQgcGFubmluZyBpZiB0aGUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIDMgcGl4ZWxzLiBJZiB3ZSBtYWtlIGl0XG4gICAgICAgICAgICAvLyBhbnkgbGFyZ2VyIHRoYW4gdGhpcyB3ZSdsbCB3YW50IHRvIHJlc2V0IHRoZSBwb2ludGVyIGhpc3RvcnlcbiAgICAgICAgICAgIC8vIG9uIHRoZSBmaXJzdCB1cGRhdGUgdG8gYXZvaWQgdmlzdWFsIHNuYXBwaW5nIHRvIHRoZSBjdXJzb2UuXG4gICAgICAgICAgICB2YXIgaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQgPSBkaXN0YW5jZShpbmZvLm9mZnNldCwgeyB4OiAwLCB5OiAwIH0pID49IDM7XG4gICAgICAgICAgICBpZiAoIWlzUGFuU3RhcnRlZCAmJiAhaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gaW5mby5wb2ludDtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBnZXRGcmFtZURhdGEoKS50aW1lc3RhbXA7XG4gICAgICAgICAgICBfdGhpcy5oaXN0b3J5LnB1c2goX19hc3NpZ24oX19hc3NpZ24oe30sIHBvaW50KSwgeyB0aW1lc3RhbXA6IHRpbWVzdGFtcCB9KSk7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5oYW5kbGVycywgb25TdGFydCA9IF9hLm9uU3RhcnQsIG9uTW92ZSA9IF9hLm9uTW92ZTtcbiAgICAgICAgICAgIGlmICghaXNQYW5TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgb25TdGFydCAmJiBvblN0YXJ0KF90aGlzLmxhc3RNb3ZlRXZlbnQsIGluZm8pO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0RXZlbnQgPSBfdGhpcy5sYXN0TW92ZUV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25Nb3ZlICYmIG9uTW92ZShfdGhpcy5sYXN0TW92ZUV2ZW50LCBpbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgX3RoaXMubGFzdE1vdmVFdmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgX3RoaXMubGFzdE1vdmVFdmVudEluZm8gPSB0cmFuc2Zvcm1Qb2ludChpbmZvLCBfdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgICAgICAgICAgLy8gQmVjYXVzZSBTYWZhcmkgZG9lc24ndCB0cmlnZ2VyIG1vdXNldXAgZXZlbnRzIHdoZW4gaXQncyBhYm92ZSBhIGA8c2VsZWN0PmBcbiAgICAgICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpICYmIGV2ZW50LmJ1dHRvbnMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyVXAoZXZlbnQsIGluZm8pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRocm90dGxlIG1vdXNlIG1vdmUgZXZlbnQgdG8gb25jZSBwZXIgZnJhbWVcbiAgICAgICAgICAgIHN5bmMudXBkYXRlKF90aGlzLnVwZGF0ZVBvaW50LCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgICAgIF90aGlzLmVuZCgpO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuaGFuZGxlcnMsIG9uRW5kID0gX2Eub25FbmQsIG9uU2Vzc2lvbkVuZCA9IF9hLm9uU2Vzc2lvbkVuZDtcbiAgICAgICAgICAgIHZhciBwYW5JbmZvID0gZ2V0UGFuSW5mbyh0cmFuc2Zvcm1Qb2ludChpbmZvLCBfdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQpLCBfdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdGFydEV2ZW50ICYmIG9uRW5kKSB7XG4gICAgICAgICAgICAgICAgb25FbmQoZXZlbnQsIHBhbkluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25TZXNzaW9uRW5kICYmIG9uU2Vzc2lvbkVuZChldmVudCwgcGFuSW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSB0b3VjaCwgZG9uJ3Qgc3RhcnQgZGV0ZWN0aW5nIHRoaXMgZ2VzdHVyZVxuICAgICAgICBpZiAoaXNUb3VjaEV2ZW50KGV2ZW50KSAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1QYWdlUG9pbnQgPSB0cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIHZhciBpbmZvID0gZXh0cmFjdEV2ZW50SW5mbyhldmVudCk7XG4gICAgICAgIHZhciBpbml0aWFsSW5mbyA9IHRyYW5zZm9ybVBvaW50KGluZm8sIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICAgICAgdmFyIHBvaW50ID0gaW5pdGlhbEluZm8ucG9pbnQ7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBnZXRGcmFtZURhdGEoKS50aW1lc3RhbXA7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IFtfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcG9pbnQpLCB7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0pXTtcbiAgICAgICAgdmFyIG9uU2Vzc2lvblN0YXJ0ID0gaGFuZGxlcnMub25TZXNzaW9uU3RhcnQ7XG4gICAgICAgIG9uU2Vzc2lvblN0YXJ0ICYmXG4gICAgICAgICAgICBvblNlc3Npb25TdGFydChldmVudCwgZ2V0UGFuSW5mbyhpbml0aWFsSW5mbywgdGhpcy5oaXN0b3J5KSk7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzID0gcGlwZShhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJtb3ZlXCIsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCkpO1xuICAgIH1cbiAgICBQYW5TZXNzaW9uLnByb3RvdHlwZS51cGRhdGVIYW5kbGVycyA9IGZ1bmN0aW9uIChoYW5kbGVycykge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgfTtcbiAgICBQYW5TZXNzaW9uLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzICYmIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIGNhbmNlbFN5bmMudXBkYXRlKHRoaXMudXBkYXRlUG9pbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIFBhblNlc3Npb247XG59KCkpO1xuZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoaW5mbywgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVBhZ2VQb2ludCA/IHsgcG9pbnQ6IHRyYW5zZm9ybVBhZ2VQb2ludChpbmZvLnBvaW50KSB9IDogaW5mbztcbn1cbmZ1bmN0aW9uIHN1YnRyYWN0UG9pbnQoYSwgYikge1xuICAgIHJldHVybiB7IHg6IGEueCAtIGIueCwgeTogYS55IC0gYi55IH07XG59XG5mdW5jdGlvbiBnZXRQYW5JbmZvKF9hLCBoaXN0b3J5KSB7XG4gICAgdmFyIHBvaW50ID0gX2EucG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBkZWx0YTogc3VidHJhY3RQb2ludChwb2ludCwgbGFzdERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgb2Zmc2V0OiBzdWJ0cmFjdFBvaW50KHBvaW50LCBzdGFydERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgdmVsb2NpdHk6IGdldFZlbG9jaXR5KGhpc3RvcnksIDAuMSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5WzBdO1xufVxuZnVuY3Rpb24gbGFzdERldmljZVBvaW50KGhpc3RvcnkpIHtcbiAgICByZXR1cm4gaGlzdG9yeVtoaXN0b3J5Lmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0VmVsb2NpdHkoaGlzdG9yeSwgdGltZURlbHRhKSB7XG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIHZhciBpID0gaGlzdG9yeS5sZW5ndGggLSAxO1xuICAgIHZhciB0aW1lc3RhbXBlZFBvaW50ID0gbnVsbDtcbiAgICB2YXIgbGFzdFBvaW50ID0gbGFzdERldmljZVBvaW50KGhpc3RvcnkpO1xuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgdGltZXN0YW1wZWRQb2ludCA9IGhpc3RvcnlbaV07XG4gICAgICAgIGlmIChsYXN0UG9pbnQudGltZXN0YW1wIC0gdGltZXN0YW1wZWRQb2ludC50aW1lc3RhbXAgPlxuICAgICAgICAgICAgc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRpbWVEZWx0YSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKCF0aW1lc3RhbXBlZFBvaW50KSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgdmFyIHRpbWUgPSAobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wKSAvIDEwMDA7XG4gICAgaWYgKHRpbWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICB2YXIgY3VycmVudFZlbG9jaXR5ID0ge1xuICAgICAgICB4OiAobGFzdFBvaW50LnggLSB0aW1lc3RhbXBlZFBvaW50LngpIC8gdGltZSxcbiAgICAgICAgeTogKGxhc3RQb2ludC55IC0gdGltZXN0YW1wZWRQb2ludC55KSAvIHRpbWUsXG4gICAgfTtcbiAgICBpZiAoY3VycmVudFZlbG9jaXR5LnggPT09IEluZmluaXR5KSB7XG4gICAgICAgIGN1cnJlbnRWZWxvY2l0eS54ID0gMDtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRWZWxvY2l0eS55ID09PSBJbmZpbml0eSkge1xuICAgICAgICBjdXJyZW50VmVsb2NpdHkueSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50VmVsb2NpdHk7XG59XG5cbmV4cG9ydCB7IFBhblNlc3Npb24gfTtcbiIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNsYW1wLCBtaXgsIHByb2dyZXNzIH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IGNhbGNMZW5ndGggfSBmcm9tICcuLi8uLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzJztcblxuLyoqXG4gKiBBcHBseSBjb25zdHJhaW50cyB0byBhIHBvaW50LiBUaGVzZSBjb25zdHJhaW50cyBhcmUgYm90aCBwaHlzaWNhbCBhbG9uZyBhblxuICogYXhpcywgYW5kIGFuIGVsYXN0aWMgZmFjdG9yIHRoYXQgZGV0ZXJtaW5lcyBob3cgbXVjaCB0byBjb25zdHJhaW4gdGhlIHBvaW50XG4gKiBieSBpZiBpdCBkb2VzIGxpZSBvdXRzaWRlIHRoZSBkZWZpbmVkIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludHMocG9pbnQsIF9hLCBlbGFzdGljKSB7XG4gICAgdmFyIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBwb2ludCA8IG1pbikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbWluIHBvaW50IGRlZmluZWQsIGFuZCB0aGlzIGlzIG91dHNpZGUgb2YgdGhhdCwgY29uc3RyYWluXG4gICAgICAgIHBvaW50ID0gZWxhc3RpYyA/IG1peChtaW4sIHBvaW50LCBlbGFzdGljLm1pbikgOiBNYXRoLm1heChwb2ludCwgbWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgcG9pbnQgPiBtYXgpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1heCBwb2ludCBkZWZpbmVkLCBhbmQgdGhpcyBpcyBvdXRzaWRlIG9mIHRoYXQsIGNvbnN0cmFpblxuICAgICAgICBwb2ludCA9IGVsYXN0aWMgPyBtaXgobWF4LCBwb2ludCwgZWxhc3RpYy5tYXgpIDogTWF0aC5taW4ocG9pbnQsIG1heCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuIGRlZmluZWQgcmVsYXRpdmVseSB0byB0aGVcbiAqIG1lYXN1cmVkIGF4aXMuIFRoaXMgaXMgbWVhc3VyZWQgZnJvbSB0aGUgbmVhcmVzdCBlZGdlLCBzbyBhIG1heCBjb25zdHJhaW50IG9mIDIwMFxuICogb24gYW4gYXhpcyB3aXRoIGEgbWF4IHZhbHVlIG9mIDMwMCB3b3VsZCByZXR1cm4gYSBjb25zdHJhaW50IG9mIDUwMCAtIGF4aXMgbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhheGlzLCBtaW4sIG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjogbWluICE9PSB1bmRlZmluZWQgPyBheGlzLm1pbiArIG1pbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4OiBtYXggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBheGlzLm1heCArIG1heCAtIChheGlzLm1heCAtIGF4aXMubWluKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGNvbnN0cmFpbnRzIGluIHRlcm1zIG9mIHRoZSB2aWV3cG9ydCB3aGVuXG4gKiBkZWZpbmVkIHJlbGF0aXZlbHkgdG8gdGhlIG1lYXN1cmVkIGJvdW5kaW5nIGJveC5cbiAqL1xuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0Qm94LCBfYSkge1xuICAgIHZhciB0b3AgPSBfYS50b3AsIGxlZnQgPSBfYS5sZWZ0LCBib3R0b20gPSBfYS5ib3R0b20sIHJpZ2h0ID0gX2EucmlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC54LCBsZWZ0LCByaWdodCksXG4gICAgICAgIHk6IGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgdG9wLCBib3R0b20pLFxuICAgIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBheGlzXG4gKi9cbmZ1bmN0aW9uIGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRBeGlzLCBjb25zdHJhaW50c0F4aXMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIG1pbiA9IGNvbnN0cmFpbnRzQXhpcy5taW4gLSBsYXlvdXRBeGlzLm1pbjtcbiAgICB2YXIgbWF4ID0gY29uc3RyYWludHNBeGlzLm1heCAtIGxheW91dEF4aXMubWF4O1xuICAgIC8vIElmIHRoZSBjb25zdHJhaW50cyBheGlzIGlzIGFjdHVhbGx5IHNtYWxsZXIgdGhhbiB0aGUgbGF5b3V0IGF4aXMgdGhlbiB3ZSBjYW5cbiAgICAvLyBmbGlwIHRoZSBjb25zdHJhaW50c1xuICAgIGlmIChjb25zdHJhaW50c0F4aXMubWF4IC0gY29uc3RyYWludHNBeGlzLm1pbiA8XG4gICAgICAgIGxheW91dEF4aXMubWF4IC0gbGF5b3V0QXhpcy5taW4pIHtcbiAgICAgICAgX2EgPSBfX3JlYWQoW21heCwgbWluXSwgMiksIG1pbiA9IF9hWzBdLCBtYXggPSBfYVsxXTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWluOiBtaW4sIG1heDogbWF4IH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqL1xuZnVuY3Rpb24gY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMobGF5b3V0Qm94LCBjb25zdHJhaW50c0JveCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueCwgY29uc3RyYWludHNCb3gueCksXG4gICAgICAgIHk6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgY29uc3RyYWludHNCb3gueSksXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGEgdHJhbnNmb3JtIG9yaWdpbiByZWxhdGl2ZSB0byB0aGUgc291cmNlIGF4aXMsIGJldHdlZW4gMC0xLCB0aGF0IHJlc3VsdHNcbiAqIGluIGFuIGFzdGhldGljYWxseSBwbGVhc2luZyBzY2FsZS90cmFuc2Zvcm0gbmVlZGVkIHRvIHByb2plY3QgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBjYWxjT3JpZ2luKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgdmFyIG9yaWdpbiA9IDAuNTtcbiAgICB2YXIgc291cmNlTGVuZ3RoID0gY2FsY0xlbmd0aChzb3VyY2UpO1xuICAgIHZhciB0YXJnZXRMZW5ndGggPSBjYWxjTGVuZ3RoKHRhcmdldCk7XG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHNvdXJjZUxlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwcm9ncmVzcyh0YXJnZXQubWluLCB0YXJnZXQubWF4IC0gc291cmNlTGVuZ3RoLCBzb3VyY2UubWluKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlTGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgICAgIG9yaWdpbiA9IHByb2dyZXNzKHNvdXJjZS5taW4sIHNvdXJjZS5tYXggLSB0YXJnZXRMZW5ndGgsIHRhcmdldC5taW4pO1xuICAgIH1cbiAgICByZXR1cm4gY2xhbXAoMCwgMSwgb3JpZ2luKTtcbn1cbi8qKlxuICogUmViYXNlIHRoZSBjYWxjdWxhdGVkIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHJlbGF0aXZlIHRvIHRoZSBsYXlvdXQubWluIHBvaW50LlxuICovXG5mdW5jdGlvbiByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LCBjb25zdHJhaW50cykge1xuICAgIHZhciByZWxhdGl2ZUNvbnN0cmFpbnRzID0ge307XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWluID0gY29uc3RyYWludHMubWluIC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWF4ID0gY29uc3RyYWludHMubWF4IC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlbGF0aXZlQ29uc3RyYWludHM7XG59XG52YXIgZGVmYXVsdEVsYXN0aWMgPSAwLjM1O1xuLyoqXG4gKiBBY2NlcHRzIGEgZHJhZ0VsYXN0aWMgcHJvcCBhbmQgcmV0dXJucyByZXNvbHZlZCBlbGFzdGljIHZhbHVlcyBmb3IgZWFjaCBheGlzLlxuICovXG5mdW5jdGlvbiByZXNvbHZlRHJhZ0VsYXN0aWMoZHJhZ0VsYXN0aWMpIHtcbiAgICBpZiAoZHJhZ0VsYXN0aWMgPT09IHZvaWQgMCkgeyBkcmFnRWxhc3RpYyA9IGRlZmF1bHRFbGFzdGljOyB9XG4gICAgaWYgKGRyYWdFbGFzdGljID09PSBmYWxzZSkge1xuICAgICAgICBkcmFnRWxhc3RpYyA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRyYWdFbGFzdGljID09PSB0cnVlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gZGVmYXVsdEVsYXN0aWM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgXCJsZWZ0XCIsIFwicmlnaHRcIiksXG4gICAgICAgIHk6IHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgXCJ0b3BcIiwgXCJib3R0b21cIiksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBeGlzRWxhc3RpYyhkcmFnRWxhc3RpYywgbWluTGFiZWwsIG1heExhYmVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCksXG4gICAgICAgIG1heDogcmVzb2x2ZVBvaW50RWxhc3RpYyhkcmFnRWxhc3RpYywgbWF4TGFiZWwpLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBsYWJlbCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdHlwZW9mIGRyYWdFbGFzdGljID09PSBcIm51bWJlclwiXG4gICAgICAgID8gZHJhZ0VsYXN0aWNcbiAgICAgICAgOiAoX2EgPSBkcmFnRWxhc3RpY1tsYWJlbF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG59XG5cbmV4cG9ydCB7IGFwcGx5Q29uc3RyYWludHMsIGNhbGNPcmlnaW4sIGNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cywgY2FsY1JlbGF0aXZlQ29uc3RyYWludHMsIGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cywgY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMsIGRlZmF1bHRFbGFzdGljLCByZWJhc2VBeGlzQ29uc3RyYWludHMsIHJlc29sdmVBeGlzRWxhc3RpYywgcmVzb2x2ZURyYWdFbGFzdGljLCByZXNvbHZlUG9pbnRFbGFzdGljIH07XG4iLCIvKipcbiAqIEJvdW5kaW5nIGJveGVzIHRlbmQgdG8gYmUgZGVmaW5lZCBhcyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20uIEZvciB2YXJpb3VzIG9wZXJhdGlvbnNcbiAqIGl0J3MgZWFzaWVyIHRvIGNvbnNpZGVyIGVhY2ggYXhpcyBpbmRpdmlkdWFsbHkuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGJvdW5kaW5nIGJveFxuICogYXMgYSBtYXAgb2Ygc2luZ2xlLWF4aXMgbWluL21heCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KF9hKSB7XG4gICAgdmFyIHRvcCA9IF9hLnRvcCwgbGVmdCA9IF9hLmxlZnQsIHJpZ2h0ID0gX2EucmlnaHQsIGJvdHRvbSA9IF9hLmJvdHRvbTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB7IG1pbjogbGVmdCwgbWF4OiByaWdodCB9LFxuICAgICAgICB5OiB7IG1pbjogdG9wLCBtYXg6IGJvdHRvbSB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveChfYSkge1xuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnk7XG4gICAgcmV0dXJuIHsgdG9wOiB5Lm1pbiwgcmlnaHQ6IHgubWF4LCBib3R0b206IHkubWF4LCBsZWZ0OiB4Lm1pbiB9O1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgVHJhbnNmb3JtUG9pbnQgZnVuY3Rpb24gdG8gYSBib3VuZGluZyBib3guIFRyYW5zZm9ybVBvaW50IGlzIHVzdWFsbHkgYSBmdW5jdGlvblxuICogcHJvdmlkZWQgYnkgRnJhbWVyIHRvIGFsbG93IG1lYXN1cmVkIHBvaW50cyB0byBiZSBjb3JyZWN0ZWQgZm9yIGRldmljZSBzY2FsaW5nLiBUaGlzIGlzIHVzZWRcbiAqIHdoZW4gbWVhc3VyaW5nIERPTSBlbGVtZW50cyBhbmQgRE9NIGV2ZW50IHBvaW50cy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQm94UG9pbnRzKHBvaW50LCB0cmFuc2Zvcm1Qb2ludCkge1xuICAgIGlmICghdHJhbnNmb3JtUG9pbnQpXG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICB2YXIgdG9wTGVmdCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQubGVmdCwgeTogcG9pbnQudG9wIH0pO1xuICAgIHZhciBib3R0b21SaWdodCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQucmlnaHQsIHk6IHBvaW50LmJvdHRvbSB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcExlZnQueSxcbiAgICAgICAgbGVmdDogdG9wTGVmdC54LFxuICAgICAgICBib3R0b206IGJvdHRvbVJpZ2h0LnksXG4gICAgICAgIHJpZ2h0OiBib3R0b21SaWdodC54LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH07XG4iLCJpbXBvcnQgeyBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlQXhpcyB9IGZyb20gJy4uL2dlb21ldHJ5L2RlbHRhLWFwcGx5Lm1qcyc7XG5cbmZ1bmN0aW9uIG1lYXN1cmVWaWV3cG9ydEJveChpbnN0YW5jZSwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICByZXR1cm4gY29udmVydEJvdW5kaW5nQm94VG9Cb3godHJhbnNmb3JtQm94UG9pbnRzKGluc3RhbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB0cmFuc2Zvcm1Qb2ludCkpO1xufVxuZnVuY3Rpb24gbWVhc3VyZVBhZ2VCb3goZWxlbWVudCwgcm9vdFByb2plY3Rpb25Ob2RlLCB0cmFuc2Zvcm1QYWdlUG9pbnQpIHtcbiAgICB2YXIgdmlld3BvcnRCb3ggPSBtZWFzdXJlVmlld3BvcnRCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICB2YXIgc2Nyb2xsID0gcm9vdFByb2plY3Rpb25Ob2RlLnNjcm9sbDtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgIHRyYW5zbGF0ZUF4aXModmlld3BvcnRCb3gueCwgc2Nyb2xsLngpO1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LnksIHNjcm9sbC55KTtcbiAgICB9XG4gICAgcmV0dXJuIHZpZXdwb3J0Qm94O1xufVxuXG5leHBvcnQgeyBtZWFzdXJlUGFnZUJveCwgbWVhc3VyZVZpZXdwb3J0Qm94IH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgUGFuU2Vzc2lvbiB9IGZyb20gJy4uL1BhblNlc3Npb24ubWpzJztcbmltcG9ydCB7IGdldEdsb2JhbExvY2sgfSBmcm9tICcuL3V0aWxzL2xvY2subWpzJztcbmltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuaW1wb3J0IHsgYWRkUG9pbnRlckV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL3VzZS1wb2ludGVyLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBhcHBseUNvbnN0cmFpbnRzLCBjYWxjUmVsYXRpdmVDb25zdHJhaW50cywgcmVzb2x2ZURyYWdFbGFzdGljLCByZWJhc2VBeGlzQ29uc3RyYWludHMsIGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzLCBjYWxjT3JpZ2luLCBkZWZhdWx0RWxhc3RpYyB9IGZyb20gJy4vdXRpbHMvY29uc3RyYWludHMubWpzJztcbmltcG9ydCB7IEFuaW1hdGlvblR5cGUgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvdHlwZXMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBlYWNoQXhpcyB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyc7XG5pbXBvcnQgeyBtZWFzdXJlUGFnZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMnO1xuaW1wb3J0IHsgZXh0cmFjdEV2ZW50SW5mbyB9IGZyb20gJy4uLy4uL2V2ZW50cy9ldmVudC1pbmZvLm1qcyc7XG5pbXBvcnQgeyBzdGFydEFuaW1hdGlvbiB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy90cmFuc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgY29udmVydEJveFRvQm91bmRpbmdCb3gsIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyBhZGREb21FdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cy91c2UtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGNhbGNMZW5ndGggfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzJztcblxudmFyIGVsZW1lbnREcmFnQ29udHJvbHMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKlxuICovXG4vLyBsZXQgbGF0ZXN0UG9pbnRlckV2ZW50OiBBbnlQb2ludGVyRXZlbnRcbnZhciBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHModmlzdWFsRWxlbWVudCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgZHJhZyBnZXN0dXJlIGxvY2ssIGVuc3VyaW5nIG9ubHkgb25lIGNvbXBvbmVudFxuICAgICAgICAvLyBjYW4gXCJjYXB0dXJlXCIgdGhlIGRyYWcgb2Ygb25lIG9yIGJvdGggYXhlcy5cbiAgICAgICAgLy8gVE9ETzogTG9vayBpbnRvIG1vdmluZyB0aGlzIGludG8gcGFuc2Vzc2lvbj9cbiAgICAgICAgdGhpcy5vcGVuR2xvYmFsTG9jayA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9yaWdpblBvaW50ID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVybWl0dGVkIGJvdW5kYXJpZXMgb2YgdHJhdmVsLCBpbiBwaXhlbHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGVyLWF4aXMgcmVzb2x2ZWQgZWxhc3RpYyB2YWx1ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVsYXN0aWMgPSBjcmVhdGVCb3goKTtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcbiAgICB9XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAob3JpZ2luRXZlbnQsIF9hKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLnNuYXBUb0N1cnNvciwgc25hcFRvQ3Vyc29yID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2M7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb24ndCBzdGFydCBkcmFnZ2luZyBpZiB0aGlzIGNvbXBvbmVudCBpcyBleGl0aW5nXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy52aXN1YWxFbGVtZW50LmlzUHJlc2VudCA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBvblNlc3Npb25TdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gU3RvcCBhbnkgYW5pbWF0aW9ucyBvbiBib3RoIGF4aXMgdmFsdWVzIGltbWVkaWF0ZWx5LiBUaGlzIGFsbG93cyB0aGUgdXNlciB0byB0aHJvdyBhbmQgY2F0Y2hcbiAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAgICBfdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc25hcFRvQ3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc25hcFRvQ3Vyc29yKGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIFwicGFnZVwiKS5wb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGdyYWIgdGhlIGdsb2JhbCBkcmFnIGdlc3R1cmUgbG9jayAtIG1heWJlIG1ha2UgdGhpcyBwYXJ0IG9mIFBhblNlc3Npb25cbiAgICAgICAgICAgIHZhciBfYiA9IF90aGlzLmdldFByb3BzKCksIGRyYWcgPSBfYi5kcmFnLCBkcmFnUHJvcGFnYXRpb24gPSBfYi5kcmFnUHJvcGFnYXRpb24sIG9uRHJhZ1N0YXJ0ID0gX2Iub25EcmFnU3RhcnQ7XG4gICAgICAgICAgICBpZiAoZHJhZyAmJiAhZHJhZ1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgICAgIF90aGlzLm9wZW5HbG9iYWxMb2NrID0gZ2V0R2xvYmFsTG9jayhkcmFnKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24gJ3QgaGF2ZSB0aGUgbG9jaywgZG9uJ3Qgc3RhcnQgZHJhZ2dpbmdcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLmlzQW5pbWF0aW9uQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVjb3JkIGdlc3R1cmUgb3JpZ2luXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5nZXQoKSB8fCAwO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBNb3Rpb25WYWx1ZSBpcyBhIHBlcmNlbnRhZ2UgdmFsdWUgY29udmVydCB0byBweFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChwZXJjZW50LnRlc3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lYXN1cmVkQXhpcyA9IChfYiA9IChfYSA9IF90aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxheW91dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFjdHVhbFtheGlzXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lYXN1cmVkQXhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aF8xID0gY2FsY0xlbmd0aChtZWFzdXJlZEF4aXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGxlbmd0aF8xICogKHBhcnNlRmxvYXQoY3VycmVudCkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLm9yaWdpblBvaW50W2F4aXNdID0gY3VycmVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gRmlyZSBvbkRyYWdTdGFydCBldmVudFxuICAgICAgICAgICAgb25EcmFnU3RhcnQgPT09IG51bGwgfHwgb25EcmFnU3RhcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRHJhZ1N0YXJ0KGV2ZW50LCBpbmZvKTtcbiAgICAgICAgICAgIChfYSA9IF90aGlzLnZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5EcmFnLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uTW92ZSA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgLy8gbGF0ZXN0UG9pbnRlckV2ZW50ID0gZXZlbnRcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmdldFByb3BzKCksIGRyYWdQcm9wYWdhdGlvbiA9IF9hLmRyYWdQcm9wYWdhdGlvbiwgZHJhZ0RpcmVjdGlvbkxvY2sgPSBfYS5kcmFnRGlyZWN0aW9uTG9jaywgb25EaXJlY3Rpb25Mb2NrID0gX2Eub25EaXJlY3Rpb25Mb2NrLCBvbkRyYWcgPSBfYS5vbkRyYWc7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IHJlY2VpdmUgdGhlIGdlc3R1cmUgbG9jaywgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKCFkcmFnUHJvcGFnYXRpb24gJiYgIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBpbmZvLm9mZnNldDtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGRyYWcgZGlyZWN0aW9uIGlmIGRpcmVjdGlvbkxvY2sgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKGRyYWdEaXJlY3Rpb25Mb2NrICYmIF90aGlzLmN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gZ2V0Q3VycmVudERpcmVjdGlvbihvZmZzZXQpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHN1Y2Nlc3NmdWxseSBzZXQgYSBkaXJlY3Rpb24sIG5vdGlmeSBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdXJyZW50RGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRGlyZWN0aW9uTG9jayA9PT0gbnVsbCB8fCBvbkRpcmVjdGlvbkxvY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRGlyZWN0aW9uTG9jayhfdGhpcy5jdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggcG9pbnQgd2l0aCB0aGUgbGF0ZXN0IHBvc2l0aW9uXG4gICAgICAgICAgICBfdGhpcy51cGRhdGVBeGlzKFwieFwiLCBpbmZvLnBvaW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlQXhpcyhcInlcIiwgaW5mby5wb2ludCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWRlYWxseSB3ZSB3b3VsZCBsZWF2ZSB0aGUgcmVuZGVyZXIgdG8gZmlyZSBuYXR1cmFsbHkgYXQgdGhlIGVuZCBvZlxuICAgICAgICAgICAgICogdGhpcyBmcmFtZSBidXQgaWYgdGhlIGVsZW1lbnQgaXMgYWJvdXQgdG8gY2hhbmdlIGxheW91dCBhcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgKiBvZiBhIHJlLXJlbmRlciB3ZSB3YW50IHRvIGVuc3VyZSB0aGUgYnJvd3NlciBjYW4gcmVhZCB0aGUgbGF0ZXN0XG4gICAgICAgICAgICAgKiBib3VuZGluZyBib3ggdG8gZW5zdXJlIHRoZSBwb2ludGVyIGFuZCBlbGVtZW50IGRvbid0IGZhbGwgb3V0IG9mIHN5bmMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzLnZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIG11c3QgZmlyZSBhZnRlciB0aGUgc3luY1JlbmRlciBjYWxsIGFzIGl0IG1pZ2h0IHRyaWdnZXIgYSBzdGF0ZVxuICAgICAgICAgICAgICogY2hhbmdlIHdoaWNoIGl0c2VsZiBtaWdodCB0cmlnZ2VyIGEgbGF5b3V0IHVwZGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb25EcmFnID09PSBudWxsIHx8IG9uRHJhZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EcmFnKGV2ZW50LCBpbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uU2Vzc2lvbkVuZCA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0b3AoZXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gPSBuZXcgUGFuU2Vzc2lvbihvcmlnaW5FdmVudCwge1xuICAgICAgICAgICAgb25TZXNzaW9uU3RhcnQ6IG9uU2Vzc2lvblN0YXJ0LFxuICAgICAgICAgICAgb25TdGFydDogb25TdGFydCxcbiAgICAgICAgICAgIG9uTW92ZTogb25Nb3ZlLFxuICAgICAgICAgICAgb25TZXNzaW9uRW5kOiBvblNlc3Npb25FbmQsXG4gICAgICAgIH0sIHsgdHJhbnNmb3JtUGFnZVBvaW50OiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkgfSk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBpc0RyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nO1xuICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IGluZm8udmVsb2NpdHk7XG4gICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24odmVsb2NpdHkpO1xuICAgICAgICB2YXIgb25EcmFnRW5kID0gdGhpcy5nZXRQcm9wcygpLm9uRHJhZ0VuZDtcbiAgICAgICAgb25EcmFnRW5kID09PSBudWxsIHx8IG9uRHJhZ0VuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25EcmFnRW5kKGV2ZW50LCBpbmZvKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb24uaXNBbmltYXRpb25CbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5wYW5TZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW5kKCk7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGRyYWdQcm9wYWdhdGlvbiA9IHRoaXMuZ2V0UHJvcHMoKS5kcmFnUHJvcGFnYXRpb247XG4gICAgICAgIGlmICghZHJhZ1Byb3BhZ2F0aW9uICYmIHRoaXMub3Blbkdsb2JhbExvY2spIHtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2soKTtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IHRoaXMudmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkRyYWcsIGZhbHNlKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnVwZGF0ZUF4aXMgPSBmdW5jdGlvbiAoYXhpcywgX3BvaW50LCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGRyYWcgPSB0aGlzLmdldFByb3BzKCkuZHJhZztcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IGRyYWdnaW5nIHRoaXMgYXhpcywgZG8gYW4gZWFybHkgcmV0dXJuLlxuICAgICAgICBpZiAoIW9mZnNldCB8fCAhc2hvdWxkRHJhZyhheGlzLCBkcmFnLCB0aGlzLmN1cnJlbnREaXJlY3Rpb24pKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5vcmlnaW5Qb2ludFtheGlzXSArIG9mZnNldFtheGlzXTtcbiAgICAgICAgLy8gQXBwbHkgY29uc3RyYWludHNcbiAgICAgICAgaWYgKHRoaXMuY29uc3RyYWludHMgJiYgdGhpcy5jb25zdHJhaW50c1theGlzXSkge1xuICAgICAgICAgICAgbmV4dCA9IGFwcGx5Q29uc3RyYWludHMobmV4dCwgdGhpcy5jb25zdHJhaW50c1theGlzXSwgdGhpcy5lbGFzdGljW2F4aXNdKTtcbiAgICAgICAgfVxuICAgICAgICBheGlzVmFsdWUuc2V0KG5leHQpO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUucmVzb2x2ZUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFByb3BzKCksIGRyYWdDb25zdHJhaW50cyA9IF9hLmRyYWdDb25zdHJhaW50cywgZHJhZ0VsYXN0aWMgPSBfYS5kcmFnRWxhc3RpYztcbiAgICAgICAgdmFyIGxheW91dCA9ICh0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbiB8fCB7fSkubGF5b3V0O1xuICAgICAgICB2YXIgcHJldkNvbnN0cmFpbnRzID0gdGhpcy5jb25zdHJhaW50cztcbiAgICAgICAgaWYgKGRyYWdDb25zdHJhaW50cyAmJiBpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gdGhpcy5yZXNvbHZlUmVmQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkcmFnQ29uc3RyYWludHMgJiYgbGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGNhbGNSZWxhdGl2ZUNvbnN0cmFpbnRzKGxheW91dC5hY3R1YWwsIGRyYWdDb25zdHJhaW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGFzdGljID0gcmVzb2x2ZURyYWdFbGFzdGljKGRyYWdFbGFzdGljKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIG91dHB1dHRpbmcgdG8gZXh0ZXJuYWwgTW90aW9uVmFsdWVzLCB3ZSB3YW50IHRvIHJlYmFzZSB0aGUgbWVhc3VyZWQgY29uc3RyYWludHNcbiAgICAgICAgICogZnJvbSB2aWV3cG9ydC1yZWxhdGl2ZSB0byBjb21wb25lbnQtcmVsYXRpdmUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocHJldkNvbnN0cmFpbnRzICE9PSB0aGlzLmNvbnN0cmFpbnRzICYmXG4gICAgICAgICAgICBsYXlvdXQgJiZcbiAgICAgICAgICAgIHRoaXMuY29uc3RyYWludHMgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc011dGF0ZWRDb25zdHJhaW50cykge1xuICAgICAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbnN0cmFpbnRzW2F4aXNdID0gcmViYXNlQXhpc0NvbnN0cmFpbnRzKGxheW91dC5hY3R1YWxbYXhpc10sIF90aGlzLmNvbnN0cmFpbnRzW2F4aXNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUucmVzb2x2ZVJlZkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFByb3BzKCksIGNvbnN0cmFpbnRzID0gX2EuZHJhZ0NvbnN0cmFpbnRzLCBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMgPSBfYS5vbk1lYXN1cmVEcmFnQ29uc3RyYWludHM7XG4gICAgICAgIGlmICghY29uc3RyYWludHMgfHwgIWlzUmVmT2JqZWN0KGNvbnN0cmFpbnRzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGNvbnN0cmFpbnRzRWxlbWVudCA9IGNvbnN0cmFpbnRzLmN1cnJlbnQ7XG4gICAgICAgIGludmFyaWFudChjb25zdHJhaW50c0VsZW1lbnQgIT09IG51bGwsIFwiSWYgYGRyYWdDb25zdHJhaW50c2AgaXMgc2V0IGFzIGEgUmVhY3QgcmVmLCB0aGF0IHJlZiBtdXN0IGJlIHBhc3NlZCB0byBhbm90aGVyIGNvbXBvbmVudCdzIGByZWZgIHByb3AuXCIpO1xuICAgICAgICB2YXIgcHJvamVjdGlvbiA9IHRoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uO1xuICAgICAgICAvLyBUT0RPXG4gICAgICAgIGlmICghcHJvamVjdGlvbiB8fCAhcHJvamVjdGlvbi5sYXlvdXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBjb25zdHJhaW50c0JveCA9IG1lYXN1cmVQYWdlQm94KGNvbnN0cmFpbnRzRWxlbWVudCwgcHJvamVjdGlvbi5yb290LCB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VHJhbnNmb3JtUGFnZVBvaW50KCkpO1xuICAgICAgICB2YXIgbWVhc3VyZWRDb25zdHJhaW50cyA9IGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzKHByb2plY3Rpb24ubGF5b3V0LmFjdHVhbCwgY29uc3RyYWludHNCb3gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUncyBhbiBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMgbGlzdGVuZXIgd2UgY2FsbCBpdCBhbmRcbiAgICAgICAgICogaWYgZGlmZmVyZW50IGNvbnN0cmFpbnRzIGFyZSByZXR1cm5lZCwgc2V0IGNvbnN0cmFpbnRzIHRvIHRoYXRcbiAgICAgICAgICovXG4gICAgICAgIGlmIChvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHZhciB1c2VyQ29uc3RyYWludHMgPSBvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMoY29udmVydEJveFRvQm91bmRpbmdCb3gobWVhc3VyZWRDb25zdHJhaW50cykpO1xuICAgICAgICAgICAgdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMgPSAhIXVzZXJDb25zdHJhaW50cztcbiAgICAgICAgICAgIGlmICh1c2VyQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlZENvbnN0cmFpbnRzID0gY29udmVydEJvdW5kaW5nQm94VG9Cb3godXNlckNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVhc3VyZWRDb25zdHJhaW50cztcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24gKHZlbG9jaXR5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0UHJvcHMoKSwgZHJhZyA9IF9hLmRyYWcsIGRyYWdNb21lbnR1bSA9IF9hLmRyYWdNb21lbnR1bSwgZHJhZ0VsYXN0aWMgPSBfYS5kcmFnRWxhc3RpYywgZHJhZ1RyYW5zaXRpb24gPSBfYS5kcmFnVHJhbnNpdGlvbiwgZHJhZ1NuYXBUb09yaWdpbiA9IF9hLmRyYWdTbmFwVG9PcmlnaW4sIG9uRHJhZ1RyYW5zaXRpb25FbmQgPSBfYS5vbkRyYWdUcmFuc2l0aW9uRW5kO1xuICAgICAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzIHx8IHt9O1xuICAgICAgICB2YXIgbW9tZW50dW1BbmltYXRpb25zID0gZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uID0gKF9hID0gY29uc3RyYWludHMgPT09IG51bGwgfHwgY29uc3RyYWludHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnN0cmFpbnRzW2F4aXNdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICAgICAgICAgIGlmIChkcmFnU25hcFRvT3JpZ2luKVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7IG1pbjogMCwgbWF4OiAwIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE92ZXJkYW1wIHRoZSBib3VuZGFyeSBzcHJpbmcgaWYgYGRyYWdFbGFzdGljYCBpcyBkaXNhYmxlZC4gVGhlcmUncyBzdGlsbCBhIGZyYW1lXG4gICAgICAgICAgICAgKiBvZiBzcHJpbmcgYW5pbWF0aW9ucyBzbyB3ZSBzaG91bGQgbG9vayBpbnRvIGFkZGluZyBhIGRpc2FibGUgc3ByaW5nIG9wdGlvbiB0byBgaW5lcnRpYWAuXG4gICAgICAgICAgICAgKiBXZSBjb3VsZCBkbyBzb21ldGhpbmcgaGVyZSB3aGVyZSB3ZSBhZmZlY3QgdGhlIGBib3VuY2VTdGlmZm5lc3NgIGFuZCBgYm91bmNlRGFtcGluZ2BcbiAgICAgICAgICAgICAqIHVzaW5nIHRoZSB2YWx1ZSBvZiBgZHJhZ0VsYXN0aWNgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgYm91bmNlU3RpZmZuZXNzID0gZHJhZ0VsYXN0aWMgPyAyMDAgOiAxMDAwMDAwO1xuICAgICAgICAgICAgdmFyIGJvdW5jZURhbXBpbmcgPSBkcmFnRWxhc3RpYyA/IDQwIDogMTAwMDAwMDA7XG4gICAgICAgICAgICB2YXIgaW5lcnRpYSA9IF9fYXNzaWduKF9fYXNzaWduKHsgdHlwZTogXCJpbmVydGlhXCIsIHZlbG9jaXR5OiBkcmFnTW9tZW50dW0gPyB2ZWxvY2l0eVtheGlzXSA6IDAsIGJvdW5jZVN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLCBib3VuY2VEYW1waW5nOiBib3VuY2VEYW1waW5nLCB0aW1lQ29uc3RhbnQ6IDc1MCwgcmVzdERlbHRhOiAxLCByZXN0U3BlZWQ6IDEwIH0sIGRyYWdUcmFuc2l0aW9uKSwgdHJhbnNpdGlvbik7XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYW5pbWF0aW5nIG9uIGFuIGV4dGVybmFsbHktcHJvdmlkZWQgYE1vdGlvblZhbHVlYCB3ZSBjYW4gdXNlIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50J3MgYW5pbWF0aW9uIGNvbnRyb2xzIHdoaWNoIHdpbGwgaGFuZGxlIGludGVyYWN0aW9ucyB3aXRoIHdoaWxlSG92ZXIgKGV0YyksXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UganVzdCBoYXZlIHRvIGFuaW1hdGUgdGhlIGBNb3Rpb25WYWx1ZWAgaXRzZWxmLlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uKGF4aXMsIGluZXJ0aWEpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUnVuIGFsbCBhbmltYXRpb25zIGFuZCB0aGVuIHJlc29sdmUgdGhlIG5ldyBkcmFnIGNvbnN0cmFpbnRzLlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9tZW50dW1BbmltYXRpb25zKS50aGVuKG9uRHJhZ1RyYW5zaXRpb25FbmQpO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RhcnRBeGlzVmFsdWVBbmltYXRpb24gPSBmdW5jdGlvbiAoYXhpcywgdHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgYXhpc1ZhbHVlID0gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgIHJldHVybiBzdGFydEFuaW1hdGlvbihheGlzLCBheGlzVmFsdWUsIDAsIHRyYW5zaXRpb24pO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHsgcmV0dXJuIF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKS5zdG9wKCk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRHJhZyB3b3JrcyBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gd2hpY2ggcHJvcHMgYXJlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogLSBJZiBfZHJhZ1ggYW5kIF9kcmFnWSBhcmUgcHJvdmlkZWQsIHdlIG91dHB1dCB0aGUgZ2VzdHVyZSBkZWx0YSBkaXJlY3RseSB0byB0aG9zZSBtb3Rpb24gdmFsdWVzLlxuICAgICAqIC0gT3RoZXJ3aXNlLCB3ZSBhcHBseSB0aGUgZGVsdGEgdG8gdGhlIHgveSBtb3Rpb24gdmFsdWVzLlxuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmdldEF4aXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBkcmFnS2V5ID0gXCJfZHJhZ1wiICsgYXhpcy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgZXh0ZXJuYWxNb3Rpb25WYWx1ZSA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRQcm9wcygpW2RyYWdLZXldO1xuICAgICAgICByZXR1cm4gZXh0ZXJuYWxNb3Rpb25WYWx1ZVxuICAgICAgICAgICAgPyBleHRlcm5hbE1vdGlvblZhbHVlXG4gICAgICAgICAgICA6IHRoaXMudmlzdWFsRWxlbWVudC5nZXRWYWx1ZShheGlzLCAoX2IgPSAoX2EgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKS5pbml0aWFsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbYXhpc10pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc25hcFRvQ3Vyc29yID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICB2YXIgZHJhZyA9IF90aGlzLmdldFByb3BzKCkuZHJhZztcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBkcmFnZ2luZyB0aGlzIGF4aXMsIGRvIGFuIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgcHJvamVjdGlvbiA9IF90aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgICAgIHZhciBheGlzVmFsdWUgPSBfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmxheW91dCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IHByb2plY3Rpb24ubGF5b3V0LmFjdHVhbFtheGlzXSwgbWluID0gX2EubWluLCBtYXggPSBfYS5tYXg7XG4gICAgICAgICAgICAgICAgYXhpc1ZhbHVlLnNldChwb2ludFtheGlzXSAtIG1peChtaW4sIG1heCwgMC41KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgdmlld3BvcnQgcmVzaXplcyB3ZSB3YW50IHRvIGNoZWNrIGlmIHRoZSBtZWFzdXJlZCBjb25zdHJhaW50c1xuICAgICAqIGhhdmUgY2hhbmdlZCBhbmQsIGlmIHNvLCByZXBvc2l0aW9uIHRoZSBlbGVtZW50IHdpdGhpbiB0aG9zZSBuZXcgY29uc3RyYWludHNcbiAgICAgKiByZWxhdGl2ZSB0byB3aGVyZSBpdCB3YXMgYmVmb3JlIHRoZSByZXNpemUuXG4gICAgICovXG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuc2NhbGVQb3NpdGlvbldpdGhpbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfYiA9IHRoaXMuZ2V0UHJvcHMoKSwgZHJhZyA9IF9iLmRyYWcsIGRyYWdDb25zdHJhaW50cyA9IF9iLmRyYWdDb25zdHJhaW50cztcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgaWYgKCFpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpIHx8ICFwcm9qZWN0aW9uIHx8ICF0aGlzLmNvbnN0cmFpbnRzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcCBjdXJyZW50IGFuaW1hdGlvbnMgYXMgdGhlcmUgY2FuIGJlIHZpc3VhbCBnbGl0Y2hpbmcgaWYgd2UgdHJ5IHRvIGRvXG4gICAgICAgICAqIHRoaXMgbWlkLWFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWNvcmQgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlXG4gICAgICAgICAqIGNvbnN0cmFpbnRzIGJveCBhbmQgc2F2ZSBhcyBhIHByb2dyZXNzIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGJveFByb2dyZXNzID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICB2YXIgYXhpc1ZhbHVlID0gX3RoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKGF4aXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBsYXRlc3QgPSBheGlzVmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICAgICAgYm94UHJvZ3Jlc3NbYXhpc10gPSBjYWxjT3JpZ2luKHsgbWluOiBsYXRlc3QsIG1heDogbGF0ZXN0IH0sIF90aGlzLmNvbnN0cmFpbnRzW2F4aXNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgdGhlIGxheW91dCBvZiB0aGlzIGVsZW1lbnQgYW5kIHJlc29sdmUgdGhlIGxhdGVzdCBkcmFnIGNvbnN0cmFpbnRzXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCkuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGVcbiAgICAgICAgICAgID8gdHJhbnNmb3JtVGVtcGxhdGUoe30sIFwiXCIpXG4gICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAoX2EgPSBwcm9qZWN0aW9uLnJvb3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgcHJvamVjdGlvbi51cGRhdGVMYXlvdXQoKTtcbiAgICAgICAgdGhpcy5yZXNvbHZlQ29uc3RyYWludHMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvciBlYWNoIGF4aXMsIGNhbGN1bGF0ZSB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgbGF5b3V0IGF4aXNcbiAgICAgICAgICogd2l0aGluIHRoZSBuZXcgY29uc3RyYWludHMuXG4gICAgICAgICAqL1xuICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgaWYgKCFzaG91bGREcmFnKGF4aXMsIGRyYWcsIG51bGwpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsY3VsYXRlIGEgbmV3IHRyYW5zZm9ybSBiYXNlZCBvbiB0aGUgcHJldmlvdXMgYm94IHByb2dyZXNzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBheGlzVmFsdWUgPSBfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcyk7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5jb25zdHJhaW50c1theGlzXSwgbWluID0gX2EubWluLCBtYXggPSBfYS5tYXg7XG4gICAgICAgICAgICBheGlzVmFsdWUuc2V0KG1peChtaW4sIG1heCwgYm94UHJvZ3Jlc3NbYXhpc10pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5hZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgZWxlbWVudERyYWdDb250cm9scy5zZXQodGhpcy52aXN1YWxFbGVtZW50LCB0aGlzKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGFjaCBhIHBvaW50ZXJkb3duIGV2ZW50IGxpc3RlbmVyIG9uIHRoaXMgRE9NIGVsZW1lbnQgdG8gaW5pdGlhdGUgZHJhZyB0cmFja2luZy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBzdG9wUG9pbnRlckxpc3RlbmVyID0gYWRkUG9pbnRlckV2ZW50KGVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5nZXRQcm9wcygpLCBkcmFnID0gX2EuZHJhZywgX2IgPSBfYS5kcmFnTGlzdGVuZXIsIGRyYWdMaXN0ZW5lciA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2I7XG4gICAgICAgICAgICBkcmFnICYmIGRyYWdMaXN0ZW5lciAmJiBfdGhpcy5zdGFydChldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWVhc3VyZURyYWdDb25zdHJhaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkcmFnQ29uc3RyYWludHMgPSBfdGhpcy5nZXRQcm9wcygpLmRyYWdDb25zdHJhaW50cztcbiAgICAgICAgICAgIGlmIChpc1JlZk9iamVjdChkcmFnQ29uc3RyYWludHMpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29uc3RyYWludHMgPSBfdGhpcy5yZXNvbHZlUmVmQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB0aGlzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgdmFyIHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIgPSBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJtZWFzdXJlXCIsIG1lYXN1cmVEcmFnQ29uc3RyYWludHMpO1xuICAgICAgICBpZiAocHJvamVjdGlvbiAmJiAhcHJvamVjdGlvbi5sYXlvdXQpIHtcbiAgICAgICAgICAgIChfYSA9IHByb2plY3Rpb24ucm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICAgICAgcHJvamVjdGlvbi51cGRhdGVMYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHRhY2ggYSB3aW5kb3cgcmVzaXplIGxpc3RlbmVyIHRvIHNjYWxlIHRoZSBkcmFnZ2FibGUgdGFyZ2V0IHdpdGhpbiBpdHMgZGVmaW5lZFxuICAgICAgICAgKiBjb25zdHJhaW50cyBhcyB0aGUgd2luZG93IHJlc2l6ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc3RvcFJlc2l6ZUxpc3RlbmVyID0gYWRkRG9tRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgZWxlbWVudCdzIGxheW91dCBjaGFuZ2VzLCBjYWxjdWxhdGUgdGhlIGRlbHRhIGFuZCBhcHBseSB0aGF0IHRvXG4gICAgICAgICAqIHRoZSBkcmFnIGdlc3R1cmUncyBvcmlnaW4gcG9pbnQuXG4gICAgICAgICAqL1xuICAgICAgICBwcm9qZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWRVcGRhdGVcIiwgKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gX2EuZGVsdGEsIGhhc0xheW91dENoYW5nZWQgPSBfYS5oYXNMYXlvdXRDaGFuZ2VkO1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcgJiYgaGFzTGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb3Rpb25WYWx1ZSA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3Rpb25WYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3JpZ2luUG9pbnRbYXhpc10gKz0gZGVsdGFbYXhpc10udHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICBtb3Rpb25WYWx1ZS5zZXQobW90aW9uVmFsdWUuZ2V0KCkgKyBkZWx0YVtheGlzXS50cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9wUmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BQb2ludGVyTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BNZWFzdXJlTGF5b3V0TGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmdldFByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKTtcbiAgICAgICAgdmFyIF9hID0gcHJvcHMuZHJhZywgZHJhZyA9IF9hID09PSB2b2lkIDAgPyBmYWxzZSA6IF9hLCBfYiA9IHByb3BzLmRyYWdEaXJlY3Rpb25Mb2NrLCBkcmFnRGlyZWN0aW9uTG9jayA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iLCBfYyA9IHByb3BzLmRyYWdQcm9wYWdhdGlvbiwgZHJhZ1Byb3BhZ2F0aW9uID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gcHJvcHMuZHJhZ0NvbnN0cmFpbnRzLCBkcmFnQ29uc3RyYWludHMgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgX2UgPSBwcm9wcy5kcmFnRWxhc3RpYywgZHJhZ0VsYXN0aWMgPSBfZSA9PT0gdm9pZCAwID8gZGVmYXVsdEVsYXN0aWMgOiBfZSwgX2YgPSBwcm9wcy5kcmFnTW9tZW50dW0sIGRyYWdNb21lbnR1bSA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2Y7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGRyYWc6IGRyYWcsIGRyYWdEaXJlY3Rpb25Mb2NrOiBkcmFnRGlyZWN0aW9uTG9jaywgZHJhZ1Byb3BhZ2F0aW9uOiBkcmFnUHJvcGFnYXRpb24sIGRyYWdDb25zdHJhaW50czogZHJhZ0NvbnN0cmFpbnRzLCBkcmFnRWxhc3RpYzogZHJhZ0VsYXN0aWMsIGRyYWdNb21lbnR1bTogZHJhZ01vbWVudHVtIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHM7XG59KCkpO1xuZnVuY3Rpb24gc2hvdWxkRHJhZyhkaXJlY3Rpb24sIGRyYWcsIGN1cnJlbnREaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gKChkcmFnID09PSB0cnVlIHx8IGRyYWcgPT09IGRpcmVjdGlvbikgJiZcbiAgICAgICAgKGN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwgfHwgY3VycmVudERpcmVjdGlvbiA9PT0gZGlyZWN0aW9uKSk7XG59XG4vKipcbiAqIEJhc2VkIG9uIGFuIHgveSBvZmZzZXQgZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGRyYWcgZGlyZWN0aW9uLiBJZiBib3RoIGF4aXMnIG9mZnNldHMgYXJlIGxvd2VyXG4gKiB0aGFuIHRoZSBwcm92aWRlZCB0aHJlc2hvbGQsIHJldHVybiBgbnVsbGAuXG4gKlxuICogQHBhcmFtIG9mZnNldCAtIFRoZSB4L3kgb2Zmc2V0IGZyb20gb3JpZ2luLlxuICogQHBhcmFtIGxvY2tUaHJlc2hvbGQgLSAoT3B0aW9uYWwpIC0gdGhlIG1pbmltdW0gYWJzb2x1dGUgb2Zmc2V0IGJlZm9yZSB3ZSBjYW4gZGV0ZXJtaW5lIGEgZHJhZyBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0LCBsb2NrVGhyZXNob2xkKSB7XG4gICAgaWYgKGxvY2tUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBsb2NrVGhyZXNob2xkID0gMTA7IH1cbiAgICB2YXIgZGlyZWN0aW9uID0gbnVsbDtcbiAgICBpZiAoTWF0aC5hYnMob2Zmc2V0LnkpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInlcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnMob2Zmc2V0LngpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbn1cblxuZXhwb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scywgZWxlbWVudERyYWdDb250cm9scyB9O1xuIiwiaW1wb3J0IHsgdXNlRHJhZyB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzJztcbmltcG9ydCB7IHVzZVBhbkdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy91c2UtcGFuLWdlc3R1cmUubWpzJztcbmltcG9ydCB7IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbHMvbWFrZS1yZW5kZXJsZXNzLWNvbXBvbmVudC5tanMnO1xuXG52YXIgZHJhZyA9IHtcbiAgICBwYW46IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZVBhbkdlc3R1cmUpLFxuICAgIGRyYWc6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZURyYWcpLFxufTtcblxuZXhwb3J0IHsgZHJhZyB9O1xuIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyB1c2VVbm1vdW50RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlLXVubW91bnQtZWZmZWN0Lm1qcyc7XG5pbXBvcnQgeyB1c2VQb2ludGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvdXNlLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IFBhblNlc3Npb24gfSBmcm9tICcuL1BhblNlc3Npb24ubWpzJztcblxuLyoqXG4gKlxuICogQHBhcmFtIGhhbmRsZXJzIC1cbiAqIEBwYXJhbSByZWYgLVxuICpcbiAqIEBpbnRlcm5hbHJlbWFya3NcbiAqIEN1cnJlbnRseSB0aGlzIHNldHMgbmV3IHBhbiBnZXN0dXJlIGZ1bmN0aW9ucyBldmVyeSByZW5kZXIuIFRoZSBtZW1vIHJvdXRlIGhhcyBiZWVuIGV4cGxvcmVkXG4gKiBpbiB0aGUgcGFzdCBidXQgdWx0aW1hdGVseSB3ZSdyZSBzdGlsbCBjcmVhdGluZyBuZXcgZnVuY3Rpb25zIGV2ZXJ5IHJlbmRlci4gQW4gb3B0aW1pc2F0aW9uXG4gKiB0byBleHBsb3JlIGlzIGNyZWF0aW5nIHRoZSBwYW4gZ2VzdHVyZXMgYW5kIGxvYWRpbmcgdGhlbSBpbnRvIGEgYHJlZmAuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZVBhbkdlc3R1cmUoX2EpIHtcbiAgICB2YXIgb25QYW4gPSBfYS5vblBhbiwgb25QYW5TdGFydCA9IF9hLm9uUGFuU3RhcnQsIG9uUGFuRW5kID0gX2Eub25QYW5FbmQsIG9uUGFuU2Vzc2lvblN0YXJ0ID0gX2Eub25QYW5TZXNzaW9uU3RhcnQsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50O1xuICAgIHZhciBoYXNQYW5FdmVudHMgPSBvblBhbiB8fCBvblBhblN0YXJ0IHx8IG9uUGFuRW5kIHx8IG9uUGFuU2Vzc2lvblN0YXJ0O1xuICAgIHZhciBwYW5TZXNzaW9uID0gdXNlUmVmKG51bGwpO1xuICAgIHZhciB0cmFuc2Zvcm1QYWdlUG9pbnQgPSB1c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLnRyYW5zZm9ybVBhZ2VQb2ludDtcbiAgICB2YXIgaGFuZGxlcnMgPSB7XG4gICAgICAgIG9uU2Vzc2lvblN0YXJ0OiBvblBhblNlc3Npb25TdGFydCxcbiAgICAgICAgb25TdGFydDogb25QYW5TdGFydCxcbiAgICAgICAgb25Nb3ZlOiBvblBhbixcbiAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgcGFuU2Vzc2lvbi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIG9uUGFuRW5kICYmIG9uUGFuRW5kKGV2ZW50LCBpbmZvKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwYW5TZXNzaW9uLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhblNlc3Npb24uY3VycmVudC51cGRhdGVIYW5kbGVycyhoYW5kbGVycyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGV2ZW50KSB7XG4gICAgICAgIHBhblNlc3Npb24uY3VycmVudCA9IG5ldyBQYW5TZXNzaW9uKGV2ZW50LCBoYW5kbGVycywge1xuICAgICAgICAgICAgdHJhbnNmb3JtUGFnZVBvaW50OiB0cmFuc2Zvcm1QYWdlUG9pbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQYW5FdmVudHMgJiYgb25Qb2ludGVyRG93bik7XG4gICAgdXNlVW5tb3VudEVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiBwYW5TZXNzaW9uLmN1cnJlbnQgJiYgcGFuU2Vzc2lvbi5jdXJyZW50LmVuZCgpOyB9KTtcbn1cblxuZXhwb3J0IHsgdXNlUGFuR2VzdHVyZSB9O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyB9IGZyb20gJy4vVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcblxuLyoqXG4gKiBBIGhvb2sgdGhhdCBhbGxvd3MgYW4gZWxlbWVudCB0byBiZSBkcmFnZ2VkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VEcmFnKHByb3BzKSB7XG4gICAgdmFyIGdyb3VwRHJhZ0NvbnRyb2xzID0gcHJvcHMuZHJhZ0NvbnRyb2xzLCB2aXN1YWxFbGVtZW50ID0gcHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgZHJhZ0NvbnRyb2xzID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHModmlzdWFsRWxlbWVudCk7IH0pO1xuICAgIC8vIElmIHdlJ3ZlIGJlZW4gcHJvdmlkZWQgYSBEcmFnQ29udHJvbHMgZm9yIG1hbnVhbCBjb250cm9sIG92ZXIgdGhlIGRyYWcgZ2VzdHVyZSxcbiAgICAvLyBzdWJzY3JpYmUgdGhpcyBjb21wb25lbnQgdG8gaXQgb24gbW91bnQuXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3VwRHJhZ0NvbnRyb2xzICYmIGdyb3VwRHJhZ0NvbnRyb2xzLnN1YnNjcmliZShkcmFnQ29udHJvbHMpOyB9LCBbZHJhZ0NvbnRyb2xzLCBncm91cERyYWdDb250cm9sc10pO1xuICAgIC8vIEFwcGx5IHRoZSBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnRcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZHJhZ0NvbnRyb2xzLmFkZExpc3RlbmVycygpOyB9LCBbZHJhZ0NvbnRyb2xzXSk7XG59XG5cbmV4cG9ydCB7IHVzZURyYWcgfTtcbiIsImltcG9ydCB7IF9fc3ByZWFkQXJyYXksIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMnO1xuXG52YXIgbmFtZXMgPSBbXG4gICAgXCJMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJCZWZvcmVMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJMYXlvdXRVcGRhdGVcIixcbiAgICBcIlZpZXdwb3J0Qm94VXBkYXRlXCIsXG4gICAgXCJVcGRhdGVcIixcbiAgICBcIlJlbmRlclwiLFxuICAgIFwiQW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIkxheW91dEFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJBbmltYXRpb25TdGFydFwiLFxuICAgIFwiU2V0QXhpc1RhcmdldFwiLFxuICAgIFwiVW5tb3VudFwiLFxuXTtcbmZ1bmN0aW9uIGNyZWF0ZUxpZmVjeWNsZXMoKSB7XG4gICAgdmFyIG1hbmFnZXJzID0gbmFtZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7IH0pO1xuICAgIHZhciBwcm9wU3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgIHZhciBsaWZlY3ljbGVzID0ge1xuICAgICAgICBjbGVhckFsbExpc3RlbmVyczogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFuYWdlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFuYWdlcikgeyByZXR1cm4gbWFuYWdlci5jbGVhcigpOyB9KTsgfSxcbiAgICAgICAgdXBkYXRlUHJvcExpc3RlbmVyczogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciBvbiA9IFwib25cIiArIG5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BMaXN0ZW5lciA9IHByb3BzW29uXTtcbiAgICAgICAgICAgICAgICAvLyBVbnN1YnNjcmliZSBleGlzdGluZyBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAoX2EgPSBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHByb3BMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSA9IGxpZmVjeWNsZXNbb25dKHByb3BMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBtYW5hZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VyLCBpKSB7XG4gICAgICAgIGxpZmVjeWNsZXNbXCJvblwiICsgbmFtZXNbaV1dID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIG1hbmFnZXIuYWRkKGhhbmRsZXIpOyB9O1xuICAgICAgICBsaWZlY3ljbGVzW1wibm90aWZ5XCIgKyBuYW1lc1tpXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlci5ub3RpZnkuYXBwbHkobWFuYWdlciwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBsaWZlY3ljbGVzO1xufVxuXG5leHBvcnQgeyBjcmVhdGVMaWZlY3ljbGVzIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheSwgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHN5bmMsIHsgY2FuY2VsU3luYyB9IGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyB2YXJpYW50UHJpb3JpdHlPcmRlciB9IGZyb20gJy4vdXRpbHMvYW5pbWF0aW9uLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVMaWZlY3ljbGVzIH0gZnJvbSAnLi91dGlscy9saWZlY3ljbGVzLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzLCBjaGVja0lmVmFyaWFudE5vZGUsIGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi91dGlscy92YXJpYW50cy5tanMnO1xuXG52YXIgdmlzdWFsRWxlbWVudCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYiA9IF9hLnRyZWVUeXBlLCB0cmVlVHlwZSA9IF9iID09PSB2b2lkIDAgPyBcIlwiIDogX2IsIGJ1aWxkID0gX2EuYnVpbGQsIGdldEJhc2VUYXJnZXQgPSBfYS5nZXRCYXNlVGFyZ2V0LCBtYWtlVGFyZ2V0QW5pbWF0YWJsZSA9IF9hLm1ha2VUYXJnZXRBbmltYXRhYmxlLCBtZWFzdXJlVmlld3BvcnRCb3ggPSBfYS5tZWFzdXJlVmlld3BvcnRCb3gsIHJlbmRlckluc3RhbmNlID0gX2EucmVuZGVyLCByZWFkVmFsdWVGcm9tSW5zdGFuY2UgPSBfYS5yZWFkVmFsdWVGcm9tSW5zdGFuY2UsIHJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlID0gX2EucmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUsIHNvcnROb2RlUG9zaXRpb24gPSBfYS5zb3J0Tm9kZVBvc2l0aW9uLCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgPSBfYS5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfYSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcGFyZW50ID0gX2EucGFyZW50LCBwcm9wcyA9IF9hLnByb3BzLCBwcmVzZW5jZUlkID0gX2EucHJlc2VuY2VJZCwgYmxvY2tJbml0aWFsQW5pbWF0aW9uID0gX2EuYmxvY2tJbml0aWFsQW5pbWF0aW9uLCB2aXN1YWxTdGF0ZSA9IF9hLnZpc3VhbFN0YXRlLCBzaG91bGRSZWR1Y2VNb3Rpb24gPSBfYS5zaG91bGRSZWR1Y2VNb3Rpb247XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhdGVzdFZhbHVlcyA9IHZpc3VhbFN0YXRlLmxhdGVzdFZhbHVlcywgcmVuZGVyU3RhdGUgPSB2aXN1YWxTdGF0ZS5yZW5kZXJTdGF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgcmVuZGVyLXNwZWNpZmljIG5vZGUgdGhhdCB3aWxsIGJlIGh5ZHJhdGVkIGJ5IHRoZVxuICAgICAgICAgKiBleHBvc2VkIFJlYWN0IHJlZi4gU28gZm9yIGV4YW1wbGUsIHRoaXMgdmlzdWFsIGVsZW1lbnQgY2FuIGhvc3QgYVxuICAgICAgICAgKiBIVE1MRWxlbWVudCwgcGxhaW4gb2JqZWN0LCBvciBUaHJlZS5qcyBvYmplY3QuIFRoZSBmdW5jdGlvbnMgcHJvdmlkZWRcbiAgICAgICAgICogaW4gVmlzdWFsRWxlbWVudENvbmZpZyBhbGxvdyB1cyB0byBpbnRlcmZhY2Ugd2l0aCB0aGlzIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGluc3RhbmNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFuYWdlcyB0aGUgc3Vic2NyaXB0aW9ucyBmb3IgYSB2aXN1YWwgZWxlbWVudCdzIGxpZmVjeWNsZSwgZm9yIGluc3RhbmNlXG4gICAgICAgICAqIG9uUmVuZGVyXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgbGlmZWN5Y2xlcyA9IGNyZWF0ZUxpZmVjeWNsZXMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwIG9mIGFsbCBtb3Rpb24gdmFsdWVzIGF0dGFjaGVkIHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuIE1vdGlvblxuICAgICAgICAgKiB2YWx1ZXMgYXJlIHNvdXJjZSBvZiB0cnV0aCBmb3IgYW55IGdpdmVuIGFuaW1hdGVkIHZhbHVlLiBBIG1vdGlvblxuICAgICAgICAgKiB2YWx1ZSBtaWdodCBiZSBwcm92aWRlZCBleHRlcm5hbGx5IGJ5IHRoZSBjb21wb25lbnQgdmlhIHByb3BzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwIG9mIGV2ZXJ5IHN1YnNjcmlwdGlvbiB0aGF0IGJpbmRzIHRoZSBwcm92aWRlZCBvciBnZW5lcmF0ZWRcbiAgICAgICAgICogbW90aW9uIHZhbHVlcyBvbkNoYW5nZSBsaXN0ZW5lcnMgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciB2YWx1ZVN1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXNseS1wcm92aWRlZCBtb3Rpb24gdmFsdWVzIGFzIHJldHVybmVkXG4gICAgICAgICAqIGZyb20gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLiBXZSB1c2UgdGhlIGtleXMgaW4gaGVyZSB0byBkZXRlcm1pbmVcbiAgICAgICAgICogaWYgYW55IG1vdGlvbiB2YWx1ZXMgbmVlZCB0byBiZSByZW1vdmVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHByZXZNb3Rpb25WYWx1ZXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdmFsdWVzIGFyZSByZW1vdmVkIGZyb20gYWxsIGFuaW1hdGlvbiBwcm9wcyB3ZSBuZWVkIHRvIHNlYXJjaFxuICAgICAgICAgKiBmb3IgYSBmYWxsYmFjayB2YWx1ZSB0byBhbmltYXRlIHRvLiBUaGVzZSB2YWx1ZXMgYXJlIHRyYWNrZWQgaW4gYmFzZVRhcmdldC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBiYXNlVGFyZ2V0ID0gX19hc3NpZ24oe30sIGxhdGVzdFZhbHVlcyk7XG4gICAgICAgIC8vIEludGVybmFsIG1ldGhvZHMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbiBtb3VudCwgdGhpcyB3aWxsIGJlIGh5ZHJhdGVkIHdpdGggYSBjYWxsYmFjayB0byBkaXNjb25uZWN0XG4gICAgICAgICAqIHRoaXMgdmlzdWFsIGVsZW1lbnQgZnJvbSBpdHMgcGFyZW50IG9uIHVubW91bnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVtb3ZlRnJvbVZhcmlhbnRUcmVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIHRoZSBlbGVtZW50IHdpdGggdGhlIGxhdGVzdCBzdHlsZXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RcbiAgICAgICAgICogcmVuZGVyIGxpZmVjeWNsZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhaXNNb3VudGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRyaWdnZXJCdWlsZCgpO1xuICAgICAgICAgICAgcmVuZGVySW5zdGFuY2UoaW5zdGFuY2UsIHJlbmRlclN0YXRlLCBwcm9wcy5zdHlsZSwgZWxlbWVudC5wcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQnVpbGQoKSB7XG4gICAgICAgICAgICBidWlsZChlbGVtZW50LCByZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICAgICAgbGlmZWN5Y2xlcy5ub3RpZnlVcGRhdGUobGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZW1vdmVPbkNoYW5nZSA9IHZhbHVlLm9uQ2hhbmdlKGZ1bmN0aW9uIChsYXRlc3RWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlc1trZXldID0gbGF0ZXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvcHMub25VcGRhdGUgJiYgc3luYy51cGRhdGUodXBkYXRlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciByZW1vdmVPblJlbmRlclJlcXVlc3QgPSB2YWx1ZS5vblJlbmRlclJlcXVlc3QoZWxlbWVudC5zY2hlZHVsZVJlbmRlcik7XG4gICAgICAgICAgICB2YWx1ZVN1YnNjcmlwdGlvbnMuc2V0KGtleSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZU9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlT25SZW5kZXJSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQW55IG1vdGlvbiB2YWx1ZXMgdGhhdCBhcmUgcHJvdmlkZWQgdG8gdGhlIGVsZW1lbnQgd2hlbiBjcmVhdGVkXG4gICAgICAgICAqIGFyZW4ndCB5ZXQgYm91bmQgdG8gdGhlIGVsZW1lbnQsIGFzIHRoaXMgd291bGQgdGVjaG5pY2FsbHkgYmUgaW1wdXJlLlxuICAgICAgICAgKiBIb3dldmVyLCB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIG1vdGlvbiB2YWx1ZXMgYW5kIHNldCB0aGVtIHRvIHRoZVxuICAgICAgICAgKiBpbml0aWFsIHZhbHVlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRPRE86IFRoaXMgaXMgaW1wdXJlIGFuZCB3ZSBzaG91bGQgbG9vayBhdCBjaGFuZ2luZyB0aGlzIHRvIHJ1biBvbiBtb3VudC5cbiAgICAgICAgICogRG9pbmcgc28gd2lsbCBicmVhayBzb21lIHRlc3RzIGJ1dCB0aGlzIGlzbid0IG5lY2Nlc3NhcmlseSBhIGJyZWFraW5nIGNoYW5nZSxcbiAgICAgICAgICogbW9yZSBhIHJlZmxlY3Rpb24gb2YgdGhlIHRlc3QuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgaW5pdGlhbE1vdGlvblZhbHVlcyA9IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcyk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBpbml0aWFsTW90aW9uVmFsdWVzKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbml0aWFsTW90aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJiBpc01vdGlvblZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnNldChsYXRlc3RWYWx1ZXNba2V5XSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hhdCByb2xlIHRoaXMgdmlzdWFsIGVsZW1lbnQgc2hvdWxkIHRha2UgaW4gdGhlIHZhcmlhbnQgdHJlZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpc0NvbnRyb2xsaW5nVmFyaWFudHMgPSBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcyk7XG4gICAgICAgIHZhciBpc1ZhcmlhbnROb2RlID0gY2hlY2tJZlZhcmlhbnROb2RlKHByb3BzKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7IHRyZWVUeXBlOiB0cmVlVHlwZSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgaXMgYSBtaXJyb3Igb2YgdGhlIGludGVybmFsIGluc3RhbmNlIHByb3AsIHdoaWNoIGtlZXBzXG4gICAgICAgICAgICAgKiBWaXN1YWxFbGVtZW50IHR5cGUtY29tcGF0aWJsZSB3aXRoIFJlYWN0J3MgUmVmT2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjdXJyZW50OiBudWxsLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGRlcHRoIG9mIHRoaXMgdmlzdWFsIGVsZW1lbnQgd2l0aGluIHRoZSB2aXN1YWwgZWxlbWVudCB0cmVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXB0aDogcGFyZW50ID8gcGFyZW50LmRlcHRoICsgMSA6IDAsIHBhcmVudDogcGFyZW50LCBjaGlsZHJlbjogbmV3IFNldCgpLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJlc2VuY2VJZDogcHJlc2VuY2VJZCwgc2hvdWxkUmVkdWNlTW90aW9uOiBzaG91bGRSZWR1Y2VNb3Rpb24sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGNvbXBvbmVudCBpcyBwYXJ0IG9mIHRoZSB2YXJpYW50IHRyZWUsIGl0IHNob3VsZCB0cmFja1xuICAgICAgICAgICAgICogYW55IGNoaWxkcmVuIHRoYXQgYXJlIGFsc28gcGFydCBvZiB0aGUgdHJlZS4gVGhpcyBpcyBlc3NlbnRpYWxseVxuICAgICAgICAgICAgICogYSBzaGFkb3cgdHJlZSB0byBzaW1wbGlmeSBsb2dpYyBhcm91bmQgaG93IHRvIHN0YWdnZXIgb3ZlciBjaGlsZHJlbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyaWFudENoaWxkcmVuOiBpc1ZhcmlhbnROb2RlID8gbmV3IFNldCgpIDogdW5kZWZpbmVkLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hldGhlciB0aGlzIGluc3RhbmNlIGlzIHZpc2libGUuIFRoaXMgY2FuIGJlIGNoYW5nZWQgaW1wZXJhdGl2ZWx5XG4gICAgICAgICAgICAgKiBieSB0aGUgcHJvamVjdGlvbiB0cmVlLCBpcyBhbmFsb2dvdXMgdG8gQ1NTJ3MgdmlzaWJpbGl0eSBpbiB0aGF0XG4gICAgICAgICAgICAgKiBoaWRkZW4gZWxlbWVudHMgc2hvdWxkIHRha2UgdXAgbGF5b3V0LCBhbmQgbmVlZHMgZW5hY3RpbmcgYnkgdGhlIGNvbmZpZ3VyZWRcbiAgICAgICAgICAgICAqIHJlbmRlciBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNWaXNpYmxlOiB1bmRlZmluZWQsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3JtYWxseSwgaWYgYSBjb21wb25lbnQgaXMgY29udHJvbGxlZCBieSBhIHBhcmVudCdzIHZhcmlhbnRzLCBpdCBjYW5cbiAgICAgICAgICAgICAqIHJlbHkgb24gdGhhdCBhbmNlc3RvciB0byB0cmlnZ2VyIGFuaW1hdGlvbnMgZnVydGhlciBkb3duIHRoZSB0cmVlLlxuICAgICAgICAgICAgICogSG93ZXZlciwgaWYgYSBjb21wb25lbnQgaXMgY3JlYXRlZCBhZnRlciBpdHMgcGFyZW50IGlzIG1vdW50ZWQsIHRoZSBwYXJlbnRcbiAgICAgICAgICAgICAqIHdvbid0IHRyaWdnZXIgdGhhdCBtb3VudCBhbmltYXRpb24gc28gdGhlIGNoaWxkIG5lZWRzIHRvLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IFRoaXMgbWlnaHQgYmUgYmV0dGVyIHJlcGxhY2VkIHdpdGggYSBtZXRob2QgaXNQYXJlbnRNb3VudGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1hbnVhbGx5QW5pbWF0ZU9uTW91bnQ6IEJvb2xlYW4ocGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmlzTW91bnRlZCgpKSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgY2FuIGJlIHNldCBieSBBbmltYXRlUHJlc2VuY2UgdG8gZm9yY2UgY29tcG9uZW50cyB0aGF0IG1vdW50XG4gICAgICAgICAgICAgKiBhdCB0aGUgc2FtZSB0aW1lIGFzIGl0IHRvIG1vdW50IGFzIGlmIHRoZXkgaGF2ZSBpbml0aWFsPXtmYWxzZX0gc2V0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBibG9ja0luaXRpYWxBbmltYXRpb246IGJsb2NrSW5pdGlhbEFuaW1hdGlvbiwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGhhcyBtb3VudGVkIHlldC4gVGhpcyBpcyBtb3N0bHkgdXNlZFxuICAgICAgICAgICAgICogYnkgdmFyaWFudCBjaGlsZHJlbiB0byBkZXRlcm1pbmUgd2hldGhlciB0aGV5IG5lZWQgdG8gdHJpZ2dlciB0aGVpclxuICAgICAgICAgICAgICogb3duIGFuaW1hdGlvbnMgb24gbW91bnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQm9vbGVhbihpbnN0YW5jZSk7IH0sIG1vdW50OiBmdW5jdGlvbiAobmV3SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gZWxlbWVudC5jdXJyZW50ID0gbmV3SW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQucHJvamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnByb2plY3Rpb24ubW91bnQobmV3SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNWYXJpYW50Tm9kZSAmJiBwYXJlbnQgJiYgIWlzQ29udHJvbGxpbmdWYXJpYW50cykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVGcm9tVmFyaWFudFRyZWUgPSBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuYWRkVmFyaWFudENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gYmluZFRvTW90aW9uVmFsdWUoa2V5LCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5jaGlsZHJlbi5hZGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRQcm9wcyhwcm9wcyk7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSBlbGVtZW50LnByb2plY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bm1vdW50KCk7XG4gICAgICAgICAgICAgICAgY2FuY2VsU3luYy51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICBjYW5jZWxTeW5jLnJlbmRlcihyZW5kZXIpO1xuICAgICAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdmUpIHsgcmV0dXJuIHJlbW92ZSgpOyB9KTtcbiAgICAgICAgICAgICAgICByZW1vdmVGcm9tVmFyaWFudFRyZWUgPT09IG51bGwgfHwgcmVtb3ZlRnJvbVZhcmlhbnRUcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZW1vdmVGcm9tVmFyaWFudFRyZWUoKTtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuY2hpbGRyZW4uZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGxpZmVjeWNsZXMuY2xlYXJBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGQgYSBjaGlsZCB2aXN1YWwgZWxlbWVudCB0byBvdXIgc2V0IG9mIGNoaWxkcmVuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRWYXJpYW50Q2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2VzdFZhcmlhbnROb2RlID0gZWxlbWVudC5nZXRDbG9zZXN0VmFyaWFudE5vZGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdFZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzb3J0Tm9kZVBvc2l0aW9uOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGVzZSBub2RlcyBhcmVuJ3QgZXZlbiBvZiB0aGUgc2FtZSB0eXBlIHdlIGNhbid0IGNvbXBhcmUgdGhlaXIgZGVwdGguXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKCFzb3J0Tm9kZVBvc2l0aW9uIHx8IHRyZWVUeXBlICE9PSBvdGhlci50cmVlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvcnROb2RlUG9zaXRpb24oZWxlbWVudC5nZXRJbnN0YW5jZSgpLCBvdGhlci5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjbG9zZXN0IHZhcmlhbnQgbm9kZSBpbiB0aGUgdHJlZSBzdGFydGluZyBmcm9tXG4gICAgICAgICAgICAgKiB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRDbG9zZXN0VmFyaWFudE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNWYXJpYW50Tm9kZSA/IGVsZW1lbnQgOiBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKCk7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXhwb3NlIHRoZSBsYXRlc3QgbGF5b3V0SWQgcHJvcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF5b3V0SWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3BzLmxheW91dElkOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbmNlOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0L3NldCB0aGUgbGF0ZXN0IHN0YXRpYyB2YWx1ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFN0YXRpY1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBsYXRlc3RWYWx1ZXNba2V5XTsgfSwgc2V0U3RhdGljVmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiAobGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgbW90aW9uIHZhbHVlIHN0YXRlLiBDdXJyZW50bHkgb25seSB1c2VkIHRvIHRha2VcbiAgICAgICAgICAgICAqIGEgc25hcHNob3Qgb2YgdGhlIHZpc3VhbCBlbGVtZW50IC0gcGVyaGFwcyB0aGlzIGNhbiByZXR1cm4gdGhlIHdob2xlXG4gICAgICAgICAgICAgKiB2aXN1YWwgc3RhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF0ZXN0VmFsdWVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXRlc3RWYWx1ZXM7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIHZpc2libGl0eSBvZiB0aGUgdmlzdWFsIGVsZW1lbnQuIElmIGl0J3MgY2hhbmdlZCwgc2NoZWR1bGVcbiAgICAgICAgICAgICAqIGEgcmVuZGVyIHRvIHJlZmxlY3QgdGhlc2UgY2hhbmdlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0VmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pc1Zpc2libGUgPT09IHZpc2liaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlzVmlzaWJsZSA9IHZpc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1ha2UgYSB0YXJnZXQgYW5pbWF0YWJsZSBieSBQb3Btb3Rpb24uIEZvciBpbnN0YW5jZSwgaWYgd2UncmVcbiAgICAgICAgICAgICAqIHRyeWluZyB0byBhbmltYXRlIHdpZHRoIGZyb20gMTAwcHggdG8gMTAwdncgd2UgbmVlZCB0byBtZWFzdXJlIDEwMHZ3XG4gICAgICAgICAgICAgKiBpbiBwaXhlbHMgdG8gZGV0ZXJtaW5lIHdoYXQgd2UgcmVhbGx5IG5lZWQgdG8gYW5pbWF0ZSB0by4gVGhpcyBpcyBhbHNvXG4gICAgICAgICAgICAgKiBwbHVnZ2FibGUgdG8gc3VwcG9ydCBGcmFtZXIncyBjdXN0b20gdmFsdWUgdHlwZXMgbGlrZSBDb2xvcixcbiAgICAgICAgICAgICAqIGFuZCBDU1MgdmFyaWFibGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtYWtlVGFyZ2V0QW5pbWF0YWJsZTogZnVuY3Rpb24gKHRhcmdldCwgY2FuTXV0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbk11dGF0ZSA9PT0gdm9pZCAwKSB7IGNhbk11dGF0ZSA9IHRydWU7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVRhcmdldEFuaW1hdGFibGUoZWxlbWVudCwgdGFyZ2V0LCBwcm9wcywgY2FuTXV0YXRlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNZWFzdXJlIHRoZSBjdXJyZW50IHZpZXdwb3J0IGJveCB3aXRoIG9yIHdpdGhvdXQgdHJhbnNmb3Jtcy5cbiAgICAgICAgICAgICAqIE9ubHkgbWVhc3VyZXMgYXhpcy1hbGlnbmVkIGJveGVzLCByb3RhdGUgYW5kIHNrZXcgbXVzdCBiZSBtYW51YWxseVxuICAgICAgICAgICAgICogcmVtb3ZlZCB3aXRoIGEgcmUtcmVuZGVyIHRvIHdvcmsuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1lYXN1cmVWaWV3cG9ydEJveDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHByb3BzKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLy8gTW90aW9uIHZhbHVlcyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkIGEgbW90aW9uIHZhbHVlIGFuZCBiaW5kIGl0IHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFkZFZhbHVlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNWYWx1ZShrZXkpKVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZVZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBsYXRlc3RWYWx1ZXNba2V5XSA9IHZhbHVlLmdldCgpO1xuICAgICAgICAgICAgICAgIGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZSBhIG1vdGlvbiB2YWx1ZSBhbmQgdW5iaW5kIGFueSBhY3RpdmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3ZlVmFsdWU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIChfYSA9IHZhbHVlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZShrZXksIHJlbmRlclN0YXRlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHdlIGhhdmUgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGhhc1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB2YWx1ZXMuaGFzKGtleSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5LiBJZiBjYWxsZWQgd2l0aCBhIGRlZmF1bHRcbiAgICAgICAgICAgICAqIHZhbHVlLCB3ZSdsbCBjcmVhdGUgb25lIGlmIG5vbmUgZXhpc3RzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEl0ZXJhdGUgb3ZlciBvdXIgbW90aW9uIHZhbHVlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yRWFjaFZhbHVlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHZhbHVlcy5mb3JFYWNoKGNhbGxiYWNrKTsgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAgICAgICAgICogd2UgbmVlZCB0byBjaGVjayBmb3IgaXQgaW4gb3VyIHN0YXRlIGFuZCBhcyBhIGxhc3QgcmVzb3J0IHJlYWQgaXRcbiAgICAgICAgICAgICAqIGRpcmVjdGx5IGZyb20gdGhlIGluc3RhbmNlICh3aGljaCBtaWdodCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucykuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlYWRWYWx1ZTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gbGF0ZXN0VmFsdWVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlYWRWYWx1ZUZyb21JbnN0YW5jZShpbnN0YW5jZSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIGJhc2UgdGFyZ2V0IHRvIGxhdGVyIGFuaW1hdGUgYmFjayB0by4gVGhpcyBpcyBjdXJyZW50bHlcbiAgICAgICAgICAgICAqIG9ubHkgaHlkcmF0ZWQgb24gY3JlYXRpb24gYW5kIHdoZW4gd2UgZmlyc3QgcmVhZCBhIHZhbHVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGJhc2VUYXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZpbmQgdGhlIGJhc2UgdGFyZ2V0IGZvciBhIHZhbHVlIHRoYXRzIGJlZW4gcmVtb3ZlZCBmcm9tIGFsbCBhbmltYXRpb25cbiAgICAgICAgICAgICAqIHByb3BzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJhc2VUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldEJhc2VUYXJnZXQocHJvcHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiAhaXNNb3Rpb25WYWx1ZSh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VUYXJnZXRba2V5XTtcbiAgICAgICAgICAgIH0gfSwgbGlmZWN5Y2xlcyksIHsgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIHRoZSByZW5kZXJlciBzdGF0ZSBiYXNlZCBvbiB0aGUgbGF0ZXN0IHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQnVpbGQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyU3RhdGU7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2NoZWR1bGUgYSByZW5kZXIgb24gdGhlIG5leHQgYW5pbWF0aW9uIGZyYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzY2hlZHVsZVJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN5bmMucmVuZGVyKHJlbmRlciwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN5bmNocm9ub3VzbHkgZmlyZSByZW5kZXIuIEl0J3MgcHJlZmVyZWQgdGhhdCB3ZSBiYXRjaCByZW5kZXJzIGJ1dFxuICAgICAgICAgICAgICogaW4gbWFueSBjaXJjdW1zdGFuY2VzLCBsaWtlIGxheW91dCBtZWFzdXJlbWVudCwgd2UgbmVlZCB0byBydW4gdGhpc1xuICAgICAgICAgICAgICogc3luY2hyb25vdXNseS4gSG93ZXZlciBpbiB0aG9zZSBpbnN0YW5jZXMgb3RoZXIgbWVhc3VyZXMgc2hvdWxkIGJlIHRha2VuXG4gICAgICAgICAgICAgKiB0byBiYXRjaCByZWFkcy93cml0ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN5bmNSZW5kZXI6IHJlbmRlciwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgcHJvdmlkZWQgcHJvcHMuIEVuc3VyZSBhbnkgbmV3bHktYWRkZWQgbW90aW9uIHZhbHVlcyBhcmVcbiAgICAgICAgICAgICAqIGFkZGVkIHRvIG91ciBtYXAsIG9sZCBvbmVzIHJlbW92ZWQsIGFuZCBsaXN0ZW5lcnMgdXBkYXRlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0UHJvcHM6IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChuZXdQcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSB8fCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNjaGVkdWxlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlcy51cGRhdGVQcm9wTGlzdGVuZXJzKG5ld1Byb3BzKTtcbiAgICAgICAgICAgICAgICBwcmV2TW90aW9uVmFsdWVzID0gdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzKGVsZW1lbnQsIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcyksIHByZXZNb3Rpb25WYWx1ZXMpO1xuICAgICAgICAgICAgfSwgZ2V0UHJvcHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3BzOyB9LCBcbiAgICAgICAgICAgIC8vIFZhcmlhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSB2YXJpYW50IGRlZmluaXRpb24gd2l0aCBhIGdpdmVuIG5hbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFZhcmlhbnQ6IGZ1bmN0aW9uIChuYW1lKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHByb3BzLnZhcmlhbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbbmFtZV07IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZWZpbmVkIGRlZmF1bHQgdHJhbnNpdGlvbiBvbiB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0RGVmYXVsdFRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3BzLnRyYW5zaXRpb247IH0sIGdldFRyYW5zZm9ybVBhZ2VQb2ludDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCBieSBjaGlsZCB2YXJpYW50IG5vZGVzIHRvIGdldCB0aGUgY2xvc2VzdCBhbmNlc3RvciB2YXJpYW50IHByb3BzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYXJpYW50Q29udGV4dDogZnVuY3Rpb24gKHN0YXJ0QXRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRBdFBhcmVudCA9PT0gdm9pZCAwKSB7IHN0YXJ0QXRQYXJlbnQgPSBmYWxzZTsgfVxuICAgICAgICAgICAgICAgIGlmIChzdGFydEF0UGFyZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmdldFZhcmlhbnRDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0NvbnRyb2xsaW5nVmFyaWFudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMSA9IChwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKSkgfHwge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5pbml0aWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfMS5pbml0aWFsID0gcHJvcHMuaW5pdGlhbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dF8xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVmFyaWFudFByb3BzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHZhcmlhbnRQcm9wc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSBwcm9wc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYXJpYW50TGFiZWwocHJvcCkgfHwgcHJvcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRbbmFtZV8xXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgICAgICB9IH0pO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xufTtcbnZhciB2YXJpYW50UHJvcHMgPSBfX3NwcmVhZEFycmF5KFtcImluaXRpYWxcIl0sIF9fcmVhZCh2YXJpYW50UHJpb3JpdHlPcmRlciksIGZhbHNlKTtcbnZhciBudW1WYXJpYW50UHJvcHMgPSB2YXJpYW50UHJvcHMubGVuZ3RoO1xuXG5leHBvcnQgeyB2aXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgdmFyIF9hO1xuICAgIGZvciAodmFyIGtleSBpbiBuZXh0KSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0W2tleV07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBwcmV2W2tleV07XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKG5leHRWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIG1vdGlvbiB2YWx1ZSBmb3VuZCBpbiBwcm9wcyBvciBzdHlsZSwgd2Ugd2FudCB0byBhZGQgaXRcbiAgICAgICAgICAgICAqIHRvIG91ciB2aXN1YWwgZWxlbWVudCdzIG1vdGlvbiB2YWx1ZSBtYXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyB0byBhIG5ldyBtb3Rpb24gdmFsdWUsIGNyZWF0ZSBhIG5ldyBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIGZyb20gdGhhdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUobmV4dFZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldlZhbHVlICE9PSBuZXh0VmFsdWUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIGZsYXQgdmFsdWUgdGhhdCBoYXMgY2hhbmdlZCwgdXBkYXRlIHRoZSBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIG9yIGNyZWF0ZSBvbmUgaWYgaXQgZG9lc24ndCBleGlzdC4gV2Ugb25seSB3YW50IHRvIGRvIHRoaXMgaWYgd2UncmVcbiAgICAgICAgICAgICAqIG5vdCBoYW5kbGluZyB0aGUgdmFsdWUgd2l0aCBvdXIgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBlbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT25seSB1cGRhdGUgdmFsdWVzIHRoYXQgYXJlbid0IGJlaW5nIGFuaW1hdGVkIG9yIGV2ZW4gbG9va2VkIGF0XG4gICAgICAgICAgICAgICAgIWV4aXN0aW5nVmFsdWUuaGFzQW5pbWF0ZWQgJiYgZXhpc3RpbmdWYWx1ZS5zZXQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSgoX2EgPSBlbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5leHRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSByZW1vdmVkIHZhbHVlc1xuICAgIGZvciAodmFyIGtleSBpbiBwcmV2KSB7XG4gICAgICAgIGlmIChuZXh0W2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlVmFsdWUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG59XG5cbmV4cG9ydCB7IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIiwiaW1wb3J0IHsgX19yZXN0LCBfX2Fzc2lnbiwgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5cbmZ1bmN0aW9uIGlzQ1NTVmFyaWFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnN0YXJ0c1dpdGgoXCJ2YXIoLS1cIik7XG59XG4vKipcbiAqIFBhcnNlIEZyYW1lcidzIHNwZWNpYWwgQ1NTIHZhcmlhYmxlIGZvcm1hdCBpbnRvIGEgQ1NTIHRva2VuIGFuZCBhIGZhbGxiYWNrLlxuICpcbiAqIGBgYFxuICogYHZhcigtLWZvbywgI2ZmZilgID0+IFtgLS1mb29gLCAnI2ZmZiddXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY3VycmVudFxuICovXG52YXIgY3NzVmFyaWFibGVSZWdleCA9IC92YXJcXCgoLS1bYS16QS1aMC05LV9dKyksPyA/KFthLXpBLVowLTkgKCklIy4sLV0rKT9cXCkvO1xuZnVuY3Rpb24gcGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSB7XG4gICAgdmFyIG1hdGNoID0gY3NzVmFyaWFibGVSZWdleC5leGVjKGN1cnJlbnQpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHJldHVybiBbLF07XG4gICAgdmFyIF9hID0gX19yZWFkKG1hdGNoLCAzKSwgdG9rZW4gPSBfYVsxXSwgZmFsbGJhY2sgPSBfYVsyXTtcbiAgICByZXR1cm4gW3Rva2VuLCBmYWxsYmFja107XG59XG52YXIgbWF4RGVwdGggPSA0O1xuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50LCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA9PT0gdm9pZCAwKSB7IGRlcHRoID0gMTsgfVxuICAgIGludmFyaWFudChkZXB0aCA8PSBtYXhEZXB0aCwgXCJNYXggQ1NTIHZhcmlhYmxlIGZhbGxiYWNrIGRlcHRoIGRldGVjdGVkIGluIHByb3BlcnR5IFxcXCJcIi5jb25jYXQoY3VycmVudCwgXCJcXFwiLiBUaGlzIG1heSBpbmRpY2F0ZSBhIGNpcmN1bGFyIGZhbGxiYWNrIGRlcGVuZGVuY3kuXCIpKTtcbiAgICB2YXIgX2EgPSBfX3JlYWQocGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSwgMiksIHRva2VuID0gX2FbMF0sIGZhbGxiYWNrID0gX2FbMV07XG4gICAgLy8gTm8gQ1NTIHZhcmlhYmxlIGRldGVjdGVkXG4gICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEF0dGVtcHQgdG8gcmVhZCB0aGlzIENTUyB2YXJpYWJsZSBvZmYgdGhlIGVsZW1lbnRcbiAgICB2YXIgcmVzb2x2ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHRva2VuKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLnRyaW0oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDU1NWYXJpYWJsZShmYWxsYmFjaykpIHtcbiAgICAgICAgLy8gVGhlIGZhbGxiYWNrIG1pZ2h0IGl0c2VsZiBiZSBhIENTUyB2YXJpYWJsZSwgaW4gd2hpY2ggY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc29sdmUgaXQgdG9vLlxuICAgICAgICByZXR1cm4gZ2V0VmFyaWFibGVWYWx1ZShmYWxsYmFjaywgZWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgQ1NTIHZhcmlhYmxlcyBmcm9tXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgX2EsIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHRhcmdldCA9IF9fcmVzdChfYSwgW10pO1xuICAgIHZhciBlbGVtZW50ID0gdmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpO1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSlcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbiAgICAvLyBJZiBgdHJhbnNpdGlvbkVuZGAgaXNuJ3QgYHVuZGVmaW5lZGAsIGNsb25lIGl0LiBXZSBjb3VsZCBjbG9uZSBgdGFyZ2V0YCBhbmQgYHRyYW5zaXRpb25FbmRgXG4gICAgLy8gb25seSBpZiB0aGV5IGNoYW5nZSBidXQgSSB0aGluayB0aGlzIHJlYWRzIGNsZWFyZXIgYW5kIHRoaXMgaXNuJ3QgYSBwZXJmb3JtYW5jZS1jcml0aWNhbCBwYXRoLlxuICAgIGlmICh0cmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHRyYW5zaXRpb25FbmQgPSBfX2Fzc2lnbih7fSwgdHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICAgIC8vIEdvIHRocm91Z2ggZXhpc3RpbmcgYE1vdGlvblZhbHVlYHMgYW5kIGVuc3VyZSBhbnkgZXhpc3RpbmcgQ1NTIHZhcmlhYmxlcyBhcmUgcmVzb2x2ZWRcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlKGN1cnJlbnQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzb2x2ZWQpXG4gICAgICAgICAgICB2YWx1ZS5zZXQocmVzb2x2ZWQpO1xuICAgIH0pO1xuICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlcnkgdGFyZ2V0IHByb3BlcnR5IGFuZCByZXNvbHZlIENTUyB2YXJpYWJsZXMuIEN1cnJlbnRseVxuICAgIC8vIHdlIG9ubHkgcmVhZCBzaW5nbGUtdmFyIHByb3BlcnRpZXMgbGlrZSBgdmFyKC0tZm9vKWAsIG5vdCBgY2FsYyh2YXIoLS1mb28pICsgMjBweClgXG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoIWlzQ1NTVmFyaWFibGUoY3VycmVudCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFyZXNvbHZlZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBDbG9uZSB0YXJnZXQgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlblxuICAgICAgICB0YXJnZXRba2V5XSA9IHJlc29sdmVkO1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXNuJ3QgYWxyZWFkeSBzZXQgdGhpcyBrZXkgb24gYHRyYW5zaXRpb25FbmRgLCBzZXQgaXQgdG8gdGhlIHVucmVzb2x2ZWRcbiAgICAgICAgLy8gQ1NTIHZhcmlhYmxlLiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgcmVmbGVjdFxuICAgICAgICAvLyBjaGFuZ2VzIGluIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHZhcmlhYmxlLlxuICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgIChfYiA9IHRyYW5zaXRpb25FbmRba2V5XSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKHRyYW5zaXRpb25FbmRba2V5XSA9IGN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4geyB0YXJnZXQ6IHRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xufVxuXG5leHBvcnQgeyBjc3NWYXJpYWJsZVJlZ2V4LCBwYXJzZUNTU1ZhcmlhYmxlLCByZXNvbHZlQ1NTVmFyaWFibGVzIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgbnVtYmVyLCBweCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGlzS2V5ZnJhbWVzVGFyZ2V0IH0gZnJvbSAnLi4vLi4vLi4vYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgZmluZERpbWVuc2lvblZhbHVlVHlwZSB9IGZyb20gJy4uL3ZhbHVlLXR5cGVzL2RpbWVuc2lvbnMubWpzJztcblxudmFyIHBvc2l0aW9uYWxLZXlzID0gbmV3IFNldChbXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJ0b3BcIixcbiAgICBcImxlZnRcIixcbiAgICBcInJpZ2h0XCIsXG4gICAgXCJib3R0b21cIixcbiAgICBcInhcIixcbiAgICBcInlcIixcbl0pO1xudmFyIGlzUG9zaXRpb25hbEtleSA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHBvc2l0aW9uYWxLZXlzLmhhcyhrZXkpOyB9O1xudmFyIGhhc1Bvc2l0aW9uYWxLZXkgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuc29tZShpc1Bvc2l0aW9uYWxLZXkpO1xufTtcbnZhciBzZXRBbmRSZXNldFZlbG9jaXR5ID0gZnVuY3Rpb24gKHZhbHVlLCB0bykge1xuICAgIC8vIExvb2tzIG9kZCBidXQgc2V0dGluZyBpdCB0d2ljZSBkb2Vzbid0IHJlbmRlciwgaXQnbGwganVzdFxuICAgIC8vIHNldCBib3RoIHByZXYgYW5kIGN1cnJlbnQgdG8gdGhlIGxhdGVzdCB2YWx1ZVxuICAgIHZhbHVlLnNldCh0bywgZmFsc2UpO1xuICAgIHZhbHVlLnNldCh0byk7XG59O1xudmFyIGlzTnVtT3JQeFR5cGUgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2ID09PSBudW1iZXIgfHwgdiA9PT0gcHg7XG59O1xudmFyIEJvdW5kaW5nQm94RGltZW5zaW9uO1xuKGZ1bmN0aW9uIChCb3VuZGluZ0JveERpbWVuc2lvbikge1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1wid2lkdGhcIl0gPSBcIndpZHRoXCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJoZWlnaHRcIl0gPSBcImhlaWdodFwiO1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1wibGVmdFwiXSA9IFwibGVmdFwiO1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1wicmlnaHRcIl0gPSBcInJpZ2h0XCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJ0b3BcIl0gPSBcInRvcFwiO1xuICAgIEJvdW5kaW5nQm94RGltZW5zaW9uW1wiYm90dG9tXCJdID0gXCJib3R0b21cIjtcbn0pKEJvdW5kaW5nQm94RGltZW5zaW9uIHx8IChCb3VuZGluZ0JveERpbWVuc2lvbiA9IHt9KSk7XG52YXIgZ2V0UG9zRnJvbU1hdHJpeCA9IGZ1bmN0aW9uIChtYXRyaXgsIHBvcykge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG1hdHJpeC5zcGxpdChcIiwgXCIpW3Bvc10pO1xufTtcbnZhciBnZXRUcmFuc2xhdGVGcm9tTWF0cml4ID0gZnVuY3Rpb24gKHBvczIsIHBvczMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gX2EudHJhbnNmb3JtO1xuICAgICAgICBpZiAodHJhbnNmb3JtID09PSBcIm5vbmVcIiB8fCAhdHJhbnNmb3JtKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHZhciBtYXRyaXgzZCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeDNkXFwoKC4rKVxcKSQvKTtcbiAgICAgICAgaWYgKG1hdHJpeDNkKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0UG9zRnJvbU1hdHJpeChtYXRyaXgzZFsxXSwgcG9zMyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4XFwoKC4rKVxcKSQvKTtcbiAgICAgICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UG9zRnJvbU1hdHJpeChtYXRyaXhbMV0sIHBvczIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcbnZhciB0cmFuc2Zvcm1LZXlzID0gbmV3IFNldChbXCJ4XCIsIFwieVwiLCBcInpcIl0pO1xudmFyIG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzID0gdHJhbnNmb3JtUHJvcHMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICF0cmFuc2Zvcm1LZXlzLmhhcyhrZXkpOyB9KTtcbmZ1bmN0aW9uIHJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0odmlzdWFsRWxlbWVudCkge1xuICAgIHZhciByZW1vdmVkVHJhbnNmb3JtcyA9IFtdO1xuICAgIG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3Jtcy5wdXNoKFtrZXksIHZhbHVlLmdldCgpXSk7XG4gICAgICAgICAgICB2YWx1ZS5zZXQoa2V5LnN0YXJ0c1dpdGgoXCJzY2FsZVwiKSA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFwcGx5IGNoYW5nZXMgdG8gZWxlbWVudCBiZWZvcmUgbWVhc3VyZW1lbnRcbiAgICBpZiAocmVtb3ZlZFRyYW5zZm9ybXMubGVuZ3RoKVxuICAgICAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICByZXR1cm4gcmVtb3ZlZFRyYW5zZm9ybXM7XG59XG52YXIgcG9zaXRpb25hbFZhbHVlcyA9IHtcbiAgICAvLyBEaW1lbnNpb25zXG4gICAgd2lkdGg6IGZ1bmN0aW9uIChfYSwgX2IpIHtcbiAgICAgICAgdmFyIHggPSBfYS54O1xuICAgICAgICB2YXIgX2MgPSBfYi5wYWRkaW5nTGVmdCwgcGFkZGluZ0xlZnQgPSBfYyA9PT0gdm9pZCAwID8gXCIwXCIgOiBfYywgX2QgPSBfYi5wYWRkaW5nUmlnaHQsIHBhZGRpbmdSaWdodCA9IF9kID09PSB2b2lkIDAgPyBcIjBcIiA6IF9kO1xuICAgICAgICByZXR1cm4geC5tYXggLSB4Lm1pbiAtIHBhcnNlRmxvYXQocGFkZGluZ0xlZnQpIC0gcGFyc2VGbG9hdChwYWRkaW5nUmlnaHQpO1xuICAgIH0sXG4gICAgaGVpZ2h0OiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB5ID0gX2EueTtcbiAgICAgICAgdmFyIF9jID0gX2IucGFkZGluZ1RvcCwgcGFkZGluZ1RvcCA9IF9jID09PSB2b2lkIDAgPyBcIjBcIiA6IF9jLCBfZCA9IF9iLnBhZGRpbmdCb3R0b20sIHBhZGRpbmdCb3R0b20gPSBfZCA9PT0gdm9pZCAwID8gXCIwXCIgOiBfZDtcbiAgICAgICAgcmV0dXJuIHkubWF4IC0geS5taW4gLSBwYXJzZUZsb2F0KHBhZGRpbmdUb3ApIC0gcGFyc2VGbG9hdChwYWRkaW5nQm90dG9tKTtcbiAgICB9LFxuICAgIHRvcDogZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgICAgICB2YXIgdG9wID0gX2EudG9wO1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0b3ApO1xuICAgIH0sXG4gICAgbGVmdDogZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgICAgICB2YXIgbGVmdCA9IF9hLmxlZnQ7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGxlZnQpO1xuICAgIH0sXG4gICAgYm90dG9tOiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB5ID0gX2EueTtcbiAgICAgICAgdmFyIHRvcCA9IF9iLnRvcDtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodG9wKSArICh5Lm1heCAtIHkubWluKTtcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB4ID0gX2EueDtcbiAgICAgICAgdmFyIGxlZnQgPSBfYi5sZWZ0O1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChsZWZ0KSArICh4Lm1heCAtIHgubWluKTtcbiAgICB9LFxuICAgIC8vIFRyYW5zZm9ybVxuICAgIHg6IGdldFRyYW5zbGF0ZUZyb21NYXRyaXgoNCwgMTMpLFxuICAgIHk6IGdldFRyYW5zbGF0ZUZyb21NYXRyaXgoNSwgMTQpLFxufTtcbnZhciBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkS2V5cykge1xuICAgIHZhciBvcmlnaW5CYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICB2YXIgZWxlbWVudCA9IHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKTtcbiAgICB2YXIgZWxlbWVudENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIHZhciBkaXNwbGF5ID0gZWxlbWVudENvbXB1dGVkU3R5bGUuZGlzcGxheTtcbiAgICB2YXIgb3JpZ2luID0ge307XG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IHNldCB0byBkaXNwbGF5OiBcIm5vbmVcIiwgbWFrZSBpdCB2aXNpYmxlIGJlZm9yZVxuICAgIC8vIG1lYXN1cmluZyB0aGUgdGFyZ2V0IGJvdW5kaW5nIGJveFxuICAgIGlmIChkaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICB2aXN1YWxFbGVtZW50LnNldFN0YXRpY1ZhbHVlKFwiZGlzcGxheVwiLCB0YXJnZXQuZGlzcGxheSB8fCBcImJsb2NrXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvcmQgb3JpZ2lucyBiZWZvcmUgd2UgcmVuZGVyIGFuZCB1cGRhdGUgc3R5bGVzXG4gICAgICovXG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIG9yaWdpbltrZXldID0gcG9zaXRpb25hbFZhbHVlc1trZXldKG9yaWdpbkJib3gsIGVsZW1lbnRDb21wdXRlZFN0eWxlKTtcbiAgICB9KTtcbiAgICAvLyBBcHBseSB0aGUgbGF0ZXN0IHZhbHVlcyAoYXMgc2V0IGluIGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzKVxuICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIHZhciB0YXJnZXRCYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICBjaGFuZ2VkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBzdHlsZXMgdG8gdGhlaXIgKipjYWxjdWxhdGVkIGNvbXB1dGVkIHN0eWxlKiosIG5vdCB0aGVpciBhY3R1YWxcbiAgICAgICAgLy8gb3JpZ2luYWxseSBzZXQgc3R5bGUuIFRoaXMgYWxsb3dzIHVzIHRvIGFuaW1hdGUgYmV0d2VlbiBlcXVpdmFsZW50IHBpeGVsIHVuaXRzLlxuICAgICAgICB2YXIgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIHNldEFuZFJlc2V0VmVsb2NpdHkodmFsdWUsIG9yaWdpbltrZXldKTtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBwb3NpdGlvbmFsVmFsdWVzW2tleV0odGFyZ2V0QmJveCwgZWxlbWVudENvbXB1dGVkU3R5bGUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzID0gZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSB7XG4gICAgaWYgKG9yaWdpbiA9PT0gdm9pZCAwKSB7IG9yaWdpbiA9IHt9OyB9XG4gICAgaWYgKHRyYW5zaXRpb25FbmQgPT09IHZvaWQgMCkgeyB0cmFuc2l0aW9uRW5kID0ge307IH1cbiAgICB0YXJnZXQgPSBfX2Fzc2lnbih7fSwgdGFyZ2V0KTtcbiAgICB0cmFuc2l0aW9uRW5kID0gX19hc3NpZ24oe30sIHRyYW5zaXRpb25FbmQpO1xuICAgIHZhciB0YXJnZXRQb3NpdGlvbmFsS2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCkuZmlsdGVyKGlzUG9zaXRpb25hbEtleSk7XG4gICAgLy8gV2Ugd2FudCB0byByZW1vdmUgYW55IHRyYW5zZm9ybSB2YWx1ZXMgdGhhdCBjb3VsZCBhZmZlY3QgdGhlIGVsZW1lbnQncyBib3VuZGluZyBib3ggYmVmb3JlXG4gICAgLy8gaXQncyBtZWFzdXJlZC4gV2UnbGwgcmVhcHBseSB0aGVzZSBsYXRlci5cbiAgICB2YXIgcmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyA9IFtdO1xuICAgIHZhciBoYXNBdHRlbXB0ZWRUb1JlbW92ZVRyYW5zZm9ybVZhbHVlcyA9IGZhbHNlO1xuICAgIHZhciBjaGFuZ2VkVmFsdWVUeXBlS2V5cyA9IFtdO1xuICAgIHRhcmdldFBvc2l0aW9uYWxLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudC5oYXNWYWx1ZShrZXkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZnJvbSA9IG9yaWdpbltrZXldO1xuICAgICAgICB2YXIgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICB2YXIgdG8gPSB0YXJnZXRba2V5XTtcbiAgICAgICAgdmFyIHRvVHlwZTtcbiAgICAgICAgLy8gVE9ETzogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBiYXNpY2FsbHkgdGhyb3dzIGFuIGVycm9yXG4gICAgICAgIC8vIGlmIHlvdSB0cnkgYW5kIGRvIHZhbHVlIGNvbnZlcnNpb24gdmlhIGtleWZyYW1lcy4gVGhlcmUncyBwcm9iYWJseVxuICAgICAgICAvLyBhIHdheSBvZiBkb2luZyB0aGlzIGJ1dCB0aGUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zIHdvdWxkIG5lZWQgZ3JlYXRlciBzY3J1dGlueSxcbiAgICAgICAgLy8gYXMgaXQnZCBiZSBkb2luZyBtdWx0aXBsZSByZXNpemUtcmVtZWFzdXJlIG9wZXJhdGlvbnMuXG4gICAgICAgIGlmIChpc0tleWZyYW1lc1RhcmdldCh0bykpIHtcbiAgICAgICAgICAgIHZhciBudW1LZXlmcmFtZXMgPSB0by5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZnJvbUluZGV4ID0gdG9bMF0gPT09IG51bGwgPyAxIDogMDtcbiAgICAgICAgICAgIGZyb20gPSB0b1tmcm9tSW5kZXhdO1xuICAgICAgICAgICAgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZyb21JbmRleDsgaSA8IG51bUtleWZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0b1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGludmFyaWFudCh0b1R5cGUgPT09IGZyb21UeXBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSwgXCJLZXlmcmFtZXMgbXVzdCBiZSBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYXMgdGhlIGN1cnJlbnQgdmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQoZmluZERpbWVuc2lvblZhbHVlVHlwZSh0b1tpXSkgPT09IHRvVHlwZSwgXCJBbGwga2V5ZnJhbWVzIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b1R5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKHRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbVR5cGUgIT09IHRvVHlwZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhleSdyZSBib3RoIGp1c3QgbnVtYmVyIG9yIHB4LCBjb252ZXJ0IHRoZW0gYm90aCB0byBudW1iZXJzIHJhdGhlciB0aGFuXG4gICAgICAgICAgICAvLyByZWx5aW5nIG9uIHJlc2l6ZS9yZW1lYXN1cmUgdG8gY29udmVydCAod2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhpcyBzaXR1YXRpb24pXG4gICAgICAgICAgICBpZiAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2V0KHBhcnNlRmxvYXQoY3VycmVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gcGFyc2VGbG9hdCh0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG8pICYmIHRvVHlwZSA9PT0gcHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB0by5tYXAocGFyc2VGbG9hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGZyb21UeXBlID09PSBudWxsIHx8IGZyb21UeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmcm9tVHlwZS50cmFuc2Zvcm0pICYmXG4gICAgICAgICAgICAgICAgKHRvVHlwZSA9PT0gbnVsbCB8fCB0b1R5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRvVHlwZS50cmFuc2Zvcm0pICYmXG4gICAgICAgICAgICAgICAgKGZyb20gPT09IDAgfHwgdG8gPT09IDApKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgb25lIG9yIHRoZSBvdGhlciB2YWx1ZSBpcyAwLCBpdCdzIHNhZmUgdG8gY29lcmNlIGl0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIHR5cGUgb2YgdGhlIG90aGVyIHdpdGhvdXQgbWVhc3VyZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zZXQodG9UeXBlLnRyYW5zZm9ybShmcm9tKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGZyb21UeXBlLnRyYW5zZm9ybSh0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgZ29pbmcgdG8gZG8gdmFsdWUgY29udmVyc2lvbiB2aWEgRE9NIG1lYXN1cmVtZW50cywgd2UgZmlyc3RcbiAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHJlbW92ZSBub24tcG9zaXRpb25hbCB0cmFuc2Zvcm0gdmFsdWVzIHRoYXQgY291bGQgYWZmZWN0IHRoZSBiYm94IG1lYXN1cmVtZW50cy5cbiAgICAgICAgICAgICAgICBpZiAoIWhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybSh2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGFuZ2VkVmFsdWVUeXBlS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldID1cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZFtrZXldICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkVuZFtrZXldXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgIHNldEFuZFJlc2V0VmVsb2NpdHkodmFsdWUsIHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjaGFuZ2VkVmFsdWVUeXBlS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbnZlcnRlZFRhcmdldCA9IGNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyh0YXJnZXQsIHZpc3VhbEVsZW1lbnQsIGNoYW5nZWRWYWx1ZVR5cGVLZXlzKTtcbiAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCB0cmFuc2Zvcm0gdmFsdWVzLCByZWFwcGx5IHRoZW0gYmVmb3JlIHRoZSBuZXh0IHJlbmRlclxuICAgICAgICBpZiAocmVtb3ZlZFRyYW5zZm9ybVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkuc2V0KHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlYXBwbHkgb3JpZ2luYWwgdmFsdWVzXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICByZXR1cm4geyB0YXJnZXQ6IGNvbnZlcnRlZFRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBDb252ZXJ0IHZhbHVlIHR5cGVzIGZvciB4L3kvd2lkdGgvaGVpZ2h0L3RvcC9sZWZ0L2JvdHRvbS9yaWdodFxuICpcbiAqIEFsbG93cyBhbmltYXRpb24gYmV0d2VlbiBgJ2F1dG8nYCAtPiBgJzEwMCUnYCBvciBgMGAgLT4gYCdjYWxjKDUwJSAtIDEwdncpJ2BcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdW5pdENvbnZlcnNpb24odmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICByZXR1cm4gaGFzUG9zaXRpb25hbEtleSh0YXJnZXQpXG4gICAgICAgID8gY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpXG4gICAgICAgIDogeyB0YXJnZXQ6IHRhcmdldCwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9O1xufVxuXG5leHBvcnQgeyBCb3VuZGluZ0JveERpbWVuc2lvbiwgcG9zaXRpb25hbFZhbHVlcywgdW5pdENvbnZlcnNpb24gfTtcbiIsImltcG9ydCB7IHJlc29sdmVDU1NWYXJpYWJsZXMgfSBmcm9tICcuL2Nzcy12YXJpYWJsZXMtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgdW5pdENvbnZlcnNpb24gfSBmcm9tICcuL3VuaXQtY29udmVyc2lvbi5tanMnO1xuXG4vKipcbiAqIFBhcnNlIGEgRE9NIHZhcmlhbnQgdG8gbWFrZSBpdCBhbmltYXRhYmxlLiBUaGlzIGludm9sdmVzIHJlc29sdmluZyBDU1MgdmFyaWFibGVzXG4gKiBhbmQgZW5zdXJpbmcgYW5pbWF0aW9ucyBsaWtlIFwiMjAlXCIgPT4gXCJjYWxjKDUwdncpXCIgYXJlIHBlcmZvcm1lZCBpbiBwaXhlbHMuXG4gKi9cbnZhciBwYXJzZURvbVZhcmlhbnQgPSBmdW5jdGlvbiAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdGFyZ2V0ID0gcmVzb2x2ZWQudGFyZ2V0O1xuICAgIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kO1xuICAgIHJldHVybiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG59O1xuXG5leHBvcnQgeyBwYXJzZURvbVZhcmlhbnQgfTtcbiIsImltcG9ydCB7IF9fcmVzdCwgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyB2aXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vaW5kZXgubWpzJztcbmltcG9ydCB7IGdldE9yaWdpbiwgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMgfSBmcm9tICcuLi91dGlscy9zZXR0ZXJzLm1qcyc7XG5pbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZSB9IGZyb20gJy4uL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzJztcbmltcG9ydCB7IHBhcnNlRG9tVmFyaWFudCB9IGZyb20gJy4uL2RvbS91dGlscy9wYXJzZS1kb20tdmFyaWFudC5tanMnO1xuaW1wb3J0IHsgaXNUcmFuc2Zvcm1Qcm9wIH0gZnJvbSAnLi91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgbWVhc3VyZVZpZXdwb3J0Qm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyc7XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbnZhciBodG1sQ29uZmlnID0ge1xuICAgIHRyZWVUeXBlOiBcImRvbVwiLFxuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIGtleSkge1xuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VHlwZSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VHlwZSA/IGRlZmF1bHRUeXBlLmRlZmF1bHQgfHwgMCA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9tRWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gKChpc0NTU1ZhcmlhYmxlKGtleSlcbiAgICAgICAgICAgICAgICA/IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShrZXkpXG4gICAgICAgICAgICAgICAgOiBjb21wdXRlZFN0eWxlW2tleV0pIHx8IDApO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzb3J0Tm9kZVBvc2l0aW9uOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAvKipcbiAgICAgICAgICogY29tcGFyZURvY3VtZW50UG9zaXRpb24gcmV0dXJucyBhIGJpdG1hc2ssIGJ5IHVzaW5nIHRoZSBiaXR3aXNlICZcbiAgICAgICAgICogd2UncmUgcmV0dXJuaW5nIHRydWUgaWYgMiBpbiB0aGF0IGJpdG1hc2sgaXMgc2V0IHRvIHRydWUuIDIgaXMgc2V0XG4gICAgICAgICAqIHRvIHRydWUgaWYgYiBwcmVjZWVkcyBhLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiAyID8gMSA6IC0xO1xuICAgIH0sXG4gICAgZ2V0QmFzZVRhcmdldDogZnVuY3Rpb24gKHByb3BzLCBrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gcHJvcHMuc3R5bGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtrZXldO1xuICAgIH0sXG4gICAgbWVhc3VyZVZpZXdwb3J0Qm94OiBmdW5jdGlvbiAoZWxlbWVudCwgX2EpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybVBhZ2VQb2ludCA9IF9hLnRyYW5zZm9ybVBhZ2VQb2ludDtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVWaWV3cG9ydEJveChlbGVtZW50LCB0cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHRyYW5zZm9ybSBvbiB0aGUgY3VycmVudCBFbGVtZW50LiBUaGlzIGlzIGNhbGxlZCBhcyBwYXJ0XG4gICAgICogb2YgYSBiYXRjaGVkIHByb2Nlc3MgYWNyb3NzIHRoZSBlbnRpcmUgbGF5b3V0IHRyZWUuIFRvIHJlbW92ZSB0aGlzIHdyaXRlXG4gICAgICogY3ljbGUgaXQnZCBiZSBpbnRlcmVzdGluZyB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBcInVuZG9cIiBhbGwgdGhlIGN1cnJlbnRcbiAgICAgKiBsYXlvdXQgdHJhbnNmb3JtcyB1cCB0aGUgdHJlZSBpbiB0aGUgc2FtZSB3YXkgdGhpcy5nZXRCb3VuZGluZ0JveFdpdGhvdXRUcmFuc2Zvcm1zXG4gICAgICogd29ya3NcbiAgICAgKi9cbiAgICByZXNldFRyYW5zZm9ybTogZnVuY3Rpb24gKGVsZW1lbnQsIGRvbUVsZW1lbnQsIHByb3BzKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1UZW1wbGF0ZSA9IHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlO1xuICAgICAgICBkb21FbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRlbXBsYXRlXG4gICAgICAgICAgICA/IHRyYW5zZm9ybVRlbXBsYXRlKHt9LCBcIlwiKVxuICAgICAgICAgICAgOiBcIm5vbmVcIjtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2hhdGV2ZXIgaGFwcGVucyBuZXh0LCB3ZSByZXN0b3JlIG91ciB0cmFuc2Zvcm0gb24gdGhlIG5leHQgZnJhbWVcbiAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgIH0sXG4gICAgcmVzdG9yZVRyYW5zZm9ybTogZnVuY3Rpb24gKGluc3RhbmNlLCBtdXRhYmxlU3RhdGUpIHtcbiAgICAgICAgaW5zdGFuY2Uuc3R5bGUudHJhbnNmb3JtID0gbXV0YWJsZVN0YXRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICB9LFxuICAgIHJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlOiBmdW5jdGlvbiAoa2V5LCBfYSkge1xuICAgICAgICB2YXIgdmFycyA9IF9hLnZhcnMsIHN0eWxlID0gX2Euc3R5bGU7XG4gICAgICAgIGRlbGV0ZSB2YXJzW2tleV07XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtrZXldO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRW5zdXJlIHRoYXQgSFRNTCBhbmQgRnJhbWVyLXNwZWNpZmljIHZhbHVlIHR5cGVzIGxpa2UgYHB4YC0+YCVgIGFuZCBgQ29sb3JgXG4gICAgICogY2FuIGJlIGFuaW1hdGVkIGJ5IE1vdGlvbi5cbiAgICAgKi9cbiAgICBtYWtlVGFyZ2V0QW5pbWF0YWJsZTogZnVuY3Rpb24gKGVsZW1lbnQsIF9hLCBfYiwgaXNNb3VudGVkKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1WYWx1ZXMgPSBfYi50cmFuc2Zvcm1WYWx1ZXM7XG4gICAgICAgIGlmIChpc01vdW50ZWQgPT09IHZvaWQgMCkgeyBpc01vdW50ZWQgPSB0cnVlOyB9XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gX2EudHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCA9IF9hLnRyYW5zaXRpb25FbmQsIHRhcmdldCA9IF9fcmVzdChfYSwgW1widHJhbnNpdGlvblwiLCBcInRyYW5zaXRpb25FbmRcIl0pO1xuICAgICAgICB2YXIgb3JpZ2luID0gZ2V0T3JpZ2luKHRhcmdldCwgdHJhbnNpdGlvbiB8fCB7fSwgZWxlbWVudCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBGcmFtZXIgaGFzIHByb3ZpZGVkIGEgZnVuY3Rpb24gdG8gY29udmVydCBgQ29sb3JgIGV0YyB2YWx1ZSB0eXBlcywgY29udmVydCB0aGVtXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gdHJhbnNmb3JtVmFsdWVzKHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0cmFuc2Zvcm1WYWx1ZXModGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4pXG4gICAgICAgICAgICAgICAgb3JpZ2luID0gdHJhbnNmb3JtVmFsdWVzKG9yaWdpbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgICAgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMoZWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlRG9tVmFyaWFudChlbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gcGFyc2VkLnRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgICB0YXJnZXQgPSBwYXJzZWQudGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHRyYW5zaXRpb246IHRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfSwgdGFyZ2V0KTtcbiAgICB9LFxuICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgIGJ1aWxkOiBmdW5jdGlvbiAoZWxlbWVudCwgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuaXNWaXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbmRlclN0YXRlLnN0eWxlLnZpc2liaWxpdHkgPSBlbGVtZW50LmlzVmlzaWJsZVxuICAgICAgICAgICAgICAgID8gXCJ2aXNpYmxlXCJcbiAgICAgICAgICAgICAgICA6IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9LFxuICAgIHJlbmRlcjogcmVuZGVySFRNTCxcbn07XG52YXIgaHRtbFZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KGh0bWxDb25maWcpO1xuXG5leHBvcnQgeyBnZXRDb21wdXRlZFN0eWxlLCBodG1sQ29uZmlnLCBodG1sVmlzdWFsRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyB2aXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vaW5kZXgubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IGh0bWxDb25maWcgfSBmcm9tICcuLi9odG1sL3Zpc3VhbC1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR0F0dHJzIH0gZnJvbSAnLi91dGlscy9idWlsZC1hdHRycy5tanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuaW1wb3J0IHsgaXNUcmFuc2Zvcm1Qcm9wIH0gZnJvbSAnLi4vaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IHJlbmRlclNWRyB9IGZyb20gJy4vdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVUeXBlIH0gZnJvbSAnLi4vZG9tL3ZhbHVlLXR5cGVzL2RlZmF1bHRzLm1qcyc7XG5cbnZhciBzdmdWaXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaHRtbENvbmZpZyksIHsgZ2V0QmFzZVRhcmdldDogZnVuY3Rpb24gKHByb3BzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgfSwgcmVhZFZhbHVlRnJvbUluc3RhbmNlOiBmdW5jdGlvbiAoZG9tRWxlbWVudCwga2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUHJvcChrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IGdldERlZmF1bHRWYWx1ZVR5cGUoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHQpIHx8IDA7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gIWNhbWVsQ2FzZUF0dHJpYnV0ZXMuaGFzKGtleSkgPyBjYW1lbFRvRGFzaChrZXkpIDoga2V5O1xuICAgICAgICByZXR1cm4gZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcywgYnVpbGQ6IGZ1bmN0aW9uIChfZWxlbWVudCwgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfSwgcmVuZGVyOiByZW5kZXJTVkcgfSkpO1xuXG5leHBvcnQgeyBzdmdWaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBodG1sVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IHN2Z1Zpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9zdmcvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5cbnZhciBjcmVhdGVEb21WaXN1YWxFbGVtZW50ID0gZnVuY3Rpb24gKENvbXBvbmVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpXG4gICAgICAgID8gc3ZnVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9KVxuICAgICAgICA6IGh0bWxWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IHRydWUgfSk7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH07XG4iLCJpbXBvcnQgeyBweCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcblxuZnVuY3Rpb24gcGl4ZWxzVG9QZXJjZW50KHBpeGVscywgYXhpcykge1xuICAgIGlmIChheGlzLm1heCA9PT0gYXhpcy5taW4pXG4gICAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAocGl4ZWxzIC8gKGF4aXMubWF4IC0gYXhpcy5taW4pKSAqIDEwMDtcbn1cbi8qKlxuICogV2UgYWx3YXlzIGNvcnJlY3QgYm9yZGVyUmFkaXVzIGFzIGEgcGVyY2VudGFnZSByYXRoZXIgdGhhbiBwaXhlbHMgdG8gcmVkdWNlIHBhaW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIHByb2plY3RpbmcgYSBib3ggdGhhdCBpcyAxMDBweCB3aWRlIHdpdGggYSAxMHB4IGJvcmRlclJhZGl1c1xuICogaW50byBhIGJveCB0aGF0IGlzIDIwMHB4IHdpZGUgd2l0aCBhIDIwcHggYm9yZGVyUmFkaXVzLCB0aGF0IGlzIGFjdHVhbGx5IGEgMTAlXG4gKiBib3JkZXJSYWRpdXMgaW4gYm90aCBzdGF0ZXMuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBpeGVscyB0aGF0IHdpbGwgdHJpZ2dlclxuICogYSBwYWludCBlYWNoIHRpbWUuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBlcmNlbnRhZ2Ugd2UnbGwgYXZvaWQgYSBwYWludC5cbiAqL1xudmFyIGNvcnJlY3RCb3JkZXJSYWRpdXMgPSB7XG4gICAgY29ycmVjdDogZnVuY3Rpb24gKGxhdGVzdCwgbm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUudGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGxhdGVzdCBpcyBhIHN0cmluZywgaWYgaXQncyBhIHBlcmNlbnRhZ2Ugd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseSBhcyBpdCdzXG4gICAgICAgICAqIGdvaW5nIHRvIGJlIHN0cmV0Y2hlZCBhcHByb3ByaWF0ZWx5LiBPdGhlcndpc2UsIGlmIGl0J3MgYSBwaXhlbCwgY29udmVydCBpdCB0byBhIG51bWJlci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgbGF0ZXN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocHgudGVzdChsYXRlc3QpKSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gcGFyc2VGbG9hdChsYXRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgbGF0ZXN0IGlzIGEgbnVtYmVyLCBpdCdzIGEgcGl4ZWwgdmFsdWUuIFdlIHVzZSB0aGUgY3VycmVudCB2aWV3cG9ydEJveCB0byBjYWxjdWxhdGUgdGhhdFxuICAgICAgICAgKiBwaXhlbCB2YWx1ZSBhcyBhIHBlcmNlbnRhZ2Ugb2YgZWFjaCBheGlzXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgeCA9IHBpeGVsc1RvUGVyY2VudChsYXRlc3QsIG5vZGUudGFyZ2V0LngpO1xuICAgICAgICB2YXIgeSA9IHBpeGVsc1RvUGVyY2VudChsYXRlc3QsIG5vZGUudGFyZ2V0LnkpO1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoeCwgXCIlIFwiKS5jb25jYXQoeSwgXCIlXCIpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb3JyZWN0Qm9yZGVyUmFkaXVzLCBwaXhlbHNUb1BlcmNlbnQgfTtcbiIsImltcG9ydCB7IG1peCB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgY3NzVmFyaWFibGVSZWdleCB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vdXRpbHMvY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyc7XG5cbnZhciB2YXJUb2tlbiA9IFwiXyRjc3NcIjtcbnZhciBjb3JyZWN0Qm94U2hhZG93ID0ge1xuICAgIGNvcnJlY3Q6IGZ1bmN0aW9uIChsYXRlc3QsIF9hKSB7XG4gICAgICAgIHZhciB0cmVlU2NhbGUgPSBfYS50cmVlU2NhbGUsIHByb2plY3Rpb25EZWx0YSA9IF9hLnByb2plY3Rpb25EZWx0YTtcbiAgICAgICAgdmFyIG9yaWdpbmFsID0gbGF0ZXN0O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2UgbmVlZCB0byBmaXJzdCBzdHJpcCBhbmQgc3RvcmUgQ1NTIHZhcmlhYmxlcyBmcm9tIHRoZSBzdHJpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgY29udGFpbnNDU1NWYXJpYWJsZXMgPSBsYXRlc3QuaW5jbHVkZXMoXCJ2YXIoXCIpO1xuICAgICAgICB2YXIgY3NzVmFyaWFibGVzID0gW107XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgbGF0ZXN0ID0gbGF0ZXN0LnJlcGxhY2UoY3NzVmFyaWFibGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgY3NzVmFyaWFibGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YXJUb2tlbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaGFkb3cgPSBjb21wbGV4LnBhcnNlKGxhdGVzdCk7XG4gICAgICAgIC8vIFRPRE86IERvZXNuJ3Qgc3VwcG9ydCBtdWx0aXBsZSBzaGFkb3dzXG4gICAgICAgIGlmIChzaGFkb3cubGVuZ3RoID4gNSlcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gY29tcGxleC5jcmVhdGVUcmFuc2Zvcm1lcihsYXRlc3QpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdHlwZW9mIHNoYWRvd1swXSAhPT0gXCJudW1iZXJcIiA/IDEgOiAwO1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG92ZXJhbGwgY29udGV4dCBzY2FsZVxuICAgICAgICB2YXIgeFNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnguc2NhbGUgKiB0cmVlU2NhbGUueDtcbiAgICAgICAgdmFyIHlTY2FsZSA9IHByb2plY3Rpb25EZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgICAgIHNoYWRvd1swICsgb2Zmc2V0XSAvPSB4U2NhbGU7XG4gICAgICAgIHNoYWRvd1sxICsgb2Zmc2V0XSAvPSB5U2NhbGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZGVhbGx5IHdlJ2QgY29ycmVjdCB4IGFuZCB5IHNjYWxlcyBpbmRpdmlkdWFsbHksIGJ1dCBiZWNhdXNlIGJsdXIgYW5kXG4gICAgICAgICAqIHNwcmVhZCBhcHBseSB0byBib3RoIHdlIGhhdmUgdG8gdGFrZSBhIHNjYWxlIGF2ZXJhZ2UgYW5kIGFwcGx5IHRoYXQgaW5zdGVhZC5cbiAgICAgICAgICogV2UgY291bGQgcG90ZW50aWFsbHkgaW1wcm92ZSB0aGUgb3V0Y29tZSBvZiB0aGlzIGJ5IGluY29ycG9yYXRpbmcgdGhlIHJhdGlvIGJldHdlZW5cbiAgICAgICAgICogdGhlIHR3byBzY2FsZXMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgYXZlcmFnZVNjYWxlID0gbWl4KHhTY2FsZSwgeVNjYWxlLCAwLjUpO1xuICAgICAgICAvLyBCbHVyXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzIgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzIgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgLy8gU3ByZWFkXG4gICAgICAgIGlmICh0eXBlb2Ygc2hhZG93WzMgKyBvZmZzZXRdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgc2hhZG93WzMgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRlbXBsYXRlKHNoYWRvdyk7XG4gICAgICAgIGlmIChjb250YWluc0NTU1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgdmFyIGlfMSA9IDA7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSh2YXJUb2tlbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjc3NWYXJpYWJsZSA9IGNzc1ZhcmlhYmxlc1tpXzFdO1xuICAgICAgICAgICAgICAgIGlfMSsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NWYXJpYWJsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvcnJlY3RCb3hTaGFkb3cgfTtcbiIsImltcG9ydCB7IF9fZXh0ZW5kcywgX19hc3NpZ24sIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCBzeW5jIGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9BbmltYXRlUHJlc2VuY2UvdXNlLXByZXNlbmNlLm1qcyc7XG5pbXBvcnQgeyBMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzJztcbmltcG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vbm9kZS9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBjb3JyZWN0Qm9yZGVyUmFkaXVzIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtYm9yZGVyLXJhZGl1cy5tanMnO1xuaW1wb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzJztcbmltcG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yIH0gZnJvbSAnLi4vLi4vLi4vcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanMnO1xuXG52YXIgTWVhc3VyZUxheW91dFdpdGhDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVhc3VyZUxheW91dFdpdGhDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgb25seSBtb3VudHMgcHJvamVjdGlvbiBub2RlcyBmb3IgY29tcG9uZW50cyB0aGF0XG4gICAgICogbmVlZCBtZWFzdXJpbmcsIHdlIG1pZ2h0IHdhbnQgdG8gZG8gaXQgZm9yIGFsbCBjb21wb25lbnRzXG4gICAgICogaW4gb3JkZXIgdG8gaW5jb3Jwb3JhdGUgdHJhbnNmb3Jtc1xuICAgICAqL1xuICAgIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50LCBsYXlvdXRHcm91cCA9IF9hLmxheW91dEdyb3VwLCBzd2l0Y2hMYXlvdXRHcm91cCA9IF9hLnN3aXRjaExheW91dEdyb3VwLCBsYXlvdXRJZCA9IF9hLmxheW91dElkO1xuICAgICAgICB2YXIgcHJvamVjdGlvbiA9IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgYWRkU2NhbGVDb3JyZWN0b3IoZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyk7XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAobGF5b3V0R3JvdXAgPT09IG51bGwgfHwgbGF5b3V0R3JvdXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxheW91dEdyb3VwLmdyb3VwKVxuICAgICAgICAgICAgICAgIGxheW91dEdyb3VwLmdyb3VwLmFkZChwcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICgoc3dpdGNoTGF5b3V0R3JvdXAgPT09IG51bGwgfHwgc3dpdGNoTGF5b3V0R3JvdXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN3aXRjaExheW91dEdyb3VwLnJlZ2lzdGVyKSAmJiBsYXlvdXRJZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaExheW91dEdyb3VwLnJlZ2lzdGVyKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvamVjdGlvbi5yb290LmRpZFVwZGF0ZSgpO1xuICAgICAgICAgICAgcHJvamVjdGlvbi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uQ29tcGxldGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnNldE9wdGlvbnMoX19hc3NpZ24oX19hc3NpZ24oe30sIHByb2plY3Rpb24ub3B0aW9ucyksIHsgb25FeGl0Q29tcGxldGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNhZmVUb1JlbW92ZSgpOyB9IH0pKTtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzRXZlclVwZGF0ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LnByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgbGF5b3V0RGVwZW5kZW5jeSA9IF9hLmxheW91dERlcGVuZGVuY3ksIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50LCBkcmFnID0gX2EuZHJhZywgaXNQcmVzZW50ID0gX2EuaXNQcmVzZW50O1xuICAgICAgICB2YXIgcHJvamVjdGlvbiA9IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgaWYgKCFwcm9qZWN0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUT0RPOiBXZSB1c2UgdGhpcyBkYXRhIGluIHJlbGVnYXRlIHRvIGRldGVybWluZSB3aGV0aGVyIHRvXG4gICAgICAgICAqIHByb21vdGUgYSBwcmV2aW91cyBlbGVtZW50LiBUaGVyZSdzIG5vIGd1YXJhbnRlZSBpdHMgcHJlc2VuY2UgZGF0YVxuICAgICAgICAgKiB3aWxsIGhhdmUgdXBkYXRlZCBieSB0aGlzIHBvaW50IC0gaWYgYSBidWcgbGlrZSB0aGlzIGFyaXNlcyBpdCB3aWxsXG4gICAgICAgICAqIGhhdmUgdG8gYmUgdGhhdCB3ZSBtYXJrRm9yUmVsZWdhdGlvbiBhbmQgdGhlbiBmaW5kIGEgbmV3IGxlYWQgc29tZSBvdGhlciB3YXksXG4gICAgICAgICAqIHBlcmhhcHMgaW4gZGlkVXBkYXRlXG4gICAgICAgICAqL1xuICAgICAgICBwcm9qZWN0aW9uLmlzUHJlc2VudCA9IGlzUHJlc2VudDtcbiAgICAgICAgaWYgKGRyYWcgfHxcbiAgICAgICAgICAgIHByZXZQcm9wcy5sYXlvdXREZXBlbmRlbmN5ICE9PSBsYXlvdXREZXBlbmRlbmN5IHx8XG4gICAgICAgICAgICBsYXlvdXREZXBlbmRlbmN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ud2lsbFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zYWZlVG9SZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlByb3BzLmlzUHJlc2VudCAhPT0gaXNQcmVzZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbi5wcm9tb3RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghcHJvamVjdGlvbi5yZWxlZ2F0ZSgpKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlcmUncyBhbm90aGVyIHN0YWNrIG1lbWJlciB0YWtpbmcgb3ZlciBmcm9tIHRoaXMgb25lLFxuICAgICAgICAgICAgICAgICAqIGl0J3MgaW4gY2hhcmdlIG9mIHRoZSBleGl0IGFuaW1hdGlvbiBhbmQgdGhlcmVmb3JlIHNob3VsZFxuICAgICAgICAgICAgICAgICAqIGJlIGluIGNoYXJnZSBvZiB0aGUgc2FmZSB0byByZW1vdmUuIE90aGVyd2lzZSB3ZSBjYWxsIGl0IGhlcmUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc3luYy5wb3N0UmVuZGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISgoX2EgPSBwcm9qZWN0aW9uLmdldFN0YWNrKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZW1iZXJzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB0aGlzLnByb3BzLnZpc3VhbEVsZW1lbnQucHJvamVjdGlvbjtcbiAgICAgICAgaWYgKHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ucm9vdC5kaWRVcGRhdGUoKTtcbiAgICAgICAgICAgIGlmICghcHJvamVjdGlvbi5jdXJyZW50QW5pbWF0aW9uICYmIHByb2plY3Rpb24uaXNMZWFkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhZmVUb1JlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgbGF5b3V0R3JvdXAgPSBfYS5sYXlvdXRHcm91cCwgcHJvbW90ZUNvbnRleHQgPSBfYS5zd2l0Y2hMYXlvdXRHcm91cDtcbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSB2aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgIGlmIChwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uLnNjaGVkdWxlQ2hlY2tBZnRlclVubW91bnQoKTtcbiAgICAgICAgICAgIGlmIChsYXlvdXRHcm91cCA9PT0gbnVsbCB8fCBsYXlvdXRHcm91cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGF5b3V0R3JvdXAuZ3JvdXApXG4gICAgICAgICAgICAgICAgbGF5b3V0R3JvdXAuZ3JvdXAucmVtb3ZlKHByb2plY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHByb21vdGVDb250ZXh0ID09PSBudWxsIHx8IHByb21vdGVDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9tb3RlQ29udGV4dC5kZXJlZ2lzdGVyKVxuICAgICAgICAgICAgICAgIHByb21vdGVDb250ZXh0LmRlcmVnaXN0ZXIocHJvamVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dC5wcm90b3R5cGUuc2FmZVRvUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2FmZVRvUmVtb3ZlID0gdGhpcy5wcm9wcy5zYWZlVG9SZW1vdmU7XG4gICAgICAgIHNhZmVUb1JlbW92ZSA9PT0gbnVsbCB8fCBzYWZlVG9SZW1vdmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNhZmVUb1JlbW92ZSgpO1xuICAgIH07XG4gICAgTWVhc3VyZUxheW91dFdpdGhDb250ZXh0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIE1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dDtcbn0oUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50KSk7XG5mdW5jdGlvbiBNZWFzdXJlTGF5b3V0KHByb3BzKSB7XG4gICAgdmFyIF9hID0gX19yZWFkKHVzZVByZXNlbmNlKCksIDIpLCBpc1ByZXNlbnQgPSBfYVswXSwgc2FmZVRvUmVtb3ZlID0gX2FbMV07XG4gICAgdmFyIGxheW91dEdyb3VwID0gdXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpO1xuICAgIHJldHVybiAoUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChNZWFzdXJlTGF5b3V0V2l0aENvbnRleHQsIF9fYXNzaWduKHt9LCBwcm9wcywgeyBsYXlvdXRHcm91cDogbGF5b3V0R3JvdXAsIHN3aXRjaExheW91dEdyb3VwOiB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCksIGlzUHJlc2VudDogaXNQcmVzZW50LCBzYWZlVG9SZW1vdmU6IHNhZmVUb1JlbW92ZSB9KSkpO1xufVxudmFyIGRlZmF1bHRTY2FsZUNvcnJlY3RvcnMgPSB7XG4gICAgYm9yZGVyUmFkaXVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29ycmVjdEJvcmRlclJhZGl1cyksIHsgYXBwbHlUbzogW1xuICAgICAgICAgICAgXCJib3JkZXJUb3BMZWZ0UmFkaXVzXCIsXG4gICAgICAgICAgICBcImJvcmRlclRvcFJpZ2h0UmFkaXVzXCIsXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXNcIixcbiAgICAgICAgXSB9KSxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGNvcnJlY3RCb3JkZXJSYWRpdXMsXG4gICAgYm94U2hhZG93OiBjb3JyZWN0Qm94U2hhZG93LFxufTtcblxuZXhwb3J0IHsgTWVhc3VyZUxheW91dCB9O1xuIiwiaW1wb3J0IHsgTWVhc3VyZUxheW91dCB9IGZyb20gJy4vTWVhc3VyZUxheW91dC5tanMnO1xuXG52YXIgbGF5b3V0RmVhdHVyZXMgPSB7XG4gICAgbWVhc3VyZUxheW91dDogTWVhc3VyZUxheW91dCxcbn07XG5cbmV4cG9ydCB7IGxheW91dEZlYXR1cmVzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vY3JlYXRlLXByb2plY3Rpb24tbm9kZS5tanMnO1xuXG52YXIgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcjogZnVuY3Rpb24gKHJlZiwgbm90aWZ5KSB7XG4gICAgICAgIHJlZi5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG5vdGlmeSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbm90aWZ5KTsgfTtcbiAgICB9LFxuICAgIG1lYXN1cmVTY3JvbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgIHg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcbiAgICB9KTsgfSxcbn0pO1xuXG5leHBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vY3JlYXRlLXByb2plY3Rpb24tbm9kZS5tanMnO1xuaW1wb3J0IHsgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanMnO1xuXG52YXIgcm9vdFByb2plY3Rpb25Ob2RlID0ge1xuICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbn07XG52YXIgSFRNTFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIG1lYXN1cmVTY3JvbGw6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gKHtcbiAgICAgICAgeDogaW5zdGFuY2Uuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogaW5zdGFuY2Uuc2Nyb2xsVG9wLFxuICAgIH0pOyB9LFxuICAgIGRlZmF1bHRQYXJlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFyb290UHJvamVjdGlvbk5vZGUuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGRvY3VtZW50Tm9kZSA9IG5ldyBEb2N1bWVudFByb2plY3Rpb25Ob2RlKDAsIHt9KTtcbiAgICAgICAgICAgIGRvY3VtZW50Tm9kZS5tb3VudCh3aW5kb3cpO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLnNldE9wdGlvbnMoeyBsYXlvdXRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICByb290UHJvamVjdGlvbk5vZGUuY3VycmVudCA9IGRvY3VtZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQ7XG4gICAgfSxcbiAgICByZXNldFRyYW5zZm9ybTogZnVuY3Rpb24gKGluc3RhbmNlLCB2YWx1ZSkge1xuICAgICAgICBpbnN0YW5jZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBcIm5vbmVcIjtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEhUTUxQcm9qZWN0aW9uTm9kZSwgcm9vdFByb2plY3Rpb25Ob2RlIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNyZWF0ZU1vdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL21vdGlvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlTW90aW9uUHJveHkgfSBmcm9tICcuL21vdGlvbi1wcm94eS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtY29uZmlnLm1qcyc7XG5pbXBvcnQgeyBnZXN0dXJlQW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyc7XG5pbXBvcnQgeyBkcmFnIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2RyYWcubWpzJztcbmltcG9ydCB7IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgbGF5b3V0RmVhdHVyZXMgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbnZhciBmZWF0dXJlQnVuZGxlID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGFuaW1hdGlvbnMpLCBnZXN0dXJlQW5pbWF0aW9ucyksIGRyYWcpLCBsYXlvdXRGZWF0dXJlcyk7XG4vKipcbiAqIEhUTUwgJiBTVkcgY29tcG9uZW50cywgb3B0aW1pc2VkIGZvciB1c2Ugd2l0aCBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uLiBUaGVzZSBjYW4gYmUgdXNlZCBhc1xuICogZHJvcC1pbiByZXBsYWNlbWVudHMgZm9yIGFueSBIVE1MICYgU1ZHIGNvbXBvbmVudCwgYWxsIENTUyAmIFNWRyBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eShmdW5jdGlvbiAoQ29tcG9uZW50LCBjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgY29uZmlnLCBmZWF0dXJlQnVuZGxlLCBjcmVhdGVEb21WaXN1YWxFbGVtZW50LCBIVE1MUHJvamVjdGlvbk5vZGUpO1xufSk7XG4vKipcbiAqIENyZWF0ZSBhIERPTSBgbW90aW9uYCBjb21wb25lbnQgd2l0aCB0aGUgcHJvdmlkZWQgc3RyaW5nLiBUaGlzIGlzIHByaW1hcmlseSBpbnRlbmRlZFxuICogYXMgYSBmdWxsIGFsdGVybmF0aXZlIHRvIGBtb3Rpb25gIGZvciBjb25zdW1lcnMgd2hvIGhhdmUgdG8gc3VwcG9ydCBlbnZpcm9ubWVudHMgdGhhdCBkb24ndFxuICogc3VwcG9ydCBgUHJveHlgLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBjb25zdCBtb3Rpb24gPSB7XG4gKiAgIGRpdjogY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KCdkaXYnKVxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQoa2V5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZU1vdGlvbkNvbXBvbmVudChjcmVhdGVEb21Nb3Rpb25Db25maWcoa2V5LCB7IGZvcndhcmRNb3Rpb25Qcm9wczogZmFsc2UgfSwgZmVhdHVyZUJ1bmRsZSwgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCwgSFRNTFByb2plY3Rpb25Ob2RlKSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCwgbW90aW9uIH07XG4iLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfSBmcm9tICcuLi91c2UtcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBzdmdNb3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi9zdmcvY29uZmlnLW1vdGlvbi5tanMnO1xuaW1wb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL2h0bWwvY29uZmlnLW1vdGlvbi5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db25maWcoQ29tcG9uZW50LCBfYSwgcHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQsIHByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IpIHtcbiAgICB2YXIgX2IgPSBfYS5mb3J3YXJkTW90aW9uUHJvcHMsIGZvcndhcmRNb3Rpb25Qcm9wcyA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xuICAgIHZhciBiYXNlQ29uZmlnID0gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICA/IHN2Z01vdGlvbkNvbmZpZ1xuICAgICAgICA6IGh0bWxNb3Rpb25Db25maWc7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlQ29uZmlnKSwgeyBwcmVsb2FkZWRGZWF0dXJlczogcHJlbG9hZGVkRmVhdHVyZXMsIHVzZVJlbmRlcjogY3JlYXRlVXNlUmVuZGVyKGZvcndhcmRNb3Rpb25Qcm9wcyksIGNyZWF0ZVZpc3VhbEVsZW1lbnQ6IGNyZWF0ZVZpc3VhbEVsZW1lbnQsIHByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3I6IHByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IsIENvbXBvbmVudDogQ29tcG9uZW50IH0pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db25maWcgfTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC51bGBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblxyXG4gICYgbGkge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxZW07XHJcblxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBDaXJjbGUgPSBzdHlsZWQobW90aW9uLmRpdilgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIGJvdHRvbTogLTE0cHg7XHJcbiAgbGVmdDogMDtcclxuICByaWdodDogMDtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICB3aWR0aDogMTBweDtcclxuICBoZWlnaHQ6IDEwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUubGlnaHRNYWluQ29sb3J9O1xyXG5gO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQobW90aW9uLnN2ZylgXHJcbiAgd2lkdGg6IDM2cHg7XHJcbiAgaGVpZ2h0OiAzNnB4O1xyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XHJcblxyXG5pbXBvcnQgeyBXcmFwcGVyIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IGxvZ29WYXJpZW50cyA9IHtcclxuICBpbml0aWFsOiB7IHBhdGhMZW5ndGg6IDAsIGZpbGw6IFwicmdiYSg0NSwgNDksIDI1MCwgMClcIiB9LFxyXG4gIGFuaW1hdGU6IHtcclxuICAgIHBhdGhMZW5ndGg6IDEsXHJcbiAgICBmaWxsOiBcInJnYmEoNDUsIDQ5LCAyNTAsIDEpXCIsXHJcbiAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICBkdXJhdGlvbjogNCxcclxuICAgICAgfSxcclxuICAgICAgZmlsbDoge1xyXG4gICAgICAgIGR1cmF0aW9uOiAyLFxyXG4gICAgICAgIGRlbGF5OiAyLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9LFxyXG59O1xyXG5cclxuY29uc3QgTG9nbyA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj5cclxuICAgICAgPG1vdGlvbi5wYXRoXHJcbiAgICAgICAgZD1cIk0yMCw0YzguOCwwLDE2LDcuMiwxNiwxNnMtNy4yLDE2LTE2LDE2UzQsMjguOCw0LDIwUzExLjIsNCwyMCw0IE0yMCwwQzksMCwwLDksMCwyMHM5LDIwLDIwLDIwczIwLTksMjAtMjBTMzEsMCwyMCwwTDIwLDB6XCJcclxuICAgICAgICBmaWxsPVwiY3VycmVudFwiXHJcbiAgICAgICAgc3Ryb2tlPVwicmdiYSg0NSwgNDksIDI1MCwgMSlcIlxyXG4gICAgICAgIHN0cm9rZVdpZHRoPVwiMVwiXHJcbiAgICAgICAgdmFyaWFudHM9e2xvZ29WYXJpZW50c31cclxuICAgICAgICBpbml0aWFsPVwiaW5pdGlhbFwiXHJcbiAgICAgICAgYW5pbWF0ZT1cImFuaW1hdGVcIlxyXG4gICAgICAvPlxyXG4gICAgICA8bW90aW9uLnRleHRcclxuICAgICAgICB0cmFuc2Zvcm09XCJtYXRyaXgoMSAwIDAgMSA1LjEwMTggMzAuNTc3MSlcIlxyXG4gICAgICAgIGZpbGw9XCJjdXJyZW50XCJcclxuICAgICAgICBmb250U2l6ZT1cIjMwcHhcIlxyXG4gICAgICAgIHZhcmlhbnRzPXtsb2dvVmFyaWVudHN9XHJcbiAgICAgICAgaW5pdGlhbD1cImluaXRpYWxcIlxyXG4gICAgICAgIGFuaW1hdGU9XCJhbmltYXRlXCJcclxuICAgICAgPlxyXG4gICAgICAgIO+8olxyXG4gICAgICA8L21vdGlvbi50ZXh0PlxyXG4gICAgPC9XcmFwcGVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dvO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuLy8gc3R5bGVkLWNvbXBvbmVudFxyXG5pbXBvcnQgeyBXcmFwcGVyLCBDaXJjbGUgfSBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuLy8gbG9nb1xyXG5pbXBvcnQgTG9nbyBmcm9tIFwiQHNyYy9jb21wb25lbnRzL2NvbW1vbi9JY29uL0xvZ29cIjtcclxuaW1wb3J0IHsgdXNlTG9jYXRpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuY29uc3QgTGVmdCA9ICgpID0+IHtcclxuICBjb25zdCB7IHBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXI+XHJcbiAgICAgIDxsaT5cclxuICAgICAgICA8TGluayB0bz1cIi9cIj5cclxuICAgICAgICAgIDxMb2dvIC8+XHJcbiAgICAgICAgPC9MaW5rPlxyXG4gICAgICA8L2xpPlxyXG4gICAgICA8bGk+XHJcbiAgICAgICAgPExpbmsgdG89XCIvXCI+7ZmIe3BhdGhuYW1lID09PSBcIi9cIiAmJiA8Q2lyY2xlIGxheW91dElkPVwiY2lyY2xlXCIgLz59PC9MaW5rPlxyXG4gICAgICA8L2xpPlxyXG4gICAgICA8bGk+XHJcbiAgICAgICAgPExpbmsgdG89XCIvdHZzXCI+VFYge3BhdGhuYW1lLmluY2x1ZGVzKFwiL3R2c1wiKSAmJiA8Q2lyY2xlIGxheW91dElkPVwiY2lyY2xlXCIgLz59PC9MaW5rPlxyXG4gICAgICA8L2xpPlxyXG4gICAgICA8bGk+XHJcbiAgICAgICAgPExpbmsgdG89XCIvbW92aWVzXCI+7JiB7ZmUIHtwYXRobmFtZS5pbmNsdWRlcyhcIi9tb3ZpZXNcIikgJiYgPENpcmNsZSBsYXlvdXRJZD1cImNpcmNsZVwiIC8+fTwvTGluaz5cclxuICAgICAgPC9saT5cclxuICAgICAgPGxpPlxyXG4gICAgICAgIDxMaW5rIHRvPVwiL3NlYXJjaFwiPuqygOyDiSB7cGF0aG5hbWUuaW5jbHVkZXMoXCIvc2VhcmNoXCIpICYmIDxDaXJjbGUgbGF5b3V0SWQ9XCJjaXJjbGVcIiAvPn08L0xpbms+XHJcbiAgICAgIDwvbGk+XHJcbiAgICA8L1dyYXBwZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExlZnQ7XHJcbiIsImltcG9ydCB7IGF0b20gfSBmcm9tIFwicmVjb2lsXCI7XHJcblxyXG4vLyB0eXBlXHJcbmltcG9ydCB7IElJdGVtIH0gZnJvbSBcIkBzcmMvdHlwZXNcIjtcclxuXHJcbi8vIOuplOyduCDsmIHtmZQg7Y+s7Iqk7YSwIOuztOyXrOykhCDrlYwg7IKs7Jqp7ZWgIOuenOuNpCDsiKvsnpBcclxuZXhwb3J0IGNvbnN0IHJhbmRvbU51bWJlclN0YXRlID0gYXRvbTxudW1iZXI+KHtcclxuICBrZXk6IFwicmFuZG9tTnVtYmVyXCIsXHJcbiAgZGVmYXVsdDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYWluTW92aWVTdGF0ZSA9IGF0b208bnVsbCB8IElJdGVtPih7XHJcbiAga2V5OiBcIm1haW5Nb3ZpZVN0YXRlXCIsXHJcbiAgZGVmYXVsdDogbnVsbCxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgbWFpblR2U3RhdGUgPSBhdG9tPG51bGwgfCBJSXRlbT4oe1xyXG4gIGtleTogXCJtYWluVHZTdGF0ZVwiLFxyXG4gIGRlZmF1bHQ6IG51bGwsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRoZW1lU3RhdGUgPSBhdG9tPGJvb2xlYW4+KHtcclxuICBrZXk6IFwidGhlbWVcIixcclxuICBkZWZhdWx0OiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidGhlbWVcIikgYXMgc3RyaW5nKSA/PyB0cnVlLFxyXG59KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgdGhlbWVTdGF0ZSB9IGZyb20gXCJAc3JjL2F0b21zXCI7XHJcblxyXG5jb25zdCBTdmcgPSBzdHlsZWQobW90aW9uLnN2ZylgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHdpZHRoOiAyNHB4O1xyXG4gIGhlaWdodDogMjRweDtcclxuICBmaWxsOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnRleHRDb2xvcn07XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIHotaW5kZXg6IDE7XHJcbmA7XHJcblxyXG5jb25zdCBzZWFyY2hWYXJpZW50cyA9IHtcclxuICBpbml0aWFsOiAoaXNEYXJrOiBib29sZWFuKSA9PiAoeyBwYXRoTGVuZ3RoOiAwLCBmaWxsOiBpc0RhcmsgPyBcInJnYmEoMzYsIDM3LCAzOCwgMClcIiA6IFwicmdiYSgyNDUsIDI0NiwgMjUwLCAwKVwiIH0pLFxyXG4gIGFuaW1hdGU6IChpc0Rhcms6IGJvb2xlYW4pID0+ICh7XHJcbiAgICBwYXRoTGVuZ3RoOiAxLFxyXG4gICAgZmlsbDogaXNEYXJrID8gXCJyZ2JhKDI0NSwgMjQ2LCAyNTAsIDEpXCIgOiBcInJnYmEoMzYsIDM3LCAzOCwgMSlcIixcclxuICAgIHRyYW5zaXRpb246IHtcclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIGR1cmF0aW9uOiA0LFxyXG4gICAgICB9LFxyXG4gICAgICBmaWxsOiB7XHJcbiAgICAgICAgZHVyYXRpb246IDIsXHJcbiAgICAgICAgZGVsYXk6IDIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pLFxyXG59O1xyXG5cclxuaW50ZXJmYWNlIFNlYXJjaFByb3BzIHtcclxuICBzZWFyY2hPcGVuOiBib29sZWFuO1xyXG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBTZWFyY2ggPSAoeyBzZWFyY2hPcGVuLCBvbkNsaWNrIH06IFNlYXJjaFByb3BzKSA9PiB7XHJcbiAgY29uc3QgaXNEYXJrID0gdXNlUmVjb2lsVmFsdWUodGhlbWVTdGF0ZSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8U3ZnXHJcbiAgICAgIHZlcnNpb249XCIxLjFcIlxyXG4gICAgICBpZD1cImxheWVyXCJcclxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgIHg9XCIwcHhcIlxyXG4gICAgICB5PVwiMHB4XCJcclxuICAgICAgdmlld0JveD1cIjAgMCA0MCA0MFwiXHJcbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XHJcbiAgICAgIGFuaW1hdGU9e3sgeDogc2VhcmNoT3BlbiA/IDYgOiAyMDAgfX1cclxuICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcImxpbmVhclwiLCBkdXJhdGlvbjogMC40IH19XHJcbiAgICA+XHJcbiAgICAgIDxtb3Rpb24ucGF0aFxyXG4gICAgICAgIGQ9XCJNMzguMSwzNC4ybC05LjItOS4yYzEuMy0yLDIuMS00LjUsMi4xLTcuMWMwLTcuMi01LjgtMTMtMTMtMTNTNSwxMC44LDUsMThzNS44LDEzLDEzLDEzYzMuMSwwLDYtMS4xLDguMi0yLjlsOSw5TDM4LjEsMzQuMnogTTksMThjMC01LDQtOSw5LTlzOSw0LDksOXMtNCw5LTksOVM5LDIzLDksMTh6XCJcclxuICAgICAgICBzdHJva2U9e2lzRGFyayA/IFwicmdiYSgyNDUsIDI0NiwgMjUwLCAxKVwiIDogXCJyZ2JhKDM2LCAzNywgMzgsIDEpXCJ9XHJcbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIwLjRcIlxyXG4gICAgICAgIGN1c3RvbT17aXNEYXJrfVxyXG4gICAgICAgIHZhcmlhbnRzPXtzZWFyY2hWYXJpZW50c31cclxuICAgICAgICBpbml0aWFsPVwiaW5pdGlhbFwiXHJcbiAgICAgICAgYW5pbWF0ZT1cImFuaW1hdGVcIlxyXG4gICAgICAvPlxyXG4gICAgPC9Tdmc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLnVsYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgJiBsaSxcclxuICBmb3JtIHtcclxuICAgIG1hcmdpbi1yaWdodDogMWVtO1xyXG5cclxuICAgICY6Zmlyc3QtY2hpbGQge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlYXJjaElucHV0ID0gc3R5bGVkKG1vdGlvbi5pbnB1dClgXHJcbiAgZm9udC1zaXplOiAwLjlyZW07XHJcbiAgcGFkZGluZzogMC41ZW07XHJcbiAgcGFkZGluZy1sZWZ0OiAzNnB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuYmdDb2xvcn07XHJcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICBib3JkZXI6IDFweCBzb2xpZCAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnRleHRDb2xvcn07XHJcblxyXG4gIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IGNlbnRlcjtcclxuXHJcbiAgJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbixcclxuICAmOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxyXG4gICY6Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtYnV0dG9uLFxyXG4gICY6Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtZGVjb3JhdGlvbiB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ2hhbmdlRXZlbnQsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgdXNlSW5wdXQgPSAoaW5pdGlhbElucHV0VmFsdWU6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGU8c3RyaW5nPihpbml0aWFsSW5wdXRWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlVmFsdWUgPSB1c2VDYWxsYmFjaygoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pOiB2b2lkID0+IHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKSwgW10pO1xyXG5cclxuICByZXR1cm4gW3ZhbHVlLCBvbkNoYW5nZVZhbHVlLCBzZXRWYWx1ZV0gYXMgW3N0cmluZywgKGU6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkLCB0eXBlb2Ygc2V0VmFsdWVdO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlSW5wdXQ7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG4vLyBpY29uXHJcbmltcG9ydCBTZWFyY2hJY29uIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvY29tbW9uL0ljb24vU2VhcmNoXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50c1xyXG5pbXBvcnQgeyBXcmFwcGVyLCBTZWFyY2hJbnB1dCB9IGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG4vLyBob29rXHJcbmltcG9ydCB1c2VJbnB1dCBmcm9tIFwiQHNyYy9ob29rcy91c2VJbnB1dFwiO1xyXG5cclxuY29uc3QgUmlnaHQgPSAoKSA9PiB7XHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IFt0ZXh0LCBvbkNoYW5nZVRleHQsIHNldFRleHRdID0gdXNlSW5wdXQoXCJcIik7XHJcbiAgY29uc3QgW3NlYXJjaE9wZW4sIHNldFNlYXJjaE9wZW5dID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IHNlYXJjaFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcclxuXHJcbiAgLy8gMjAyMi8wMy8wNSAtIOqygOyDieywvSDthqDquIAgLSBieSAxLWJsdWVcclxuICBjb25zdCB0b2dnbGVTZWFyY2hJbnB1dCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKCkgPT5cclxuICAgICAgc2V0U2VhcmNoT3BlbihwcmV2ID0+IHtcclxuICAgICAgICBpZiAoIXByZXYpIHNlYXJjaFJlZi5jdXJyZW50Py5mb2N1cygpO1xyXG4gICAgICAgIHJldHVybiAhcHJldjtcclxuICAgICAgfSksXHJcbiAgICBbc2VhcmNoUmVmXSxcclxuICApO1xyXG5cclxuICAvLyAyMDIyLzAzLzA3IC0g6rKA7IOJIC0gYnkgMS1ibHVlXHJcbiAgY29uc3Qgb25TdWJtdXQgPSB1c2VDYWxsYmFjayhcclxuICAgIChlOiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFsZXJ0KFwi6rKA7IOJ7Ja066W8IOyeheugpe2VtOyjvOyEuOyalCFcIik7XHJcblxyXG4gICAgICAvLyBlbmNvZGVVUknrpbwg64K067aA7KCB7Jy866GcIOyymOumrO2VtCDso7zripQg6rKDIOqwmeydjFxyXG4gICAgICBuYXZpZ2F0ZShgL3NlYXJjaC8ke3RleHR9YCk7XHJcblxyXG4gICAgICBzZXRUZXh0KFwiXCIpO1xyXG4gICAgfSxcclxuICAgIFt0ZXh0XSxcclxuICApO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXI+XHJcbiAgICAgIDxsaT5cclxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17b25TdWJtdXR9PlxyXG4gICAgICAgICAgPFNlYXJjaEljb24gc2VhcmNoT3Blbj17c2VhcmNoT3Blbn0gb25DbGljaz17dG9nZ2xlU2VhcmNoSW5wdXR9IC8+XHJcbiAgICAgICAgICA8U2VhcmNoSW5wdXRcclxuICAgICAgICAgICAgcmVmPXtzZWFyY2hSZWZ9XHJcbiAgICAgICAgICAgIHR5cGU9XCJzZWFyY2hcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIuygnOuqqSDsnoXroKVcIlxyXG4gICAgICAgICAgICB2YWx1ZT17dGV4dH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlVGV4dH1cclxuICAgICAgICAgICAgaW5pdGlhbD17eyBzY2FsZVg6IDAgfX1cclxuICAgICAgICAgICAgYW5pbWF0ZT17eyBzY2FsZVg6IHNlYXJjaE9wZW4gPyAxIDogMCB9fVxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjQgfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgICA8L2xpPlxyXG4gICAgICA8bGk+7JWM66a8PC9saT5cclxuICAgICAgPGxpPuuCtCDsoJXrs7Q8L2xpPlxyXG4gICAgICA8bGk+XHJcbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS8xLWJsdWVcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgICAgICAgIDxiPkdpdEh1YjwvYj5cclxuICAgICAgICA8L2E+XHJcbiAgICAgIDwvbGk+XHJcbiAgICA8L1dyYXBwZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpZ2h0O1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQobW90aW9uLm5hdilgXHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHotaW5kZXg6IDE7XHJcbiAgcGFkZGluZzogMWVtO1xyXG4gIG1hcmdpbi1ib3R0b206IDJlbTtcclxuXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuYDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlVmlld3BvcnRTY3JvbGwgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuXHJcbi8vIGNvbXBvbmVudHNcclxuaW1wb3J0IExlZnQgZnJvbSBcIi4vTGVmdFwiO1xyXG5pbXBvcnQgUmlnaHQgZnJvbSBcIi4vUmlnaHRcIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgdGhlbWVTdGF0ZSB9IGZyb20gXCJAc3JjL2F0b21zXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50c1xyXG5pbXBvcnQgeyBXcmFwcGVyIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IG5hdlZhcmlhbnRzID0ge1xyXG4gIGluaXRpYWw6IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxyXG4gIH0sXHJcbiAgYW5pbWF0ZTogKHsgeTogc2Nyb2xsWSwgaXNEYXJrIH06IHsgeTogbnVtYmVyOyBpc0Rhcms6IGJvb2xlYW4gfSkgPT4gKHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogaXNEYXJrXHJcbiAgICAgID8gc2Nyb2xsWSA+IDQwXHJcbiAgICAgICAgPyBcInJnYmEoMzYsIDM3LCAzOCwgMSlcIlxyXG4gICAgICAgIDogXCJyZ2JhKDM2LCAzNywgMzgsIDApXCJcclxuICAgICAgOiBzY3JvbGxZID4gNDBcclxuICAgICAgPyBcInJnYmEoMjQ1LCAyNDYsIDI1MCwgMSlcIlxyXG4gICAgICA6IFwicmdiYSgyNDUsIDI0NiwgMjUwLCAwKVwiLFxyXG4gICAgYm94U2hhZG93OiBzY3JvbGxZID4gNDAgPyBcIjAgMCAxNnB4IGJsYWNrXCIgOiBcIjAgMCAwcHggYmxhY2tcIixcclxuICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuNiB9LFxyXG4gIH0pLFxyXG59O1xyXG5cclxuY29uc3QgTmF2QmFyID0gKCkgPT4ge1xyXG4gIGNvbnN0IGlzRGFyayA9IHVzZVJlY29pbFZhbHVlKHRoZW1lU3RhdGUpO1xyXG4gIGNvbnN0IHsgc2Nyb2xsWSB9ID0gdXNlVmlld3BvcnRTY3JvbGwoKTtcclxuICBjb25zdCBbeSwgc2V0WV0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xyXG5cclxuICAvLyAyMDIyLzAzLzA1IC0g7IOI66Gc6rOg7Lmo7IucIOyKpO2BrOuhpCDsnITsuZgg6riw7Ja1IC0gYnkgMS1ibHVlXHJcbiAgdXNlRWZmZWN0KCgpID0+IHNldFkod2luZG93LnNjcm9sbFkpLCBbd2luZG93LnNjcm9sbFldKTtcclxuXHJcbiAgLy8gMjAyMi8wMy8wNSAtIHNjcm9sbFnqsJIg67OA7ZmUIOydtOuypO2KuCDrk7HroZ0gLSBieSAxLWJsdWVcclxuICB1c2VFZmZlY3QoKCkgPT4gc2Nyb2xsWS5vbkNoYW5nZSh2ID0+IHNldFkodikpLCBbc2Nyb2xsWV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXIgY3VzdG9tPXt7IHksIGlzRGFyayB9fSB2YXJpYW50cz17bmF2VmFyaWFudHN9IGluaXRpYWw9XCJpbml0aWFsXCIgYW5pbWF0ZT1cImFuaW1hdGVcIj5cclxuICAgICAgPExlZnQgLz5cclxuICAgICAgPFJpZ2h0IC8+XHJcbiAgICA8L1dyYXBwZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5hdkJhcjtcclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmFzaWRlYFxyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICByaWdodDogMnZoO1xyXG4gIGJvdHRvbTogMnZoO1xyXG4gIHotaW5kZXg6IDE7XHJcbiAgb3BhY2l0eTogMC44O1xyXG5cclxuICAmIC5zaWRlLWJ1dHRvbiB7XHJcbiAgICBmb250LXNpemU6IDEuOHJlbTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAwLjRlbTtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICAgICY6Zmlyc3QtY2hpbGQge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuNmVtO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJiAubW92ZS10b3AtYnV0dG9uIHtcclxuICAgIGFuaW1hdGlvbi1uYW1lOiBhcHBlYXI7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNnM7XHJcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcclxuICB9XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgdGhlbWVTdGF0ZSB9IGZyb20gXCJAc3JjL2F0b21zXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50c1xyXG5pbXBvcnQgeyBXcmFwcGVyIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IFNpZGVCYXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgW2lzRGFyaywgc2V0VGhlbWVdID0gdXNlUmVjb2lsU3RhdGUodGhlbWVTdGF0ZSk7XHJcbiAgY29uc3QgW2lzVG9wLCBzZXRJc1RvcF0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcclxuXHJcbiAgLy8g7Iqk7YGs66GkIOunqOychOuhnCDsnbTrj5lcclxuICBjb25zdCBtb3ZlU2Nyb2xsVG9wID0gdXNlQ2FsbGJhY2soKCkgPT4gd2luZG93LnNjcm9sbFRvKHsgdG9wOiAwLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KSwgW10pO1xyXG5cclxuICAvLyDsiqTtgazroaTsnbQg7LWc7IOB64uo7J20IOyVhOuLkOqyveyasOulvCDtmZXsnbhcclxuICBjb25zdCBpc1NyY29sbFRvcCA9IHVzZUNhbGxiYWNrKCgpID0+IHNldElzVG9wKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPT09IDApLCBbXSk7XHJcblxyXG4gIC8vIOyKpO2BrOuhpCDsnbTrsqTtirgg65Ox66GdXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGlzU3Jjb2xsVG9wKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaXNTcmNvbGxUb3ApO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gMjAyMi8wMy8wNyAtIHRoZW1lIOuzgOqyvSAtIGJ5IDEtYmx1ZVxyXG4gIGNvbnN0IHRvZ2dsZVRoZW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0VGhlbWUocHJldiA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGhlbWVcIiwgSlNPTi5zdHJpbmdpZnkoIXByZXYpKTtcclxuICAgICAgcmV0dXJuICFwcmV2O1xyXG4gICAgfSk7XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFdyYXBwZXI+XHJcbiAgICAgIHtpc1RvcCB8fCAoXHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwic2lkZS1idXR0b24gbW92ZS10b3AtYnV0dG9uXCIgb25DbGljaz17bW92ZVNjcm9sbFRvcH0+XHJcbiAgICAgICAgICDwn5GGXHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICl9XHJcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cInNpZGUtYnV0dG9uXCIgb25DbGljaz17dG9nZ2xlVGhlbWV9PlxyXG4gICAgICAgIHtpc0RhcmsgPyBcIuKYgO+4j1wiIDogXCLwn4yZXCJ9XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9XcmFwcGVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTaWRlQmFyO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuYXNpZGU8eyBjdXJyZW50UG9zaXRpb25ZOiBudW1iZXIgfT5gXHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHotaW5kZXg6IDEwMDtcclxuICBoZWlnaHQ6IDNweDtcclxuICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnRleHRDb2xvcn07XHJcbiAgYm94LXNoYWRvdzogMCAwIDVweCBibGFjaztcclxuICBtYXJnaW46IDA7XHJcbiAgd2lkdGg6ICR7KHsgY3VycmVudFBvc2l0aW9uWSB9KSA9PiBjdXJyZW50UG9zaXRpb25ZICogMTAwfSU7XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuLy8gc3R5bGVkLWNvbXBvbmVudHNcclxuaW1wb3J0IHsgV3JhcHBlciB9IGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG5jb25zdCBDdXJyZW50UG9zaXRpb24gPSAoKSA9PiB7XHJcbiAgY29uc3QgW2N1cnJlbnRQb3NpdGlvblksIHNldEN1cnJlbnRQb3NpdGlvblldID0gdXNlU3RhdGUoMCk7XHJcblxyXG4gIC8vIO2YhOyerCDsiqTtgazroaQgWeqwkiAl66GcIOq1rO2VmOq4sFxyXG4gIGNvbnN0IHNjcm9sbEV2ZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0Q3VycmVudFBvc2l0aW9uWShcclxuICAgICAgd2luZG93LnNjcm9sbFkgLyAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpLFxyXG4gICAgKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIOyKpO2BrOuhpCDsnbTrsqTtirgg65Ox66GdXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHNjcm9sbEV2ZW50KTtcclxuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzY3JvbGxFdmVudCk7XHJcbiAgfSwgW3Njcm9sbEV2ZW50XSk7XHJcblxyXG4gIHJldHVybiA8V3JhcHBlciBjdXJyZW50UG9zaXRpb25ZPXtjdXJyZW50UG9zaXRpb25ZfSAvPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN1cnJlbnRQb3NpdGlvbjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuLy8gbmF2YmFyLCBzaWRlYmFyXHJcbmltcG9ydCBOYXZCYXIgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9OYXZCYXJcIjtcclxuaW1wb3J0IFNpZGVCYXIgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9TaWRlQmFyXCI7XHJcbmltcG9ydCBDdXJyZW50UG9zaXRpb24gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9jb21tb24vQ3VycmVudFBvc2l0aW9uXCI7XHJcblxyXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLm1haW5gYDtcclxuXHJcbnR5cGUgTGF5b3V0UHJvcHMgPSB7XHJcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcclxufTtcclxuXHJcbmNvbnN0IExheW91dCA9ICh7IGNoaWxkcmVuIH06IExheW91dFByb3BzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxDdXJyZW50UG9zaXRpb24gLz5cclxuICAgICAgPE5hdkJhciAvPlxyXG4gICAgICA8U2lkZUJhciAvPlxyXG4gICAgICA8V3JhcHBlcj57Y2hpbGRyZW59PC9XcmFwcGVyPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExheW91dDtcclxuIiwiZXhwb3J0IGVudW0gSVRFTV9LSU5EUyB7XHJcbiAgTU9WSUUgPSBcIm1vdmllXCIsXHJcbiAgVFYgPSBcInR2XCIsXHJcbn1cclxuZXhwb3J0IGVudW0gTU9WSUVfS0lORFMge1xyXG4gIFBPUFVMQVIgPSBcInBvcHVsYXJcIixcclxuICBOT1dfUExBWUlORyA9IFwibm93X3BsYXlpbmdcIixcclxuICBVUENPTUlORyA9IFwidXBjb21pbmdcIixcclxuICBUT1BfUkFURUQgPSBcInRvcF9yYXRlZFwiLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUVl9LSU5EIHtcclxuICBQT1BVTEFSID0gXCJwb3B1bGFyXCIsXHJcbiAgT05fVEhFX0FJUiA9IFwib25fdGhlX2FpclwiLFxyXG4gIFRPUF9SQVRFRCA9IFwidG9wX3JhdGVkXCIsXHJcbiAgQUlSSU5HX1RPREFZID0gXCJhaXJpbmdfdG9kYXlcIixcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSXRlbSB7XHJcbiAgYmFja2Ryb3BfcGF0aDogc3RyaW5nO1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgb3JpZ2luYWxfdGl0bGU6IHN0cmluZztcclxuICBvdmVydmlldzogc3RyaW5nO1xyXG4gIHBvc3Rlcl9wYXRoOiBzdHJpbmc7XHJcbiAgdm90ZV9hdmVyYWdlOiBudW1iZXI7XHJcblxyXG4gIC8vIOyYge2ZlCDrs4DsiJhcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIHJlbGVhc2VfZGF0ZTogc3RyaW5nO1xyXG5cclxuICAvLyBUViDtlITroZzqt7jrnqgg67OA7IiYXHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGZpcnN0X2Fpcl9kYXRlOiBzdHJpbmc7XHJcblxyXG4gIC8vIOqygOyDieq0gOugqCDrs4DsiJhcclxuICBtZWRpYV90eXBlOiBJVEVNX0tJTkRTO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgSUl0ZW1zUmVzdWx0IHtcclxuICBkYXRlczoge1xyXG4gICAgbWF4aW11bTogc3RyaW5nO1xyXG4gICAgbWluaW11bTogc3RyaW5nO1xyXG4gIH07XHJcbiAgcGFnZTogbnVtYmVyO1xyXG4gIHJlc3VsdHM6IElJdGVtW107XHJcbiAgdG90YWxfcGFnZXM6IG51bWJlcjtcclxuICB0b3RhbF9yZXN1bHRzOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURldGFpbE1vdmllIHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgb3ZlcnZpZXc6IHN0cmluZztcclxuICBiYWNrZHJvcF9wYXRoOiBzdHJpbmc7XHJcbiAgcG9zdGVyX3BhdGg6IHN0cmluZztcclxuICByZWxlYXNlX2RhdGU6IHN0cmluZztcclxuICB2b3RlX2F2ZXJhZ2U6IG51bWJlcjtcclxuICBnZW5yZXM6IHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nIH1bXTtcclxuICBydW50aW1lOiBudW1iZXI7XHJcbiAgdGFnbGluZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElEZXRhaWxUdiB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgb3ZlcnZpZXc6IHN0cmluZztcclxuICBiYWNrZHJvcF9wYXRoOiBzdHJpbmc7XHJcbiAgcG9zdGVyX3BhdGg6IHN0cmluZztcclxuICBmaXJzdF9haXJfZGF0ZTogc3RyaW5nO1xyXG4gIGxhc3RfYWlyX2RhdGU6IHN0cmluZztcclxuICB2b3RlX2F2ZXJhZ2U6IG51bWJlcjtcclxuICBnZW5yZXM6IHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nIH1bXTtcclxuICBlcGlzb2RlX3J1bl90aW1lOiBudW1iZXJbXTtcclxuICB0YWdsaW5lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNlYXJjaEl0ZW1zIHtcclxuICBwYWdlOiBudW1iZXI7XHJcbiAgcmVzdWx0czogSUl0ZW1bXTtcclxuICB0b3RhbF9wYWdlczogbnVtYmVyO1xyXG4gIHRvdGFsX3Jlc3VsdHM6IG51bWJlcjtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgaXRlbUZvcm1hdCA9ICh7IHBhdGgsIGZvcm1hdCA9IFwib3JpZ2luYWxcIiB9OiB7IHBhdGg6IHN0cmluZzsgZm9ybWF0Pzogc3RyaW5nIH0pID0+XHJcbiAgYGh0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wLyR7Zm9ybWF0fS8ke3BhdGh9YDtcclxuIiwiaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLnNlY3Rpb248eyBpbWFnZTogc3RyaW5nOyBpc0Rhcms6IGJvb2xlYW4gfT5gXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDB2aDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG5cclxuICBwYWRkaW5nOiAyZW07XHJcblxyXG4gICR7KHsgaXNEYXJrIH0pID0+XHJcbiAgICBpc0RhcmtcclxuICAgICAgPyBjc3M8eyBpbWFnZTogc3RyaW5nIH0+YFxyXG4gICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgcmdiYSgwLCAwLCAwLCAwLjQpLCByZ2JhKDAsIDAsIDAsIDApKSwgdXJsKCR7KHsgaW1hZ2UgfSkgPT4gaW1hZ2V9KTtcclxuICAgICAgICBgXHJcbiAgICAgIDogY3NzPHsgaW1hZ2U6IHN0cmluZyB9PmBcclxuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKSksXHJcbiAgICAgICAgICAgIHVybCgkeyh7IGltYWdlIH0pID0+IGltYWdlfSk7XHJcbiAgICAgICAgYH1cclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVGl0bGUgPSBzdHlsZWQuaDFgXHJcbiAgZm9udC1zaXplOiA0cmVtO1xyXG4gIG1hcmdpbi1ib3R0b206IDAuNGVtO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE92ZXJ2aWV3ID0gc3R5bGVkLnBgXHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIHdpZHRoOiA1MCU7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTZ2aDtcclxuYDtcclxuIiwiaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcclxuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkKG1vdGlvbi5zdmcpYFxyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICB0b3A6IDUwJTtcclxuICBsZWZ0OiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG4gIHdpZHRoOiAyMDBweDtcclxuICBoZWlnaHQ6IDIwMHB4O1xyXG5cclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgZmlsbDogcmdiYSg0NSwgNDksIDI1MCwgMSk7XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XHJcblxyXG5pbXBvcnQgeyBXcmFwcGVyIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IGxvZ29WYXJpZW50cyA9IHtcclxuICBpbml0aWFsOiB7IGZpbGw6IFwicmdiYSg0NSwgNDksIDI1MCwgMSlcIiB9LFxyXG4gIGFuaW1hdGU6IHtcclxuICAgIHJvdGF0ZVk6IDM2MCxcclxuICAgIHRyYW5zaXRpb246IHtcclxuICAgICAgZHVyYXRpb246IDIsXHJcbiAgICAgIHJlcGVhdDogSW5maW5pdHksXHJcbiAgICB9LFxyXG4gICAgZmlsbDogXCJyZ2JhKDQ1LCA0OSwgMjUwLCAxKVwiLFxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBMb2FkZXIgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxXcmFwcGVyIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+XHJcbiAgICAgIDxtb3Rpb24ucGF0aFxyXG4gICAgICAgIGQ9XCJNMjAsNGM4LjgsMCwxNiw3LjIsMTYsMTZzLTcuMiwxNi0xNiwxNlM0LDI4LjgsNCwyMFMxMS4yLDQsMjAsNCBNMjAsMEM5LDAsMCw5LDAsMjBzOSwyMCwyMCwyMHMyMC05LDIwLTIwUzMxLDAsMjAsMEwyMCwwelwiXHJcbiAgICAgICAgdmFyaWFudHM9e2xvZ29WYXJpZW50c31cclxuICAgICAgICBpbml0aWFsPVwiaW5pdGlhbFwiXHJcbiAgICAgICAgYW5pbWF0ZT1cImFuaW1hdGVcIlxyXG4gICAgICAvPlxyXG4gICAgICA8bW90aW9uLnRleHQgdHJhbnNmb3JtPVwibWF0cml4KDEgMCAwIDEgNS4xMDE4IDMwLjU3NzEpXCIgZm9udFNpemU9XCIzMHB4XCIgdmFyaWFudHM9e2xvZ29WYXJpZW50c30+XHJcbiAgICAgICAg77yiXHJcbiAgICAgIDwvbW90aW9uLnRleHQ+XHJcbiAgICA8L1dyYXBwZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuXHJcbi8vIHR5cGVcclxuaW1wb3J0IHsgSUl0ZW0gfSBmcm9tIFwiQHNyYy90eXBlc1wiO1xyXG5cclxuLy8gaXRlbSBoZWxwZXIgZnVuY3Rpb25cclxuaW1wb3J0IHsgaXRlbUZvcm1hdCB9IGZyb20gXCJAc3JjL3V0aWxzXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50c1xyXG5pbXBvcnQgeyBXcmFwcGVyLCBUaXRsZSwgT3ZlcnZpZXcgfSBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuLy8gY29tcG9uZW50XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9jb21tb24vTG9hZGVyXCI7XHJcblxyXG4vLyBhdG9tXHJcbmltcG9ydCB7IHRoZW1lU3RhdGUgfSBmcm9tIFwiQHNyYy9hdG9tc1wiO1xyXG5cclxuY29uc3QgQmVubmVyID0gKHsgaXRlbSB9OiB7IGl0ZW06IElJdGVtIHwgbnVsbCB9KSA9PiB7XHJcbiAgY29uc3QgaXNEYXJrID0gdXNlUmVjb2lsVmFsdWUodGhlbWVTdGF0ZSk7XHJcbiAgaWYgKCFpdGVtKSByZXR1cm4gPExvYWRlciAvPjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxXcmFwcGVyIGltYWdlPXtpdGVtRm9ybWF0KHsgcGF0aDogaXRlbS5iYWNrZHJvcF9wYXRoIH0pfSBpc0Rhcms9e2lzRGFya30+XHJcbiAgICAgIDxUaXRsZT57aXRlbS50aXRsZSB8fCBpdGVtLm5hbWV9PC9UaXRsZT5cclxuICAgICAgPE92ZXJ2aWV3PntpdGVtLm92ZXJ2aWV3fTwvT3ZlcnZpZXc+XHJcbiAgICA8L1dyYXBwZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJlbm5lcjtcclxuIiwiaW1wb3J0IHsgTU9WSUVfS0lORFMsIFRWX0tJTkQgfSBmcm9tIFwiQHNyYy90eXBlc1wiO1xyXG5cclxuY29uc3QgQVBJX0tFWSA9IHByb2Nlc3MuZW52LkFQSV9LRVk7XHJcbmNvbnN0IEJBU0VfVVJMID0gXCJodHRwczovL2FwaS50aGVtb3ZpZWRiLm9yZy8zXCI7XHJcblxyXG5pbnRlcmZhY2UgSU1vdmllc0ZldGNoZXJQcm9wcyB7XHJcbiAga2luZHM6IE1PVklFX0tJTkRTO1xyXG4gIHBhZ2U/OiBudW1iZXI7XHJcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XHJcbn1cclxuaW50ZXJmYWNlIElNb3ZpZUZldGNoZXJQcm9wcyB7XHJcbiAgbW92aWVJZDogc3RyaW5nO1xyXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSVR2c0ZldGNoZXJQcm9wcyB7XHJcbiAga2luZHM6IFRWX0tJTkQ7XHJcbiAgcGFnZT86IG51bWJlcjtcclxuICBsYW5ndWFnZT86IHN0cmluZztcclxufVxyXG5pbnRlcmZhY2UgSVR2RmV0Y2hlclByb3BzIHtcclxuICB0dklkOiBzdHJpbmc7XHJcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XHJcbn1cclxuaW50ZXJmYWNlIElTZWFyY2hGZXRjaGVyUHJvcHMge1xyXG4gIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgcGFnZT86IG51bWJlcjtcclxuICBsYW5ndWFnZT86IHN0cmluZztcclxufVxyXG5cclxuLy8g7JiB7ZmU65OkIOygleuztCDqsIDsoLjsmKTquLBcclxuZXhwb3J0IGNvbnN0IG1vdmllc0ZldGNoZXIgPSAoeyBraW5kcywgcGFnZSA9IDEsIGxhbmd1YWdlID0gXCJrby1LUlwiIH06IElNb3ZpZXNGZXRjaGVyUHJvcHMpOiBQcm9taXNlPGFueT4gPT5cclxuICBmZXRjaChgJHtCQVNFX1VSTH0vbW92aWUvJHtraW5kc30/YXBpX2tleT0ke0FQSV9LRVl9Jmxhbmd1YWdlPSR7bGFuZ3VhZ2V9JnBhZ2U9JHtwYWdlfWApLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpO1xyXG5cclxuLy8g7Yq57KCVIOyYge2ZlCDsoJXrs7Qg6rCA7KC47Jik6riwXHJcbmV4cG9ydCBjb25zdCBtb3ZpZUZldGNoZXIgPSAoeyBtb3ZpZUlkLCBsYW5ndWFnZSA9IFwia28tS1JcIiB9OiBJTW92aWVGZXRjaGVyUHJvcHMpOiBQcm9taXNlPGFueT4gPT5cclxuICBmZXRjaChgJHtCQVNFX1VSTH0vbW92aWUvJHttb3ZpZUlkfT9hcGlfa2V5PSR7QVBJX0tFWX0mbGFuZ3VhZ2U9JHtsYW5ndWFnZX1gKS50aGVuKHJlcyA9PiByZXMuanNvbigpKTtcclxuXHJcbi8vIHR27ZSE66Gc6re4656oIOygleuztCDqsIDsoLjsmKTquLBcclxuZXhwb3J0IGNvbnN0IHR2c0ZldGNoZXIgPSAoeyBraW5kcywgcGFnZSA9IDEsIGxhbmd1YWdlID0gXCJrby1LUlwiIH06IElUdnNGZXRjaGVyUHJvcHMpOiBQcm9taXNlPGFueT4gPT5cclxuICBmZXRjaChgJHtCQVNFX1VSTH0vdHYvJHtraW5kc30/YXBpX2tleT0ke0FQSV9LRVl9Jmxhbmd1YWdlPSR7bGFuZ3VhZ2V9JnBhZ2U9JHtwYWdlfWApLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpO1xyXG5cclxuLy8g7Yq57KCVIHR27ZSE66Gc6re4656oIOygleuztCDqsIDsoLjsmKTquLBcclxuZXhwb3J0IGNvbnN0IHR2RmV0Y2hlciA9ICh7IHR2SWQsIGxhbmd1YWdlID0gXCJrby1LUlwiIH06IElUdkZldGNoZXJQcm9wcyk6IFByb21pc2U8YW55PiA9PlxyXG4gIGZldGNoKGAke0JBU0VfVVJMfS90di8ke3R2SWR9P2FwaV9rZXk9JHtBUElfS0VZfSZsYW5ndWFnZT0ke2xhbmd1YWdlfWApLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpO1xyXG5cclxuLy8g6rKA7IOJXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hGZXRjaGVyID0gKHsgcXVlcnksIHBhZ2UgPSAxLCBsYW5ndWFnZSA9IFwia28tS1JcIiB9OiBJU2VhcmNoRmV0Y2hlclByb3BzKTogUHJvbWlzZTxhbnk+ID0+XHJcbiAgZmV0Y2goXHJcbiAgICBgJHtCQVNFX1VSTH0vc2VhcmNoL211bHRpP2FwaV9rZXk9JHtBUElfS0VZfSZxdWVyeT0ke3F1ZXJ5fSZsYW5ndWFnZT0ke2xhbmd1YWdlfSZwYWdlPSR7cGFnZX0maW5jbHVkZV9hZHVsdD10cnVlYCxcclxuICApLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQobW90aW9uLnNlY3Rpb24pYFxyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICB0b3A6IDEwMHB4O1xyXG4gIGxlZnQ6IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgd2lkdGg6IDQwdnc7XHJcbiAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMjAwcHgpO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuYmdDb2xvcn07XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG5cclxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XHJcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE92ZXJsYXkgPSBzdHlsZWQobW90aW9uLmRpdilgXHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiAxMDB2dztcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBNb3ZpZUltYWdlID0gc3R5bGVkKG1vdGlvbi5maWd1cmUpPHsgaW1hZ2U6IHN0cmluZyB9PmBcclxuICBoZWlnaHQ6IDUwdmg7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHsoeyBpbWFnZSB9KSA9PiBpbWFnZX0pO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1vdmllVGl0bGUgPSBzdHlsZWQuaDJgXHJcbiAgcGFkZGluZzogMC42ZW0gMWVtIDA7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTGF5b3V0RmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwYWRkaW5nOiAwIDFlbSAxZW0gMWVtO1xyXG4gIGNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnRleHRDb2xvcn07XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTW92aWVEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxyXG4gIGZsZXg6IDcgMCAwO1xyXG4gIGZvbnQtc2l6ZTogMXJlbTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBwYWRkaW5nOiAwLjZlbTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBNb3ZpZVN1YkRlc2NyaXB0aW9uID0gc3R5bGVkLnVsYFxyXG4gIGZsZXg6IDMgMCAwO1xyXG4gIHBhZGRpbmc6IDAuNGVtO1xyXG5cclxuICAmIGxpIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDAuOGVtO1xyXG5cclxuICAgICYgLm1vdmllLXN1Yi1mb250LXNpemUge1xyXG4gICAgICBmb250LXNpemU6IDAuOXJlbTtcclxuICAgIH1cclxuXHJcbiAgICAmIC5tb3ZpZS1zdWItdGl0bGUge1xyXG4gICAgICBjb2xvcjogIzc3Nzc3NztcclxuICAgIH1cclxuXHJcbiAgICAmIC5tb3ZpZS1nZW5yZSB7XHJcbiAgICAgICY6OmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiBcIiwgXCI7XHJcbiAgICAgIH1cclxuICAgICAgJjpsYXN0LWNoaWxkOjphZnRlciB7XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcclxuXHJcbi8vIHV0aWxcclxuaW1wb3J0IHsgaXRlbUZvcm1hdCB9IGZyb20gXCJAc3JjL3V0aWxzXCI7XHJcblxyXG4vLyBmZXRjaGVyXHJcbmltcG9ydCB7IG1vdmllRmV0Y2hlciwgdHZGZXRjaGVyIH0gZnJvbSBcIkBzcmMvYXBpXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50c1xyXG5pbXBvcnQgeyBXcmFwcGVyLCBPdmVybGF5LCBNb3ZpZUltYWdlLCBNb3ZpZVRpdGxlLCBNb3ZpZURlc2NyaXB0aW9uLCBMYXlvdXRGbGV4LCBNb3ZpZVN1YkRlc2NyaXB0aW9uIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8vIHR5cGVcclxuaW1wb3J0IHsgSVRFTV9LSU5EUywgSURldGFpbE1vdmllLCBJRGV0YWlsVHYgfSBmcm9tIFwiQHNyYy90eXBlc1wiO1xyXG5pbXBvcnQgeyBBbmltYXRlUHJlc2VuY2UgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5cclxuaW50ZXJmYWNlIElNb2RhbFByb3BzIHtcclxuICBraW5kczogSVRFTV9LSU5EUztcclxuICBpdGVtSWQ6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIElMb2NhdGlvblByb3BzIHtcclxuICBiYWNrZHJvcF9wYXRoOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IE1vZGFsID0gKHsga2luZHMsIGl0ZW1JZCB9OiBJTW9kYWxQcm9wcykgPT4ge1xyXG4gIC8vIDIwMjIvMDMvMDYgLSDrqqjri6zssL0g7Jik7ZSIIOyLnCDsmbjrtoDsmIHsl60g7Iqk7YGs66GkIOuBhOq4sCAtIGJ5IDEtYmx1ZVxyXG4gIHVzZUVmZmVjdCgoKTogYW55ID0+IHtcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG4gICAgcmV0dXJuICgpID0+IChkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCIpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcclxuICBjb25zdCBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlIGFzIElMb2NhdGlvblByb3BzO1xyXG4gIGNvbnN0IHsgZGF0YSB9ID0gdXNlUXVlcnk8eyBwb3N0ZXJfcGF0aDogc3RyaW5nOyBvdmVydmlldzogc3RyaW5nIH0+KFtcIm1vdmllXCIsIGl0ZW1JZF0sICgpID0+IHtcclxuICAgIHN3aXRjaCAoa2luZHMpIHtcclxuICAgICAgY2FzZSBJVEVNX0tJTkRTLk1PVklFOlxyXG4gICAgICAgIHJldHVybiBtb3ZpZUZldGNoZXIoeyBtb3ZpZUlkOiBpdGVtSWQgfSk7XHJcbiAgICAgIGNhc2UgSVRFTV9LSU5EUy5UVjpcclxuICAgICAgICByZXR1cm4gdHZGZXRjaGVyKHsgdHZJZDogaXRlbUlkIH0pO1xyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gbW92aWVGZXRjaGVyKHsgbW92aWVJZDogaXRlbUlkIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyAyMDIyLzAzLzA2IC0g7J6F66ClIOyhsOqxtOyXkCDrlLDrnbwg7IOB7IS4IOygleuztCDsu7Ttj6zrhIztirgg67CY7ZmYIC0gYnkgMS1ibHVlXHJcbiAgY29uc3Qgc3ViRGVzY3JpcHRpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGtpbmRzKSB7XHJcbiAgICAgIGNhc2UgSVRFTV9LSU5EUy5NT1ZJRTpcclxuICAgICAgICBjb25zdCBtb3ZpZSA9IGRhdGEgYXMgSURldGFpbE1vdmllO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICA8PlxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibW92aWUtc3ViLXRpdGxlXCI+7J6l66W0OiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAge21vdmllPy5nZW5yZXMubWFwKGdlbnJlID0+IChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17Z2VucmUuaWR9IGNsYXNzTmFtZT1cIm1vdmllLWdlbnJlIG1vdmllLXN1Yi1mb250LXNpemVcIj5cclxuICAgICAgICAgICAgICAgICAge2dlbnJlLm5hbWV9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb3ZpZS1zdWItdGl0bGVcIj7rn7Dtg4DsnoQ6IDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb3ZpZS1zdWItZm9udC1zaXplXCI+e21vdmllPy5ydW50aW1lfeu2hDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vdmllLXN1Yi10aXRsZVwiPuqwnOu0ieydvDogPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vdmllLXN1Yi1mb250LXNpemVcIj57bW92aWU/LnJlbGVhc2VfZGF0ZX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb3ZpZS1zdWItdGl0bGVcIj7tj4nsoJA6IDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb3ZpZS1zdWItZm9udC1zaXplXCI+e21vdmllPy52b3RlX2F2ZXJhZ2V9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPC8+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNhc2UgSVRFTV9LSU5EUy5UVjpcclxuICAgICAgICBjb25zdCB0diA9IGRhdGEgYXMgSURldGFpbFR2O1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICA8PlxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibW92aWUtc3ViLXRpdGxlXCI+7J6l66W0OiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAge3R2Py5nZW5yZXMubWFwKGdlbnJlID0+IChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17Z2VucmUuaWR9IGNsYXNzTmFtZT1cIm1vdmllLWdlbnJlXCI+XHJcbiAgICAgICAgICAgICAgICAgIHtnZW5yZS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibW92aWUtc3ViLXRpdGxlXCI+65+w7YOA7J6EOiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAge3R2Py5lcGlzb2RlX3J1bl90aW1lfeu2hFxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibW92aWUtc3ViLXRpdGxlXCI+6rCc67SJ7J28OiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAge3R2Py5maXJzdF9haXJfZGF0ZX1cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vdmllLXN1Yi10aXRsZVwiPu2PieygkDogPC9zcGFuPlxyXG4gICAgICAgICAgICAgIHt0dj8udm90ZV9hdmVyYWdlfVxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPC8+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfSwgW2tpbmRzLCBkYXRhXSk7XHJcblxyXG4gIC8vIDIwMjIvMDMvMDYgLSBiYWNrIHRvIHRoZSBob21lIC0gYnkgMS1ibHVlXHJcbiAgY29uc3QgY2xvc2VNb2RhbCA9IHVzZUNhbGxiYWNrKCgpID0+IG5hdmlnYXRlKC0xKSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPE92ZXJsYXkgb25DbGljaz17Y2xvc2VNb2RhbH0gaW5pdGlhbD17eyBvcGFjaXR5OiAwIH19IGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fSBleGl0PXt7IG9wYWNpdHk6IDAgfX0gLz5cclxuXHJcbiAgICAgIDxXcmFwcGVyIGxheW91dElkPXtpdGVtSWQgKyBzdGF0ZS5pZGVudGlmaWVyfT5cclxuICAgICAgICA8TW92aWVJbWFnZSBpbWFnZT17aXRlbUZvcm1hdCh7IHBhdGg6IGRhdGE/LnBvc3Rlcl9wYXRoIHx8IHN0YXRlLmJhY2tkcm9wX3BhdGggfSl9IC8+XHJcbiAgICAgICAgPE1vdmllVGl0bGU+e3N0YXRlLnRpdGxlfTwvTW92aWVUaXRsZT5cclxuICAgICAgICA8TGF5b3V0RmxleD5cclxuICAgICAgICAgIDxNb3ZpZURlc2NyaXB0aW9uPntkYXRhPy5vdmVydmlld308L01vdmllRGVzY3JpcHRpb24+XHJcbiAgICAgICAgICA8TW92aWVTdWJEZXNjcmlwdGlvbj57c3ViRGVzY3JpcHRpb24oKX08L01vdmllU3ViRGVzY3JpcHRpb24+XHJcbiAgICAgICAgPC9MYXlvdXRGbGV4PlxyXG4gICAgICA8L1dyYXBwZXI+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XHJcbiIsImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuXG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gICAgdmFyIGlzTW91bnRlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBpc01vdW50ZWQ7XG59XG5cbmV4cG9ydCB7IHVzZUlzTW91bnRlZCB9O1xuIiwiaW1wb3J0IHsgX192YWx1ZXMgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pZC5tanMnO1xuXG52YXIgUHJlc2VuY2VDaGlsZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBpbml0aWFsID0gX2EuaW5pdGlhbCwgaXNQcmVzZW50ID0gX2EuaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSA9IF9hLm9uRXhpdENvbXBsZXRlLCBjdXN0b20gPSBfYS5jdXN0b20sIHByZXNlbmNlQWZmZWN0c0xheW91dCA9IF9hLnByZXNlbmNlQWZmZWN0c0xheW91dDtcbiAgICB2YXIgcHJlc2VuY2VDaGlsZHJlbiA9IHVzZUNvbnN0YW50KG5ld0NoaWxkcmVuTWFwKTtcbiAgICB2YXIgaWQgPSB1c2VJZCgpO1xuICAgIHZhciBjb250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGluaXRpYWw6IGluaXRpYWwsXG4gICAgICAgIGlzUHJlc2VudDogaXNQcmVzZW50LFxuICAgICAgICBjdXN0b206IGN1c3RvbSxcbiAgICAgICAgb25FeGl0Q29tcGxldGU6IGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGNoaWxkSWQsIHRydWUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHByZXNlbmNlQ2hpbGRyZW4udmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NvbXBsZXRlID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNDb21wbGV0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gY2FuIHN0b3Agc2VhcmNoaW5nIHdoZW4gYW55IGlzIGluY29tcGxldGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbkV4aXRDb21wbGV0ZSA9PT0gbnVsbCB8fCBvbkV4aXRDb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FeGl0Q29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLnNldChjaGlsZElkLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJlc2VuY2VDaGlsZHJlbi5kZWxldGUoY2hpbGRJZCk7IH07XG4gICAgICAgIH0sXG4gICAgfSk7IH0sIFxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwcmVzZW5jZSBvZiBhIGNoaWxkIGFmZmVjdHMgdGhlIGxheW91dCBvZiB0aGUgY29tcG9uZW50cyBhcm91bmQgaXQsXG4gICAgICogd2Ugd2FudCB0byBtYWtlIGEgbmV3IGNvbnRleHQgdmFsdWUgdG8gZW5zdXJlIHRoZXkgZ2V0IHJlLXJlbmRlcmVkXG4gICAgICogc28gdGhleSBjYW4gZGV0ZWN0IHRoYXQgbGF5b3V0IGNoYW5nZS5cbiAgICAgKi9cbiAgICBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgPyB1bmRlZmluZWQgOiBbaXNQcmVzZW50XSk7XG4gICAgdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IHJldHVybiBwcmVzZW5jZUNoaWxkcmVuLnNldChrZXksIGZhbHNlKTsgfSk7XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIC8qKlxuICAgICAqIElmIHRoZXJlJ3Mgbm8gYG1vdGlvbmAgY29tcG9uZW50cyB0byBmaXJlIGV4aXQgYW5pbWF0aW9ucywgd2Ugd2FudCB0byByZW1vdmUgdGhpc1xuICAgICAqIGNvbXBvbmVudCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAhaXNQcmVzZW50ICYmICFwcmVzZW5jZUNoaWxkcmVuLnNpemUgJiYgKG9uRXhpdENvbXBsZXRlID09PSBudWxsIHx8IG9uRXhpdENvbXBsZXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkV4aXRDb21wbGV0ZSgpKTtcbiAgICB9LCBbaXNQcmVzZW50XSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCBjaGlsZHJlbikpO1xufTtcbmZ1bmN0aW9uIG5ld0NoaWxkcmVuTWFwKCkge1xuICAgIHJldHVybiBuZXcgTWFwKCk7XG59XG5cbmV4cG9ydCB7IFByZXNlbmNlQ2hpbGQgfTtcbiIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gJ3RzbGliJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVJlZiwgY2xvbmVFbGVtZW50LCBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGb3JjZVVwZGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1mb3JjZS11cGRhdGUubWpzJztcbmltcG9ydCB7IHVzZUlzTW91bnRlZCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pcy1tb3VudGVkLm1qcyc7XG5pbXBvcnQgeyBQcmVzZW5jZUNoaWxkIH0gZnJvbSAnLi9QcmVzZW5jZUNoaWxkLm1qcyc7XG5pbXBvcnQgeyBMYXlvdXRHcm91cENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgdXNlVW5tb3VudEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMnO1xuXG52YXIgZ2V0Q2hpbGRLZXkgPSBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLmtleSB8fCBcIlwiOyB9O1xudmFyIGlzRGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xuZnVuY3Rpb24gdXBkYXRlQ2hpbGRMb29rdXAoY2hpbGRyZW4sIGFsbENoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5DaGlsZHJlbiA9IGlzRGV2ID8gbmV3IFNldCgpIDogbnVsbDtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIga2V5ID0gZ2V0Q2hpbGRLZXkoY2hpbGQpO1xuICAgICAgICBpZiAoaXNEZXYgJiYgc2VlbkNoaWxkcmVuICYmIHNlZW5DaGlsZHJlbi5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ2hpbGRyZW4gb2YgQW5pbWF0ZVByZXNlbmNlIHJlcXVpcmUgdW5pcXVlIGtleXMuIFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgaXMgYSBkdXBsaWNhdGUuXCIpKTtcbiAgICAgICAgICAgIHNlZW5DaGlsZHJlbi5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBhbGxDaGlsZHJlbi5zZXQoa2V5LCBjaGlsZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBvbmx5RWxlbWVudHMoY2hpbGRyZW4pIHtcbiAgICB2YXIgZmlsdGVyZWQgPSBbXTtcbiAgICAvLyBXZSB1c2UgZm9yRWFjaCBoZXJlIGluc3RlYWQgb2YgbWFwIGFzIG1hcCBtdXRhdGVzIHRoZSBjb21wb25lbnQga2V5IGJ5IHByZXByZW5kaW5nIGAuJGBcbiAgICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSlcbiAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goY2hpbGQpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbi8qKlxuICogYEFuaW1hdGVQcmVzZW5jZWAgZW5hYmxlcyB0aGUgYW5pbWF0aW9uIG9mIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSB0cmVlLlxuICpcbiAqIFdoZW4gYWRkaW5nL3JlbW92aW5nIG1vcmUgdGhhbiBhIHNpbmdsZSBjaGlsZCwgZXZlcnkgY2hpbGQgKiptdXN0KiogYmUgZ2l2ZW4gYSB1bmlxdWUgYGtleWAgcHJvcC5cbiAqXG4gKiBBbnkgYG1vdGlvbmAgY29tcG9uZW50cyB0aGF0IGhhdmUgYW4gYGV4aXRgIHByb3BlcnR5IGRlZmluZWQgd2lsbCBhbmltYXRlIG91dCB3aGVuIHJlbW92ZWQgZnJvbVxuICogdGhlIHRyZWUuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBtb3Rpb24sIEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nXG4gKlxuICogZXhwb3J0IGNvbnN0IEl0ZW1zID0gKHsgaXRlbXMgfSkgPT4gKFxuICogICA8QW5pbWF0ZVByZXNlbmNlPlxuICogICAgIHtpdGVtcy5tYXAoaXRlbSA9PiAoXG4gKiAgICAgICA8bW90aW9uLmRpdlxuICogICAgICAgICBrZXk9e2l0ZW0uaWR9XG4gKiAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICogICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEgfX1cbiAqICAgICAgICAgZXhpdD17eyBvcGFjaXR5OiAwIH19XG4gKiAgICAgICAvPlxuICogICAgICkpfVxuICogICA8L0FuaW1hdGVQcmVzZW5jZT5cbiAqIClcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gc2VxdWVuY2UgZXhpdCBhbmltYXRpb25zIHRocm91Z2hvdXQgYSB0cmVlIHVzaW5nIHZhcmlhbnRzLlxuICpcbiAqIElmIGEgY2hpbGQgY29udGFpbnMgbXVsdGlwbGUgYG1vdGlvbmAgY29tcG9uZW50cyB3aXRoIGBleGl0YCBwcm9wcywgaXQgd2lsbCBvbmx5IHVubW91bnQgdGhlIGNoaWxkXG4gKiBvbmNlIGFsbCBgbW90aW9uYCBjb21wb25lbnRzIGhhdmUgZmluaXNoZWQgYW5pbWF0aW5nIG91dC4gTGlrZXdpc2UsIGFueSBjb21wb25lbnRzIHVzaW5nXG4gKiBgdXNlUHJlc2VuY2VgIGFsbCBuZWVkIHRvIGNhbGwgYHNhZmVUb1JlbW92ZWAuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgQW5pbWF0ZVByZXNlbmNlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGN1c3RvbSA9IF9hLmN1c3RvbSwgX2IgPSBfYS5pbml0aWFsLCBpbml0aWFsID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgb25FeGl0Q29tcGxldGUgPSBfYS5vbkV4aXRDb21wbGV0ZSwgZXhpdEJlZm9yZUVudGVyID0gX2EuZXhpdEJlZm9yZUVudGVyLCBfYyA9IF9hLnByZXNlbmNlQWZmZWN0c0xheW91dCwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0ID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYztcbiAgICAvLyBXZSB3YW50IHRvIGZvcmNlIGEgcmUtcmVuZGVyIG9uY2UgYWxsIGV4aXRpbmcgYW5pbWF0aW9ucyBoYXZlIGZpbmlzaGVkLiBXZVxuICAgIC8vIGVpdGhlciB1c2UgYSBsb2NhbCBmb3JjZVJlbmRlciBmdW5jdGlvbiwgb3Igb25lIGZyb20gYSBwYXJlbnQgY29udGV4dCBpZiBpdCBleGlzdHMuXG4gICAgdmFyIF9kID0gX19yZWFkKHVzZUZvcmNlVXBkYXRlKCksIDEpLCBmb3JjZVJlbmRlciA9IF9kWzBdO1xuICAgIHZhciBmb3JjZVJlbmRlckxheW91dEdyb3VwID0gdXNlQ29udGV4dChMYXlvdXRHcm91cENvbnRleHQpLmZvcmNlUmVuZGVyO1xuICAgIGlmIChmb3JjZVJlbmRlckxheW91dEdyb3VwKVxuICAgICAgICBmb3JjZVJlbmRlciA9IGZvcmNlUmVuZGVyTGF5b3V0R3JvdXA7XG4gICAgdmFyIGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICAgIC8vIEZpbHRlciBvdXQgYW55IGNoaWxkcmVuIHRoYXQgYXJlbid0IFJlYWN0RWxlbWVudHMuIFdlIGNhbiBvbmx5IHRyYWNrIFJlYWN0RWxlbWVudHMgd2l0aCBhIHByb3BzLmtleVxuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gb25seUVsZW1lbnRzKGNoaWxkcmVuKTtcbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IGZpbHRlcmVkQ2hpbGRyZW47XG4gICAgdmFyIGV4aXRpbmcgPSBuZXcgU2V0KCk7XG4gICAgLy8gS2VlcCBhIGxpdmluZyByZWNvcmQgb2YgdGhlIGNoaWxkcmVuIHdlJ3JlIGFjdHVhbGx5IHJlbmRlcmluZyBzbyB3ZVxuICAgIC8vIGNhbiBkaWZmIHRvIGZpZ3VyZSBvdXQgd2hpY2ggYXJlIGVudGVyaW5nIGFuZCBleGl0aW5nXG4gICAgdmFyIHByZXNlbnRDaGlsZHJlbiA9IHVzZVJlZihjaGlsZHJlblRvUmVuZGVyKTtcbiAgICAvLyBBIGxvb2t1cCB0YWJsZSB0byBxdWlja2x5IHJlZmVyZW5jZSBjb21wb25lbnRzIGJ5IGtleVxuICAgIHZhciBhbGxDaGlsZHJlbiA9IHVzZVJlZihuZXcgTWFwKCkpLmN1cnJlbnQ7XG4gICAgLy8gSWYgdGhpcyBpcyB0aGUgaW5pdGlhbCBjb21wb25lbnQgcmVuZGVyLCBqdXN0IGRlYWwgd2l0aCBsb2dpYyBzdXJyb3VuZGluZyB3aGV0aGVyXG4gICAgLy8gd2UgcGxheSBvbk1vdW50IGFuaW1hdGlvbnMgb3Igbm90LlxuICAgIHZhciBpc0luaXRpYWxSZW5kZXIgPSB1c2VSZWYodHJ1ZSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzSW5pdGlhbFJlbmRlci5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHVwZGF0ZUNoaWxkTG9va3VwKGZpbHRlcmVkQ2hpbGRyZW4sIGFsbENoaWxkcmVuKTtcbiAgICAgICAgcHJlc2VudENoaWxkcmVuLmN1cnJlbnQgPSBjaGlsZHJlblRvUmVuZGVyO1xuICAgIH0pO1xuICAgIHVzZVVubW91bnRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpc0luaXRpYWxSZW5kZXIuY3VycmVudCA9IHRydWU7XG4gICAgICAgIGFsbENoaWxkcmVuLmNsZWFyKCk7XG4gICAgICAgIGV4aXRpbmcuY2xlYXIoKTtcbiAgICB9KTtcbiAgICBpZiAoaXNJbml0aWFsUmVuZGVyLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlblRvUmVuZGVyLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ2hpbGQsIHsga2V5OiBnZXRDaGlsZEtleShjaGlsZCksIGlzUHJlc2VudDogdHJ1ZSwgaW5pdGlhbDogaW5pdGlhbCA/IHVuZGVmaW5lZCA6IGZhbHNlLCBwcmVzZW5jZUFmZmVjdHNMYXlvdXQ6IHByZXNlbmNlQWZmZWN0c0xheW91dCB9LCBjaGlsZCkpOyB9KSkpO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGEgc3Vic2VxdWVudCByZW5kZXIsIGRlYWwgd2l0aCBlbnRlcmluZyBhbmQgZXhpdGluZyBjaGlsZHJlblxuICAgIGNoaWxkcmVuVG9SZW5kZXIgPSBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoY2hpbGRyZW5Ub1JlbmRlciksIGZhbHNlKTtcbiAgICAvLyBEaWZmIHRoZSBrZXlzIG9mIHRoZSBjdXJyZW50bHktcHJlc2VudCBhbmQgdGFyZ2V0IGNoaWxkcmVuIHRvIHVwZGF0ZSBvdXJcbiAgICAvLyBleGl0aW5nIGxpc3QuXG4gICAgdmFyIHByZXNlbnRLZXlzID0gcHJlc2VudENoaWxkcmVuLmN1cnJlbnQubWFwKGdldENoaWxkS2V5KTtcbiAgICB2YXIgdGFyZ2V0S2V5cyA9IGZpbHRlcmVkQ2hpbGRyZW4ubWFwKGdldENoaWxkS2V5KTtcbiAgICAvLyBEaWZmIHRoZSBwcmVzZW50IGNoaWxkcmVuIHdpdGggb3VyIHRhcmdldCBjaGlsZHJlbiBhbmQgbWFyayB0aG9zZSB0aGF0IGFyZSBleGl0aW5nXG4gICAgdmFyIG51bVByZXNlbnQgPSBwcmVzZW50S2V5cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1QcmVzZW50OyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHByZXNlbnRLZXlzW2ldO1xuICAgICAgICBpZiAodGFyZ2V0S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICBleGl0aW5nLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIHdlIGN1cnJlbnRseSBoYXZlIGV4aXRpbmcgY2hpbGRyZW4sIGFuZCB3ZSdyZSBkZWZlcnJpbmcgcmVuZGVyaW5nIGluY29taW5nIGNoaWxkcmVuXG4gICAgLy8gdW50aWwgYWZ0ZXIgYWxsIGN1cnJlbnQgY2hpbGRyZW4gaGF2ZSBleGl0aW5nLCBlbXB0eSB0aGUgY2hpbGRyZW5Ub1JlbmRlciBhcnJheVxuICAgIGlmIChleGl0QmVmb3JlRW50ZXIgJiYgZXhpdGluZy5zaXplKSB7XG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIgPSBbXTtcbiAgICB9XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBjdXJyZW50bHkgZXhpdGluZyBjb21wb25lbnRzIGFuZCBjbG9uZSB0aGVtIHRvIG92ZXJ3cml0ZSBgYW5pbWF0ZWBcbiAgICAvLyB3aXRoIGFueSBgZXhpdGAgcHJvcCB0aGV5IG1pZ2h0IGhhdmUgZGVmaW5lZC5cbiAgICBleGl0aW5nLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBhY3R1YWxseSBlbnRlcmluZyBhZ2FpbiwgZWFybHkgcmV0dXJuXG4gICAgICAgIGlmICh0YXJnZXRLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBjaGlsZCA9IGFsbENoaWxkcmVuLmdldChrZXkpO1xuICAgICAgICBpZiAoIWNoaWxkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaW5zZXJ0aW9uSW5kZXggPSBwcmVzZW50S2V5cy5pbmRleE9mKGtleSk7XG4gICAgICAgIHZhciBvbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhbGxDaGlsZHJlbi5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGV4aXRpbmcuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyBjaGlsZCBmcm9tIHRoZSBwcmVzZW50IGNoaWxkcmVuXG4gICAgICAgICAgICB2YXIgcmVtb3ZlSW5kZXggPSBwcmVzZW50Q2hpbGRyZW4uY3VycmVudC5maW5kSW5kZXgoZnVuY3Rpb24gKHByZXNlbnRDaGlsZCkgeyByZXR1cm4gcHJlc2VudENoaWxkLmtleSA9PT0ga2V5OyB9KTtcbiAgICAgICAgICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50LnNwbGljZShyZW1vdmVJbmRleCwgMSk7XG4gICAgICAgICAgICAvLyBEZWZlciByZS1yZW5kZXJpbmcgdW50aWwgYWxsIGV4aXRpbmcgY2hpbGRyZW4gaGF2ZSBpbmRlZWQgbGVmdFxuICAgICAgICAgICAgaWYgKCFleGl0aW5nLnNpemUpIHtcbiAgICAgICAgICAgICAgICBwcmVzZW50Q2hpbGRyZW4uY3VycmVudCA9IGZpbHRlcmVkQ2hpbGRyZW47XG4gICAgICAgICAgICAgICAgaWYgKGlzTW91bnRlZC5jdXJyZW50ID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgb25FeGl0Q29tcGxldGUgJiYgb25FeGl0Q29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5zcGxpY2UoaW5zZXJ0aW9uSW5kZXgsIDAsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJlc2VuY2VDaGlsZCwgeyBrZXk6IGdldENoaWxkS2V5KGNoaWxkKSwgaXNQcmVzZW50OiBmYWxzZSwgb25FeGl0Q29tcGxldGU6IG9uRXhpdCwgY3VzdG9tOiBjdXN0b20sIHByZXNlbmNlQWZmZWN0c0xheW91dDogcHJlc2VuY2VBZmZlY3RzTGF5b3V0IH0sIGNoaWxkKSk7XG4gICAgfSk7XG4gICAgLy8gQWRkIGBNb3Rpb25Db250ZXh0YCBldmVuIHRvIGNoaWxkcmVuIHRoYXQgZG9uJ3QgbmVlZCBpdCB0byBlbnN1cmUgd2UncmUgcmVuZGVyaW5nXG4gICAgLy8gdGhlIHNhbWUgdHJlZSBiZXR3ZWVuIHJlbmRlcnNcbiAgICBjaGlsZHJlblRvUmVuZGVyID0gY2hpbGRyZW5Ub1JlbmRlci5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgIHJldHVybiBleGl0aW5nLmhhcyhrZXkpID8gKGNoaWxkKSA6IChSZWFjdC5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ2hpbGQsIHsga2V5OiBnZXRDaGlsZEtleShjaGlsZCksIGlzUHJlc2VudDogdHJ1ZSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0OiBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgfSwgY2hpbGQpKTtcbiAgICB9KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIGV4aXRCZWZvcmVFbnRlciAmJlxuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gYW5pbWF0ZSBtdWx0aXBsZSBjaGlsZHJlbiB3aXRoaW4gQW5pbWF0ZVByZXNlbmNlLCBidXQgaXRzIGV4aXRCZWZvcmVFbnRlciBwcm9wIGlzIHNldCB0byB0cnVlLiBUaGlzIHdpbGwgbGVhZCB0byBvZGQgdmlzdWFsIGJlaGF2aW91ci5cIik7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgZXhpdGluZy5zaXplXG4gICAgICAgID8gY2hpbGRyZW5Ub1JlbmRlclxuICAgICAgICA6IGNoaWxkcmVuVG9SZW5kZXIubWFwKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkKTsgfSkpKTtcbn07XG5cbmV4cG9ydCB7IEFuaW1hdGVQcmVzZW5jZSB9O1xuIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHN5bmMgZnJvbSAnZnJhbWVzeW5jJztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzTW91bnRlZCB9IGZyb20gJy4vdXNlLWlzLW1vdW50ZWQubWpzJztcblxuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgdmFyIGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICAgIHZhciBfYSA9IF9fcmVhZCh1c2VTdGF0ZSgwKSwgMiksIGZvcmNlZFJlbmRlckNvdW50ID0gX2FbMF0sIHNldEZvcmNlZFJlbmRlckNvdW50ID0gX2FbMV07XG4gICAgdmFyIGZvcmNlUmVuZGVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCAmJiBzZXRGb3JjZWRSZW5kZXJDb3VudChmb3JjZWRSZW5kZXJDb3VudCArIDEpO1xuICAgIH0sIFtmb3JjZWRSZW5kZXJDb3VudF0pO1xuICAgIC8qKlxuICAgICAqIERlZmVyIHRoaXMgdG8gdGhlIGVuZCBvZiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUgaW4gY2FzZSB0aGVyZSBhcmUgbXVsdGlwbGVcbiAgICAgKiBzeW5jaHJvbm91cyBjYWxscy5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXJyZWRGb3JjZVJlbmRlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN5bmMucG9zdFJlbmRlcihmb3JjZVJlbmRlcik7IH0sIFtmb3JjZVJlbmRlcl0pO1xuICAgIHJldHVybiBbZGVmZXJyZWRGb3JjZVJlbmRlciwgZm9yY2VkUmVuZGVyQ291bnRdO1xufVxuXG5leHBvcnQgeyB1c2VGb3JjZVVwZGF0ZSB9O1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkKG1vdGlvbi5zZWN0aW9uKWBcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdG9wOiAtMTAwcHg7XHJcbiAgbWFyZ2luOiAwIDgwcHggMjgwcHg7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ2Fyb3VzZWxUaXRsZSA9IHN0eWxlZC5oMmBcclxuICBtYXJnaW4tYm90dG9tOiAwLjZlbTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBSb3cgPSBzdHlsZWQobW90aW9uLmRpdilgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNiwgMWZyKTtcclxuICBnYXA6IDEwcHg7XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQm94ID0gc3R5bGVkKG1vdGlvbi5kaXYpYFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgbGVmdDtcclxuICB9XHJcbiAgJjpsYXN0LWNoaWxkIHtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciByaWdodDtcclxuICB9XHJcblxyXG4gICYgc3BhbjpsYXN0LWNoaWxkIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCA0cHggNHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBJbWFnZSA9IHN0eWxlZChtb3Rpb24uZmlndXJlKTx7IGltYWdlOiBzdHJpbmcgfT5gXHJcbiAgaGVpZ2h0OiAyMDBweDtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHsoeyBpbWFnZSB9KSA9PiBpbWFnZX0pO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBJbmZvID0gc3R5bGVkKG1vdGlvbi5kaXYpYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBib3R0b206IDA7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuYmdDb2xvcn07XHJcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICBvcGFjaXR5OiAwO1xyXG4gIHBhZGRpbmc6IDAuNmVtO1xyXG5cclxuICAmIHNwYW4ge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwLjRlbTtcclxuXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJiAudGl0bGUge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwLjRlbTtcclxuICB9XHJcblxyXG4gICYgLnJlbGVhc2UtZGF0ZSxcclxuICAudm90ZS1hdmVyYWdlIHtcclxuICAgIGZvbnQtc2l6ZTogMC43cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5leHRCdXR0b24gPSBzdHlsZWQobW90aW9uLmJ1dHRvbilgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHJpZ2h0OiAtODBweDtcclxuICB3aWR0aDogODBweDtcclxuICBoZWlnaHQ6IDIwMHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcclxuICBmb250LXNpemU6IDMwcHg7XHJcbiAgb3BhY2l0eTogMDtcclxuYDtcclxuZXhwb3J0IGNvbnN0IFByZXZCdXR0b24gPSBzdHlsZWQobW90aW9uLmJ1dHRvbilgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIGxlZnQ6IC04MHB4O1xyXG4gIHdpZHRoOiA4MHB4O1xyXG4gIGhlaWdodDogMjAwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpO1xyXG4gIGZvbnQtc2l6ZTogMzBweDtcclxuICBvcGFjaXR5OiAwO1xyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlLCB1c2VMb2NhdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XHJcblxyXG4vLyB0eXBlc1xyXG5pbXBvcnQgeyBJSXRlbSwgSVRFTV9LSU5EUyB9IGZyb20gXCJAc3JjL3R5cGVzXCI7XHJcblxyXG4vLyBzdHlsZWQtY29tcG9uZW50XHJcbmltcG9ydCB7IFdyYXBwZXIsIFJvdywgQm94LCBJbWFnZSwgSW5mbywgTmV4dEJ1dHRvbiwgUHJldkJ1dHRvbiwgQ2Fyb3VzZWxUaXRsZSB9IGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG4vLyB1dGlsXHJcbmltcG9ydCB7IGl0ZW1Gb3JtYXQgfSBmcm9tIFwiQHNyYy91dGlsc1wiO1xyXG5cclxuY29uc3QgY2Fyb3VzZWxWYXJpYW50cyA9IHtcclxuICBpbml0aWFsOiAoaXNSaWdodDogYm9vbGVhbikgPT4gKHtcclxuICAgIHg6IGlzUmlnaHQgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IC13aW5kb3cuaW5uZXJXaWR0aCxcclxuICB9KSxcclxuICBhbmltYXRlOiB7XHJcbiAgICB4OiAwLFxyXG4gIH0sXHJcbiAgZXhpdDogKGlzUmlnaHQ6IGJvb2xlYW4pID0+ICh7XHJcbiAgICB4OiBpc1JpZ2h0ID8gLXdpbmRvdy5pbm5lcldpZHRoIDogd2luZG93LmlubmVyV2lkdGgsXHJcbiAgfSksXHJcbn07XHJcbmNvbnN0IGJveFZhcmlhbnRzID0ge1xyXG4gIGhvdmVyOiB7XHJcbiAgICBzY2FsZTogMS40LFxyXG4gICAgeTogLTQwLFxyXG4gICAgYm94U2hhZG93OiBcIjAgMCAxMHB4IGJsYWNrXCIsXHJcbiAgICB6SW5kZXg6IDEsXHJcbiAgICBib3JkZXJSYWRpdXM6IFwiNHB4XCIsXHJcbiAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgIHR5cGU6IFwidHdlZW5cIixcclxuICAgICAgZGVsYXk6IDAuNCxcclxuICAgICAgZHVyYXRpb246IDAuNCxcclxuICAgIH0sXHJcbiAgfSxcclxufTtcclxuY29uc3QgaW5mb1ZhcmlhbnRzID0ge1xyXG4gIGhvdmVyOiB7XHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gICAgdHJhbnNpdGlvbjoge1xyXG4gICAgICB0eXBlOiBcInR3ZWVuXCIsXHJcbiAgICAgIGRlbGF5OiAwLjQsXHJcbiAgICAgIGR1cmF0aW9uOiAwLjQsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBvZmZzZXQgPSA2O1xyXG5cclxuY29uc3QgQ2Fyb3VzZWwgPSAoeyBraW5kcywgdGl0bGUsIGl0ZW1zIH06IHsga2luZHM6IElURU1fS0lORFM7IHRpdGxlOiBzdHJpbmc7IGl0ZW1zOiBJSXRlbVtdIH0pID0+IHtcclxuICBjb25zdCB7IHBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpOyAvLyBwYXRo66W8IOq4sOykgOycvOuhnCDrqqjri6zssL3snYQg67O07Jes7KO86riwIOuVjOusuOyXkCDtmITsnqwg7JyE7LmY6rCAIGhvbWXsnbjsp4Ag64uk66W4IOuUlO2FjOydvCDtjpjsnbTsp4Dsnbjsp4Ag7YyQ64uo7ZWY6riwIOychO2VtCDsgqzsmqntlZjripQg67OA7IiYXHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IFtpbmRleCwgc2V0SW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcclxuICBjb25zdCBbZG9pbmcsIHNldERvaW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBbaXNSaWdodCwgc2V0SXNSaWdodF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgaWRlbnRpZmllciA9IHRpdGxlICsgcGF0aG5hbWU7XHJcblxyXG4gIC8vIDIwMjIvMDMvMDUgLSDsnbjrjbHsiqQg7Kad6rCAL+qwkOyGjCAtIGJ5IDEtYmx1ZVxyXG4gIGNvbnN0IGluY3JlYXNlSW5kZXggPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBpZiAoZG9pbmcpIHJldHVybjtcclxuICAgIHNldERvaW5nKHRydWUpO1xyXG4gICAgc2V0SXNSaWdodCh0cnVlKTtcclxuXHJcbiAgICBjb25zdCBwb2ludCA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyBvZmZzZXQpO1xyXG5cclxuICAgIHNldEluZGV4KHByZXYgPT4gKHBvaW50IDw9IHByZXYgKyAxID8gMCA6IHByZXYgKyAxKSk7XHJcbiAgfSwgW2RvaW5nXSk7XHJcbiAgY29uc3QgZGVjcmVhc2VJbmRleCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGlmIChkb2luZykgcmV0dXJuO1xyXG4gICAgc2V0RG9pbmcodHJ1ZSk7XHJcbiAgICBzZXRJc1JpZ2h0KGZhbHNlKTtcclxuXHJcbiAgICBjb25zdCBwb2ludCA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyBvZmZzZXQpO1xyXG5cclxuICAgIHNldEluZGV4KHByZXYgPT4gKC0xID49IHByZXYgLSAxID8gcG9pbnQgLSAxIDogcHJldiAtIDEpKTtcclxuICB9LCBbaXRlbXMsIGRvaW5nXSk7XHJcblxyXG4gIC8vIDIwMjIvMDMvMDYgLSBzaG93IG1vdmllIG1vZGVsIC0gYnkgMS1ibHVlXHJcbiAgY29uc3Qgc2hvd01vZGVsID0gdXNlQ2FsbGJhY2soXHJcbiAgICAoaXRlbUlkOiBudW1iZXIsIGJhY2tkcm9wX3BhdGg6IHN0cmluZywgdGl0bGU6IHN0cmluZywgbWVkaWFfdHlwZTogc3RyaW5nKSA9PiAoKSA9PiB7XHJcbiAgICAgIGlmIChwYXRobmFtZS5pbmNsdWRlcyhcIi9zZWFyY2hcIikpXHJcbiAgICAgICAgbmF2aWdhdGUoYCR7cGF0aG5hbWV9LyR7aXRlbUlkfWAsIHsgc3RhdGU6IHsgYmFja2Ryb3BfcGF0aCwgdGl0bGUsIGlkZW50aWZpZXIsIG1lZGlhX3R5cGUgfSB9KTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIG5hdmlnYXRlKGAvJHtraW5kc30ke3BhdGhuYW1lID09PSBcIi9cIiA/IFwiXCIgOiBcInNcIn0vJHtpdGVtSWR9YCwgeyBzdGF0ZTogeyBiYWNrZHJvcF9wYXRoLCB0aXRsZSwgaWRlbnRpZmllciB9IH0pO1xyXG4gICAgfSxcclxuICAgIFtwYXRobmFtZSwgaWRlbnRpZmllcl0sXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxXcmFwcGVyPlxyXG4gICAgICA8Q2Fyb3VzZWxUaXRsZT57dGl0bGV9PC9DYXJvdXNlbFRpdGxlPlxyXG4gICAgICA8QW5pbWF0ZVByZXNlbmNlIGluaXRpYWw9e2ZhbHNlfSBvbkV4aXRDb21wbGV0ZT17KCkgPT4gc2V0RG9pbmcoZmFsc2UpfSBjdXN0b209e2lzUmlnaHR9PlxyXG4gICAgICAgIDxSb3dcclxuICAgICAgICAgIGN1c3RvbT17aXNSaWdodH1cclxuICAgICAgICAgIHZhcmlhbnRzPXtjYXJvdXNlbFZhcmlhbnRzfVxyXG4gICAgICAgICAgaW5pdGlhbD1cImluaXRpYWxcIlxyXG4gICAgICAgICAgYW5pbWF0ZT1cImFuaW1hdGVcIlxyXG4gICAgICAgICAgZXhpdD1cImV4aXRcIlxyXG4gICAgICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcInR3ZWVuXCIsIGR1cmF0aW9uOiAxIH19XHJcbiAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtpdGVtcy5zbGljZShvZmZzZXQgKiBpbmRleCwgb2Zmc2V0ICogaW5kZXggKyBvZmZzZXQpLm1hcChpdGVtID0+IChcclxuICAgICAgICAgICAgPEJveFxyXG4gICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cclxuICAgICAgICAgICAgICB2YXJpYW50cz17Ym94VmFyaWFudHN9XHJcbiAgICAgICAgICAgICAgd2hpbGVIb3Zlcj1cImhvdmVyXCJcclxuICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IHR5cGU6IFwidHdlZW5cIiB9fVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Nob3dNb2RlbChpdGVtLmlkLCBpdGVtLmJhY2tkcm9wX3BhdGgsIGl0ZW0udGl0bGUgfHwgaXRlbS5uYW1lLCBpdGVtLm1lZGlhX3R5cGUpfVxyXG4gICAgICAgICAgICAgIGxheW91dElkPXtpdGVtLmlkICsgaWRlbnRpZmllcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxJbWFnZSBpbWFnZT17aXRlbUZvcm1hdCh7IHBhdGg6IGl0ZW0uYmFja2Ryb3BfcGF0aCwgZm9ybWF0OiBcInc1MDBcIiB9KX0gLz5cclxuICAgICAgICAgICAgICA8SW5mbyB2YXJpYW50cz17aW5mb1ZhcmlhbnRzfT5cclxuICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ0aXRsZVwiPntpdGVtLnRpdGxlIHx8IGl0ZW0ubmFtZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVsZWFzZS1kYXRlXCI+8J+agOqwnOu0ieydvDoge2l0ZW0ucmVsZWFzZV9kYXRlIHx8IGl0ZW0uZmlyc3RfYWlyX2RhdGV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidm90ZS1hdmVyYWdlXCI+8J+Rje2PieygkDoge2l0ZW0udm90ZV9hdmVyYWdlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L0luZm8+XHJcbiAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxyXG5cclxuICAgICAgPE5leHRCdXR0b25cclxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICBvbkNsaWNrPXtpbmNyZWFzZUluZGV4fVxyXG4gICAgICAgIHdoaWxlSG92ZXI9e3sgZm9udFNpemU6IFwiNTBweFwiLCBvcGFjaXR5OiAxIH19XHJcbiAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC4yIH19XHJcbiAgICAgID5cclxuICAgICAgICDwn5GJXHJcbiAgICAgIDwvTmV4dEJ1dHRvbj5cclxuICAgICAgPFByZXZCdXR0b25cclxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICBvbkNsaWNrPXtkZWNyZWFzZUluZGV4fVxyXG4gICAgICAgIHdoaWxlSG92ZXI9e3sgZm9udFNpemU6IFwiNTBweFwiLCBvcGFjaXR5OiAxIH19XHJcbiAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC4yIH19XHJcbiAgICAgID5cclxuICAgICAgICDwn5GIXHJcbiAgICAgIDwvUHJldkJ1dHRvbj5cclxuICAgIDwvV3JhcHBlcj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWw7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcclxuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUsIHVzZVNldFJlY29pbFN0YXRlIH0gZnJvbSBcInJlY29pbFwiO1xyXG5cclxuLy8gY29tbW9uLWNvbXBvbmVudFxyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvY29tbW9uL0xvYWRlclwiO1xyXG5cclxuLy8gY29tcG9uZW50c1xyXG5pbXBvcnQgQ2Fyb3VzZWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9DYXJvdXNlbFwiO1xyXG5cclxuLy8gZmV0Y2hlcnNcclxuaW1wb3J0IHsgdHZzRmV0Y2hlciB9IGZyb20gXCJAc3JjL2FwaVwiO1xyXG5cclxuLy8gdHlwZVxyXG5pbXBvcnQgeyBJSXRlbXNSZXN1bHQsIElURU1fS0lORFMsIFRWX0tJTkQgfSBmcm9tIFwiQHNyYy90eXBlc1wiO1xyXG5cclxuLy8gYXRvbVxyXG5pbXBvcnQgeyBtYWluVHZTdGF0ZSwgcmFuZG9tTnVtYmVyU3RhdGUgfSBmcm9tIFwiQHNyYy9hdG9tc1wiO1xyXG5cclxuY29uc3QgVHZDYXJvdXNlbHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgcmFuZG9tTnVtYmVyID0gdXNlUmVjb2lsVmFsdWUocmFuZG9tTnVtYmVyU3RhdGUpO1xyXG4gIGNvbnN0IHNldE1haW5UdiA9IHVzZVNldFJlY29pbFN0YXRlKG1haW5UdlN0YXRlKTtcclxuXHJcbiAgLy8g7J246riwIHR27ZSE66Gc6re4656oXHJcbiAgY29uc3QgeyBkYXRhOiBwb3B1bGFyVHZzLCBpc0xvYWRpbmc6IHBvcHVsYXJUdnNMb2FkaW5nIH0gPSB1c2VRdWVyeTxJSXRlbXNSZXN1bHQ+KFtcInR2c1wiLCBcInBvcHVsYXJcIl0sICgpID0+XHJcbiAgICB0dnNGZXRjaGVyKHsga2luZHM6IFRWX0tJTkQuUE9QVUxBUiB9KSxcclxuICApO1xyXG4gIC8vIOy1nOyLoCB0du2UhOuhnOq3uOueqFxyXG4gIGNvbnN0IHsgZGF0YTogdG9wUmF0ZWRUdnMsIGlzTG9hZGluZzogdG9wUmF0ZWRUdnNMb2FkaW5nIH0gPSB1c2VRdWVyeTxJSXRlbXNSZXN1bHQ+KFtcInR2c1wiLCBcInRvcF9yYXRlZFwiXSwgKCkgPT5cclxuICAgIHR2c0ZldGNoZXIoeyBraW5kczogVFZfS0lORC5UT1BfUkFURUQgfSksXHJcbiAgKTtcclxuICAvLyDtmITsnqwg7KeE7ZaJ7KSR7J24IHR27ZSE66Gc6re4656oXHJcbiAgY29uc3QgeyBkYXRhOiBvblRoZUFpclR2cywgaXNMb2FkaW5nOiBvblRoZUFpclR2c0xvYWRpbmcgfSA9IHVzZVF1ZXJ5PElJdGVtc1Jlc3VsdD4oW1widHZzXCIsIFwib25UaGVBaXJcIl0sICgpID0+XHJcbiAgICB0dnNGZXRjaGVyKHsga2luZHM6IFRWX0tJTkQuT05fVEhFX0FJUiB9KSxcclxuICApO1xyXG4gIC8vIOyYpOuKmCDrsKnsmIHtlZjripQgdHbtlITroZzqt7jrnqhcclxuICBjb25zdCB7IGRhdGE6IGFpcmluZ1RvZGF5VHZzLCBpc0xvYWRpbmc6IGFpcmluZ1RvZGF5VHZzTG9hZGluZyB9ID0gdXNlUXVlcnk8SUl0ZW1zUmVzdWx0PihcclxuICAgIFtcInR2c1wiLCBcImFpcmluZ1RvZGF5XCJdLFxyXG4gICAgKCkgPT4gdHZzRmV0Y2hlcih7IGtpbmRzOiBUVl9LSU5ELkFJUklOR19UT0RBWSB9KSxcclxuICApO1xyXG5cclxuICAvLyAyMDIyLzAzLzA3IC0g66mU7J24IOyYge2ZlCDsp4DsoJUgLSBieSAxLWJsdWVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgc2V0TWFpblR2KHBvcHVsYXJUdnMgPyBwb3B1bGFyVHZzLnJlc3VsdHNbcmFuZG9tTnVtYmVyXSA6IG51bGwpO1xyXG4gIH0sIFtwb3B1bGFyVHZzLCByYW5kb21OdW1iZXJdKTtcclxuXHJcbiAgLy8gdHbtlITroZzqt7jrnqgg7Yyo7LmYXHJcbiAgaWYgKFxyXG4gICAgcG9wdWxhclR2c0xvYWRpbmcgfHxcclxuICAgICFwb3B1bGFyVHZzIHx8XHJcbiAgICB0b3BSYXRlZFR2c0xvYWRpbmcgfHxcclxuICAgICF0b3BSYXRlZFR2cyB8fFxyXG4gICAgb25UaGVBaXJUdnNMb2FkaW5nIHx8XHJcbiAgICAhb25UaGVBaXJUdnMgfHxcclxuICAgIGFpcmluZ1RvZGF5VHZzTG9hZGluZyB8fFxyXG4gICAgIWFpcmluZ1RvZGF5VHZzXHJcbiAgKVxyXG4gICAgcmV0dXJuIDxMb2FkZXIgLz47XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICB7Lyog7J246riwIFR2IO2UhOuhnOq3uOueqCDsiqzrnbzsnbTrk5wgKi99XHJcbiAgICAgIDxDYXJvdXNlbFxyXG4gICAgICAgIGtpbmRzPXtJVEVNX0tJTkRTLlRWfVxyXG4gICAgICAgIHRpdGxlPVwi7J246riwIFRWIO2UhOuhnOq3uOueqCBUT1AgMjBcIlxyXG4gICAgICAgIGl0ZW1zPXtwb3B1bGFyVHZzLnJlc3VsdHMuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuYmFja2Ryb3BfcGF0aCAhPT0gbnVsbCl9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7Lyog7LWc7IugIFR2IO2UhOuhnOq3uOueqCDsiqzrnbzsnbTrk5wgKi99XHJcbiAgICAgIDxDYXJvdXNlbFxyXG4gICAgICAgIGtpbmRzPXtJVEVNX0tJTkRTLlRWfVxyXG4gICAgICAgIHRpdGxlPVwi7LWc7IugIFRWIO2UhOuhnOq3uOueqCBUT1AgMjBcIlxyXG4gICAgICAgIGl0ZW1zPXt0b3BSYXRlZFR2cy5yZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4gcmVzdWx0LmJhY2tkcm9wX3BhdGggIT09IG51bGwpfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIO2YhOyerCDsg4HsmIHspJHsnbggVHYg7ZSE66Gc6re4656oIOyKrOudvOydtOuTnCAqL31cclxuICAgICAgPENhcm91c2VsXHJcbiAgICAgICAga2luZHM9e0lURU1fS0lORFMuVFZ9XHJcbiAgICAgICAgdGl0bGU9XCLtmITsnqwg7IOB7JiB7KSR7J24IFRWIO2UhOuhnOq3uOueqCBUT1AgMjBcIlxyXG4gICAgICAgIGl0ZW1zPXtvblRoZUFpclR2cy5yZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4gcmVzdWx0LmJhY2tkcm9wX3BhdGggIT09IG51bGwpfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIOyYpOuKmCDrsKnshqHtlZjripQgVHYg7ZSE66Gc6re4656oIOyKrOudvOydtOuTnCAqL31cclxuICAgICAgPENhcm91c2VsXHJcbiAgICAgICAga2luZHM9e0lURU1fS0lORFMuVFZ9XHJcbiAgICAgICAgdGl0bGU9XCLsmKTripgg67Cp7Iah7ZWY64qUIFRWIO2UhOuhnOq3uOueqCBUT1AgMjBcIlxyXG4gICAgICAgIGl0ZW1zPXthaXJpbmdUb2RheVR2cy5yZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4gcmVzdWx0LmJhY2tkcm9wX3BhdGggIT09IG51bGwpfVxyXG4gICAgICAvPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFR2Q2Fyb3VzZWxzO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuXHJcbi8vIGZldGNoZXJcclxuaW1wb3J0IHsgbW92aWVzRmV0Y2hlciB9IGZyb20gXCJAc3JjL2FwaVwiO1xyXG5cclxuLy8gdHlwZVxyXG5pbXBvcnQgeyBJSXRlbXNSZXN1bHQsIElURU1fS0lORFMsIE1PVklFX0tJTkRTIH0gZnJvbSBcIkBzcmMvdHlwZXNcIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgbWFpbk1vdmllU3RhdGUsIHJhbmRvbU51bWJlclN0YXRlIH0gZnJvbSBcIkBzcmMvYXRvbXNcIjtcclxuXHJcbi8vIGNvbXBvbmVudFxyXG5pbXBvcnQgQ2Fyb3VzZWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9DYXJvdXNlbFwiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvY29tbW9uL0xvYWRlclwiO1xyXG5cclxuY29uc3QgTW92aWVDYXJvdXNlbHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgcmFuZG9tTnVtYmVyID0gdXNlUmVjb2lsVmFsdWUocmFuZG9tTnVtYmVyU3RhdGUpO1xyXG4gIGNvbnN0IHNldE1haW5Nb3ZpZSA9IHVzZVNldFJlY29pbFN0YXRlKG1haW5Nb3ZpZVN0YXRlKTtcclxuXHJcbiAgLy8g7J246riwIOyYge2ZlFxyXG4gIGNvbnN0IHsgZGF0YTogcG9wdWxhck1vdmllcywgaXNMb2FkaW5nOiBwb3B1bGFyTW92aWVzTG9hZGluZyB9ID0gdXNlUXVlcnk8SUl0ZW1zUmVzdWx0PihbXCJtb3ZpZXNcIiwgXCJwb3B1bGFyXCJdLCAoKSA9PlxyXG4gICAgbW92aWVzRmV0Y2hlcih7IGtpbmRzOiBNT1ZJRV9LSU5EUy5QT1BVTEFSIH0pLFxyXG4gICk7XHJcbiAgLy8g7ZiE7J6sIOyDgeyYgeykkeyduCDsmIHtmZRcclxuICBjb25zdCB7IGRhdGE6IG5vd1BsYXlpbmdNb3ZpZXMsIGlzTG9hZGluZzogbm93UGxheWluZ01vdmllc0xvYWRpbmcgfSA9IHVzZVF1ZXJ5PElJdGVtc1Jlc3VsdD4oXHJcbiAgICBbXCJtb3ZpZXNcIiwgXCJub3dQbGF5aW5nXCJdLFxyXG4gICAgKCkgPT4gbW92aWVzRmV0Y2hlcih7IGtpbmRzOiBNT1ZJRV9LSU5EUy5OT1dfUExBWUlORyB9KSxcclxuICApO1xyXG4gIC8vIOyDgeyYgSDsmIjsoJUg7JiB7ZmUXHJcbiAgY29uc3QgeyBkYXRhOiB1cGNvbWluZ01vdmllcywgaXNMb2FkaW5nOiB1cGNvbWluZ01vdmllc0xvYWRpbmcgfSA9IHVzZVF1ZXJ5PElJdGVtc1Jlc3VsdD4oXHJcbiAgICBbXCJtb3ZpZXNcIiwgXCJ1cGNvbWluZ1wiXSxcclxuICAgICgpID0+IG1vdmllc0ZldGNoZXIoeyBraW5kczogTU9WSUVfS0lORFMuVVBDT01JTkcgfSksXHJcbiAgKTtcclxuICAvLyDsg4HsmIEg7JiI7KCVIOyYge2ZlFxyXG4gIGNvbnN0IHsgZGF0YTogdG9wUmF0ZWRNb3ZpZXMsIGlzTG9hZGluZzogdG9wUmF0ZWRNb3ZpZXNMb2FkaW5nIH0gPSB1c2VRdWVyeTxJSXRlbXNSZXN1bHQ+KFxyXG4gICAgW1wibW92aWVzXCIsIFwidG9wUmF0ZWRcIl0sXHJcbiAgICAoKSA9PiBtb3ZpZXNGZXRjaGVyKHsga2luZHM6IE1PVklFX0tJTkRTLlRPUF9SQVRFRCB9KSxcclxuICApO1xyXG5cclxuICAvLyAyMDIyLzAzLzA3IC0g66mU7J24IOyYge2ZlCDsp4DsoJUgLSBieSAxLWJsdWVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgc2V0TWFpbk1vdmllKHBvcHVsYXJNb3ZpZXMgPyBwb3B1bGFyTW92aWVzLnJlc3VsdHNbcmFuZG9tTnVtYmVyXSA6IG51bGwpO1xyXG4gIH0sIFtwb3B1bGFyTW92aWVzLCByYW5kb21OdW1iZXJdKTtcclxuXHJcbiAgLy8g7JiB7ZmUIO2MqOy5mFxyXG4gIGlmIChcclxuICAgIHBvcHVsYXJNb3ZpZXNMb2FkaW5nIHx8XHJcbiAgICAhcG9wdWxhck1vdmllcyB8fFxyXG4gICAgbm93UGxheWluZ01vdmllc0xvYWRpbmcgfHxcclxuICAgICFub3dQbGF5aW5nTW92aWVzIHx8XHJcbiAgICB1cGNvbWluZ01vdmllc0xvYWRpbmcgfHxcclxuICAgICF1cGNvbWluZ01vdmllcyB8fFxyXG4gICAgdG9wUmF0ZWRNb3ZpZXNMb2FkaW5nIHx8XHJcbiAgICAhdG9wUmF0ZWRNb3ZpZXNcclxuICApXHJcbiAgICByZXR1cm4gPExvYWRlciAvPjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHsvKiDsnbjquLAg7JiB7ZmUIOyKrOudvOydtOuTnCAqL31cclxuICAgICAgPENhcm91c2VsXHJcbiAgICAgICAga2luZHM9e0lURU1fS0lORFMuTU9WSUV9XHJcbiAgICAgICAgdGl0bGU9XCLsnbjquLAg7JiB7ZmUIFRPUCAyMFwiXHJcbiAgICAgICAgaXRlbXM9e1suLi5wb3B1bGFyTW92aWVzPy5yZXN1bHRzLnNsaWNlKDAsIHJhbmRvbU51bWJlciksIC4uLnBvcHVsYXJNb3ZpZXM/LnJlc3VsdHMuc2xpY2UocmFuZG9tTnVtYmVyICsgMSldfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIOy1nOqzoCDtj4nsoJAg7JiB7ZmUIOyKrOudvOydtOuTnCAqL31cclxuICAgICAgPENhcm91c2VsXHJcbiAgICAgICAga2luZHM9e0lURU1fS0lORFMuTU9WSUV9XHJcbiAgICAgICAgdGl0bGU9XCLstZzqs6Ag7Y+J7KCQIOyYge2ZlCBUT1AgMjBcIlxyXG4gICAgICAgIGl0ZW1zPXt0b3BSYXRlZE1vdmllcy5yZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4gcmVzdWx0LmJhY2tkcm9wX3BhdGggIT09IG51bGwpfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIOyDgeyYgeykkeyduCDsmIHtmZQg7Iqs65287J2065OcICovfVxyXG4gICAgICA8Q2Fyb3VzZWxcclxuICAgICAgICBraW5kcz17SVRFTV9LSU5EUy5NT1ZJRX1cclxuICAgICAgICB0aXRsZT1cIu2YhOyerCDsg4HsmIHspJHsnbgg7JiB7ZmUIFRPUCAyMFwiXHJcbiAgICAgICAgaXRlbXM9e25vd1BsYXlpbmdNb3ZpZXMucmVzdWx0cy5maWx0ZXIocmVzdWx0ID0+IHJlc3VsdC5iYWNrZHJvcF9wYXRoICE9PSBudWxsKX1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiDqsJzrtInsmIjsoJUg7JiB7ZmUIOyKrOudvOydtOuTnCAqL31cclxuICAgICAgPENhcm91c2VsXHJcbiAgICAgICAga2luZHM9e0lURU1fS0lORFMuTU9WSUV9XHJcbiAgICAgICAgdGl0bGU9XCLqsJzrtInsmIjsoJUg7JiB7ZmUIFRPUCAyMFwiXHJcbiAgICAgICAgaXRlbXM9e3VwY29taW5nTW92aWVzLnJlc3VsdHMuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuYmFja2Ryb3BfcGF0aCAhPT0gbnVsbCl9XHJcbiAgICAgIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW92aWVDYXJvdXNlbHM7XHJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFNpZGVFZmZlY3QgZnJvbSAncmVhY3Qtc2lkZS1lZmZlY3QnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb2JqZWN0QXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG52YXIgQVRUUklCVVRFX05BTUVTID0ge1xuICAgIEJPRFk6IFwiYm9keUF0dHJpYnV0ZXNcIixcbiAgICBIVE1MOiBcImh0bWxBdHRyaWJ1dGVzXCIsXG4gICAgVElUTEU6IFwidGl0bGVBdHRyaWJ1dGVzXCJcbn07XG5cbnZhciBUQUdfTkFNRVMgPSB7XG4gICAgQkFTRTogXCJiYXNlXCIsXG4gICAgQk9EWTogXCJib2R5XCIsXG4gICAgSEVBRDogXCJoZWFkXCIsXG4gICAgSFRNTDogXCJodG1sXCIsXG4gICAgTElOSzogXCJsaW5rXCIsXG4gICAgTUVUQTogXCJtZXRhXCIsXG4gICAgTk9TQ1JJUFQ6IFwibm9zY3JpcHRcIixcbiAgICBTQ1JJUFQ6IFwic2NyaXB0XCIsXG4gICAgU1RZTEU6IFwic3R5bGVcIixcbiAgICBUSVRMRTogXCJ0aXRsZVwiXG59O1xuXG52YXIgVkFMSURfVEFHX05BTUVTID0gT2JqZWN0LmtleXMoVEFHX05BTUVTKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gVEFHX05BTUVTW25hbWVdO1xufSk7XG5cbnZhciBUQUdfUFJPUEVSVElFUyA9IHtcbiAgICBDSEFSU0VUOiBcImNoYXJzZXRcIixcbiAgICBDU1NfVEVYVDogXCJjc3NUZXh0XCIsXG4gICAgSFJFRjogXCJocmVmXCIsXG4gICAgSFRUUEVRVUlWOiBcImh0dHAtZXF1aXZcIixcbiAgICBJTk5FUl9IVE1MOiBcImlubmVySFRNTFwiLFxuICAgIElURU1fUFJPUDogXCJpdGVtcHJvcFwiLFxuICAgIE5BTUU6IFwibmFtZVwiLFxuICAgIFBST1BFUlRZOiBcInByb3BlcnR5XCIsXG4gICAgUkVMOiBcInJlbFwiLFxuICAgIFNSQzogXCJzcmNcIixcbiAgICBUQVJHRVQ6IFwidGFyZ2V0XCJcbn07XG5cbnZhciBSRUFDVF9UQUdfTUFQID0ge1xuICAgIGFjY2Vzc2tleTogXCJhY2Nlc3NLZXlcIixcbiAgICBjaGFyc2V0OiBcImNoYXJTZXRcIixcbiAgICBjbGFzczogXCJjbGFzc05hbWVcIixcbiAgICBjb250ZW50ZWRpdGFibGU6IFwiY29udGVudEVkaXRhYmxlXCIsXG4gICAgY29udGV4dG1lbnU6IFwiY29udGV4dE1lbnVcIixcbiAgICBcImh0dHAtZXF1aXZcIjogXCJodHRwRXF1aXZcIixcbiAgICBpdGVtcHJvcDogXCJpdGVtUHJvcFwiLFxuICAgIHRhYmluZGV4OiBcInRhYkluZGV4XCJcbn07XG5cbnZhciBIRUxNRVRfUFJPUFMgPSB7XG4gICAgREVGQVVMVF9USVRMRTogXCJkZWZhdWx0VGl0bGVcIixcbiAgICBERUZFUjogXCJkZWZlclwiLFxuICAgIEVOQ09ERV9TUEVDSUFMX0NIQVJBQ1RFUlM6IFwiZW5jb2RlU3BlY2lhbENoYXJhY3RlcnNcIixcbiAgICBPTl9DSEFOR0VfQ0xJRU5UX1NUQVRFOiBcIm9uQ2hhbmdlQ2xpZW50U3RhdGVcIixcbiAgICBUSVRMRV9URU1QTEFURTogXCJ0aXRsZVRlbXBsYXRlXCJcbn07XG5cbnZhciBIVE1MX1RBR19NQVAgPSBPYmplY3Qua2V5cyhSRUFDVF9UQUdfTUFQKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgb2JqW1JFQUNUX1RBR19NQVBba2V5XV0gPSBrZXk7XG4gICAgcmV0dXJuIG9iajtcbn0sIHt9KTtcblxudmFyIFNFTEZfQ0xPU0lOR19UQUdTID0gW1RBR19OQU1FUy5OT1NDUklQVCwgVEFHX05BTUVTLlNDUklQVCwgVEFHX05BTUVTLlNUWUxFXTtcblxudmFyIEhFTE1FVF9BVFRSSUJVVEUgPSBcImRhdGEtcmVhY3QtaGVsbWV0XCI7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzID0gZnVuY3Rpb24gZW5jb2RlU3BlY2lhbENoYXJhY3RlcnMoc3RyKSB7XG4gICAgdmFyIGVuY29kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgIGlmIChlbmNvZGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpLnJlcGxhY2UoLycvZywgXCImI3gyNztcIik7XG59O1xuXG52YXIgZ2V0VGl0bGVGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0VGl0bGVGcm9tUHJvcHNMaXN0KHByb3BzTGlzdCkge1xuICAgIHZhciBpbm5lcm1vc3RUaXRsZSA9IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgVEFHX05BTUVTLlRJVExFKTtcbiAgICB2YXIgaW5uZXJtb3N0VGVtcGxhdGUgPSBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5USVRMRV9URU1QTEFURSk7XG5cbiAgICBpZiAoaW5uZXJtb3N0VGVtcGxhdGUgJiYgaW5uZXJtb3N0VGl0bGUpIHtcbiAgICAgICAgLy8gdXNlIGZ1bmN0aW9uIGFyZyB0byBhdm9pZCBuZWVkIHRvIGVzY2FwZSAkIGNoYXJhY3RlcnNcbiAgICAgICAgcmV0dXJuIGlubmVybW9zdFRlbXBsYXRlLnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlubmVybW9zdFRpdGxlKSA/IGlubmVybW9zdFRpdGxlLmpvaW4oXCJcIikgOiBpbm5lcm1vc3RUaXRsZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGlubmVybW9zdERlZmF1bHRUaXRsZSA9IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLkRFRkFVTFRfVElUTEUpO1xuXG4gICAgcmV0dXJuIGlubmVybW9zdFRpdGxlIHx8IGlubmVybW9zdERlZmF1bHRUaXRsZSB8fCB1bmRlZmluZWQ7XG59O1xuXG52YXIgZ2V0T25DaGFuZ2VDbGllbnRTdGF0ZSA9IGZ1bmN0aW9uIGdldE9uQ2hhbmdlQ2xpZW50U3RhdGUocHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLk9OX0NIQU5HRV9DTElFTlRfU1RBVEUpIHx8IGZ1bmN0aW9uICgpIHt9O1xufTtcblxudmFyIGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QodGFnVHlwZSwgcHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIHByb3BzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvcHNbdGFnVHlwZV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gcHJvcHNbdGFnVHlwZV07XG4gICAgfSkucmVkdWNlKGZ1bmN0aW9uICh0YWdBdHRycywgY3VycmVudCkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRhZ0F0dHJzLCBjdXJyZW50KTtcbiAgICB9LCB7fSk7XG59O1xuXG52YXIgZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QgPSBmdW5jdGlvbiBnZXRCYXNlVGFnRnJvbVByb3BzTGlzdChwcmltYXJ5QXR0cmlidXRlcywgcHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIHByb3BzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvcHNbVEFHX05BTUVTLkJBU0VdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIH0pLm1hcChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW1RBR19OQU1FUy5CQVNFXTtcbiAgICB9KS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChpbm5lcm1vc3RCYXNlVGFnLCB0YWcpIHtcbiAgICAgICAgaWYgKCFpbm5lcm1vc3RCYXNlVGFnLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0YWcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlS2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ZXJDYXNlQXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJpbWFyeUF0dHJpYnV0ZXMuaW5kZXhPZihsb3dlckNhc2VBdHRyaWJ1dGVLZXkpICE9PSAtMSAmJiB0YWdbbG93ZXJDYXNlQXR0cmlidXRlS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJtb3N0QmFzZVRhZy5jb25jYXQodGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5uZXJtb3N0QmFzZVRhZztcbiAgICB9LCBbXSk7XG59O1xuXG52YXIgZ2V0VGFnc0Zyb21Qcm9wc0xpc3QgPSBmdW5jdGlvbiBnZXRUYWdzRnJvbVByb3BzTGlzdCh0YWdOYW1lLCBwcmltYXJ5QXR0cmlidXRlcywgcHJvcHNMaXN0KSB7XG4gICAgLy8gQ2FsY3VsYXRlIGxpc3Qgb2YgdGFncywgZ2l2aW5nIHByaW9yaXR5IGlubmVybW9zdCBjb21wb25lbnQgKGVuZCBvZiB0aGUgcHJvcHNsaXN0KVxuICAgIHZhciBhcHByb3ZlZFNlZW5UYWdzID0ge307XG5cbiAgICByZXR1cm4gcHJvcHNMaXN0LmZpbHRlcihmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHNbdGFnTmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHByb3BzW3RhZ05hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB3YXJuKFwiSGVsbWV0OiBcIiArIHRhZ05hbWUgKyBcIiBzaG91bGQgYmUgb2YgdHlwZSBcXFwiQXJyYXlcXFwiLiBJbnN0ZWFkIGZvdW5kIHR5cGUgXFxcIlwiICsgX3R5cGVvZihwcm9wc1t0YWdOYW1lXSkgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLm1hcChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW3RhZ05hbWVdO1xuICAgIH0pLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKGFwcHJvdmVkVGFncywgaW5zdGFuY2VUYWdzKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZVNlZW5UYWdzID0ge307XG5cbiAgICAgICAgaW5zdGFuY2VUYWdzLmZpbHRlcihmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICB2YXIgcHJpbWFyeUF0dHJpYnV0ZUtleSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGFnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVLZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBsb3dlckNhc2VBdHRyaWJ1dGVLZXkgPSBhdHRyaWJ1dGVLZXkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgcnVsZSB3aXRoIGxpbmsgdGFncywgc2luY2UgcmVsIGFuZCBocmVmIGFyZSBib3RoIHByaW1hcnkgdGFncywgcmVsIHRha2VzIHByaW9yaXR5XG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBdHRyaWJ1dGVzLmluZGV4T2YobG93ZXJDYXNlQXR0cmlidXRlS2V5KSAhPT0gLTEgJiYgIShwcmltYXJ5QXR0cmlidXRlS2V5ID09PSBUQUdfUFJPUEVSVElFUy5SRUwgJiYgdGFnW3ByaW1hcnlBdHRyaWJ1dGVLZXldLnRvTG93ZXJDYXNlKCkgPT09IFwiY2Fub25pY2FsXCIpICYmICEobG93ZXJDYXNlQXR0cmlidXRlS2V5ID09PSBUQUdfUFJPUEVSVElFUy5SRUwgJiYgdGFnW2xvd2VyQ2FzZUF0dHJpYnV0ZUtleV0udG9Mb3dlckNhc2UoKSA9PT0gXCJzdHlsZXNoZWV0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnlBdHRyaWJ1dGVLZXkgPSBsb3dlckNhc2VBdHRyaWJ1dGVLZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgaW5uZXJIVE1MIHdoaWNoIGRvZXNuJ3Qgd29yayBsb3dlcmNhc2VkXG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBdHRyaWJ1dGVzLmluZGV4T2YoYXR0cmlidXRlS2V5KSAhPT0gLTEgJiYgKGF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTCB8fCBhdHRyaWJ1dGVLZXkgPT09IFRBR19QUk9QRVJUSUVTLkNTU19URVhUIHx8IGF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuSVRFTV9QUk9QKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwcmltYXJ5QXR0cmlidXRlS2V5IHx8ICF0YWdbcHJpbWFyeUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRhZ1twcmltYXJ5QXR0cmlidXRlS2V5XS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoIWFwcHJvdmVkU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaW5zdGFuY2VTZWVuVGFnc1twcmltYXJ5QXR0cmlidXRlS2V5XSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldW3ZhbHVlXSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV1bdmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KS5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwcm92ZWRUYWdzLnB1c2godGFnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNlZW4gdGFncyB3aXRoIHRhZ3MgZnJvbSB0aGlzIGluc3RhbmNlXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5zdGFuY2VTZWVuVGFncyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZUtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB2YXIgdGFnVW5pb24gPSBvYmplY3RBc3NpZ24oe30sIGFwcHJvdmVkU2VlblRhZ3NbYXR0cmlidXRlS2V5XSwgaW5zdGFuY2VTZWVuVGFnc1thdHRyaWJ1dGVLZXldKTtcblxuICAgICAgICAgICAgYXBwcm92ZWRTZWVuVGFnc1thdHRyaWJ1dGVLZXldID0gdGFnVW5pb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXBwcm92ZWRUYWdzO1xuICAgIH0sIFtdKS5yZXZlcnNlKCk7XG59O1xuXG52YXIgZ2V0SW5uZXJtb3N0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIHByb3BlcnR5KSB7XG4gICAgZm9yICh2YXIgaSA9IHByb3BzTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgcHJvcHMgPSBwcm9wc0xpc3RbaV07XG5cbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufTtcblxudmFyIHJlZHVjZVByb3BzVG9TdGF0ZSA9IGZ1bmN0aW9uIHJlZHVjZVByb3BzVG9TdGF0ZShwcm9wc0xpc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlVGFnOiBnZXRCYXNlVGFnRnJvbVByb3BzTGlzdChbVEFHX1BST1BFUlRJRVMuSFJFRiwgVEFHX1BST1BFUlRJRVMuVEFSR0VUXSwgcHJvcHNMaXN0KSxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXM6IGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0KEFUVFJJQlVURV9OQU1FUy5CT0RZLCBwcm9wc0xpc3QpLFxuICAgICAgICBkZWZlcjogZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuREVGRVIpLFxuICAgICAgICBlbmNvZGU6IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLkVOQ09ERV9TUEVDSUFMX0NIQVJBQ1RFUlMpLFxuICAgICAgICBodG1sQXR0cmlidXRlczogZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QoQVRUUklCVVRFX05BTUVTLkhUTUwsIHByb3BzTGlzdCksXG4gICAgICAgIGxpbmtUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChUQUdfTkFNRVMuTElOSywgW1RBR19QUk9QRVJUSUVTLlJFTCwgVEFHX1BST1BFUlRJRVMuSFJFRl0sIHByb3BzTGlzdCksXG4gICAgICAgIG1ldGFUYWdzOiBnZXRUYWdzRnJvbVByb3BzTGlzdChUQUdfTkFNRVMuTUVUQSwgW1RBR19QUk9QRVJUSUVTLk5BTUUsIFRBR19QUk9QRVJUSUVTLkNIQVJTRVQsIFRBR19QUk9QRVJUSUVTLkhUVFBFUVVJViwgVEFHX1BST1BFUlRJRVMuUFJPUEVSVFksIFRBR19QUk9QRVJUSUVTLklURU1fUFJPUF0sIHByb3BzTGlzdCksXG4gICAgICAgIG5vc2NyaXB0VGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLk5PU0NSSVBULCBbVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTF0sIHByb3BzTGlzdCksXG4gICAgICAgIG9uQ2hhbmdlQ2xpZW50U3RhdGU6IGdldE9uQ2hhbmdlQ2xpZW50U3RhdGUocHJvcHNMaXN0KSxcbiAgICAgICAgc2NyaXB0VGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLlNDUklQVCwgW1RBR19QUk9QRVJUSUVTLlNSQywgVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTF0sIHByb3BzTGlzdCksXG4gICAgICAgIHN0eWxlVGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLlNUWUxFLCBbVEFHX1BST1BFUlRJRVMuQ1NTX1RFWFRdLCBwcm9wc0xpc3QpLFxuICAgICAgICB0aXRsZTogZ2V0VGl0bGVGcm9tUHJvcHNMaXN0KHByb3BzTGlzdCksXG4gICAgICAgIHRpdGxlQXR0cmlidXRlczogZ2V0QXR0cmlidXRlc0Zyb21Qcm9wc0xpc3QoQVRUUklCVVRFX05BTUVTLlRJVExFLCBwcm9wc0xpc3QpXG4gICAgfTtcbn07XG5cbnZhciByYWZQb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xvY2sgPSBEYXRlLm5vdygpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChjdXJyZW50VGltZSAtIGNsb2NrID4gMTYpIHtcbiAgICAgICAgICAgIGNsb2NrID0gY3VycmVudFRpbWU7XG4gICAgICAgICAgICBjYWxsYmFjayhjdXJyZW50VGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByYWZQb2x5ZmlsbChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH07XG59KCk7XG5cbnZhciBjYWZQb2x5ZmlsbCA9IGZ1bmN0aW9uIGNhZlBvbHlmaWxsKGlkKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHJhZlBvbHlmaWxsIDogZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByYWZQb2x5ZmlsbDtcblxudmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNhZlBvbHlmaWxsIDogZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNhZlBvbHlmaWxsO1xuXG52YXIgd2FybiA9IGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgcmV0dXJuIGNvbnNvbGUgJiYgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiICYmIGNvbnNvbGUud2Fybihtc2cpO1xufTtcblxudmFyIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG5cbnZhciBoYW5kbGVDbGllbnRTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNsaWVudFN0YXRlQ2hhbmdlKG5ld1N0YXRlKSB7XG4gICAgaWYgKF9oZWxtZXRDYWxsYmFjaykge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShfaGVsbWV0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmIChuZXdTdGF0ZS5kZWZlcikge1xuICAgICAgICBfaGVsbWV0Q2FsbGJhY2sgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tbWl0VGFnQ2hhbmdlcyhuZXdTdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tbWl0VGFnQ2hhbmdlcyhuZXdTdGF0ZSk7XG4gICAgICAgIF9oZWxtZXRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxudmFyIGNvbW1pdFRhZ0NoYW5nZXMgPSBmdW5jdGlvbiBjb21taXRUYWdDaGFuZ2VzKG5ld1N0YXRlLCBjYikge1xuICAgIHZhciBiYXNlVGFnID0gbmV3U3RhdGUuYmFzZVRhZyxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXMgPSBuZXdTdGF0ZS5ib2R5QXR0cmlidXRlcyxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXMgPSBuZXdTdGF0ZS5odG1sQXR0cmlidXRlcyxcbiAgICAgICAgbGlua1RhZ3MgPSBuZXdTdGF0ZS5saW5rVGFncyxcbiAgICAgICAgbWV0YVRhZ3MgPSBuZXdTdGF0ZS5tZXRhVGFncyxcbiAgICAgICAgbm9zY3JpcHRUYWdzID0gbmV3U3RhdGUubm9zY3JpcHRUYWdzLFxuICAgICAgICBvbkNoYW5nZUNsaWVudFN0YXRlID0gbmV3U3RhdGUub25DaGFuZ2VDbGllbnRTdGF0ZSxcbiAgICAgICAgc2NyaXB0VGFncyA9IG5ld1N0YXRlLnNjcmlwdFRhZ3MsXG4gICAgICAgIHN0eWxlVGFncyA9IG5ld1N0YXRlLnN0eWxlVGFncyxcbiAgICAgICAgdGl0bGUgPSBuZXdTdGF0ZS50aXRsZSxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzID0gbmV3U3RhdGUudGl0bGVBdHRyaWJ1dGVzO1xuXG4gICAgdXBkYXRlQXR0cmlidXRlcyhUQUdfTkFNRVMuQk9EWSwgYm9keUF0dHJpYnV0ZXMpO1xuICAgIHVwZGF0ZUF0dHJpYnV0ZXMoVEFHX05BTUVTLkhUTUwsIGh0bWxBdHRyaWJ1dGVzKTtcblxuICAgIHVwZGF0ZVRpdGxlKHRpdGxlLCB0aXRsZUF0dHJpYnV0ZXMpO1xuXG4gICAgdmFyIHRhZ1VwZGF0ZXMgPSB7XG4gICAgICAgIGJhc2VUYWc6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLkJBU0UsIGJhc2VUYWcpLFxuICAgICAgICBsaW5rVGFnczogdXBkYXRlVGFncyhUQUdfTkFNRVMuTElOSywgbGlua1RhZ3MpLFxuICAgICAgICBtZXRhVGFnczogdXBkYXRlVGFncyhUQUdfTkFNRVMuTUVUQSwgbWV0YVRhZ3MpLFxuICAgICAgICBub3NjcmlwdFRhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLk5PU0NSSVBULCBub3NjcmlwdFRhZ3MpLFxuICAgICAgICBzY3JpcHRUYWdzOiB1cGRhdGVUYWdzKFRBR19OQU1FUy5TQ1JJUFQsIHNjcmlwdFRhZ3MpLFxuICAgICAgICBzdHlsZVRhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLlNUWUxFLCBzdHlsZVRhZ3MpXG4gICAgfTtcblxuICAgIHZhciBhZGRlZFRhZ3MgPSB7fTtcbiAgICB2YXIgcmVtb3ZlZFRhZ3MgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHRhZ1VwZGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHRhZ1R5cGUpIHtcbiAgICAgICAgdmFyIF90YWdVcGRhdGVzJHRhZ1R5cGUgPSB0YWdVcGRhdGVzW3RhZ1R5cGVdLFxuICAgICAgICAgICAgbmV3VGFncyA9IF90YWdVcGRhdGVzJHRhZ1R5cGUubmV3VGFncyxcbiAgICAgICAgICAgIG9sZFRhZ3MgPSBfdGFnVXBkYXRlcyR0YWdUeXBlLm9sZFRhZ3M7XG5cblxuICAgICAgICBpZiAobmV3VGFncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZGVkVGFnc1t0YWdUeXBlXSA9IG5ld1RhZ3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFRhZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVGFnc1t0YWdUeXBlXSA9IHRhZ1VwZGF0ZXNbdGFnVHlwZV0ub2xkVGFncztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY2IgJiYgY2IoKTtcblxuICAgIG9uQ2hhbmdlQ2xpZW50U3RhdGUobmV3U3RhdGUsIGFkZGVkVGFncywgcmVtb3ZlZFRhZ3MpO1xufTtcblxudmFyIGZsYXR0ZW5BcnJheSA9IGZ1bmN0aW9uIGZsYXR0ZW5BcnJheShwb3NzaWJsZUFycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocG9zc2libGVBcnJheSkgPyBwb3NzaWJsZUFycmF5LmpvaW4oXCJcIikgOiBwb3NzaWJsZUFycmF5O1xufTtcblxudmFyIHVwZGF0ZVRpdGxlID0gZnVuY3Rpb24gdXBkYXRlVGl0bGUodGl0bGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIHRpdGxlICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LnRpdGxlICE9PSB0aXRsZSkge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IGZsYXR0ZW5BcnJheSh0aXRsZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQXR0cmlidXRlcyhUQUdfTkFNRVMuVElUTEUsIGF0dHJpYnV0ZXMpO1xufTtcblxudmFyIHVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiB1cGRhdGVBdHRyaWJ1dGVzKHRhZ05hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZWxlbWVudFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpWzBdO1xuXG4gICAgaWYgKCFlbGVtZW50VGFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaGVsbWV0QXR0cmlidXRlU3RyaW5nID0gZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSk7XG4gICAgdmFyIGhlbG1ldEF0dHJpYnV0ZXMgPSBoZWxtZXRBdHRyaWJ1dGVTdHJpbmcgPyBoZWxtZXRBdHRyaWJ1dGVTdHJpbmcuc3BsaXQoXCIsXCIpIDogW107XG4gICAgdmFyIGF0dHJpYnV0ZXNUb1JlbW92ZSA9IFtdLmNvbmNhdChoZWxtZXRBdHRyaWJ1dGVzKTtcbiAgICB2YXIgYXR0cmlidXRlS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVLZXlzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gfHwgXCJcIjtcblxuICAgICAgICBpZiAoZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnRUYWcuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMuaW5kZXhPZihhdHRyaWJ1dGUpID09PSAtMSkge1xuICAgICAgICAgICAgaGVsbWV0QXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXhUb1NhdmUgPSBhdHRyaWJ1dGVzVG9SZW1vdmUuaW5kZXhPZihhdHRyaWJ1dGUpO1xuICAgICAgICBpZiAoaW5kZXhUb1NhdmUgIT09IC0xKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzVG9SZW1vdmUuc3BsaWNlKGluZGV4VG9TYXZlLCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gYXR0cmlidXRlc1RvUmVtb3ZlLmxlbmd0aCAtIDE7IF9pID49IDA7IF9pLS0pIHtcbiAgICAgICAgZWxlbWVudFRhZy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlc1RvUmVtb3ZlW19pXSk7XG4gICAgfVxuXG4gICAgaWYgKGhlbG1ldEF0dHJpYnV0ZXMubGVuZ3RoID09PSBhdHRyaWJ1dGVzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRUYWcucmVtb3ZlQXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFRhZy5nZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSkgIT09IGF0dHJpYnV0ZUtleXMuam9pbihcIixcIikpIHtcbiAgICAgICAgZWxlbWVudFRhZy5zZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSwgYXR0cmlidXRlS2V5cy5qb2luKFwiLFwiKSk7XG4gICAgfVxufTtcblxudmFyIHVwZGF0ZVRhZ3MgPSBmdW5jdGlvbiB1cGRhdGVUYWdzKHR5cGUsIHRhZ3MpIHtcbiAgICB2YXIgaGVhZEVsZW1lbnQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoVEFHX05BTUVTLkhFQUQpO1xuICAgIHZhciB0YWdOb2RlcyA9IGhlYWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHlwZSArIFwiW1wiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiXVwiKTtcbiAgICB2YXIgb2xkVGFncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhZ05vZGVzKTtcbiAgICB2YXIgbmV3VGFncyA9IFtdO1xuICAgIHZhciBpbmRleFRvRGVsZXRlID0gdm9pZCAwO1xuXG4gICAgaWYgKHRhZ3MgJiYgdGFncy5sZW5ndGgpIHtcbiAgICAgICAgdGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIHRhZykge1xuICAgICAgICAgICAgICAgIGlmICh0YWcuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5JTk5FUl9IVE1MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmlubmVySFRNTCA9IHRhZy5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0VsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGFnLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGFnLmNzc1RleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB0YWdbYXR0cmlidXRlXSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB0YWdbYXR0cmlidXRlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShIRUxNRVRfQVRUUklCVVRFLCBcInRydWVcIik7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBhIGR1cGxpY2F0ZSB0YWcgZnJvbSBkb21UYWdzdG9SZW1vdmUsIHNvIGl0IGlzbid0IGNsZWFyZWQuXG4gICAgICAgICAgICBpZiAob2xkVGFncy5zb21lKGZ1bmN0aW9uIChleGlzdGluZ1RhZywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpbmRleFRvRGVsZXRlID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VsZW1lbnQuaXNFcXVhbE5vZGUoZXhpc3RpbmdUYWcpO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBvbGRUYWdzLnNwbGljZShpbmRleFRvRGVsZXRlLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3VGFncy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbGRUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICBuZXdUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gaGVhZEVsZW1lbnQuYXBwZW5kQ2hpbGQodGFnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9sZFRhZ3M6IG9sZFRhZ3MsXG4gICAgICAgIG5ld1RhZ3M6IG5ld1RhZ3NcbiAgICB9O1xufTtcblxudmFyIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyA9IGZ1bmN0aW9uIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBrZXkpIHtcbiAgICAgICAgdmFyIGF0dHIgPSB0eXBlb2YgYXR0cmlidXRlc1trZXldICE9PSBcInVuZGVmaW5lZFwiID8ga2V5ICsgXCI9XFxcIlwiICsgYXR0cmlidXRlc1trZXldICsgXCJcXFwiXCIgOiBcIlwiICsga2V5O1xuICAgICAgICByZXR1cm4gc3RyID8gc3RyICsgXCIgXCIgKyBhdHRyIDogYXR0cjtcbiAgICB9LCBcIlwiKTtcbn07XG5cbnZhciBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcgPSBmdW5jdGlvbiBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcodHlwZSwgdGl0bGUsIGF0dHJpYnV0ZXMsIGVuY29kZSkge1xuICAgIHZhciBhdHRyaWJ1dGVTdHJpbmcgPSBnZW5lcmF0ZUVsZW1lbnRBdHRyaWJ1dGVzQXNTdHJpbmcoYXR0cmlidXRlcyk7XG4gICAgdmFyIGZsYXR0ZW5lZFRpdGxlID0gZmxhdHRlbkFycmF5KHRpdGxlKTtcbiAgICByZXR1cm4gYXR0cmlidXRlU3RyaW5nID8gXCI8XCIgKyB0eXBlICsgXCIgXCIgKyBIRUxNRVRfQVRUUklCVVRFICsgXCI9XFxcInRydWVcXFwiIFwiICsgYXR0cmlidXRlU3RyaW5nICsgXCI+XCIgKyBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyhmbGF0dGVuZWRUaXRsZSwgZW5jb2RlKSArIFwiPC9cIiArIHR5cGUgKyBcIj5cIiA6IFwiPFwiICsgdHlwZSArIFwiIFwiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiPVxcXCJ0cnVlXFxcIj5cIiArIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzKGZsYXR0ZW5lZFRpdGxlLCBlbmNvZGUpICsgXCI8L1wiICsgdHlwZSArIFwiPlwiO1xufTtcblxudmFyIGdlbmVyYXRlVGFnc0FzU3RyaW5nID0gZnVuY3Rpb24gZ2VuZXJhdGVUYWdzQXNTdHJpbmcodHlwZSwgdGFncywgZW5jb2RlKSB7XG4gICAgcmV0dXJuIHRhZ3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIHRhZykge1xuICAgICAgICB2YXIgYXR0cmlidXRlSHRtbCA9IE9iamVjdC5rZXlzKHRhZykuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhKGF0dHJpYnV0ZSA9PT0gVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTCB8fCBhdHRyaWJ1dGUgPT09IFRBR19QUk9QRVJUSUVTLkNTU19URVhUKTtcbiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChzdHJpbmcsIGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSB0eXBlb2YgdGFnW2F0dHJpYnV0ZV0gPT09IFwidW5kZWZpbmVkXCIgPyBhdHRyaWJ1dGUgOiBhdHRyaWJ1dGUgKyBcIj1cXFwiXCIgKyBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyh0YWdbYXR0cmlidXRlXSwgZW5jb2RlKSArIFwiXFxcIlwiO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyA/IHN0cmluZyArIFwiIFwiICsgYXR0ciA6IGF0dHI7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gICAgICAgIHZhciB0YWdDb250ZW50ID0gdGFnLmlubmVySFRNTCB8fCB0YWcuY3NzVGV4dCB8fCBcIlwiO1xuXG4gICAgICAgIHZhciBpc1NlbGZDbG9zaW5nID0gU0VMRl9DTE9TSU5HX1RBR1MuaW5kZXhPZih0eXBlKSA9PT0gLTE7XG5cbiAgICAgICAgcmV0dXJuIHN0ciArIFwiPFwiICsgdHlwZSArIFwiIFwiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiPVxcXCJ0cnVlXFxcIiBcIiArIGF0dHJpYnV0ZUh0bWwgKyAoaXNTZWxmQ2xvc2luZyA/IFwiLz5cIiA6IFwiPlwiICsgdGFnQ29udGVudCArIFwiPC9cIiArIHR5cGUgKyBcIj5cIik7XG4gICAgfSwgXCJcIik7XG59O1xuXG52YXIgY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzID0gZnVuY3Rpb24gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgaW5pdFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgICAgIG9ialtSRUFDVF9UQUdfTUFQW2tleV0gfHwga2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCBpbml0UHJvcHMpO1xufTtcblxudmFyIGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyA9IGZ1bmN0aW9uIGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyhwcm9wcykge1xuICAgIHZhciBpbml0QXR0cmlidXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICAgICAgb2JqW0hUTUxfVEFHX01BUFtrZXldIHx8IGtleV0gPSBwcm9wc1trZXldO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sIGluaXRBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciBnZW5lcmF0ZVRpdGxlQXNSZWFjdENvbXBvbmVudCA9IGZ1bmN0aW9uIGdlbmVyYXRlVGl0bGVBc1JlYWN0Q29tcG9uZW50KHR5cGUsIHRpdGxlLCBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIF9pbml0UHJvcHM7XG5cbiAgICAvLyBhc3NpZ25pbmcgaW50byBhbiBhcnJheSB0byBkZWZpbmUgdG9TdHJpbmcgZnVuY3Rpb24gb24gaXRcbiAgICB2YXIgaW5pdFByb3BzID0gKF9pbml0UHJvcHMgPSB7XG4gICAgICAgIGtleTogdGl0bGVcbiAgICB9LCBfaW5pdFByb3BzW0hFTE1FVF9BVFRSSUJVVEVdID0gdHJ1ZSwgX2luaXRQcm9wcyk7XG4gICAgdmFyIHByb3BzID0gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKGF0dHJpYnV0ZXMsIGluaXRQcm9wcyk7XG5cbiAgICByZXR1cm4gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoVEFHX05BTUVTLlRJVExFLCBwcm9wcywgdGl0bGUpXTtcbn07XG5cbnZhciBnZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50ID0gZnVuY3Rpb24gZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudCh0eXBlLCB0YWdzKSB7XG4gICAgcmV0dXJuIHRhZ3MubWFwKGZ1bmN0aW9uICh0YWcsIGkpIHtcbiAgICAgICAgdmFyIF9tYXBwZWRUYWc7XG5cbiAgICAgICAgdmFyIG1hcHBlZFRhZyA9IChfbWFwcGVkVGFnID0ge1xuICAgICAgICAgICAga2V5OiBpXG4gICAgICAgIH0sIF9tYXBwZWRUYWdbSEVMTUVUX0FUVFJJQlVURV0gPSB0cnVlLCBfbWFwcGVkVGFnKTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0YWcpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIG1hcHBlZEF0dHJpYnV0ZSA9IFJFQUNUX1RBR19NQVBbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7XG5cbiAgICAgICAgICAgIGlmIChtYXBwZWRBdHRyaWJ1dGUgPT09IFRBR19QUk9QRVJUSUVTLklOTkVSX0hUTUwgfHwgbWFwcGVkQXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGFnLmlubmVySFRNTCB8fCB0YWcuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICBtYXBwZWRUYWcuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPSB7IF9faHRtbDogY29udGVudCB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXBwZWRUYWdbbWFwcGVkQXR0cmlidXRlXSA9IHRhZ1thdHRyaWJ1dGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0eXBlLCBtYXBwZWRUYWcpO1xuICAgIH0pO1xufTtcblxudmFyIGdldE1ldGhvZHNGb3JUYWcgPSBmdW5jdGlvbiBnZXRNZXRob2RzRm9yVGFnKHR5cGUsIHRhZ3MsIGVuY29kZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFRBR19OQU1FUy5USVRMRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9Db21wb25lbnQ6IGZ1bmN0aW9uIHRvQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVUaXRsZUFzUmVhY3RDb21wb25lbnQodHlwZSwgdGFncy50aXRsZSwgdGFncy50aXRsZUF0dHJpYnV0ZXMsIGVuY29kZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRpdGxlQXNTdHJpbmcodHlwZSwgdGFncy50aXRsZSwgdGFncy50aXRsZUF0dHJpYnV0ZXMsIGVuY29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBVFRSSUJVVEVfTkFNRVMuQk9EWTpcbiAgICAgICAgY2FzZSBBVFRSSUJVVEVfTkFNRVMuSFRNTDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9Db21wb25lbnQ6IGZ1bmN0aW9uIHRvQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydEVsZW1lbnRBdHRyaWJ1dGVzdG9SZWFjdFByb3BzKHRhZ3MpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nKHRhZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvQ29tcG9uZW50OiBmdW5jdGlvbiB0b0NvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlVGFnc0FzUmVhY3RDb21wb25lbnQodHlwZSwgdGFncyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRhZ3NBc1N0cmluZyh0eXBlLCB0YWdzLCBlbmNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgfVxufTtcblxudmFyIG1hcFN0YXRlT25TZXJ2ZXIgPSBmdW5jdGlvbiBtYXBTdGF0ZU9uU2VydmVyKF9yZWYpIHtcbiAgICB2YXIgYmFzZVRhZyA9IF9yZWYuYmFzZVRhZyxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXMgPSBfcmVmLmJvZHlBdHRyaWJ1dGVzLFxuICAgICAgICBlbmNvZGUgPSBfcmVmLmVuY29kZSxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXMgPSBfcmVmLmh0bWxBdHRyaWJ1dGVzLFxuICAgICAgICBsaW5rVGFncyA9IF9yZWYubGlua1RhZ3MsXG4gICAgICAgIG1ldGFUYWdzID0gX3JlZi5tZXRhVGFncyxcbiAgICAgICAgbm9zY3JpcHRUYWdzID0gX3JlZi5ub3NjcmlwdFRhZ3MsXG4gICAgICAgIHNjcmlwdFRhZ3MgPSBfcmVmLnNjcmlwdFRhZ3MsXG4gICAgICAgIHN0eWxlVGFncyA9IF9yZWYuc3R5bGVUYWdzLFxuICAgICAgICBfcmVmJHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgICAgdGl0bGUgPSBfcmVmJHRpdGxlID09PSB1bmRlZmluZWQgPyBcIlwiIDogX3JlZiR0aXRsZSxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzID0gX3JlZi50aXRsZUF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuQkFTRSwgYmFzZVRhZywgZW5jb2RlKSxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXM6IGdldE1ldGhvZHNGb3JUYWcoQVRUUklCVVRFX05BTUVTLkJPRFksIGJvZHlBdHRyaWJ1dGVzLCBlbmNvZGUpLFxuICAgICAgICBodG1sQXR0cmlidXRlczogZ2V0TWV0aG9kc0ZvclRhZyhBVFRSSUJVVEVfTkFNRVMuSFRNTCwgaHRtbEF0dHJpYnV0ZXMsIGVuY29kZSksXG4gICAgICAgIGxpbms6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLkxJTkssIGxpbmtUYWdzLCBlbmNvZGUpLFxuICAgICAgICBtZXRhOiBnZXRNZXRob2RzRm9yVGFnKFRBR19OQU1FUy5NRVRBLCBtZXRhVGFncywgZW5jb2RlKSxcbiAgICAgICAgbm9zY3JpcHQ6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLk5PU0NSSVBULCBub3NjcmlwdFRhZ3MsIGVuY29kZSksXG4gICAgICAgIHNjcmlwdDogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuU0NSSVBULCBzY3JpcHRUYWdzLCBlbmNvZGUpLFxuICAgICAgICBzdHlsZTogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuU1RZTEUsIHN0eWxlVGFncywgZW5jb2RlKSxcbiAgICAgICAgdGl0bGU6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLlRJVExFLCB7IHRpdGxlOiB0aXRsZSwgdGl0bGVBdHRyaWJ1dGVzOiB0aXRsZUF0dHJpYnV0ZXMgfSwgZW5jb2RlKVxuICAgIH07XG59O1xuXG52YXIgSGVsbWV0ID0gZnVuY3Rpb24gSGVsbWV0KENvbXBvbmVudCkge1xuICAgIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gICAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICAgaW5oZXJpdHMoSGVsbWV0V3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgICAgZnVuY3Rpb24gSGVsbWV0V3JhcHBlcigpIHtcbiAgICAgICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEhlbG1ldFdyYXBwZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLm1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyhjaGlsZCwgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICghbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU0NSSVBUOlxuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLk5PU0NSSVBUOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU1RZTEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0OiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCI8XCIgKyBjaGlsZC50eXBlICsgXCIgLz4gZWxlbWVudHMgYXJlIHNlbGYtY2xvc2luZyBhbmQgY2FuIG5vdCBjb250YWluIGNoaWxkcmVuLiBSZWZlciB0byBvdXIgQVBJIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5mbGF0dGVuQXJyYXlUeXBlQ2hpbGRyZW4gPSBmdW5jdGlvbiBmbGF0dGVuQXJyYXlUeXBlQ2hpbGRyZW4oX3JlZikge1xuICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcztcblxuICAgICAgICAgICAgdmFyIGNoaWxkID0gX3JlZi5jaGlsZCxcbiAgICAgICAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbiA9IF9yZWYuYXJyYXlUeXBlQ2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IF9yZWYubmV3Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgICAgICBuZXN0ZWRDaGlsZHJlbiA9IF9yZWYubmVzdGVkQ2hpbGRyZW47XG5cbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJyYXlUeXBlQ2hpbGRyZW4sIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzW2NoaWxkLnR5cGVdID0gW10uY29uY2F0KGFycmF5VHlwZUNoaWxkcmVuW2NoaWxkLnR5cGVdIHx8IFtdLCBbX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMsIHRoaXMubWFwTmVzdGVkQ2hpbGRyZW5Ub1Byb3BzKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbikpXSksIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLm1hcE9iamVjdFR5cGVDaGlsZHJlbiA9IGZ1bmN0aW9uIG1hcE9iamVjdFR5cGVDaGlsZHJlbihfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczIsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczM7XG5cbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9yZWYyLmNoaWxkLFxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gX3JlZjIubmV3UHJvcHMsXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IF9yZWYyLm5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICAgICAgbmVzdGVkQ2hpbGRyZW4gPSBfcmVmMi5uZXN0ZWRDaGlsZHJlbjtcblxuICAgICAgICAgICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuVElUTEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbmV3UHJvcHMsIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMyID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczJbY2hpbGQudHlwZV0gPSBuZXN0ZWRDaGlsZHJlbiwgX2JhYmVsSGVscGVycyRleHRlbmRzMi50aXRsZUF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgbmV3Q2hpbGRQcm9wcyksIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczIpKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLkJPRFk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbmV3UHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgbmV3Q2hpbGRQcm9wcylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5IVE1MOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sQXR0cmlidXRlczogX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzMyA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMzW2NoaWxkLnR5cGVdID0gX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUubWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzID0gZnVuY3Rpb24gbWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzKGFycmF5VHlwZUNoaWxkcmVuLCBuZXdQcm9wcykge1xuICAgICAgICAgICAgdmFyIG5ld0ZsYXR0ZW5lZFByb3BzID0gX2V4dGVuZHMoe30sIG5ld1Byb3BzKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoYXJyYXlUeXBlQ2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGFycmF5Q2hpbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQ7XG5cbiAgICAgICAgICAgICAgICBuZXdGbGF0dGVuZWRQcm9wcyA9IF9leHRlbmRzKHt9LCBuZXdGbGF0dGVuZWRQcm9wcywgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzNFthcnJheUNoaWxkTmFtZV0gPSBhcnJheVR5cGVDaGlsZHJlblthcnJheUNoaWxkTmFtZV0sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczQpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3RmxhdHRlbmVkUHJvcHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUud2Fybk9uSW52YWxpZENoaWxkcmVuID0gZnVuY3Rpb24gd2Fybk9uSW52YWxpZENoaWxkcmVuKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGlmICghVkFMSURfVEFHX05BTUVTLnNvbWUoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnR5cGUgPT09IG5hbWU7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZC50eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKFwiWW91IG1heSBiZSBhdHRlbXB0aW5nIHRvIG5lc3QgPEhlbG1ldD4gY29tcG9uZW50cyB3aXRoaW4gZWFjaCBvdGhlciwgd2hpY2ggaXMgbm90IGFsbG93ZWQuIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhcm4oXCJPbmx5IGVsZW1lbnRzIHR5cGVzIFwiICsgVkFMSURfVEFHX05BTUVTLmpvaW4oXCIsIFwiKSArIFwiIGFyZSBhbGxvd2VkLiBIZWxtZXQgZG9lcyBub3Qgc3VwcG9ydCByZW5kZXJpbmcgPFwiICsgY2hpbGQudHlwZSArIFwiPiBlbGVtZW50cy4gUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZENoaWxkcmVuICYmIHR5cGVvZiBuZXN0ZWRDaGlsZHJlbiAhPT0gXCJzdHJpbmdcIiAmJiAoIUFycmF5LmlzQXJyYXkobmVzdGVkQ2hpbGRyZW4pIHx8IG5lc3RlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKG5lc3RlZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgbmVzdGVkQ2hpbGQgIT09IFwic3RyaW5nXCI7XG4gICAgICAgICAgICAgICAgfSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhlbG1ldCBleHBlY3RzIGEgc3RyaW5nIGFzIGEgY2hpbGQgb2YgPFwiICsgY2hpbGQudHlwZSArIFwiPi4gRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIGNoaWxkcmVuIGluIGJyYWNlcz8gKCA8XCIgKyBjaGlsZC50eXBlICsgXCI+e2BgfTwvXCIgKyBjaGlsZC50eXBlICsgXCI+ICkgUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5tYXBDaGlsZHJlblRvUHJvcHMgPSBmdW5jdGlvbiBtYXBDaGlsZHJlblRvUHJvcHMoY2hpbGRyZW4sIG5ld1Byb3BzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGFycmF5VHlwZUNoaWxkcmVuID0ge307XG5cbiAgICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuID0gX2NoaWxkJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZFByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2NoaWxkJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IGNvbnZlcnRSZWFjdFByb3BzdG9IdG1sQXR0cmlidXRlcyhjaGlsZFByb3BzKTtcblxuICAgICAgICAgICAgICAgIF90aGlzMi53YXJuT25JbnZhbGlkQ2hpbGRyZW4oY2hpbGQsIG5lc3RlZENoaWxkcmVuKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5MSU5LOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5NRVRBOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5OT1NDUklQVDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU0NSSVBUOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5TVFlMRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5VHlwZUNoaWxkcmVuID0gX3RoaXMyLmZsYXR0ZW5BcnJheVR5cGVDaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5VHlwZUNoaWxkcmVuOiBhcnJheVR5cGVDaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZFByb3BzOiBuZXdDaGlsZFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHMgPSBfdGhpczIubWFwT2JqZWN0VHlwZUNoaWxkcmVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHM6IG5ld1Byb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkUHJvcHM6IG5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkQ2hpbGRyZW46IG5lc3RlZENoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBuZXdQcm9wcyA9IHRoaXMubWFwQXJyYXlUeXBlQ2hpbGRyZW5Ub1Byb3BzKGFycmF5VHlwZUNoaWxkcmVuLCBuZXdQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3UHJvcHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgcHJvcHMgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgICAgICAgICAgdmFyIG5ld1Byb3BzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0aGlzLm1hcENoaWxkcmVuVG9Qcm9wcyhjaGlsZHJlbiwgbmV3UHJvcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIG5ld1Byb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjcmVhdGVDbGFzcyhIZWxtZXRXcmFwcGVyLCBudWxsLCBbe1xuICAgICAgICAgICAga2V5OiBcImNhblVzZURPTVwiLFxuXG5cbiAgICAgICAgICAgIC8vIENvbXBvbmVudC5wZWVrIGNvbWVzIGZyb20gcmVhY3Qtc2lkZS1lZmZlY3Q6XG4gICAgICAgICAgICAvLyBGb3IgdGVzdGluZywgeW91IG1heSB1c2UgYSBzdGF0aWMgcGVlaygpIG1ldGhvZCBhdmFpbGFibGUgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudC5cbiAgICAgICAgICAgIC8vIEl0IGxldHMgeW91IGdldCB0aGUgY3VycmVudCBzdGF0ZSB3aXRob3V0IHJlc2V0dGluZyB0aGUgbW91bnRlZCBpbnN0YW5jZSBzdGFjay5cbiAgICAgICAgICAgIC8vIERvbuKAmXQgdXNlIGl0IGZvciBhbnl0aGluZyBvdGhlciB0aGFuIHRlc3RpbmcuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGJhc2U6IHtcInRhcmdldFwiOiBcIl9ibGFua1wiLCBcImhyZWZcIjogXCJodHRwOi8vbXlzaXRlLmNvbS9cIn1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBib2R5QXR0cmlidXRlczoge1wiY2xhc3NOYW1lXCI6IFwicm9vdFwifVxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRlZmF1bHRUaXRsZTogXCJEZWZhdWx0IFRpdGxlXCJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGVmZXI6IHRydWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jb2RlU3BlY2lhbENoYXJhY3RlcnM6IHRydWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBodG1sQXR0cmlidXRlczoge1wibGFuZ1wiOiBcImVuXCIsIFwiYW1wXCI6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGxpbms6IFt7XCJyZWxcIjogXCJjYW5vbmljYWxcIiwgXCJocmVmXCI6IFwiaHR0cDovL215c2l0ZS5jb20vZXhhbXBsZVwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG1ldGE6IFt7XCJuYW1lXCI6IFwiZGVzY3JpcHRpb25cIiwgXCJjb250ZW50XCI6IFwiVGVzdCBkZXNjcmlwdGlvblwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG5vc2NyaXB0OiBbe1wiaW5uZXJIVE1MXCI6IFwiPGltZyBzcmM9J2h0dHA6Ly9teXNpdGUuY29tL2pzL3Rlc3QuanMnXCJ9XVxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25DaGFuZ2VDbGllbnRTdGF0ZTogXCIobmV3U3RhdGUpID0+IGNvbnNvbGUubG9nKG5ld1N0YXRlKVwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzY3JpcHQ6IFt7XCJ0eXBlXCI6IFwidGV4dC9qYXZhc2NyaXB0XCIsIFwic3JjXCI6IFwiaHR0cDovL215c2l0ZS5jb20vanMvdGVzdC5qc1wifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHN0eWxlOiBbe1widHlwZVwiOiBcInRleHQvY3NzXCIsIFwiY3NzVGV4dFwiOiBcImRpdiB7IGRpc3BsYXk6IGJsb2NrOyBjb2xvcjogYmx1ZTsgfVwifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZTogXCJUaXRsZVwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGl0bGVBdHRyaWJ1dGVzOiB7XCJpdGVtcHJvcFwiOiBcIm5hbWVcIn1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZVRlbXBsYXRlOiBcIk15U2l0ZS5jb20gLSAlc1wiXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKGNhblVzZURPTSkge1xuICAgICAgICAgICAgICAgIENvbXBvbmVudC5jYW5Vc2VET00gPSBjYW5Vc2VET007XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIEhlbG1ldFdyYXBwZXI7XG4gICAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MucHJvcFR5cGVzID0ge1xuICAgICAgICBiYXNlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICBib2R5QXR0cmlidXRlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSwgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICAgICAgZGVmYXVsdFRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZWZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIGxpbms6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICBtZXRhOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgbm9zY3JpcHQ6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICBvbkNoYW5nZUNsaWVudFN0YXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgc2NyaXB0OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgc3R5bGU6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgdGl0bGVBdHRyaWJ1dGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICB0aXRsZVRlbXBsYXRlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgZGVmZXI6IHRydWUsXG4gICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlXG4gICAgfSwgX2NsYXNzLnBlZWsgPSBDb21wb25lbnQucGVlaywgX2NsYXNzLnJld2luZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcHBlZFN0YXRlID0gQ29tcG9uZW50LnJld2luZCgpO1xuICAgICAgICBpZiAoIW1hcHBlZFN0YXRlKSB7XG4gICAgICAgICAgICAvLyBwcm92aWRlIGZhbGxiYWNrIGlmIG1hcHBlZFN0YXRlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgbWFwcGVkU3RhdGUgPSBtYXBTdGF0ZU9uU2VydmVyKHtcbiAgICAgICAgICAgICAgICBiYXNlVGFnOiBbXSxcbiAgICAgICAgICAgICAgICBib2R5QXR0cmlidXRlczoge30sXG4gICAgICAgICAgICAgICAgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgICAgICAgIGxpbmtUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBtZXRhVGFnczogW10sXG4gICAgICAgICAgICAgICAgbm9zY3JpcHRUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBzY3JpcHRUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICBzdHlsZVRhZ3M6IFtdLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICAgICAgICAgIHRpdGxlQXR0cmlidXRlczoge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcHBlZFN0YXRlO1xuICAgIH0sIF90ZW1wO1xufTtcblxudmFyIE51bGxDb21wb25lbnQgPSBmdW5jdGlvbiBOdWxsQ29tcG9uZW50KCkge1xuICAgIHJldHVybiBudWxsO1xufTtcblxudmFyIEhlbG1ldFNpZGVFZmZlY3RzID0gd2l0aFNpZGVFZmZlY3QocmVkdWNlUHJvcHNUb1N0YXRlLCBoYW5kbGVDbGllbnRTdGF0ZUNoYW5nZSwgbWFwU3RhdGVPblNlcnZlcikoTnVsbENvbXBvbmVudCk7XG5cbnZhciBIZWxtZXRFeHBvcnQgPSBIZWxtZXQoSGVsbWV0U2lkZUVmZmVjdHMpO1xuSGVsbWV0RXhwb3J0LnJlbmRlclN0YXRpYyA9IEhlbG1ldEV4cG9ydC5yZXdpbmQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhlbG1ldEV4cG9ydDtcbmV4cG9ydCB7IEhlbG1ldEV4cG9ydCBhcyBIZWxtZXQgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgSGVsbWV0IH0gZnJvbSBcInJlYWN0LWhlbG1ldFwiO1xyXG5pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbnRlcmZhY2UgSUhlYWRJbmZvUHJvcHMge1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gIGltYWdlPzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBIZWFkSW5mbyA9ICh7IHRpdGxlLCBkZXNjcmlwdGlvbiwgaW1hZ2UgfTogSUhlYWRJbmZvUHJvcHMpID0+IHtcclxuICBjb25zdCB7IHBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEhlbG1ldD5cclxuICAgICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxyXG5cclxuICAgICAgPG1ldGEgbmFtZT1cImtleXdvcmRcIiBjb250ZW50PVwiYmxlZmxpeCwgY2xvbmUsIG5ldGZsaXhcIiAvPlxyXG4gICAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PXtkZXNjcmlwdGlvbn0gLz5cclxuICAgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCIxLWJsdWVcIiAvPlxyXG5cclxuICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp1cmxcIiBjb250ZW50PXtgaHR0cHM6Ly8xLWJsdWUuZ2l0aHViLmlvL3JlYWN0LWNsb25lLXByb2plY3Qke3BhdGhuYW1lfWB9IC8+XHJcbiAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiYmxlZmxpeFwiIC8+XHJcbiAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PXtkZXNjcmlwdGlvbn0gLz5cclxuICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9e2ltYWdlfSAvPlxyXG4gICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XHJcbiAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6c2l0ZV9uYW1lXCIgY29udGVudD1cImJsZWZsaXhcIiAvPlxyXG4gICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmxvY2FsZVwiIGNvbnRlbnQ9XCJrb19LUlwiIC8+XHJcbiAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2U6d2lkdGhcIiBjb250ZW50PVwiNDg2XCIgLz5cclxuICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZTpoZWlnaHRcIiBjb250ZW50PVwiNjAwXCIgLz5cclxuICAgIDwvSGVsbWV0PlxyXG4gICk7XHJcbn07XHJcblxyXG5IZWFkSW5mby5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgdGl0bGU6IFwiYmxlZmxpeFwiLFxyXG4gIGRlc2NyaXB0aW9uOiBcImJsZWZsaXgsIGNsb25lLCBuZXRmbGl4XCIsXHJcbiAgaW1hZ2U6IFwiaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzYzMjg5MzE4P3Y9NFwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZEluZm87XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tIFwicmVjb2lsXCI7XHJcblxyXG4vLyB0eXBlc1xyXG5pbXBvcnQgeyBJVEVNX0tJTkRTIH0gZnJvbSBcIkBzcmMvdHlwZXNcIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgbWFpbk1vdmllU3RhdGUgfSBmcm9tIFwiQHNyYy9hdG9tc1wiO1xyXG5cclxuLy8gY29tcG9uZW50c1xyXG5pbXBvcnQgQmVubmVyIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvQmVubmVyXCI7XHJcbmltcG9ydCBNb2RhbCBmcm9tIFwiQHNyYy9jb21wb25lbnRzL01vZGFsXCI7XHJcbmltcG9ydCBUdkNhcm91c2VscyBmcm9tIFwiQHNyYy9jb21wb25lbnRzL1R2Q2Fyb3VzZWxzXCI7XHJcbmltcG9ydCBNb3ZpZUNhcm91c2VscyBmcm9tIFwiQHNyYy9jb21wb25lbnRzL01vdmllQ2Fyb3VzZWxzXCI7XHJcblxyXG5pbXBvcnQgSGVhZEluZm8gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9jb21tb24vSGVhZEluZm9cIjtcclxuXHJcbmNvbnN0IEhvbWUgPSAoKSA9PiB7XHJcbiAgY29uc3QgeyBtb3ZpZUlkLCB0dklkIH0gPSB1c2VQYXJhbXM8eyBtb3ZpZUlkOiBzdHJpbmc7IHR2SWQ6IHN0cmluZyB9PigpO1xyXG4gIGNvbnN0IG1haW5Nb3ZpZSA9IHVzZVJlY29pbFZhbHVlKG1haW5Nb3ZpZVN0YXRlKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIZWFkSW5mbyB0aXRsZT1cImJsZWZsaXggLSBob21lXCIgaW1hZ2U9e21haW5Nb3ZpZT8uYmFja2Ryb3BfcGF0aCB8fCBtYWluTW92aWU/LnBvc3Rlcl9wYXRofSAvPlxyXG5cclxuICAgICAgey8qIDHsnIQgfiAyMOychOydmCDsnbjquLDsmIHtmZTspJEg656c642k7Jy866GcIOuplOyduO2ZlOuptOycvOuhnCDrs7Tsl6zspIwgKi99XHJcbiAgICAgIDxCZW5uZXIgaXRlbT17bWFpbk1vdmllfSAvPlxyXG5cclxuICAgICAgPE1vdmllQ2Fyb3VzZWxzIC8+XHJcblxyXG4gICAgICA8VHZDYXJvdXNlbHMgLz5cclxuXHJcbiAgICAgIHsvKiDsmIHtmZQgb3IgVFYg7IOB7IS4IOuqqOuLrCAqL31cclxuICAgICAge21vdmllSWQgPyA8TW9kYWwga2luZHM9e0lURU1fS0lORFMuTU9WSUV9IGl0ZW1JZD17bW92aWVJZH0gLz4gOiBudWxsfVxyXG4gICAgICB7dHZJZCA/IDxNb2RhbCBraW5kcz17SVRFTV9LSU5EUy5UVn0gaXRlbUlkPXt0dklkfSAvPiA6IG51bGx9XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gXCJyZWNvaWxcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbi8vIGNvbXBvbmVudHNcclxuaW1wb3J0IEJlbm5lciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL0Jlbm5lclwiO1xyXG5pbXBvcnQgVHZDYXJvdXNlbHMgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9UdkNhcm91c2Vsc1wiO1xyXG5pbXBvcnQgSGVhZEluZm8gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9jb21tb24vSGVhZEluZm9cIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgbWFpblR2U3RhdGUgfSBmcm9tIFwiQHNyYy9hdG9tc1wiO1xyXG5pbXBvcnQgTW9kYWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9Nb2RhbFwiO1xyXG5pbXBvcnQgeyBJVEVNX0tJTkRTIH0gZnJvbSBcIkBzcmMvdHlwZXNcIjtcclxuXHJcbmNvbnN0IFR2cyA9ICgpID0+IHtcclxuICBjb25zdCB7IHR2SWQgfSA9IHVzZVBhcmFtczx7IHR2SWQ6IHN0cmluZyB9PigpO1xyXG4gIGNvbnN0IG1haW5UdiA9IHVzZVJlY29pbFZhbHVlKG1haW5UdlN0YXRlKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIZWFkSW5mbyB0aXRsZT1cImJsZWZsaXggLSB0dnNcIiBpbWFnZT17bWFpblR2Py5iYWNrZHJvcF9wYXRoIHx8IG1haW5Udj8ucG9zdGVyX3BhdGh9IC8+XHJcblxyXG4gICAgICA8QmVubmVyIGl0ZW09e21haW5Udn0gLz5cclxuICAgICAgPFR2Q2Fyb3VzZWxzIC8+XHJcblxyXG4gICAgICB7LyogIFRWIOyDgeyEuCDrqqjri6wgKi99XHJcbiAgICAgIHt0dklkID8gPE1vZGFsIGtpbmRzPXtJVEVNX0tJTkRTLlRWfSBpdGVtSWQ9e3R2SWR9IC8+IDogbnVsbH1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUdnM7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tIFwicmVjb2lsXCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG4vLyBjb21wb25lbnRcclxuaW1wb3J0IEJlbm5lciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL0Jlbm5lclwiO1xyXG5pbXBvcnQgTW92aWVDYXJvdXNlbHMgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9Nb3ZpZUNhcm91c2Vsc1wiO1xyXG5pbXBvcnQgTW9kYWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9Nb2RhbFwiO1xyXG5pbXBvcnQgSGVhZEluZm8gZnJvbSBcIkBzcmMvY29tcG9uZW50cy9jb21tb24vSGVhZEluZm9cIjtcclxuXHJcbi8vIGF0b21cclxuaW1wb3J0IHsgbWFpbk1vdmllU3RhdGUgfSBmcm9tIFwiQHNyYy9hdG9tc1wiO1xyXG5cclxuLy8gdHlwZVxyXG5pbXBvcnQgeyBJVEVNX0tJTkRTIH0gZnJvbSBcIkBzcmMvdHlwZXNcIjtcclxuXHJcbmNvbnN0IE1vdmllcyA9ICgpID0+IHtcclxuICBjb25zdCB7IG1vdmllSWQgfSA9IHVzZVBhcmFtczx7IG1vdmllSWQ6IHN0cmluZyB9PigpO1xyXG4gIGNvbnN0IG1haW5Nb3ZpZSA9IHVzZVJlY29pbFZhbHVlKG1haW5Nb3ZpZVN0YXRlKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIZWFkSW5mbyB0aXRsZT1cImJsZWZsaXggLSBtb3ZpZXNcIiBpbWFnZT17bWFpbk1vdmllPy5iYWNrZHJvcF9wYXRoIHx8IG1haW5Nb3ZpZT8ucG9zdGVyX3BhdGh9IC8+XHJcblxyXG4gICAgICA8QmVubmVyIGl0ZW09e21haW5Nb3ZpZX0gLz5cclxuICAgICAgPE1vdmllQ2Fyb3VzZWxzIC8+XHJcblxyXG4gICAgICB7LyogIFRWIOyDgeyEuCDrqqjri6wgKi99XHJcbiAgICAgIHttb3ZpZUlkID8gPE1vZGFsIGtpbmRzPXtJVEVNX0tJTkRTLk1PVklFfSBpdGVtSWQ9e21vdmllSWR9IC8+IDogbnVsbH1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb3ZpZXM7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zLCB1c2VMb2NhdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XHJcblxyXG4vLyBmZXRjaGVyXHJcbmltcG9ydCB7IHNlYXJjaEZldGNoZXIgfSBmcm9tIFwiQHNyYy9hcGlcIjtcclxuXHJcbi8vIGNvbW1vbi1jb21wb25lbnRcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL2NvbW1vbi9Mb2FkZXJcIjtcclxuaW1wb3J0IEhlYWRJbmZvIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvY29tbW9uL0hlYWRJbmZvXCI7XHJcblxyXG4vLyBjb21wb25lbnRcclxuaW1wb3J0IEJlbm5lciBmcm9tIFwiQHNyYy9jb21wb25lbnRzL0Jlbm5lclwiO1xyXG5cclxuLy8gdHlwZVxyXG5pbXBvcnQgeyBJU2VhcmNoSXRlbXMsIElURU1fS0lORFMgfSBmcm9tIFwiQHNyYy90eXBlc1wiO1xyXG5pbXBvcnQgQ2Fyb3VzZWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9DYXJvdXNlbFwiO1xyXG5pbXBvcnQgTW9kYWwgZnJvbSBcIkBzcmMvY29tcG9uZW50cy9Nb2RhbFwiO1xyXG5cclxuY29uc3QgU2VhcmNoID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgaXRlbUlkIH0gPSB1c2VQYXJhbXM8eyBpdGVtSWQ6IHN0cmluZyB9PigpO1xyXG4gIGNvbnN0IHsgcXVlcnkgfSA9IHVzZVBhcmFtczx7IHF1ZXJ5OiBzdHJpbmcgfT4oKTtcclxuICBjb25zdCB7IGRhdGE6IGl0ZW1zLCBpc0xvYWRpbmcgfSA9IHVzZVF1ZXJ5PElTZWFyY2hJdGVtcz4oW1wic2VhcmNoXCIsIHF1ZXJ5XSwgKCkgPT5cclxuICAgIHNlYXJjaEZldGNoZXIoeyBxdWVyeTogcXVlcnkgKyBcIlwiIH0pLFxyXG4gICk7XHJcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xyXG4gIGNvbnN0IHN0YXRlID0gbG9jYXRpb24uc3RhdGUgYXMgeyBtZWRpYV90eXBlOiBJVEVNX0tJTkRTIH07XHJcblxyXG4gIGlmICghaXRlbXMgfHwgaXNMb2FkaW5nKSByZXR1cm4gPExvYWRlciAvPjtcclxuXHJcbiAgY29uc3QgZmlsdGVyZWRJdGVtcyA9IGl0ZW1zLnJlc3VsdHMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5iYWNrZHJvcF9wYXRoKTtcclxuICBjb25zdCBmaWx0ZXJlZE1vdmllcyA9IGZpbHRlcmVkSXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5tZWRpYV90eXBlID09PSBJVEVNX0tJTkRTLk1PVklFKTtcclxuICBjb25zdCBmaWx0ZXJlZFR2ID0gZmlsdGVyZWRJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLm1lZGlhX3R5cGUgPT09IElURU1fS0lORFMuVFYpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPEhlYWRJbmZvIHRpdGxlPVwiYmxlZmxpeCAtIHNlYXJjaFwiIGltYWdlPXtmaWx0ZXJlZEl0ZW1zWzBdLmJhY2tkcm9wX3BhdGh9IC8+XHJcblxyXG4gICAgICA8QmVubmVyIGl0ZW09e2ZpbHRlcmVkSXRlbXNbMF19IC8+XHJcblxyXG4gICAgICB7ZmlsdGVyZWRNb3ZpZXMubGVuZ3RoID49IDEgJiYgKFxyXG4gICAgICAgIDxDYXJvdXNlbCBraW5kcz17aXRlbXMucmVzdWx0c1swXS5tZWRpYV90eXBlfSB0aXRsZT1cIuyYge2ZlCDqsoDsg4kg6rKw6rO8XCIgaXRlbXM9e2ZpbHRlcmVkTW92aWVzfSAvPlxyXG4gICAgICApfVxyXG5cclxuICAgICAge2ZpbHRlcmVkVHYubGVuZ3RoID49IDEgJiYgKFxyXG4gICAgICAgIDxDYXJvdXNlbCBraW5kcz17aXRlbXMucmVzdWx0c1swXS5tZWRpYV90eXBlfSB0aXRsZT1cIlRWIOqygOyDiSDqsrDqs7xcIiBpdGVtcz17ZmlsdGVyZWRUdn0gLz5cclxuICAgICAgKX1cclxuXHJcbiAgICAgIHtpdGVtSWQgPyA8TW9kYWwga2luZHM9e3N0YXRlLm1lZGlhX3R5cGUgfHwgSVRFTV9LSU5EUy5NT1ZJRX0gaXRlbUlkPXtpdGVtSWR9IC8+IDogbnVsbH1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2g7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBIZWFkSW5mbyBmcm9tIFwiQHNyYy9jb21wb25lbnRzL2NvbW1vbi9IZWFkSW5mb1wiO1xyXG5cclxuY29uc3QgTm90Rm91bmQgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIZWFkSW5mbyB0aXRsZT1cImJsZWZsaXggLSBOb3RGb3VuZFwiIC8+XHJcblxyXG4gICAgICA8aDE+NDA0IC0gTm90IEZvdW5kPC9oMT5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOb3RGb3VuZDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE91dGxldCwgdXNlTmF2aWdhdGUsIHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG4vLyBob29rXHJcbmltcG9ydCB1c2VJbnB1dCBmcm9tIFwiQHNyYy9ob29rcy91c2VJbnB1dFwiO1xyXG5cclxuaW1wb3J0IEhlYWRJbmZvIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvY29tbW9uL0hlYWRJbmZvXCI7XHJcblxyXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmZvcm1gXHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiAxMDB2dztcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblxyXG4gICYgaDEge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMWVtO1xyXG4gIH1cclxuXHJcbiAgJiBpbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcclxuICAgIHBhZGRpbmc6IDAuNmVtO1xyXG4gICAgZm9udC1zaXplOiAxLjJyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAuMmVtO1xyXG5cclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJnQ29sb3J9O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IE5vdFNlYXJjaCA9ICgpID0+IHtcclxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XHJcbiAgY29uc3QgeyBxdWVyeSB9ID0gdXNlUGFyYW1zPHsgcXVlcnk6IHN0cmluZyB9PigpO1xyXG4gIGNvbnN0IFt0ZXh0LCBvbkNoYW5nZVRleHQsIHNldFRleHRdID0gdXNlSW5wdXQoXCJcIik7XHJcblxyXG4gIC8vIDIwMjIvMDMvMDcgLSDqsoDsg4kgLSBieSAxLWJsdWVcclxuICBjb25zdCBvblN1Ym11dCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgaWYgKHRleHQubGVuZ3RoID09PSAwKSByZXR1cm4gYWxlcnQoXCLqsoDsg4nslrTrpbwg7J6F66Cl7ZW07KO87IS47JqUIVwiKTtcclxuXHJcbiAgICAgIC8vIGVuY29kZVVSSeulvCDrgrTrtoDsoIHsnLzroZwg7LKY66as7ZW0IOyjvOuKlCDqsoMg6rCZ7J2MXHJcbiAgICAgIG5hdmlnYXRlKGAvc2VhcmNoLyR7dGV4dH1gKTtcclxuXHJcbiAgICAgIHNldFRleHQoXCJcIik7XHJcbiAgICB9LFxyXG4gICAgW3RleHRdLFxyXG4gICk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8SGVhZEluZm8gdGl0bGU9XCJibGVmbGl4IC0gc2VhcmNoXCIgLz5cclxuXHJcbiAgICAgIHtxdWVyeSA/IChcclxuICAgICAgICA8T3V0bGV0IC8+XHJcbiAgICAgICkgOiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgIDxXcmFwcGVyIG9uU3VibWl0PXtvblN1Ym11dH0+XHJcbiAgICAgICAgICAgIDxoMT7snpHtkogg6rKA7IOJPC9oMT5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBwbGFjZWhvbGRlcj1cIuygnOuqqeydhCDsnoXroKXtlbTso7zshLjsmpRcIiB2YWx1ZT17dGV4dH0gb25DaGFuZ2U9e29uQ2hhbmdlVGV4dH0gLz5cclxuICAgICAgICAgIDwvV3JhcHBlcj5cclxuICAgICAgICA8Lz5cclxuICAgICAgKX1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOb3RTZWFyY2g7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG4vLyBsYXlvdXRcclxuaW1wb3J0IExheW91dCBmcm9tIFwiQHNyYy9sYXlvdXRzL0xheW91dFwiO1xyXG5cclxuLy8gcGFnZS1jb21wb25lbnRzXHJcbmltcG9ydCBIb21lIGZyb20gXCJAc3JjL3BhZ2VzL0hvbWVcIjtcclxuaW1wb3J0IFR2cyBmcm9tIFwiQHNyYy9wYWdlcy9UdnNcIjtcclxuaW1wb3J0IE1vdmllcyBmcm9tIFwiQHNyYy9wYWdlcy9Nb3ZpZXNcIjtcclxuaW1wb3J0IFNlYXJjaCBmcm9tIFwiQHNyYy9wYWdlcy9TZWFyY2hcIjtcclxuaW1wb3J0IE5vdEZvdW5kIGZyb20gXCJAc3JjL3BhZ2VzL05vdEZvdW5kXCI7XHJcbmltcG9ydCBOb3RTZWFyY2ggZnJvbSBcIkBzcmMvcGFnZXMvTm90U2VhcmNoXCI7XHJcblxyXG5jb25zdCBBcHBSb3V0ZXMgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxCcm93c2VyUm91dGVyPlxyXG4gICAgICA8TGF5b3V0PlxyXG4gICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8SG9tZSAvPn0+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwibW92aWUvOm1vdmllSWRcIiAvPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cInR2Lzp0dklkXCIgLz5cclxuICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi90dnNcIiBlbGVtZW50PXs8VHZzIC8+fT5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCI6dHZJZFwiIC8+XHJcbiAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbW92aWVzXCIgZWxlbWVudD17PE1vdmllcyAvPn0+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiOm1vdmllSWRcIiAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlYXJjaFwiIGVsZW1lbnQ9ezxOb3RTZWFyY2ggLz59PlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIjpxdWVyeVwiIGVsZW1lbnQ9ezxTZWFyY2ggLz59PlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiOml0ZW1JZFwiIC8+XHJcbiAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvKlwiIGVsZW1lbnQ9ezxOb3RGb3VuZCAvPn0gLz5cclxuICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgPC9MYXlvdXQ+XHJcbiAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcFJvdXRlcztcclxuIiwiaW1wb3J0IHsgRGVmYXVsdFRoZW1lIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbGlnaHRUaGVtZTogRGVmYXVsdFRoZW1lID0ge1xyXG4gIGJnQ29sb3I6IFwiI2Y1ZjZmYVwiLFxyXG4gIHRleHRDb2xvcjogXCIjMmYzNjQwXCIsXHJcbiAgbmF2Q29sb3I6IFwiI2VmZWZlZlwiLFxyXG4gIGxpZ2h0TWFpbkNvbG9yOiBcIiM1RDhCRjRcIixcclxuICBtYWluQ29sb3I6IFwiIzJEMzFGQVwiLFxyXG4gIERhcmtNYWluQ29sb3I6IFwiIzA1MTM2N1wiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRhcmtUaGVtZTogRGVmYXVsdFRoZW1lID0ge1xyXG4gIGJnQ29sb3I6IFwiIzJmMzY0MFwiLFxyXG4gIHRleHRDb2xvcjogXCIjZjVmNmZhXCIsXHJcbiAgbmF2Q29sb3I6IFwiIzI0MjUyNlwiLFxyXG4gIGxpZ2h0TWFpbkNvbG9yOiBcIiM1RDhCRjRcIixcclxuICBtYWluQ29sb3I6IFwiIzJEMzFGQVwiLFxyXG4gIERhcmtNYWluQ29sb3I6IFwiIzA1MTM2N1wiLFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSBcInJlY29pbFwiO1xyXG5cclxuLy8gdGhlbWVcclxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBkYXJrVGhlbWUsIGxpZ2h0VGhlbWUgfSBmcm9tIFwiQHNyYy91dGlscy90aGVtZVwiO1xyXG5cclxuLy8gYXRvbVxyXG5pbXBvcnQgeyB0aGVtZVN0YXRlIH0gZnJvbSBcIkBzcmMvYXRvbXNcIjtcclxuXHJcbmludGVyZmFjZSBJQ3VzdG9tVGhlbWVQcm92aWRlciB7XHJcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcclxufVxyXG5cclxuY29uc3QgQ3VzdG9tVGhlbWVQcm92aWRlciA9ICh7IGNoaWxkcmVuIH06IElDdXN0b21UaGVtZVByb3ZpZGVyKSA9PiB7XHJcbiAgY29uc3QgaXNEYXJrID0gdXNlUmVjb2lsVmFsdWUodGhlbWVTdGF0ZSk7XHJcblxyXG4gIHJldHVybiA8VGhlbWVQcm92aWRlciB0aGVtZT17aXNEYXJrID8gZGFya1RoZW1lIDogbGlnaHRUaGVtZX0+e2NoaWxkcmVufTwvVGhlbWVQcm92aWRlcj47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDdXN0b21UaGVtZVByb3ZpZGVyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XHJcbmltcG9ydCB7IFJlYWN0UXVlcnlEZXZ0b29scyB9IGZyb20gXCJyZWFjdC1xdWVyeS9kZXZ0b29sc1wiO1xyXG5pbXBvcnQgeyBSZWNvaWxSb290IH0gZnJvbSBcInJlY29pbFwiO1xyXG5cclxuLy8gY29tcG9uZW50c1xyXG5pbXBvcnQgQXBwUm91dGVzIGZyb20gXCJAc3JjL3JvdXRlcy9BcHBSb3V0ZXNcIjtcclxuXHJcbi8vIHRoZW1lXHJcbmltcG9ydCBDdXN0b21UaGVtZVByb3ZpZGVyIGZyb20gXCJAc3JjL3V0aWxzL0N1c3RvbVRoZW1lUHJvdmlkZXJcIjtcclxuXHJcbmNvbnN0IEdsb2JhbFN0eWxlID0gY3JlYXRlR2xvYmFsU3R5bGVgXHJcbiAgYm9keSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJnQ29sb3J9O1xyXG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudGV4dENvbG9yfTtcclxuICAgIFxyXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lO1xyXG4gICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xyXG4gICAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIH1cclxuICBhIHtcclxuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnRleHRDb2xvcn07XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgY2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KCk7XHJcblxyXG5jb25zdCBBcHAgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxSZWNvaWxSb290PlxyXG4gICAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e2NsaWVudH0+XHJcbiAgICAgICAge3Byb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgJiYgPFJlYWN0UXVlcnlEZXZ0b29scyAvPn1cclxuICAgICAgICA8Q3VzdG9tVGhlbWVQcm92aWRlcj5cclxuICAgICAgICAgIDxHbG9iYWxTdHlsZSAvPlxyXG4gICAgICAgICAgPEFwcFJvdXRlcyAvPlxyXG4gICAgICAgIDwvQ3VzdG9tVGhlbWVQcm92aWRlcj5cclxuICAgICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxyXG4gICAgPC9SZWNvaWxSb290PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuXHJcbi8vIGNzc1xyXG5pbXBvcnQgXCJAc3JjL2Nzcy9yZXNldC5jc3NcIjtcclxuaW1wb3J0IFwiQHNyYy9jc3MvYW5pbWF0aW9uLmNzc1wiO1xyXG5pbXBvcnQgXCJAc3JjL2Nzcy9jb21tb24uY3NzXCI7XHJcblxyXG5pbXBvcnQgQXBwIGZyb20gXCIuL3NyYy9BcHBcIjtcclxuXHJcblJlYWN0RE9NLnJlbmRlcihcclxuICA8UmVhY3QuU3RyaWN0TW9kZT5cclxuICAgIDxBcHAgLz5cclxuICA8L1JlYWN0LlN0cmljdE1vZGU+LFxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcm9vdFwiKSxcclxuKTtcclxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwicHJvdG90eXBlIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImtleXMiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwiYiIsIlN5bWJvbCIsImZvciIsImMiLCJkIiwiZiIsImciLCJoIiwibCIsIm0iLCJuIiwicCIsInEiLCJyIiwidCIsInYiLCJ3IiwieCIsInkiLCJ6IiwiYSIsInUiLCIkJHR5cGVvZiIsIkEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsImNhbGwiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsIkVycm9yIiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwidG9Mb3dlckNhc2UiLCJvYSIsInBhIiwidG9VcHBlckNhc2UiLCJxYSIsInNsaWNlIiwibWEiLCJpc05hTiIsIm5hIiwidGVzdCIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwicmEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJFIiwiTWEiLCJLYSIsIml0ZXJhdG9yIiwiTGEiLCJOYSIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsIkFycmF5IiwiaXNBcnJheSIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsImFwcGx5Iiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsIk1hdGgiLCJjbHozMiIsImJkIiwiY2QiLCJsb2ciLCJMTjIiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJiaW5kIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImNvZGUiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJHIiwiJGUiLCJoYXMiLCJhZiIsImJmIiwicmFuZG9tIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJzZXRUaW1lb3V0IiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJPIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsIm5leHQiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInN0YXRlIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJpbmRleCIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJkb25lIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiY29uc29sZSIsImVycm9yIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJkaXNwbGF5IiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwidGhlbiIsIm1qIiwibmoiLCJjZWlsIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiSW5maW5pdHkiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsInVrIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiaGFzRWxlbWVudFR5cGUiLCJoYXNNYXAiLCJoYXNTZXQiLCJoYXNBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiZXF1YWwiLCJpdCIsImVudHJpZXMiLCJSZWdFeHAiLCJ3YXJuIiwiUmVhY3RRdWVyeURldnRvb2xzIiwiUmVhY3RRdWVyeURldnRvb2xzUGFuZWwiLCJmb2N1c01hbmFnZXIiLCJfU3Vic2NyaWJhYmxlIiwiRm9jdXNNYW5hZ2VyIiwiX3RoaXMiLCJzZXR1cCIsIm9uRm9jdXMiLCJfd2luZG93IiwiX3Byb3RvIiwib25TdWJzY3JpYmUiLCJjbGVhbnVwIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJfdGhpcyRjbGVhbnVwIiwiaGFzTGlzdGVuZXJzIiwiX3RoaXMkY2xlYW51cDIiLCJfdGhpczIiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImlzRm9jdXNlZCIsImluY2x1ZGVzIiwidmlzaWJpbGl0eVN0YXRlIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwic2V0TG9nZ2VyIiwibmV3TG9nZ2VyIiwibm90aWZ5TWFuYWdlciIsIk5vdGlmeU1hbmFnZXIiLCJ0cmFuc2FjdGlvbnMiLCJub3RpZnlGbiIsImJhdGNoTm90aWZ5Rm4iLCJiYXRjaCIsInJlc3VsdCIsImZsdXNoIiwic2NoZWR1bGUiLCJiYXRjaENhbGxzIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiX3RoaXMzIiwic2V0Tm90aWZ5RnVuY3Rpb24iLCJmbiIsInNldEJhdGNoTm90aWZ5RnVuY3Rpb24iLCJvbmxpbmVNYW5hZ2VyIiwiT25saW5lTWFuYWdlciIsIm9uT25saW5lIiwib25saW5lIiwic2V0T25saW5lIiwiaXNPbmxpbmUiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJRdWVyeSIsImNvbmZpZyIsImFib3J0U2lnbmFsQ29uc3VtZWQiLCJoYWRPYnNlcnZlcnMiLCJkZWZhdWx0T3B0aW9ucyIsInNldE9wdGlvbnMiLCJvYnNlcnZlcnMiLCJjYWNoZSIsInF1ZXJ5S2V5IiwicXVlcnlIYXNoIiwiaW5pdGlhbFN0YXRlIiwiZ2V0RGVmYXVsdFN0YXRlIiwic2NoZWR1bGVHYyIsIl90aGlzJG9wdGlvbnMkY2FjaGVUaSIsImNhY2hlVGltZSIsIm1heCIsInNldERlZmF1bHRPcHRpb25zIiwiY2xlYXJHY1RpbWVvdXQiLCJnY1RpbWVvdXQiLCJvcHRpb25hbFJlbW92ZSIsImlzRmV0Y2hpbmciLCJyZW1vdmUiLCJzZXREYXRhIiwiX3RoaXMkb3B0aW9ucyRpc0RhdGFFIiwiX3RoaXMkb3B0aW9ucyIsInByZXZEYXRhIiwiaXNEYXRhRXF1YWwiLCJzdHJ1Y3R1cmFsU2hhcmluZyIsImRhdGFVcGRhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzZXRTdGF0ZSIsInNldFN0YXRlT3B0aW9ucyIsImNhbmNlbCIsIl90aGlzJHJldHJ5ZXIiLCJwcm9taXNlIiwicmV0cnllciIsImNhdGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzaWxlbnQiLCJyZXNldCIsImlzQWN0aXZlIiwic29tZSIsIm9ic2VydmVyIiwiZW5hYmxlZCIsImlzU3RhbGUiLCJpc0ludmFsaWRhdGVkIiwiZ2V0Q3VycmVudFJlc3VsdCIsImlzU3RhbGVCeVRpbWUiLCJzdGFsZVRpbWUiLCJfdGhpcyRyZXRyeWVyMiIsImZpbmQiLCJzaG91bGRGZXRjaE9uV2luZG93Rm9jdXMiLCJyZWZldGNoIiwiY29udGludWUiLCJfdGhpcyRyZXRyeWVyMyIsInNob3VsZEZldGNoT25SZWNvbm5lY3QiLCJhZGRPYnNlcnZlciIsIm5vdGlmeSIsInF1ZXJ5IiwicmVtb3ZlT2JzZXJ2ZXIiLCJmaWx0ZXIiLCJpc1RyYW5zcG9ydENhbmNlbGFibGUiLCJyZXZlcnQiLCJjYW5jZWxSZXRyeSIsImdldE9ic2VydmVyc0NvdW50IiwiaW52YWxpZGF0ZSIsImZldGNoIiwiZmV0Y2hPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyRiZWhhdmlvIiwiX2NvbnRleHQkZmV0Y2hPcHRpb25zIiwiX2Fib3J0Q29udHJvbGxlciRhYm9yIiwiY2FuY2VsUmVmZXRjaCIsIl90aGlzJHJldHJ5ZXI0IiwiY29udGludWVSZXRyeSIsInF1ZXJ5Rm4iLCJhYm9ydENvbnRyb2xsZXIiLCJxdWVyeUZuQ29udGV4dCIsInBhZ2VQYXJhbSIsInNpZ25hbCIsIl90aGlzJG9wdGlvbnMkYmVoYXZpbzIiLCJfY29udGV4dCRmZXRjaE9wdGlvbnMyIiwiZmV0Y2hGbiIsInJlamVjdCIsImJlaGF2aW9yIiwib25GZXRjaCIsInJldmVydFN0YXRlIiwiZmV0Y2hNZXRhIiwiYWJvcnQiLCJvblN1Y2Nlc3MiLCJvbkZhaWwiLCJvblBhdXNlIiwib25Db250aW51ZSIsInJldHJ5IiwicmV0cnlEZWxheSIsInJlZHVjZXIiLCJvblF1ZXJ5VXBkYXRlIiwiaW5pdGlhbERhdGEiLCJpbml0aWFsRGF0YVVwZGF0ZWRBdCIsImhhc0RhdGEiLCJkYXRhVXBkYXRlQ291bnQiLCJlcnJvclVwZGF0ZUNvdW50IiwiZXJyb3JVcGRhdGVkQXQiLCJmZXRjaEZhaWx1cmVDb3VudCIsImlzUGF1c2VkIiwic3RhdHVzIiwiX2FjdGlvbiRtZXRhIiwiX2FjdGlvbiRkYXRhVXBkYXRlZEF0IiwiUXVlcnlDYWNoZSIsInF1ZXJpZXMiLCJxdWVyaWVzTWFwIiwiYnVpbGQiLCJjbGllbnQiLCJfb3B0aW9ucyRxdWVyeUhhc2giLCJkZWZhdWx0UXVlcnlPcHRpb25zIiwiZ2V0UXVlcnlEZWZhdWx0cyIsInF1ZXJ5SW5NYXAiLCJjbGVhciIsImdldEFsbCIsImFyZzEiLCJhcmcyIiwiZmlsdGVycyIsImZpbmRBbGwiLCJfdGhpczQiLCJfdGhpczUiLCJNdXRhdGlvbiIsIm11dGF0aW9uSWQiLCJtdXRhdGlvbkNhY2hlIiwiZmFpbHVyZUNvdW50IiwidmFyaWFibGVzIiwiZXhlY3V0ZSIsInJlc3RvcmVkIiwib25NdXRhdGUiLCJleGVjdXRlTXV0YXRpb24iLCJvblNldHRsZWQiLCJfdGhpcyRvcHRpb25zJHJldHJ5IiwibXV0YXRpb25GbiIsIm9uTXV0YXRpb25VcGRhdGUiLCJNdXRhdGlvbkNhY2hlIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJkZWZhdWx0TXV0YXRpb25PcHRpb25zIiwibXV0YXRpb25LZXkiLCJnZXRNdXRhdGlvbkRlZmF1bHRzIiwicmVzdW1lUGF1c2VkTXV0YXRpb25zIiwicGF1c2VkTXV0YXRpb25zIiwicmVkdWNlIiwiZ2V0TmV4dFBhZ2VQYXJhbSIsInBhZ2VzIiwiUXVlcnlDbGllbnQiLCJxdWVyeUNhY2hlIiwicXVlcnlEZWZhdWx0cyIsIm11dGF0aW9uRGVmYXVsdHMiLCJtb3VudCIsInVuc3Vic2NyaWJlRm9jdXMiLCJ1bnN1YnNjcmliZU9ubGluZSIsIl90aGlzJHVuc3Vic2NyaWJlRm9jdSIsIl90aGlzJHVuc3Vic2NyaWJlT25saSIsImZldGNoaW5nIiwiaXNNdXRhdGluZyIsImdldFF1ZXJ5RGF0YSIsIl90aGlzJHF1ZXJ5Q2FjaGUkZmluZCIsImdldFF1ZXJpZXNEYXRhIiwicXVlcnlLZXlPckZpbHRlcnMiLCJnZXRRdWVyeUNhY2hlIiwiX3JlZiIsInNldFF1ZXJ5RGF0YSIsInBhcnNlZE9wdGlvbnMiLCJkZWZhdWx0ZWRPcHRpb25zIiwic2V0UXVlcmllc0RhdGEiLCJfcmVmMiIsImdldFF1ZXJ5U3RhdGUiLCJfdGhpcyRxdWVyeUNhY2hlJGZpbmQyIiwicmVtb3ZlUXVlcmllcyIsInJlc2V0UXVlcmllcyIsImFyZzMiLCJfcGFyc2VGaWx0ZXJBcmdzMyIsInJlZmV0Y2hGaWx0ZXJzIiwiYWN0aXZlIiwicmVmZXRjaFF1ZXJpZXMiLCJjYW5jZWxRdWVyaWVzIiwiX3BhcnNlRmlsdGVyQXJnczQiLCJfcGFyc2VGaWx0ZXJBcmdzNCQiLCJjYW5jZWxPcHRpb25zIiwicHJvbWlzZXMiLCJhbGwiLCJpbnZhbGlkYXRlUXVlcmllcyIsIl9yZWYzIiwiX2ZpbHRlcnMkcmVmZXRjaEFjdGl2IiwiX2ZpbHRlcnMkcmVmZXRjaEluYWN0IiwiX3BhcnNlRmlsdGVyQXJnczUiLCJyZWZldGNoQWN0aXZlIiwiaW5hY3RpdmUiLCJyZWZldGNoSW5hY3RpdmUiLCJfdGhpczYiLCJfcGFyc2VGaWx0ZXJBcmdzNiIsInJlZmV0Y2hQYWdlIiwidGhyb3dPbkVycm9yIiwiZmV0Y2hRdWVyeSIsInByZWZldGNoUXVlcnkiLCJmZXRjaEluZmluaXRlUXVlcnkiLCJfY29udGV4dCRmZXRjaE9wdGlvbnMzIiwiX2NvbnRleHQkZmV0Y2hPcHRpb25zNCIsIl9jb250ZXh0JHN0YXRlJGRhdGEiLCJfY29udGV4dCRzdGF0ZSRkYXRhMiIsImZldGNoTW9yZSIsImlzRmV0Y2hpbmdOZXh0UGFnZSIsImRpcmVjdGlvbiIsImlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UiLCJvbGRQYWdlcyIsIm9sZFBhZ2VQYXJhbXMiLCJwYWdlUGFyYW1zIiwiYWJvcnRTaWduYWwiLCJuZXdQYWdlUGFyYW1zIiwiY2FuY2VsbGVkIiwiYnVpbGROZXdQYWdlcyIsInBhZ2UiLCJwcmV2aW91cyIsImZldGNoUGFnZSIsIm1hbnVhbCIsInF1ZXJ5Rm5SZXN1bHQiLCJfbWFudWFsIiwiX3BhcmFtIiwiZ2V0UHJldmlvdXNQYWdlUGFyYW0iLCJzaG91bGRGZXRjaEZpcnN0UGFnZSIsIl9sb29wIiwiX3BhcmFtMiIsImZpbmFsUHJvbWlzZSIsInByZWZldGNoSW5maW5pdGVRdWVyeSIsImNhbmNlbE11dGF0aW9ucyIsIl90aGlzNyIsImdldE11dGF0aW9uQ2FjaGUiLCJnZXREZWZhdWx0T3B0aW9ucyIsInNldFF1ZXJ5RGVmYXVsdHMiLCJfdGhpcyRxdWVyeURlZmF1bHRzJGYiLCJzZXRNdXRhdGlvbkRlZmF1bHRzIiwiX3RoaXMkbXV0YXRpb25EZWZhdWx0IiwiX2RlZmF1bHRlZCIsImRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyIsImRlZmF1bHRSZXRyeURlbGF5IiwicG93IiwiaXNDYW5jZWxhYmxlIiwiQ2FuY2VsbGVkRXJyb3IiLCJpc0NhbmNlbGxlZEVycm9yIiwiUmV0cnllciIsImNhbmNlbEZuIiwiY29udGludWVGbiIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsImlzUmVzb2x2ZWQiLCJvdXRlclJlc29sdmUiLCJvdXRlclJlamVjdCIsInJ1biIsInByb21pc2VPclZhbHVlIiwiX3VudXNlZCIsIl9jb25maWckcmV0cnkiLCJfY29uZmlnJHJldHJ5RGVsYXkiLCJkZWxheSIsInNob3VsZFJldHJ5IiwiY29udGludWVSZXNvbHZlIiwiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJub29wIiwiZnVuY3Rpb25hbFVwZGF0ZSIsImlzVmFsaWRUaW1lb3V0IiwiZW5zdXJlUXVlcnlLZXlBcnJheSIsInRpbWVVbnRpbFN0YWxlIiwicGFyc2VRdWVyeUFyZ3MiLCJpc1F1ZXJ5S2V5IiwicGFyc2VGaWx0ZXJBcmdzIiwibWF0Y2hRdWVyeSIsInByZWRpY2F0ZSIsInN0YWxlIiwiaGFzaFF1ZXJ5S2V5QnlPcHRpb25zIiwicGFydGlhbE1hdGNoS2V5IiwicXVlcnlTdGF0dXNGaWx0ZXIiLCJtYXBRdWVyeVN0YXR1c0ZpbHRlciIsIm1hdGNoTXV0YXRpb24iLCJoYXNoUXVlcnlLZXkiLCJxdWVyeUtleUhhc2hGbiIsIl8iLCJpc1BsYWluT2JqZWN0Iiwic29ydCIsInBhcnRpYWxEZWVwRXF1YWwiLCJyZXBsYWNlRXF1YWxEZWVwIiwiYVNpemUiLCJiSXRlbXMiLCJiU2l6ZSIsImNvcHkiLCJlcXVhbEl0ZW1zIiwic2hhbGxvd0VxdWFsT2JqZWN0cyIsIm8iLCJoYXNPYmplY3RQcm90b3R5cGUiLCJjdG9yIiwicHJvdCIsInNsZWVwIiwidGltZW91dCIsInNjaGVkdWxlTWljcm90YXNrIiwiZ2V0QWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiZGVmYXVsdENvbnRleHQiLCJRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0IiwiZ2V0UXVlcnlDbGllbnRDb250ZXh0IiwiY29udGV4dFNoYXJpbmciLCJSZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJfcmVmJGNvbnRleHRTaGFyaW5nIiwiQ29udGV4dCIsIlByb3ZpZGVyIiwiUXVlcnlPYnNlcnZlciIsInRyYWNrZWRQcm9wcyIsInByZXZpb3VzU2VsZWN0RXJyb3IiLCJiaW5kTWV0aG9kcyIsImN1cnJlbnRRdWVyeSIsInNob3VsZEZldGNoT25Nb3VudCIsImV4ZWN1dGVGZXRjaCIsInVwZGF0ZVRpbWVycyIsInJlZmV0Y2hPblJlY29ubmVjdCIsInJlZmV0Y2hPbldpbmRvd0ZvY3VzIiwiY2xlYXJUaW1lcnMiLCJub3RpZnlPcHRpb25zIiwicHJldk9wdGlvbnMiLCJwcmV2UXVlcnkiLCJ1cGRhdGVRdWVyeSIsIm1vdW50ZWQiLCJzaG91bGRGZXRjaE9wdGlvbmFsbHkiLCJ1cGRhdGVSZXN1bHQiLCJ1cGRhdGVTdGFsZVRpbWVvdXQiLCJuZXh0UmVmZXRjaEludGVydmFsIiwiY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCIsImN1cnJlbnRSZWZldGNoSW50ZXJ2YWwiLCJ1cGRhdGVSZWZldGNoSW50ZXJ2YWwiLCJnZXRPcHRpbWlzdGljUmVzdWx0IiwiY3JlYXRlUmVzdWx0IiwiY3VycmVudFJlc3VsdCIsInRyYWNrUmVzdWx0IiwidHJhY2tlZFJlc3VsdCIsInRyYWNrUHJvcCIsInVzZUVycm9yQm91bmRhcnkiLCJzdXNwZW5zZSIsImdldE5leHRSZXN1bHQiLCJ1bnN1YnNjcmliZSIsImlzRXJyb3IiLCJnZXRDdXJyZW50UXVlcnkiLCJmZXRjaE9wdGltaXN0aWMiLCJjbGVhclN0YWxlVGltZW91dCIsInN0YWxlVGltZW91dElkIiwiX3RoaXMkb3B0aW9ucyRyZWZldGNoIiwicmVmZXRjaEludGVydmFsIiwibmV4dEludGVydmFsIiwiY2xlYXJSZWZldGNoSW50ZXJ2YWwiLCJyZWZldGNoSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwicmVmZXRjaEludGVydmFsSW5CYWNrZ3JvdW5kIiwiY2xlYXJJbnRlcnZhbCIsInByZXZSZXN1bHQiLCJwcmV2UmVzdWx0U3RhdGUiLCJjdXJyZW50UmVzdWx0U3RhdGUiLCJwcmV2UmVzdWx0T3B0aW9ucyIsImN1cnJlbnRSZXN1bHRPcHRpb25zIiwicXVlcnlDaGFuZ2UiLCJxdWVyeUluaXRpYWxTdGF0ZSIsImN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZSIsInByZXZRdWVyeVJlc3VsdCIsInByZXZpb3VzUXVlcnlSZXN1bHQiLCJpc1ByZXZpb3VzRGF0YSIsImlzUGxhY2Vob2xkZXJEYXRhIiwib3B0aW1pc3RpY1Jlc3VsdHMiLCJmZXRjaE9uTW91bnQiLCJmZXRjaE9wdGlvbmFsbHkiLCJrZWVwUHJldmlvdXNEYXRhIiwiaXNTdWNjZXNzIiwic2VsZWN0IiwiX3RoaXMkcHJldmlvdXNTZWxlY3QiLCJwcmV2aW91c1NlbGVjdCIsInNlbGVjdEVycm9yIiwicGxhY2Vob2xkZXJEYXRhIiwiaXNMb2FkaW5nIiwiaXNJZGxlIiwiaXNGZXRjaGVkIiwiaXNGZXRjaGVkQWZ0ZXJNb3VudCIsImlzUmVmZXRjaGluZyIsImlzTG9hZGluZ0Vycm9yIiwiaXNSZWZldGNoRXJyb3IiLCJzaG91bGROb3RpZnlMaXN0ZW5lcnMiLCJub3RpZnlPbkNoYW5nZVByb3BzIiwibm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMiLCJpbmNsdWRlZFByb3BzIiwidHlwZWRLZXkiLCJjaGFuZ2VkIiwiaXNJbmNsdWRlZCIsImlzRXhjbHVkZWQiLCJkZWZhdWx0Tm90aWZ5T3B0aW9ucyIsIl90aGlzOCIsInJldHJ5T25Nb3VudCIsInNob3VsZExvYWRPbk1vdW50IiwicmVmZXRjaE9uTW91bnQiLCJzaG91bGRSZWZldGNoT25Nb3VudCIsIl9pc1Jlc2V0IiwiUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0IiwiY2xlYXJSZXNldCIsImlzUmVzZXQiLCJ1c2VRdWVyeSIsIk9ic2VydmVyIiwibW91bnRlZFJlZiIsImZvcmNlVXBkYXRlIiwicXVlcnlDbGllbnQiLCJ1c2VRdWVyeUNsaWVudCIsImVycm9yUmVzZXRCb3VuZGFyeSIsIl91c2VFcnJvckJvdW5kYXJ5IiwicGFyYW1zIiwidXNlQmFzZVF1ZXJ5IiwiZXgiLCJSZWFjdCIsIlJlYWN0X19kZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwid3JpdGFibGUiLCJjYW5Vc2VET00iLCJyZWR1Y2VQcm9wc1RvU3RhdGUiLCJoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50IiwibWFwU3RhdGVPblNlcnZlciIsIldyYXBwZWRDb21wb25lbnQiLCJtb3VudGVkSW5zdGFuY2VzIiwiZW1pdENoYW5nZSIsIlNpZGVFZmZlY3QiLCJfUHVyZUNvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsInBlZWsiLCJyZXdpbmQiLCJyZWNvcmRlZFN0YXRlIiwic3BsaWNlIiwiUHVyZUNvbXBvbmVudCIsImdldERpc3BsYXlOYW1lIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfZXh0ZW5kcyIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwiY2hhckNvZGVBdCIsInByZWZpeCIsInVzZSIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwicmVhY3RQcm9wc1JlZ2V4IiwiYXJnIiwiZnJlZXplIiwic3R5bGVkQ29tcG9uZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJTQ19BVFRSIiwiQm9vbGVhbiIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwiaiIsImdyb3VwU2l6ZXMiLCJVaW50MzJBcnJheSIsImluZGV4T2ZHcm91cCIsImluc2VydFJ1bGVzIiwiaW5zZXJ0UnVsZSIsImNsZWFyR3JvdXAiLCJkZWxldGVSdWxlIiwiZ2V0R3JvdXAiLCJnZXRSdWxlIiwicmVnaXN0ZXJOYW1lIiwicGFyc2VJbnQiLCJnZXRUYWciLCJfX3dlYnBhY2tfbm9uY2VfXyIsImNoaWxkTm9kZXMiLCIkIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImNzc1J1bGVzIiwibm9kZXMiLCJydWxlcyIsInVzZUNTU09NSW5qZWN0aW9uIiwiZ3MiLCJuYW1lcyIsInNlcnZlciIsImdldEF0dHJpYnV0ZSIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiY2xlYXJOYW1lcyIsImNsZWFyUnVsZXMiLCJjbGVhclRhZyIsImFicyIsInN0YXRpY1J1bGVzSWQiLCJpc1N0YXRpYyIsImNvbXBvbmVudElkIiwiYmFzZUhhc2giLCJiYXNlU3R5bGUiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImhhc2giLCJwbHVnaW5zIiwibGFzdEluZGV4T2YiLCJzdHlsaXNQbHVnaW5zIiwiZGlzYWJsZUNTU09NSW5qZWN0aW9uIiwiZGlzYWJsZVZlbmRvclByZWZpeGVzIiwiZ2V0TmFtZSIsIl9lIiwiaXNDc3MiLCJ0aGVtZSIsIkdlIiwiYXR0cnMiLCJwYXJlbnRDb21wb25lbnRJZCIsInNob3VsZEZvcndhcmRQcm9wIiwiY29tcG9uZW50U3R5bGUiLCJmb2xkZWRDb21wb25lbnRJZHMiLCIkYXMiLCJhcyIsImNsYXNzTmFtZSIsIndpdGhDb21wb25lbnQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsIl9lbWl0U2hlZXRDU1MiLCJnZXRTdHlsZVRhZ3MiLCJzZWFsZWQiLCJnZXRTdHlsZUVsZW1lbnQiLCJzZWFsIiwiY29sbGVjdFN0eWxlcyIsImludGVybGVhdmVXaXRoTm9kZVN0cmVhbSIsIlJlY29pbF9lcnIiLCJSZWNvaWxfaXNQcm9taXNlIiwiUmVjb2lsX251bGx0aHJvd3MiLCJCYXNlTG9hZGFibGUiLCJ0b1Byb21pc2UiLCJ2YWx1ZU1heWJlIiwidmFsdWVPclRocm93IiwicHJvbWlzZU1heWJlIiwicHJvbWlzZU9yVGhyb3ciLCJlcnJvck1heWJlIiwiZXJyb3JPclRocm93Iiwib3RoZXIiLCJjb250ZW50cyIsIl9tYXAiLCJWYWx1ZUxvYWRhYmxlIiwic3VwZXIiLCJsb2FkYWJsZVdpdGhQcm9taXNlIiwiaXNMb2FkYWJsZSIsImxvYWRhYmxlV2l0aFZhbHVlIiwibG9hZGFibGVXaXRoRXJyb3IiLCJFcnJvckxvYWRhYmxlIiwiTG9hZGluZ0xvYWRhYmxlIiwibmV4dExvYWRhYmxlIiwibG9hZGFibGVBbGwiLCJpbnB1dHMiLCJub3JtYWxpemVkSW5wdXRzIiwib3V0cHV0IiwiZXZlcnkiLCJsb2FkYWJsZUFsbEFycmF5Iiwib3V0cHV0cyIsIm91dCIsIkxvYWRhYmxlU3RhdGljSW50ZXJmYWNlIiwiUmVjb2lsX0xvYWRhYmxlIiwibG9hZGFibGVMb2FkaW5nIiwiUmVjb2lsTG9hZGFibGUiLCJSZWNvaWxfTG9hZGFibGVfMSIsIlJlY29pbF9Mb2FkYWJsZV8yIiwiUmVjb2lsX0xvYWRhYmxlXzMiLCJSZWNvaWxfTG9hZGFibGVfNCIsIlJlY29pbF9Mb2FkYWJsZV81IiwiUmVjb2lsX0xvYWRhYmxlXzYiLCJSZWNvaWxfTG9hZGFibGVfNyIsIlJlY29pbF9Mb2FkYWJsZSQxIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSIsIm5ld0tleSIsIlJlY29pbFN0YXRlIiwiUmVjb2lsVmFsdWVSZWFkT25seSIsIlJlY29pbF9SZWNvaWxWYWx1ZSIsImlzUmVjb2lsVmFsdWUiLCJSZWNvaWxfUmVjb2lsVmFsdWVfMSIsIlJlY29pbF9SZWNvaWxWYWx1ZV8yIiwiUmVjb2lsX1JlY29pbFZhbHVlXzMiLCJSZWNvaWxfUmVjb2lsVmFsdWVfNCIsIlJlY29pbF9SZWNvaWxWYWx1ZSQxIiwiZ2tzIiwiUmVjb2lsX2dreF9PU1MiLCJfZ2tzJGdldCIsInNldFBhc3MiLCJzZXRGYWlsIiwiUmVjb2lsX2dreCIsIlJlY29pbF9tYXBJdGVyYWJsZSIsIml0ZXJhYmxlIiwiRGVmYXVsdFZhbHVlIiwiREVGQVVMVF9WQUxVRSIsIlJlY29pbFZhbHVlTm90UmVhZHkiLCJyZWNvaWxWYWx1ZXMiLCJOb2RlTWlzc2luZ0Vycm9yIiwiY29uZmlnRGVsZXRpb25IYW5kbGVycyIsImdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciIsIlJlY29pbF9Ob2RlIiwicmVnaXN0ZXJOb2RlIiwicmVjb2lsVmFsdWUiLCJnZXROb2RlIiwiZ2V0Tm9kZU1heWJlIiwiZGVsZXRlTm9kZUNvbmZpZ0lmUG9zc2libGUiLCJfbm9kZSRzaG91bGREZWxldGVDb24iLCJfZ2V0Q29uZmlnRGVsZXRpb25IYW4iLCJzaG91bGREZWxldGVDb25maWdPblJlbGVhc2UiLCJzZXRDb25maWdEZWxldGlvbkhhbmRsZXIiLCJyZWNvaWxWYWx1ZXNGb3JLZXlzIiwiUmVjb2lsX1F1ZXVlIiwiaGFtdF8xIiwiX3R5cGVvZiIsImhhbXQiLCJCVUNLRVRfU0laRSIsIk1BU0siLCJNQVhfSU5ERVhfTk9ERSIsIk1JTl9BUlJBWV9OT0RFIiwibm90aGluZyIsImNvbnN0YW50Iiwic3RyIiwibGVuIiwiaGFzaEZyYWdtZW50IiwidG9CaXRtYXAiLCJmcm9tQml0bWFwIiwiYml0bWFwIiwiYml0IiwicG9wY291bnQiLCJhcnJheVVwZGF0ZSIsIm11dGF0ZSIsImF0IiwiYXJyIiwiYXJyYXlTcGxpY2VPdXQiLCJuZXdMZW4iLCJlbXB0eSIsIl9faGFtdF9pc0VtcHR5IiwiaXNFbXB0eU5vZGUiLCJMZWFmIiwiZWRpdCIsIl9tb2RpZnkiLCJMZWFmX19tb2RpZnkiLCJDb2xsaXNpb24iLCJDb2xsaXNpb25fX21vZGlmeSIsIkluZGV4ZWROb2RlIiwibWFzayIsIkluZGV4ZWROb2RlX19tb2RpZnkiLCJBcnJheU5vZGUiLCJBcnJheU5vZGVfX21vZGlmeSIsIm1lcmdlTGVhdmVzIiwiaDEiLCJuMSIsImgyIiwibjIiLCJzdWJIMSIsInN1YkgyIiwiY2FuRWRpdE5vZGUiLCJrZXlFcSIsIl92IiwiX25ld1ZhbHVlIiwibmV3VmFsdWUiLCJ1cGRhdGVDb2xsaXNpb25MaXN0IiwiZnJhZyIsImluZHgiLCJleGlzdHMiLCJjYW5FZGl0IiwibmV3Q2hpbGRyZW4iLCJzdWJOb2RlcyIsImV4cGFuZCIsImFycmF5U3BsaWNlSW4iLCJuZXdDaGlsZCIsInJlbW92ZWQiLCJlbGVtZW50cyIsImVsZW0iLCJwYWNrIiwiZWRpdGFibGUiLCJyb290IiwiX2VkaXRhYmxlIiwiX2VkaXQiLCJfY29uZmlnIiwiX3Jvb3QiLCJfc2l6ZSIsInNldFRyZWUiLCJuZXdSb290IiwibmV3U2l6ZSIsInRyeUdldEhhc2giLCJhbHQiLCJ0cnlHZXQiLCJnZXRIYXNoIiwiaGFzSGFzaCIsImRlZktleUNvbXBhcmUiLCJtYWtlIiwiaXNFbXB0eSIsIm1vZGlmeUhhc2giLCJOYU4iLCJtb2RpZnkiLCJzZXRIYXNoIiwiZGVsIiwicmVtb3ZlSGFzaCIsImRlbGV0ZUhhc2giLCJiZWdpbk11dGF0aW9uIiwiZW5kTXV0YXRpb24iLCJ0cmFuc2llbnQiLCJhcHBrIiwibGF6eVZpc2l0Q2hpbGRyZW4iLCJsYXp5VmlzaXQiLCJyZXN0IiwiRE9ORSIsIk1hcEl0ZXJhdG9yIiwidjAiLCJ2aXNpdCIsImJ1aWxkUGFpcnMiLCJidWlsZEtleXMiLCJidWlsZFZhbHVlcyIsInZhbHVlcyIsImZvbGQiLCJ0b1Zpc2l0IiwiQnVpbHRJbk1hcCIsImV4aXN0aW5nIiwiY2xvbmUiLCJwZXJzaXN0ZW50TWFwIiwidG9NYXAiLCJIYXNoQXJyYXlNYXBwZWRUcmllTWFwIiwiX2hhbXQiLCJSZWNvaWxfUGVyc2lzdGVudE1hcF8xIiwiUmVjb2lsX1BlcnNpc3RlbnRNYXAkMSIsIlJlY29pbF9kaWZmZXJlbmNlU2V0cyIsInNldHNXaXRoVmFsdWVzVG9SZW1vdmUiLCJGSVJTVCIsIm90aGVyU2V0IiwiUmVjb2lsX21hcE1hcCIsIm1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaCIsImdyYXBoIiwib2xkZXJHcmFwaCIsIm5vZGVEZXBzIiwibm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMiLCJ1cHN0cmVhbXMiLCJkb3duc3RyZWFtIiwiZXhpc3RpbmdVcHN0cmVhbXMiLCJ1cHN0cmVhbSIsIlJlY29pbF9HcmFwaCIsImFkZFRvRGVwZW5kZW5jeU1hcCIsImRlcGVuZGVuY3lNYXAiLCJjbG9uZUdyYXBoIiwibWVyZ2VEZXBzSW50b0RlcGVuZGVuY3lNYXAiLCJpbnRvIiwidXBzdHJlYW1EZXBzIiwiZG93bnN0cmVhbU5vZGUiLCJkZXAiLCJzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUiLCJzdG9yZSIsIl9zdG9yZVN0YXRlJG5leHRUcmVlIiwiX3N0b3JlU3RhdGUkcHJldmlvdXNUIiwiX3N0b3JlU3RhdGUkcHJldmlvdXNUMiIsIl9zdG9yZVN0YXRlJHByZXZpb3VzVDMiLCJzdG9yZVN0YXRlIiwiZ2V0U3RhdGUiLCJjdXJyZW50VHJlZSIsIm5leHRUcmVlIiwicHJldmlvdXNUcmVlIiwiZ2V0R3JhcGgiLCJfc3RvcmVTdGF0ZSRuZXh0VHJlZTIiLCJuZXh0VmVyc2lvbiIsIm5leHRUcmVlU3RhdGVWZXJzaW9uIiwibmV4dFN0b3JlSUQiLCJuZXh0Q29tcG9uZW50SUQiLCJSZWNvaWxfS2V5cyIsImdldE5leHRUcmVlU3RhdGVWZXJzaW9uIiwiZ2V0TmV4dFN0b3JlSUQiLCJnZXROZXh0Q29tcG9uZW50SUQiLCJwZXJzaXN0ZW50TWFwJDEiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxIiwibWFrZUVtcHR5VHJlZVN0YXRlIiwic3RhdGVJRCIsInRyYW5zYWN0aW9uTWV0YWRhdGEiLCJkaXJ0eUF0b21zIiwiYXRvbVZhbHVlcyIsIm5vbnZhbGlkYXRlZEF0b21zIiwiUmVjb2lsX1N0YXRlIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSIsImNvbW1pdERlcHRoIiwia25vd25BdG9tcyIsImtub3duU2VsZWN0b3JzIiwidHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zIiwibm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucyIsIm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMiLCJxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRCIsInN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycyIsImdyYXBoc0J5VmVyc2lvbiIsInJldGVudGlvbiIsInJlZmVyZW5jZUNvdW50cyIsIm5vZGVzUmV0YWluZWRCeVpvbmUiLCJyZXRhaW5hYmxlc1RvQ2hlY2tGb3JSZWxlYXNlIiwibm9kZUNsZWFudXBGdW5jdGlvbnMiLCJSZXRlbnRpb25ab25lIiwiUmVjb2lsX1JldGVudGlvblpvbmUiLCJyZXRlbnRpb25ab25lIiwiUmVjb2lsX0NvcHlPbldyaXRlIiwic2V0QnlBZGRpbmdUb1NldCIsInNldEJ5RGVsZXRpbmdGcm9tU2V0IiwibWFwQnlTZXR0aW5nSW5NYXAiLCJtYXBCeVVwZGF0aW5nSW5NYXAiLCJtYXBCeURlbGV0aW5nRnJvbU1hcCIsIm1hcEJ5RGVsZXRpbmdNdWx0aXBsZUZyb21NYXAiLCJrcyIsIlJlY29pbF9maWx0ZXJJdGVyYWJsZSIsIlJlY29pbF9sYXp5UHJveHkiLCJmYWN0b3JpZXMiLCJQcm94eSIsIm93bktleXMiLCJnZXROb2RlJDEiLCJnZXROb2RlTWF5YmUkMSIsInJlY29pbFZhbHVlc0ZvcktleXMkMSIsIlJldGVudGlvblpvbmUkMSIsInNldEJ5QWRkaW5nVG9TZXQkMSIsImVtcHR5U2V0IiwiUmVhZE9ubHlSZWNvaWxWYWx1ZUVycm9yIiwiaW5pdGlhbGl6ZU5vZGVJZk5ld1RvU3RvcmUiLCJ0cmVlU3RhdGUiLCJ0cmlnZ2VyIiwicmV0ZW50aW9uQ2xlYW51cCIsIm5vZGVLZXkiLCJyZXRhaW5lZEJ5IiwiYWRkVG9ab25lIiwiem9uZSIsImRlbGV0ZUZyb21ab25lIiwiaW5pdGlhbGl6ZVJldGVudGlvbkZvck5vZGUiLCJub2RlQ2xlYW51cCIsImluaXQiLCJwZWVrTm9kZUxvYWRhYmxlIiwiZ2V0RG93bnN0cmVhbU5vZGVzIiwidmlzaXRlZE5vZGVzIiwidmlzaXRpbmdOb2RlcyIsIl9ncmFwaCRub2RlVG9Ob2RlU3VicyIsInN1YnNjcmliZWROb2RlcyIsIl9jcmVhdGVNdXRhYmxlU291cmNlIiwiX3VzZU11dGFibGVTb3VyY2UiLCJfdXNlU3luY0V4dGVybmFsU3RvcmUiLCJSZWNvaWxfRnVuY3Rpb25hbENvcmUiLCJnZXROb2RlTG9hZGFibGUiLCJzZXROb2RlVmFsdWUiLCJpbml0aWFsaXplTm9kZSIsImNsZWFuVXBOb2RlIiwiX3N0YXRlJG5vZGVDbGVhbnVwRnVuIiwic2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCIsIl9ub2RlJGludmFsaWRhdGUiLCJwZWVrTm9kZUluZm8iLCJsb2FkYWJsZSIsImlzU2V0IiwiaXNNb2RpZmllZCIsIl9ncmFwaCRub2RlRGVwcyRnZXQiLCJzdWJzY3JpYmVycyIsIl9zdG9yZVN0YXRlJG5vZGVUb0NvbSIsIl9zdG9yZVN0YXRlJG5vZGVUb0NvbTIiLCJjb21wb25lbnRzIiwiY3JlYXRlTXV0YWJsZVNvdXJjZSIsInJlYWN0IiwidW5zdGFibGVfY3JlYXRlTXV0YWJsZVNvdXJjZSIsInVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVuc3RhYmxlX3VzZVN5bmNFeHRlcm5hbFN0b3JlIiwiUmVjb2lsX1JlYWN0TW9kZSIsInJlYWN0TW9kZSIsImVhcmx5IiwiY29uY3VycmVudCIsIiRkaXNhYmxlUmVjb2lsVmFsdWVNdXRhYmxlU291cmNlX1RFTVBfSEFDS19ET19OT1RfVVNFIiwiZ2V0RG93bnN0cmVhbU5vZGVzJDEiLCJnZXROb2RlTG9hZGFibGUkMSIsInNldE5vZGVWYWx1ZSQxIiwiZ2V0TmV4dENvbXBvbmVudElEJDEiLCJnZXROb2RlJDIiLCJnZXROb2RlTWF5YmUkMiIsIkRlZmF1bHRWYWx1ZSQxIiwiUmVjb2lsVmFsdWVOb3RSZWFkeSQxIiwicmVhY3RNb2RlJDEiLCJBYnN0cmFjdFJlY29pbFZhbHVlJDEiLCJSZWNvaWxTdGF0ZSQxIiwiUmVjb2lsVmFsdWVSZWFkT25seSQxIiwiaXNSZWNvaWxWYWx1ZSQxIiwiYXBwbHlBY3Rpb24iLCJ2YWx1ZU9yVXBkYXRlciIsInZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyIiwid3JpdGVzIiwid3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlIiwidW52YWxpZGF0ZWRWYWx1ZSIsImFwcGx5QWN0aW9uc1RvU3RvcmUiLCJhY3Rpb25zIiwicmVwbGFjZVN0YXRlIiwibmV3U3RhdGUiLCJjb3B5VHJlZVN0YXRlIiwiaW52YWxpZGF0ZURvd25zdHJlYW1zIiwicXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZSIsImJhdGNoU3RhY2siLCJhY3Rpb25zQnlTdG9yZSIsImRvd25zdHJlYW1zIiwiX2dldE5vZGVNYXliZSIsIl9nZXROb2RlTWF5YmUkaW52YWxpZCIsInNldFJlY29pbFZhbHVlIiwiUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlIiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlIiwic2V0UmVjb2lsVmFsdWVMb2FkYWJsZSIsIm1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkIiwic2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSIsInN1YnNjcmliZVRvUmVjb2lsVmFsdWUiLCJjb21wb25lbnREZWJ1Z05hbWUiLCJzdWJJRCIsInJlbGVhc2UiLCJyZWxlYXNlU3RvcmVTdGF0ZSIsInN1YnMiLCJhcHBseUF0b21WYWx1ZVdyaXRlcyIsImJhdGNoU3RhcnQiLCJyZWZyZXNoUmVjb2lsVmFsdWUiLCJfbm9kZSRjbGVhckNhY2hlIiwiY2xlYXJDYWNoZSIsImludmFsaWRhdGVEb3duc3RyZWFtc19GT1JfVEVTVElORyIsIlJlY29pbF9zb21lU2V0IiwiZW50cnkiLCJjbGVhblVwTm9kZSQxIiwiZGVsZXRlTm9kZUNvbmZpZ0lmUG9zc2libGUkMSIsImdldE5vZGUkMyIsIlJldGVudGlvblpvbmUkMiIsImVtcHR5U2V0JDEiLCJyZWxlYXNlUmV0YWluYWJsZXNOb3dPbkN1cnJlbnRUcmVlIiwicmV0YWluYWJsZXMiLCJyZWxlYXNhYmxlTm9kZXMiLCJzZWFyY2hGcm9tTm9kZXMiLCJub25SZWxlYXNhYmxlTm9kZXMiLCJmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIiLCJyZWxlYXNhYmxlTm9kZXNGb3VuZFRoaXNJdGVyYXRpb24iLCJkb05vdERlc2NlbmRJbnRvMSIsImRvTm90RGVzY2VuZEludG8yIiwiYW5zd2VyIiwidmlzaXRlZCIsImdldERvd25zdHJlYW1Ob2Rlc0luVG9wb2xvZ2ljYWxPcmRlciIsIl9zdG9yZVN0YXRlJHJldGVudGlvbiIsInpvbmVzVGhhdENvdWxkUmV0YWluTm9kZSIsIm5vZGVDaGlsZHJlbiIsInBhcmVudHMiLCJwYXJlbnQiLCJmaW5kUmVsZWFzYWJsZU5vZGVzIiwicmVsZWFzZU5vZGUiLCJ6b25lcyIsIl9zdG9yZVN0YXRlJHJldGVudGlvbjIiLCJfc3RvcmVTdGF0ZSRyZXRlbnRpb24zIiwidXBkYXRlUmV0YWluQ291bnRUb1plcm8iLCJyZXRhaW5hYmxlIiwic2NoZWR1bGVPclBlcmZvcm1Qb3NzaWJsZVJlbGVhc2VPZlJldGFpbmFibGUiLCJSZWNvaWxfUmV0ZW50aW9uIiwiU1VTUEVOU0VfVElNRU9VVF9NUyIsInVwZGF0ZVJldGFpbkNvdW50IiwiZGVsdGEiLCJfbWFwJGdldCIsIm5ld0NvdW50IiwicmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93IiwicmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0IiwiUmVhY3RCYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDEiLCJSZWNvaWxfUmVhY3RCYXRjaGVkVXBkYXRlcyIsImJhdGNoU3RhcnQkMSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDIiLCJiYXRjaGVyIiwiUmVjb2lsX0JhdGNoaW5nIiwiZ2V0QmF0Y2hlciIsInNldEJhdGNoZXIiLCJuZXdCYXRjaGVyIiwiYmF0Y2hVcGRhdGVzIiwiYmF0Y2hFbmQiLCJSZWNvaWxfRW52aXJvbm1lbnQiLCJpc1NTUiIsImlzUmVhY3ROYXRpdmUiLCJwcm9kdWN0IiwiUmVjb2lsX01lbW9pemUiLCJtZW1vaXplV2l0aEFyZ3NIYXNoIiwiaGFzaEZ1bmN0aW9uIiwibWVtb2l6ZU9uZVdpdGhBcmdzSGFzaCIsImxhc3RLZXkiLCJsYXN0UmVzdWx0IiwibWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbiIsImJhdGNoVXBkYXRlcyQxIiwiaW5pdGlhbGl6ZU5vZGUkMSIsInBlZWtOb2RlSW5mbyQxIiwiZ3JhcGgkMSIsImdldE5leHRTdG9yZUlEJDEiLCJERUZBVUxUX1ZBTFVFJDEiLCJyZWNvaWxWYWx1ZXMkMSIsInJlY29pbFZhbHVlc0ZvcktleXMkMiIsIkFic3RyYWN0UmVjb2lsVmFsdWUkMiIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQxIiwic2V0UmVjb2lsVmFsdWUkMSIsInNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMSIsInVwZGF0ZVJldGFpbkNvdW50JDEiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQyIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSQxIiwiaXNTU1IkMSIsIm1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb24kMSIsIlNuYXBzaG90IiwiY2hlY2tSZWZDb3VudF9JTlRFUk5BTCIsIl9zdG9yZSIsImdldExvYWRhYmxlIiwib3B0IiwiaXNJbml0aWFsaXplZCIsIml0ZXJzIiwiaXRlciIsIlJlY29pbF9jb25jYXRJdGVyYWJsZXMiLCJtYXBwZXIiLCJtdXRhYmxlU25hcHNob3QiLCJNdXRhYmxlU25hcHNob3QiLCJhc3luYyIsInJldGFpbiIsImF1dG9SZWxlYXNlX0lOVEVSTkFMIiwic3RvcmVJRCIsInJlcGxhY2VyIiwiZ3JhcGhzIiwibmV3R3JhcGgiLCJzdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyIsImFkZFRyYW5zYWN0aW9uTWV0YWRhdGEiLCJfcmVmQ291bnQiLCJyZWxlYXNlZCIsIl9yZWxlYXNlIiwiaXNSZXRhaW5lZCIsImdldFN0b3JlX0lOVEVSTkFMIiwiZ2V0SUQiLCJjbG9uZVN0b3JlU3RhdGUiLCJidW1wVmVyc2lvbiIsIm1lbW9pemVkQ2xvbmVTbmFwc2hvdCIsImludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90IiwiX3N0b3JlJGdldFN0YXRlJHByZXZpIiwic25hcHNob3QiLCJyZWNvaWxTdGF0ZSIsIm5ld1ZhbHVlT3JVcGRhdGVyIiwiX2JhdGNoIiwiUmVjb2lsX1NuYXBzaG90IiwiZnJlc2hTbmFwc2hvdCIsImluaXRpYWxpemVTdGF0ZSIsImNsb25lU25hcHNob3QiLCJSZWNvaWxfU25hcHNob3RfMSIsIlJlY29pbF9TbmFwc2hvdF8yIiwiUmVjb2lsX1NuYXBzaG90XzMiLCJSZWNvaWxfU25hcHNob3RfNCIsIlJlY29pbF9TbmFwc2hvdCQxIiwiUmVjb2lsX3VuaW9uU2V0cyIsInNldHMiLCJSZWNvaWxfdXNlUmVmSW5pdE9uY2UiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQzIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSQyIiwiY2xlYW5VcE5vZGUkMiIsImdldERvd25zdHJlYW1Ob2RlcyQyIiwiaW5pdGlhbGl6ZU5vZGUkMiIsInNldE5vZGVWYWx1ZSQyIiwic2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxIiwiZ3JhcGgkMiIsImNsb25lR3JhcGgkMSIsImdldE5leHRTdG9yZUlEJDIiLCJjcmVhdGVNdXRhYmxlU291cmNlJDEiLCJyZWFjdE1vZGUkMiIsImFwcGx5QXRvbVZhbHVlV3JpdGVzJDEiLCJyZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMSIsImZyZXNoU25hcHNob3QkMSIsInVzZVJlZiQxIiwibm90SW5BQ29udGV4dCIsImRlZmF1bHRTdG9yZSIsInN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQiLCJzdGFydE5leHRUcmVlSWZOZWVkZWQiLCJBcHBDb250ZXh0IiwidXNlU3RvcmVSZWYiLCJNdXRhYmxlU291cmNlQ29udGV4dCIsIm5vdGlmeUNvbXBvbmVudHMiLCJkZXBlbmRlbnROb2RlcyIsImNvbXBzIiwiX3N1YklEIiwiX2RlYnVnTmFtZSIsInNlbmRFbmRPZkJhdGNoTm90aWZpY2F0aW9ucyIsInN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb24iLCJCYXRjaGVyIiwic2V0Tm90aWZ5QmF0Y2hlck9mQ2hhbmdlIiwic3RvcmVSZWYiLCJlbmRCYXRjaCIsIm5leHRJRCIsIlJlY29pbFJvb3RfSU5URVJOQUwiLCJpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCIsInN0b3JlX0lOVEVSTkFMIiwic3RvcmVQcm9wIiwic3RvcmVTdGF0ZVJlZiIsIm1ldGFkYXRhIiwicmVwbGFjZWQiLCJub3RpZnlCYXRjaGVyT2ZDaGFuZ2UiLCJpbml0aWFsIiwiYXRvbSIsIndyaXR0ZW5Ob2RlcyIsInNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyIsImluaXRpYWxTdG9yZVN0YXRlX0RFUFJFQ0FURUQiLCJpbml0aWFsU3RvcmVTdGF0ZSIsIm11dGFibGVTb3VyY2UiLCJhdG9tS2V5IiwiUmVjb2lsX1JlY29pbFJvb3QiLCJSZWNvaWxSb290Iiwib3ZlcnJpZGUiLCJwcm9wc0V4Y2VwdE92ZXJyaWRlIiwiYW5jZXN0b3JTdG9yZVJlZiIsInVzZVJlY29pbE11dGFibGVTb3VyY2UiLCJ1c2VSZWNvaWxTdG9yZUlEIiwibm90aWZ5Q29tcG9uZW50c19GT1JfVEVTVElORyIsInNlbmRFbmRPZkJhdGNoTm90aWZpY2F0aW9uc19GT1JfVEVTVElORyIsInVzZUVmZmVjdCQxIiwidXNlUmVmJDIiLCJSZWNvaWxfdXNlUHJldmlvdXMiLCJ1c2VTdG9yZVJlZiQxIiwiU1VTUEVOU0VfVElNRU9VVF9NUyQxIiwidXBkYXRlUmV0YWluQ291bnQkMiIsIlJldGVudGlvblpvbmUkMyIsInVzZUVmZmVjdCQyIiwidXNlUmVmJDMiLCJpc1NTUiQyIiwiUmVjb2lsX3VzZVJldGFpbiIsInRvUmV0YWluIiwidGltZW91dElEIiwicHJldmlvdXNSZXRhaW5hYmxlcyIsIlJlY29pbF9zaGFsbG93QXJyYXlFcXVhbCIsInVzZVJldGFpbl9BQ1RVQUwiLCJ1c2VSZWYkNCIsIlJlY29pbF91c2VDb21wb25lbnROYW1lIiwiYmF0Y2hVcGRhdGVzJDIiLCJERUZBVUxUX1ZBTFVFJDIiLCJyZWFjdE1vZGUkMyIsInVzZU11dGFibGVTb3VyY2UkMSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlJDEiLCJ1c2VSZWNvaWxNdXRhYmxlU291cmNlJDEiLCJ1c2VTdG9yZVJlZiQyIiwiaXNSZWNvaWxWYWx1ZSQyIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQzIiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIiLCJzZXRSZWNvaWxWYWx1ZSQyIiwic2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQyIiwic3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxIiwidXNlQ2FsbGJhY2skMSIsInVzZUVmZmVjdCQzIiwidXNlTWVtbyQxIiwidXNlUmVmJDUiLCJ1c2VTdGF0ZSQxIiwic2V0QnlBZGRpbmdUb1NldCQyIiwiaGFuZGxlTG9hZGFibGUiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1NZTkNfRVhURVJOQUxfU1RPUkUiLCJtZW1vaXplUHJldmlvdXNTbmFwc2hvdCIsInByZXZTdGF0ZSIsIl9wcmV2U3RhdGUiLCJfcHJldlN0YXRlMiIsIm5leHRTdGF0ZSIsImdldE1lbW9pemVkU25hcHNob3QiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVfU09VUkNFIiwiX3N0b3JlU3RhdGUkbmV4dFRyZWUzIiwiZ2V0TG9hZGFibGVXaXRoVGVzdGluZyIsIl9zdG9yZVN0YXRlIiwibmV3TG9hZGFibGUiLCJwcmV2TG9hZGFibGVSZWYiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVCIsIl9zdG9yZVN0YXRlJG5leHRUcmVlNCIsInVwZGF0ZVN0YXRlIiwiX3N0YXRlIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kiLCJfc3RvcmVTdGF0ZSRuZXh0VHJlZTUiLCJfcHJldkxvYWRhYmxlUmVmJGN1cnIiLCJfcHJldkxvYWRhYmxlUmVmJGN1cnIyIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZSIsIlRSQU5TSVRJT05fU1VQUE9SVCIsIlNZTkNfRVhURVJOQUxfU1RPUkUiLCJNVVRBQkxFX1NPVVJDRSIsIkxFR0FDWSIsInVzZVJlY29pbFZhbHVlIiwidXNlU2V0UmVjb2lsU3RhdGUiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSIsInVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSIsIlJlY29pbF9Ib29rcyIsInJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkciLCJ1c2VSZWNvaWxJbnRlcmZhY2UiLCJyZWNvaWxWYWx1ZXNVc2VkIiwicHJldmlvdXNTdWJzY3JpcHRpb25zIiwidW5zdWJzY3JpYmVGcm9tIiwic3ViIiwiY3VycmVudFN1YnNjcmlwdGlvbnMiLCJnZXRSZWNvaWxWYWx1ZSIsImdldFJlY29pbFZhbHVlTG9hZGFibGUiLCJnZXRSZWNvaWxTdGF0ZSIsImdldFJlY29pbFN0YXRlTG9hZGFibGUiLCJnZXRTZXRSZWNvaWxTdGF0ZSIsImdldFJlc2V0UmVjb2lsU3RhdGUiLCJ1c2VSZWNvaWxTdGF0ZSIsInVzZVJlY29pbFN0YXRlTG9hZGFibGUiLCJ1c2VSZXNldFJlY29pbFN0YXRlIiwidXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzIiwidXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFIiwiYmF0Y2hVcGRhdGVzJDMiLCJERUZBVUxUX1ZBTFVFJDMiLCJnZXROb2RlJDQiLCJub2RlcyQxIiwidXNlU3RvcmVSZWYkMyIsIkFic3RyYWN0UmVjb2lsVmFsdWUkNCIsInNldFJlY29pbFZhbHVlTG9hZGFibGUkMSIsIlNVU1BFTlNFX1RJTUVPVVRfTVMkMiIsImNsb25lU25hcHNob3QkMSIsInVzZUNhbGxiYWNrJDIiLCJ1c2VFZmZlY3QkNCIsInVzZVJlZiQ2IiwidXNlU3RhdGUkMiIsImlzU1NSJDMiLCJ1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbiIsImV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUiLCJwZXJzaXN0ZWRBdG9tQ29udGVudHNWYWx1ZXMiLCJSZWNvaWxfZmlsdGVyTWFwIiwicGVyc2lzdGVuY2UiLCJwZXJzaXN0ZW5jZV9VTlNUQUJMRSIsIm1hcHMiLCJuZXh0S2V5IiwiUmVjb2lsX21lcmdlTWFwcyIsImdvdG9TbmFwc2hvdCIsInByZXYiLCJrZXlzVG9VcGRhdGUiLCJfcHJldiRhdG9tVmFsdWVzJGdldCIsIl9uZXh0JGF0b21WYWx1ZXMkZ2V0Iiwic2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHMiLCJSZWNvaWxfU25hcHNob3RIb29rcyIsInVzZVJlY29pbFNuYXBzaG90IiwicHJldmlvdXNTbmFwc2hvdCIsInJlbGVhc2VSZWYiLCJfcmVsZWFzZVJlZiRjdXJyZW50MiIsIl9yZWxlYXNlUmVmJGN1cnJlbnQiLCJfcmVsZWFzZVJlZiRjdXJyZW50MyIsInVzZUdvdG9SZWNvaWxTbmFwc2hvdCIsInVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIiLCJ1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQiLCJwcmV2aW91c0F0b21WYWx1ZXMiLCJhdG9tSW5mbyIsIl9ub2RlJHBlcnNpc3RlbmNlX1VOUyIsIl9ub2RlJHBlcnNpc3RlbmNlX1VOUzIiLCJfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TNCIsImJhY2tCdXR0b24iLCJtb2RpZmllZEF0b21zIiwiUmVjb2lsX2ZpbHRlclNldCIsInVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uX0RFUFJFQ0FURUQiLCJwZWVrTm9kZUluZm8kMiIsInVzZVN0b3JlUmVmJDQiLCJyZWFjdE1vZGUkNCIsIlJlY29pbFJvb3QkMSIsInVzZVN0b3JlUmVmJDUiLCJ1c2VNZW1vJDIiLCJsb2FkYWJsZVdpdGhWYWx1ZSQxIiwiaW5pdGlhbGl6ZU5vZGUkMyIsIkRFRkFVTFRfVkFMVUUkNCIsImdldE5vZGUkNSIsImNvcHlUcmVlU3RhdGUkMSIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQzIiwiaW52YWxpZGF0ZURvd25zdHJlYW1zJDEiLCJ3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUkMSIsImlzQXRvbSIsIlRyYW5zYWN0aW9uSW50ZXJmYWNlSW1wbCIsIl9jaGFuZ2VzIiwiX3RyZWVTdGF0ZSIsIm5ld1RyZWVTdGF0ZV9JTlRFUk5BTCIsIlJlY29pbF9BdG9taWNVcGRhdGVzXzEiLCJjaGFuZ2VzZXQiLCJSZWNvaWxfQXRvbWljVXBkYXRlcyQxIiwiYXRvbWljVXBkYXRlciIsIlJlY29pbF9pbnZhcmlhbnQiLCJjb25kaXRpb24iLCJhdG9taWNVcGRhdGVyJDEiLCJiYXRjaFVwZGF0ZXMkNCIsIkRFRkFVTFRfVkFMVUUkNSIsInVzZVN0b3JlUmVmJDYiLCJyZWZyZXNoUmVjb2lsVmFsdWUkMSIsInNldFJlY29pbFZhbHVlJDMiLCJTbmFwc2hvdCQxIiwiY2xvbmVTbmFwc2hvdCQyIiwiZ290b1NuYXBzaG90JDEiLCJ1c2VDYWxsYmFjayQzIiwiU2VudGluZWwiLCJTRU5USU5FTCIsInJlY29pbENhbGxiYWNrIiwiZXh0cmFJbnRlcmZhY2UiLCJlcnJNc2ciLCJjYWxsYmFja0ludGVyZmFjZSIsInJlZnJlc2giLCJ0cmFuc2FjdF9VTlNUQUJMRSIsInRyYW5zYWN0aW9uIiwiUmVjb2lsX3VzZVJlY29pbENhbGxiYWNrIiwidXNlUmVjb2lsQ2FsbGJhY2siLCJ1c2VTdG9yZVJlZiQ3IiwicmVmcmVzaFJlY29pbFZhbHVlJDIiLCJ1c2VDYWxsYmFjayQ0IiwiYXRvbWljVXBkYXRlciQyIiwidXNlU3RvcmVSZWYkOCIsInVzZU1lbW8kMyIsImZpbmRMZWFmIiwiZ2V0Tm9kZVZhbHVlIiwiaGFuZGxlcnMiLCJfaGFuZGxlcnMkb25Ob2RlVmlzaXQiLCJvbk5vZGVWaXNpdCIsImJyYW5jaGVzIiwiYWRkTGVhZiIsInJvdXRlIiwiYnJhbmNoS2V5Iiwib25BYm9ydCIsIl9oYW5kbGVycyRvbk5vZGVWaXNpdDIiLCJwYXRoIiwicHJ1bmVVcHN0cmVhbUJyYW5jaGVzIiwiYnJhbmNoTm9kZSIsImNvdW50RG93bnN0cmVhbUxlYXZlcyIsInN1bSIsImN1cnJOb2RlIiwiUmVjb2lsX1RyZWVDYWNoZV8xIiwiX29wdGlvbnMkb25IaXQiLCJfb3B0aW9ucyRvblNldCIsIl9vcHRpb25zJG1hcE5vZGVWYWx1ZSIsIl9udW1MZWFmcyIsIl9vbkhpdCIsIm9uSGl0IiwiX29uU2V0Iiwib25TZXQiLCJfbWFwTm9kZVZhbHVlIiwibWFwTm9kZVZhbHVlIiwiX3RoaXMkZ2V0TGVhZk5vZGUiLCJnZXRMZWFmTm9kZSIsImxlYWZOb2RlIiwic2V0UmV0cnlhYmxlUGFydCIsInBydW5lTm9kZUZyb21UcmVlIiwiUmVjb2lsX1RyZWVDYWNoZSQxIiwiVHJlZUNhY2hlIiwiUmVjb2lsX0xSVUNhY2hlXzEiLCJfb3B0aW9ucyRtYXBLZXkiLCJfbWF4U2l6ZSIsIm1heFNpemUiLCJfaGVhZCIsIl90YWlsIiwiX2tleU1hcHBlciIsIm1hcEtleSIsIm1hcHBlZEtleSIsInJpZ2h0IiwiX21heWJlRGVsZXRlTFJVIiwiZGVsZXRlTHJ1IiwiUmVjb2lsX0xSVUNhY2hlJDEiLCJMUlVDYWNoZSIsIkxSVUNhY2hlJDEiLCJUcmVlQ2FjaGUkMSIsIlJlY29pbF90cmVlQ2FjaGVMUlUiLCJscnVDYWNoZSIsImxydU5vZGUiLCJhbGxvd0Z1bmN0aW9ucyIsIl9KU09OJHN0cmluZ2lmeSIsInRvSlNPTiIsImxvY2FsZUNvbXBhcmUiLCJSZWNvaWxfc3RhYmxlU3RyaW5naWZ5IiwiVHJlZUNhY2hlJDIiLCJkZWZhdWx0UG9saWN5IiwiZXF1YWxpdHkiLCJldmljdGlvbiIsImlzUmVhY3ROYXRpdmUkMSIsImlzU1NSJDQiLCJsb2FkYWJsZVdpdGhFcnJvciQxIiwibG9hZGFibGVXaXRoUHJvbWlzZSQxIiwibG9hZGFibGVXaXRoVmFsdWUkMiIsImdldE5vZGVMb2FkYWJsZSQyIiwicGVla05vZGVMb2FkYWJsZSQxIiwic2V0Tm9kZVZhbHVlJDMiLCJzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkMSIsIkRFRkFVTFRfVkFMVUUkNiIsIlJlY29pbFZhbHVlTm90UmVhZHkkMiIsImdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQxIiwiZ2V0Tm9kZSQ2IiwicmVnaXN0ZXJOb2RlJDEiLCJpc1JlY29pbFZhbHVlJDMiLCJtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQxIiwicmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0JDEiLCJyZWNvaWxDYWxsYmFjayQxIiwic3RhcnRQZXJmQmxvY2siLCJzdGFydFBlcmZCbG9jayQxIiwiX2lkIiwiQ2FuY2VsZWQiLCJDQU5DRUxFRCIsImRlcGVuZGVuY3lTdGFjayIsIndhaXRpbmdTdG9yZXMiLCJnZXROZXdFeGVjdXRpb25JZCIsImV4ZWN1dGlvbklkIiwiUmVjb2lsX3NlbGVjdG9yIiwiY2FjaGVQb2xpY3lfVU5TVEFCTEUiLCJjYWNoZVBvbGljeSIsImRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMiLCJ2YWx1ZU1hcHBlciIsImdldFZhbHVlTWFwcGVyIiwidHJlZUNhY2hlIiwiZ2V0VHJlZUNhY2hlIiwiUmVjb2lsX3RyZWVDYWNoZUZyb21Qb2xpY3kiLCJyZXRhaW5lZEJ5X1VOU1RBQkxFIiwiZXhlY3V0aW9uSW5mb01hcCIsImxpdmVTdG9yZXNDb3VudCIsInNlbGVjdG9ySXNMaXZlIiwic2VsZWN0b3JJbml0Iiwic2VsZWN0b3JTaG91bGREZWxldGVDb25maWdPblJlbGVhc2UiLCJyZXNvbHZlQXN5bmMiLCJkZXBWYWx1ZXMiLCJzZXRDYWNoZSIsInNldERlcHNJblN0b3JlIiwibm90aWZ5U3RvcmVzT2ZSZXNvbHZlZEFzeW5jIiwiaXNMYXRlc3RFeGVjdXRpb24iLCJjbGVhckV4ZWN1dGlvbkluZm8iLCJzdG9yZXMiLCJ3YWl0aW5nU3RvcmUiLCJtYXJrU3RvcmVXYWl0aW5nRm9yUmVzb2x2ZWRBc3luYyIsImdldENhY2hlZE5vZGVMb2FkYWJsZSIsImlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yIiwid3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZSIsImV4aXN0aW5nRGVwcyIsImxvYWRpbmdEZXBzU3RhdGUiLCJyZXNvbHZlZERlcCIsImxvYWRpbmdEZXBLZXkiLCJsb2FkaW5nRGVwUHJvbWlzZSIsImNhY2hlZExvYWRhYmxlIiwiZ2V0VmFsRnJvbUNhY2hlQW5kVXBkYXRlZERvd25zdHJlYW1EZXBzIiwiZ2V0RXhlY3V0aW9uSW5mbyIsImV4ZWN1dGlvbkluZm8iLCJnZXRFeGVjdXRpb25JbmZvT2ZJblByb2dyZXNzRXhlY3V0aW9uIiwibGF0ZXN0TG9hZGFibGUiLCJldmFsdWF0ZVNlbGVjdG9yR2V0dGVyIiwidXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyIsIl9zdG9yZSRnZXRTdGF0ZSIsIl9zdG9yZSRnZXRTdGF0ZSRjdXJyZSIsIl9zdG9yZSRnZXRTdGF0ZTIiLCJfc3RvcmUkZ2V0U3RhdGUyJG5leHQiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQiLCJfc3RvcmUkZ2V0U3RhdGUzIiwiX3N0b3JlJGdldFN0YXRlMyRuZXh0IiwiZW5kUGVyZkJsb2NrIiwiZ2F0ZUNhbGxiYWNrIiwiZmluaXNoRXZhbHVhdGlvbiIsInJlc3VsdElzRXJyb3IiLCJkZXBLZXkiLCJuZXdEZXBLZXkiLCJzZXROZXdEZXBJblN0b3JlIiwiZGVwTG9hZGFibGUiLCJnZXRDYWxsYmFjayIsImVycm9yT3JQcm9taXNlIiwid3JhcFBlbmRpbmdQcm9taXNlIiwiZmluYWxseSIsImVycm9yT3JEZXBQcm9taXNlIiwiZGVwc0FmdGVyQ2FjaGVEb25lIiwiY2FjaGVkVmFsIiwibGF0ZXN0RXhlY3V0aW9uSWQiLCJfQXJyYXkkZnJvbSRmaW5kIiwiZXhlY0luZm8iLCJfZXhlY3V0aW9uSW5mbyRkZXBWYWwiLCJfbWFwT2ZDaGVja2VkVmVyc2lvbnMiLCJvbGREZXBWYWx1ZXMiLCJkZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmsiLCJjYWNoZWREZXBWYWx1ZXNDaGVja2VkRm9yVGhpc1ZlcnNpb24iLCJtYXBPZkNoZWNrZWRWZXJzaW9ucyIsImlzQ2FjaGVkVmVyc2lvblNhbWUiLCJub2RlVmFsIiwic3RhdGVWZXJzaW9uIiwib2xkVmFsIiwiaGF2ZUFzeW5jRGVwc0NoYW5nZWQiLCJfZ2V0RXhlY3V0aW9uSW5mbyIsInZhbExvYWRhYmxlIiwiZGVwVmFsdWVzVG9EZXBSb3V0ZSIsInNlbGVjdG9yUGVlayIsIl9wZWVrTm9kZUxvYWRhYmxlIiwic2VsZWN0b3JHZXQiLCJpblByb2dyZXNzRXhlY3V0aW9uSW5mbyIsIl9pblByb2dyZXNzRXhlY3V0aW9uSSIsIm5ld0V4ZWN1dGlvbklkIiwibmV3RGVwVmFsdWVzIiwic2V0RXhlY3V0aW9uSW5mbyIsImdldFZhbEZyb21SdW5uaW5nTmV3RXhlY3V0aW9uQW5kVXBkYXRlZERlcHMiLCJnZXRTZWxlY3RvclZhbEFuZFVwZGF0ZWREZXBzIiwiZGV0ZWN0Q2lyY3VsYXJEZXBlbmRlbmNpZXMiLCJpbnZhbGlkYXRlU2VsZWN0b3IiLCJjbGVhclNlbGVjdG9yQ2FjaGUiLCJzZWxlY3RvclNldCIsInN5bmNTZWxlY3RvclNldEZpbmlzaGVkIiwic2V0UmVjb2lsU3RhdGUiLCJkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSIsImxvYWRhYmxlV2l0aEVycm9yJDIiLCJsb2FkYWJsZVdpdGhQcm9taXNlJDIiLCJsb2FkYWJsZVdpdGhWYWx1ZSQzIiwicGVla05vZGVJbmZvJDMiLCJERUZBVUxUX1ZBTFVFJDciLCJEZWZhdWx0VmFsdWUkMiIsImdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyIiwicmVnaXN0ZXJOb2RlJDIiLCJzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMSIsImlzUmVjb2lsVmFsdWUkNCIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQ0IiwibWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMiIsInNldFJlY29pbFZhbHVlJDQiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDIiLCJyZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMiIsIlJlY29pbF9hdG9tIiwib3B0aW9uc0RlZmF1bHQiLCJyZXN0T3B0aW9ucyIsInZhbGlkYXRvciIsInN0b3JlZFZhbHVlIiwiZWZmZWN0c19VTlNUQUJMRSIsInNlbCIsImJhc2VWYWx1ZSIsImF0b21XaXRoRmFsbGJhY2siLCJjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlIiwiZGVmYXVsdExvYWRhYmxlIiwiY2xlYW51cEVmZmVjdHNCeVN0b3JlIiwicGVla0F0b20iLCJfc3RhdGUkYXRvbVZhbHVlcyRnZXQzIiwibm9udmFsaWRhdGVkVmFsdWUiLCJ2YWxpZGF0b3JSZXN1bHQiLCJ2YWxpZGF0ZWRWYWx1ZUxvYWRhYmxlIiwiaW5pdFN0YXRlIiwiX29wdGlvbnMkZWZmZWN0cyIsIm5vdGlmeURlZmF1bHRTdWJzY3JpYmVycyIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDMiLCJkdXJpbmdJbml0IiwiaW5pdFZhbHVlIiwiaXNJbml0RXJyb3IiLCJwZW5kaW5nU2V0U2VsZiIsInJldFZhbHVlIiwiZ2V0UHJvbWlzZSIsImdldEluZm9fVU5TVEFCTEUiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ0IiwiaW5mbyIsInNldFNlbGYiLCJlZmZlY3QiLCJjdXJyZW50TG9hZGFibGUiLCJjdXJyZW50VmFsdWUiLCJyZXNldFNlbGYiLCJoYW5kbGVyIiwiX2NsZWFudXBFZmZlY3RzQnlTdG9yMiIsImN1cnJlbnRTdG9yZSIsIl9jdXJyZW50VHJlZSRhdG9tVmFsdSIsIl9wcmV2aW91c1RyZWUkYXRvbVZhbCIsIl9wZW5kaW5nU2V0U2VsZiIsIl9wZW5kaW5nU2V0U2VsZjIiLCJfcGVuZGluZ1NldFNlbGYzIiwib2xkTG9hZGFibGUiLCJvbGRWYWx1ZSIsIl9jbGVhbnVwRWZmZWN0c0J5U3RvcjMiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1IiwiZnJvemVuSW5pdFZhbHVlIiwiaW5pdExvYWRhYmxlIiwid3JhcHBlZFByb21pc2UiLCJfc3RhdGUkYXRvbVZhbHVlcyRnZXQiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyIiwiX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MiIsIl9jbGVhbnVwRWZmZWN0c0J5U3RvciIsImJhc2VBdG9tIiwiUmVjb2lsX01hcENhY2hlXzEiLCJSZWNvaWxfTWFwQ2FjaGUkMSIsIk1hcENhY2hlIiwiTFJVQ2FjaGUkMiIsIk1hcENhY2hlJDEiLCJkZWZhdWx0UG9saWN5JDEiLCJSZWNvaWxfY2FjaGVGcm9tUG9saWN5IiwiZ2V0VmFsdWVNYXBwZXIkMSIsImdldENhY2hlIiwic2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIiLCJzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMyIsIm5leHRJbmRleCIsIlJlY29pbF9zZWxlY3RvckZhbWlseSIsIl9vcHRpb25zJGNhY2hlUG9saWN5RiIsIl9vcHRpb25zJGNhY2hlUG9saWN5RjIiLCJzZWxlY3RvckNhY2hlIiwiY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUiLCJfc3RhYmxlU3RyaW5naWZ5IiwiY2FjaGVkU2VsZWN0b3IiLCJteUtleSIsIm15R2V0IiwiY2FsbGJhY2tzIiwibXlDYWNoZVBvbGljeSIsIm5ld1NlbGVjdG9yIiwiY29uc3RhbnRTZWxlY3RvciIsInRocm93aW5nU2VsZWN0b3IiLCJsb2FkYWJsZVdpdGhFcnJvciQzIiwibG9hZGFibGVXaXRoUHJvbWlzZSQzIiwibG9hZGFibGVXaXRoVmFsdWUkNCIsImNvbmN1cnJlbnRSZXF1ZXN0cyIsInJlc3VsdHMiLCJmaWxsIiwiZXhjZXB0aW9ucyIsImV4cCIsInVud3JhcERlcGVuZGVuY2llcyIsIndyYXBSZXN1bHRzIiwid3JhcExvYWRhYmxlcyIsImV4Y2VwdGlvbiIsIlJlY29pbF9XYWl0Rm9yIiwid2FpdEZvck5vbmUiLCJ3YWl0Rm9yQW55Iiwid2FpdEZvckFsbCIsImV4Y2VwdGlvblJlc3VsdHMiLCJzeW5jUmVzdWx0cyIsIndhaXRGb3JBbGxTZXR0bGVkIiwibm9XYWl0IiwiZGVwZW5kZW5jeSIsIkRlZmF1bHRWYWx1ZSQzIiwiUmVjb2lsUm9vdCQyIiwidXNlUmVjb2lsU3RvcmVJRCQxIiwiaXNSZWNvaWxWYWx1ZSQ1IiwicmV0ZW50aW9uWm9uZSQxIiwiZnJlc2hTbmFwc2hvdCQyIiwidXNlUmVjb2lsU3RhdGUkMSIsInVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxIiwidXNlUmVjb2lsU3RhdGVMb2FkYWJsZSQxIiwidXNlUmVjb2lsVmFsdWUkMSIsInVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZSQxIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUkMSIsInVzZVJlc2V0UmVjb2lsU3RhdGUkMSIsInVzZVNldFJlY29pbFN0YXRlJDEiLCJ1c2VHb3RvUmVjb2lsU25hcHNob3QkMSIsInVzZVJlY29pbFNuYXBzaG90JDEiLCJ1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyJDEiLCJ1c2VSZWNvaWxDYWxsYmFjayQxIiwibm9XYWl0JDEiLCJ3YWl0Rm9yQWxsJDEiLCJ3YWl0Rm9yQWxsU2V0dGxlZCQxIiwid2FpdEZvckFueSQxIiwid2FpdEZvck5vbmUkMSIsIlJlY29pbF9pbmRleCIsInVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEUiLCJzZWxlY3RvciIsImF0b21GYW1pbHkiLCJhdG9tQ2FjaGUiLCJjYWNoZWRBdG9tIiwiYXRvbU9wdGlvbnMiLCJuZXdBdG9tIiwic2VsZWN0b3JGYW1pbHkiLCJjb25zdFNlbGVjdG9yIiwiZXJyb3JTZWxlY3RvciIsInJlYWRPbmx5U2VsZWN0b3IiLCJ1c2VHZXRSZWNvaWxWYWx1ZUluZm9fVU5TVEFCTEUiLCJ1c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEUiLCJ1c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRSIsImF0b21pY1VwZGF0ZSIsInRyYW5zYWN0aW9uSW50ZXJmYWNlIiwidXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcl9VTlNUQUJMRSIsInNuYXBzaG90X1VOU1RBQkxFIiwidXNlUmV0YWluIiwiUmVjb2lsX2luZGV4XzQiLCJSZWNvaWxfaW5kZXhfNyIsIlJlY29pbF9pbmRleF8xOSIsIlJlY29pbF9pbmRleF8yMSIsIlJlY29pbF9pbmRleF8yMyIsIlBvcCIsIlB1c2giLCJSZXBsYWNlIiwicGF0aG5hbWUiLCJzdWJzdHIiLCJjb25kIiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJtYXRjaGVzIiwiT3V0bGV0IiwiT3V0bGV0Q29udGV4dCIsInVzZU91dGxldCIsIlJvdXRlIiwiX3Byb3BzIiwiYmFzZW5hbWUiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJuYXZpZ2F0aW9uVHlwZSIsInN0YXRpYyIsInN0YXRpY1Byb3AiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJub3JtYWxpemVQYXRobmFtZSIsIm5hdmlnYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsInN0cmlwQmFzZW5hbWUiLCJSb3V0ZXMiLCJfcmVmNCIsInJvdXRlcyIsImxvY2F0aW9uQXJnIiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJwYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJzdGFydHNXaXRoIiwiZmxhdHRlblJvdXRlcyIsInNjb3JlIiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwiY2hpbGRyZW5JbmRleCIsInJhbmtSb3V0ZUJyYW5jaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsIm1hdGNoUm91dGVzIiwicmVkdWNlUmlnaHQiLCJfcmVuZGVyTWF0Y2hlcyIsImpvaW5QYXRocyIsInVzZVJvdXRlcyIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsImxvY2F0aW9uUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJuYXZpZ2F0ZSIsImdvIiwicmVzb2x2ZVRvIiwicGFyc2UiLCJ1c2VQYXJhbXMiLCJjYXNlU2Vuc2l0aXZlIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwicmVsYXRpdmVQYXRoIiwiY29tcHV0ZVNjb3JlIiwicGFyYW1SZSIsImlzU3BsYXQiLCJzZWdtZW50cyIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXR0ZXJuIiwibWF0Y2hlciIsInBhcmFtTmFtZXMiLCJyZWdleHBTb3VyY2UiLCJwYXJhbU5hbWUiLCJlbmRzV2l0aCIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJuZXh0Q2hhciIsInBhdGhzIiwiX2V4Y2x1ZGVkIiwiQnJvd3NlclJvdXRlciIsImhpc3RvcnlSZWYiLCJ1c3IiLCJoaXN0b3J5IiwiY3JlYXRlSHJlZiIsInB1c2hTdGF0ZSIsImJhY2siLCJmb3J3YXJkIiwibGlzdGVuIiwiYmxvY2siLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsIkxpbmsiLCJyZWxvYWREb2N1bWVudCIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiam9pbmVkUGF0aG5hbWUiLCJnZXRUb1BhdGhuYW1lIiwiZW5kc1dpdGhTbGFzaCIsInVzZUhyZWYiLCJpbnRlcm5hbE9uQ2xpY2siLCJfdGVtcCIsInJlcGxhY2VQcm9wIiwiaXNNb2RpZmllZEV2ZW50IiwidXNlTGlua0NsaWNrSGFuZGxlciIsImRlZmF1bHRUaW1lc3RlcCIsImdldEN1cnJlbnRUaW1lIiwib25OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInJ1bk5leHRGcmFtZSIsImlzUHJvY2Vzc2luZyIsInRpbWVzdGFtcCIsInN0ZXBzT3JkZXIiLCJzdGVwcyIsImFjYyIsInRvUnVuIiwidG9SdW5OZXh0RnJhbWUiLCJudW1Ub1J1biIsImZsdXNoTmV4dEZyYW1lIiwidG9LZWVwQWxpdmUiLCJzdGVwIiwia2VlcEFsaXZlIiwiaW1tZWRpYXRlIiwiYWRkVG9DdXJyZW50RnJhbWUiLCJidWZmZXIiLCJmcmFtZURhdGEiLCJjcmVhdGVSZW5kZXJTdGVwIiwic3luYyIsInN0YXJ0TG9vcCIsImNhbmNlbFN5bmMiLCJwcm9jZXNzU3RlcCIsInN0ZXBJZCIsInByb2Nlc3NGcmFtZSIsImdldEZyYW1lRGF0YSIsInZlbG9jaXR5UGVyU2Vjb25kIiwidmVsb2NpdHkiLCJmcmFtZUR1cmF0aW9uIiwiYWRkVW5pcXVlSXRlbSIsInJlbW92ZUl0ZW0iLCJTdWJzY3JpcHRpb25NYW5hZ2VyIiwibnVtU3Vic2NyaXB0aW9ucyIsImdldFNpemUiLCJNb3Rpb25WYWx1ZSIsInRpbWVEZWx0YSIsImxhc3RVcGRhdGVkIiwidXBkYXRlU3Vic2NyaWJlcnMiLCJ2ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzIiwicmVuZGVyU3Vic2NyaWJlcnMiLCJjYW5UcmFja1ZlbG9jaXR5IiwidXBkYXRlQW5kTm90aWZ5IiwiX2EiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJnZXRWZWxvY2l0eSIsInZlbG9jaXR5Q2hlY2siLCJoYXNBbmltYXRlZCIsInBhcnNlRmxvYXQiLCJvbkNoYW5nZSIsImNsZWFyTGlzdGVuZXJzIiwib25SZW5kZXJSZXF1ZXN0IiwiYXR0YWNoIiwicGFzc2l2ZUVmZmVjdCIsImdldFByZXZpb3VzIiwic3RvcCIsInN0b3BBbmltYXRpb24iLCJjbGVhckFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwibW90aW9uVmFsdWUiLCJzZXRQcm9ncmVzcyIsIm1heE9mZnNldCIsImFkZERvbUV2ZW50IiwiZXZlbnROYW1lIiwidXNlRG9tRXZlbnQiLCJ2aWV3cG9ydFNjcm9sbFZhbHVlcyIsImlzQnJvd3NlciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJnZXRWaWV3cG9ydFNjcm9sbE9mZnNldHMiLCJ4T2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJ5T2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJ4TWF4T2Zmc2V0IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwieU1heE9mZnNldCIsImNsaWVudEhlaWdodCIsImlubmVySGVpZ2h0IiwidXNlVmlld3BvcnRTY3JvbGwiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjcm9sbFhQcm9ncmVzcyIsInNjcm9sbFlQcm9ncmVzcyIsInVwZGF0ZVNjcm9sbFZhbHVlcyIsImdldE9mZnNldHMiLCJhZGRFdmVudExpc3RlbmVycyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJfXyIsIl9fYXNzaWduIiwiX19yZXN0IiwiYXIiLCJjcmVhdGVEZWZpbml0aW9uIiwicHJvcE5hbWVzIiwiaXNFbmFibGVkIiwiZmVhdHVyZURlZmluaXRpb25zIiwibWVhc3VyZUxheW91dCIsImV4aXQiLCJkcmFnIiwiaG92ZXIiLCJ0YXAiLCJwYW4iLCJpblZpZXciLCJMYXp5Q29udGV4dCIsInN0cmljdCIsImZlYXR1cmVOYW1lcyIsIm51bUZlYXR1cmVzIiwiTW90aW9uQ29uZmlnQ29udGV4dCIsInRyYW5zZm9ybVBhZ2VQb2ludCIsInJlZHVjZWRNb3Rpb24iLCJNb3Rpb25Db250ZXh0IiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJoYXNEZXRlY3RlZCIsInVzZVZpc3VhbEVsZW1lbnQiLCJ2aXN1YWxTdGF0ZSIsImNyZWF0ZVZpc3VhbEVsZW1lbnQiLCJyZWR1Y2VkTW90aW9uUHJlZmVyZW5jZSIsImxhenlDb250ZXh0IiwidmlzdWFsRWxlbWVudCIsInByZXNlbmNlQ29udGV4dCIsInNob3VsZFJlZHVjZU1vdGlvbiIsIm1hdGNoTWVkaWEiLCJtb3Rpb25NZWRpYVF1ZXJ5XzEiLCJzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMiLCJhZGRMaXN0ZW5lciIsImluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiIsInZpc3VhbEVsZW1lbnRSZWYiLCJyZW5kZXJlciIsInByZXNlbmNlSWQiLCJibG9ja0luaXRpYWxBbmltYXRpb24iLCJzeW5jUmVuZGVyIiwiYW5pbWF0aW9uU3RhdGUiLCJhbmltYXRlQ2hhbmdlcyIsIm5vdGlmeVVubW91bnQiLCJpc1JlZk9iamVjdCIsImlzVmFyaWFudExhYmVscyIsImlzVmFyaWFudExhYmVsIiwicmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMiLCJjdXN0b20iLCJjdXJyZW50VmFsdWVzIiwiY3VycmVudFZlbG9jaXR5IiwidmFyaWFudHMiLCJyZXNvbHZlVmFyaWFudCIsImdldFByb3BzIiwiZm9yRWFjaFZhbHVlIiwiZ2V0Q3VycmVudCIsImNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzIiwiYW5pbWF0ZSIsIndoaWxlSG92ZXIiLCJ3aGlsZURyYWciLCJ3aGlsZVRhcCIsIndoaWxlRm9jdXMiLCJjaGVja0lmVmFyaWFudE5vZGUiLCJ2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5IiwidXNlQ29uc3RhbnQiLCJtaXgiLCJwcm9ncmVzcyIsImlzTW90aW9uVmFsdWUiLCJjbGFtcCIsImNhbGNBbmd1bGFyRnJlcSIsInVuZGFtcGVkRnJlcSIsImRhbXBpbmdSYXRpbyIsInNxcnQiLCJkdXJhdGlvbktleXMiLCJwaHlzaWNzS2V5cyIsImlzU3ByaW5nVHlwZSIsInNwcmluZyIsInJlc3RTcGVlZCIsInJlc3REZWx0YSIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJtYXNzIiwiZHVyYXRpb24iLCJpc1Jlc29sdmVkRnJvbUR1cmF0aW9uIiwic3ByaW5nT3B0aW9ucyIsImRlcml2ZWQiLCJib3VuY2UiLCJlbnZlbG9wZSIsImRlcml2YXRpdmUiLCJleHBvbmVudGlhbERlY2F5IiwiaW5pdGlhbEd1ZXNzIiwiYXBwcm94aW1hdGVSb290IiwiZmluZFNwcmluZyIsImdldFNwcmluZ09wdGlvbnMiLCJyZXNvbHZlU3ByaW5nIiwiemVybyIsInJlc29sdmVWZWxvY2l0eSIsImNyZWF0ZVNwcmluZyIsImluaXRpYWxWZWxvY2l0eSIsImluaXRpYWxEZWx0YSIsInVuZGFtcGVkQW5ndWxhckZyZXEiLCJhbmd1bGFyRnJlcSIsInNpbiIsImNvcyIsImRhbXBlZEFuZ3VsYXJGcmVxIiwiZnJlcUZvclQiLCJzaW5oIiwiY29zaCIsImlzQmVsb3dWZWxvY2l0eVRocmVzaG9sZCIsImlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQiLCJmbGlwVGFyZ2V0IiwibmVlZHNJbnRlcnBvbGF0aW9uIiwiX3QiLCJ0b0Zyb21EaWZmZXJlbmNlIiwic2FuaXRpemUiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZmxvYXRSZWdleCIsImNvbG9yUmVnZXgiLCJzaW5nbGVDb2xvclJlZ2V4IiwiaXNTdHJpbmciLCJ0cmFuc2Zvcm0iLCJhbHBoYSIsInNjYWxlIiwiaXNDb2xvclN0cmluZyIsInRlc3RQcm9wIiwic3BsaXRDb2xvciIsImFOYW1lIiwiYk5hbWUiLCJjTmFtZSIsImNsYW1wUmdiVW5pdCIsInJnYlVuaXQiLCJyb3VuZCIsInJnYmEiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSQxIiwiaGV4IiwiY3JlYXRlVW5pdFR5cGUiLCJ1bml0IiwiZGVncmVlcyIsInBlcmNlbnQiLCJweCIsInZ3IiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwiaHNsYSIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJodWVUb1JnYiIsImhzbGFUb1JnYmEiLCJtaXhMaW5lYXJDb2xvciIsImZyb21FeHBvIiwidG9FeHBvIiwiY29sb3JUeXBlcyIsImdldENvbG9yVHlwZSIsIm5vdEFuaW1hdGFibGUiLCJtaXhDb2xvciIsImZyb21Db2xvclR5cGUiLCJ0b0NvbG9yVHlwZSIsImZyb21Db2xvciIsInRvQ29sb3IiLCJibGVuZGVkIiwiY29sb3JUb2tlbiIsIm51bWJlclRva2VuIiwiYW5hbHlzZSIsIm51bUNvbG9ycyIsImNvbG9ycyIsIm51bWJlcnMiLCJ0b2tlbmlzZWQiLCJjcmVhdGVUcmFuc2Zvcm1lciIsIm51bVZhbHVlcyIsImNvbnZlcnROdW1iZXJzVG9aZXJvIiwiY29tcGxleCIsIl9iIiwiX2MiLCJfZCIsImdldEFuaW1hdGFibGVOb25lIiwicGFyc2VkIiwidHJhbnNmb3JtZXIiLCJpc051bSIsImNvbWJpbmVGdW5jdGlvbnMiLCJwaXBlIiwidHJhbnNmb3JtZXJzIiwiZ2V0TWl4ZXIiLCJvcmlnaW4iLCJtaXhDb21wbGV4IiwibWl4QXJyYXkiLCJibGVuZFZhbHVlIiwiZnJvbVRoaXMiLCJtaXhPYmplY3QiLCJudW1OdW1iZXJzIiwibnVtUkdCIiwibnVtSFNMIiwidGVtcGxhdGUiLCJvcmlnaW5TdGF0cyIsInRhcmdldFN0YXRzIiwibWl4TnVtYmVyIiwiaW50ZXJwb2xhdGUiLCJpc0NsYW1wIiwiZWFzZSIsIm1peGVyIiwiaW5wdXRMZW5ndGgiLCJyZXZlcnNlIiwibWl4ZXJzIiwiY3VzdG9tTWl4ZXIiLCJtaXhlckZhY3RvcnkiLCJkZXRlY3RNaXhlckZhY3RvcnkiLCJudW1NaXhlcnMiLCJlYXNpbmdGdW5jdGlvbiIsImNyZWF0ZU1peGVycyIsImludGVycG9sYXRvciIsImZhc3RJbnRlcnBvbGF0ZSIsImxhc3RJbnB1dEluZGV4IiwibWl4ZXJJbmRleCIsImZvdW5kTWl4ZXJJbmRleCIsInByb2dyZXNzSW5SYW5nZSIsInNsb3dJbnRlcnBvbGF0ZSIsInJldmVyc2VFYXNpbmciLCJlYXNpbmciLCJtaXJyb3JFYXNpbmciLCJjcmVhdGVCYWNrSW4iLCJwb3dlciIsImxpbmVhciIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJjaXJjSW4iLCJhY29zIiwiY2lyY091dCIsImNpcmNJbk91dCIsImJhY2tJbiIsImJhY2tPdXQiLCJiYWNrSW5PdXQiLCJhbnRpY2lwYXRlIiwiYmFja0Vhc2luZyIsImNyZWF0ZUFudGljaXBhdGUiLCJib3VuY2VPdXQiLCJwMiIsImJvdW5jZUluIiwiZGVmYXVsdEVhc2luZyIsImtleWZyYW1lcyIsInRpbWVzIiwiY29udmVydE9mZnNldFRvVGltZXMiLCJfdmFsdWUiLCJkZWZhdWx0T2Zmc2V0IiwiY3JlYXRlSW50ZXJwb2xhdG9yIiwidHlwZXMiLCJ0aW1lQ29uc3RhbnQiLCJtb2RpZnlUYXJnZXQiLCJhbXBsaXR1ZGUiLCJpZGVhbCIsImxvb3BFbGFwc2VkIiwiZWxhcHNlZCIsImZyYW1lc3luYyIsInBhc3NUaW1lc3RhbXAiLCJhdXRvcGxheSIsImRyaXZlciIsInJlcGVhdE1heCIsInJlcGVhdFR5cGUiLCJyZXBlYXREZWxheSIsIm9uUGxheSIsIm9uU3RvcCIsIm9uQ29tcGxldGUiLCJvblJlcGVhdCIsIm9uVXBkYXRlIiwiZHJpdmVyQ29udHJvbHMiLCJsYXRlc3QiLCJpbnRlcnBvbGF0ZUZyb21OdW1iZXIiLCJyZXBlYXRDb3VudCIsImNvbXB1dGVkRHVyYXRpb24iLCJpc0NvbXBsZXRlIiwiaXNGb3J3YXJkUGxheWJhY2siLCJhbmltYXRvciIsImRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zIiwiaGFzUmVwZWF0RGVsYXlFbGFwc2VkIiwicmV2ZXJzZUVsYXBzZWQiLCJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwiYTEiLCJhMiIsImNhbGNCZXppZXIiLCJnZXRTbG9wZSIsImtTYW1wbGVTdGVwU2l6ZSIsImN1YmljQmV6aWVyIiwibVgxIiwibVkxIiwibVgyIiwibVkyIiwic2FtcGxlVmFsdWVzIiwiRmxvYXQzMkFycmF5IiwiYVgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImtTcGxpbmVUYWJsZVNpemUiLCJndWVzc0ZvclQiLCJpbml0aWFsU2xvcGUiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwibmV3dG9uUmFwaHNvbkl0ZXJhdGUiLCJhQSIsImFCIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImJpbmFyeVN1YmRpdmlkZSIsImdldFRGb3JYIiwiZWFzaW5nTG9va3VwIiwiYm91bmNlSW5PdXQiLCJlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiIsImlzQW5pbWF0YWJsZSIsImlzS2V5ZnJhbWVzVGFyZ2V0IiwidW5kZXJEYW1wZWRTcHJpbmciLCJjcml0aWNhbGx5RGFtcGVkU3ByaW5nIiwibGluZWFyVHdlZW4iLCJkZWZhdWx0VHJhbnNpdGlvbnMiLCJyb3RhdGUiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzY2FsZVgiLCJzY2FsZVkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtYXhEZWZhdWx0cyIsImFwcGx5RGVmYXVsdEZpbHRlciIsImZ1bmN0aW9uUmVnZXgiLCJmdW5jdGlvbnMiLCJudW1iZXJWYWx1ZVR5cGVzIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJhZGl1cyIsInJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiYm90dG9tIiwicGFkZGluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJtYXJnaW4iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJzY2FsZVoiLCJza2V3Iiwic2tld1giLCJza2V3WSIsImRpc3RhbmNlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwicGVyc3BlY3RpdmUiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsIm9yaWdpblgiLCJvcmlnaW5ZIiwib3JpZ2luWiIsIm51bU9jdGF2ZXMiLCJkZWZhdWx0VmFsdWVUeXBlcyIsIm91dGxpbmVDb2xvciIsInN0cm9rZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJXZWJraXRGaWx0ZXIiLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwiZGVmYXVsdFZhbHVlVHlwZSIsInJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMiLCJnZXRQb3Btb3Rpb25BbmltYXRpb25PcHRpb25zIiwidmFsdWVLZXkiLCJ0cmFuc2l0aW9uRmFjdG9yeSIsImh5ZHJhdGVLZXlmcmFtZXMiLCJ3aGVuIiwiZGVsYXlDaGlsZHJlbiIsInN0YWdnZXJDaGlsZHJlbiIsInN0YWdnZXJEaXJlY3Rpb24iLCJpc1RyYW5zaXRpb25EZWZpbmVkIiwieW95byIsImZsaXAiLCJsb29wIiwiaXNFYXNpbmdBcnJheSIsImNvbnZlcnRUcmFuc2l0aW9uVG9BbmltYXRpb25PcHRpb25zIiwiaXNaZXJvIiwiZ2V0WmVyb1VuaXQiLCJwb3RlbnRpYWxVbml0VHlwZSIsImdldFZhbHVlVHJhbnNpdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwiZGVsYXlUaW1lciIsImNvbnRyb2xzIiwidmFsdWVUcmFuc2l0aW9uIiwiaXNUYXJnZXRBbmltYXRhYmxlIiwiaXNPcmlnaW5BbmltYXRhYmxlIiwiYm91bmNlU3RpZmZuZXNzIiwiYm91bmNlRGFtcGluZyIsImN1cnJlbnRBbmltYXRpb24iLCJpc091dE9mQm91bmRzIiwiYm91bmRhcnlOZWFyZXN0Iiwic3RhcnRTcHJpbmciLCJib3VuZGFyeSIsImhlYWRpbmciLCJjaGVja0JvdW5kYXJ5IiwiaW5lcnRpYSIsImZpbmFsVGFyZ2V0IiwiZ2V0QW5pbWF0aW9uIiwiZ2V0RGVsYXlGcm9tVHJhbnNpdGlvbiIsImJvcmRlcnMiLCJudW1Cb3JkZXJzIiwiYXNOdW1iZXIiLCJpc1B4IiwiZ2V0UmFkaXVzIiwicmFkaXVzTmFtZSIsImVhc2VDcm9zc2ZhZGVJbiIsImNvbXByZXNzIiwiZWFzZUNyb3NzZmFkZU91dCIsImNvcHlBeGlzSW50byIsImF4aXMiLCJvcmlnaW5BeGlzIiwiY29weUJveEludG8iLCJib3giLCJvcmlnaW5Cb3giLCJpc0lkZW50aXR5U2NhbGUiLCJoYXNTY2FsZSIsImhhc1RyYW5zZm9ybSIsImhhc1RyYW5zbGF0ZSIsInNjYWxlUG9pbnQiLCJwb2ludCIsIm9yaWdpblBvaW50IiwiYXBwbHlQb2ludERlbHRhIiwidHJhbnNsYXRlIiwiYm94U2NhbGUiLCJhcHBseUF4aXNEZWx0YSIsImFwcGx5Qm94RGVsdGEiLCJ0cmFuc2xhdGVBeGlzIiwidHJhbnNmb3JtQXhpcyIsInRyYW5zZm9ybXMiLCJzY2FsZUtleSIsIm9yaWdpbktleSIsImF4aXNPcmlnaW4iLCJ4S2V5cyIsInlLZXlzIiwidHJhbnNmb3JtQm94IiwiaXNQb2ludCIsImlzUG9pbnQzRCIsImRpc3RhbmNlMUQiLCJ4RGVsdGEiLCJ5RGVsdGEiLCJ6RGVsdGEiLCJjYWxjTGVuZ3RoIiwiaXNOZWFyIiwibWF4RGlzdGFuY2UiLCJjYWxjQXhpc0RlbHRhIiwiY2FsY0JveERlbHRhIiwiY2FsY1JlbGF0aXZlQXhpcyIsInJlbGF0aXZlIiwiY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uIiwibGF5b3V0IiwiY2FsY1JlbGF0aXZlUG9zaXRpb24iLCJyZW1vdmVQb2ludERlbHRhIiwicmVtb3ZlQXhpc1RyYW5zZm9ybXMiLCJzb3VyY2VBeGlzIiwicmVtb3ZlQXhpc0RlbHRhIiwicmVtb3ZlQm94VHJhbnNmb3JtcyIsInNvdXJjZUJveCIsImlzQXhpc0RlbHRhWmVybyIsImlzRGVsdGFaZXJvIiwiYm94RXF1YWxzIiwiTm9kZVN0YWNrIiwibWVtYmVycyIsInNjaGVkdWxlUmVuZGVyIiwicHJldkxlYWQiLCJsZWFkIiwicHJvbW90ZSIsInJlbGVnYXRlIiwiaW5kZXhPZk5vZGUiLCJmaW5kSW5kZXgiLCJtZW1iZXIiLCJpc1ByZXNlbnQiLCJwcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJzaG93IiwicmVzdW1lRnJvbSIsInByZXNlcnZlT3BhY2l0eSIsImxhdGVzdFZhbHVlcyIsImFuaW1hdGlvblZhbHVlcyIsImlzU2hhcmVkIiwiaXNVcGRhdGluZyIsImlzTGF5b3V0RGlydHkiLCJjcm9zc2ZhZGUiLCJoaWRlIiwiZXhpdEFuaW1hdGlvbkNvbXBsZXRlIiwib25FeGl0Q29tcGxldGUiLCJyZXN1bWluZ0Zyb20iLCJyZW1vdmVMZWFkU25hcHNob3QiLCJzY2FsZUNvcnJlY3RvcnMiLCJidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0iLCJ0cmVlU2NhbGUiLCJsYXRlc3RUcmFuc2Zvcm0iLCJ4VHJhbnNsYXRlIiwieVRyYW5zbGF0ZSIsImVhY2hBeGlzIiwidHJhbnNmb3JtQXhlcyIsInRyYW5zZm9ybVByb3BzIiwic29ydFRyYW5zZm9ybVByb3BzIiwib3BlcmF0aW9uS2V5IiwiYXhlc0tleSIsInRyYW5zZm9ybVByb3BTZXQiLCJpc1RyYW5zZm9ybVByb3AiLCJ0cmFuc2Zvcm1PcmlnaW5Qcm9wcyIsImlzVHJhbnNmb3JtT3JpZ2luUHJvcCIsImNvbXBhcmVCeURlcHRoIiwiZGVwdGgiLCJGbGF0VHJlZSIsImlzRGlydHkiLCJyZXNvbHZlTW90aW9uVmFsdWUiLCJ1bndyYXBwZWRWYWx1ZSIsInRvVmFsdWUiLCJpc0N1c3RvbVZhbHVlIiwiZ2xvYmFsUHJvamVjdGlvblN0YXRlIiwiaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZSIsImhhc0V2ZXJVcGRhdGVkIiwiY3JlYXRlUHJvamVjdGlvbk5vZGUiLCJhdHRhY2hSZXNpemVMaXN0ZW5lciIsImRlZmF1bHRQYXJlbnQiLCJtZWFzdXJlU2Nyb2xsIiwicmVzZXRUcmFuc2Zvcm0iLCJQcm9qZWN0aW9uTm9kZSIsImlzVHJlZUFuaW1hdGluZyIsImlzQW5pbWF0aW9uQmxvY2tlZCIsInVwZGF0ZU1hbnVhbGx5QmxvY2tlZCIsInVwZGF0ZUJsb2NrZWRCeVJlc2l6ZSIsImlzU1ZHIiwibmVlZHNSZXNldCIsInNob3VsZFJlc2V0VHJhbnNmb3JtIiwiZXZlbnRIYW5kbGVycyIsInBvdGVudGlhbE5vZGVzIiwiY2hlY2tVcGRhdGVGYWlsZWQiLCJjbGVhckFsbFNuYXBzaG90cyIsInVwZGF0ZVByb2plY3Rpb24iLCJyZXNvbHZlVGFyZ2V0RGVsdGEiLCJjYWxjUHJvamVjdGlvbiIsImhhc1Byb2plY3RlZCIsImlzVmlzaWJsZSIsImFuaW1hdGlvblByb2dyZXNzIiwic2hhcmVkTm9kZXMiLCJyZWdpc3RlclBvdGVudGlhbE5vZGUiLCJub3RpZnlMaXN0ZW5lcnMiLCJzdWJzY3JpcHRpb25NYW5hZ2VyIiwiU1ZHRWxlbWVudCIsImxheW91dElkIiwiZ2V0SW5zdGFuY2UiLCJ1bmJsb2NrVGltZW91dF8xIiwicmVzaXplVW5ibG9ja1VwZGF0ZV8xIiwiZmluaXNoQW5pbWF0aW9uIiwicmVnaXN0ZXJTaGFyZWROb2RlIiwiX2YiLCJoYXNMYXlvdXRDaGFuZ2VkIiwiaGFzUmVsYXRpdmVUYXJnZXRDaGFuZ2VkIiwibmV3TGF5b3V0IiwiaXNUcmVlQW5pbWF0aW9uQmxvY2tlZCIsInJlbGF0aXZlVGFyZ2V0IiwibGF5b3V0VHJhbnNpdGlvbiIsImdldERlZmF1bHRUcmFuc2l0aW9uIiwiZGVmYXVsdExheW91dFRyYW5zaXRpb24iLCJvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlIiwidGFyZ2V0Q2hhbmdlZCIsInRhcmdldExheW91dCIsImhhc09ubHlSZWxhdGl2ZVRhcmdldENoYW5nZWQiLCJzZXRBbmltYXRpb25PcmlnaW4iLCJhbmltYXRpb25PcHRpb25zIiwiaXNMZWFkIiwid2lsbFVwZGF0ZSIsImdldFN0YWNrIiwicHJlUmVuZGVyIiwiYmxvY2tVcGRhdGUiLCJ1bmJsb2NrVXBkYXRlIiwiaXNVcGRhdGVCbG9ja2VkIiwic3RhcnRVcGRhdGUiLCJyZXNldFJvdGF0aW9uIiwidXBkYXRlU2Nyb2xsIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJwcmV2VHJhbnNmb3JtVGVtcGxhdGVWYWx1ZSIsInVwZGF0ZVNuYXBzaG90IiwiZGlkVXBkYXRlIiwiY2xlYXJNZWFzdXJlbWVudHMiLCJtb3VudE5vZGVFYXJseSIsInJlc2V0VHJhbnNmb3JtU3R5bGUiLCJ1cGRhdGVMYXlvdXQiLCJub3RpZnlMYXlvdXRVcGRhdGUiLCJjbGVhclNuYXBzaG90IiwicmVtb3ZlTGVhZFNuYXBzaG90cyIsInNjaGVkdWxlVXBkYXRlUHJvamVjdGlvbiIsInNjaGVkdWxlQ2hlY2tBZnRlclVubW91bnQiLCJtZWFzdXJlZCIsIm1lYXN1cmUiLCJyZW1vdmVUcmFuc2Zvcm0iLCJyZW1vdmVFbGVtZW50U2Nyb2xsIiwicm91bmRCb3giLCJhbHdheXNNZWFzdXJlTGF5b3V0IiwicHJldkxheW91dCIsImFjdHVhbCIsImxheW91dENvcnJlY3RlZCIsInByb2plY3Rpb25EZWx0YSIsIm5vdGlmeUxheW91dE1lYXN1cmUiLCJsYXlvdXRTY3JvbGwiLCJzY3JvbGwiLCJpc1Jlc2V0UmVxdWVzdGVkIiwiaGFzUHJvamVjdGlvbiIsInRyYW5zZm9ybVRlbXBsYXRlVmFsdWUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZUhhc0NoYW5nZWQiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJib3hXaXRob3V0U2Nyb2xsIiwic2Nyb2xsXzEiLCJhcHBseVRyYW5zZm9ybSIsInRyYW5zZm9ybU9ubHkiLCJ3aXRoVHJhbnNmb3JtcyIsImJveFdpdGhvdXRUcmFuc2Zvcm0iLCJzZXRUYXJnZXREZWx0YSIsInRhcmdldERlbHRhIiwicmVsYXRpdmVQYXJlbnQiLCJnZXRDbG9zZXN0UHJvamVjdGluZ1BhcmVudCIsInJlbGF0aXZlVGFyZ2V0T3JpZ2luIiwidGFyZ2V0V2l0aFRyYW5zZm9ybXMiLCJhdHRlbXB0VG9SZXNvbHZlUmVsYXRpdmVUYXJnZXQiLCJwZW5kaW5nQW5pbWF0aW9uIiwiZ2V0TGVhZCIsInRyZWVQYXRoIiwiaXNTaGFyZWRUcmFuc2l0aW9uIiwidHJlZUxlbmd0aCIsImFwcGx5VHJlZURlbHRhcyIsInByb2plY3Rpb25EZWx0YVdpdGhUcmFuc2Zvcm0iLCJwcmV2VHJlZVNjYWxlWCIsInByZXZUcmVlU2NhbGVZIiwicHJldlByb2plY3Rpb25UcmFuc2Zvcm0iLCJwcm9qZWN0aW9uVHJhbnNmb3JtIiwibm90aWZ5QWxsIiwic25hcHNob3RMYXRlc3RWYWx1ZXMiLCJtaXhlZFZhbHVlcyIsInJlbGF0aXZlTGF5b3V0IiwiaXNTaGFyZWRMYXlvdXRBbmltYXRpb24iLCJpc09ubHlNZW1iZXIiLCJzaG91bGRDcm9zc2ZhZGVPcGFjaXR5IiwiaGFzT3BhY2l0eUNyb3NzZmFkZSIsIm1peFRhcmdldERlbHRhIiwibWl4QXhpc0RlbHRhIiwibWl4QXhpcyIsImZvbGxvdyIsIm9wYWNpdHlFeGl0IiwiYm9yZGVyTGFiZWwiLCJmb2xsb3dSYWRpdXMiLCJsZWFkUmFkaXVzIiwibWl4VmFsdWVzIiwiY29tcGxldGVBbmltYXRpb24iLCJhcHBseVRyYW5zZm9ybXNUb1RhcmdldCIsImluaXRpYWxQcm9tb3Rpb25Db25maWciLCJzaG91bGRQcmVzZXJ2ZUZvbGxvd09wYWNpdHkiLCJnZXRQcmV2TGVhZCIsImhhc1JvdGF0ZSIsInJlc2V0VmFsdWVzIiwiZ2V0U3RhdGljVmFsdWUiLCJzZXRTdGF0aWNWYWx1ZSIsImdldFByb2plY3Rpb25TdHlsZXMiLCJzdHlsZVByb3AiLCJzdHlsZXMiLCJ2aXNpYmlsaXR5IiwicG9pbnRlckV2ZW50cyIsImVtcHR5U3R5bGVzIiwidmFsdWVzVG9SZW5kZXIiLCJfZyIsInRyYW5zZm9ybU9yaWdpbiIsIl9oIiwiY29ycmVjdCIsImFwcGx5VG8iLCJjb3JyZWN0ZWQiLCJudW0iLCJyZXNldFRyZWUiLCJsYXlvdXRfMSIsIm1lYXN1cmVkTGF5b3V0IiwiYW5pbWF0aW9uVHlwZSIsImF4aXNTbmFwc2hvdCIsImxheW91dERlbHRhIiwidmlzdWFsRGVsdGEiLCJwYXJlbnRTbmFwc2hvdCIsInBhcmVudExheW91dCIsInJlbGF0aXZlU25hcHNob3QiLCJvbkJlZm9yZUxheW91dE1lYXN1cmUiLCJub3RpZnlCZWZvcmVMYXlvdXRNZWFzdXJlIiwic2VhcmNoTm9kZSIsInJvdW5kQXhpcyIsIkxheW91dEdyb3VwQ29udGV4dCIsIlN3aXRjaExheW91dEdyb3VwQ29udGV4dCIsIlZpc3VhbEVsZW1lbnRIYW5kbGVyIiwiX3N1cGVyIiwidXBkYXRlUHJvcHMiLCJzZXRQcm9wcyIsInByZWxvYWRlZEZlYXR1cmVzIiwicHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciIsInVzZVJlbmRlciIsInVzZVZpc3VhbFN0YXRlIiwiZmVhdHVyZXMiLCJsb2FkRmVhdHVyZXMiLCJleHRlcm5hbFJlZiIsImxheW91dEdyb3VwSWQiLCJ1c2VMYXlvdXRJZCIsImluaGVyaXQiLCJnZXRDdXJyZW50VHJlZVZhcmlhbnRzIiwidXNlQ3JlYXRlTW90aW9uQ29udGV4dCIsInByb2plY3Rpb25JZCIsIlByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IiLCJkcmFnQ29uc3RyYWludHMiLCJwcm9qZWN0aW9uIiwiZ2V0TGF0ZXN0VmFsdWVzIiwidXNlUHJvamVjdGlvbiIsIm5hbWVfMSIsInVzZUZlYXR1cmVzIiwidXNlTW90aW9uUmVmIiwiY3JlYXRlTW90aW9uUHJveHkiLCJjcmVhdGVDb25maWciLCJjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWciLCJjb21wb25lbnRDYWNoZSIsIl90YXJnZXQiLCJsb3dlcmNhc2VTVkdFbGVtZW50cyIsImlzU1ZHQ29tcG9uZW50IiwiaXNGb3JjZWRNb3Rpb25WYWx1ZSIsInRyYW5zbGF0ZUFsaWFzIiwiaXNDU1NWYXJpYWJsZSIsImdldFZhbHVlQXNUeXBlIiwiYnVpbGRIVE1MU3R5bGVzIiwidmFycyIsInRyYW5zZm9ybUtleXMiLCJoYXNUcmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1Jc05vbmUiLCJ2YWx1ZVR5cGUiLCJ2YWx1ZUFzVHlwZSIsInRyYW5zZm9ybUlzRGVmYXVsdCIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwiYWxsb3dUcmFuc2Zvcm1Ob25lIiwidHJhbnNmb3JtU3RyaW5nIiwidHJhbnNmb3JtSGFzWiIsIm51bVRyYW5zZm9ybUtleXMiLCJidWlsZFRyYW5zZm9ybSIsImJ1aWxkVHJhbnNmb3JtT3JpZ2luIiwiY29weVJhd1ZhbHVlc09ubHkiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidHJhbnNmb3JtVmFsdWVzIiwidXNlU3R5bGUiLCJkcmFnTGlzdGVuZXIiLCJkcmFnZ2FibGUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIldlYmtpdFRvdWNoQ2FsbG91dCIsInRvdWNoQWN0aW9uIiwidmFsaWRNb3Rpb25Qcm9wcyIsImlzVmFsaWRNb3Rpb25Qcm9wIiwiaXNWYWxpZFByb3AiLCJzaG91bGRGb3J3YXJkIiwicmVxdWlyZSIsImNhbGNPcmlnaW4iLCJkYXNoS2V5cyIsImNhbWVsS2V5cyIsImJ1aWxkU1ZHQXR0cnMiLCJhdHRyWCIsImF0dHJZIiwicGF0aExlbmd0aCIsInBhdGhTcGFjaW5nIiwicGF0aE9mZnNldCIsImRpbWVuc2lvbnMiLCJweE9yaWdpblgiLCJweE9yaWdpblkiLCJjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIiwic3BhY2luZyIsInVzZURhc2hDYXNlIiwiYnVpbGRTVkdQYXRoIiwiY3JlYXRlU3ZnUmVuZGVyU3RhdGUiLCJ1c2VTVkdQcm9wcyIsInZpc3VhbFByb3BzIiwicmF3U3R5bGVzIiwiY3JlYXRlVXNlUmVuZGVyIiwiZm9yd2FyZE1vdGlvblByb3BzIiwiZmlsdGVyZWRQcm9wcyIsImlzRG9tIiwiZmlsdGVyUHJvcHMiLCJlbGVtZW50UHJvcHMiLCJDQU1FTF9DQVNFX1BBVFRFUk4iLCJjYW1lbFRvRGFzaCIsInJlbmRlckhUTUwiLCJjYW1lbENhc2VBdHRyaWJ1dGVzIiwicmVuZGVyU1ZHIiwicmVuZGVyU3RhdGUiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJuZXdWYWx1ZXMiLCJpc0FuaW1hdGlvbkNvbnRyb2xzIiwibWFrZVN0YXRlIiwiY3JlYXRlUmVuZGVyU3RhdGUiLCJvbk1vdW50IiwibWFrZUxhdGVzdFZhbHVlcyIsIm1ha2VVc2VWaXN1YWxTdGF0ZSIsInNjcmFwZU1vdGlvblZhbHVlcyIsIm1vdGlvblZhbHVlcyIsImlzQ29udHJvbGxpbmdWYXJpYW50cyIsImlzVmFyaWFudE5vZGUiLCJpbml0aWFsQW5pbWF0aW9uSXNCbG9ja2VkIiwidmFyaWFudFRvU2V0IiwicmVzb2x2ZWQiLCJ0cmFuc2l0aW9uRW5kIiwidmFsdWVUYXJnZXQiLCJBbmltYXRpb25UeXBlIiwic3ZnTW90aW9uQ29uZmlnIiwiZ2V0QkJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImh0bWxNb3Rpb25Db25maWciLCJpc01vdXNlRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJNb3VzZUV2ZW50IiwiaXNUb3VjaEV2ZW50IiwiZGVmYXVsdFBhZ2VQb2ludCIsInBvaW50RnJvbVRvdWNoIiwicG9pbnRUeXBlIiwicG9pbnRGcm9tTW91c2UiLCJleHRyYWN0RXZlbnRJbmZvIiwid3JhcEhhbmRsZXIiLCJzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlciIsImV2ZW50SGFuZGxlciIsIm1vdXNlRXZlbnROYW1lcyIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcm92ZXIiLCJwb2ludGVyb3V0IiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwidG91Y2hFdmVudE5hbWVzIiwiZ2V0UG9pbnRlckV2ZW50TmFtZSIsIm9ucG9pbnRlcmRvd24iLCJvbnRvdWNoc3RhcnQiLCJvbm1vdXNlZG93biIsImFkZFBvaW50ZXJFdmVudCIsInVzZVBvaW50ZXJFdmVudCIsImNyZWF0ZUxvY2siLCJsb2NrIiwiZ2xvYmFsSG9yaXpvbnRhbExvY2siLCJnbG9iYWxWZXJ0aWNhbExvY2siLCJnZXRHbG9iYWxMb2NrIiwib3Blbkhvcml6b250YWxfMSIsIm9wZW5WZXJ0aWNhbF8xIiwiaXNEcmFnQWN0aXZlIiwib3Blbkdlc3R1cmVMb2NrIiwiY3JlYXRlSG92ZXJFdmVudCIsInNldEFjdGl2ZSIsIkhvdmVyIiwiaXNOb2RlT3JDaGlsZCIsInBhcmVudEVsZW1lbnQiLCJ1c2VVbm1vdW50RWZmZWN0Iiwib2JzZXJ2ZXJDYWxsYmFja3MiLCJmaXJlT2JzZXJ2ZXJDYWxsYmFjayIsImZpcmVBbGxPYnNlcnZlckNhbGxiYWNrcyIsInRocmVzaG9sZE5hbWVzIiwidXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJzaG91bGRPYnNlcnZlIiwicm9vdE1hcmdpbiIsImFtb3VudCIsIm9uY2UiLCJ0aHJlc2hvbGQiLCJyb290SW50ZXJlc2VjdGlvbk9ic2VydmVyIiwibG9va3VwUm9vdCIsInJvb3RPYnNlcnZlcnMiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImluaXRJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlSW50ZXJzZWN0aW9uIiwiaXNJbnRlcnNlY3RpbmciLCJpc0luVmlldyIsImhhc0VudGVyZWRWaWV3IiwiSW5WaWV3Iiwib25WaWV3cG9ydEVudGVyIiwib25WaWV3cG9ydExlYXZlIiwidXNlTWlzc2luZ0ludGVyc2VjdGlvbk9ic2VydmVyIiwibWFrZVJlbmRlcmxlc3NDb21wb25lbnQiLCJob29rIiwiZ2VzdHVyZUFuaW1hdGlvbnMiLCJ3aGlsZUluVmlldyIsInZpZXdwb3J0Iiwib25UYXAiLCJvblRhcFN0YXJ0Iiwib25UYXBDYW5jZWwiLCJoYXNQcmVzc0xpc3RlbmVycyIsImlzUHJlc3NpbmciLCJjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzIiwicmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyIiwiY2hlY2tQb2ludGVyRW5kIiwiVGFwIiwib25Qb2ludGVyVXAiLCJvblBvaW50ZXJDYW5jZWwiLCJGb2N1cyIsIm9uSG92ZXJTdGFydCIsIm9uSG92ZXJFbmQiLCJjb3VudGVyIiwiaW5jcmVtZW50SWQiLCJ1c2VJZCIsInVzZVByZXNlbmNlIiwicmVnaXN0ZXIiLCJzaGFsbG93Q29tcGFyZSIsInByZXZMZW5ndGgiLCJpc051bWVyaWNhbFN0cmluZyIsImlzWmVyb1ZhbHVlU3RyaW5nIiwidGVzdFZhbHVlVHlwZSIsImRpbWVuc2lvblZhbHVlVHlwZXMiLCJmaW5kRGltZW5zaW9uVmFsdWVUeXBlIiwidmFsdWVUeXBlcyIsImZpbmRWYWx1ZVR5cGUiLCJzZXRNb3Rpb25WYWx1ZSIsImhhc1ZhbHVlIiwiYWRkVmFsdWUiLCJnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbiIsImFuaW1hdGVWYXJpYW50IiwidmFyaWFudCIsInRyYW5zaXRpb25PdmVycmlkZSIsImFuaW1hdGVUYXJnZXQiLCJnZXRDaGlsZEFuaW1hdGlvbnMiLCJ2YXJpYW50Q2hpbGRyZW4iLCJmb3J3YXJkRGVsYXkiLCJhbmltYXRpb25zIiwibWF4U3RhZ2dlckR1cmF0aW9uIiwiZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24iLCJzb3J0QnlUcmVlT3JkZXIiLCJub3RpZnlBbmltYXRpb25Db21wbGV0ZSIsImFuaW1hdGVDaGlsZHJlbiIsImZpcnN0IiwibWFrZVRhcmdldEFuaW1hdGFibGUiLCJhbmltYXRpb25UeXBlU3RhdGUiLCJzaG91bGRCbG9ja0FuaW1hdGlvbiIsInNldFRhcmdldCIsInNvcnROb2RlUG9zaXRpb24iLCJwcm90ZWN0ZWRLZXlzIiwibmVlZHNBbmltYXRpbmciLCJzaG91bGRCbG9jayIsInZhcmlhbnRQcmlvcml0eU9yZGVyIiwiQW5pbWF0ZSIsIkRyYWciLCJFeGl0IiwicmV2ZXJzZVByaW9yaXR5T3JkZXIiLCJudW1BbmltYXRpb25UeXBlcyIsImNyZWF0ZUFuaW1hdGlvblN0YXRlIiwibm90aWZ5QW5pbWF0aW9uU3RhcnQiLCJyZXNvbHZlZERlZmluaXRpb24iLCJhbmltYXRlVmlzdWFsRWxlbWVudCIsImFuaW1hdGVMaXN0IiwiY3JlYXRlVHlwZVN0YXRlIiwiYWxsQW5pbWF0ZWRLZXlzIiwiaXNJbml0aWFsUmVuZGVyIiwiYnVpbGRSZXNvbHZlZFR5cGVWYWx1ZXMiLCJjaGFuZ2VkQWN0aXZlVHlwZSIsImdldFZhcmlhbnRDb250ZXh0IiwicmVtb3ZlZEtleXMiLCJlbmNvdW50ZXJlZEtleXMiLCJyZW1vdmVkVmFyaWFudEluZGV4IiwiX2xvb3BfMSIsInR5cGVTdGF0ZSIsInByb3BJc1ZhcmlhbnQiLCJhY3RpdmVEZWx0YSIsImlzSW5oZXJpdGVkIiwibWFudWFsbHlBbmltYXRlT25Nb3VudCIsInByZXZQcm9wIiwidmFyaWFudERpZENoYW5nZSIsImNoZWNrVmFyaWFudHNEaWRDaGFuZ2UiLCJzaG91bGRBbmltYXRlVHlwZSIsImRlZmluaXRpb25MaXN0IiwicmVzb2x2ZWRWYWx1ZXMiLCJwcmV2UmVzb2x2ZWRWYWx1ZXMiLCJhbGxLZXlzIiwibWFya1RvQW5pbWF0ZSIsImZhbGxiYWNrQW5pbWF0aW9uXzEiLCJmYWxsYmFja1RhcmdldCIsImdldEJhc2VUYXJnZXQiLCJzaG91bGRBbmltYXRlIiwiaXNBbmltYXRlZCIsInNldEFuaW1hdGVGdW5jdGlvbiIsIm1ha2VBbmltYXRvciIsInNhZmVUb1JlbW92ZSIsIlBhblNlc3Npb24iLCJzdGFydEV2ZW50IiwibGFzdE1vdmVFdmVudCIsImxhc3RNb3ZlRXZlbnRJbmZvIiwidXBkYXRlUG9pbnQiLCJnZXRQYW5JbmZvIiwiaXNQYW5TdGFydGVkIiwiaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQiLCJvblN0YXJ0Iiwib25Nb3ZlIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJ0cmFuc2Zvcm1Qb2ludCIsImhhbmRsZVBvaW50ZXJVcCIsIm9uRW5kIiwib25TZXNzaW9uRW5kIiwicGFuSW5mbyIsImluaXRpYWxJbmZvIiwib25TZXNzaW9uU3RhcnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJ1cGRhdGVIYW5kbGVycyIsInN1YnRyYWN0UG9pbnQiLCJsYXN0RGV2aWNlUG9pbnQiLCJzdGFydERldmljZVBvaW50IiwidGltZXN0YW1wZWRQb2ludCIsImxhc3RQb2ludCIsImNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyIsImNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyIsImxheW91dEF4aXMiLCJjb25zdHJhaW50c0F4aXMiLCJkZWZhdWx0RWxhc3RpYyIsInJlc29sdmVBeGlzRWxhc3RpYyIsImRyYWdFbGFzdGljIiwibWluTGFiZWwiLCJtYXhMYWJlbCIsInJlc29sdmVQb2ludEVsYXN0aWMiLCJsYWJlbCIsImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwidG9wTGVmdCIsImJvdHRvbVJpZ2h0IiwidHJhbnNmb3JtQm94UG9pbnRzIiwiZWxlbWVudERyYWdDb250cm9scyIsIlZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMiLCJvcGVuR2xvYmFsTG9jayIsImlzRHJhZ2dpbmciLCJjdXJyZW50RGlyZWN0aW9uIiwiY29uc3RyYWludHMiLCJoYXNNdXRhdGVkQ29uc3RyYWludHMiLCJlbGFzdGljIiwib3JpZ2luRXZlbnQiLCJzbmFwVG9DdXJzb3IiLCJwYW5TZXNzaW9uIiwiZHJhZ1Byb3BhZ2F0aW9uIiwib25EcmFnU3RhcnQiLCJyZXNvbHZlQ29uc3RyYWludHMiLCJnZXRBeGlzTW90aW9uVmFsdWUiLCJtZWFzdXJlZEF4aXMiLCJkcmFnRGlyZWN0aW9uTG9jayIsIm9uRGlyZWN0aW9uTG9jayIsIm9uRHJhZyIsImxvY2tUaHJlc2hvbGQiLCJnZXRDdXJyZW50RGlyZWN0aW9uIiwidXBkYXRlQXhpcyIsImdldFRyYW5zZm9ybVBhZ2VQb2ludCIsIm9uRHJhZ0VuZCIsIl9wb2ludCIsInNob3VsZERyYWciLCJheGlzVmFsdWUiLCJwcmV2Q29uc3RyYWludHMiLCJyZXNvbHZlUmVmQ29uc3RyYWludHMiLCJsYXlvdXRCb3giLCJjYWxjUmVsYXRpdmVDb25zdHJhaW50cyIsInJlc29sdmVEcmFnRWxhc3RpYyIsInJlbGF0aXZlQ29uc3RyYWludHMiLCJyZWJhc2VBeGlzQ29uc3RyYWludHMiLCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJjb25zdHJhaW50c0VsZW1lbnQiLCJjb25zdHJhaW50c0JveCIsInJvb3RQcm9qZWN0aW9uTm9kZSIsInZpZXdwb3J0Qm94IiwibWVhc3VyZVBhZ2VCb3giLCJtZWFzdXJlZENvbnN0cmFpbnRzIiwiY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMiLCJ1c2VyQ29uc3RyYWludHMiLCJjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCIsImRyYWdNb21lbnR1bSIsImRyYWdUcmFuc2l0aW9uIiwiZHJhZ1NuYXBUb09yaWdpbiIsIm9uRHJhZ1RyYW5zaXRpb25FbmQiLCJtb21lbnR1bUFuaW1hdGlvbnMiLCJzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiIsImRyYWdLZXkiLCJzY2FsZVBvc2l0aW9uV2l0aGluQ29uc3RyYWludHMiLCJib3hQcm9ncmVzcyIsInNvdXJjZUxlbmd0aCIsInRhcmdldExlbmd0aCIsImFkZExpc3RlbmVycyIsInN0b3BQb2ludGVyTGlzdGVuZXIiLCJtZWFzdXJlRHJhZ0NvbnN0cmFpbnRzIiwic3RvcE1lYXN1cmVMYXlvdXRMaXN0ZW5lciIsInN0b3BSZXNpemVMaXN0ZW5lciIsIm9uUGFuIiwib25QYW5TdGFydCIsIm9uUGFuRW5kIiwib25QYW5TZXNzaW9uU3RhcnQiLCJoYXNQYW5FdmVudHMiLCJncm91cERyYWdDb250cm9scyIsImRyYWdDb250cm9scyIsInRyZWVUeXBlIiwicmVuZGVySW5zdGFuY2UiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsImxpZmVjeWNsZXMiLCJtYW5hZ2VycyIsInByb3BTdWJzY3JpcHRpb25zIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJtYW5hZ2VyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsIm9uIiwicHJvcExpc3RlbmVyIiwiY3JlYXRlTGlmZWN5Y2xlcyIsInZhbHVlU3Vic2NyaXB0aW9ucyIsInByZXZNb3Rpb25WYWx1ZXMiLCJiYXNlVGFyZ2V0IiwidHJpZ2dlckJ1aWxkIiwibm90aWZ5VXBkYXRlIiwiYmluZFRvTW90aW9uVmFsdWUiLCJyZW1vdmVPbkNoYW5nZSIsImxhdGVzdFZhbHVlIiwicmVtb3ZlT25SZW5kZXJSZXF1ZXN0IiwiaW5pdGlhbE1vdGlvblZhbHVlcyIsIm5ld0luc3RhbmNlIiwiYWRkVmFyaWFudENoaWxkIiwiY2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0Q2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0TGF5b3V0SWQiLCJzZXRWaXNpYmlsaXR5IiwiY2FuTXV0YXRlIiwicmVtb3ZlVmFsdWUiLCJyZWFkVmFsdWUiLCJzZXRCYXNlVGFyZ2V0IiwibmV3UHJvcHMiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJleGlzdGluZ1ZhbHVlIiwidXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwiZ2V0VmFyaWFudCIsInN0YXJ0QXRQYXJlbnQiLCJjb250ZXh0XzEiLCJudW1WYXJpYW50UHJvcHMiLCJ2YXJpYW50UHJvcHMiLCJjc3NWYXJpYWJsZVJlZ2V4IiwiZ2V0VmFyaWFibGVWYWx1ZSIsImV4ZWMiLCJwYXJzZUNTU1ZhcmlhYmxlIiwidG9rZW4iLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkJvdW5kaW5nQm94RGltZW5zaW9uIiwicG9zaXRpb25hbEtleXMiLCJpc1Bvc2l0aW9uYWxLZXkiLCJzZXRBbmRSZXNldFZlbG9jaXR5IiwiaXNOdW1PclB4VHlwZSIsImdldFBvc0Zyb21NYXRyaXgiLCJtYXRyaXgiLCJwb3MiLCJnZXRUcmFuc2xhdGVGcm9tTWF0cml4IiwicG9zMiIsInBvczMiLCJfYmJveCIsIm1hdHJpeDNkIiwibm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybUtleXMiLCJwb3NpdGlvbmFsVmFsdWVzIiwidW5pdENvbnZlcnNpb24iLCJoYXNQb3NpdGlvbmFsS2V5IiwidGFyZ2V0UG9zaXRpb25hbEtleXMiLCJyZW1vdmVkVHJhbnNmb3JtVmFsdWVzIiwiaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMiLCJjaGFuZ2VkVmFsdWVUeXBlS2V5cyIsInRvVHlwZSIsImZyb21UeXBlIiwibnVtS2V5ZnJhbWVzIiwiZnJvbUluZGV4IiwicmVtb3ZlZFRyYW5zZm9ybXMiLCJyZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtIiwiY29udmVydGVkVGFyZ2V0IiwiY2hhbmdlZEtleXMiLCJvcmlnaW5CYm94IiwiZWxlbWVudENvbXB1dGVkU3R5bGUiLCJ0YXJnZXRCYm94IiwiY29udmVydENoYW5nZWRWYWx1ZVR5cGVzIiwiY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMiLCJodG1sQ29uZmlnIiwiZG9tRWxlbWVudCIsImRlZmF1bHRUeXBlIiwiY29tcHV0ZWRTdHlsZSIsInJlc3RvcmVUcmFuc2Zvcm0iLCJtdXRhYmxlU3RhdGUiLCJnZXRPcmlnaW4iLCJuZXdWYWx1ZUtleXMiLCJudW1OZXdWYWx1ZXMiLCJ0YXJnZXRWYWx1ZSIsImNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIiwicmVzb2x2ZUNTU1ZhcmlhYmxlcyIsInBhcnNlRG9tVmFyaWFudCIsImh0bWxWaXN1YWxFbGVtZW50Iiwic3ZnVmlzdWFsRWxlbWVudCIsIl9lbGVtZW50IiwicGl4ZWxzVG9QZXJjZW50IiwicGl4ZWxzIiwiY29ycmVjdEJvcmRlclJhZGl1cyIsInZhclRva2VuIiwiY29ycmVjdEJveFNoYWRvdyIsIm9yaWdpbmFsIiwiY29udGFpbnNDU1NWYXJpYWJsZXMiLCJjc3NWYXJpYWJsZXMiLCJzaGFkb3ciLCJ4U2NhbGUiLCJ5U2NhbGUiLCJhdmVyYWdlU2NhbGUiLCJpXzEiLCJjc3NWYXJpYWJsZSIsIk1lYXN1cmVMYXlvdXRXaXRoQ29udGV4dCIsImNvcnJlY3RvcnMiLCJsYXlvdXRHcm91cCIsInN3aXRjaExheW91dEdyb3VwIiwiZGVmYXVsdFNjYWxlQ29ycmVjdG9ycyIsImdyb3VwIiwicHJldlByb3BzIiwibGF5b3V0RGVwZW5kZW5jeSIsInByb21vdGVDb250ZXh0IiwiZGVyZWdpc3RlciIsImJveFNoYWRvdyIsImxheW91dEZlYXR1cmVzIiwiRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSIsImRvY3VtZW50Tm9kZSIsImZlYXR1cmVCdW5kbGUiLCJtb3Rpb24iLCJiYXNlQ29uZmlnIiwiV3JhcHBlciIsInN0eWxlZCIsIkNpcmNsZSIsImRpdiIsImxpZ2h0TWFpbkNvbG9yIiwic3ZnIiwibG9nb1ZhcmllbnRzIiwieG1sbnMiLCJ2aWV3Qm94IiwiZm9udFNpemUiLCJ1c2VMb2NhdGlvbiIsInJhbmRvbU51bWJlclN0YXRlIiwibWFpbk1vdmllU3RhdGUiLCJtYWluVHZTdGF0ZSIsInRoZW1lU3RhdGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiU3ZnIiwidGV4dENvbG9yIiwic2VhcmNoVmFyaWVudHMiLCJpc0RhcmsiLCJzZWFyY2hPcGVuIiwiU2VhcmNoSW5wdXQiLCJiZ0NvbG9yIiwiaW5pdGlhbElucHV0VmFsdWUiLCJ1c2VOYXZpZ2F0ZSIsInVzZUlucHV0Iiwib25DaGFuZ2VUZXh0Iiwic2V0VGV4dCIsInNldFNlYXJjaE9wZW4iLCJzZWFyY2hSZWYiLCJ0b2dnbGVTZWFyY2hJbnB1dCIsIm9uU3VibXV0IiwiYWxlcnQiLCJvblN1Ym1pdCIsInBsYWNlaG9sZGVyIiwibmF2IiwibmF2VmFyaWFudHMiLCJzZXRZIiwic2V0VGhlbWUiLCJpc1RvcCIsInNldElzVG9wIiwibW92ZVNjcm9sbFRvcCIsInNjcm9sbFRvIiwiaXNTcmNvbGxUb3AiLCJ0b2dnbGVUaGVtZSIsInNldEl0ZW0iLCJjdXJyZW50UG9zaXRpb25ZIiwic2V0Q3VycmVudFBvc2l0aW9uWSIsInNjcm9sbEV2ZW50Iiwic2Nyb2xsSGVpZ2h0IiwiSVRFTV9LSU5EUyIsIk1PVklFX0tJTkRTIiwiVFZfS0lORCIsIml0ZW1Gb3JtYXQiLCJmb3JtYXQiLCJpbWFnZSIsIlRpdGxlIiwiT3ZlcnZpZXciLCJiYWNrZHJvcF9wYXRoIiwidGl0bGUiLCJvdmVydmlldyIsIkFQSV9LRVkiLCJCQVNFX1VSTCIsIm1vdmllc0ZldGNoZXIiLCJraW5kcyIsImxhbmd1YWdlIiwicmVzIiwianNvbiIsIm1vdmllRmV0Y2hlciIsIm1vdmllSWQiLCJ0dnNGZXRjaGVyIiwic2VjdGlvbiIsIk92ZXJsYXkiLCJNb3ZpZUltYWdlIiwiZmlndXJlIiwiTW92aWVUaXRsZSIsIkxheW91dEZsZXgiLCJNb3ZpZURlc2NyaXB0aW9uIiwiTW92aWVTdWJEZXNjcmlwdGlvbiIsIml0ZW1JZCIsIm92ZXJmbG93IiwiTU9WSUUiLCJUViIsInR2SWQiLCJzdWJEZXNjcmlwdGlvbiIsIm1vdmllIiwiZ2VucmVzIiwiZ2VucmUiLCJydW50aW1lIiwicmVsZWFzZV9kYXRlIiwidm90ZV9hdmVyYWdlIiwidHYiLCJlcGlzb2RlX3J1bl90aW1lIiwiZmlyc3RfYWlyX2RhdGUiLCJjbG9zZU1vZGFsIiwicG9zdGVyX3BhdGgiLCJ1c2VJc01vdW50ZWQiLCJQcmVzZW5jZUNoaWxkIiwicHJlc2VuY2VBZmZlY3RzTGF5b3V0IiwicHJlc2VuY2VDaGlsZHJlbiIsIm5ld0NoaWxkcmVuTWFwIiwiY2hpbGRJZCIsImVfMSIsIl9fdmFsdWVzIiwiZV8xXzEiLCJnZXRDaGlsZEtleSIsIkFuaW1hdGVQcmVzZW5jZSIsImV4aXRCZWZvcmVFbnRlciIsImZvcmNlZFJlbmRlckNvdW50Iiwic2V0Rm9yY2VkUmVuZGVyQ291bnQiLCJmb3JjZVJlbmRlciIsInVzZUZvcmNlVXBkYXRlIiwiZm9yY2VSZW5kZXJMYXlvdXRHcm91cCIsImZpbHRlcmVkQ2hpbGRyZW4iLCJmaWx0ZXJlZCIsIm9ubHlFbGVtZW50cyIsImNoaWxkcmVuVG9SZW5kZXIiLCJleGl0aW5nIiwicHJlc2VudENoaWxkcmVuIiwiYWxsQ2hpbGRyZW4iLCJ1cGRhdGVDaGlsZExvb2t1cCIsInByZXNlbnRLZXlzIiwidGFyZ2V0S2V5cyIsIm51bVByZXNlbnQiLCJpbnNlcnRpb25JbmRleCIsInJlbW92ZUluZGV4IiwicHJlc2VudENoaWxkIiwiQ2Fyb3VzZWxUaXRsZSIsIlJvdyIsIkJveCIsIkltYWdlIiwiSW5mbyIsIk5leHRCdXR0b24iLCJQcmV2QnV0dG9uIiwiY2Fyb3VzZWxWYXJpYW50cyIsImlzUmlnaHQiLCJib3hWYXJpYW50cyIsImluZm9WYXJpYW50cyIsIml0ZW1zIiwic2V0SW5kZXgiLCJkb2luZyIsInNldERvaW5nIiwic2V0SXNSaWdodCIsImluY3JlYXNlSW5kZXgiLCJkZWNyZWFzZUluZGV4Iiwic2hvd01vZGVsIiwibWVkaWFfdHlwZSIsInJhbmRvbU51bWJlciIsInNldE1haW5UdiIsIlBPUFVMQVIiLCJwb3B1bGFyVHZzIiwicG9wdWxhclR2c0xvYWRpbmciLCJUT1BfUkFURUQiLCJ0b3BSYXRlZFR2cyIsInRvcFJhdGVkVHZzTG9hZGluZyIsIk9OX1RIRV9BSVIiLCJvblRoZUFpclR2cyIsIm9uVGhlQWlyVHZzTG9hZGluZyIsIkFJUklOR19UT0RBWSIsImFpcmluZ1RvZGF5VHZzIiwiYWlyaW5nVG9kYXlUdnNMb2FkaW5nIiwic2V0TWFpbk1vdmllIiwicG9wdWxhck1vdmllcyIsInBvcHVsYXJNb3ZpZXNMb2FkaW5nIiwiTk9XX1BMQVlJTkciLCJub3dQbGF5aW5nTW92aWVzIiwibm93UGxheWluZ01vdmllc0xvYWRpbmciLCJVUENPTUlORyIsInVwY29taW5nTW92aWVzIiwidXBjb21pbmdNb3ZpZXNMb2FkaW5nIiwidG9wUmF0ZWRNb3ZpZXMiLCJ0b3BSYXRlZE1vdmllc0xvYWRpbmciLCJjbG9jayIsIl9jbGFzcyIsIkFUVFJJQlVURV9OQU1FUyIsIlRBR19OQU1FUyIsIkJBU0UiLCJCT0RZIiwiSEVBRCIsIkhUTUwiLCJMSU5LIiwiTUVUQSIsIk5PU0NSSVBUIiwiU0NSSVBUIiwiU1RZTEUiLCJUSVRMRSIsIlRBR19QUk9QRVJUSUVTIiwiUkVBQ1RfVEFHX01BUCIsImFjY2Vzc2tleSIsImNoYXJzZXQiLCJjbGFzcyIsImNvbnRlbnRlZGl0YWJsZSIsImNvbnRleHRtZW51IiwiaXRlbXByb3AiLCJ0YWJpbmRleCIsIkhUTUxfVEFHX01BUCIsIlNFTEZfQ0xPU0lOR19UQUdTIiwiSEVMTUVUX0FUVFJJQlVURSIsImNsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyIsImVuY29kZSIsImdldFRpdGxlRnJvbVByb3BzTGlzdCIsInByb3BzTGlzdCIsImlubmVybW9zdFRpdGxlIiwiZ2V0SW5uZXJtb3N0UHJvcGVydHkiLCJpbm5lcm1vc3RUZW1wbGF0ZSIsImlubmVybW9zdERlZmF1bHRUaXRsZSIsImdldE9uQ2hhbmdlQ2xpZW50U3RhdGUiLCJnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdCIsInRhZ1R5cGUiLCJ0YWdBdHRycyIsImdldEJhc2VUYWdGcm9tUHJvcHNMaXN0IiwicHJpbWFyeUF0dHJpYnV0ZXMiLCJpbm5lcm1vc3RCYXNlVGFnIiwibG93ZXJDYXNlQXR0cmlidXRlS2V5IiwiZ2V0VGFnc0Zyb21Qcm9wc0xpc3QiLCJhcHByb3ZlZFNlZW5UYWdzIiwiYXBwcm92ZWRUYWdzIiwiaW5zdGFuY2VUYWdzIiwiaW5zdGFuY2VTZWVuVGFncyIsInByaW1hcnlBdHRyaWJ1dGVLZXkiLCJhdHRyaWJ1dGVLZXkiLCJ0YWdVbmlvbiIsInByb3BlcnR5IiwicmFmUG9seWZpbGwiLCJjdXJyZW50VGltZSIsImNhZlBvbHlmaWxsIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zZyIsIl9oZWxtZXRDYWxsYmFjayIsImNvbW1pdFRhZ0NoYW5nZXMiLCJiYXNlVGFnIiwiYm9keUF0dHJpYnV0ZXMiLCJodG1sQXR0cmlidXRlcyIsImxpbmtUYWdzIiwibWV0YVRhZ3MiLCJub3NjcmlwdFRhZ3MiLCJvbkNoYW5nZUNsaWVudFN0YXRlIiwic2NyaXB0VGFncyIsInN0eWxlVGFncyIsInRpdGxlQXR0cmlidXRlcyIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJ1cGRhdGVUaXRsZSIsInRhZ1VwZGF0ZXMiLCJ1cGRhdGVUYWdzIiwiYWRkZWRUYWdzIiwicmVtb3ZlZFRhZ3MiLCJfdGFnVXBkYXRlcyR0YWdUeXBlIiwibmV3VGFncyIsIm9sZFRhZ3MiLCJmbGF0dGVuQXJyYXkiLCJwb3NzaWJsZUFycmF5IiwiZWxlbWVudFRhZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaGVsbWV0QXR0cmlidXRlU3RyaW5nIiwiaGVsbWV0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXNUb1JlbW92ZSIsImF0dHJpYnV0ZUtleXMiLCJhdHRyaWJ1dGUiLCJpbmRleFRvU2F2ZSIsInRhZ3MiLCJoZWFkRWxlbWVudCIsInRhZ05vZGVzIiwiaW5kZXhUb0RlbGV0ZSIsIm5ld0VsZW1lbnQiLCJleGlzdGluZ1RhZyIsImlzRXF1YWxOb2RlIiwiZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nIiwiYXR0ciIsImNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyIsImluaXRQcm9wcyIsImdldE1ldGhvZHNGb3JUYWciLCJ0b0NvbXBvbmVudCIsIl9pbml0UHJvcHMiLCJhdHRyaWJ1dGVTdHJpbmciLCJmbGF0dGVuZWRUaXRsZSIsImdlbmVyYXRlVGl0bGVBc1N0cmluZyIsIl9tYXBwZWRUYWciLCJtYXBwZWRUYWciLCJtYXBwZWRBdHRyaWJ1dGUiLCJnZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50IiwiYXR0cmlidXRlSHRtbCIsInRhZ0NvbnRlbnQiLCJpc1NlbGZDbG9zaW5nIiwiZ2VuZXJhdGVUYWdzQXNTdHJpbmciLCJfcmVmJHRpdGxlIiwibm9zY3JpcHQiLCJzY3JpcHQiLCJIZWxtZXRTaWRlRWZmZWN0cyIsImRlZmVyIiwiSGVsbWV0RXhwb3J0IiwiX1JlYWN0JENvbXBvbmVudCIsIkhlbG1ldFdyYXBwZXIiLCJpbmhlcml0cyIsIm5leHRQcm9wcyIsIm1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyIsIm5lc3RlZENoaWxkcmVuIiwiZmxhdHRlbkFycmF5VHlwZUNoaWxkcmVuIiwiX2JhYmVsSGVscGVycyRleHRlbmRzIiwiYXJyYXlUeXBlQ2hpbGRyZW4iLCJuZXdDaGlsZFByb3BzIiwibWFwT2JqZWN0VHlwZUNoaWxkcmVuIiwiX2JhYmVsSGVscGVycyRleHRlbmRzMiIsIl9iYWJlbEhlbHBlcnMkZXh0ZW5kczMiLCJtYXBBcnJheVR5cGVDaGlsZHJlblRvUHJvcHMiLCJuZXdGbGF0dGVuZWRQcm9wcyIsImFycmF5Q2hpbGROYW1lIiwiX2JhYmVsSGVscGVycyRleHRlbmRzNCIsIndhcm5PbkludmFsaWRDaGlsZHJlbiIsIm1hcENoaWxkcmVuVG9Qcm9wcyIsIl9jaGlsZCRwcm9wcyIsImluaXRBdHRyaWJ1dGVzIiwiY29udmVydFJlYWN0UHJvcHN0b0h0bWxBdHRyaWJ1dGVzIiwiZGVmYXVsdFRpdGxlIiwidGl0bGVUZW1wbGF0ZSIsIm1hcHBlZFN0YXRlIiwicmVuZGVyU3RhdGljIiwiSGVhZEluZm8iLCJkZXNjcmlwdGlvbiIsIm1haW5Nb3ZpZSIsIm1haW5UdiIsInNlYXJjaEZldGNoZXIiLCJmaWx0ZXJlZEl0ZW1zIiwiZmlsdGVyZWRNb3ZpZXMiLCJmaWx0ZXJlZFR2IiwibGlnaHRUaGVtZSIsIm5hdkNvbG9yIiwibWFpbkNvbG9yIiwiRGFya01haW5Db2xvciIsImRhcmtUaGVtZSIsIkdsb2JhbFN0eWxlIiwiY3JlYXRlR2xvYmFsU3R5bGUiLCJSZWFjdERPTSJdLCJzb3VyY2VSb290IjoiIn0=