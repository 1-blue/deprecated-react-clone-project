/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={927:(e,t,n)=>{"use strict";var i;function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=d(e);if(t){var r=d(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return p(this,n)}}function m(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var b=function(){function e(){s(this,e)}return c(e,[{key:"shadeRGBColor",value:function(e,t){var n=t.split(","),i=e<0?0:255,r=e<0?-1*e:e,a=parseInt(n[0].slice(4),10),o=parseInt(n[1],10),s=parseInt(n[2],10);return"rgb("+(Math.round((i-a)*r)+a)+","+(Math.round((i-o)*r)+o)+","+(Math.round((i-s)*r)+s)+")"}},{key:"shadeHexColor",value:function(e,t){var n=parseInt(t.slice(1),16),i=e<0?0:255,r=e<0?-1*e:e,a=n>>16,o=n>>8&255,s=255&n;return"#"+(16777216+65536*(Math.round((i-a)*r)+a)+256*(Math.round((i-o)*r)+o)+(Math.round((i-s)*r)+s)).toString(16).slice(1)}},{key:"shadeColor",value:function(t,n){return e.isColorHex(n)?this.shadeHexColor(t,n):this.shadeRGBColor(t,n)}}],[{key:"bind",value:function(e,t){return function(){return e.apply(t,arguments)}}},{key:"isObject",value:function(e){return e&&"object"===o(e)&&!Array.isArray(e)&&null!=e}},{key:"is",value:function(e,t){return Object.prototype.toString.call(t)==="[object "+e+"]"}},{key:"listToArray",value:function(e){var t,n=[];for(t=0;t<e.length;t++)n[t]=e[t];return n}},{key:"extend",value:function(e,t){var n=this;"function"!=typeof Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t});var i=Object.assign({},e);return this.isObject(e)&&this.isObject(t)&&Object.keys(t).forEach((function(r){n.isObject(t[r])&&r in e?i[r]=n.extend(e[r],t[r]):Object.assign(i,u({},r,t[r]))})),i}},{key:"extendArray",value:function(t,n){var i=[];return t.map((function(t){i.push(e.extend(n,t))})),i}},{key:"monthMod",value:function(e){return e%12}},{key:"clone",value:function(t){if(e.is("Array",t)){for(var n=[],i=0;i<t.length;i++)n[i]=this.clone(t[i]);return n}if(e.is("Null",t))return null;if(e.is("Date",t))return t;if("object"===o(t)){var r={};for(var a in t)t.hasOwnProperty(a)&&(r[a]=this.clone(t[a]));return r}return t}},{key:"log10",value:function(e){return Math.log(e)/Math.LN10}},{key:"roundToBase10",value:function(e){return Math.pow(10,Math.floor(Math.log10(e)))}},{key:"roundToBase",value:function(e,t){return Math.pow(t,Math.floor(Math.log(e)/Math.log(t)))}},{key:"parseNumber",value:function(e){return null===e?e:parseFloat(e)}},{key:"randomId",value:function(){return(Math.random()+1).toString(36).substring(4)}},{key:"noExponents",value:function(e){var t=String(e).split(/[eE]/);if(1===t.length)return t[0];var n="",i=e<0?"-":"",r=t[0].replace(".",""),a=Number(t[1])+1;if(a<0){for(n=i+"0.";a++;)n+="0";return n+r.replace(/^-/,"")}for(a-=r.length;a--;)n+="0";return r+n}},{key:"getDimensions",value:function(e){var t=getComputedStyle(e,null),n=e.clientHeight,i=e.clientWidth;return n-=parseFloat(t.paddingTop)+parseFloat(t.paddingBottom),[i-=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),n]}},{key:"getBoundingClientRect",value:function(e){var t=e.getBoundingClientRect();return{top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:e.clientWidth,height:e.clientHeight,x:t.left,y:t.top}}},{key:"getLargestStringFromArr",value:function(e){return e.reduce((function(e,t){return Array.isArray(t)&&(t=t.reduce((function(e,t){return e.length>t.length?e:t}))),e.length>t.length?e:t}),0)}},{key:"hexToRgba",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"#999999",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.6;"#"!==e.substring(0,1)&&(e="#999999");var n=e.replace("#","");n=n.match(new RegExp("(.{"+n.length/3+"})","g"));for(var i=0;i<n.length;i++)n[i]=parseInt(1===n[i].length?n[i]+n[i]:n[i],16);return void 0!==t&&n.push(t),"rgba("+n.join(",")+")"}},{key:"getOpacityFromRGBA",value:function(e){return parseFloat(e.replace(/^.*,(.+)\)/,"$1"))}},{key:"rgb2hex",value:function(e){return(e=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))&&4===e.length?"#"+("0"+parseInt(e[1],10).toString(16)).slice(-2)+("0"+parseInt(e[2],10).toString(16)).slice(-2)+("0"+parseInt(e[3],10).toString(16)).slice(-2):""}},{key:"isColorHex",value:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(e)}},{key:"getPolygonPos",value:function(e,t){for(var n=[],i=2*Math.PI/t,r=0;r<t;r++){var a={};a.x=e*Math.sin(r*i),a.y=-e*Math.cos(r*i),n.push(a)}return n}},{key:"polarToCartesian",value:function(e,t,n,i){var r=(i-90)*Math.PI/180;return{x:e+n*Math.cos(r),y:t+n*Math.sin(r)}}},{key:"escapeString",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"x",n=e.toString().slice();return n.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi,t)}},{key:"negToZero",value:function(e){return e<0?0:e}},{key:"moveIndexInArray",value:function(e,t,n){if(n>=e.length)for(var i=n-e.length+1;i--;)e.push(void 0);return e.splice(n,0,e.splice(t,1)[0]),e}},{key:"extractNumber",value:function(e){return parseFloat(e.replace(/[^\d.]*/g,""))}},{key:"findAncestor",value:function(e,t){for(;(e=e.parentElement)&&!e.classList.contains(t););return e}},{key:"setELstyles",value:function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e.style.key=t[n])}},{key:"isNumber",value:function(e){return!isNaN(e)&&parseFloat(Number(e))===e&&!isNaN(parseInt(e,10))}},{key:"isFloat",value:function(e){return Number(e)===e&&e%1!=0}},{key:"isSafari",value:function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}},{key:"isFirefox",value:function(){return navigator.userAgent.toLowerCase().indexOf("firefox")>-1}},{key:"isIE11",value:function(){if(-1!==window.navigator.userAgent.indexOf("MSIE")||window.navigator.appVersion.indexOf("Trident/")>-1)return!0}},{key:"isIE",value:function(){var e=window.navigator.userAgent,t=e.indexOf("MSIE ");if(t>0)return parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(e.indexOf("Trident/")>0){var n=e.indexOf("rv:");return parseInt(e.substring(n+3,e.indexOf(".",n)),10)}var i=e.indexOf("Edge/");return i>0&&parseInt(e.substring(i+5,e.indexOf(".",i)),10)}}]),e}(),x=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.setEasingFunctions()}return c(e,[{key:"setEasingFunctions",value:function(){var e;if(!this.w.globals.easing){switch(this.w.config.chart.animations.easing){case"linear":e="-";break;case"easein":e="<";break;case"easeout":e=">";break;case"easeinout":default:e="<>";break;case"swing":e=function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1};break;case"bounce":e=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375};break;case"elastic":e=function(e){return e===!!e?e:Math.pow(2,-10*e)*Math.sin((e-.075)*(2*Math.PI)/.3)+1}}this.w.globals.easing=e}}},{key:"animateLine",value:function(e,t,n,i){e.attr(t).animate(i).attr(n)}},{key:"animateMarker",value:function(e,t,n,i,r,a){t||(t=0),e.attr({r:t,width:t,height:t}).animate(i,r).attr({r:n,width:n.width,height:n.height}).afterAll((function(){a()}))}},{key:"animateCircle",value:function(e,t,n,i,r){e.attr({r:t.r,cx:t.cx,cy:t.cy}).animate(i,r).attr({r:n.r,cx:n.cx,cy:n.cy})}},{key:"animateRect",value:function(e,t,n,i,r){e.attr(t).animate(i).attr(n).afterAll((function(){return r()}))}},{key:"animatePathsGradually",value:function(e){var t=e.el,n=e.realIndex,i=e.j,r=e.fill,a=e.pathFrom,o=e.pathTo,s=e.speed,l=e.delay,c=this.w,u=0;c.config.chart.animations.animateGradually.enabled&&(u=c.config.chart.animations.animateGradually.delay),c.config.chart.animations.dynamicAnimation.enabled&&c.globals.dataChanged&&"bar"!==c.config.chart.type&&(u=0),this.morphSVG(t,n,i,"line"!==c.config.chart.type||c.globals.comboCharts?r:"stroke",a,o,s,l*u)}},{key:"showDelayedElements",value:function(){this.w.globals.delayedElements.forEach((function(e){e.el.classList.remove("apexcharts-element-hidden")}))}},{key:"animationCompleted",value:function(e){var t=this.w;t.globals.animationEnded||(t.globals.animationEnded=!0,this.showDelayedElements(),"function"==typeof t.config.chart.events.animationEnd&&t.config.chart.events.animationEnd(this.ctx,{el:e,w:t}))}},{key:"morphSVG",value:function(e,t,n,i,r,a,o,s){var l=this,c=this.w;r||(r=e.attr("pathFrom")),a||(a=e.attr("pathTo"));var u=function(e){return"radar"===c.config.chart.type&&(o=1),"M 0 ".concat(c.globals.gridHeight)};(!r||r.indexOf("undefined")>-1||r.indexOf("NaN")>-1)&&(r=u()),(!a||a.indexOf("undefined")>-1||a.indexOf("NaN")>-1)&&(a=u()),c.globals.shouldAnimate||(o=1),e.plot(r).animate(1,c.globals.easing,s).plot(r).animate(o,c.globals.easing,s).plot(a).afterAll((function(){b.isNumber(n)?n===c.globals.series[c.globals.maxValsInArrayIndex].length-2&&c.globals.shouldAnimate&&l.animationCompleted(e):"none"!==i&&c.globals.shouldAnimate&&(!c.globals.comboCharts&&t===c.globals.series.length-1||c.globals.comboCharts)&&l.animationCompleted(e),l.showDelayedElements()}))}}]),e}(),y=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"getDefaultFilter",value:function(e,t){var n=this.w;e.unfilter(!0),(new window.SVG.Filter).size("120%","180%","-5%","-40%"),"none"!==n.config.states.normal.filter?this.applyFilter(e,t,n.config.states.normal.filter.type,n.config.states.normal.filter.value):n.config.chart.dropShadow.enabled&&this.dropShadow(e,n.config.chart.dropShadow,t)}},{key:"addNormalFilter",value:function(e,t){var n=this.w;n.config.chart.dropShadow.enabled&&!e.node.classList.contains("apexcharts-marker")&&this.dropShadow(e,n.config.chart.dropShadow,t)}},{key:"addLightenFilter",value:function(e,t,n){var i=this,r=this.w,a=n.intensity;e.unfilter(!0),new window.SVG.Filter,e.filter((function(e){var n=r.config.chart.dropShadow;(n.enabled?i.addShadow(e,t,n):e).componentTransfer({rgb:{type:"linear",slope:1.5,intercept:a}})})),e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)}},{key:"addDarkenFilter",value:function(e,t,n){var i=this,r=this.w,a=n.intensity;e.unfilter(!0),new window.SVG.Filter,e.filter((function(e){var n=r.config.chart.dropShadow;(n.enabled?i.addShadow(e,t,n):e).componentTransfer({rgb:{type:"linear",slope:a}})})),e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)}},{key:"applyFilter",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;switch(n){case"none":this.addNormalFilter(e,t);break;case"lighten":this.addLightenFilter(e,t,{intensity:i});break;case"darken":this.addDarkenFilter(e,t,{intensity:i})}}},{key:"addShadow",value:function(e,t,n){var i=n.blur,r=n.top,a=n.left,o=n.color,s=n.opacity,l=e.flood(Array.isArray(o)?o[t]:o,s).composite(e.sourceAlpha,"in").offset(a,r).gaussianBlur(i).merge(e.source);return e.blend(e.source,l)}},{key:"dropShadow",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=t.top,r=t.left,a=t.blur,o=t.color,s=t.opacity,l=t.noUserSpaceOnUse,c=this.w;return e.unfilter(!0),b.isIE()&&"radialBar"===c.config.chart.type||(o=Array.isArray(o)?o[n]:o,e.filter((function(e){var t;t=b.isSafari()||b.isFirefox()||b.isIE()?e.flood(o,s).composite(e.sourceAlpha,"in").offset(r,i).gaussianBlur(a):e.flood(o,s).composite(e.sourceAlpha,"in").offset(r,i).gaussianBlur(a).merge(e.source),e.blend(e.source,t)})),l||e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)),e}},{key:"setSelectionFilter",value:function(e,t,n){var i=this.w;if(void 0!==i.globals.selectedDataPoints[t]&&i.globals.selectedDataPoints[t].indexOf(n)>-1){e.node.setAttribute("selected",!0);var r=i.config.states.active.filter;"none"!==r&&this.applyFilter(e,t,r.type,r.value)}}},{key:"_scaleFilterSize",value:function(e){!function(t){for(var n in t)t.hasOwnProperty(n)&&e.setAttribute(n,t[n])}({width:"200%",height:"200%",x:"-50%",y:"-50%"})}}]),e}(),w=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"drawLine",value:function(e,t,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"#a8a8a8",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"butt",l=this.w,c=l.globals.dom.Paper.line().attr({x1:e,y1:t,x2:n,y2:i,stroke:r,"stroke-dasharray":a,"stroke-width":o,"stroke-linecap":s});return c}},{key:"drawRect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"#fefefe",o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1,s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null,l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:null,c=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,u=this.w,h=u.globals.dom.Paper.rect();return h.attr({x:e,y:t,width:n>0?n:0,height:i>0?i:0,rx:r,ry:r,opacity:o,"stroke-width":null!==s?s:0,stroke:null!==l?l:"none","stroke-dasharray":c}),h.node.setAttribute("fill",a),h}},{key:"drawPolygon",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#e1e1e1",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",r=this.w,a=r.globals.dom.Paper.polygon(e).attr({fill:i,stroke:t,"stroke-width":n});return a}},{key:"drawCircle",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.w;e<0&&(e=0);var i=n.globals.dom.Paper.circle(2*e);return null!==t&&i.attr(t),i}},{key:"drawPath",value:function(e){var t=e.d,n=void 0===t?"":t,i=e.stroke,r=void 0===i?"#a8a8a8":i,a=e.strokeWidth,o=void 0===a?1:a,s=e.fill,l=e.fillOpacity,c=void 0===l?1:l,u=e.strokeOpacity,h=void 0===u?1:u,d=e.classes,f=e.strokeLinecap,p=void 0===f?null:f,g=e.strokeDashArray,m=void 0===g?0:g,v=this.w;return null===p&&(p=v.config.stroke.lineCap),(n.indexOf("undefined")>-1||n.indexOf("NaN")>-1)&&(n="M 0 ".concat(v.globals.gridHeight)),v.globals.dom.Paper.path(n).attr({fill:s,"fill-opacity":c,stroke:r,"stroke-opacity":h,"stroke-linecap":p,"stroke-width":o,"stroke-dasharray":m,class:d})}},{key:"group",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.w,n=t.globals.dom.Paper.group();return null!==e&&n.attr(e),n}},{key:"move",value:function(e,t){return["M",e,t].join(" ")}},{key:"line",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=null;return null===n?i=["L",e,t].join(" "):"H"===n?i=["H",e].join(" "):"V"===n&&(i=["V",t].join(" ")),i}},{key:"curve",value:function(e,t,n,i,r,a){return["C",e,t,n,i,r,a].join(" ")}},{key:"quadraticCurve",value:function(e,t,n,i){return["Q",e,t,n,i].join(" ")}},{key:"arc",value:function(e,t,n,i,r,a,o){var s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l="A";s&&(l="a");var c=[l,e,t,n,i,r,a,o].join(" ");return c}},{key:"renderPaths",value:function(e){var t,n=e.j,i=e.realIndex,r=e.pathFrom,o=e.pathTo,s=e.stroke,l=e.strokeWidth,c=e.strokeLinecap,u=e.fill,h=e.animationDelay,d=e.initialSpeed,f=e.dataChangeSpeed,p=e.className,g=e.shouldClipToGrid,m=void 0===g||g,v=e.bindEventsOnPaths,b=void 0===v||v,w=e.drawShadow,k=void 0===w||w,S=this.w,A=new y(this.ctx),C=new x(this.ctx),E=this.w.config.chart.animations.enabled,T=E&&this.w.config.chart.animations.dynamicAnimation.enabled,P=!!(E&&!S.globals.resized||T&&S.globals.dataChanged&&S.globals.shouldAnimate);P?t=r:(t=o,S.globals.animationEnded=!0);var L,R=S.config.stroke.dashArray;L=Array.isArray(R)?R[i]:S.config.stroke.dashArray;var M=this.drawPath({d:t,stroke:s,strokeWidth:l,fill:u,fillOpacity:1,classes:p,strokeLinecap:c,strokeDashArray:L});if(M.attr("index",i),m&&M.attr({"clip-path":"url(#gridRectMask".concat(S.globals.cuid,")")}),"none"!==S.config.states.normal.filter.type)A.getDefaultFilter(M,i);else if(S.config.chart.dropShadow.enabled&&k&&(!S.config.chart.dropShadow.enabledOnSeries||S.config.chart.dropShadow.enabledOnSeries&&-1!==S.config.chart.dropShadow.enabledOnSeries.indexOf(i))){var I=S.config.chart.dropShadow;A.dropShadow(M,I,i)}b&&(M.node.addEventListener("mouseenter",this.pathMouseEnter.bind(this,M)),M.node.addEventListener("mouseleave",this.pathMouseLeave.bind(this,M)),M.node.addEventListener("mousedown",this.pathMouseDown.bind(this,M))),M.attr({pathTo:o,pathFrom:r});var O={el:M,j:n,realIndex:i,pathFrom:r,pathTo:o,fill:u,strokeWidth:l,delay:h};return!E||S.globals.resized||S.globals.dataChanged?!S.globals.resized&&S.globals.dataChanged||C.showDelayedElements():C.animatePathsGradually(a(a({},O),{},{speed:d})),S.globals.dataChanged&&T&&P&&C.animatePathsGradually(a(a({},O),{},{speed:f})),M}},{key:"drawPattern",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"#a8a8a8",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=this.w,o=a.globals.dom.Paper.pattern(t,n,(function(a){"horizontalLines"===e?a.line(0,0,n,0).stroke({color:i,width:r+1}):"verticalLines"===e?a.line(0,0,0,t).stroke({color:i,width:r+1}):"slantedLines"===e?a.line(0,0,t,n).stroke({color:i,width:r}):"squares"===e?a.rect(t,n).fill("none").stroke({color:i,width:r}):"circles"===e&&a.circle(t).fill("none").stroke({color:i,width:r})}));return o}},{key:"drawGradient",value:function(e,t,n,i,r){var a,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,l=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null,c=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,u=this.w;t.length<9&&0===t.indexOf("#")&&(t=b.hexToRgba(t,i)),n.length<9&&0===n.indexOf("#")&&(n=b.hexToRgba(n,r));var h=0,d=1,f=1,p=null;null!==s&&(h=void 0!==s[0]?s[0]/100:0,d=void 0!==s[1]?s[1]/100:1,f=void 0!==s[2]?s[2]/100:1,p=void 0!==s[3]?s[3]/100:null);var g=!("donut"!==u.config.chart.type&&"pie"!==u.config.chart.type&&"polarArea"!==u.config.chart.type&&"bubble"!==u.config.chart.type);if(a=null===l||0===l.length?u.globals.dom.Paper.gradient(g?"radial":"linear",(function(e){e.at(h,t,i),e.at(d,n,r),e.at(f,n,r),null!==p&&e.at(p,t,i)})):u.globals.dom.Paper.gradient(g?"radial":"linear",(function(e){(Array.isArray(l[c])?l[c]:l).forEach((function(t){e.at(t.offset/100,t.color,t.opacity)}))})),g){var m=u.globals.gridWidth/2,v=u.globals.gridHeight/2;"bubble"!==u.config.chart.type?a.attr({gradientUnits:"userSpaceOnUse",cx:m,cy:v,r:o}):a.attr({cx:.5,cy:.5,r:.8,fx:.2,fy:.2})}else"vertical"===e?a.from(0,0).to(0,1):"diagonal"===e?a.from(0,0).to(1,1):"horizontal"===e?a.from(0,1).to(1,1):"diagonal2"===e&&a.from(1,0).to(0,1);return a}},{key:"drawText",value:function(e){var t,n=e.x,i=e.y,r=e.text,a=e.textAnchor,o=e.fontSize,s=e.fontFamily,l=e.fontWeight,c=e.foreColor,u=e.opacity,h=e.cssClass,d=void 0===h?"":h,f=e.isPlainText,p=void 0===f||f,g=this.w;return void 0===r&&(r=""),a||(a="start"),c&&c.length||(c=g.config.chart.foreColor),s=s||g.config.chart.fontFamily,l=l||"regular",(t=Array.isArray(r)?g.globals.dom.Paper.text((function(e){for(var t=0;t<r.length;t++)0===t?e.tspan(r[t]):e.tspan(r[t]).newLine()})):p?g.globals.dom.Paper.plain(r):g.globals.dom.Paper.text((function(e){return e.tspan(r)}))).attr({x:n,y:i,"text-anchor":a,"dominant-baseline":"auto","font-size":o,"font-family":s,"font-weight":l,fill:c,class:"apexcharts-text "+d}),t.node.style.fontFamily=s,t.node.style.opacity=u,t}},{key:"drawMarker",value:function(e,t,n){e=e||0;var i=n.pSize||0,r=null;if("square"===n.shape||"rect"===n.shape){var a=void 0===n.pRadius?i/2:n.pRadius;null!==t&&i||(i=0,a=0);var o=1.2*i+a,s=this.drawRect(o,o,o,o,a);s.attr({x:e-o/2,y:t-o/2,cx:e,cy:t,class:n.class?n.class:"",fill:n.pointFillColor,"fill-opacity":n.pointFillOpacity?n.pointFillOpacity:1,stroke:n.pointStrokeColor,"stroke-width":n.pointStrokeWidth?n.pointStrokeWidth:0,"stroke-opacity":n.pointStrokeOpacity?n.pointStrokeOpacity:1}),r=s}else"circle"!==n.shape&&n.shape||(b.isNumber(t)||(i=0,t=0),r=this.drawCircle(i,{cx:e,cy:t,class:n.class?n.class:"",stroke:n.pointStrokeColor,fill:n.pointFillColor,"fill-opacity":n.pointFillOpacity?n.pointFillOpacity:1,"stroke-width":n.pointStrokeWidth?n.pointStrokeWidth:0,"stroke-opacity":n.pointStrokeOpacity?n.pointStrokeOpacity:1}));return r}},{key:"pathMouseEnter",value:function(e,t){var n=this.w,i=new y(this.ctx),r=parseInt(e.node.getAttribute("index"),10),a=parseInt(e.node.getAttribute("j"),10);if("function"==typeof n.config.chart.events.dataPointMouseEnter&&n.config.chart.events.dataPointMouseEnter(t,this.ctx,{seriesIndex:r,dataPointIndex:a,w:n}),this.ctx.events.fireEvent("dataPointMouseEnter",[t,this.ctx,{seriesIndex:r,dataPointIndex:a,w:n}]),("none"===n.config.states.active.filter.type||"true"!==e.node.getAttribute("selected"))&&"none"!==n.config.states.hover.filter.type&&!n.globals.isTouchDevice){var o=n.config.states.hover.filter;i.applyFilter(e,r,o.type,o.value)}}},{key:"pathMouseLeave",value:function(e,t){var n=this.w,i=new y(this.ctx),r=parseInt(e.node.getAttribute("index"),10),a=parseInt(e.node.getAttribute("j"),10);"function"==typeof n.config.chart.events.dataPointMouseLeave&&n.config.chart.events.dataPointMouseLeave(t,this.ctx,{seriesIndex:r,dataPointIndex:a,w:n}),this.ctx.events.fireEvent("dataPointMouseLeave",[t,this.ctx,{seriesIndex:r,dataPointIndex:a,w:n}]),"none"!==n.config.states.active.filter.type&&"true"===e.node.getAttribute("selected")||"none"!==n.config.states.hover.filter.type&&i.getDefaultFilter(e,r)}},{key:"pathMouseDown",value:function(e,t){var n=this.w,i=new y(this.ctx),r=parseInt(e.node.getAttribute("index"),10),a=parseInt(e.node.getAttribute("j"),10),o="false";if("true"===e.node.getAttribute("selected")){if(e.node.setAttribute("selected","false"),n.globals.selectedDataPoints[r].indexOf(a)>-1){var s=n.globals.selectedDataPoints[r].indexOf(a);n.globals.selectedDataPoints[r].splice(s,1)}}else{if(!n.config.states.active.allowMultipleDataPointsSelection&&n.globals.selectedDataPoints.length>0){n.globals.selectedDataPoints=[];var l=n.globals.dom.Paper.select(".apexcharts-series path").members,c=n.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,u=function(e){Array.prototype.forEach.call(e,(function(e){e.node.setAttribute("selected","false"),i.getDefaultFilter(e,r)}))};u(l),u(c)}e.node.setAttribute("selected","true"),o="true",void 0===n.globals.selectedDataPoints[r]&&(n.globals.selectedDataPoints[r]=[]),n.globals.selectedDataPoints[r].push(a)}if("true"===o){var h=n.config.states.active.filter;"none"!==h&&i.applyFilter(e,r,h.type,h.value)}else"none"!==n.config.states.active.filter.type&&i.getDefaultFilter(e,r);"function"==typeof n.config.chart.events.dataPointSelection&&n.config.chart.events.dataPointSelection(t,this.ctx,{selectedDataPoints:n.globals.selectedDataPoints,seriesIndex:r,dataPointIndex:a,w:n}),t&&this.ctx.events.fireEvent("dataPointSelection",[t,this.ctx,{selectedDataPoints:n.globals.selectedDataPoints,seriesIndex:r,dataPointIndex:a,w:n}])}},{key:"rotateAroundCenter",value:function(e){var t={};return e&&"function"==typeof e.getBBox&&(t=e.getBBox()),{x:t.x+t.width/2,y:t.y+t.height/2}}},{key:"getTextRects",value:function(e,t,n,i){var r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=this.w,o=this.drawText({x:-200,y:-200,text:e,textAnchor:"start",fontSize:t,fontFamily:n,foreColor:"#fff",opacity:0});i&&o.attr("transform",i),a.globals.dom.Paper.add(o);var s=o.bbox();return r||(s=o.node.getBoundingClientRect()),o.remove(),{width:s.width,height:s.height}}},{key:"placeTextWithEllipsis",value:function(e,t,n){if("function"==typeof e.getComputedTextLength&&(e.textContent=t,t.length>0&&e.getComputedTextLength()>=n/1.1)){for(var i=t.length-3;i>0;i-=3)if(e.getSubStringLength(0,i)<=n/1.1)return void(e.textContent=t.substring(0,i)+"...");e.textContent="."}}}],[{key:"setAttrs",value:function(e,t){for(var n in t)t.hasOwnProperty(n)&&e.setAttribute(n,t[n])}}]),e}(),k=function(){function e(t){s(this,e),this.w=t.w,this.annoCtx=t}return c(e,[{key:"setOrientations",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.w;if("vertical"===e.label.orientation){var i=null!==t?t:0,r=n.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(i,"']"));if(null!==r){var a=r.getBoundingClientRect();r.setAttribute("x",parseFloat(r.getAttribute("x"))-a.height+4),"top"===e.label.position?r.setAttribute("y",parseFloat(r.getAttribute("y"))+a.width):r.setAttribute("y",parseFloat(r.getAttribute("y"))-a.width);var o=this.annoCtx.graphics.rotateAroundCenter(r),s=o.x,l=o.y;r.setAttribute("transform","rotate(-90 ".concat(s," ").concat(l,")"))}}}},{key:"addBackgroundToAnno",value:function(e,t){var n=this.w;if(!e||void 0===t.label.text||void 0!==t.label.text&&!String(t.label.text).trim())return null;var i=n.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),r=e.getBoundingClientRect(),a=t.label.style.padding.left,o=t.label.style.padding.right,s=t.label.style.padding.top,l=t.label.style.padding.bottom;"vertical"===t.label.orientation&&(s=t.label.style.padding.left,l=t.label.style.padding.right,a=t.label.style.padding.top,o=t.label.style.padding.bottom);var c=r.left-i.left-a,u=r.top-i.top-s,h=this.annoCtx.graphics.drawRect(c-n.globals.barPadForNumericAxis,u,r.width+a+o,r.height+s+l,t.label.borderRadius,t.label.style.background,1,t.label.borderWidth,t.label.borderColor,0);return t.id&&h.node.classList.add(b.escapeString(t.id)),h}},{key:"annotationsBackground",value:function(){var e=this,t=this.w,n=function(n,i,r){var a=t.globals.dom.baseEl.querySelector(".apexcharts-".concat(r,"-annotations .apexcharts-").concat(r,"-annotation-label[rel='").concat(i,"']"));if(a){var o=a.parentNode,s=e.addBackgroundToAnno(a,n);s&&(o.insertBefore(s.node,a),n.label.mouseEnter&&s.node.addEventListener("mouseenter",n.label.mouseEnter.bind(e,n)),n.label.mouseLeave&&s.node.addEventListener("mouseleave",n.label.mouseLeave.bind(e,n)))}};t.config.annotations.xaxis.map((function(e,t){n(e,t,"xaxis")})),t.config.annotations.yaxis.map((function(e,t){n(e,t,"yaxis")})),t.config.annotations.points.map((function(e,t){n(e,t,"point")}))}},{key:"getStringX",value:function(e){var t=this.w,n=e;t.config.xaxis.convertedCatToNumeric&&t.globals.categoryLabels.length&&(e=t.globals.categoryLabels.indexOf(e)+1);var i=t.globals.labels.indexOf(e),r=t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child("+(i+1)+")");return r&&(n=parseFloat(r.getAttribute("x"))),n}}]),e}(),S=function(){function e(t){s(this,e),this.w=t.w,this.annoCtx=t,this.invertAxis=this.annoCtx.invertAxis}return c(e,[{key:"addXaxisAnnotation",value:function(e,t,n){var i=this.w,r=this.invertAxis?i.globals.minY:i.globals.minX,a=this.invertAxis?i.globals.maxY:i.globals.maxX,o=this.invertAxis?i.globals.yRange[0]:i.globals.xRange,s=(e.x-r)/(o/i.globals.gridWidth);this.annoCtx.inversedReversedAxis&&(s=(a-e.x)/(o/i.globals.gridWidth));var l=e.label.text;"category"!==i.config.xaxis.type&&!i.config.xaxis.convertedCatToNumeric||this.invertAxis||i.globals.dataFormatXNumeric||(s=this.annoCtx.helpers.getStringX(e.x));var c=e.strokeDashArray;if(b.isNumber(s)){if(null===e.x2||void 0===e.x2){var u=this.annoCtx.graphics.drawLine(s+e.offsetX,0+e.offsetY,s+e.offsetX,i.globals.gridHeight+e.offsetY,e.borderColor,c,e.borderWidth);t.appendChild(u.node),e.id&&u.node.classList.add(e.id)}else{var h=(e.x2-r)/(o/i.globals.gridWidth);if(this.annoCtx.inversedReversedAxis&&(h=(a-e.x2)/(o/i.globals.gridWidth)),"category"!==i.config.xaxis.type&&!i.config.xaxis.convertedCatToNumeric||this.invertAxis||i.globals.dataFormatXNumeric||(h=this.annoCtx.helpers.getStringX(e.x2)),h<s){var d=s;s=h,h=d}var f=this.annoCtx.graphics.drawRect(s+e.offsetX,0+e.offsetY,h-s,i.globals.gridHeight+e.offsetY,0,e.fillColor,e.opacity,1,e.borderColor,c);f.node.classList.add("apexcharts-annotation-rect"),f.attr("clip-path","url(#gridRectMask".concat(i.globals.cuid,")")),t.appendChild(f.node),e.id&&f.node.classList.add(e.id)}var p="top"===e.label.position?4:i.globals.gridHeight,g=this.annoCtx.graphics.getTextRects(l,parseFloat(e.label.style.fontSize)),m=this.annoCtx.graphics.drawText({x:s+e.label.offsetX,y:p+e.label.offsetY-("vertical"===e.label.orientation?"top"===e.label.position?g.width/2-12:-g.width/2:0),text:l,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-xaxis-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});m.attr({rel:n}),t.appendChild(m.node),this.annoCtx.helpers.setOrientations(e,n)}}},{key:"drawXAxisAnnotations",value:function(){var e=this,t=this.w,n=this.annoCtx.graphics.group({class:"apexcharts-xaxis-annotations"});return t.config.annotations.xaxis.map((function(t,i){e.addXaxisAnnotation(t,n.node,i)})),n}}]),e}(),A=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"getStackedSeriesTotals",value:function(){var e=this.w,t=[];if(0===e.globals.series.length)return t;for(var n=0;n<e.globals.series[e.globals.maxValsInArrayIndex].length;n++){for(var i=0,r=0;r<e.globals.series.length;r++)void 0!==e.globals.series[r][n]&&(i+=e.globals.series[r][n]);t.push(i)}return e.globals.stackedSeriesTotals=t,t}},{key:"getSeriesTotalByIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?this.w.config.series.reduce((function(e,t){return e+t}),0):this.w.globals.series[e].reduce((function(e,t){return e+t}),0)}},{key:"isSeriesNull",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return 0===(null===e?this.w.config.series.filter((function(e){return null!==e})):this.w.config.series[e].data.filter((function(e){return null!==e}))).length}},{key:"seriesHaveSameValues",value:function(e){return this.w.globals.series[e].every((function(e,t,n){return e===n[0]}))}},{key:"getCategoryLabels",value:function(e){var t=this.w,n=e.slice();return t.config.xaxis.convertedCatToNumeric&&(n=e.map((function(e,n){return t.config.xaxis.labels.formatter(e-t.globals.minX+1)}))),n}},{key:"getLargestSeries",value:function(){var e=this.w;e.globals.maxValsInArrayIndex=e.globals.series.map((function(e){return e.length})).indexOf(Math.max.apply(Math,e.globals.series.map((function(e){return e.length}))))}},{key:"getLargestMarkerSize",value:function(){var e=this.w,t=0;return e.globals.markers.size.forEach((function(e){t=Math.max(t,e)})),e.globals.markers.largestSize=t,t}},{key:"getSeriesTotals",value:function(){var e=this.w;e.globals.seriesTotals=e.globals.series.map((function(e,t){var n=0;if(Array.isArray(e))for(var i=0;i<e.length;i++)n+=e[i];else n+=e;return n}))}},{key:"getSeriesTotalsXRange",value:function(e,t){var n=this.w;return n.globals.series.map((function(i,r){for(var a=0,o=0;o<i.length;o++)n.globals.seriesX[r][o]>e&&n.globals.seriesX[r][o]<t&&(a+=i[o]);return a}))}},{key:"getPercentSeries",value:function(){var e=this.w;e.globals.seriesPercent=e.globals.series.map((function(t,n){var i=[];if(Array.isArray(t))for(var r=0;r<t.length;r++){var a=e.globals.stackedSeriesTotals[r],o=0;a&&(o=100*t[r]/a),i.push(o)}else{var s=100*t/e.globals.seriesTotals.reduce((function(e,t){return e+t}),0);i.push(s)}return i}))}},{key:"getCalculatedRatios",value:function(){var e,t,n,i,r=this.w.globals,a=[],o=0,s=[],l=.1,c=0;if(r.yRange=[],r.isMultipleYAxis)for(var u=0;u<r.minYArr.length;u++)r.yRange.push(Math.abs(r.minYArr[u]-r.maxYArr[u])),s.push(0);else r.yRange.push(Math.abs(r.minY-r.maxY));r.xRange=Math.abs(r.maxX-r.minX),r.zRange=Math.abs(r.maxZ-r.minZ);for(var h=0;h<r.yRange.length;h++)a.push(r.yRange[h]/r.gridHeight);if(t=r.xRange/r.gridWidth,n=Math.abs(r.initialMaxX-r.initialMinX)/r.gridWidth,e=r.yRange/r.gridWidth,i=r.xRange/r.gridHeight,(o=r.zRange/r.gridHeight*16)||(o=1),r.minY!==Number.MIN_VALUE&&0!==Math.abs(r.minY)&&(r.hasNegs=!0),r.isMultipleYAxis){s=[];for(var d=0;d<a.length;d++)s.push(-r.minYArr[d]/a[d])}else s.push(-r.minY/a[0]),r.minY!==Number.MIN_VALUE&&0!==Math.abs(r.minY)&&(l=-r.minY/e,c=r.minX/t);return{yRatio:a,invertedYRatio:e,zRatio:o,xRatio:t,initialXRatio:n,invertedXRatio:i,baseLineInvertedY:l,baseLineY:s,baseLineX:c}}},{key:"getLogSeries",value:function(e){var t=this,n=this.w;return n.globals.seriesLog=e.map((function(e,i){return n.config.yaxis[i]&&n.config.yaxis[i].logarithmic?e.map((function(e){return null===e?null:t.getLogVal(e,i)})):e})),n.globals.invalidLogScale?e:n.globals.seriesLog}},{key:"getLogVal",value:function(e,t){var n=this.w,i=(Math.log(e)-Math.log(n.globals.minYArr[t]))/(Math.log(n.globals.maxYArr[t])-Math.log(n.globals.minYArr[t]));return isNaN(i)?e:i}},{key:"getLogYRatios",value:function(e){var t=this,n=this.w,i=this.w.globals;return i.yLogRatio=e.slice(),i.logYRange=i.yRange.map((function(e,r){if(n.config.yaxis[r]&&t.w.config.yaxis[r].logarithmic){var a,o=-Number.MAX_VALUE,s=Number.MIN_VALUE;return i.seriesLog.forEach((function(e,t){e.forEach((function(e){n.config.yaxis[t]&&n.config.yaxis[t].logarithmic&&(o=Math.max(e,o),s=Math.min(e,s))}))})),a=Math.pow(i.yRange[r],Math.abs(s-o)/i.yRange[r]),i.yLogRatio[r]=a/i.gridHeight,a}})),i.invalidLogScale?e.slice():i.yLogRatio}}],[{key:"checkComboSeries",value:function(e){var t=!1,n=0,i=0;return e.length&&void 0!==e[0].type&&e.forEach((function(e){"bar"!==e.type&&"column"!==e.type&&"candlestick"!==e.type&&"boxPlot"!==e.type||n++,void 0!==e.type&&i++})),i>0&&(t=!0),{comboBarCount:n,comboCharts:t}}},{key:"extendArrayProps",value:function(e,t,n){return t.yaxis&&(t=e.extendYAxis(t,n)),t.annotations&&(t.annotations.yaxis&&(t=e.extendYAxisAnnotations(t)),t.annotations.xaxis&&(t=e.extendXAxisAnnotations(t)),t.annotations.points&&(t=e.extendPointAnnotations(t))),t}}]),e}(),C=function(){function e(t){s(this,e),this.w=t.w,this.annoCtx=t}return c(e,[{key:"addYaxisAnnotation",value:function(e,t,n){var i,r=this.w,a=e.strokeDashArray,o=this._getY1Y2("y1",e),s=e.label.text;if(null===e.y2||void 0===e.y2){var l=this.annoCtx.graphics.drawLine(0+e.offsetX,o+e.offsetY,this._getYAxisAnnotationWidth(e),o+e.offsetY,e.borderColor,a,e.borderWidth);t.appendChild(l.node),e.id&&l.node.classList.add(e.id)}else{if((i=this._getY1Y2("y2",e))>o){var c=o;o=i,i=c}var u=this.annoCtx.graphics.drawRect(0+e.offsetX,i+e.offsetY,this._getYAxisAnnotationWidth(e),o-i,0,e.fillColor,e.opacity,1,e.borderColor,a);u.node.classList.add("apexcharts-annotation-rect"),u.attr("clip-path","url(#gridRectMask".concat(r.globals.cuid,")")),t.appendChild(u.node),e.id&&u.node.classList.add(e.id)}var h="right"===e.label.position?r.globals.gridWidth:0,d=this.annoCtx.graphics.drawText({x:h+e.label.offsetX,y:(null!=i?i:o)+e.label.offsetY-3,text:s,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-yaxis-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});d.attr({rel:n}),t.appendChild(d.node)}},{key:"_getY1Y2",value:function(e,t){var n,i="y1"===e?t.y:t.y2,r=this.w;if(this.annoCtx.invertAxis){var a=r.globals.labels.indexOf(i);r.config.xaxis.convertedCatToNumeric&&(a=r.globals.categoryLabels.indexOf(i));var o=r.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child("+(a+1)+")");o&&(n=parseFloat(o.getAttribute("y")))}else{var s;s=r.config.yaxis[t.yAxisIndex].logarithmic?(i=new A(this.annoCtx.ctx).getLogVal(i,t.yAxisIndex))/r.globals.yLogRatio[t.yAxisIndex]:(i-r.globals.minYArr[t.yAxisIndex])/(r.globals.yRange[t.yAxisIndex]/r.globals.gridHeight),n=r.globals.gridHeight-s,r.config.yaxis[t.yAxisIndex]&&r.config.yaxis[t.yAxisIndex].reversed&&(n=s)}return n}},{key:"_getYAxisAnnotationWidth",value:function(e){var t=this.w;return t.globals.gridWidth,(e.width.indexOf("%")>-1?t.globals.gridWidth*parseInt(e.width,10)/100:parseInt(e.width,10))+e.offsetX}},{key:"drawYAxisAnnotations",value:function(){var e=this,t=this.w,n=this.annoCtx.graphics.group({class:"apexcharts-yaxis-annotations"});return t.config.annotations.yaxis.map((function(t,i){e.addYaxisAnnotation(t,n.node,i)})),n}}]),e}(),E=function(){function e(t){s(this,e),this.w=t.w,this.annoCtx=t}return c(e,[{key:"addPointAnnotation",value:function(e,t,n){var i=this.w,r=0,a=0,o=0;this.annoCtx.invertAxis&&console.warn("Point annotation is not supported in horizontal bar charts.");var s=parseFloat(e.y);if("string"==typeof e.x||"category"===i.config.xaxis.type||i.config.xaxis.convertedCatToNumeric){var l=i.globals.labels.indexOf(e.x);i.config.xaxis.convertedCatToNumeric&&(l=i.globals.categoryLabels.indexOf(e.x)),r=this.annoCtx.helpers.getStringX(e.x),null===e.y&&(s=i.globals.series[e.seriesIndex][l])}else r=(e.x-i.globals.minX)/(i.globals.xRange/i.globals.gridWidth);for(var c,u=[],h=0,d=0;d<=e.seriesIndex;d++){var f=i.config.yaxis[d].seriesName;if(f)for(var p=d+1;p<=e.seriesIndex;p++)i.config.yaxis[p].seriesName===f&&-1===u.indexOf(f)&&(h++,u.push(f))}if(i.config.yaxis[e.yAxisIndex].logarithmic)c=(s=new A(this.annoCtx.ctx).getLogVal(s,e.yAxisIndex))/i.globals.yLogRatio[e.yAxisIndex];else{var g=e.yAxisIndex+h;c=(s-i.globals.minYArr[g])/(i.globals.yRange[g]/i.globals.gridHeight)}if(a=i.globals.gridHeight-c-parseFloat(e.label.style.fontSize)-e.marker.size,o=i.globals.gridHeight-c,i.config.yaxis[e.yAxisIndex]&&i.config.yaxis[e.yAxisIndex].reversed&&(a=c+parseFloat(e.label.style.fontSize)+e.marker.size,o=c),b.isNumber(r)){var m={pSize:e.marker.size,pointStrokeWidth:e.marker.strokeWidth,pointFillColor:e.marker.fillColor,pointStrokeColor:e.marker.strokeColor,shape:e.marker.shape,pRadius:e.marker.radius,class:"apexcharts-point-annotation-marker ".concat(e.marker.cssClass," ").concat(e.id?e.id:"")},v=this.annoCtx.graphics.drawMarker(r+e.marker.offsetX,o+e.marker.offsetY,m);t.appendChild(v.node);var x=e.label.text?e.label.text:"",y=this.annoCtx.graphics.drawText({x:r+e.label.offsetX,y:a+e.label.offsetY,text:x,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-point-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});if(y.attr({rel:n}),t.appendChild(y.node),e.customSVG.SVG){var w=this.annoCtx.graphics.group({class:"apexcharts-point-annotations-custom-svg "+e.customSVG.cssClass});w.attr({transform:"translate(".concat(r+e.customSVG.offsetX,", ").concat(a+e.customSVG.offsetY,")")}),w.node.innerHTML=e.customSVG.SVG,t.appendChild(w.node)}if(e.image.path){var k=e.image.width?e.image.width:20,S=e.image.height?e.image.height:20;v=this.annoCtx.addImage({x:r+e.image.offsetX-k/2,y:a+e.image.offsetY-S/2,width:k,height:S,path:e.image.path,appendTo:".apexcharts-point-annotations"})}e.mouseEnter&&v.node.addEventListener("mouseenter",e.mouseEnter.bind(this,e)),e.mouseLeave&&v.node.addEventListener("mouseleave",e.mouseLeave.bind(this,e))}}},{key:"drawPointAnnotations",value:function(){var e=this,t=this.w,n=this.annoCtx.graphics.group({class:"apexcharts-point-annotations"});return t.config.annotations.points.map((function(t,i){e.addPointAnnotation(t,n.node,i)})),n}}]),e}(),T={name:"en",options:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],toolbar:{exportToSVG:"Download SVG",exportToPNG:"Download PNG",exportToCSV:"Download CSV",menu:"Menu",selection:"Selection",selectionZoom:"Selection Zoom",zoomIn:"Zoom In",zoomOut:"Zoom Out",pan:"Panning",reset:"Reset Zoom"}}},P=function(){function e(){s(this,e),this.yAxis={show:!0,showAlways:!1,showForNullSeries:!0,seriesName:void 0,opposite:!1,reversed:!1,logarithmic:!1,logBase:10,tickAmount:void 0,forceNiceScale:!1,max:void 0,min:void 0,floating:!1,decimalsInFloat:void 0,labels:{show:!0,minWidth:0,maxWidth:160,offsetX:0,offsetY:0,align:void 0,rotate:0,padding:20,style:{colors:[],fontSize:"11px",fontWeight:400,fontFamily:void 0,cssClass:""},formatter:void 0},axisBorder:{show:!1,color:"#e0e0e0",width:1,offsetX:0,offsetY:0},axisTicks:{show:!1,color:"#e0e0e0",width:6,offsetX:0,offsetY:0},title:{text:void 0,rotate:-90,offsetY:0,offsetX:0,style:{color:void 0,fontSize:"11px",fontWeight:900,fontFamily:void 0,cssClass:""}},tooltip:{enabled:!1,offsetX:0},crosshairs:{show:!0,position:"front",stroke:{color:"#b6b6b6",width:1,dashArray:0}}},this.pointAnnotation={id:void 0,x:0,y:null,yAxisIndex:0,seriesIndex:0,mouseEnter:void 0,mouseLeave:void 0,marker:{size:4,fillColor:"#fff",strokeWidth:2,strokeColor:"#333",shape:"circle",offsetX:0,offsetY:0,radius:2,cssClass:""},label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"middle",offsetX:0,offsetY:0,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}},customSVG:{SVG:void 0,cssClass:void 0,offsetX:0,offsetY:0},image:{path:void 0,width:20,height:20,offsetX:0,offsetY:0}},this.yAxisAnnotation={id:void 0,y:0,y2:null,strokeDashArray:1,fillColor:"#c2c2c2",borderColor:"#c2c2c2",borderWidth:1,opacity:.3,offsetX:0,offsetY:0,width:"100%",yAxisIndex:0,label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"end",position:"right",offsetX:0,offsetY:-3,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}}},this.xAxisAnnotation={id:void 0,x:0,x2:null,strokeDashArray:1,fillColor:"#c2c2c2",borderColor:"#c2c2c2",borderWidth:1,opacity:.3,offsetX:0,offsetY:0,label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"middle",orientation:"vertical",position:"top",offsetX:0,offsetY:0,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}}},this.text={x:0,y:0,text:"",textAnchor:"start",foreColor:void 0,fontSize:"13px",fontFamily:void 0,fontWeight:400,appendTo:".apexcharts-annotations",backgroundColor:"transparent",borderColor:"#c2c2c2",borderRadius:0,borderWidth:0,paddingLeft:4,paddingRight:4,paddingTop:2,paddingBottom:2}}return c(e,[{key:"init",value:function(){return{annotations:{position:"front",yaxis:[this.yAxisAnnotation],xaxis:[this.xAxisAnnotation],points:[this.pointAnnotation],texts:[],images:[],shapes:[]},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{delay:150,enabled:!0},dynamicAnimation:{enabled:!0,speed:350}},background:"transparent",locales:[T],defaultLocale:"en",dropShadow:{enabled:!1,enabledOnSeries:void 0,top:2,left:2,blur:4,color:"#000",opacity:.35},events:{animationEnd:void 0,beforeMount:void 0,mounted:void 0,updated:void 0,click:void 0,mouseMove:void 0,mouseLeave:void 0,legendClick:void 0,markerClick:void 0,selection:void 0,dataPointSelection:void 0,dataPointMouseEnter:void 0,dataPointMouseLeave:void 0,beforeZoom:void 0,beforeResetZoom:void 0,zoomed:void 0,scrolled:void 0,brushScrolled:void 0},foreColor:"#373d3f",fontFamily:"Helvetica, Arial, sans-serif",height:"auto",parentHeightOffset:15,redrawOnParentResize:!0,redrawOnWindowResize:!0,id:void 0,group:void 0,offsetX:0,offsetY:0,selection:{enabled:!1,type:"x",fill:{color:"#24292e",opacity:.1},stroke:{width:1,color:"#24292e",opacity:.4,dashArray:3},xaxis:{min:void 0,max:void 0},yaxis:{min:void 0,max:void 0}},sparkline:{enabled:!1},brush:{enabled:!1,autoScaleYaxis:!0,target:void 0},stacked:!1,stackType:"normal",toolbar:{show:!0,offsetX:0,offsetY:0,tools:{download:!0,selection:!0,zoom:!0,zoomin:!0,zoomout:!0,pan:!0,reset:!0,customIcons:[]},export:{csv:{filename:void 0,columnDelimiter:",",headerCategory:"category",headerValue:"value",dateFormatter:function(e){return new Date(e).toDateString()}},png:{filename:void 0},svg:{filename:void 0}},autoSelected:"zoom"},type:"line",width:"100%",zoom:{enabled:!0,type:"x",autoScaleYaxis:!1,zoomedArea:{fill:{color:"#90CAF9",opacity:.4},stroke:{color:"#0D47A1",opacity:.4,width:1}}}},plotOptions:{area:{fillTo:"origin"},bar:{horizontal:!1,columnWidth:"70%",barHeight:"70%",distributed:!1,borderRadius:0,rangeBarOverlap:!0,rangeBarGroupRows:!1,colors:{ranges:[],backgroundBarColors:[],backgroundBarOpacity:1,backgroundBarRadius:0},dataLabels:{position:"top",maxItems:100,hideOverflowingLabels:!0,orientation:"horizontal"}},bubble:{minBubbleRadius:void 0,maxBubbleRadius:void 0},candlestick:{colors:{upward:"#00B746",downward:"#EF403C"},wick:{useFillColor:!0}},boxPlot:{colors:{upper:"#00E396",lower:"#008FFB"}},heatmap:{radius:2,enableShades:!0,shadeIntensity:.5,reverseNegativeShade:!1,distributed:!1,useFillColorAsStroke:!1,colorScale:{inverse:!1,ranges:[],min:void 0,max:void 0}},treemap:{enableShades:!0,shadeIntensity:.5,distributed:!1,reverseNegativeShade:!1,useFillColorAsStroke:!1,colorScale:{inverse:!1,ranges:[],min:void 0,max:void 0}},radialBar:{inverseOrder:!1,startAngle:0,endAngle:360,offsetX:0,offsetY:0,hollow:{margin:5,size:"50%",background:"transparent",image:void 0,imageWidth:150,imageHeight:150,imageOffsetX:0,imageOffsetY:0,imageClipped:!0,position:"front",dropShadow:{enabled:!1,top:0,left:0,blur:3,color:"#000",opacity:.5}},track:{show:!0,startAngle:void 0,endAngle:void 0,background:"#f2f2f2",strokeWidth:"97%",opacity:1,margin:5,dropShadow:{enabled:!1,top:0,left:0,blur:3,color:"#000",opacity:.5}},dataLabels:{show:!0,name:{show:!0,fontSize:"16px",fontFamily:void 0,fontWeight:600,color:void 0,offsetY:0,formatter:function(e){return e}},value:{show:!0,fontSize:"14px",fontFamily:void 0,fontWeight:400,color:void 0,offsetY:16,formatter:function(e){return e+"%"}},total:{show:!1,label:"Total",fontSize:"16px",fontWeight:600,fontFamily:void 0,color:void 0,formatter:function(e){return e.globals.seriesTotals.reduce((function(e,t){return e+t}),0)/e.globals.series.length+"%"}}}},pie:{customScale:1,offsetX:0,offsetY:0,startAngle:0,endAngle:360,expandOnClick:!0,dataLabels:{offset:0,minAngleToShowLabel:10},donut:{size:"65%",background:"transparent",labels:{show:!1,name:{show:!0,fontSize:"16px",fontFamily:void 0,fontWeight:600,color:void 0,offsetY:-10,formatter:function(e){return e}},value:{show:!0,fontSize:"20px",fontFamily:void 0,fontWeight:400,color:void 0,offsetY:10,formatter:function(e){return e}},total:{show:!1,showAlways:!1,label:"Total",fontSize:"16px",fontWeight:400,fontFamily:void 0,color:void 0,formatter:function(e){return e.globals.seriesTotals.reduce((function(e,t){return e+t}),0)}}}}},polarArea:{rings:{strokeWidth:1,strokeColor:"#e8e8e8"},spokes:{strokeWidth:1,connectorColors:"#e8e8e8"}},radar:{size:void 0,offsetX:0,offsetY:0,polygons:{strokeWidth:1,strokeColors:"#e8e8e8",connectorColors:"#e8e8e8",fill:{colors:void 0}}}},colors:void 0,dataLabels:{enabled:!0,enabledOnSeries:void 0,formatter:function(e){return null!==e?e:""},textAnchor:"middle",distributed:!1,offsetX:0,offsetY:0,style:{fontSize:"12px",fontFamily:void 0,fontWeight:600,colors:void 0},background:{enabled:!0,foreColor:"#fff",borderRadius:2,padding:4,opacity:.9,borderWidth:1,borderColor:"#fff",dropShadow:{enabled:!1,top:1,left:1,blur:1,color:"#000",opacity:.45}},dropShadow:{enabled:!1,top:1,left:1,blur:1,color:"#000",opacity:.45}},fill:{type:"solid",colors:void 0,opacity:.85,gradient:{shade:"dark",type:"horizontal",shadeIntensity:.5,gradientToColors:void 0,inverseColors:!0,opacityFrom:1,opacityTo:1,stops:[0,50,100],colorStops:[]},image:{src:[],width:void 0,height:void 0},pattern:{style:"squares",width:6,height:6,strokeWidth:2}},forecastDataPoints:{count:0,fillOpacity:.5,strokeWidth:void 0,dashArray:4},grid:{show:!0,borderColor:"#e0e0e0",strokeDashArray:0,position:"back",xaxis:{lines:{show:!1}},yaxis:{lines:{show:!0}},row:{colors:void 0,opacity:.5},column:{colors:void 0,opacity:.5},padding:{top:0,right:10,bottom:0,left:12}},labels:[],legend:{show:!0,showForSingleSeries:!1,showForNullSeries:!0,showForZeroSeries:!0,floating:!1,position:"bottom",horizontalAlign:"center",inverseOrder:!1,fontSize:"12px",fontFamily:void 0,fontWeight:400,width:void 0,height:void 0,formatter:void 0,tooltipHoverFormatter:void 0,offsetX:-20,offsetY:4,customLegendItems:[],labels:{colors:void 0,useSeriesColors:!1},markers:{width:12,height:12,strokeWidth:0,fillColors:void 0,strokeColor:"#fff",radius:12,customHTML:void 0,offsetX:0,offsetY:0,onClick:void 0},itemMargin:{horizontal:5,vertical:2},onItemClick:{toggleDataSeries:!0},onItemHover:{highlightDataSeries:!0}},markers:{discrete:[],size:0,colors:void 0,strokeColors:"#fff",strokeWidth:2,strokeOpacity:.9,strokeDashArray:0,fillOpacity:1,shape:"circle",width:8,height:8,radius:2,offsetX:0,offsetY:0,onClick:void 0,onDblClick:void 0,showNullDataPoints:!0,hover:{size:void 0,sizeOffset:3}},noData:{text:void 0,align:"center",verticalAlign:"middle",offsetX:0,offsetY:0,style:{color:void 0,fontSize:"14px",fontFamily:void 0}},responsive:[],series:void 0,states:{normal:{filter:{type:"none",value:0}},hover:{filter:{type:"lighten",value:.1}},active:{allowMultipleDataPointsSelection:!1,filter:{type:"darken",value:.5}}},title:{text:void 0,align:"left",margin:5,offsetX:0,offsetY:0,floating:!1,style:{fontSize:"14px",fontWeight:900,fontFamily:void 0,color:void 0}},subtitle:{text:void 0,align:"left",margin:5,offsetX:0,offsetY:30,floating:!1,style:{fontSize:"12px",fontWeight:400,fontFamily:void 0,color:void 0}},stroke:{show:!0,curve:"smooth",lineCap:"butt",width:2,colors:void 0,dashArray:0},tooltip:{enabled:!0,enabledOnSeries:void 0,shared:!0,followCursor:!1,intersect:!1,inverseOrder:!1,custom:void 0,fillSeriesColor:!1,theme:"light",style:{fontSize:"12px",fontFamily:void 0},onDatasetHover:{highlightDataSeries:!1},x:{show:!0,format:"dd MMM",formatter:void 0},y:{formatter:void 0,title:{formatter:function(e){return e?e+": ":""}}},z:{formatter:void 0,title:"Size: "},marker:{show:!0,fillColors:void 0},items:{display:"flex"},fixed:{enabled:!1,position:"topRight",offsetX:0,offsetY:0}},xaxis:{type:"category",categories:[],convertedCatToNumeric:!1,offsetX:0,offsetY:0,overwriteCategories:void 0,labels:{show:!0,rotate:-45,rotateAlways:!1,hideOverlappingLabels:!0,trim:!1,minHeight:void 0,maxHeight:120,showDuplicates:!0,style:{colors:[],fontSize:"12px",fontWeight:400,fontFamily:void 0,cssClass:""},offsetX:0,offsetY:0,format:void 0,formatter:void 0,datetimeUTC:!0,datetimeFormatter:{year:"yyyy",month:"MMM 'yy",day:"dd MMM",hour:"HH:mm",minute:"HH:mm:ss",second:"HH:mm:ss"}},axisBorder:{show:!0,color:"#e0e0e0",width:"100%",height:1,offsetX:0,offsetY:0},axisTicks:{show:!0,color:"#e0e0e0",height:6,offsetX:0,offsetY:0},tickAmount:void 0,tickPlacement:"on",min:void 0,max:void 0,range:void 0,floating:!1,decimalsInFloat:void 0,position:"bottom",title:{text:void 0,offsetX:0,offsetY:0,style:{color:void 0,fontSize:"12px",fontWeight:900,fontFamily:void 0,cssClass:""}},crosshairs:{show:!0,width:1,position:"back",opacity:.9,stroke:{color:"#b6b6b6",width:1,dashArray:3},fill:{type:"solid",color:"#B1B9C4",gradient:{colorFrom:"#D8E3F0",colorTo:"#BED1E6",stops:[0,100],opacityFrom:.4,opacityTo:.5}},dropShadow:{enabled:!1,left:0,top:0,blur:1,opacity:.4}},tooltip:{enabled:!0,offsetY:0,formatter:void 0,style:{fontSize:"12px",fontFamily:void 0}}},yaxis:this.yAxis,theme:{mode:"light",palette:"palette1",monochrome:{enabled:!1,color:"#008FFB",shadeTo:"light",shadeIntensity:.65}}}}}]),e}(),L=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.graphics=new w(this.ctx),this.w.globals.isBarHorizontal&&(this.invertAxis=!0),this.helpers=new k(this),this.xAxisAnnotations=new S(this),this.yAxisAnnotations=new C(this),this.pointsAnnotations=new E(this),this.w.globals.isBarHorizontal&&this.w.config.yaxis[0].reversed&&(this.inversedReversedAxis=!0),this.xDivision=this.w.globals.gridWidth/this.w.globals.dataPoints}return c(e,[{key:"drawAxesAnnotations",value:function(){var e=this.w;if(e.globals.axisCharts){for(var t=this.yAxisAnnotations.drawYAxisAnnotations(),n=this.xAxisAnnotations.drawXAxisAnnotations(),i=this.pointsAnnotations.drawPointAnnotations(),r=e.config.chart.animations.enabled,a=[t,n,i],o=[n.node,t.node,i.node],s=0;s<3;s++)e.globals.dom.elGraphical.add(a[s]),!r||e.globals.resized||e.globals.dataChanged||"scatter"!==e.config.chart.type&&"bubble"!==e.config.chart.type&&e.globals.dataPoints>1&&o[s].classList.add("apexcharts-element-hidden"),e.globals.delayedElements.push({el:o[s],index:0});this.helpers.annotationsBackground()}}},{key:"drawImageAnnos",value:function(){var e=this;this.w.config.annotations.images.map((function(t,n){e.addImage(t,n)}))}},{key:"drawTextAnnos",value:function(){var e=this;this.w.config.annotations.texts.map((function(t,n){e.addText(t,n)}))}},{key:"addXaxisAnnotation",value:function(e,t,n){this.xAxisAnnotations.addXaxisAnnotation(e,t,n)}},{key:"addYaxisAnnotation",value:function(e,t,n){this.yAxisAnnotations.addYaxisAnnotation(e,t,n)}},{key:"addPointAnnotation",value:function(e,t,n){this.pointsAnnotations.addPointAnnotation(e,t,n)}},{key:"addText",value:function(e,t){var n=e.x,i=e.y,r=e.text,a=e.textAnchor,o=e.foreColor,s=e.fontSize,l=e.fontFamily,c=e.fontWeight,u=e.cssClass,h=e.backgroundColor,d=e.borderWidth,f=e.strokeDashArray,p=e.borderRadius,g=e.borderColor,m=e.appendTo,v=void 0===m?".apexcharts-annotations":m,b=e.paddingLeft,x=void 0===b?4:b,y=e.paddingRight,w=void 0===y?4:y,k=e.paddingBottom,S=void 0===k?2:k,A=e.paddingTop,C=void 0===A?2:A,E=this.w,T=this.graphics.drawText({x:n,y:i,text:r,textAnchor:a||"start",fontSize:s||"12px",fontWeight:c||"regular",fontFamily:l||E.config.chart.fontFamily,foreColor:o||E.config.chart.foreColor,cssClass:u}),P=E.globals.dom.baseEl.querySelector(v);P&&P.appendChild(T.node);var L=T.bbox();if(r){var R=this.graphics.drawRect(L.x-x,L.y-C,L.width+x+w,L.height+S+C,p,h||"transparent",1,d,g,f);P.insertBefore(R.node,T.node)}}},{key:"addImage",value:function(e,t){var n=this.w,i=e.path,r=e.x,a=void 0===r?0:r,o=e.y,s=void 0===o?0:o,l=e.width,c=void 0===l?20:l,u=e.height,h=void 0===u?20:u,d=e.appendTo,f=void 0===d?".apexcharts-annotations":d,p=n.globals.dom.Paper.image(i);p.size(c,h).move(a,s);var g=n.globals.dom.baseEl.querySelector(f);return g&&g.appendChild(p.node),p}},{key:"addXaxisAnnotationExternal",value:function(e,t,n){return this.addAnnotationExternal({params:e,pushToMemory:t,context:n,type:"xaxis",contextMethod:n.addXaxisAnnotation}),n}},{key:"addYaxisAnnotationExternal",value:function(e,t,n){return this.addAnnotationExternal({params:e,pushToMemory:t,context:n,type:"yaxis",contextMethod:n.addYaxisAnnotation}),n}},{key:"addPointAnnotationExternal",value:function(e,t,n){return void 0===this.invertAxis&&(this.invertAxis=n.w.globals.isBarHorizontal),this.addAnnotationExternal({params:e,pushToMemory:t,context:n,type:"point",contextMethod:n.addPointAnnotation}),n}},{key:"addAnnotationExternal",value:function(e){var t=e.params,n=e.pushToMemory,i=e.context,r=e.type,a=e.contextMethod,o=i,s=o.w,l=s.globals.dom.baseEl.querySelector(".apexcharts-".concat(r,"-annotations")),c=l.childNodes.length+1,u=new P,h=Object.assign({},"xaxis"===r?u.xAxisAnnotation:"yaxis"===r?u.yAxisAnnotation:u.pointAnnotation),d=b.extend(h,t);switch(r){case"xaxis":this.addXaxisAnnotation(d,l,c);break;case"yaxis":this.addYaxisAnnotation(d,l,c);break;case"point":this.addPointAnnotation(d,l,c)}var f=s.globals.dom.baseEl.querySelector(".apexcharts-".concat(r,"-annotations .apexcharts-").concat(r,"-annotation-label[rel='").concat(c,"']")),p=this.helpers.addBackgroundToAnno(f,d);return p&&l.insertBefore(p.node,f),n&&s.globals.memory.methodsToExec.push({context:o,id:d.id?d.id:b.randomId(),method:a,label:"addAnnotation",params:t}),i}},{key:"clearAnnotations",value:function(e){var t=e.w,n=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");t.globals.memory.methodsToExec.map((function(e,n){"addText"!==e.label&&"addAnnotation"!==e.label||t.globals.memory.methodsToExec.splice(n,1)})),n=b.listToArray(n),Array.prototype.forEach.call(n,(function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}))}},{key:"removeAnnotation",value:function(e,t){var n=e.w,i=n.globals.dom.baseEl.querySelectorAll(".".concat(t));i&&(n.globals.memory.methodsToExec.map((function(e,i){e.id===t&&n.globals.memory.methodsToExec.splice(i,1)})),Array.prototype.forEach.call(i,(function(e){e.parentElement.removeChild(e)})))}}]),e}(),R=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.opts=null,this.seriesIndex=0}return c(e,[{key:"clippedImgArea",value:function(e){var t=this.w,n=t.config,i=parseInt(t.globals.gridWidth,10),r=parseInt(t.globals.gridHeight,10),a=i>r?i:r,o=e.image,s=0,l=0;void 0===e.width&&void 0===e.height?void 0!==n.fill.image.width&&void 0!==n.fill.image.height?(s=n.fill.image.width+1,l=n.fill.image.height):(s=a+1,l=a):(s=e.width,l=e.height);var c=document.createElementNS(t.globals.SVGNS,"pattern");w.setAttrs(c,{id:e.patternID,patternUnits:e.patternUnits?e.patternUnits:"userSpaceOnUse",width:s+"px",height:l+"px"});var u=document.createElementNS(t.globals.SVGNS,"image");c.appendChild(u),u.setAttributeNS(window.SVG.xlink,"href",o),w.setAttrs(u,{x:0,y:0,preserveAspectRatio:"none",width:s+"px",height:l+"px"}),u.style.opacity=e.opacity,t.globals.dom.elDefs.node.appendChild(c)}},{key:"getSeriesIndex",value:function(e){var t=this.w;return("bar"===t.config.chart.type||"rangeBar"===t.config.chart.type)&&t.config.plotOptions.bar.distributed||"heatmap"===t.config.chart.type||"treemap"===t.config.chart.type?this.seriesIndex=e.seriesNumber:this.seriesIndex=e.seriesNumber%t.globals.series.length,this.seriesIndex}},{key:"fillPath",value:function(e){var t=this.w;this.opts=e;var n,i,r,a=this.w.config;this.seriesIndex=this.getSeriesIndex(e);var o=this.getFillColors()[this.seriesIndex];void 0!==t.globals.seriesColors[this.seriesIndex]&&(o=t.globals.seriesColors[this.seriesIndex]),"function"==typeof o&&(o=o({seriesIndex:this.seriesIndex,dataPointIndex:e.dataPointIndex,value:e.value,w:t}));var s=this.getFillType(this.seriesIndex),l=Array.isArray(a.fill.opacity)?a.fill.opacity[this.seriesIndex]:a.fill.opacity;e.color&&(o=e.color);var c=o;if(-1===o.indexOf("rgb")?o.length<9&&(c=b.hexToRgba(o,l)):o.indexOf("rgba")>-1&&(l=b.getOpacityFromRGBA(o)),e.opacity&&(l=e.opacity),"pattern"===s&&(i=this.handlePatternFill(i,o,l,c)),"gradient"===s&&(r=this.handleGradientFill(o,l,this.seriesIndex)),"image"===s){var u=a.fill.image.src,h=e.patternID?e.patternID:"";this.clippedImgArea({opacity:l,image:Array.isArray(u)?e.seriesNumber<u.length?u[e.seriesNumber]:u[0]:u,width:e.width?e.width:void 0,height:e.height?e.height:void 0,patternUnits:e.patternUnits,patternID:"pattern".concat(t.globals.cuid).concat(e.seriesNumber+1).concat(h)}),n="url(#pattern".concat(t.globals.cuid).concat(e.seriesNumber+1).concat(h,")")}else n="gradient"===s?r:"pattern"===s?i:c;return e.solid&&(n=c),n}},{key:"getFillType",value:function(e){var t=this.w;return Array.isArray(t.config.fill.type)?t.config.fill.type[e]:t.config.fill.type}},{key:"getFillColors",value:function(){var e=this.w,t=e.config,n=this.opts,i=[];return e.globals.comboCharts?"line"===e.config.series[this.seriesIndex].type?Array.isArray(e.globals.stroke.colors)?i=e.globals.stroke.colors:i.push(e.globals.stroke.colors):Array.isArray(e.globals.fill.colors)?i=e.globals.fill.colors:i.push(e.globals.fill.colors):"line"===t.chart.type?Array.isArray(e.globals.stroke.colors)?i=e.globals.stroke.colors:i.push(e.globals.stroke.colors):Array.isArray(e.globals.fill.colors)?i=e.globals.fill.colors:i.push(e.globals.fill.colors),void 0!==n.fillColors&&(i=[],Array.isArray(n.fillColors)?i=n.fillColors.slice():i.push(n.fillColors)),i}},{key:"handlePatternFill",value:function(e,t,n,i){var r=this.w.config,a=this.opts,o=new w(this.ctx),s=void 0===r.fill.pattern.strokeWidth?Array.isArray(r.stroke.width)?r.stroke.width[this.seriesIndex]:r.stroke.width:Array.isArray(r.fill.pattern.strokeWidth)?r.fill.pattern.strokeWidth[this.seriesIndex]:r.fill.pattern.strokeWidth,l=t;return Array.isArray(r.fill.pattern.style)?void 0!==r.fill.pattern.style[a.seriesNumber]?o.drawPattern(r.fill.pattern.style[a.seriesNumber],r.fill.pattern.width,r.fill.pattern.height,l,s,n):i:o.drawPattern(r.fill.pattern.style,r.fill.pattern.width,r.fill.pattern.height,l,s,n)}},{key:"handleGradientFill",value:function(e,t,n){var i,r=this.w.config,a=this.opts,o=new w(this.ctx),s=new b,l=r.fill.gradient.type,c=e,u=void 0===r.fill.gradient.opacityFrom?t:Array.isArray(r.fill.gradient.opacityFrom)?r.fill.gradient.opacityFrom[n]:r.fill.gradient.opacityFrom;c.indexOf("rgba")>-1&&(u=b.getOpacityFromRGBA(c));var h=void 0===r.fill.gradient.opacityTo?t:Array.isArray(r.fill.gradient.opacityTo)?r.fill.gradient.opacityTo[n]:r.fill.gradient.opacityTo;if(void 0===r.fill.gradient.gradientToColors||0===r.fill.gradient.gradientToColors.length)i="dark"===r.fill.gradient.shade?s.shadeColor(-1*parseFloat(r.fill.gradient.shadeIntensity),e.indexOf("rgb")>-1?b.rgb2hex(e):e):s.shadeColor(parseFloat(r.fill.gradient.shadeIntensity),e.indexOf("rgb")>-1?b.rgb2hex(e):e);else if(r.fill.gradient.gradientToColors[a.seriesNumber]){var d=r.fill.gradient.gradientToColors[a.seriesNumber];i=d,d.indexOf("rgba")>-1&&(h=b.getOpacityFromRGBA(d))}else i=e;if(r.fill.gradient.inverseColors){var f=c;c=i,i=f}return c.indexOf("rgb")>-1&&(c=b.rgb2hex(c)),i.indexOf("rgb")>-1&&(i=b.rgb2hex(i)),o.drawGradient(l,c,i,u,h,a.size,r.fill.gradient.stops,r.fill.gradient.colorStops,n)}}]),e}(),M=function(){function e(t,n){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"setGlobalMarkerSize",value:function(){var e=this.w;if(e.globals.markers.size=Array.isArray(e.config.markers.size)?e.config.markers.size:[e.config.markers.size],e.globals.markers.size.length>0){if(e.globals.markers.size.length<e.globals.series.length+1)for(var t=0;t<=e.globals.series.length;t++)void 0===e.globals.markers.size[t]&&e.globals.markers.size.push(e.globals.markers.size[0])}else e.globals.markers.size=e.config.series.map((function(t){return e.config.markers.size}))}},{key:"plotChartMarkers",value:function(e,t,n,i){var r,a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=this.w,s=t,l=e,c=null,u=new w(this.ctx);if((o.globals.markers.size[t]>0||a)&&(c=u.group({class:a?"":"apexcharts-series-markers"})).attr("clip-path","url(#gridRectMarkerMask".concat(o.globals.cuid,")")),Array.isArray(l.x))for(var h=0;h<l.x.length;h++){var d=n;1===n&&0===h&&(d=0),1===n&&1===h&&(d=1);var f="apexcharts-marker";"line"!==o.config.chart.type&&"area"!==o.config.chart.type||o.globals.comboCharts||o.config.tooltip.intersect||(f+=" no-pointer-events");var p=Array.isArray(o.config.markers.size)?o.globals.markers.size[t]>0:o.config.markers.size>0;if(p||a){b.isNumber(l.y[h])?f+=" w".concat(b.randomId()):f="apexcharts-nullpoint";var g=this.getMarkerConfig({cssClass:f,seriesIndex:t,dataPointIndex:d});o.config.series[s].data[d]&&(o.config.series[s].data[d].fillColor&&(g.pointFillColor=o.config.series[s].data[d].fillColor),o.config.series[s].data[d].strokeColor&&(g.pointStrokeColor=o.config.series[s].data[d].strokeColor)),i&&(g.pSize=i),(r=u.drawMarker(l.x[h],l.y[h],g)).attr("rel",d),r.attr("j",d),r.attr("index",t),r.node.setAttribute("default-marker-size",g.pSize);var m=new y(this.ctx);m.setSelectionFilter(r,t,d),this.addEvents(r),c&&c.add(r)}else void 0===o.globals.pointsArray[t]&&(o.globals.pointsArray[t]=[]),o.globals.pointsArray[t].push([l.x[h],l.y[h]])}return c}},{key:"getMarkerConfig",value:function(e){var t=e.cssClass,n=e.seriesIndex,i=e.dataPointIndex,r=void 0===i?null:i,a=e.finishRadius,o=void 0===a?null:a,s=this.w,l=this.getMarkerStyle(n),c=s.globals.markers.size[n],u=s.config.markers;return null!==r&&u.discrete.length&&u.discrete.map((function(e){e.seriesIndex===n&&e.dataPointIndex===r&&(l.pointStrokeColor=e.strokeColor,l.pointFillColor=e.fillColor,c=e.size,l.pointShape=e.shape)})),{pSize:null===o?c:o,pRadius:u.radius,width:Array.isArray(u.width)?u.width[n]:u.width,height:Array.isArray(u.height)?u.height[n]:u.height,pointStrokeWidth:Array.isArray(u.strokeWidth)?u.strokeWidth[n]:u.strokeWidth,pointStrokeColor:l.pointStrokeColor,pointFillColor:l.pointFillColor,shape:l.pointShape||(Array.isArray(u.shape)?u.shape[n]:u.shape),class:t,pointStrokeOpacity:Array.isArray(u.strokeOpacity)?u.strokeOpacity[n]:u.strokeOpacity,pointStrokeDashArray:Array.isArray(u.strokeDashArray)?u.strokeDashArray[n]:u.strokeDashArray,pointFillOpacity:Array.isArray(u.fillOpacity)?u.fillOpacity[n]:u.fillOpacity,seriesIndex:n}}},{key:"addEvents",value:function(e){var t=this.w,n=new w(this.ctx);e.node.addEventListener("mouseenter",n.pathMouseEnter.bind(this.ctx,e)),e.node.addEventListener("mouseleave",n.pathMouseLeave.bind(this.ctx,e)),e.node.addEventListener("mousedown",n.pathMouseDown.bind(this.ctx,e)),e.node.addEventListener("click",t.config.markers.onClick),e.node.addEventListener("dblclick",t.config.markers.onDblClick),e.node.addEventListener("touchstart",n.pathMouseDown.bind(this.ctx,e),{passive:!0})}},{key:"getMarkerStyle",value:function(e){var t=this.w,n=t.globals.markers.colors,i=t.config.markers.strokeColor||t.config.markers.strokeColors;return{pointStrokeColor:Array.isArray(i)?i[e]:i,pointFillColor:Array.isArray(n)?n[e]:n}}}]),e}(),I=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled}return c(e,[{key:"draw",value:function(e,t,n){var i=this.w,r=new w(this.ctx),a=n.realIndex,o=n.pointsPos,s=n.zRatio,l=n.elParent,c=r.group({class:"apexcharts-series-markers apexcharts-series-".concat(i.config.chart.type)});if(c.attr("clip-path","url(#gridRectMarkerMask".concat(i.globals.cuid,")")),Array.isArray(o.x))for(var u=0;u<o.x.length;u++){var h=t+1,d=!0;0===t&&0===u&&(h=0),0===t&&1===u&&(h=1);var f=0,p=i.globals.markers.size[a];if(s!==1/0){p=i.globals.seriesZ[a][h]/s;var g=i.config.plotOptions.bubble;g.minBubbleRadius&&p<g.minBubbleRadius&&(p=g.minBubbleRadius),g.maxBubbleRadius&&p>g.maxBubbleRadius&&(p=g.maxBubbleRadius)}i.config.chart.animations.enabled||(f=p);var m=o.x[u],v=o.y[u];if(f=f||0,null!==v&&void 0!==i.globals.series[a][h]||(d=!1),d){var b=this.drawPoint(m,v,f,p,a,h,t);c.add(b)}l.add(c)}}},{key:"drawPoint",value:function(e,t,n,i,r,a,o){var s=this.w,l=r,c=new x(this.ctx),u=new y(this.ctx),h=new R(this.ctx),d=new M(this.ctx),f=new w(this.ctx),p=d.getMarkerConfig({cssClass:"apexcharts-marker",seriesIndex:l,dataPointIndex:a,finishRadius:"bubble"===s.config.chart.type||s.globals.comboCharts&&s.config.series[r]&&"bubble"===s.config.series[r].type?i:null});i=p.pSize;var g,m=h.fillPath({seriesNumber:r,dataPointIndex:a,color:p.pointFillColor,patternUnits:"objectBoundingBox",value:s.globals.series[r][o]});if("circle"===p.shape?g=f.drawCircle(n):"square"!==p.shape&&"rect"!==p.shape||(g=f.drawRect(0,0,p.width-p.pointStrokeWidth/2,p.height-p.pointStrokeWidth/2,p.pRadius)),s.config.series[l].data[a]&&s.config.series[l].data[a].fillColor&&(m=s.config.series[l].data[a].fillColor),g.attr({x:e-p.width/2-p.pointStrokeWidth/2,y:t-p.height/2-p.pointStrokeWidth/2,cx:e,cy:t,fill:m,"fill-opacity":p.pointFillOpacity,stroke:p.pointStrokeColor,r:i,"stroke-width":p.pointStrokeWidth,"stroke-dasharray":p.pointStrokeDashArray,"stroke-opacity":p.pointStrokeOpacity}),s.config.chart.dropShadow.enabled){var v=s.config.chart.dropShadow;u.dropShadow(g,v,r)}if(!this.initialAnim||s.globals.dataChanged||s.globals.resized)s.globals.animationEnded=!0;else{var b=s.config.chart.animations.speed;c.animateMarker(g,0,"circle"===p.shape?i:{width:p.width,height:p.height},b,s.globals.easing,(function(){window.setTimeout((function(){c.animationCompleted(g)}),100)}))}if(s.globals.dataChanged&&"circle"===p.shape)if(this.dynamicAnim){var k,S,A,C,E=s.config.chart.animations.dynamicAnimation.speed;null!=(C=s.globals.previousPaths[r]&&s.globals.previousPaths[r][o])&&(k=C.x,S=C.y,A=void 0!==C.r?C.r:i);for(var T=0;T<s.globals.collapsedSeries.length;T++)s.globals.collapsedSeries[T].index===r&&(E=1,i=0);0===e&&0===t&&(i=0),c.animateCircle(g,{cx:k,cy:S,r:A},{cx:e,cy:t,r:i},E,s.globals.easing)}else g.attr({r:i});return g.attr({rel:a,j:a,index:r,"default-marker-size":i}),u.setSelectionFilter(g,r,a),d.addEvents(g),g.node.classList.add("apexcharts-marker"),g}},{key:"centerTextInBubble",value:function(e){var t=this.w;return{y:e+=parseInt(t.config.dataLabels.style.fontSize,10)/4}}}]),e}(),O=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"dataLabelsCorrection",value:function(e,t,n,i,r,a,o){var s=this.w,l=!1,c=new w(this.ctx).getTextRects(n,o),u=c.width,h=c.height;t<0&&(t=0),t>s.globals.gridHeight+h&&(t=s.globals.gridHeight+h/2),void 0===s.globals.dataLabelsRects[i]&&(s.globals.dataLabelsRects[i]=[]),s.globals.dataLabelsRects[i].push({x:e,y:t,width:u,height:h});var d=s.globals.dataLabelsRects[i].length-2,f=void 0!==s.globals.lastDrawnDataLabelsIndexes[i]?s.globals.lastDrawnDataLabelsIndexes[i][s.globals.lastDrawnDataLabelsIndexes[i].length-1]:0;if(void 0!==s.globals.dataLabelsRects[i][d]){var p=s.globals.dataLabelsRects[i][f];(e>p.x+p.width+2||t>p.y+p.height+2||e+u<p.x)&&(l=!0)}return(0===r||a)&&(l=!0),{x:e,y:t,textRects:c,drawnextLabel:l}}},{key:"drawDataLabel",value:function(e,t,n){var i=this,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:2,a=this.w,o=new w(this.ctx),s=a.config.dataLabels,l=0,c=0,u=n,h=null;if(!s.enabled||!Array.isArray(e.x))return h;h=o.group({class:"apexcharts-data-labels"});for(var d=0;d<e.x.length;d++)if(l=e.x[d]+s.offsetX,c=e.y[d]+s.offsetY+r,!isNaN(l)){1===n&&0===d&&(u=0),1===n&&1===d&&(u=1);var f=a.globals.series[t][u],p="",g=function(e){return a.config.dataLabels.formatter(e,{ctx:i.ctx,seriesIndex:t,dataPointIndex:u,w:a})};if("bubble"===a.config.chart.type){p=g(f=a.globals.seriesZ[t][u]),c=e.y[d];var m=new I(this.ctx),v=m.centerTextInBubble(c,t,u);c=v.y}else void 0!==f&&(p=g(f));this.plotDataLabelsText({x:l,y:c,text:p,i:t,j:u,parent:h,offsetCorrection:!0,dataLabelsConfig:a.config.dataLabels})}return h}},{key:"plotDataLabelsText",value:function(e){var t=this.w,n=new w(this.ctx),i=e.x,r=e.y,a=e.i,o=e.j,s=e.text,l=e.textAnchor,c=e.fontSize,u=e.parent,h=e.dataLabelsConfig,d=e.color,f=e.alwaysDrawDataLabel,p=e.offsetCorrection;if(!(Array.isArray(t.config.dataLabels.enabledOnSeries)&&t.config.dataLabels.enabledOnSeries.indexOf(a)<0)){var g={x:i,y:r,drawnextLabel:!0,textRects:null};p&&(g=this.dataLabelsCorrection(i,r,s,a,o,f,parseInt(h.style.fontSize,10))),t.globals.zoomed||(i=g.x,r=g.y),g.textRects&&(i<-10-g.textRects.width||i>t.globals.gridWidth+g.textRects.width+10)&&(s="");var m=t.globals.dataLabels.style.colors[a];(("bar"===t.config.chart.type||"rangeBar"===t.config.chart.type)&&t.config.plotOptions.bar.distributed||t.config.dataLabels.distributed)&&(m=t.globals.dataLabels.style.colors[o]),"function"==typeof m&&(m=m({series:t.globals.series,seriesIndex:a,dataPointIndex:o,w:t})),d&&(m=d);var v=h.offsetX,b=h.offsetY;if("bar"!==t.config.chart.type&&"rangeBar"!==t.config.chart.type||(v=0,b=0),g.drawnextLabel){var x=n.drawText({width:100,height:parseInt(h.style.fontSize,10),x:i+v,y:r+b,foreColor:m,textAnchor:l||h.textAnchor,text:s,fontSize:c||h.style.fontSize,fontFamily:h.style.fontFamily,fontWeight:h.style.fontWeight||"normal"});if(x.attr({class:"apexcharts-datalabel",cx:i,cy:r}),h.dropShadow.enabled){var k=h.dropShadow;new y(this.ctx).dropShadow(x,k)}u.add(x),void 0===t.globals.lastDrawnDataLabelsIndexes[a]&&(t.globals.lastDrawnDataLabelsIndexes[a]=[]),t.globals.lastDrawnDataLabelsIndexes[a].push(o)}}}},{key:"addBackgroundToDataLabel",value:function(e,t){var n=this.w,i=n.config.dataLabels.background,r=i.padding,a=i.padding/2,o=t.width,s=t.height,l=new w(this.ctx).drawRect(t.x-r,t.y-a/2,o+2*r,s+a,i.borderRadius,"transparent"===n.config.chart.background?"#fff":n.config.chart.background,i.opacity,i.borderWidth,i.borderColor);return i.dropShadow.enabled&&new y(this.ctx).dropShadow(l,i.dropShadow),l}},{key:"dataLabelsBackground",value:function(){var e=this.w;if("bubble"!==e.config.chart.type)for(var t=e.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"),n=0;n<t.length;n++){var i=t[n],r=i.getBBox(),a=null;if(r.width&&r.height&&(a=this.addBackgroundToDataLabel(i,r)),a){i.parentNode.insertBefore(a.node,i);var o=i.getAttribute("fill");!e.config.chart.animations.enabled||e.globals.resized||e.globals.dataChanged?a.attr({fill:o}):a.animate().attr({fill:o}),i.setAttribute("fill",e.config.dataLabels.background.foreColor)}}}},{key:"bringForward",value:function(){for(var e=this.w,t=e.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"),n=e.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"),i=0;i<t.length;i++)n&&n.insertBefore(t[i],n.nextSibling)}}]),e}(),_=function(){function e(t){s(this,e),this.w=t.w,this.barCtx=t}return c(e,[{key:"handleBarDataLabels",value:function(e){var t=e.x,n=e.y,i=e.y1,r=e.y2,a=e.i,o=e.j,s=e.realIndex,l=e.series,c=e.barHeight,u=e.barWidth,h=e.barYPosition,d=e.visibleSeries,f=e.renderedPath,p=this.w,g=new w(this.barCtx.ctx),m=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[s]:this.barCtx.strokeWidth,v=t+parseFloat(u*d),b=n+parseFloat(c*d);p.globals.isXNumeric&&!p.globals.isBarHorizontal&&(v=t+parseFloat(u*(d+1)),b=n+parseFloat(c*(d+1))-m);var x,y=t,k=n,S=p.config.dataLabels,A=this.barCtx.barOptions.dataLabels;void 0!==h&&this.barCtx.isRangeBar&&(b=h,k=h);var C=S.offsetX,E=S.offsetY,T={width:0,height:0};if(p.config.dataLabels.enabled){var P=this.barCtx.series[a][o];T=g.getTextRects(p.globals.yLabelFormatters[0](P),parseFloat(S.style.fontSize))}var L={x:t,y:n,i:a,j:o,renderedPath:f,bcx:v,bcy:b,barHeight:c,barWidth:u,textRects:T,strokeWidth:m,dataLabelsX:y,dataLabelsY:k,barDataLabelsConfig:A,offX:C,offY:E};return x=this.barCtx.isHorizontal?this.calculateBarsDataLabelsPosition(L):this.calculateColumnsDataLabelsPosition(L),f.attr({cy:x.bcy,cx:x.bcx,j:o,val:l[a][o],barHeight:c,barWidth:u}),this.drawCalculatedDataLabels({x:x.dataLabelsX,y:x.dataLabelsY,val:this.barCtx.isRangeBar?[i,r]:l[a][o],i:s,j:o,barWidth:u,barHeight:c,textRects:T,dataLabelsConfig:S})}},{key:"calculateColumnsDataLabelsPosition",value:function(e){var t,n=this.w,i=e.i,r=e.j,a=e.y,o=e.bcx,s=e.barWidth,l=e.barHeight,c=e.textRects,u=e.dataLabelsY,h=e.barDataLabelsConfig,d=e.strokeWidth,f=e.offX,p=e.offY;l=Math.abs(l);var g="vertical"===n.config.plotOptions.bar.dataLabels.orientation;o-=d/2;var m=n.globals.gridWidth/n.globals.dataPoints;t=n.globals.isXNumeric?o-s/2+f:o-m+s/2+f,g&&(t=t+c.height/2-d/2-2);var v=this.barCtx.series[i][r]<0,b=a;switch(this.barCtx.isReversed&&(b=a-l+(v?2*l:0),a-=l),h.position){case"center":u=g?v?b+l/2+p:b+l/2-p:v?b-l/2+c.height/2+p:b+l/2+c.height/2-p;break;case"bottom":u=g?v?b+l+p:b+l-p:v?b-l+c.height+d+p:b+l-c.height/2+d-p;break;case"top":u=g?v?b+p:b-p:v?b-c.height/2-p:b+c.height+p}return n.config.chart.stacked||(u<0?u=0+d:u+c.height/3>n.globals.gridHeight&&(u=n.globals.gridHeight-d)),{bcx:o,bcy:a,dataLabelsX:t,dataLabelsY:u}}},{key:"calculateBarsDataLabelsPosition",value:function(e){var t=this.w,n=e.x,i=e.i,r=e.j,a=e.bcy,o=e.barHeight,s=e.barWidth,l=e.textRects,c=e.dataLabelsX,u=e.strokeWidth,h=e.barDataLabelsConfig,d=e.offX,f=e.offY,p=t.globals.gridHeight/t.globals.dataPoints;s=Math.abs(s);var g=a-(this.barCtx.isRangeBar?0:p)+o/2+l.height/2+f-3,m=this.barCtx.series[i][r]<0,v=n;switch(this.barCtx.isReversed&&(v=n+s-(m?2*s:0),n=t.globals.gridWidth-s),h.position){case"center":c=m?v+s/2-d:Math.max(l.width/2,v-s/2)+d;break;case"bottom":c=m?v+s-u-Math.round(l.width/2)-d:v-s+u+Math.round(l.width/2)+d;break;case"top":c=m?v-u+Math.round(l.width/2)-d:v-u-Math.round(l.width/2)+d}return t.config.chart.stacked||(c<0?c=c+l.width+u:c+l.width/2>t.globals.gridWidth&&(c=t.globals.gridWidth-l.width-u)),{bcx:n,bcy:a,dataLabelsX:c,dataLabelsY:g}}},{key:"drawCalculatedDataLabels",value:function(e){var t=e.x,n=e.y,i=e.val,r=e.i,o=e.j,s=e.textRects,l=e.barHeight,c=e.barWidth,u=e.dataLabelsConfig,h=this.w,d="rotate(0)";"vertical"===h.config.plotOptions.bar.dataLabels.orientation&&(d="rotate(-90, ".concat(t,", ").concat(n,")"));var f=new O(this.barCtx.ctx),p=new w(this.barCtx.ctx),g=u.formatter,m=null,v=h.globals.collapsedSeriesIndices.indexOf(r)>-1;if(u.enabled&&!v){m=p.group({class:"apexcharts-data-labels",transform:d});var b="";void 0!==i&&(b=g(i,{seriesIndex:r,dataPointIndex:o,w:h}));var x=h.globals.series[r][o]<0,y=h.config.plotOptions.bar.dataLabels.position;"vertical"===h.config.plotOptions.bar.dataLabels.orientation&&("top"===y&&(u.textAnchor=x?"end":"start"),"center"===y&&(u.textAnchor="middle"),"bottom"===y&&(u.textAnchor=x?"end":"start")),this.barCtx.isRangeBar&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels&&c<p.getTextRects(b,parseFloat(u.style.fontSize)).width&&(b=""),h.config.chart.stacked&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels&&(this.barCtx.isHorizontal?s.width/1.6>Math.abs(c)&&(b=""):s.height/1.6>Math.abs(l)&&(b=""));var k=a({},u);this.barCtx.isHorizontal&&i<0&&("start"===u.textAnchor?k.textAnchor="end":"end"===u.textAnchor&&(k.textAnchor="start")),f.plotDataLabelsText({x:t,y:n,text:b,i:r,j:o,parent:m,dataLabelsConfig:k,alwaysDrawDataLabel:!0,offsetCorrection:!0})}return m}}]),e}(),N=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.legendInactiveClass="legend-mouseover-inactive"}return c(e,[{key:"getAllSeriesEls",value:function(){return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series")}},{key:"getSeriesByName",value:function(e){return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(b.escapeString(e),"']"))}},{key:"isSeriesHidden",value:function(e){var t=this.getSeriesByName(e),n=parseInt(t.getAttribute("data:realIndex"),10);return{isHidden:t.classList.contains("apexcharts-series-collapsed"),realIndex:n}}},{key:"addCollapsedClassToSeries",value:function(e,t){var n=this.w;function i(n){for(var i=0;i<n.length;i++)n[i].index===t&&e.node.classList.add("apexcharts-series-collapsed")}i(n.globals.collapsedSeries),i(n.globals.ancillaryCollapsedSeries)}},{key:"toggleSeries",value:function(e){var t=this.isSeriesHidden(e);return this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,t.isHidden),t.isHidden}},{key:"showSeries",value:function(e){var t=this.isSeriesHidden(e);t.isHidden&&this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,!0)}},{key:"hideSeries",value:function(e){var t=this.isSeriesHidden(e);t.isHidden||this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,!1)}},{key:"resetSeries",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=this.w,r=b.clone(i.globals.initialSeries);i.globals.previousPaths=[],n?(i.globals.collapsedSeries=[],i.globals.ancillaryCollapsedSeries=[],i.globals.collapsedSeriesIndices=[],i.globals.ancillaryCollapsedSeriesIndices=[]):r=this.emptyCollapsedSeries(r),i.config.series=r,e&&(t&&(i.globals.zoomed=!1,this.ctx.updateHelpers.revertDefaultAxisMinMax()),this.ctx.updateHelpers._updateSeries(r,i.config.chart.animations.dynamicAnimation.enabled))}},{key:"emptyCollapsedSeries",value:function(e){for(var t=this.w,n=0;n<e.length;n++)t.globals.collapsedSeriesIndices.indexOf(n)>-1&&(e[n].data=[]);return e}},{key:"toggleSeriesOnHover",value:function(e,t){var n=this.w;t||(t=e.target);var i=n.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");if("mousemove"===e.type){var r=parseInt(t.getAttribute("rel"),10)-1,a=null,o=null;n.globals.axisCharts||"radialBar"===n.config.chart.type?n.globals.axisCharts?(a=n.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(r,"']")),o=n.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(r,"']"))):a=n.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(r+1,"']")):a=n.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(r+1,"'] path"));for(var s=0;s<i.length;s++)i[s].classList.add(this.legendInactiveClass);null!==a&&(n.globals.axisCharts||a.parentNode.classList.remove(this.legendInactiveClass),a.classList.remove(this.legendInactiveClass),null!==o&&o.classList.remove(this.legendInactiveClass))}else if("mouseout"===e.type)for(var l=0;l<i.length;l++)i[l].classList.remove(this.legendInactiveClass)}},{key:"highlightRangeInSeries",value:function(e,t){var n=this,i=this.w,r=i.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"),a=function(e){for(var t=0;t<r.length;t++)r[t].classList[e](n.legendInactiveClass)};if("mousemove"===e.type){var o=parseInt(t.getAttribute("rel"),10)-1;a("add"),function(e){for(var t=0;t<r.length;t++){var i=parseInt(r[t].getAttribute("val"),10);i>=e.from&&i<=e.to&&r[t].classList.remove(n.legendInactiveClass)}}(i.config.plotOptions.heatmap.colorScale.ranges[o])}else"mouseout"===e.type&&a("remove")}},{key:"getActiveConfigSeriesIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"asc",n=this.w,i=0;if(n.config.series.length>1)for(var r=n.config.series.map((function(t,i){var r=!1;return e&&(r="bar"===n.config.series[i].type||"column"===n.config.series[i].type),t.data&&t.data.length>0&&!r?i:-1})),a="asc"===t?0:r.length-1;"asc"===t?a<r.length:a>=0;"asc"===t?a++:a--)if(-1!==r[a]){i=r[a];break}return i}},{key:"getPreviousPaths",value:function(){var e=this.w;function t(t,n,i){for(var r=t[n].childNodes,a={type:i,paths:[],realIndex:t[n].getAttribute("data:realIndex")},o=0;o<r.length;o++)if(r[o].hasAttribute("pathTo")){var s=r[o].getAttribute("pathTo");a.paths.push({d:s})}e.globals.previousPaths.push(a)}e.globals.previousPaths=[],["line","area","bar","rangebar","candlestick","radar"].forEach((function(n){for(var i,r=(i=n,e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(i,"-series .apexcharts-series"))),a=0;a<r.length;a++)t(r,a,n)})),this.handlePrevBubbleScatterPaths("bubble"),this.handlePrevBubbleScatterPaths("scatter");var n=e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e.config.chart.type," .apexcharts-series"));if(n.length>0)for(var i=function(t){for(var n=e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e.config.chart.type," .apexcharts-series[data\\:realIndex='").concat(t,"'] rect")),i=[],r=function(e){var t=function(t){return n[e].getAttribute(t)},r={x:parseFloat(t("x")),y:parseFloat(t("y")),width:parseFloat(t("width")),height:parseFloat(t("height"))};i.push({rect:r,color:n[e].getAttribute("color")})},a=0;a<n.length;a++)r(a);e.globals.previousPaths.push(i)},r=0;r<n.length;r++)i(r);e.globals.axisCharts||(e.globals.previousPaths=e.globals.series)}},{key:"handlePrevBubbleScatterPaths",value:function(e){var t=this.w,n=t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e,"-series .apexcharts-series"));if(n.length>0)for(var i=0;i<n.length;i++){for(var r=t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e,"-series .apexcharts-series[data\\:realIndex='").concat(i,"'] circle")),a=[],o=0;o<r.length;o++)a.push({x:r[o].getAttribute("cx"),y:r[o].getAttribute("cy"),r:r[o].getAttribute("r")});t.globals.previousPaths.push(a)}}},{key:"clearPreviousPaths",value:function(){var e=this.w;e.globals.previousPaths=[],e.globals.allSeriesCollapsed=!1}},{key:"handleNoData",value:function(){var e=this.w,t=e.config.noData,n=new w(this.ctx),i=e.globals.svgWidth/2,r=e.globals.svgHeight/2,a="middle";if(e.globals.noData=!0,e.globals.animationEnded=!0,"left"===t.align?(i=10,a="start"):"right"===t.align&&(i=e.globals.svgWidth-10,a="end"),"top"===t.verticalAlign?r=50:"bottom"===t.verticalAlign&&(r=e.globals.svgHeight-50),i+=t.offsetX,r=r+parseInt(t.style.fontSize,10)+2+t.offsetY,void 0!==t.text&&""!==t.text){var o=n.drawText({x:i,y:r,text:t.text,textAnchor:a,fontSize:t.style.fontSize,fontFamily:t.style.fontFamily,foreColor:t.style.color,opacity:1,class:"apexcharts-text-nodata"});e.globals.dom.Paper.add(o)}}},{key:"setNullSeriesToZeroValues",value:function(e){for(var t=this.w,n=0;n<e.length;n++)if(0===e[n].length)for(var i=0;i<e[t.globals.maxValsInArrayIndex].length;i++)e[n].push(0);return e}},{key:"hasAllSeriesEqualX",value:function(){for(var e=!0,t=this.w,n=this.filteredSeriesX(),i=0;i<n.length-1;i++)if(n[i][0]!==n[i+1][0]){e=!1;break}return t.globals.allSeriesHasEqualX=e,e}},{key:"filteredSeriesX",value:function(){return this.w.globals.seriesX.map((function(e){return e.length>0?e:[]}))}}]),e}(),z=function(){function e(t){s(this,e),this.w=t.w,this.barCtx=t}return c(e,[{key:"initVariables",value:function(e){var t=this.w;this.barCtx.series=e,this.barCtx.totalItems=0,this.barCtx.seriesLen=0,this.barCtx.visibleI=-1,this.barCtx.visibleItems=1;for(var n=0;n<e.length;n++)if(e[n].length>0&&(this.barCtx.seriesLen=this.barCtx.seriesLen+1,this.barCtx.totalItems+=e[n].length),t.globals.isXNumeric)for(var i=0;i<e[n].length;i++)t.globals.seriesX[n][i]>t.globals.minX&&t.globals.seriesX[n][i]<t.globals.maxX&&this.barCtx.visibleItems++;else this.barCtx.visibleItems=t.globals.dataPoints;0===this.barCtx.seriesLen&&(this.barCtx.seriesLen=1),this.barCtx.zeroSerieses=[],this.barCtx.radiusOnSeriesNumber=e.length-1,t.globals.comboCharts||this.checkZeroSeries({series:e})}},{key:"initialPositions",value:function(){var e,t,n,i,r,a,o,s,l=this.w,c=l.globals.dataPoints;this.barCtx.isRangeBar&&(c=l.globals.labels.length);var u=this.barCtx.seriesLen;if(l.config.plotOptions.bar.rangeBarGroupRows&&(u=1),this.barCtx.isHorizontal)r=(n=l.globals.gridHeight/c)/u,l.globals.isXNumeric&&(r=(n=l.globals.gridHeight/this.barCtx.totalItems)/this.barCtx.seriesLen),r=r*parseInt(this.barCtx.barOptions.barHeight,10)/100,s=this.barCtx.baseLineInvertedY+l.globals.padHorizontal+(this.barCtx.isReversed?l.globals.gridWidth:0)-(this.barCtx.isReversed?2*this.barCtx.baseLineInvertedY:0),t=(n-r*this.barCtx.seriesLen)/2;else{if(i=l.globals.gridWidth/this.barCtx.visibleItems,l.config.xaxis.convertedCatToNumeric&&(i=l.globals.gridWidth/l.globals.dataPoints),a=i/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100,l.globals.isXNumeric){var h=this.barCtx.xRatio;l.config.xaxis.convertedCatToNumeric&&(h=this.barCtx.initialXRatio),l.globals.minXDiff&&.5!==l.globals.minXDiff&&l.globals.minXDiff/h>0&&(i=l.globals.minXDiff/h),(a=i/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100)<1&&(a=1)}o=l.globals.gridHeight-this.barCtx.baseLineY[this.barCtx.yaxisIndex]-(this.barCtx.isReversed?l.globals.gridHeight:0)+(this.barCtx.isReversed?2*this.barCtx.baseLineY[this.barCtx.yaxisIndex]:0),e=l.globals.padHorizontal+(i-a*this.barCtx.seriesLen)/2}return{x:e,y:t,yDivision:n,xDivision:i,barHeight:r,barWidth:a,zeroH:o,zeroW:s}}},{key:"getPathFillColor",value:function(e,t,n,i){var r=this.w,a=new R(this.barCtx.ctx),o=null,s=this.barCtx.barOptions.distributed?n:t;return this.barCtx.barOptions.colors.ranges.length>0&&this.barCtx.barOptions.colors.ranges.map((function(i){e[t][n]>=i.from&&e[t][n]<=i.to&&(o=i.color)})),r.config.series[t].data[n]&&r.config.series[t].data[n].fillColor&&(o=r.config.series[t].data[n].fillColor),a.fillPath({seriesNumber:this.barCtx.barOptions.distributed?s:i,dataPointIndex:n,color:o,value:e[t][n]})}},{key:"getStrokeWidth",value:function(e,t,n){var i=0,r=this.w;return void 0===this.barCtx.series[e][t]||null===this.barCtx.series[e][t]?this.barCtx.isNullValue=!0:this.barCtx.isNullValue=!1,r.config.stroke.show&&(this.barCtx.isNullValue||(i=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[n]:this.barCtx.strokeWidth)),i}},{key:"barBackground",value:function(e){var t=e.j,n=e.i,i=e.x1,r=e.x2,a=e.y1,o=e.y2,s=e.elSeries,l=this.w,c=new w(this.barCtx.ctx),u=new N(this.barCtx.ctx).getActiveConfigSeriesIndex();if(this.barCtx.barOptions.colors.backgroundBarColors.length>0&&u===n){t>=this.barCtx.barOptions.colors.backgroundBarColors.length&&(t-=this.barCtx.barOptions.colors.backgroundBarColors.length);var h=this.barCtx.barOptions.colors.backgroundBarColors[t],d=c.drawRect(void 0!==i?i:0,void 0!==a?a:0,void 0!==r?r:l.globals.gridWidth,void 0!==o?o:l.globals.gridHeight,this.barCtx.barOptions.colors.backgroundBarRadius,h,this.barCtx.barOptions.colors.backgroundBarOpacity);s.add(d),d.node.classList.add("apexcharts-backgroundBar")}}},{key:"getColumnPaths",value:function(e){var t=e.barWidth,n=e.barXPosition,i=e.yRatio,r=e.y1,a=e.y2,o=e.strokeWidth,s=e.series,l=e.realIndex,c=e.i,u=e.j,h=e.w,d=new w(this.barCtx.ctx);(o=Array.isArray(o)?o[l]:o)||(o=0);var f={barWidth:t,strokeWidth:o,yRatio:i,barXPosition:n,y1:r,y2:a},p=this.getRoundedBars(h,f,s,c,u),g=n,m=n+t,v=d.move(g,r),b=d.move(g,r),x=d.line(m-o,r);return h.globals.previousPaths.length>0&&(b=this.barCtx.getPreviousPath(l,u,!1)),v=v+d.line(g,p.y2)+p.pathWithRadius+d.line(m-o,p.y2)+x+x+"z",b=b+d.line(g,r)+x+x+x+x+x+d.line(g,r),h.config.chart.stacked&&(this.barCtx.yArrj.push(p.y2),this.barCtx.yArrjF.push(Math.abs(r-p.y2)),this.barCtx.yArrjVal.push(this.barCtx.series[c][u])),{pathTo:v,pathFrom:b}}},{key:"getBarpaths",value:function(e){var t=e.barYPosition,n=e.barHeight,i=e.x1,r=e.x2,a=e.strokeWidth,o=e.series,s=e.realIndex,l=e.i,c=e.j,u=e.w,h=new w(this.barCtx.ctx);(a=Array.isArray(a)?a[s]:a)||(a=0);var d={barHeight:n,strokeWidth:a,barYPosition:t,x2:r,x1:i},f=this.getRoundedBars(u,d,o,l,c),p=h.move(i,t),g=h.move(i,t);u.globals.previousPaths.length>0&&(g=this.barCtx.getPreviousPath(s,c,!1));var m=t,v=t+n,b=h.line(i,v-a);return p=p+h.line(f.x2,m)+f.pathWithRadius+h.line(f.x2,v-a)+b+b+"z",g=g+h.line(i,m)+b+b+b+b+b+h.line(i,m),u.config.chart.stacked&&(this.barCtx.xArrj.push(f.x2),this.barCtx.xArrjF.push(Math.abs(i-f.x2)),this.barCtx.xArrjVal.push(this.barCtx.series[l][c])),{pathTo:p,pathFrom:g}}},{key:"getRoundedBars",value:function(e,t,n,i,r){var a=new w(this.barCtx.ctx),o=0,s=e.config.plotOptions.bar.borderRadius,l=Array.isArray(s);if(o=l?s[i>s.length-1?s.length-1:i]:s,e.config.chart.stacked&&n.length>1&&i!==this.barCtx.radiusOnSeriesNumber&&!l&&(o=0),this.barCtx.isHorizontal){var c="",u=t.x2;if(Math.abs(t.x1-t.x2)<o&&(o=Math.abs(t.x1-t.x2)),void 0!==n[i][r]||null!==n[i][r]){var h=this.barCtx.isReversed?n[i][r]>0:n[i][r]<0;h&&(o*=-1),u-=o,c=a.quadraticCurve(u+o,t.barYPosition,u+o,t.barYPosition+(h?-1*o:o))+a.line(u+o,t.barYPosition+t.barHeight-t.strokeWidth-(h?-1*o:o))+a.quadraticCurve(u+o,t.barYPosition+t.barHeight-t.strokeWidth,u,t.barYPosition+t.barHeight-t.strokeWidth)}return{pathWithRadius:c,x2:u}}var d="",f=t.y2;if(Math.abs(t.y1-t.y2)<o&&(o=Math.abs(t.y1-t.y2)),void 0!==n[i][r]||null!==n[i][r]){var p=n[i][r]<0;p&&(o*=-1),f+=o,d=a.quadraticCurve(t.barXPosition,f-o,t.barXPosition+(p?-1*o:o),f-o)+a.line(t.barXPosition+t.barWidth-t.strokeWidth-(p?-1*o:o),f-o)+a.quadraticCurve(t.barXPosition+t.barWidth-t.strokeWidth,f-o,t.barXPosition+t.barWidth-t.strokeWidth,f)}return{pathWithRadius:d,y2:f}}},{key:"checkZeroSeries",value:function(e){for(var t=e.series,n=this.w,i=0;i<t.length;i++){for(var r=0,a=0;a<t[n.globals.maxValsInArrayIndex].length;a++)r+=t[i][a];0===r&&this.barCtx.zeroSerieses.push(i)}for(var o=t.length-1;o>=0;o--)this.barCtx.zeroSerieses.indexOf(o)>-1&&o===this.radiusOnSeriesNumber&&(this.barCtx.radiusOnSeriesNumber-=1);for(var s=t.length-1;s>=0;s--)n.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber)>-1&&(this.barCtx.radiusOnSeriesNumber-=1)}},{key:"getXForValue",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=n?t:null;return null!=e&&(i=t+e/this.barCtx.invertedYRatio-2*(this.barCtx.isReversed?e/this.barCtx.invertedYRatio:0)),i}},{key:"getYForValue",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=n?t:null;return null!=e&&(i=t-e/this.barCtx.yRatio[this.barCtx.yaxisIndex]+2*(this.barCtx.isReversed?e/this.barCtx.yRatio[this.barCtx.yaxisIndex]:0)),i}},{key:"getGoalValues",value:function(e,t,n,i,r){var a=this,o=this.w,s=[];return o.globals.seriesGoals[i]&&o.globals.seriesGoals[i][r]&&Array.isArray(o.globals.seriesGoals[i][r])&&o.globals.seriesGoals[i][r].forEach((function(i){var r;s.push((u(r={},e,"x"===e?a.getXForValue(i.value,t,!1):a.getYForValue(i.value,n,!1)),u(r,"attrs",i),r))})),s}},{key:"drawGoalLine",value:function(e){var t=e.barXPosition,n=e.barYPosition,i=e.goalX,r=e.goalY,a=e.barWidth,o=e.barHeight,s=new w(this.barCtx.ctx),l=s.group({className:"apexcharts-bar-goals-groups"}),c=null;return this.barCtx.isHorizontal?Array.isArray(i)&&i.forEach((function(e){var t=void 0!==e.attrs.strokeHeight?e.attrs.strokeHeight:o/2,i=n+t+o/2;c=s.drawLine(e.x,i-2*t,e.x,i,e.attrs.strokeColor?e.attrs.strokeColor:void 0,e.attrs.strokeDashArray,e.attrs.strokeWidth?e.attrs.strokeWidth:2,e.attrs.strokeLineCap),l.add(c)})):Array.isArray(r)&&r.forEach((function(e){var n=void 0!==e.attrs.strokeWidth?e.attrs.strokeWidth:a/2,i=t+n+a/2;c=s.drawLine(i-2*n,e.y,i,e.y,e.attrs.strokeColor?e.attrs.strokeColor:void 0,e.attrs.strokeDashArray,e.attrs.strokeHeight?e.attrs.strokeHeight:2,e.attrs.strokeLineCap),l.add(c)})),l}}]),e}(),F=function(){function e(t,n){s(this,e),this.ctx=t,this.w=t.w;var i=this.w;this.barOptions=i.config.plotOptions.bar,this.isHorizontal=this.barOptions.horizontal,this.strokeWidth=i.config.stroke.width,this.isNullValue=!1,this.isRangeBar=i.globals.seriesRangeBar.length&&this.isHorizontal,this.xyRatios=n,null!==this.xyRatios&&(this.xRatio=n.xRatio,this.initialXRatio=n.initialXRatio,this.yRatio=n.yRatio,this.invertedXRatio=n.invertedXRatio,this.invertedYRatio=n.invertedYRatio,this.baseLineY=n.baseLineY,this.baseLineInvertedY=n.baseLineInvertedY),this.yaxisIndex=0,this.seriesLen=0,this.barHelpers=new z(this)}return c(e,[{key:"draw",value:function(e,t){var n=this.w,i=new w(this.ctx),r=new A(this.ctx,n);e=r.getLogSeries(e),this.series=e,this.yRatio=r.getLogYRatios(this.yRatio),this.barHelpers.initVariables(e);var o=i.group({class:"apexcharts-bar-series apexcharts-plot-series"});n.config.dataLabels.enabled&&this.totalItems>this.barOptions.dataLabels.maxItems&&console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");for(var s=0,l=0;s<e.length;s++,l++){var c,u,h,d,f=void 0,p=void 0,g=[],m=[],v=n.globals.comboCharts?t[s]:s,x=i.group({class:"apexcharts-series",rel:s+1,seriesName:b.escapeString(n.globals.seriesNames[v]),"data:realIndex":v});this.ctx.series.addCollapsedClassToSeries(x,v),e[s].length>0&&(this.visibleI=this.visibleI+1);var y=0,k=0;this.yRatio.length>1&&(this.yaxisIndex=v),this.isReversed=n.config.yaxis[this.yaxisIndex]&&n.config.yaxis[this.yaxisIndex].reversed;var S=this.barHelpers.initialPositions();p=S.y,y=S.barHeight,u=S.yDivision,d=S.zeroW,f=S.x,k=S.barWidth,c=S.xDivision,h=S.zeroH,this.horizontal||m.push(f+k/2);for(var C=i.group({class:"apexcharts-datalabels","data:realIndex":v}),E=i.group({class:"apexcharts-bar-goals-markers",style:"pointer-events: none"}),T=0;T<n.globals.dataPoints;T++){var P=this.barHelpers.getStrokeWidth(s,T,v),L=null,R={indexes:{i:s,j:T,realIndex:v,bc:l},x:f,y:p,strokeWidth:P,elSeries:x};this.isHorizontal?(L=this.drawBarPaths(a(a({},R),{},{barHeight:y,zeroW:d,yDivision:u})),k=this.series[s][T]/this.invertedYRatio):(L=this.drawColumnPaths(a(a({},R),{},{xDivision:c,barWidth:k,zeroH:h})),y=this.series[s][T]/this.yRatio[this.yaxisIndex]);var M=this.barHelpers.drawGoalLine({barXPosition:L.barXPosition,barYPosition:L.barYPosition,goalX:L.goalX,goalY:L.goalY,barHeight:y,barWidth:k});M&&E.add(M),p=L.y,f=L.x,T>0&&m.push(f+k/2),g.push(p);var I=this.barHelpers.getPathFillColor(e,s,T,v);this.renderSeries({realIndex:v,pathFill:I,j:T,i:s,pathFrom:L.pathFrom,pathTo:L.pathTo,strokeWidth:P,elSeries:x,x:f,y:p,series:e,barHeight:y,barWidth:k,elDataLabelsWrap:C,elGoalsMarkers:E,visibleSeries:this.visibleI,type:"bar"})}n.globals.seriesXvalues[v]=m,n.globals.seriesYvalues[v]=g,o.add(x)}return o}},{key:"renderSeries",value:function(e){var t=e.realIndex,n=e.pathFill,i=e.lineFill,r=e.j,a=e.i,o=e.pathFrom,s=e.pathTo,l=e.strokeWidth,c=e.elSeries,u=e.x,h=e.y,d=e.y1,f=e.y2,p=e.series,g=e.barHeight,m=e.barWidth,v=e.barYPosition,b=e.elDataLabelsWrap,x=e.elGoalsMarkers,k=e.visibleSeries,S=e.type,A=this.w,C=new w(this.ctx);i||(i=this.barOptions.distributed?A.globals.stroke.colors[r]:A.globals.stroke.colors[t]),A.config.series[a].data[r]&&A.config.series[a].data[r].strokeColor&&(i=A.config.series[a].data[r].strokeColor),this.isNullValue&&(n="none");var E=r/A.config.chart.animations.animateGradually.delay*(A.config.chart.animations.speed/A.globals.dataPoints)/2.4,T=C.renderPaths({i:a,j:r,realIndex:t,pathFrom:o,pathTo:s,stroke:i,strokeWidth:l,strokeLineCap:A.config.stroke.lineCap,fill:n,animationDelay:E,initialSpeed:A.config.chart.animations.speed,dataChangeSpeed:A.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(S,"-area")});T.attr("clip-path","url(#gridRectMask".concat(A.globals.cuid,")"));var P=A.config.forecastDataPoints;P.count>0&&r>=A.globals.dataPoints-P.count&&(T.node.setAttribute("stroke-dasharray",P.dashArray),T.node.setAttribute("stroke-width",P.strokeWidth),T.node.setAttribute("fill-opacity",P.fillOpacity)),void 0!==d&&void 0!==f&&(T.attr("data-range-y1",d),T.attr("data-range-y2",f)),new y(this.ctx).setSelectionFilter(T,t,r),c.add(T);var L=new _(this).handleBarDataLabels({x:u,y:h,y1:d,y2:f,i:a,j:r,series:p,realIndex:t,barHeight:g,barWidth:m,barYPosition:v,renderedPath:T,visibleSeries:k});return null!==L&&b.add(L),c.add(b),x&&c.add(x),c}},{key:"drawBarPaths",value:function(e){var t=e.indexes,n=e.barHeight,i=e.strokeWidth,r=e.zeroW,a=e.x,o=e.y,s=e.yDivision,l=e.elSeries,c=this.w,u=t.i,h=t.j;c.globals.isXNumeric&&(o=(c.globals.seriesX[u][h]-c.globals.minX)/this.invertedXRatio-n);var d=o+n*this.visibleI;a=this.barHelpers.getXForValue(this.series[u][h],r);var f=this.barHelpers.getBarpaths({barYPosition:d,barHeight:n,x1:r,x2:a,strokeWidth:i,series:this.series,realIndex:t.realIndex,i:u,j:h,w:c});return c.globals.isXNumeric||(o+=s),this.barHelpers.barBackground({j:h,i:u,y1:d-n*this.visibleI,y2:n*this.seriesLen,elSeries:l}),{pathTo:f.pathTo,pathFrom:f.pathFrom,x:a,y:o,goalX:this.barHelpers.getGoalValues("x",r,null,u,h),barYPosition:d}}},{key:"drawColumnPaths",value:function(e){var t=e.indexes,n=e.x,i=e.y,r=e.xDivision,a=e.barWidth,o=e.zeroH,s=e.strokeWidth,l=e.elSeries,c=this.w,u=t.realIndex,h=t.i,d=t.j,f=t.bc;if(c.globals.isXNumeric){var p=u;c.globals.seriesX[u].length||(p=c.globals.maxValsInArrayIndex),n=(c.globals.seriesX[p][d]-c.globals.minX)/this.xRatio-a*this.seriesLen/2}var g=n+a*this.visibleI;i=this.barHelpers.getYForValue(this.series[h][d],o);var m=this.barHelpers.getColumnPaths({barXPosition:g,barWidth:a,y1:o,y2:i,strokeWidth:s,series:this.series,realIndex:t.realIndex,i:h,j:d,w:c});return c.globals.isXNumeric||(n+=r),this.barHelpers.barBackground({bc:f,j:d,i:h,x1:g-s/2-a*this.visibleI,x2:a*this.seriesLen+s/2,elSeries:l}),{pathTo:m.pathTo,pathFrom:m.pathFrom,x:n,y:i,goalY:this.barHelpers.getGoalValues("y",null,o,h,d),barXPosition:g}}},{key:"getPreviousPath",value:function(e,t){for(var n,i=this.w,r=0;r<i.globals.previousPaths.length;r++){var a=i.globals.previousPaths[r];a.paths&&a.paths.length>0&&parseInt(a.realIndex,10)===parseInt(e,10)&&void 0!==i.globals.previousPaths[r].paths[t]&&(n=i.globals.previousPaths[r].paths[t].d)}return n}}]),e}(),D=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.months31=[1,3,5,7,8,10,12],this.months30=[2,4,6,9,11],this.daysCntOfYear=[0,31,59,90,120,151,181,212,243,273,304,334]}return c(e,[{key:"isValidDate",value:function(e){return!isNaN(this.parseDate(e))}},{key:"getTimeStamp",value:function(e){return Date.parse(e)?this.w.config.xaxis.labels.datetimeUTC?new Date(new Date(e).toISOString().substr(0,25)).getTime():new Date(e).getTime():e}},{key:"getDate",value:function(e){return this.w.config.xaxis.labels.datetimeUTC?new Date(new Date(e).toUTCString()):new Date(e)}},{key:"parseDate",value:function(e){var t=Date.parse(e);if(!isNaN(t))return this.getTimeStamp(e);var n=Date.parse(e.replace(/-/g,"/").replace(/[a-z]+/gi," "));return this.getTimeStamp(n)}},{key:"parseDateWithTimezone",value:function(e){return Date.parse(e.replace(/-/g,"/").replace(/[a-z]+/gi," "))}},{key:"formatDate",value:function(e,t){var n=this.w.globals.locale,i=this.w.config.xaxis.labels.datetimeUTC,r=["\0"].concat(m(n.months)),a=[""].concat(m(n.shortMonths)),o=[""].concat(m(n.days)),s=[""].concat(m(n.shortDays));function l(e,t){var n=e+"";for(t=t||2;n.length<t;)n="0"+n;return n}var c=i?e.getUTCFullYear():e.getFullYear();t=(t=(t=t.replace(/(^|[^\\])yyyy+/g,"$1"+c)).replace(/(^|[^\\])yy/g,"$1"+c.toString().substr(2,2))).replace(/(^|[^\\])y/g,"$1"+c);var u=(i?e.getUTCMonth():e.getMonth())+1;t=(t=(t=(t=t.replace(/(^|[^\\])MMMM+/g,"$1"+r[0])).replace(/(^|[^\\])MMM/g,"$1"+a[0])).replace(/(^|[^\\])MM/g,"$1"+l(u))).replace(/(^|[^\\])M/g,"$1"+u);var h=i?e.getUTCDate():e.getDate();t=(t=(t=(t=t.replace(/(^|[^\\])dddd+/g,"$1"+o[0])).replace(/(^|[^\\])ddd/g,"$1"+s[0])).replace(/(^|[^\\])dd/g,"$1"+l(h))).replace(/(^|[^\\])d/g,"$1"+h);var d=i?e.getUTCHours():e.getHours(),f=d>12?d-12:0===d?12:d;t=(t=(t=(t=t.replace(/(^|[^\\])HH+/g,"$1"+l(d))).replace(/(^|[^\\])H/g,"$1"+d)).replace(/(^|[^\\])hh+/g,"$1"+l(f))).replace(/(^|[^\\])h/g,"$1"+f);var p=i?e.getUTCMinutes():e.getMinutes();t=(t=t.replace(/(^|[^\\])mm+/g,"$1"+l(p))).replace(/(^|[^\\])m/g,"$1"+p);var g=i?e.getUTCSeconds():e.getSeconds();t=(t=t.replace(/(^|[^\\])ss+/g,"$1"+l(g))).replace(/(^|[^\\])s/g,"$1"+g);var v=i?e.getUTCMilliseconds():e.getMilliseconds();t=t.replace(/(^|[^\\])fff+/g,"$1"+l(v,3)),v=Math.round(v/10),t=t.replace(/(^|[^\\])ff/g,"$1"+l(v)),v=Math.round(v/10);var b=d<12?"AM":"PM";t=(t=(t=t.replace(/(^|[^\\])f/g,"$1"+v)).replace(/(^|[^\\])TT+/g,"$1"+b)).replace(/(^|[^\\])T/g,"$1"+b.charAt(0));var x=b.toLowerCase();t=(t=t.replace(/(^|[^\\])tt+/g,"$1"+x)).replace(/(^|[^\\])t/g,"$1"+x.charAt(0));var y=-e.getTimezoneOffset(),w=i||!y?"Z":y>0?"+":"-";if(!i){var k=(y=Math.abs(y))%60;w+=l(Math.floor(y/60))+":"+l(k)}t=t.replace(/(^|[^\\])K/g,"$1"+w);var S=(i?e.getUTCDay():e.getDay())+1;return(t=(t=(t=(t=t.replace(new RegExp(o[0],"g"),o[S])).replace(new RegExp(s[0],"g"),s[S])).replace(new RegExp(r[0],"g"),r[u])).replace(new RegExp(a[0],"g"),a[u])).replace(/\\(.)/g,"$1")}},{key:"getTimeUnitsfromTimestamp",value:function(e,t,n){var i=this.w;void 0!==i.config.xaxis.min&&(e=i.config.xaxis.min),void 0!==i.config.xaxis.max&&(t=i.config.xaxis.max);var r=this.getDate(e),a=this.getDate(t),o=this.formatDate(r,"yyyy MM dd HH mm ss fff").split(" "),s=this.formatDate(a,"yyyy MM dd HH mm ss fff").split(" ");return{minMillisecond:parseInt(o[6],10),maxMillisecond:parseInt(s[6],10),minSecond:parseInt(o[5],10),maxSecond:parseInt(s[5],10),minMinute:parseInt(o[4],10),maxMinute:parseInt(s[4],10),minHour:parseInt(o[3],10),maxHour:parseInt(s[3],10),minDate:parseInt(o[2],10),maxDate:parseInt(s[2],10),minMonth:parseInt(o[1],10)-1,maxMonth:parseInt(s[1],10)-1,minYear:parseInt(o[0],10),maxYear:parseInt(s[0],10)}}},{key:"isLeapYear",value:function(e){return e%4==0&&e%100!=0||e%400==0}},{key:"calculcateLastDaysOfMonth",value:function(e,t,n){return this.determineDaysOfMonths(e,t)-n}},{key:"determineDaysOfYear",value:function(e){var t=365;return this.isLeapYear(e)&&(t=366),t}},{key:"determineRemainingDaysOfYear",value:function(e,t,n){var i=this.daysCntOfYear[t]+n;return t>1&&this.isLeapYear()&&i++,i}},{key:"determineDaysOfMonths",value:function(e,t){var n=30;switch(e=b.monthMod(e),!0){case this.months30.indexOf(e)>-1:2===e&&(n=this.isLeapYear(t)?29:28);break;case this.months31.indexOf(e)>-1:default:n=31}return n}}]),e}(),X=function(e){h(n,F);var t=g(n);function n(){return s(this,n),t.apply(this,arguments)}return c(n,[{key:"draw",value:function(e,t){var n=this.w,i=new w(this.ctx);this.rangeBarOptions=this.w.config.plotOptions.rangeBar,this.series=e,this.seriesRangeStart=n.globals.seriesRangeStart,this.seriesRangeEnd=n.globals.seriesRangeEnd,this.barHelpers.initVariables(e);for(var r=i.group({class:"apexcharts-rangebar-series apexcharts-plot-series"}),o=0;o<e.length;o++){var s,l,c,u=void 0,h=void 0,d=void 0,f=n.globals.comboCharts?t[o]:o,p=i.group({class:"apexcharts-series",seriesName:b.escapeString(n.globals.seriesNames[f]),rel:o+1,"data:realIndex":f});this.ctx.series.addCollapsedClassToSeries(p,f),e[o].length>0&&(this.visibleI=this.visibleI+1);var g=0,m=0;this.yRatio.length>1&&(this.yaxisIndex=f);var v=this.barHelpers.initialPositions();h=v.y,c=v.zeroW,u=v.x,m=v.barWidth,s=v.xDivision,l=v.zeroH;for(var x=i.group({class:"apexcharts-datalabels","data:realIndex":f}),y=i.group({class:"apexcharts-rangebar-goals-markers",style:"pointer-events: none"}),k=0;k<n.globals.dataPoints;k++){var S=this.barHelpers.getStrokeWidth(o,k,f),A=this.seriesRangeStart[o][k],C=this.seriesRangeEnd[o][k],E=null,T=null,P={x:u,y:h,strokeWidth:S,elSeries:p};if(d=v.yDivision,g=v.barHeight,this.isHorizontal){T=h+g*this.visibleI;var L=this.seriesLen;n.config.plotOptions.bar.rangeBarGroupRows&&(L=1);var R=(d-g*L)/2;if(void 0===n.config.series[o].data[k])break;if(n.config.series[o].data[k].x){var M=this.detectOverlappingBars({i:o,j:k,barYPosition:T,srty:R,barHeight:g,yDivision:d,initPositions:v});g=M.barHeight,T=M.barYPosition}m=(E=this.drawRangeBarPaths(a({indexes:{i:o,j:k,realIndex:f},barHeight:g,barYPosition:T,zeroW:c,yDivision:d,y1:A,y2:C},P))).barWidth}else g=(E=this.drawRangeColumnPaths(a({indexes:{i:o,j:k,realIndex:f},zeroH:l,barWidth:m,xDivision:s},P))).barHeight;var I=this.barHelpers.drawGoalLine({barXPosition:E.barXPosition,barYPosition:T,goalX:E.goalX,goalY:E.goalY,barHeight:g,barWidth:m});I&&y.add(I),h=E.y,u=E.x;var O=this.barHelpers.getPathFillColor(e,o,k,f),_=n.globals.stroke.colors[f];this.renderSeries({realIndex:f,pathFill:O,lineFill:_,j:k,i:o,x:u,y:h,y1:A,y2:C,pathFrom:E.pathFrom,pathTo:E.pathTo,strokeWidth:S,elSeries:p,series:e,barHeight:g,barYPosition:T,barWidth:m,elDataLabelsWrap:x,elGoalsMarkers:y,visibleSeries:this.visibleI,type:"rangebar"})}r.add(p)}return r}},{key:"detectOverlappingBars",value:function(e){var t=e.i,n=e.j,i=e.barYPosition,r=e.srty,a=e.barHeight,o=e.yDivision,s=e.initPositions,l=this.w,c=[],u=l.config.series[t].data[n].rangeName,h=l.config.series[t].data[n].x,d=l.globals.labels.indexOf(h),f=l.globals.seriesRangeBar[t].findIndex((function(e){return e.x===h&&e.overlaps.length>0}));return i=l.config.plotOptions.bar.rangeBarGroupRows?r+o*d:r+a*this.visibleI+o*d,f>-1&&!l.config.plotOptions.bar.rangeBarOverlap&&(c=l.globals.seriesRangeBar[t][f].overlaps).indexOf(u)>-1&&(i=(a=s.barHeight/c.length)*this.visibleI+o*(100-parseInt(this.barOptions.barHeight,10))/100/2+a*(this.visibleI+c.indexOf(u))+o*d),{barYPosition:i,barHeight:a}}},{key:"drawRangeColumnPaths",value:function(e){var t=e.indexes,n=e.x;e.strokeWidth;var i=e.xDivision,r=e.barWidth,a=e.zeroH,o=this.w,s=t.i,l=t.j,c=this.yRatio[this.yaxisIndex],u=t.realIndex,h=this.getRangeValue(u,l),d=Math.min(h.start,h.end),f=Math.max(h.start,h.end);o.globals.isXNumeric&&(n=(o.globals.seriesX[s][l]-o.globals.minX)/this.xRatio-r/2);var p=n+r*this.visibleI;void 0===this.series[s][l]||null===this.series[s][l]?d=a:(d=a-d/c,f=a-f/c);var g=Math.abs(f-d),m=this.barHelpers.getColumnPaths({barXPosition:p,barWidth:r,y1:d,y2:f,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,realIndex:t.realIndex,i:u,j:l,w:o});return o.globals.isXNumeric||(n+=i),{pathTo:m.pathTo,pathFrom:m.pathFrom,barHeight:g,x:n,y:f,goalY:this.barHelpers.getGoalValues("y",null,a,s,l),barXPosition:p}}},{key:"drawRangeBarPaths",value:function(e){var t=e.indexes,n=e.y,i=e.y1,r=e.y2,a=e.yDivision,o=e.barHeight,s=e.barYPosition,l=e.zeroW,c=this.w,u=l+i/this.invertedYRatio,h=l+r/this.invertedYRatio,d=Math.abs(h-u),f=this.barHelpers.getBarpaths({barYPosition:s,barHeight:o,x1:u,x2:h,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:t.realIndex,realIndex:t.realIndex,j:t.j,w:c});return c.globals.isXNumeric||(n+=a),{pathTo:f.pathTo,pathFrom:f.pathFrom,barWidth:d,x:h,goalX:this.barHelpers.getGoalValues("x",l,null,t.realIndex,t.j),y:n}}},{key:"getRangeValue",value:function(e,t){var n=this.w;return{start:n.globals.seriesRangeStart[e][t],end:n.globals.seriesRangeEnd[e][t]}}},{key:"getTooltipValues",value:function(e){var t=e.ctx,n=e.seriesIndex,i=e.dataPointIndex,r=e.y1,a=e.y2,o=e.w,s=o.globals.seriesRangeStart[n][i],l=o.globals.seriesRangeEnd[n][i],c=o.globals.labels[i],u=o.config.series[n].name?o.config.series[n].name:"",h=o.config.tooltip.y.formatter,d=o.config.tooltip.y.title.formatter,f={w:o,seriesIndex:n,dataPointIndex:i,start:s,end:l};"function"==typeof d&&(u=d(u,f)),Number.isFinite(r)&&Number.isFinite(a)&&(s=r,l=a,o.config.series[n].data[i].x&&(c=o.config.series[n].data[i].x+":"),"function"==typeof h&&(c=h(c,f)));var p="",g="",m=o.globals.colors[n];if(void 0===o.config.tooltip.x.formatter)if("datetime"===o.config.xaxis.type){var v=new D(t);p=v.formatDate(v.getDate(s),o.config.tooltip.x.format),g=v.formatDate(v.getDate(l),o.config.tooltip.x.format)}else p=s,g=l;else p=o.config.tooltip.x.formatter(s),g=o.config.tooltip.x.formatter(l);return{start:s,end:l,startVal:p,endVal:g,ylabel:c,color:m,seriesName:u}}},{key:"buildCustomTooltipHTML",value:function(e){return'<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: '+e.color+'">'+(e.seriesName||"")+'</span></div><div> <span class="category">'+e.ylabel+' </span> <span class="value start-value">'+e.start+'</span> <span class="separator">-</span> <span class="value end-value">'+e.end+"</span></div></div>"}}]),n}(),B=function(){function e(t){s(this,e),this.opts=t}return c(e,[{key:"line",value:function(){return{chart:{animations:{easing:"swing"}},dataLabels:{enabled:!1},stroke:{width:5,curve:"straight"},markers:{size:0,hover:{sizeOffset:6}},xaxis:{crosshairs:{width:1}}}}},{key:"sparkline",value:function(e){return this.opts.yaxis[0].show=!1,this.opts.yaxis[0].title.text="",this.opts.yaxis[0].axisBorder.show=!1,this.opts.yaxis[0].axisTicks.show=!1,this.opts.yaxis[0].floating=!0,b.extend(e,{grid:{show:!1,padding:{left:0,right:0,top:0,bottom:0}},legend:{show:!1},xaxis:{labels:{show:!1},tooltip:{enabled:!1},axisBorder:{show:!1},axisTicks:{show:!1}},chart:{toolbar:{show:!1},zoom:{enabled:!1}},dataLabels:{enabled:!1}})}},{key:"bar",value:function(){return{chart:{stacked:!1,animations:{easing:"swing"}},plotOptions:{bar:{dataLabels:{position:"center"}}},dataLabels:{style:{colors:["#fff"]},background:{enabled:!1}},stroke:{width:0,lineCap:"round"},fill:{opacity:.85},legend:{markers:{shape:"square",radius:2,size:8}},tooltip:{shared:!1,intersect:!0},xaxis:{tooltip:{enabled:!1},tickPlacement:"between",crosshairs:{width:"barWidth",position:"back",fill:{type:"gradient"},dropShadow:{enabled:!1},stroke:{width:0}}}}}},{key:"candlestick",value:function(){var e=this;return{stroke:{width:1,colors:["#333"]},fill:{opacity:1},dataLabels:{enabled:!1},tooltip:{shared:!0,custom:function(t){var n=t.seriesIndex,i=t.dataPointIndex,r=t.w;return e._getBoxTooltip(r,n,i,["Open","High","","Low","Close"],"candlestick")}},states:{active:{filter:{type:"none"}}},xaxis:{crosshairs:{width:1}}}}},{key:"boxPlot",value:function(){var e=this;return{chart:{animations:{dynamicAnimation:{enabled:!1}}},stroke:{width:1,colors:["#24292e"]},dataLabels:{enabled:!1},tooltip:{shared:!0,custom:function(t){var n=t.seriesIndex,i=t.dataPointIndex,r=t.w;return e._getBoxTooltip(r,n,i,["Minimum","Q1","Median","Q3","Maximum"],"boxPlot")}},markers:{size:5,strokeWidth:1,strokeColors:"#111"},xaxis:{crosshairs:{width:1}}}}},{key:"rangeBar",value:function(){return{stroke:{width:0,lineCap:"square"},plotOptions:{bar:{borderRadius:0,dataLabels:{position:"center"}}},dataLabels:{enabled:!1,formatter:function(e,t){t.ctx;var n=t.seriesIndex,i=t.dataPointIndex,r=t.w,a=r.globals.seriesRangeStart[n][i];return r.globals.seriesRangeEnd[n][i]-a},background:{enabled:!1},style:{colors:["#fff"]}},tooltip:{shared:!1,followCursor:!0,custom:function(e){return e.w.config.plotOptions&&e.w.config.plotOptions.bar&&e.w.config.plotOptions.bar.horizontal?function(e){var t=new X(e.ctx,null),n=t.getTooltipValues(e),i=n.color,r=n.seriesName,a=n.ylabel,o=n.startVal,s=n.endVal;return t.buildCustomTooltipHTML({color:i,seriesName:r,ylabel:a,start:o,end:s})}(e):function(e){var t=new X(e.ctx,null),n=t.getTooltipValues(e),i=n.color,r=n.seriesName,a=n.ylabel,o=n.start,s=n.end;return t.buildCustomTooltipHTML({color:i,seriesName:r,ylabel:a,start:o,end:s})}(e)}},xaxis:{tickPlacement:"between",tooltip:{enabled:!1},crosshairs:{stroke:{width:0}}}}}},{key:"area",value:function(){return{stroke:{width:4},fill:{type:"gradient",gradient:{inverseColors:!1,shade:"light",type:"vertical",opacityFrom:.65,opacityTo:.5,stops:[0,100,100]}},markers:{size:0,hover:{sizeOffset:6}},tooltip:{followCursor:!1}}}},{key:"brush",value:function(e){return b.extend(e,{chart:{toolbar:{autoSelected:"selection",show:!1},zoom:{enabled:!1}},dataLabels:{enabled:!1},stroke:{width:1},tooltip:{enabled:!1},xaxis:{tooltip:{enabled:!1}}})}},{key:"stacked100",value:function(e){e.dataLabels=e.dataLabels||{},e.dataLabels.formatter=e.dataLabels.formatter||void 0;var t=e.dataLabels.formatter;return e.yaxis.forEach((function(t,n){e.yaxis[n].min=0,e.yaxis[n].max=100})),"bar"===e.chart.type&&(e.dataLabels.formatter=t||function(e){return"number"==typeof e&&e?e.toFixed(0)+"%":e}),e}},{key:"convertCatToNumeric",value:function(e){return e.xaxis.convertedCatToNumeric=!0,e}},{key:"convertCatToNumericXaxis",value:function(e,t,n){e.xaxis.type="numeric",e.xaxis.labels=e.xaxis.labels||{},e.xaxis.labels.formatter=e.xaxis.labels.formatter||function(e){return b.isNumber(e)?Math.floor(e):e};var i=e.xaxis.labels.formatter,r=e.xaxis.categories&&e.xaxis.categories.length?e.xaxis.categories:e.labels;return n&&n.length&&(r=n.map((function(e){return Array.isArray(e)?e:String(e)}))),r&&r.length&&(e.xaxis.labels.formatter=function(e){return b.isNumber(e)?i(r[Math.floor(e)-1]):i(e)}),e.xaxis.categories=[],e.labels=[],e.xaxis.tickAmount=e.xaxis.tickAmount||"dataPoints",e}},{key:"bubble",value:function(){return{dataLabels:{style:{colors:["#fff"]}},tooltip:{shared:!1,intersect:!0},xaxis:{crosshairs:{width:0}},fill:{type:"solid",gradient:{shade:"light",inverse:!0,shadeIntensity:.55,opacityFrom:.4,opacityTo:.8}}}}},{key:"scatter",value:function(){return{dataLabels:{enabled:!1},tooltip:{shared:!1,intersect:!0},markers:{size:6,strokeWidth:1,hover:{sizeOffset:2}}}}},{key:"heatmap",value:function(){return{chart:{stacked:!1},fill:{opacity:1},dataLabels:{style:{colors:["#fff"]}},stroke:{colors:["#fff"]},tooltip:{followCursor:!0,marker:{show:!1},x:{show:!1}},legend:{position:"top",markers:{shape:"square",size:10,offsetY:2}},grid:{padding:{right:20}}}}},{key:"treemap",value:function(){return{chart:{zoom:{enabled:!1}},dataLabels:{style:{fontSize:14,fontWeight:600,colors:["#fff"]}},stroke:{show:!0,width:2,colors:["#fff"]},legend:{show:!1},fill:{gradient:{stops:[0,100]}},tooltip:{followCursor:!0,x:{show:!1}},grid:{padding:{left:0,right:0}},xaxis:{crosshairs:{show:!1},tooltip:{enabled:!1}}}}},{key:"pie",value:function(){return{chart:{toolbar:{show:!1}},plotOptions:{pie:{donut:{labels:{show:!1}}}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},style:{colors:["#fff"]},background:{enabled:!1},dropShadow:{enabled:!0}},stroke:{colors:["#fff"]},fill:{opacity:1,gradient:{shade:"light",stops:[0,100]}},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"donut",value:function(){return{chart:{toolbar:{show:!1}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},style:{colors:["#fff"]},background:{enabled:!1},dropShadow:{enabled:!0}},stroke:{colors:["#fff"]},fill:{opacity:1,gradient:{shade:"light",shadeIntensity:.35,stops:[80,100],opacityFrom:1,opacityTo:1}},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"polarArea",value:function(){return this.opts.yaxis[0].tickAmount=this.opts.yaxis[0].tickAmount?this.opts.yaxis[0].tickAmount:6,{chart:{toolbar:{show:!1}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},enabled:!1},stroke:{show:!0,width:2},fill:{opacity:.7},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"radar",value:function(){return this.opts.yaxis[0].labels.offsetY=this.opts.yaxis[0].labels.offsetY?this.opts.yaxis[0].labels.offsetY:6,{dataLabels:{enabled:!1,style:{fontSize:"11px"}},stroke:{width:2},markers:{size:3,strokeWidth:1,strokeOpacity:1},fill:{opacity:.2},tooltip:{shared:!1,intersect:!0,followCursor:!0},grid:{show:!1},xaxis:{labels:{formatter:function(e){return e},style:{colors:["#a8a8a8"],fontSize:"11px"}},tooltip:{enabled:!1},crosshairs:{show:!1}}}}},{key:"radialBar",value:function(){return{chart:{animations:{dynamicAnimation:{enabled:!0,speed:800}},toolbar:{show:!1}},fill:{gradient:{shade:"dark",shadeIntensity:.4,inverseColors:!1,type:"diagonal2",opacityFrom:1,opacityTo:1,stops:[70,98,100]}},legend:{show:!1,position:"right"},tooltip:{enabled:!1,fillSeriesColor:!0}}}},{key:"_getBoxTooltip",value:function(e,t,n,i,r){var a=e.globals.seriesCandleO[t][n],o=e.globals.seriesCandleH[t][n],s=e.globals.seriesCandleM[t][n],l=e.globals.seriesCandleL[t][n],c=e.globals.seriesCandleC[t][n];return e.config.series[t].type&&e.config.series[t].type!==r?'<div class="apexcharts-custom-tooltip">\n          '.concat(e.config.series[t].name?e.config.series[t].name:"series-"+(t+1),": <strong>").concat(e.globals.series[t][n],"</strong>\n        </div>"):'<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(e.config.chart.type,'">')+"<div>".concat(i[0],': <span class="value">')+a+"</span></div>"+"<div>".concat(i[1],': <span class="value">')+o+"</span></div>"+(s?"<div>".concat(i[2],': <span class="value">')+s+"</span></div>":"")+"<div>".concat(i[3],': <span class="value">')+l+"</span></div>"+"<div>".concat(i[4],': <span class="value">')+c+"</span></div></div>"}}]),e}(),Y=function(){function e(t){s(this,e),this.opts=t}return c(e,[{key:"init",value:function(e){var t=e.responsiveOverride,n=this.opts,i=new P,r=new B(n);this.chartType=n.chart.type,"histogram"===this.chartType&&(n.chart.type="bar",n=b.extend({plotOptions:{bar:{columnWidth:"99.99%"}}},n)),n=this.extendYAxis(n),n=this.extendAnnotations(n);var a=i.init(),s={};if(n&&"object"===o(n)){var l={};l=-1!==["line","area","bar","candlestick","boxPlot","rangeBar","histogram","bubble","scatter","heatmap","treemap","pie","polarArea","donut","radar","radialBar"].indexOf(n.chart.type)?r[n.chart.type]():r.line(),n.chart.brush&&n.chart.brush.enabled&&(l=r.brush(l)),n.chart.stacked&&"100%"===n.chart.stackType&&(n=r.stacked100(n)),this.checkForDarkTheme(window.Apex),this.checkForDarkTheme(n),n.xaxis=n.xaxis||window.Apex.xaxis||{},t||(n.xaxis.convertedCatToNumeric=!1),((n=this.checkForCatToNumericXAxis(this.chartType,l,n)).chart.sparkline&&n.chart.sparkline.enabled||window.Apex.chart&&window.Apex.chart.sparkline&&window.Apex.chart.sparkline.enabled)&&(l=r.sparkline(l)),s=b.extend(a,l)}var c=b.extend(s,window.Apex);return a=b.extend(c,n),this.handleUserInputErrors(a)}},{key:"checkForCatToNumericXAxis",value:function(e,t,n){var i=new B(n),r=("bar"===e||"boxPlot"===e)&&n.plotOptions&&n.plotOptions.bar&&n.plotOptions.bar.horizontal,a="pie"===e||"polarArea"===e||"donut"===e||"radar"===e||"radialBar"===e||"heatmap"===e,o="datetime"!==n.xaxis.type&&"numeric"!==n.xaxis.type,s=n.xaxis.tickPlacement?n.xaxis.tickPlacement:t.xaxis&&t.xaxis.tickPlacement;return r||a||!o||"between"===s||(n=i.convertCatToNumeric(n)),n}},{key:"extendYAxis",value:function(e,t){var n=new P;(void 0===e.yaxis||!e.yaxis||Array.isArray(e.yaxis)&&0===e.yaxis.length)&&(e.yaxis={}),e.yaxis.constructor!==Array&&window.Apex.yaxis&&window.Apex.yaxis.constructor!==Array&&(e.yaxis=b.extend(e.yaxis,window.Apex.yaxis)),e.yaxis.constructor!==Array?e.yaxis=[b.extend(n.yAxis,e.yaxis)]:e.yaxis=b.extendArray(e.yaxis,n.yAxis);var i=!1;e.yaxis.forEach((function(e){e.logarithmic&&(i=!0)}));var r=e.series;return t&&!r&&(r=t.config.series),i&&r.length!==e.yaxis.length&&r.length&&(e.yaxis=r.map((function(t,i){if(t.name||(r[i].name="series-".concat(i+1)),e.yaxis[i])return e.yaxis[i].seriesName=r[i].name,e.yaxis[i];var a=b.extend(n.yAxis,e.yaxis[0]);return a.show=!1,a}))),i&&r.length>1&&r.length!==e.yaxis.length&&console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."),e}},{key:"extendAnnotations",value:function(e){return void 0===e.annotations&&(e.annotations={},e.annotations.yaxis=[],e.annotations.xaxis=[],e.annotations.points=[]),e=this.extendYAxisAnnotations(e),e=this.extendXAxisAnnotations(e),this.extendPointAnnotations(e)}},{key:"extendYAxisAnnotations",value:function(e){var t=new P;return e.annotations.yaxis=b.extendArray(void 0!==e.annotations.yaxis?e.annotations.yaxis:[],t.yAxisAnnotation),e}},{key:"extendXAxisAnnotations",value:function(e){var t=new P;return e.annotations.xaxis=b.extendArray(void 0!==e.annotations.xaxis?e.annotations.xaxis:[],t.xAxisAnnotation),e}},{key:"extendPointAnnotations",value:function(e){var t=new P;return e.annotations.points=b.extendArray(void 0!==e.annotations.points?e.annotations.points:[],t.pointAnnotation),e}},{key:"checkForDarkTheme",value:function(e){e.theme&&"dark"===e.theme.mode&&(e.tooltip||(e.tooltip={}),"light"!==e.tooltip.theme&&(e.tooltip.theme="dark"),e.chart.foreColor||(e.chart.foreColor="#f6f7f8"),e.chart.background||(e.chart.background="#424242"),e.theme.palette||(e.theme.palette="palette4"))}},{key:"handleUserInputErrors",value:function(e){var t=e;if(t.tooltip.shared&&t.tooltip.intersect)throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");if("bar"===t.chart.type&&t.plotOptions.bar.horizontal){if(t.yaxis.length>1)throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");t.yaxis[0].reversed&&(t.yaxis[0].opposite=!0),t.xaxis.tooltip.enabled=!1,t.yaxis[0].tooltip.enabled=!1,t.chart.zoom.enabled=!1}return"bar"!==t.chart.type&&"rangeBar"!==t.chart.type||t.tooltip.shared&&"barWidth"===t.xaxis.crosshairs.width&&t.series.length>1&&(t.xaxis.crosshairs.width="tickWidth"),"candlestick"!==t.chart.type&&"boxPlot"!==t.chart.type||t.yaxis[0].reversed&&(console.warn("Reversed y-axis in ".concat(t.chart.type," chart is not supported.")),t.yaxis[0].reversed=!1),t}}]),e}(),H=function(){function e(){s(this,e)}return c(e,[{key:"initGlobalVars",value:function(e){e.series=[],e.seriesCandleO=[],e.seriesCandleH=[],e.seriesCandleM=[],e.seriesCandleL=[],e.seriesCandleC=[],e.seriesRangeStart=[],e.seriesRangeEnd=[],e.seriesRangeBar=[],e.seriesPercent=[],e.seriesGoals=[],e.seriesX=[],e.seriesZ=[],e.seriesNames=[],e.seriesTotals=[],e.seriesLog=[],e.seriesColors=[],e.stackedSeriesTotals=[],e.seriesXvalues=[],e.seriesYvalues=[],e.labels=[],e.categoryLabels=[],e.timescaleLabels=[],e.noLabelsProvided=!1,e.resizeTimer=null,e.selectionResizeTimer=null,e.delayedElements=[],e.pointsArray=[],e.dataLabelsRects=[],e.isXNumeric=!1,e.xaxisLabelsCount=0,e.skipLastTimelinelabel=!1,e.skipFirstTimelinelabel=!1,e.isDataXYZ=!1,e.isMultiLineX=!1,e.isMultipleYAxis=!1,e.maxY=-Number.MAX_VALUE,e.minY=Number.MIN_VALUE,e.minYArr=[],e.maxYArr=[],e.maxX=-Number.MAX_VALUE,e.minX=Number.MAX_VALUE,e.initialMaxX=-Number.MAX_VALUE,e.initialMinX=Number.MAX_VALUE,e.maxDate=0,e.minDate=Number.MAX_VALUE,e.minZ=Number.MAX_VALUE,e.maxZ=-Number.MAX_VALUE,e.minXDiff=Number.MAX_VALUE,e.yAxisScale=[],e.xAxisScale=null,e.xAxisTicksPositions=[],e.yLabelsCoords=[],e.yTitleCoords=[],e.barPadForNumericAxis=0,e.padHorizontal=0,e.xRange=0,e.yRange=[],e.zRange=0,e.dataPoints=0,e.xTickAmount=0}},{key:"globalVars",value:function(e){return{chartID:null,cuid:null,events:{beforeMount:[],mounted:[],updated:[],clicked:[],selection:[],dataPointSelection:[],zoomed:[],scrolled:[]},colors:[],clientX:null,clientY:null,fill:{colors:[]},stroke:{colors:[]},dataLabels:{style:{colors:[]}},radarPolygons:{fill:{colors:[]}},markers:{colors:[],size:e.markers.size,largestSize:0},animationEnded:!1,isTouchDevice:"ontouchstart"in window||navigator.msMaxTouchPoints,isDirty:!1,isExecCalled:!1,initialConfig:null,initialSeries:[],lastXAxis:[],lastYAxis:[],columnSeries:null,labels:[],timescaleLabels:[],noLabelsProvided:!1,allSeriesCollapsed:!1,collapsedSeries:[],collapsedSeriesIndices:[],ancillaryCollapsedSeries:[],ancillaryCollapsedSeriesIndices:[],risingSeries:[],dataFormatXNumeric:!1,capturedSeriesIndex:-1,capturedDataPointIndex:-1,selectedDataPoints:[],goldenPadding:35,invalidLogScale:!1,ignoreYAxisIndexes:[],yAxisSameScaleIndices:[],maxValsInArrayIndex:0,radialSize:0,selection:void 0,zoomEnabled:"zoom"===e.chart.toolbar.autoSelected&&e.chart.toolbar.tools.zoom&&e.chart.zoom.enabled,panEnabled:"pan"===e.chart.toolbar.autoSelected&&e.chart.toolbar.tools.pan,selectionEnabled:"selection"===e.chart.toolbar.autoSelected&&e.chart.toolbar.tools.selection,yaxis:null,mousedown:!1,lastClientPosition:{},visibleXRange:void 0,yValueDecimal:0,total:0,SVGNS:"http://www.w3.org/2000/svg",svgWidth:0,svgHeight:0,noData:!1,locale:{},dom:{},memory:{methodsToExec:[]},shouldAnimate:!0,skipLastTimelinelabel:!1,skipFirstTimelinelabel:!1,delayedElements:[],axisCharts:!0,isDataXYZ:!1,resized:!1,resizeTimer:null,comboCharts:!1,dataChanged:!1,previousPaths:[],allSeriesHasEqualX:!0,pointsArray:[],dataLabelsRects:[],lastDrawnDataLabelsIndexes:[],hasNullValues:!1,easing:null,zoomed:!1,gridWidth:0,gridHeight:0,rotateXLabels:!1,defaultLabels:!1,xLabelFormatter:void 0,yLabelFormatters:[],xaxisTooltipFormatter:void 0,ttKeyFormatter:void 0,ttVal:void 0,ttZFormatter:void 0,LINE_HEIGHT_RATIO:1.618,xAxisLabelsHeight:0,xAxisLabelsWidth:0,yAxisLabelsWidth:0,scaleX:1,scaleY:1,translateX:0,translateY:0,translateYAxisX:[],yAxisWidths:[],translateXAxisY:0,translateXAxisX:0,tooltip:null}}},{key:"init",value:function(e){var t=this.globalVars(e);return this.initGlobalVars(t),t.initialConfig=b.extend({},e),t.initialSeries=b.clone(e.series),t.lastXAxis=b.clone(t.initialConfig.xaxis),t.lastYAxis=b.clone(t.initialConfig.yaxis),t}}]),e}(),V=function(){function e(t){s(this,e),this.opts=t}return c(e,[{key:"init",value:function(){var e=new Y(this.opts).init({responsiveOverride:!1});return{config:e,globals:(new H).init(e)}}}]),e}(),W=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.twoDSeries=[],this.threeDSeries=[],this.twoDSeriesX=[],this.seriesGoals=[],this.coreUtils=new A(this.ctx)}return c(e,[{key:"isMultiFormat",value:function(){return this.isFormatXY()||this.isFormat2DArray()}},{key:"isFormatXY",value:function(){var e=this.w.config.series.slice(),t=new N(this.ctx);if(this.activeSeriesIndex=t.getActiveConfigSeriesIndex(),void 0!==e[this.activeSeriesIndex].data&&e[this.activeSeriesIndex].data.length>0&&null!==e[this.activeSeriesIndex].data[0]&&void 0!==e[this.activeSeriesIndex].data[0].x&&null!==e[this.activeSeriesIndex].data[0])return!0}},{key:"isFormat2DArray",value:function(){var e=this.w.config.series.slice(),t=new N(this.ctx);if(this.activeSeriesIndex=t.getActiveConfigSeriesIndex(),void 0!==e[this.activeSeriesIndex].data&&e[this.activeSeriesIndex].data.length>0&&void 0!==e[this.activeSeriesIndex].data[0]&&null!==e[this.activeSeriesIndex].data[0]&&e[this.activeSeriesIndex].data[0].constructor===Array)return!0}},{key:"handleFormat2DArray",value:function(e,t){for(var n=this.w.config,i=this.w.globals,r="boxPlot"===n.chart.type||"boxPlot"===n.series[t].type,a=0;a<e[t].data.length;a++)if(void 0!==e[t].data[a][1]&&(Array.isArray(e[t].data[a][1])&&4===e[t].data[a][1].length&&!r?this.twoDSeries.push(b.parseNumber(e[t].data[a][1][3])):e[t].data[a].length>=5?this.twoDSeries.push(b.parseNumber(e[t].data[a][4])):this.twoDSeries.push(b.parseNumber(e[t].data[a][1])),i.dataFormatXNumeric=!0),"datetime"===n.xaxis.type){var o=new Date(e[t].data[a][0]);o=new Date(o).getTime(),this.twoDSeriesX.push(o)}else this.twoDSeriesX.push(e[t].data[a][0]);for(var s=0;s<e[t].data.length;s++)void 0!==e[t].data[s][2]&&(this.threeDSeries.push(e[t].data[s][2]),i.isDataXYZ=!0)}},{key:"handleFormatXY",value:function(e,t){var n=this.w.config,i=this.w.globals,r=new D(this.ctx),a=t;i.collapsedSeriesIndices.indexOf(t)>-1&&(a=this.activeSeriesIndex);for(var o=0;o<e[t].data.length;o++)void 0!==e[t].data[o].y&&(Array.isArray(e[t].data[o].y)?this.twoDSeries.push(b.parseNumber(e[t].data[o].y[e[t].data[o].y.length-1])):this.twoDSeries.push(b.parseNumber(e[t].data[o].y))),void 0!==e[t].data[o].goals&&Array.isArray(e[t].data[o].goals)?(void 0===this.seriesGoals[t]&&(this.seriesGoals[t]=[]),this.seriesGoals[t].push(e[t].data[o].goals)):(void 0===this.seriesGoals[t]&&(this.seriesGoals[t]=[]),this.seriesGoals[t].push(null));for(var s=0;s<e[a].data.length;s++){var l="string"==typeof e[a].data[s].x,c=Array.isArray(e[a].data[s].x),u=!c&&!!r.isValidDate(e[a].data[s].x.toString());if(l||u)if(l||n.xaxis.convertedCatToNumeric){var h=i.isBarHorizontal&&i.isRangeData;"datetime"!==n.xaxis.type||h?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[a].data[s].x)):this.twoDSeriesX.push(r.parseDate(e[a].data[s].x))}else"datetime"===n.xaxis.type?this.twoDSeriesX.push(r.parseDate(e[a].data[s].x.toString())):(i.dataFormatXNumeric=!0,i.isXNumeric=!0,this.twoDSeriesX.push(parseFloat(e[a].data[s].x)));else c?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[a].data[s].x)):(i.isXNumeric=!0,i.dataFormatXNumeric=!0,this.twoDSeriesX.push(e[a].data[s].x))}if(e[t].data[0]&&void 0!==e[t].data[0].z){for(var d=0;d<e[t].data.length;d++)this.threeDSeries.push(e[t].data[d].z);i.isDataXYZ=!0}}},{key:"handleRangeData",value:function(e,t){var n=this.w.globals,i={};return this.isFormat2DArray()?i=this.handleRangeDataFormat("array",e,t):this.isFormatXY()&&(i=this.handleRangeDataFormat("xy",e,t)),n.seriesRangeStart.push(i.start),n.seriesRangeEnd.push(i.end),n.seriesRangeBar.push(i.rangeUniques),n.seriesRangeBar.forEach((function(e,t){e&&e.forEach((function(e,t){e.y.forEach((function(t,n){for(var i=0;i<e.y.length;i++)if(n!==i){var r=t.y1,a=t.y2,o=e.y[i].y1;r<=e.y[i].y2&&o<=a&&(e.overlaps.indexOf(t.rangeName)<0&&e.overlaps.push(t.rangeName),e.overlaps.indexOf(e.y[i].rangeName)<0&&e.overlaps.push(e.y[i].rangeName))}}))}))})),i}},{key:"handleCandleStickBoxData",value:function(e,t){var n=this.w.globals,i={};return this.isFormat2DArray()?i=this.handleCandleStickBoxDataFormat("array",e,t):this.isFormatXY()&&(i=this.handleCandleStickBoxDataFormat("xy",e,t)),n.seriesCandleO[t]=i.o,n.seriesCandleH[t]=i.h,n.seriesCandleM[t]=i.m,n.seriesCandleL[t]=i.l,n.seriesCandleC[t]=i.c,i}},{key:"handleRangeDataFormat",value:function(e,t,n){var i=[],r=[],a=t[n].data.filter((function(e,t,n){return t===n.findIndex((function(t){return t.x===e.x}))})).map((function(e,t){return{x:e.x,overlaps:[],y:[]}})),o="Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",s=new N(this.ctx).getActiveConfigSeriesIndex();if("array"===e){if(2!==t[s].data[0][1].length)throw new Error(o);for(var l=0;l<t[n].data.length;l++)i.push(t[n].data[l][1][0]),r.push(t[n].data[l][1][1])}else if("xy"===e){if(2!==t[s].data[0].y.length)throw new Error(o);for(var c=function(e){var o=b.randomId(),s=t[n].data[e].x,l={y1:t[n].data[e].y[0],y2:t[n].data[e].y[1],rangeName:o};t[n].data[e].rangeName=o;var c=a.findIndex((function(e){return e.x===s}));a[c].y.push(l),i.push(l.y1),r.push(l.y2)},u=0;u<t[n].data.length;u++)c(u)}return{start:i,end:r,rangeUniques:a}}},{key:"handleCandleStickBoxDataFormat",value:function(e,t,n){var i=this.w,r="boxPlot"===i.config.chart.type||"boxPlot"===i.config.series[n].type,a=[],o=[],s=[],l=[],c=[];if("array"===e)if(r&&6===t[n].data[0].length||!r&&5===t[n].data[0].length)for(var u=0;u<t[n].data.length;u++)a.push(t[n].data[u][1]),o.push(t[n].data[u][2]),r?(s.push(t[n].data[u][3]),l.push(t[n].data[u][4]),c.push(t[n].data[u][5])):(l.push(t[n].data[u][3]),c.push(t[n].data[u][4]));else for(var h=0;h<t[n].data.length;h++)Array.isArray(t[n].data[h][1])&&(a.push(t[n].data[h][1][0]),o.push(t[n].data[h][1][1]),r?(s.push(t[n].data[h][1][2]),l.push(t[n].data[h][1][3]),c.push(t[n].data[h][1][4])):(l.push(t[n].data[h][1][2]),c.push(t[n].data[h][1][3])));else if("xy"===e)for(var d=0;d<t[n].data.length;d++)Array.isArray(t[n].data[d].y)&&(a.push(t[n].data[d].y[0]),o.push(t[n].data[d].y[1]),r?(s.push(t[n].data[d].y[2]),l.push(t[n].data[d].y[3]),c.push(t[n].data[d].y[4])):(l.push(t[n].data[d].y[2]),c.push(t[n].data[d].y[3])));return{o:a,h:o,m:s,l,c}}},{key:"parseDataAxisCharts",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.ctx,i=this.w.config,r=this.w.globals,a=new D(n),o=i.labels.length>0?i.labels.slice():i.xaxis.categories.slice();r.isRangeBar="rangeBar"===i.chart.type&&r.isBarHorizontal;for(var s=function(){for(var e=0;e<o.length;e++)if("string"==typeof o[e]){if(!a.isValidDate(o[e]))throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");t.twoDSeriesX.push(a.parseDate(o[e]))}else t.twoDSeriesX.push(o[e])},l=0;l<e.length;l++){if(this.twoDSeries=[],this.twoDSeriesX=[],this.threeDSeries=[],void 0===e[l].data)return void console.error("It is a possibility that you may have not included 'data' property in series.");if("rangeBar"!==i.chart.type&&"rangeArea"!==i.chart.type&&"rangeBar"!==e[l].type&&"rangeArea"!==e[l].type||(r.isRangeData=!0,this.handleRangeData(e,l)),this.isMultiFormat())this.isFormat2DArray()?this.handleFormat2DArray(e,l):this.isFormatXY()&&this.handleFormatXY(e,l),"candlestick"!==i.chart.type&&"candlestick"!==e[l].type&&"boxPlot"!==i.chart.type&&"boxPlot"!==e[l].type||this.handleCandleStickBoxData(e,l),r.series.push(this.twoDSeries),r.labels.push(this.twoDSeriesX),r.seriesX.push(this.twoDSeriesX),r.seriesGoals=this.seriesGoals,l!==this.activeSeriesIndex||this.fallbackToCategory||(r.isXNumeric=!0);else{"datetime"===i.xaxis.type?(r.isXNumeric=!0,s(),r.seriesX.push(this.twoDSeriesX)):"numeric"===i.xaxis.type&&(r.isXNumeric=!0,o.length>0&&(this.twoDSeriesX=o,r.seriesX.push(this.twoDSeriesX))),r.labels.push(this.twoDSeriesX);var c=e[l].data.map((function(e){return b.parseNumber(e)}));r.series.push(c)}r.seriesZ.push(this.threeDSeries),void 0!==e[l].name?r.seriesNames.push(e[l].name):r.seriesNames.push("series-"+parseInt(l+1,10)),void 0!==e[l].color?r.seriesColors.push(e[l].color):r.seriesColors.push(void 0)}return this.w}},{key:"parseDataNonAxisCharts",value:function(e){var t=this.w.globals,n=this.w.config;t.series=e.slice(),t.seriesNames=n.labels.slice();for(var i=0;i<t.series.length;i++)void 0===t.seriesNames[i]&&t.seriesNames.push("series-"+(i+1));return this.w}},{key:"handleExternalLabelsData",value:function(e){var t=this.w.config,n=this.w.globals;t.xaxis.categories.length>0?n.labels=t.xaxis.categories:t.labels.length>0?n.labels=t.labels.slice():this.fallbackToCategory?(n.labels=n.labels[0],n.seriesRangeBar.length&&(n.seriesRangeBar.map((function(e){e.forEach((function(e){n.labels.indexOf(e.x)<0&&e.x&&n.labels.push(e.x)}))})),n.labels=n.labels.filter((function(e,t,n){return n.indexOf(e)===t}))),t.xaxis.convertedCatToNumeric&&(new B(t).convertCatToNumericXaxis(t,this.ctx,n.seriesX[0]),this._generateExternalLabels(e))):this._generateExternalLabels(e)}},{key:"_generateExternalLabels",value:function(e){var t=this.w.globals,n=this.w.config,i=[];if(t.axisCharts){if(t.series.length>0)if(this.isFormatXY())for(var r=n.series.map((function(e,t){return e.data.filter((function(e,t,n){return n.findIndex((function(t){return t.x===e.x}))===t}))})),a=r.reduce((function(e,t,n,i){return i[e].length>t.length?e:n}),0),o=0;o<r[a].length;o++)i.push(o+1);else for(var s=0;s<t.series[t.maxValsInArrayIndex].length;s++)i.push(s+1);t.seriesX=[];for(var l=0;l<e.length;l++)t.seriesX.push(i);t.isXNumeric=!0}if(0===i.length){i=t.axisCharts?[]:t.series.map((function(e,t){return t+1}));for(var c=0;c<e.length;c++)t.seriesX.push(i)}t.labels=i,n.xaxis.convertedCatToNumeric&&(t.categoryLabels=i.map((function(e){return n.xaxis.labels.formatter(e)}))),t.noLabelsProvided=!0}},{key:"parseData",value:function(e){var t=this.w,n=t.config,i=t.globals;if(this.excludeCollapsedSeriesInYAxis(),this.fallbackToCategory=!1,this.ctx.core.resetGlobals(),this.ctx.core.isMultipleY(),i.axisCharts?this.parseDataAxisCharts(e):this.parseDataNonAxisCharts(e),this.coreUtils.getLargestSeries(),"bar"===n.chart.type&&n.chart.stacked){var r=new N(this.ctx);i.series=r.setNullSeriesToZeroValues(i.series)}this.coreUtils.getSeriesTotals(),i.axisCharts&&this.coreUtils.getStackedSeriesTotals(),this.coreUtils.getPercentSeries(),i.dataFormatXNumeric||i.isXNumeric&&("numeric"!==n.xaxis.type||0!==n.labels.length||0!==n.xaxis.categories.length)||this.handleExternalLabelsData(e);for(var a=this.coreUtils.getCategoryLabels(i.labels),o=0;o<a.length;o++)if(Array.isArray(a[o])){i.isMultiLineX=!0;break}}},{key:"excludeCollapsedSeriesInYAxis",value:function(){var e=this,t=this.w;t.globals.ignoreYAxisIndexes=t.globals.collapsedSeries.map((function(n,i){if(e.w.globals.isMultipleYAxis&&!t.config.chart.stacked)return n.index}))}}]),e}(),j=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.tooltipKeyFormat="dd MMM"}return c(e,[{key:"xLabelFormat",value:function(e,t,n,i){var r=this.w;if("datetime"===r.config.xaxis.type&&void 0===r.config.xaxis.labels.formatter&&void 0===r.config.tooltip.x.formatter){var a=new D(this.ctx);return a.formatDate(a.getDate(t),r.config.tooltip.x.format)}return e(t,n,i)}},{key:"defaultGeneralFormatter",value:function(e){return Array.isArray(e)?e.map((function(e){return e})):e}},{key:"defaultYFormatter",value:function(e,t,n){var i=this.w;return b.isNumber(e)&&(e=0!==i.globals.yValueDecimal?e.toFixed(void 0!==t.decimalsInFloat?t.decimalsInFloat:i.globals.yValueDecimal):i.globals.maxYArr[n]-i.globals.minYArr[n]<5?e.toFixed(1):e.toFixed(0)),e}},{key:"setLabelFormatters",value:function(){var e=this,t=this.w;return t.globals.xaxisTooltipFormatter=function(t){return e.defaultGeneralFormatter(t)},t.globals.ttKeyFormatter=function(t){return e.defaultGeneralFormatter(t)},t.globals.ttZFormatter=function(e){return e},t.globals.legendFormatter=function(t){return e.defaultGeneralFormatter(t)},void 0!==t.config.xaxis.labels.formatter?t.globals.xLabelFormatter=t.config.xaxis.labels.formatter:t.globals.xLabelFormatter=function(e){if(b.isNumber(e)){if(!t.config.xaxis.convertedCatToNumeric&&"numeric"===t.config.xaxis.type){if(b.isNumber(t.config.xaxis.decimalsInFloat))return e.toFixed(t.config.xaxis.decimalsInFloat);var n=t.globals.maxX-t.globals.minX;return n>0&&n<100?e.toFixed(1):e.toFixed(0)}return t.globals.isBarHorizontal&&t.globals.maxY-t.globals.minYArr<4?e.toFixed(1):e.toFixed(0)}return e},"function"==typeof t.config.tooltip.x.formatter?t.globals.ttKeyFormatter=t.config.tooltip.x.formatter:t.globals.ttKeyFormatter=t.globals.xLabelFormatter,"function"==typeof t.config.xaxis.tooltip.formatter&&(t.globals.xaxisTooltipFormatter=t.config.xaxis.tooltip.formatter),(Array.isArray(t.config.tooltip.y)||void 0!==t.config.tooltip.y.formatter)&&(t.globals.ttVal=t.config.tooltip.y),void 0!==t.config.tooltip.z.formatter&&(t.globals.ttZFormatter=t.config.tooltip.z.formatter),void 0!==t.config.legend.formatter&&(t.globals.legendFormatter=t.config.legend.formatter),t.config.yaxis.forEach((function(n,i){void 0!==n.labels.formatter?t.globals.yLabelFormatters[i]=n.labels.formatter:t.globals.yLabelFormatters[i]=function(r){return t.globals.xyCharts?Array.isArray(r)?r.map((function(t){return e.defaultYFormatter(t,n,i)})):e.defaultYFormatter(r,n,i):r}})),t.globals}},{key:"heatmapLabelFormatters",value:function(){var e=this.w;if("heatmap"===e.config.chart.type){e.globals.yAxisScale[0].result=e.globals.seriesNames.slice();var t=e.globals.seriesNames.reduce((function(e,t){return e.length>t.length?e:t}),0);e.globals.yAxisScale[0].niceMax=t,e.globals.yAxisScale[0].niceMin=t}}}]),e}(),U=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"getLabel",value:function(e,t,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"12px",o=this.w,s=void 0===e[i]?"":e[i],l=s,c=o.globals.xLabelFormatter,u=o.config.xaxis.labels.formatter,h=!1,d=new j(this.ctx),f=s;l=d.xLabelFormat(c,s,f,{i,dateFormatter:new D(this.ctx).formatDate,w:o}),void 0!==u&&(l=u(s,e[i],{i,dateFormatter:new D(this.ctx).formatDate,w:o}));var p=function(e){var n=null;return t.forEach((function(e){"month"===e.unit?n="year":"day"===e.unit?n="month":"hour"===e.unit?n="day":"minute"===e.unit&&(n="hour")})),n===e};t.length>0?(h=p(t[i].unit),n=t[i].position,l=t[i].value):"datetime"===o.config.xaxis.type&&void 0===u&&(l=""),void 0===l&&(l=""),l=Array.isArray(l)?l:l.toString();var g=new w(this.ctx),m={};m=o.globals.rotateXLabels?g.getTextRects(l,parseInt(a,10),null,"rotate(".concat(o.config.xaxis.labels.rotate," 0 0)"),!1):g.getTextRects(l,parseInt(a,10));var v=!o.config.xaxis.labels.showDuplicates&&this.ctx.timeScale;return!Array.isArray(l)&&(0===l.indexOf("NaN")||0===l.toLowerCase().indexOf("invalid")||l.toLowerCase().indexOf("infinity")>=0||r.indexOf(l)>=0&&v)&&(l=""),{x:n,text:l,textRect:m,isBold:h}}},{key:"checkLabelBasedOnTickamount",value:function(e,t,n){var i=this.w,r=i.config.xaxis.tickAmount;return"dataPoints"===r&&(r=Math.round(i.globals.gridWidth/120)),r>n||e%Math.round(n/(r+1))==0||(t.text=""),t}},{key:"checkForOverflowingLabels",value:function(e,t,n,i,r){var a=this.w;if(0===e&&a.globals.skipFirstTimelinelabel&&(t.text=""),e===n-1&&a.globals.skipLastTimelinelabel&&(t.text=""),a.config.xaxis.labels.hideOverlappingLabels&&i.length>0){var o=r[r.length-1];t.x<o.textRect.width/(a.globals.rotateXLabels?Math.abs(a.config.xaxis.labels.rotate)/12:1.01)+o.x&&(t.text="")}return t}},{key:"checkForReversedLabels",value:function(e,t){var n=this.w;return n.config.yaxis[e]&&n.config.yaxis[e].reversed&&t.reverse(),t}},{key:"isYAxisHidden",value:function(e){var t=this.w,n=new A(this.ctx);return!t.config.yaxis[e].show||!t.config.yaxis[e].showForNullSeries&&n.isSeriesNull(e)&&-1===t.globals.collapsedSeriesIndices.indexOf(e)}},{key:"getYAxisForeColor",value:function(e,t){var n=this.w;return Array.isArray(e)&&n.globals.yAxisScale[t]&&this.ctx.theme.pushExtraColors(e,n.globals.yAxisScale[t].result.length,!1),e}},{key:"drawYAxisTicks",value:function(e,t,n,i,r,a,o){var s=this.w,l=new w(this.ctx),c=s.globals.translateY;if(i.show&&t>0){!0===s.config.yaxis[r].opposite&&(e+=i.width);for(var u=t;u>=0;u--){var h=c+t/10+s.config.yaxis[r].labels.offsetY-1;s.globals.isBarHorizontal&&(h=a*u),"heatmap"===s.config.chart.type&&(h+=a/2);var d=l.drawLine(e+n.offsetX-i.width+i.offsetX,h+i.offsetY,e+n.offsetX+i.offsetX,h+i.offsetY,i.color);o.add(d),c+=a}}}}]),e}(),G=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"scaleSvgNode",value:function(e,t){var n=parseFloat(e.getAttributeNS(null,"width")),i=parseFloat(e.getAttributeNS(null,"height"));e.setAttributeNS(null,"width",n*t),e.setAttributeNS(null,"height",i*t),e.setAttributeNS(null,"viewBox","0 0 "+n+" "+i)}},{key:"fixSvgStringForIe11",value:function(e){if(!b.isIE11())return e.replace(/&nbsp;/g,"&#160;");var t=0,n=e.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g,(function(e){return 2==++t?'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"':e}));return(n=n.replace(/xmlns:NS\d+=""/g,"")).replace(/NS\d+:(\w+:\w+=")/g,"$1")}},{key:"getSvgString",value:function(e){var t=this.w.globals.dom.Paper.svg();if(1!==e){var n=this.w.globals.dom.Paper.node.cloneNode(!0);this.scaleSvgNode(n,e),t=(new XMLSerializer).serializeToString(n)}return this.fixSvgStringForIe11(t)}},{key:"cleanup",value:function(){var e=this.w,t=e.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"),n=e.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"),i=e.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");Array.prototype.forEach.call(i,(function(e){e.setAttribute("width",0)})),t&&t[0]&&(t[0].setAttribute("x",-500),t[0].setAttribute("x1",-500),t[0].setAttribute("x2",-500)),n&&n[0]&&(n[0].setAttribute("y",-100),n[0].setAttribute("y1",-100),n[0].setAttribute("y2",-100))}},{key:"svgUrl",value:function(){this.cleanup();var e=this.getSvgString(),t=new Blob([e],{type:"image/svg+xml;charset=utf-8"});return URL.createObjectURL(t)}},{key:"dataURI",value:function(e){var t=this;return new Promise((function(n){var i=t.w,r=e?e.scale||e.width/i.globals.svgWidth:1;t.cleanup();var a=document.createElement("canvas");a.width=i.globals.svgWidth*r,a.height=parseInt(i.globals.dom.elWrap.style.height,10)*r;var o="transparent"===i.config.chart.background?"#fff":i.config.chart.background,s=a.getContext("2d");s.fillStyle=o,s.fillRect(0,0,a.width*r,a.height*r);var l=t.getSvgString(r);if(window.canvg&&b.isIE11()){var c=window.canvg.Canvg.fromString(s,l,{ignoreClear:!0,ignoreDimensions:!0});c.start();var u=a.msToBlob();c.stop(),n({blob:u})}else{var h="data:image/svg+xml,"+encodeURIComponent(l),d=new Image;d.crossOrigin="anonymous",d.onload=function(){if(s.drawImage(d,0,0),a.msToBlob){var e=a.msToBlob();n({blob:e})}else{var t=a.toDataURL("image/png");n({imgURI:t})}},d.src=h}}))}},{key:"exportToSVG",value:function(){this.triggerDownload(this.svgUrl(),this.w.config.chart.toolbar.export.svg.filename,".svg")}},{key:"exportToPng",value:function(){var e=this;this.dataURI().then((function(t){var n=t.imgURI,i=t.blob;i?navigator.msSaveOrOpenBlob(i,e.w.globals.chartID+".png"):e.triggerDownload(n,e.w.config.chart.toolbar.export.png.filename,".png")}))}},{key:"exportToCSV",value:function(e){var t=this,n=e.series,i=e.columnDelimiter,r=e.lineDelimiter,a=void 0===r?"\n":r,o=this.w,s=[],l=[],c="",u=new W(this.ctx),h=new U(this.ctx),d=function(e){var n="";if(o.globals.axisCharts){if("category"===o.config.xaxis.type||o.config.xaxis.convertedCatToNumeric)if(o.globals.isBarHorizontal){var r=o.globals.yLabelFormatters[0],a=new N(t.ctx).getActiveConfigSeriesIndex();n=r(o.globals.labels[e],{seriesIndex:a,dataPointIndex:e,w:o})}else n=h.getLabel(o.globals.labels,o.globals.timescaleLabels,0,e).text;"datetime"===o.config.xaxis.type&&(o.config.xaxis.categories.length?n=o.config.xaxis.categories[e]:o.config.labels.length&&(n=o.config.labels[e]))}else n=o.config.labels[e];return Array.isArray(n)&&(n=n.join(" ")),b.isNumber(n)?n:n.split(i).join("")};s.push(o.config.chart.toolbar.export.csv.headerCategory),n.map((function(e,t){var n=e.name?e.name:"series-".concat(t);o.globals.axisCharts&&s.push(n.split(i).join("")?n.split(i).join(""):"series-".concat(t))})),o.globals.axisCharts||(s.push(o.config.chart.toolbar.export.csv.headerValue),l.push(s.join(i))),n.map((function(e,t){o.globals.axisCharts?function(e,t){if(s.length&&0===t&&l.push(s.join(i)),e.data&&e.data.length)for(var r=0;r<e.data.length;r++){s=[];var a=d(r);if(a||(u.isFormatXY()?a=n[t].data[r].x:u.isFormat2DArray()&&(a=n[t].data[r]?n[t].data[r][0]:"")),0===t){s.push((h=a,"datetime"===o.config.xaxis.type&&String(h).length>=10?o.config.chart.toolbar.export.csv.dateFormatter(a):b.isNumber(a)?a:a.split(i).join("")));for(var c=0;c<o.globals.series.length;c++)s.push(o.globals.series[c][r])}("candlestick"===o.config.chart.type||e.type&&"candlestick"===e.type)&&(s.pop(),s.push(o.globals.seriesCandleO[t][r]),s.push(o.globals.seriesCandleH[t][r]),s.push(o.globals.seriesCandleL[t][r]),s.push(o.globals.seriesCandleC[t][r])),("boxPlot"===o.config.chart.type||e.type&&"boxPlot"===e.type)&&(s.pop(),s.push(o.globals.seriesCandleO[t][r]),s.push(o.globals.seriesCandleH[t][r]),s.push(o.globals.seriesCandleM[t][r]),s.push(o.globals.seriesCandleL[t][r]),s.push(o.globals.seriesCandleC[t][r])),"rangeBar"===o.config.chart.type&&(s.pop(),s.push(o.globals.seriesRangeStart[t][r]),s.push(o.globals.seriesRangeEnd[t][r])),s.length&&l.push(s.join(i))}var h}(e,t):((s=[]).push(o.globals.labels[t].split(i).join("")),s.push(o.globals.series[t]),l.push(s.join(i)))})),c+=l.join(a),this.triggerDownload("data:text/csv; charset=utf-8,"+encodeURIComponent("\ufeff"+c),o.config.chart.toolbar.export.csv.filename,".csv")}},{key:"triggerDownload",value:function(e,t,n){var i=document.createElement("a");i.href=e,i.download=(t||this.w.globals.chartID)+n,document.body.appendChild(i),i.click(),document.body.removeChild(i)}}]),e}(),q=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.axesUtils=new U(t),this.xaxisLabels=n.globals.labels.slice(),n.globals.timescaleLabels.length>0&&!n.globals.isBarHorizontal&&(this.xaxisLabels=n.globals.timescaleLabels.slice()),n.config.xaxis.overwriteCategories&&(this.xaxisLabels=n.config.xaxis.overwriteCategories),this.drawnLabels=[],this.drawnLabelsRects=[],"top"===n.config.xaxis.position?this.offY=0:this.offY=n.globals.gridHeight+1,this.offY=this.offY+n.config.xaxis.axisBorder.offsetY,this.isCategoryBarHorizontal="bar"===n.config.chart.type&&n.config.plotOptions.bar.horizontal,this.xaxisFontSize=n.config.xaxis.labels.style.fontSize,this.xaxisFontFamily=n.config.xaxis.labels.style.fontFamily,this.xaxisForeColors=n.config.xaxis.labels.style.colors,this.xaxisBorderWidth=n.config.xaxis.axisBorder.width,this.isCategoryBarHorizontal&&(this.xaxisBorderWidth=n.config.yaxis[0].axisBorder.width.toString()),this.xaxisBorderWidth.indexOf("%")>-1?this.xaxisBorderWidth=n.globals.gridWidth*parseInt(this.xaxisBorderWidth,10)/100:this.xaxisBorderWidth=parseInt(this.xaxisBorderWidth,10),this.xaxisBorderHeight=n.config.xaxis.axisBorder.height,this.yaxis=n.config.yaxis[0]}return c(e,[{key:"drawXaxis",value:function(){var e,t=this,n=this.w,i=new w(this.ctx),r=i.group({class:"apexcharts-xaxis",transform:"translate(".concat(n.config.xaxis.offsetX,", ").concat(n.config.xaxis.offsetY,")")}),a=i.group({class:"apexcharts-xaxis-texts-g",transform:"translate(".concat(n.globals.translateXAxisX,", ").concat(n.globals.translateXAxisY,")")});r.add(a);for(var o=n.globals.padHorizontal,s=[],l=0;l<this.xaxisLabels.length;l++)s.push(this.xaxisLabels[l]);var c=s.length;if(n.globals.isXNumeric){var u=c>1?c-1:c;e=n.globals.gridWidth/u,o=o+e/2+n.config.xaxis.labels.offsetX}else e=n.globals.gridWidth/s.length,o=o+e+n.config.xaxis.labels.offsetX;for(var h=function(r){var l=o-e/2+n.config.xaxis.labels.offsetX;0===r&&1===c&&e/2===o&&1===n.globals.dataPoints&&(l=n.globals.gridWidth/2);var u=t.axesUtils.getLabel(s,n.globals.timescaleLabels,l,r,t.drawnLabels,t.xaxisFontSize),h=28;if(n.globals.rotateXLabels&&(h=22),(u=void 0!==n.config.xaxis.tickAmount&&"dataPoints"!==n.config.xaxis.tickAmount&&"datetime"!==n.config.xaxis.type?t.axesUtils.checkLabelBasedOnTickamount(r,u,c):t.axesUtils.checkForOverflowingLabels(r,u,c,t.drawnLabels,t.drawnLabelsRects)).text&&n.globals.xaxisLabelsCount++,n.config.xaxis.labels.show){var d=i.drawText({x:u.x,y:t.offY+n.config.xaxis.labels.offsetY+h-("top"===n.config.xaxis.position?n.globals.xAxisHeight+n.config.xaxis.axisTicks.height-2:0),text:u.text,textAnchor:"middle",fontWeight:u.isBold?600:n.config.xaxis.labels.style.fontWeight,fontSize:t.xaxisFontSize,fontFamily:t.xaxisFontFamily,foreColor:Array.isArray(t.xaxisForeColors)?n.config.xaxis.convertedCatToNumeric?t.xaxisForeColors[n.globals.minX+r-1]:t.xaxisForeColors[r]:t.xaxisForeColors,isPlainText:!1,cssClass:"apexcharts-xaxis-label "+n.config.xaxis.labels.style.cssClass});a.add(d);var f=document.createElementNS(n.globals.SVGNS,"title");f.textContent=Array.isArray(u.text)?u.text.join(" "):u.text,d.node.appendChild(f),""!==u.text&&(t.drawnLabels.push(u.text),t.drawnLabelsRects.push(u))}o+=e},d=0;d<=c-1;d++)h(d);if(void 0!==n.config.xaxis.title.text){var f=i.group({class:"apexcharts-xaxis-title"}),p=i.drawText({x:n.globals.gridWidth/2+n.config.xaxis.title.offsetX,y:this.offY+parseFloat(this.xaxisFontSize)+n.globals.xAxisLabelsHeight+n.config.xaxis.title.offsetY,text:n.config.xaxis.title.text,textAnchor:"middle",fontSize:n.config.xaxis.title.style.fontSize,fontFamily:n.config.xaxis.title.style.fontFamily,fontWeight:n.config.xaxis.title.style.fontWeight,foreColor:n.config.xaxis.title.style.color,cssClass:"apexcharts-xaxis-title-text "+n.config.xaxis.title.style.cssClass});f.add(p),r.add(f)}if(n.config.xaxis.axisBorder.show){var g=n.globals.barPadForNumericAxis,m=i.drawLine(n.globals.padHorizontal+n.config.xaxis.axisBorder.offsetX-g,this.offY,this.xaxisBorderWidth+g,this.offY,n.config.xaxis.axisBorder.color,0,this.xaxisBorderHeight);r.add(m)}return r}},{key:"drawXaxisInversed",value:function(e){var t,n,i=this,r=this.w,a=new w(this.ctx),o=r.config.yaxis[0].opposite?r.globals.translateYAxisX[e]:0,s=a.group({class:"apexcharts-yaxis apexcharts-xaxis-inversed",rel:e}),l=a.group({class:"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",transform:"translate("+o+", 0)"});s.add(l);var c=[];if(r.config.yaxis[e].show)for(var u=0;u<this.xaxisLabels.length;u++)c.push(this.xaxisLabels[u]);t=r.globals.gridHeight/c.length,n=-t/2.2;var h=r.globals.yLabelFormatters[0],d=r.config.yaxis[0].labels;if(d.show)for(var f=function(o){var s=void 0===c[o]?"":c[o];s=h(s,{seriesIndex:e,dataPointIndex:o,w:r});var u=i.axesUtils.getYAxisForeColor(d.style.colors,e),f=0;Array.isArray(s)&&(f=s.length/2*parseInt(d.style.fontSize,10));var p=a.drawText({x:d.offsetX-15,y:n+t+d.offsetY-f,text:s,textAnchor:i.yaxis.opposite?"start":"end",foreColor:Array.isArray(u)?u[o]:u,fontSize:d.style.fontSize,fontFamily:d.style.fontFamily,fontWeight:d.style.fontWeight,isPlainText:!1,cssClass:"apexcharts-yaxis-label "+d.style.cssClass});l.add(p);var g=document.createElementNS(r.globals.SVGNS,"title");if(g.textContent=Array.isArray(s)?s.join(" "):s,p.node.appendChild(g),0!==r.config.yaxis[e].labels.rotate){var m=a.rotateAroundCenter(p.node);p.node.setAttribute("transform","rotate(".concat(r.config.yaxis[e].labels.rotate," 0 ").concat(m.y,")"))}n+=t},p=0;p<=c.length-1;p++)f(p);if(void 0!==r.config.yaxis[0].title.text){var g=a.group({class:"apexcharts-yaxis-title apexcharts-xaxis-title-inversed",transform:"translate("+o+", 0)"}),m=a.drawText({x:0,y:r.globals.gridHeight/2,text:r.config.yaxis[0].title.text,textAnchor:"middle",foreColor:r.config.yaxis[0].title.style.color,fontSize:r.config.yaxis[0].title.style.fontSize,fontWeight:r.config.yaxis[0].title.style.fontWeight,fontFamily:r.config.yaxis[0].title.style.fontFamily,cssClass:"apexcharts-yaxis-title-text "+r.config.yaxis[0].title.style.cssClass});g.add(m),s.add(g)}var v=0;this.isCategoryBarHorizontal&&r.config.yaxis[0].opposite&&(v=r.globals.gridWidth);var b=r.config.xaxis.axisBorder;if(b.show){var x=a.drawLine(r.globals.padHorizontal+b.offsetX+v,1+b.offsetY,r.globals.padHorizontal+b.offsetX+v,r.globals.gridHeight+b.offsetY,b.color,0);s.add(x)}return r.config.yaxis[0].axisTicks.show&&this.axesUtils.drawYAxisTicks(v,c.length,r.config.yaxis[0].axisBorder,r.config.yaxis[0].axisTicks,0,t,s),s}},{key:"drawXaxisTicks",value:function(e,t){var n=this.w,i=e;if(!(e<0||e-2>n.globals.gridWidth)){var r=this.offY+n.config.xaxis.axisTicks.offsetY,a=r+n.config.xaxis.axisTicks.height;if("top"===n.config.xaxis.position&&(a=r-n.config.xaxis.axisTicks.height),n.config.xaxis.axisTicks.show){var o=new w(this.ctx).drawLine(e+n.config.xaxis.axisTicks.offsetX,r+n.config.xaxis.offsetY,i+n.config.xaxis.axisTicks.offsetX,a+n.config.xaxis.offsetY,n.config.xaxis.axisTicks.color);t.add(o),o.node.classList.add("apexcharts-xaxis-tick")}}}},{key:"getXAxisTicksPositions",value:function(){var e=this.w,t=[],n=this.xaxisLabels.length,i=e.globals.padHorizontal;if(e.globals.timescaleLabels.length>0)for(var r=0;r<n;r++)i=this.xaxisLabels[r].position,t.push(i);else for(var a=n,o=0;o<a;o++){var s=a;e.globals.isXNumeric&&"bar"!==e.config.chart.type&&(s-=1),i+=e.globals.gridWidth/s,t.push(i)}return t}},{key:"xAxisLabelCorrections",value:function(){var e=this.w,t=new w(this.ctx),n=e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),i=e.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text"),r=e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),a=e.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");if(e.globals.rotateXLabels||e.config.xaxis.labels.rotateAlways)for(var o=0;o<i.length;o++){var s=t.rotateAroundCenter(i[o]);s.y=s.y-1,s.x=s.x+1,i[o].setAttribute("transform","rotate(".concat(e.config.xaxis.labels.rotate," ").concat(s.x," ").concat(s.y,")")),i[o].setAttribute("text-anchor","end"),n.setAttribute("transform","translate(0, ".concat(-10,")"));var l=i[o].childNodes;e.config.xaxis.labels.trim&&Array.prototype.forEach.call(l,(function(n){t.placeTextWithEllipsis(n,n.textContent,e.globals.xAxisLabelsHeight-("bottom"===e.config.legend.position?20:10))}))}else!function(){for(var n=e.globals.gridWidth/(e.globals.labels.length+1),r=0;r<i.length;r++){var a=i[r].childNodes;e.config.xaxis.labels.trim&&"datetime"!==e.config.xaxis.type&&Array.prototype.forEach.call(a,(function(e){t.placeTextWithEllipsis(e,e.textContent,n)}))}}();if(r.length>0){var c=r[r.length-1].getBBox(),u=r[0].getBBox();c.x<-20&&r[r.length-1].parentNode.removeChild(r[r.length-1]),u.x+u.width>e.globals.gridWidth&&!e.globals.isBarHorizontal&&r[0].parentNode.removeChild(r[0]);for(var h=0;h<a.length;h++)t.placeTextWithEllipsis(a[h],a[h].textContent,e.config.yaxis[0].labels.maxWidth-2*parseFloat(e.config.yaxis[0].title.style.fontSize)-20)}}}]),e}(),$=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.xaxisLabels=n.globals.labels.slice(),this.axesUtils=new U(t),this.isRangeBar=n.globals.seriesRangeBar.length,n.globals.timescaleLabels.length>0&&(this.xaxisLabels=n.globals.timescaleLabels.slice())}return c(e,[{key:"drawGridArea",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.w,n=new w(this.ctx);null===e&&(e=n.group({class:"apexcharts-grid"}));var i=n.drawLine(t.globals.padHorizontal,1,t.globals.padHorizontal,t.globals.gridHeight,"transparent"),r=n.drawLine(t.globals.padHorizontal,t.globals.gridHeight,t.globals.gridWidth,t.globals.gridHeight,"transparent");return e.add(r),e.add(i),e}},{key:"drawGrid",value:function(){var e=null;return this.w.globals.axisCharts&&(e=this.renderGrid(),this.drawGridArea(e.el)),e}},{key:"createGridMask",value:function(){var e=this.w,t=e.globals,n=new w(this.ctx),i=Array.isArray(e.config.stroke.width)?0:e.config.stroke.width;if(Array.isArray(e.config.stroke.width)){var r=0;e.config.stroke.width.forEach((function(e){r=Math.max(r,e)})),i=r}t.dom.elGridRectMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elGridRectMask.setAttribute("id","gridRectMask".concat(t.cuid)),t.dom.elGridRectMarkerMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elGridRectMarkerMask.setAttribute("id","gridRectMarkerMask".concat(t.cuid)),t.dom.elForecastMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elForecastMask.setAttribute("id","forecastMask".concat(t.cuid)),t.dom.elNonForecastMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elNonForecastMask.setAttribute("id","nonForecastMask".concat(t.cuid));var a=e.config.chart.type,o=0,s=0;("bar"===a||"rangeBar"===a||"candlestick"===a||"boxPlot"===a||e.globals.comboBarCount>0)&&e.globals.isXNumeric&&!e.globals.isBarHorizontal&&(o=e.config.grid.padding.left,s=e.config.grid.padding.right,t.barPadForNumericAxis>o&&(o=t.barPadForNumericAxis,s=t.barPadForNumericAxis)),t.dom.elGridRect=n.drawRect(-i/2-o-2,-i/2,t.gridWidth+i+s+o+4,t.gridHeight+i,0,"#fff"),new A(this).getLargestMarkerSize();var l=e.globals.markers.largestSize+1;t.dom.elGridRectMarker=n.drawRect(2*-l,2*-l,t.gridWidth+4*l,t.gridHeight+4*l,0,"#fff"),t.dom.elGridRectMask.appendChild(t.dom.elGridRect.node),t.dom.elGridRectMarkerMask.appendChild(t.dom.elGridRectMarker.node);var c=t.dom.baseEl.querySelector("defs");c.appendChild(t.dom.elGridRectMask),c.appendChild(t.dom.elForecastMask),c.appendChild(t.dom.elNonForecastMask),c.appendChild(t.dom.elGridRectMarkerMask)}},{key:"_drawGridLines",value:function(e){var t=e.i,n=e.x1,i=e.y1,r=e.x2,a=e.y2,o=e.xCount,s=e.parent,l=this.w;0===t&&l.globals.skipFirstTimelinelabel||t===o-1&&l.globals.skipLastTimelinelabel&&!l.config.xaxis.labels.formatter||"radar"===l.config.chart.type||(l.config.grid.xaxis.lines.show&&this._drawGridLine({x1:n,y1:i,x2:r,y2:a,parent:s}),new q(this.ctx).drawXaxisTicks(n,this.elg))}},{key:"_drawGridLine",value:function(e){var t=e.x1,n=e.y1,i=e.x2,r=e.y2,a=e.parent,o=this.w,s=a.node.classList.contains("apexcharts-gridlines-horizontal"),l=o.config.grid.strokeDashArray,c=o.globals.barPadForNumericAxis,u=new w(this).drawLine(t-(s?c:0),n,i+(s?c:0),r,o.config.grid.borderColor,l);u.node.classList.add("apexcharts-gridline"),a.add(u)}},{key:"_drawGridBandRect",value:function(e){var t=e.c,n=e.x1,i=e.y1,r=e.x2,a=e.y2,o=e.type,s=this.w,l=new w(this.ctx),c=s.globals.barPadForNumericAxis;if("column"!==o||"datetime"!==s.config.xaxis.type){var u=s.config.grid[o].colors[t],h=l.drawRect(n-("row"===o?c:0),i,r+("row"===o?2*c:0),a,0,u,s.config.grid[o].opacity);this.elg.add(h),h.attr("clip-path","url(#gridRectMask".concat(s.globals.cuid,")")),h.node.classList.add("apexcharts-grid-".concat(o))}}},{key:"_drawXYLines",value:function(e){var t=this,n=e.xCount,i=e.tickAmount,r=this.w;if(r.config.grid.xaxis.lines.show||r.config.xaxis.axisTicks.show){var a,o=r.globals.padHorizontal,s=r.globals.gridHeight;r.globals.timescaleLabels.length?function(e){for(var i=e.xC,r=e.x1,a=e.y1,o=e.x2,s=e.y2,l=0;l<i;l++)r=t.xaxisLabels[l].position,o=t.xaxisLabels[l].position,t._drawGridLines({i:l,x1:r,y1:a,x2:o,y2:s,xCount:n,parent:t.elgridLinesV})}({xC:n,x1:o,y1:0,x2:a,y2:s}):(r.globals.isXNumeric&&(n=r.globals.xAxisScale.result.length),r.config.xaxis.convertedCatToNumeric&&(n=r.globals.xaxisLabelsCount),function(e){var i=e.xC,a=e.x1,o=e.y1,s=e.x2,l=e.y2;if(void 0!==r.config.xaxis.tickAmount&&"dataPoints"!==r.config.xaxis.tickAmount)r.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach((function(e,i){var r=e.getBBox();t._drawGridLines({i,x1:r.x+r.width/2,y1:o,x2:r.x+r.width/2,y2:l,xCount:n,parent:t.elgridLinesV})}));else for(var c=0;c<i+(r.globals.isXNumeric?0:1);c++)0===c&&1===i&&1===r.globals.dataPoints&&(s=a=r.globals.gridWidth/2),t._drawGridLines({i:c,x1:a,y1:o,x2:s,y2:l,xCount:n,parent:t.elgridLinesV}),s=a+=r.globals.gridWidth/(r.globals.isXNumeric?i-1:i)}({xC:n,x1:o,y1:0,x2:a,y2:s}))}if(r.config.grid.yaxis.lines.show){var l=0,c=0,u=r.globals.gridWidth,h=i+1;this.isRangeBar&&(h=r.globals.labels.length);for(var d=0;d<h+(this.isRangeBar?1:0);d++)this._drawGridLine({x1:0,y1:l,x2:u,y2:c,parent:this.elgridLinesH}),c=l+=r.globals.gridHeight/(this.isRangeBar?h:i)}}},{key:"_drawInvertedXYLines",value:function(e){var t=e.xCount,n=this.w;if(n.config.grid.xaxis.lines.show||n.config.xaxis.axisTicks.show)for(var i,r=n.globals.padHorizontal,a=n.globals.gridHeight,o=0;o<t+1;o++)n.config.grid.xaxis.lines.show&&this._drawGridLine({x1:r,y1:0,x2:i,y2:a,parent:this.elgridLinesV}),new q(this.ctx).drawXaxisTicks(r,this.elg),i=r=r+n.globals.gridWidth/t+.3;if(n.config.grid.yaxis.lines.show)for(var s=0,l=0,c=n.globals.gridWidth,u=0;u<n.globals.dataPoints+1;u++)this._drawGridLine({x1:0,y1:s,x2:c,y2:l,parent:this.elgridLinesH}),l=s+=n.globals.gridHeight/n.globals.dataPoints}},{key:"renderGrid",value:function(){var e=this.w,t=new w(this.ctx);this.elg=t.group({class:"apexcharts-grid"}),this.elgridLinesH=t.group({class:"apexcharts-gridlines-horizontal"}),this.elgridLinesV=t.group({class:"apexcharts-gridlines-vertical"}),this.elg.add(this.elgridLinesH),this.elg.add(this.elgridLinesV),e.config.grid.show||(this.elgridLinesV.hide(),this.elgridLinesH.hide());for(var n,i=e.globals.yAxisScale.length?e.globals.yAxisScale[0].result.length-1:5,r=0;r<e.globals.series.length&&(void 0!==e.globals.yAxisScale[r]&&(i=e.globals.yAxisScale[r].result.length-1),!(i>2));r++);return!e.globals.isBarHorizontal||this.isRangeBar?(n=this.xaxisLabels.length,this.isRangeBar&&(i=e.globals.labels.length,e.config.xaxis.tickAmount&&e.config.xaxis.labels.formatter&&(n=e.config.xaxis.tickAmount)),this._drawXYLines({xCount:n,tickAmount:i})):(n=i,i=e.globals.xTickAmount,this._drawInvertedXYLines({xCount:n,tickAmount:i})),this.drawGridBands(n,i),{el:this.elg,xAxisTickWidth:e.globals.gridWidth/n}}},{key:"drawGridBands",value:function(e,t){var n=this.w;if(void 0!==n.config.grid.row.colors&&n.config.grid.row.colors.length>0)for(var i=0,r=n.globals.gridHeight/t,a=n.globals.gridWidth,o=0,s=0;o<t;o++,s++)s>=n.config.grid.row.colors.length&&(s=0),this._drawGridBandRect({c:s,x1:0,y1:i,x2:a,y2:r,type:"row"}),i+=n.globals.gridHeight/t;if(void 0!==n.config.grid.column.colors&&n.config.grid.column.colors.length>0)for(var l=n.globals.isBarHorizontal||"category"!==n.config.xaxis.type&&!n.config.xaxis.convertedCatToNumeric?e:e-1,c=n.globals.padHorizontal,u=n.globals.padHorizontal+n.globals.gridWidth/l,h=n.globals.gridHeight,d=0,f=0;d<e;d++,f++)f>=n.config.grid.column.colors.length&&(f=0),this._drawGridBandRect({c:f,x1:c,y1:0,x2:u,y2:h,type:"column"}),c+=n.globals.gridWidth/l}}]),e}(),Z=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"niceScale",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4?arguments[4]:void 0,a=this.w,o=Math.abs(t-e);if("dataPoints"===(n=this._adjustTicksForSmallRange(n,i,o))&&(n=a.globals.dataPoints-1),e===Number.MIN_VALUE&&0===t||!b.isNumber(e)&&!b.isNumber(t)||e===Number.MIN_VALUE&&t===-Number.MAX_VALUE){e=0,t=n;var s=this.linearScale(e,t,n);return s}e>t?(console.warn("axis.min cannot be greater than axis.max"),t=e+.1):e===t&&(e=0===e?0:e-.5,t=0===t?2:t+.5);var l=[];o<1&&r&&("candlestick"===a.config.chart.type||"candlestick"===a.config.series[i].type||"boxPlot"===a.config.chart.type||"boxPlot"===a.config.series[i].type||a.globals.isRangeData)&&(t*=1.01);var c=n+1;c<2?c=2:c>2&&(c-=2);var u=o/c,h=Math.floor(b.log10(u)),d=Math.pow(10,h),f=Math.round(u/d);f<1&&(f=1);var p=f*d,g=p*Math.floor(e/p),m=p*Math.ceil(t/p),v=g;if(r&&o>2){for(;l.push(v),!((v+=p)>m););return{result:l,niceMin:l[0],niceMax:l[l.length-1]}}var x=e;(l=[]).push(x);for(var y=Math.abs(t-e)/n,w=0;w<=n;w++)x+=y,l.push(x);return l[l.length-2]>=t&&l.pop(),{result:l,niceMin:l[0],niceMax:l[l.length-1]}}},{key:"linearScale",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,i=arguments.length>3?arguments[3]:void 0,r=Math.abs(t-e);"dataPoints"===(n=this._adjustTicksForSmallRange(n,i,r))&&(n=this.w.globals.dataPoints-1);var a=r/n;n===Number.MAX_VALUE&&(n=10,a=1);for(var o=[],s=e;n>=0;)o.push(s),s+=a,n-=1;return{result:o,niceMin:o[0],niceMax:o[o.length-1]}}},{key:"logarithmicScale",value:function(e,t,n){for(var i=[],r=Math.ceil(Math.log(t)/Math.log(n))+1,a=0;a<r;a++)i.push(Math.pow(n,a));return 0===e&&i.unshift(e),{result:i,niceMin:i[0],niceMax:i[i.length-1]}}},{key:"_adjustTicksForSmallRange",value:function(e,t,n){var i=e;if(void 0!==t&&this.w.config.yaxis[t].labels.formatter&&void 0===this.w.config.yaxis[t].tickAmount){var r=this.w.config.yaxis[t].labels.formatter(1);b.isNumber(Number(r))&&!b.isFloat(r)&&(i=Math.ceil(n))}return i<e?i:e}},{key:"setYScaleForIndex",value:function(e,t,n){var i=this.w.globals,r=this.w.config,a=i.isBarHorizontal?r.xaxis:r.yaxis[e];void 0===i.yAxisScale[e]&&(i.yAxisScale[e]=[]);var o=Math.abs(n-t);if(a.logarithmic&&o<=5&&(i.invalidLogScale=!0),a.logarithmic&&o>5)i.allSeriesCollapsed=!1,i.yAxisScale[e]=this.logarithmicScale(t,n,a.logBase);else if(n!==-Number.MAX_VALUE&&b.isNumber(n))if(i.allSeriesCollapsed=!1,void 0===a.min&&void 0===a.max||a.forceNiceScale){var s=void 0===r.yaxis[e].max&&void 0===r.yaxis[e].min||r.yaxis[e].forceNiceScale;i.yAxisScale[e]=this.niceScale(t,n,a.tickAmount?a.tickAmount:o<5&&o>1?o+1:5,e,s)}else i.yAxisScale[e]=this.linearScale(t,n,a.tickAmount,e);else i.yAxisScale[e]=this.linearScale(0,5,5)}},{key:"setXScale",value:function(e,t){var n=this.w,i=n.globals,r=n.config.xaxis,a=Math.abs(t-e);return t!==-Number.MAX_VALUE&&b.isNumber(t)?i.xAxisScale=this.linearScale(e,t,r.tickAmount?r.tickAmount:a<5&&a>1?a+1:5,0):i.xAxisScale=this.linearScale(0,5,5),i.xAxisScale}},{key:"setMultipleYScales",value:function(){var e=this,t=this.w.globals,n=this.w.config,i=t.minYArr.concat([]),r=t.maxYArr.concat([]),a=[];n.yaxis.forEach((function(t,o){var s=o;n.series.forEach((function(e,n){e.name===t.seriesName&&(s=n,o!==n?a.push({index:n,similarIndex:o,alreadyExists:!0}):a.push({index:n}))}));var l=i[s],c=r[s];e.setYScaleForIndex(o,l,c)})),this.sameScaleInMultipleAxes(i,r,a)}},{key:"sameScaleInMultipleAxes",value:function(e,t,n){var i=this,r=this.w.config,a=this.w.globals,o=[];n.forEach((function(e){e.alreadyExists&&(void 0===o[e.index]&&(o[e.index]=[]),o[e.index].push(e.index),o[e.index].push(e.similarIndex))})),a.yAxisSameScaleIndices=o,o.forEach((function(e,t){o.forEach((function(n,i){var r,a;t!==i&&(r=e,a=n,r.filter((function(e){return-1!==a.indexOf(e)}))).length>0&&(o[t]=o[t].concat(o[i]))}))}));var s=o.map((function(e){return e.filter((function(t,n){return e.indexOf(t)===n}))})).map((function(e){return e.sort()}));o=o.filter((function(e){return!!e}));var l=s.slice(),c=l.map((function(e){return JSON.stringify(e)}));l=l.filter((function(e,t){return c.indexOf(JSON.stringify(e))===t}));var u=[],h=[];e.forEach((function(e,n){l.forEach((function(i,r){i.indexOf(n)>-1&&(void 0===u[r]&&(u[r]=[],h[r]=[]),u[r].push({key:n,value:e}),h[r].push({key:n,value:t[n]}))}))}));var d=Array.apply(null,Array(l.length)).map(Number.prototype.valueOf,Number.MIN_VALUE),f=Array.apply(null,Array(l.length)).map(Number.prototype.valueOf,-Number.MAX_VALUE);u.forEach((function(e,t){e.forEach((function(e,n){d[t]=Math.min(e.value,d[t])}))})),h.forEach((function(e,t){e.forEach((function(e,n){f[t]=Math.max(e.value,f[t])}))})),e.forEach((function(e,t){h.forEach((function(e,n){var o=d[n],s=f[n];r.chart.stacked&&(s=0,e.forEach((function(e,t){e.value!==-Number.MAX_VALUE&&(s+=e.value),o!==Number.MIN_VALUE&&(o+=u[n][t].value)}))),e.forEach((function(n,l){e[l].key===t&&(void 0!==r.yaxis[t].min&&(o="function"==typeof r.yaxis[t].min?r.yaxis[t].min(a.minY):r.yaxis[t].min),void 0!==r.yaxis[t].max&&(s="function"==typeof r.yaxis[t].max?r.yaxis[t].max(a.maxY):r.yaxis[t].max),i.setYScaleForIndex(t,o,s))}))}))}))}},{key:"autoScaleY",value:function(e,t,n){e||(e=this);var i=e.w;if(i.globals.isMultipleYAxis||i.globals.collapsedSeries.length)return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."),t;var r=i.globals.seriesX[0],a=i.config.chart.stacked;return t.forEach((function(e,o){for(var s=0,l=0;l<r.length;l++)if(r[l]>=n.xaxis.min){s=l;break}var c,u,h=i.globals.minYArr[o],d=i.globals.maxYArr[o],f=i.globals.stackedSeriesTotals;i.globals.series.forEach((function(o,l){var p=o[s];a?(p=f[s],c=u=p,f.forEach((function(e,t){r[t]<=n.xaxis.max&&r[t]>=n.xaxis.min&&(e>u&&null!==e&&(u=e),o[t]<c&&null!==o[t]&&(c=o[t]))}))):(c=u=p,o.forEach((function(e,t){if(r[t]<=n.xaxis.max&&r[t]>=n.xaxis.min){var a=e,o=e;i.globals.series.forEach((function(n,i){null!==e&&(a=Math.min(n[t],a),o=Math.max(n[t],o))})),o>u&&null!==o&&(u=o),a<c&&null!==a&&(c=a)}}))),void 0===c&&void 0===u&&(c=h,u=d),(u*=u<0?.9:1.1)<0&&u<d&&(u=d),(c*=c<0?1.1:.9)<0&&c>h&&(c=h),t.length>1?(t[l].min=void 0===e.min?c:e.min,t[l].max=void 0===e.max?u:e.max):(t[0].min=void 0===e.min?c:e.min,t[0].max=void 0===e.max?u:e.max)}))})),t}}]),e}(),Q=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.scales=new Z(t)}return c(e,[{key:"init",value:function(){this.setYRange(),this.setXRange(),this.setZRange()}},{key:"getMinYMaxY",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-Number.MAX_VALUE,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=this.w.config,a=this.w.globals,o=-Number.MAX_VALUE,s=Number.MIN_VALUE;null===i&&(i=e+1);var l=a.series,c=l,u=l;"candlestick"===r.chart.type?(c=a.seriesCandleL,u=a.seriesCandleH):"boxPlot"===r.chart.type?(c=a.seriesCandleO,u=a.seriesCandleC):a.isRangeData&&(c=a.seriesRangeStart,u=a.seriesRangeEnd);for(var h=e;h<i;h++){a.dataPoints=Math.max(a.dataPoints,l[h].length),a.categoryLabels.length&&(a.dataPoints=a.categoryLabels.filter((function(e){return void 0!==e})).length);for(var d=0;d<a.series[h].length;d++){var f=l[h][d];null!==f&&b.isNumber(f)?(void 0!==u[h][d]&&(o=Math.max(o,u[h][d]),t=Math.min(t,u[h][d])),void 0!==c[h][d]&&(t=Math.min(t,c[h][d]),n=Math.max(n,c[h][d])),"candlestick"!==this.w.config.chart.type&&"boxPlot"!==this.w.config.chart.type||(void 0!==a.seriesCandleC[h][d]&&(o=Math.max(o,a.seriesCandleO[h][d]),o=Math.max(o,a.seriesCandleH[h][d]),o=Math.max(o,a.seriesCandleL[h][d]),o=Math.max(o,a.seriesCandleC[h][d]),"boxPlot"===this.w.config.chart.type&&(o=Math.max(o,a.seriesCandleM[h][d]))),!r.series[h].type||"candlestick"===r.series[h].type&&"boxPlot"===r.series[h].type||(o=Math.max(o,a.series[h][d]),t=Math.min(t,a.series[h][d])),n=o),a.seriesGoals[h]&&a.seriesGoals[h][d]&&Array.isArray(a.seriesGoals[h][d])&&a.seriesGoals[h][d].forEach((function(e){s!==Number.MIN_VALUE&&(s=Math.min(s,e.value),t=s),o=Math.max(o,e.value),n=o})),b.isFloat(f)&&(f=b.noExponents(f),a.yValueDecimal=Math.max(a.yValueDecimal,f.toString().split(".")[1].length)),s>c[h][d]&&c[h][d]<0&&(s=c[h][d])):a.hasNullValues=!0}}return"rangeBar"===r.chart.type&&a.seriesRangeStart.length&&a.isBarHorizontal&&(s=t),"bar"===r.chart.type&&(s<0&&o<0&&(o=0),s===Number.MIN_VALUE&&(s=0)),{minY:s,maxY:o,lowestY:t,highestY:n}}},{key:"setYRange",value:function(){var e=this.w.globals,t=this.w.config;e.maxY=-Number.MAX_VALUE,e.minY=Number.MIN_VALUE;var n=Number.MAX_VALUE;if(e.isMultipleYAxis)for(var i=0;i<e.series.length;i++){var r=this.getMinYMaxY(i,n,null,i+1);e.minYArr.push(r.minY),e.maxYArr.push(r.maxY),n=r.lowestY}var a=this.getMinYMaxY(0,n,null,e.series.length);if(e.minY=a.minY,e.maxY=a.maxY,n=a.lowestY,t.chart.stacked&&this._setStackedMinMax(),("line"===t.chart.type||"area"===t.chart.type||"candlestick"===t.chart.type||"boxPlot"===t.chart.type||"rangeBar"===t.chart.type&&!e.isBarHorizontal)&&e.minY===Number.MIN_VALUE&&n!==-Number.MAX_VALUE&&n!==e.maxY){var o=e.maxY-n;(n>=0&&n<=10||void 0!==t.yaxis[0].min||void 0!==t.yaxis[0].max)&&(o=0),e.minY=n-5*o/100,n>0&&e.minY<0&&(e.minY=0),e.maxY=e.maxY+5*o/100}return t.yaxis.forEach((function(t,n){void 0!==t.max&&("number"==typeof t.max?e.maxYArr[n]=t.max:"function"==typeof t.max&&(e.maxYArr[n]=t.max(e.isMultipleYAxis?e.maxYArr[n]:e.maxY)),e.maxY=e.maxYArr[n]),void 0!==t.min&&("number"==typeof t.min?e.minYArr[n]=t.min:"function"==typeof t.min&&(e.minYArr[n]=t.min(e.isMultipleYAxis?e.minYArr[n]===Number.MIN_VALUE?0:e.minYArr[n]:e.minY)),e.minY=e.minYArr[n])})),e.isBarHorizontal&&["min","max"].forEach((function(n){void 0!==t.xaxis[n]&&"number"==typeof t.xaxis[n]&&("min"===n?e.minY=t.xaxis[n]:e.maxY=t.xaxis[n])})),e.isMultipleYAxis?(this.scales.setMultipleYScales(),e.minY=n,e.yAxisScale.forEach((function(t,n){e.minYArr[n]=t.niceMin,e.maxYArr[n]=t.niceMax}))):(this.scales.setYScaleForIndex(0,e.minY,e.maxY),e.minY=e.yAxisScale[0].niceMin,e.maxY=e.yAxisScale[0].niceMax,e.minYArr[0]=e.yAxisScale[0].niceMin,e.maxYArr[0]=e.yAxisScale[0].niceMax),{minY:e.minY,maxY:e.maxY,minYArr:e.minYArr,maxYArr:e.maxYArr,yAxisScale:e.yAxisScale}}},{key:"setXRange",value:function(){var e=this.w.globals,t=this.w.config,n="numeric"===t.xaxis.type||"datetime"===t.xaxis.type||"category"===t.xaxis.type&&!e.noLabelsProvided||e.noLabelsProvided||e.isXNumeric;if(e.isXNumeric&&function(){for(var t=0;t<e.series.length;t++)if(e.labels[t])for(var n=0;n<e.labels[t].length;n++)null!==e.labels[t][n]&&b.isNumber(e.labels[t][n])&&(e.maxX=Math.max(e.maxX,e.labels[t][n]),e.initialMaxX=Math.max(e.maxX,e.labels[t][n]),e.minX=Math.min(e.minX,e.labels[t][n]),e.initialMinX=Math.min(e.minX,e.labels[t][n]))}(),e.noLabelsProvided&&0===t.xaxis.categories.length&&(e.maxX=e.labels[e.labels.length-1],e.initialMaxX=e.labels[e.labels.length-1],e.minX=1,e.initialMinX=1),e.isXNumeric||e.noLabelsProvided||e.dataFormatXNumeric){var i;if(void 0===t.xaxis.tickAmount?(i=Math.round(e.svgWidth/150),"numeric"===t.xaxis.type&&e.dataPoints<30&&(i=e.dataPoints-1),i>e.dataPoints&&0!==e.dataPoints&&(i=e.dataPoints-1)):"dataPoints"===t.xaxis.tickAmount?(e.series.length>1&&(i=e.series[e.maxValsInArrayIndex].length-1),e.isXNumeric&&(i=e.maxX-e.minX-1)):i=t.xaxis.tickAmount,e.xTickAmount=i,void 0!==t.xaxis.max&&"number"==typeof t.xaxis.max&&(e.maxX=t.xaxis.max),void 0!==t.xaxis.min&&"number"==typeof t.xaxis.min&&(e.minX=t.xaxis.min),void 0!==t.xaxis.range&&(e.minX=e.maxX-t.xaxis.range),e.minX!==Number.MAX_VALUE&&e.maxX!==-Number.MAX_VALUE)if(t.xaxis.convertedCatToNumeric&&!e.dataFormatXNumeric){for(var r=[],a=e.minX-1;a<e.maxX;a++)r.push(a+1);e.xAxisScale={result:r,niceMin:r[0],niceMax:r[r.length-1]}}else e.xAxisScale=this.scales.setXScale(e.minX,e.maxX);else e.xAxisScale=this.scales.linearScale(1,i,i),e.noLabelsProvided&&e.labels.length>0&&(e.xAxisScale=this.scales.linearScale(1,e.labels.length,i-1),e.seriesX=e.labels.slice());n&&(e.labels=e.xAxisScale.result.slice())}return e.isBarHorizontal&&e.labels.length&&(e.xTickAmount=e.labels.length),this._handleSingleDataPoint(),this._getMinXDiff(),{minX:e.minX,maxX:e.maxX}}},{key:"setZRange",value:function(){var e=this.w.globals;if(e.isDataXYZ)for(var t=0;t<e.series.length;t++)if(void 0!==e.seriesZ[t])for(var n=0;n<e.seriesZ[t].length;n++)null!==e.seriesZ[t][n]&&b.isNumber(e.seriesZ[t][n])&&(e.maxZ=Math.max(e.maxZ,e.seriesZ[t][n]),e.minZ=Math.min(e.minZ,e.seriesZ[t][n]))}},{key:"_handleSingleDataPoint",value:function(){var e=this.w.globals,t=this.w.config;if(e.minX===e.maxX){var n=new D(this.ctx);if("datetime"===t.xaxis.type){var i=n.getDate(e.minX);t.xaxis.labels.datetimeUTC?i.setUTCDate(i.getUTCDate()-2):i.setDate(i.getDate()-2),e.minX=new Date(i).getTime();var r=n.getDate(e.maxX);t.xaxis.labels.datetimeUTC?r.setUTCDate(r.getUTCDate()+2):r.setDate(r.getDate()+2),e.maxX=new Date(r).getTime()}else("numeric"===t.xaxis.type||"category"===t.xaxis.type&&!e.noLabelsProvided)&&(e.minX=e.minX-2,e.initialMinX=e.minX,e.maxX=e.maxX+2,e.initialMaxX=e.maxX)}}},{key:"_getMinXDiff",value:function(){var e=this.w.globals;e.isXNumeric&&e.seriesX.forEach((function(t,n){1===t.length&&t.push(e.seriesX[e.maxValsInArrayIndex][e.seriesX[e.maxValsInArrayIndex].length-1]);var i=t.slice();i.sort((function(e,t){return e-t})),i.forEach((function(t,n){if(n>0){var r=t-i[n-1];r>0&&(e.minXDiff=Math.min(r,e.minXDiff))}})),1!==e.dataPoints&&e.minXDiff!==Number.MAX_VALUE||(e.minXDiff=.5)}))}},{key:"_setStackedMinMax",value:function(){var e=this.w.globals,t=[],n=[];if(e.series.length)for(var i=0;i<e.series[e.maxValsInArrayIndex].length;i++)for(var r=0,a=0,o=0;o<e.series.length;o++)null!==e.series[o][i]&&b.isNumber(e.series[o][i])&&(e.series[o][i]>0?r=r+parseFloat(e.series[o][i])+1e-4:a+=parseFloat(e.series[o][i])),o===e.series.length-1&&(t.push(r),n.push(a));for(var s=0;s<t.length;s++)e.maxY=Math.max(e.maxY,t[s]),e.minY=Math.min(e.minY,n[s])}}]),e}(),K=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.xaxisFontSize=n.config.xaxis.labels.style.fontSize,this.axisFontFamily=n.config.xaxis.labels.style.fontFamily,this.xaxisForeColors=n.config.xaxis.labels.style.colors,this.isCategoryBarHorizontal="bar"===n.config.chart.type&&n.config.plotOptions.bar.horizontal,this.xAxisoffX=0,"bottom"===n.config.xaxis.position&&(this.xAxisoffX=n.globals.gridHeight),this.drawnLabels=[],this.axesUtils=new U(t)}return c(e,[{key:"drawYaxis",value:function(e){var t=this,n=this.w,i=new w(this.ctx),r=n.config.yaxis[e].labels.style,a=r.fontSize,o=r.fontFamily,s=r.fontWeight,l=i.group({class:"apexcharts-yaxis",rel:e,transform:"translate("+n.globals.translateYAxisX[e]+", 0)"});if(this.axesUtils.isYAxisHidden(e))return l;var c=i.group({class:"apexcharts-yaxis-texts-g"});l.add(c);var u=n.globals.yAxisScale[e].result.length-1,h=n.globals.gridHeight/u,d=n.globals.translateY,f=n.globals.yLabelFormatters[e],p=n.globals.yAxisScale[e].result.slice();p=this.axesUtils.checkForReversedLabels(e,p);var g="";if(n.config.yaxis[e].labels.show)for(var m=function(l){var m=p[l];m=f(m,l,n);var v=n.config.yaxis[e].labels.padding;n.config.yaxis[e].opposite&&0!==n.config.yaxis.length&&(v*=-1);var b=t.axesUtils.getYAxisForeColor(r.colors,e),x=i.drawText({x:v,y:d+u/10+n.config.yaxis[e].labels.offsetY+1,text:m,textAnchor:n.config.yaxis[e].opposite?"start":"end",fontSize:a,fontFamily:o,fontWeight:s,foreColor:Array.isArray(b)?b[l]:b,isPlainText:!1,cssClass:"apexcharts-yaxis-label "+r.cssClass});l===u&&(g=x),c.add(x);var y=document.createElementNS(n.globals.SVGNS,"title");if(y.textContent=Array.isArray(m)?m.join(" "):m,x.node.appendChild(y),0!==n.config.yaxis[e].labels.rotate){var w=i.rotateAroundCenter(g.node),k=i.rotateAroundCenter(x.node);x.node.setAttribute("transform","rotate(".concat(n.config.yaxis[e].labels.rotate," ").concat(w.x," ").concat(k.y,")"))}d+=h},v=u;v>=0;v--)m(v);if(void 0!==n.config.yaxis[e].title.text){var b=i.group({class:"apexcharts-yaxis-title"}),x=0;n.config.yaxis[e].opposite&&(x=n.globals.translateYAxisX[e]);var y=i.drawText({x,y:n.globals.gridHeight/2+n.globals.translateY+n.config.yaxis[e].title.offsetY,text:n.config.yaxis[e].title.text,textAnchor:"end",foreColor:n.config.yaxis[e].title.style.color,fontSize:n.config.yaxis[e].title.style.fontSize,fontWeight:n.config.yaxis[e].title.style.fontWeight,fontFamily:n.config.yaxis[e].title.style.fontFamily,cssClass:"apexcharts-yaxis-title-text "+n.config.yaxis[e].title.style.cssClass});b.add(y),l.add(b)}var k=n.config.yaxis[e].axisBorder,S=31+k.offsetX;if(n.config.yaxis[e].opposite&&(S=-31-k.offsetX),k.show){var A=i.drawLine(S,n.globals.translateY+k.offsetY-2,S,n.globals.gridHeight+n.globals.translateY+k.offsetY+2,k.color,0,k.width);l.add(A)}return n.config.yaxis[e].axisTicks.show&&this.axesUtils.drawYAxisTicks(S,u,k,n.config.yaxis[e].axisTicks,e,h,l),l}},{key:"drawYaxisInversed",value:function(e){var t=this.w,n=new w(this.ctx),i=n.group({class:"apexcharts-xaxis apexcharts-yaxis-inversed"}),r=n.group({class:"apexcharts-xaxis-texts-g",transform:"translate(".concat(t.globals.translateXAxisX,", ").concat(t.globals.translateXAxisY,")")});i.add(r);var a=t.globals.yAxisScale[e].result.length-1,o=t.globals.gridWidth/a+.1,s=o+t.config.xaxis.labels.offsetX,l=t.globals.xLabelFormatter,c=t.globals.yAxisScale[e].result.slice(),u=t.globals.timescaleLabels;u.length>0&&(this.xaxisLabels=u.slice(),a=(c=u.slice()).length),c=this.axesUtils.checkForReversedLabels(e,c);var h=u.length;if(t.config.xaxis.labels.show)for(var d=h?0:a;h?d<h:d>=0;h?d++:d--){var f=c[d];f=l(f,d,t);var p=t.globals.gridWidth+t.globals.padHorizontal-(s-o+t.config.xaxis.labels.offsetX);if(u.length){var g=this.axesUtils.getLabel(c,u,p,d,this.drawnLabels,this.xaxisFontSize);p=g.x,f=g.text,this.drawnLabels.push(g.text),0===d&&t.globals.skipFirstTimelinelabel&&(f=""),d===c.length-1&&t.globals.skipLastTimelinelabel&&(f="")}var m=n.drawText({x:p,y:this.xAxisoffX+t.config.xaxis.labels.offsetY+30-("top"===t.config.xaxis.position?t.globals.xAxisHeight+t.config.xaxis.axisTicks.height-2:0),text:f,textAnchor:"middle",foreColor:Array.isArray(this.xaxisForeColors)?this.xaxisForeColors[e]:this.xaxisForeColors,fontSize:this.xaxisFontSize,fontFamily:this.xaxisFontFamily,fontWeight:t.config.xaxis.labels.style.fontWeight,isPlainText:!1,cssClass:"apexcharts-xaxis-label "+t.config.xaxis.labels.style.cssClass});r.add(m),m.tspan(f);var v=document.createElementNS(t.globals.SVGNS,"title");v.textContent=f,m.node.appendChild(v),s+=o}return this.inversedYAxisTitleText(i),this.inversedYAxisBorder(i),i}},{key:"inversedYAxisBorder",value:function(e){var t=this.w,n=new w(this.ctx),i=t.config.xaxis.axisBorder;if(i.show){var r=0;"bar"===t.config.chart.type&&t.globals.isXNumeric&&(r-=15);var a=n.drawLine(t.globals.padHorizontal+r+i.offsetX,this.xAxisoffX,t.globals.gridWidth,this.xAxisoffX,i.color,0,i.height);e.add(a)}}},{key:"inversedYAxisTitleText",value:function(e){var t=this.w,n=new w(this.ctx);if(void 0!==t.config.xaxis.title.text){var i=n.group({class:"apexcharts-xaxis-title apexcharts-yaxis-title-inversed"}),r=n.drawText({x:t.globals.gridWidth/2+t.config.xaxis.title.offsetX,y:this.xAxisoffX+parseFloat(this.xaxisFontSize)+parseFloat(t.config.xaxis.title.style.fontSize)+t.config.xaxis.title.offsetY+20,text:t.config.xaxis.title.text,textAnchor:"middle",fontSize:t.config.xaxis.title.style.fontSize,fontFamily:t.config.xaxis.title.style.fontFamily,fontWeight:t.config.xaxis.title.style.fontWeight,foreColor:t.config.xaxis.title.style.color,cssClass:"apexcharts-xaxis-title-text "+t.config.xaxis.title.style.cssClass});i.add(r),e.add(i)}}},{key:"yAxisTitleRotate",value:function(e,t){var n=this.w,i=new w(this.ctx),r={width:0,height:0},a={width:0,height:0},o=n.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(e,"'] .apexcharts-yaxis-texts-g"));null!==o&&(r=o.getBoundingClientRect());var s=n.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(e,"'] .apexcharts-yaxis-title text"));if(null!==s&&(a=s.getBoundingClientRect()),null!==s){var l=this.xPaddingForYAxisTitle(e,r,a,t);s.setAttribute("x",l.xPos-(t?10:0))}if(null!==s){var c=i.rotateAroundCenter(s);s.setAttribute("transform","rotate(".concat(t?-1*n.config.yaxis[e].title.rotate:n.config.yaxis[e].title.rotate," ").concat(c.x," ").concat(c.y,")"))}}},{key:"xPaddingForYAxisTitle",value:function(e,t,n,i){var r=this.w,a=0,o=0,s=10;return void 0===r.config.yaxis[e].title.text||e<0?{xPos:o,padd:0}:(i?(o=t.width+r.config.yaxis[e].title.offsetX+n.width/2+s/2,0===(a+=1)&&(o-=s/2)):(o=-1*t.width+r.config.yaxis[e].title.offsetX+s/2+n.width/2,r.globals.isBarHorizontal&&(s=25,o=-1*t.width-r.config.yaxis[e].title.offsetX-s)),{xPos:o,padd:s})}},{key:"setYAxisXPosition",value:function(e,t){var n=this.w,i=0,r=0,a=18,o=1;n.config.yaxis.length>1&&(this.multipleYs=!0),n.config.yaxis.map((function(s,l){var c=n.globals.ignoreYAxisIndexes.indexOf(l)>-1||!s.show||s.floating||0===e[l].width,u=e[l].width+t[l].width;s.opposite?n.globals.isBarHorizontal?(r=n.globals.gridWidth+n.globals.translateX-1,n.globals.translateYAxisX[l]=r-s.labels.offsetX):(r=n.globals.gridWidth+n.globals.translateX+o,c||(o=o+u+20),n.globals.translateYAxisX[l]=r-s.labels.offsetX+20):(i=n.globals.translateX-a,c||(a=a+u+20),n.globals.translateYAxisX[l]=i+s.labels.offsetX)}))}},{key:"setYAxisTextAlignments",value:function(){var e=this.w,t=e.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");(t=b.listToArray(t)).forEach((function(t,n){var i=e.config.yaxis[n];if(i&&void 0!==i.labels.align){var r=e.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(n,"'] .apexcharts-yaxis-texts-g")),a=e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(n,"'] .apexcharts-yaxis-label"));a=b.listToArray(a);var o=r.getBoundingClientRect();"left"===i.labels.align?(a.forEach((function(e,t){e.setAttribute("text-anchor","start")})),i.opposite||r.setAttribute("transform","translate(-".concat(o.width,", 0)"))):"center"===i.labels.align?(a.forEach((function(e,t){e.setAttribute("text-anchor","middle")})),r.setAttribute("transform","translate(".concat(o.width/2*(i.opposite?1:-1),", 0)"))):"right"===i.labels.align&&(a.forEach((function(e,t){e.setAttribute("text-anchor","end")})),i.opposite&&r.setAttribute("transform","translate(".concat(o.width,", 0)")))}}))}}]),e}(),J=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.documentEvent=b.bind(this.documentEvent,this)}return c(e,[{key:"addEventListener",value:function(e,t){var n=this.w;n.globals.events.hasOwnProperty(e)?n.globals.events[e].push(t):n.globals.events[e]=[t]}},{key:"removeEventListener",value:function(e,t){var n=this.w;if(n.globals.events.hasOwnProperty(e)){var i=n.globals.events[e].indexOf(t);-1!==i&&n.globals.events[e].splice(i,1)}}},{key:"fireEvent",value:function(e,t){var n=this.w;if(n.globals.events.hasOwnProperty(e)){t&&t.length||(t=[]);for(var i=n.globals.events[e],r=i.length,a=0;a<r;a++)i[a].apply(null,t)}}},{key:"setupEventHandlers",value:function(){var e=this,t=this.w,n=this.ctx,i=t.globals.dom.baseEl.querySelector(t.globals.chartClass);this.ctx.eventList.forEach((function(e){i.addEventListener(e,(function(e){var i=Object.assign({},t,{seriesIndex:t.globals.capturedSeriesIndex,dataPointIndex:t.globals.capturedDataPointIndex});"mousemove"===e.type||"touchmove"===e.type?"function"==typeof t.config.chart.events.mouseMove&&t.config.chart.events.mouseMove(e,n,i):"mouseleave"===e.type||"touchleave"===e.type?"function"==typeof t.config.chart.events.mouseLeave&&t.config.chart.events.mouseLeave(e,n,i):("mouseup"===e.type&&1===e.which||"touchend"===e.type)&&("function"==typeof t.config.chart.events.click&&t.config.chart.events.click(e,n,i),n.ctx.events.fireEvent("click",[e,n,i]))}),{capture:!1,passive:!0})})),this.ctx.eventList.forEach((function(n){t.globals.dom.baseEl.addEventListener(n,e.documentEvent,{passive:!0})})),this.ctx.core.setupBrushHandler()}},{key:"documentEvent",value:function(e){var t=this.w,n=e.target.className;if("click"===e.type){var i=t.globals.dom.baseEl.querySelector(".apexcharts-menu");i&&i.classList.contains("apexcharts-menu-open")&&"apexcharts-menu-icon"!==n&&i.classList.remove("apexcharts-menu-open")}t.globals.clientX="touchmove"===e.type?e.touches[0].clientX:e.clientX,t.globals.clientY="touchmove"===e.type?e.touches[0].clientY:e.clientY}}]),e}(),ee=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"setCurrentLocaleValues",value:function(e){var t=this.w.config.chart.locales;window.Apex.chart&&window.Apex.chart.locales&&window.Apex.chart.locales.length>0&&(t=this.w.config.chart.locales.concat(window.Apex.chart.locales));var n=t.filter((function(t){return t.name===e}))[0];if(!n)throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");var i=b.extend(T,n);this.w.globals.locale=i.options}}]),e}(),te=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"drawAxis",value:function(e,t){var n,i,r=this.w.globals,a=this.w.config,o=new q(this.ctx),s=new K(this.ctx);r.axisCharts&&"radar"!==e&&(r.isBarHorizontal?(i=s.drawYaxisInversed(0),n=o.drawXaxisInversed(0),r.dom.elGraphical.add(n),r.dom.elGraphical.add(i)):(n=o.drawXaxis(),r.dom.elGraphical.add(n),a.yaxis.map((function(e,t){-1===r.ignoreYAxisIndexes.indexOf(t)&&(i=s.drawYaxis(t),r.dom.Paper.add(i))}))))}}]),e}(),ne=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"drawXCrosshairs",value:function(){var e=this.w,t=new w(this.ctx),n=new y(this.ctx),i=e.config.xaxis.crosshairs.fill.gradient,r=e.config.xaxis.crosshairs.dropShadow,a=e.config.xaxis.crosshairs.fill.type,o=i.colorFrom,s=i.colorTo,l=i.opacityFrom,c=i.opacityTo,u=i.stops,h=r.enabled,d=r.left,f=r.top,p=r.blur,g=r.color,m=r.opacity,v=e.config.xaxis.crosshairs.fill.color;if(e.config.xaxis.crosshairs.show){"gradient"===a&&(v=t.drawGradient("vertical",o,s,l,c,null,u,null));var x=t.drawRect();1===e.config.xaxis.crosshairs.width&&(x=t.drawLine());var k=e.globals.gridHeight;(!b.isNumber(k)||k<0)&&(k=0);var S=e.config.xaxis.crosshairs.width;(!b.isNumber(S)||S<0)&&(S=0),x.attr({class:"apexcharts-xcrosshairs",x:0,y:0,y2:k,width:S,height:k,fill:v,filter:"none","fill-opacity":e.config.xaxis.crosshairs.opacity,stroke:e.config.xaxis.crosshairs.stroke.color,"stroke-width":e.config.xaxis.crosshairs.stroke.width,"stroke-dasharray":e.config.xaxis.crosshairs.stroke.dashArray}),h&&(x=n.dropShadow(x,{left:d,top:f,blur:p,color:g,opacity:m})),e.globals.dom.elGraphical.add(x)}}},{key:"drawYCrosshairs",value:function(){var e=this.w,t=new w(this.ctx),n=e.config.yaxis[0].crosshairs,i=e.globals.barPadForNumericAxis;if(e.config.yaxis[0].crosshairs.show){var r=t.drawLine(-i,0,e.globals.gridWidth+i,0,n.stroke.color,n.stroke.dashArray,n.stroke.width);r.attr({class:"apexcharts-ycrosshairs"}),e.globals.dom.elGraphical.add(r)}var a=t.drawLine(-i,0,e.globals.gridWidth+i,0,n.stroke.color,0,0);a.attr({class:"apexcharts-ycrosshairs-hidden"}),e.globals.dom.elGraphical.add(a)}}]),e}(),ie=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"checkResponsiveConfig",value:function(e){var t=this,n=this.w,i=n.config;if(0!==i.responsive.length){var r=i.responsive.slice();r.sort((function(e,t){return e.breakpoint>t.breakpoint?1:t.breakpoint>e.breakpoint?-1:0})).reverse();var a=new Y({}),o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=r[0].breakpoint,o=window.innerWidth>0?window.innerWidth:screen.width;if(o>i){var s=A.extendArrayProps(a,n.globals.initialConfig,n);e=b.extend(s,e),e=b.extend(n.config,e),t.overrideResponsiveOptions(e)}else for(var l=0;l<r.length;l++)o<r[l].breakpoint&&(e=A.extendArrayProps(a,r[l].options,n),e=b.extend(n.config,e),t.overrideResponsiveOptions(e))};if(e){var s=A.extendArrayProps(a,e,n);s=b.extend(n.config,s),o(s=b.extend(s,e))}else o({})}}},{key:"overrideResponsiveOptions",value:function(e){var t=new Y(e).init({responsiveOverride:!0});this.w.config=t}}]),e}(),re=function(){function e(t){s(this,e),this.ctx=t,this.colors=[],this.w=t.w;var n=this.w;this.isColorFn=!1,this.isHeatmapDistributed="treemap"===n.config.chart.type&&n.config.plotOptions.treemap.distributed||"heatmap"===n.config.chart.type&&n.config.plotOptions.heatmap.distributed,this.isBarDistributed=n.config.plotOptions.bar.distributed&&("bar"===n.config.chart.type||"rangeBar"===n.config.chart.type)}return c(e,[{key:"init",value:function(){this.setDefaultColors()}},{key:"setDefaultColors",value:function(){var e=this,t=this.w,n=new b;if(t.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(t.config.theme.mode)),void 0===t.config.colors?t.globals.colors=this.predefined():(t.globals.colors=t.config.colors,Array.isArray(t.config.colors)&&t.config.colors.length>0&&"function"==typeof t.config.colors[0]&&(t.globals.colors=t.config.series.map((function(n,i){var r=t.config.colors[i];return r||(r=t.config.colors[0]),"function"==typeof r?(e.isColorFn=!0,r({value:t.globals.axisCharts?t.globals.series[i][0]?t.globals.series[i][0]:0:t.globals.series[i],seriesIndex:i,dataPointIndex:i,w:t})):r})))),t.globals.seriesColors.map((function(e,n){e&&(t.globals.colors[n]=e)})),t.config.theme.monochrome.enabled){var i=[],r=t.globals.series.length;(this.isBarDistributed||this.isHeatmapDistributed)&&(r=t.globals.series[0].length*t.globals.series.length);for(var a=t.config.theme.monochrome.color,o=1/(r/t.config.theme.monochrome.shadeIntensity),s=t.config.theme.monochrome.shadeTo,l=0,c=0;c<r;c++){var u=void 0;"dark"===s?(u=n.shadeColor(-1*l,a),l+=o):(u=n.shadeColor(l,a),l+=o),i.push(u)}t.globals.colors=i.slice()}var h=t.globals.colors.slice();this.pushExtraColors(t.globals.colors),["fill","stroke"].forEach((function(n){void 0===t.config[n].colors?t.globals[n].colors=e.isColorFn?t.config.colors:h:t.globals[n].colors=t.config[n].colors.slice(),e.pushExtraColors(t.globals[n].colors)})),void 0===t.config.dataLabels.style.colors?t.globals.dataLabels.style.colors=h:t.globals.dataLabels.style.colors=t.config.dataLabels.style.colors.slice(),this.pushExtraColors(t.globals.dataLabels.style.colors,50),void 0===t.config.plotOptions.radar.polygons.fill.colors?t.globals.radarPolygons.fill.colors=["dark"===t.config.theme.mode?"#424242":"none"]:t.globals.radarPolygons.fill.colors=t.config.plotOptions.radar.polygons.fill.colors.slice(),this.pushExtraColors(t.globals.radarPolygons.fill.colors,20),void 0===t.config.markers.colors?t.globals.markers.colors=h:t.globals.markers.colors=t.config.markers.colors.slice(),this.pushExtraColors(t.globals.markers.colors)}},{key:"pushExtraColors",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=this.w,r=t||i.globals.series.length;if(null===n&&(n=this.isBarDistributed||this.isHeatmapDistributed||"heatmap"===i.config.chart.type&&i.config.plotOptions.heatmap.colorScale.inverse),n&&i.globals.series.length&&(r=i.globals.series[i.globals.maxValsInArrayIndex].length*i.globals.series.length),e.length<r)for(var a=r-e.length,o=0;o<a;o++)e.push(e[o])}},{key:"updateThemeOptions",value:function(e){e.chart=e.chart||{},e.tooltip=e.tooltip||{};var t=e.theme.mode||"light",n=e.theme.palette?e.theme.palette:"dark"===t?"palette4":"palette1",i=e.chart.foreColor?e.chart.foreColor:"dark"===t?"#f6f7f8":"#373d3f";return e.tooltip.theme=t,e.chart.foreColor=i,e.theme.palette=n,e}},{key:"predefined",value:function(){switch(this.w.config.theme.palette){case"palette1":default:this.colors=["#008FFB","#00E396","#FEB019","#FF4560","#775DD0"];break;case"palette2":this.colors=["#3f51b5","#03a9f4","#4caf50","#f9ce1d","#FF9800"];break;case"palette3":this.colors=["#33b2df","#546E7A","#d4526e","#13d8aa","#A5978B"];break;case"palette4":this.colors=["#4ecdc4","#c7f464","#81D4FA","#fd6a6a","#546E7A"];break;case"palette5":this.colors=["#2b908f","#f9a3a4","#90ee7e","#fa4443","#69d2e7"];break;case"palette6":this.colors=["#449DD1","#F86624","#EA3546","#662E9B","#C5D86D"];break;case"palette7":this.colors=["#D7263D","#1B998B","#2E294E","#F46036","#E2C044"];break;case"palette8":this.colors=["#662E9B","#F86624","#F9C80E","#EA3546","#43BCCD"];break;case"palette9":this.colors=["#5C4742","#A5978B","#8D5B4C","#5A2A27","#C4BBAF"];break;case"palette10":this.colors=["#A300D6","#7D02EB","#5653FE","#2983FF","#00B1F2"]}return this.colors}}]),e}(),ae=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"draw",value:function(){this.drawTitleSubtitle("title"),this.drawTitleSubtitle("subtitle")}},{key:"drawTitleSubtitle",value:function(e){var t=this.w,n="title"===e?t.config.title:t.config.subtitle,i=t.globals.svgWidth/2,r=n.offsetY,a="middle";if("left"===n.align?(i=10,a="start"):"right"===n.align&&(i=t.globals.svgWidth-10,a="end"),i+=n.offsetX,r=r+parseInt(n.style.fontSize,10)+n.margin/2,void 0!==n.text){var o=new w(this.ctx).drawText({x:i,y:r,text:n.text,textAnchor:a,fontSize:n.style.fontSize,fontFamily:n.style.fontFamily,fontWeight:n.style.fontWeight,foreColor:n.style.color,opacity:1});o.node.setAttribute("class","apexcharts-".concat(e,"-text")),t.globals.dom.Paper.add(o)}}}]),e}(),oe=function(){function e(t){s(this,e),this.w=t.w,this.dCtx=t}return c(e,[{key:"getTitleSubtitleCoords",value:function(e){var t=this.w,n=0,i=0,r="title"===e?t.config.title.floating:t.config.subtitle.floating,a=t.globals.dom.baseEl.querySelector(".apexcharts-".concat(e,"-text"));if(null!==a&&!r){var o=a.getBoundingClientRect();n=o.width,i=t.globals.axisCharts?o.height+5:o.height}return{width:n,height:i}}},{key:"getLegendsRect",value:function(){var e=this.w,t=e.globals.dom.baseEl.querySelector(".apexcharts-legend");e.config.legend.height||"top"!==e.config.legend.position&&"bottom"!==e.config.legend.position||(t.style.maxHeight=e.globals.svgHeight/2+"px");var n=Object.assign({},b.getBoundingClientRect(t));return null!==t&&!e.config.legend.floating&&e.config.legend.show?this.dCtx.lgRect={x:n.x,y:n.y,height:n.height,width:0===n.height?0:n.width}:this.dCtx.lgRect={x:0,y:0,height:0,width:0},"left"!==e.config.legend.position&&"right"!==e.config.legend.position||1.5*this.dCtx.lgRect.width>e.globals.svgWidth&&(this.dCtx.lgRect.width=e.globals.svgWidth/1.5),this.dCtx.lgRect}},{key:"getLargestStringFromMultiArr",value:function(e,t){var n=e;if(this.w.globals.isMultiLineX){var i=t.map((function(e,t){return Array.isArray(e)?e.length:1})),r=Math.max.apply(Math,m(i));n=t[i.indexOf(r)]}return n}}]),e}(),se=function(){function e(t){s(this,e),this.w=t.w,this.dCtx=t}return c(e,[{key:"getxAxisLabelsCoords",value:function(){var e,t=this.w,n=t.globals.labels.slice();if(t.config.xaxis.convertedCatToNumeric&&0===n.length&&(n=t.globals.categoryLabels),t.globals.timescaleLabels.length>0){var i=this.getxAxisTimeScaleLabelsCoords();e={width:i.width,height:i.height},t.globals.rotateXLabels=!1}else{this.dCtx.lgWidthForSideLegends="left"!==t.config.legend.position&&"right"!==t.config.legend.position||t.config.legend.floating?0:this.dCtx.lgRect.width;var r=t.globals.xLabelFormatter,a=b.getLargestStringFromArr(n),o=this.dCtx.dimHelpers.getLargestStringFromMultiArr(a,n);t.globals.isBarHorizontal&&(o=a=t.globals.yAxisScale[0].result.reduce((function(e,t){return e.length>t.length?e:t}),0));var s=new j(this.dCtx.ctx),l=a;a=s.xLabelFormat(r,a,l,{i:void 0,dateFormatter:new D(this.dCtx.ctx).formatDate,w:t}),o=s.xLabelFormat(r,o,l,{i:void 0,dateFormatter:new D(this.dCtx.ctx).formatDate,w:t}),(t.config.xaxis.convertedCatToNumeric&&void 0===a||""===String(a).trim())&&(o=a="1");var c=new w(this.dCtx.ctx),u=c.getTextRects(a,t.config.xaxis.labels.style.fontSize),h=u;if(a!==o&&(h=c.getTextRects(o,t.config.xaxis.labels.style.fontSize)),(e={width:u.width>=h.width?u.width:h.width,height:u.height>=h.height?u.height:h.height}).width*n.length>t.globals.svgWidth-this.dCtx.lgWidthForSideLegends-this.dCtx.yAxisWidth-this.dCtx.gridPad.left-this.dCtx.gridPad.right&&0!==t.config.xaxis.labels.rotate||t.config.xaxis.labels.rotateAlways){if(!t.globals.isBarHorizontal){t.globals.rotateXLabels=!0;var d=function(e){return c.getTextRects(e,t.config.xaxis.labels.style.fontSize,t.config.xaxis.labels.style.fontFamily,"rotate(".concat(t.config.xaxis.labels.rotate," 0 0)"),!1)};u=d(a),a!==o&&(h=d(o)),e.height=(u.height>h.height?u.height:h.height)/1.5,e.width=u.width>h.width?u.width:h.width}}else t.globals.rotateXLabels=!1}return t.config.xaxis.labels.show||(e={width:0,height:0}),{width:e.width,height:e.height}}},{key:"getxAxisTitleCoords",value:function(){var e=this.w,t=0,n=0;if(void 0!==e.config.xaxis.title.text){var i=new w(this.dCtx.ctx).getTextRects(e.config.xaxis.title.text,e.config.xaxis.title.style.fontSize);t=i.width,n=i.height}return{width:t,height:n}}},{key:"getxAxisTimeScaleLabelsCoords",value:function(){var e,t=this.w;this.dCtx.timescaleLabels=t.globals.timescaleLabels.slice();var n=this.dCtx.timescaleLabels.map((function(e){return e.value})),i=n.reduce((function(e,t){return void 0===e?(console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"),0):e.length>t.length?e:t}),0);return 1.05*(e=new w(this.dCtx.ctx).getTextRects(i,t.config.xaxis.labels.style.fontSize)).width*n.length>t.globals.gridWidth&&0!==t.config.xaxis.labels.rotate&&(t.globals.overlappingXLabels=!0),e}},{key:"additionalPaddingXLabels",value:function(e){var t=this,n=this.w,i=n.globals,r=n.config,a=r.xaxis.type,o=e.width;i.skipLastTimelinelabel=!1,i.skipFirstTimelinelabel=!1;var s=n.config.yaxis[0].opposite&&n.globals.isBarHorizontal,l=function(e,s){(function(e){return-1!==i.collapsedSeriesIndices.indexOf(e)})(s)||function(e){if(t.dCtx.timescaleLabels&&t.dCtx.timescaleLabels.length){var s=t.dCtx.timescaleLabels[0],l=t.dCtx.timescaleLabels[t.dCtx.timescaleLabels.length-1].position+o/1.75-t.dCtx.yAxisWidthRight,c=s.position-o/1.75+t.dCtx.yAxisWidthLeft,u="right"===n.config.legend.position&&t.dCtx.lgRect.width>0?t.dCtx.lgRect.width:0;l>i.svgWidth-i.translateX-u&&(i.skipLastTimelinelabel=!0),c<-(e.show&&!e.floating||"bar"!==r.chart.type&&"candlestick"!==r.chart.type&&"rangeBar"!==r.chart.type&&"boxPlot"!==r.chart.type?10:o/1.75)&&(i.skipFirstTimelinelabel=!0)}else"datetime"===a?t.dCtx.gridPad.right<o&&!i.rotateXLabels&&(i.skipLastTimelinelabel=!0):"datetime"!==a&&t.dCtx.gridPad.right<o/2-t.dCtx.yAxisWidthRight&&!i.rotateXLabels&&!n.config.xaxis.labels.trim&&("between"!==n.config.xaxis.tickPlacement||n.globals.isBarHorizontal)&&(t.dCtx.xPadRight=o/2+1)}(e)};r.yaxis.forEach((function(e,n){s?(t.dCtx.gridPad.left<o&&(t.dCtx.xPadLeft=o/2+1),t.dCtx.xPadRight=o/2+1):l(e,n)}))}}]),e}(),le=function(){function e(t){s(this,e),this.w=t.w,this.dCtx=t}return c(e,[{key:"getyAxisLabelsCoords",value:function(){var e=this,t=this.w,n=[],i=10,r=new U(this.dCtx.ctx);return t.config.yaxis.map((function(a,o){var s=t.globals.yAxisScale[o],l=0;if(!r.isYAxisHidden(o)&&a.labels.show&&void 0!==a.labels.minWidth&&(l=a.labels.minWidth),!r.isYAxisHidden(o)&&a.labels.show&&s.result.length){var c=t.globals.yLabelFormatters[o],u=s.niceMin===Number.MIN_VALUE?0:s.niceMin,h=String(u).length>String(s.niceMax).length?u:s.niceMax,d=c(h,{seriesIndex:o,dataPointIndex:-1,w:t}),f=d;if(void 0!==d&&0!==d.length||(d=h),t.globals.isBarHorizontal){i=0;var p=t.globals.labels.slice();d=c(d=b.getLargestStringFromArr(p),{seriesIndex:o,dataPointIndex:-1,w:t}),f=e.dCtx.dimHelpers.getLargestStringFromMultiArr(d,p)}var g=new w(e.dCtx.ctx),m="rotate(".concat(a.labels.rotate," 0 0)"),v=g.getTextRects(d,a.labels.style.fontSize,a.labels.style.fontFamily,m,!1),x=v;d!==f&&(x=g.getTextRects(f,a.labels.style.fontSize,a.labels.style.fontFamily,m,!1)),n.push({width:(l>x.width||l>v.width?l:x.width>v.width?x.width:v.width)+i,height:x.height>v.height?x.height:v.height})}else n.push({width:0,height:0})})),n}},{key:"getyAxisTitleCoords",value:function(){var e=this,t=this.w,n=[];return t.config.yaxis.map((function(t,i){if(t.show&&void 0!==t.title.text){var r=new w(e.dCtx.ctx),a="rotate(".concat(t.title.rotate," 0 0)"),o=r.getTextRects(t.title.text,t.title.style.fontSize,t.title.style.fontFamily,a,!1);n.push({width:o.width,height:o.height})}else n.push({width:0,height:0})})),n}},{key:"getTotalYAxisWidth",value:function(){var e=this.w,t=0,n=0,i=0,r=e.globals.yAxisScale.length>1?10:0,a=new U(this.dCtx.ctx),o=function(o,s){var l=e.config.yaxis[s].floating,c=0;o.width>0&&!l?(c=o.width+r,function(t){return e.globals.ignoreYAxisIndexes.indexOf(t)>-1}(s)&&(c=c-o.width-r)):c=l||a.isYAxisHidden(s)?0:5,e.config.yaxis[s].opposite?i+=c:n+=c,t+=c};return e.globals.yLabelsCoords.map((function(e,t){o(e,t)})),e.globals.yTitleCoords.map((function(e,t){o(e,t)})),e.globals.isBarHorizontal&&!e.config.yaxis[0].floating&&(t=e.globals.yLabelsCoords[0].width+e.globals.yTitleCoords[0].width+15),this.dCtx.yAxisWidthLeft=n,this.dCtx.yAxisWidthRight=i,t}}]),e}(),ce=function(){function e(t){s(this,e),this.w=t.w,this.dCtx=t}return c(e,[{key:"gridPadForColumnsInNumericAxis",value:function(e){var t=this.w;if(t.globals.noData||t.globals.allSeriesCollapsed)return 0;var n=function(e){return"bar"===e||"rangeBar"===e||"candlestick"===e||"boxPlot"===e},i=t.config.chart.type,r=0,a=n(i)?t.config.series.length:1;if(t.globals.comboBarCount>0&&(a=t.globals.comboBarCount),t.globals.collapsedSeries.forEach((function(e){n(e.type)&&(a-=1)})),t.config.chart.stacked&&(a=1),(n(i)||t.globals.comboBarCount>0)&&t.globals.isXNumeric&&!t.globals.isBarHorizontal&&a>0){var o,s,l=Math.abs(t.globals.initialMaxX-t.globals.initialMinX);l<=3&&(l=t.globals.dataPoints),o=l/e,t.globals.minXDiff&&t.globals.minXDiff/o>0&&(s=t.globals.minXDiff/o),s>e/2&&(s/=2),(r=s/a*parseInt(t.config.plotOptions.bar.columnWidth,10)/100)<1&&(r=1),r=r/(a>1?1:1.5)+5,t.globals.barPadForNumericAxis=r}return r}},{key:"gridPadFortitleSubtitle",value:function(){var e=this,t=this.w,n=t.globals,i=this.dCtx.isSparkline||!t.globals.axisCharts?0:10;["title","subtitle"].forEach((function(n){void 0!==t.config[n].text?i+=t.config[n].margin:i+=e.dCtx.isSparkline||!t.globals.axisCharts?0:5})),!t.config.legend.show||"bottom"!==t.config.legend.position||t.config.legend.floating||t.globals.axisCharts||(i+=10);var r=this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),a=this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");n.gridHeight=n.gridHeight-r.height-a.height-i,n.translateY=n.translateY+r.height+a.height+i}},{key:"setGridXPosForDualYAxis",value:function(e,t){var n=this.w,i=new U(this.dCtx.ctx);n.config.yaxis.map((function(r,a){-1!==n.globals.ignoreYAxisIndexes.indexOf(a)||r.floating||i.isYAxisHidden(a)||(r.opposite&&(n.globals.translateX=n.globals.translateX-(t[a].width+e[a].width)-parseInt(n.config.yaxis[a].labels.style.fontSize,10)/1.2-12),n.globals.translateX<2&&(n.globals.translateX=2))}))}}]),e}(),ue=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.lgRect={},this.yAxisWidth=0,this.yAxisWidthLeft=0,this.yAxisWidthRight=0,this.xAxisHeight=0,this.isSparkline=this.w.config.chart.sparkline.enabled,this.dimHelpers=new oe(this),this.dimYAxis=new le(this),this.dimXAxis=new se(this),this.dimGrid=new ce(this),this.lgWidthForSideLegends=0,this.gridPad=this.w.config.grid.padding,this.xPadRight=0,this.xPadLeft=0}return c(e,[{key:"plotCoords",value:function(){var e=this.w.globals;this.lgRect=this.dimHelpers.getLegendsRect(),e.axisCharts?this.setDimensionsForAxisCharts():this.setDimensionsForNonAxisCharts(),this.dimGrid.gridPadFortitleSubtitle(),e.gridHeight=e.gridHeight-this.gridPad.top-this.gridPad.bottom,e.gridWidth=e.gridWidth-this.gridPad.left-this.gridPad.right-this.xPadRight-this.xPadLeft;var t=this.dimGrid.gridPadForColumnsInNumericAxis(e.gridWidth);e.gridWidth=e.gridWidth-2*t,e.translateX=e.translateX+this.gridPad.left+this.xPadLeft+(t>0?t+4:0),e.translateY=e.translateY+this.gridPad.top}},{key:"setDimensionsForAxisCharts",value:function(){var e=this,t=this.w,n=t.globals,i=this.dimYAxis.getyAxisLabelsCoords(),r=this.dimYAxis.getyAxisTitleCoords();t.globals.yLabelsCoords=[],t.globals.yTitleCoords=[],t.config.yaxis.map((function(e,n){t.globals.yLabelsCoords.push({width:i[n].width,index:n}),t.globals.yTitleCoords.push({width:r[n].width,index:n})})),this.yAxisWidth=this.dimYAxis.getTotalYAxisWidth();var a=this.dimXAxis.getxAxisLabelsCoords(),o=this.dimXAxis.getxAxisTitleCoords();this.conditionalChecksForAxisCoords(a,o),n.translateXAxisY=t.globals.rotateXLabels?this.xAxisHeight/8:-4,n.translateXAxisX=t.globals.rotateXLabels&&t.globals.isXNumeric&&t.config.xaxis.labels.rotate<=-45?-this.xAxisWidth/4:0,t.globals.isBarHorizontal&&(n.rotateXLabels=!1,n.translateXAxisY=parseInt(t.config.xaxis.labels.style.fontSize,10)/1.5*-1),n.translateXAxisY=n.translateXAxisY+t.config.xaxis.labels.offsetY,n.translateXAxisX=n.translateXAxisX+t.config.xaxis.labels.offsetX;var s=this.yAxisWidth,l=this.xAxisHeight;n.xAxisLabelsHeight=this.xAxisHeight-o.height,n.xAxisLabelsWidth=this.xAxisWidth,n.xAxisHeight=this.xAxisHeight;var c=10;("radar"===t.config.chart.type||this.isSparkline)&&(s=0,l=n.goldenPadding),this.isSparkline&&(this.lgRect={height:0,width:0}),(this.isSparkline||"treemap"===t.config.chart.type)&&(s=0,l=0,c=0),this.isSparkline||this.dimXAxis.additionalPaddingXLabels(a);var u=function(){n.translateX=s,n.gridHeight=n.svgHeight-e.lgRect.height-l-(e.isSparkline||"treemap"===t.config.chart.type?0:t.globals.rotateXLabels?10:15),n.gridWidth=n.svgWidth-s};switch("top"===t.config.xaxis.position&&(c=n.xAxisHeight-t.config.xaxis.axisTicks.height-5),t.config.legend.position){case"bottom":n.translateY=c,u();break;case"top":n.translateY=this.lgRect.height+c,u();break;case"left":n.translateY=c,n.translateX=this.lgRect.width+s,n.gridHeight=n.svgHeight-l-12,n.gridWidth=n.svgWidth-this.lgRect.width-s;break;case"right":n.translateY=c,n.translateX=s,n.gridHeight=n.svgHeight-l-12,n.gridWidth=n.svgWidth-this.lgRect.width-s-5;break;default:throw new Error("Legend position not supported")}this.dimGrid.setGridXPosForDualYAxis(r,i),new K(this.ctx).setYAxisXPosition(i,r)}},{key:"setDimensionsForNonAxisCharts",value:function(){var e=this.w,t=e.globals,n=e.config,i=0;e.config.legend.show&&!e.config.legend.floating&&(i=20);var r="pie"===n.chart.type||"polarArea"===n.chart.type||"donut"===n.chart.type?"pie":"radialBar",a=n.plotOptions[r].offsetY,o=n.plotOptions[r].offsetX;if(!n.legend.show||n.legend.floating)return t.gridHeight=t.svgHeight-n.grid.padding.left+n.grid.padding.right,t.gridWidth=t.gridHeight,t.translateY=a,void(t.translateX=o+(t.svgWidth-t.gridWidth)/2);switch(n.legend.position){case"bottom":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=a-10,t.translateX=o+(t.svgWidth-t.gridWidth)/2;break;case"top":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=this.lgRect.height+a+10,t.translateX=o+(t.svgWidth-t.gridWidth)/2;break;case"left":t.gridWidth=t.svgWidth-this.lgRect.width-i,t.gridHeight="auto"!==n.chart.height?t.svgHeight:t.gridWidth,t.translateY=a,t.translateX=o+this.lgRect.width+i;break;case"right":t.gridWidth=t.svgWidth-this.lgRect.width-i-5,t.gridHeight="auto"!==n.chart.height?t.svgHeight:t.gridWidth,t.translateY=a,t.translateX=o+10;break;default:throw new Error("Legend position not supported")}}},{key:"conditionalChecksForAxisCoords",value:function(e,t){var n=this.w,i=e.height+t.height,r=n.globals.isMultiLineX?1.2:n.globals.LINE_HEIGHT_RATIO,a=n.globals.rotateXLabels?22:10,o=n.globals.rotateXLabels&&"bottom"===n.config.legend.position?10:0;this.xAxisHeight=i*r+a+o,this.xAxisWidth=e.width,this.xAxisHeight-t.height>n.config.xaxis.labels.maxHeight&&(this.xAxisHeight=n.config.xaxis.labels.maxHeight),n.config.xaxis.labels.minHeight&&this.xAxisHeight<n.config.xaxis.labels.minHeight&&(this.xAxisHeight=n.config.xaxis.labels.minHeight),n.config.xaxis.floating&&(this.xAxisHeight=0);var s=0,l=0;n.config.yaxis.forEach((function(e){s+=e.labels.minWidth,l+=e.labels.maxWidth})),this.yAxisWidth<s&&(this.yAxisWidth=s),this.yAxisWidth>l&&(this.yAxisWidth=l)}}]),e}(),he=function(){function e(t){s(this,e),this.w=t.w,this.lgCtx=t}return c(e,[{key:"getLegendStyles",value:function(){var e=document.createElement("style");e.setAttribute("type","text/css");var t=document.createTextNode("\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }");return e.appendChild(t),e}},{key:"getLegendBBox",value:function(){var e=this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),t=e.width;return{clwh:e.height,clww:t}}},{key:"appendToForeignObject",value:function(){var e=this.w.globals;e.dom.elLegendForeign=document.createElementNS(e.SVGNS,"foreignObject");var t=e.dom.elLegendForeign;t.setAttribute("x",0),t.setAttribute("y",0),t.setAttribute("width",e.svgWidth),t.setAttribute("height",e.svgHeight),e.dom.elLegendWrap.setAttribute("xmlns","http://www.w3.org/1999/xhtml"),t.appendChild(e.dom.elLegendWrap),t.appendChild(this.getLegendStyles()),e.dom.Paper.node.insertBefore(t,e.dom.elGraphical.node)}},{key:"toggleDataSeries",value:function(e,t){var n=this,i=this.w;if(i.globals.axisCharts||"radialBar"===i.config.chart.type){i.globals.resized=!0;var r=null,a=null;i.globals.risingSeries=[],i.globals.axisCharts?(r=i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e,"']")),a=parseInt(r.getAttribute("data:realIndex"),10)):(r=i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(e+1,"']")),a=parseInt(r.getAttribute("rel"),10)-1),t?[{cs:i.globals.collapsedSeries,csi:i.globals.collapsedSeriesIndices},{cs:i.globals.ancillaryCollapsedSeries,csi:i.globals.ancillaryCollapsedSeriesIndices}].forEach((function(e){n.riseCollapsedSeries(e.cs,e.csi,a)})):this.hideSeries({seriesEl:r,realIndex:a})}else{var o=i.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(e+1,"'] path")),s=i.config.chart.type;if("pie"===s||"polarArea"===s||"donut"===s){var l=i.config.plotOptions.pie.donut.labels;new w(this.lgCtx.ctx).pathMouseDown(o.members[0],null),this.lgCtx.ctx.pie.printDataLabelsInner(o.members[0].node,l)}o.fire("click")}}},{key:"hideSeries",value:function(e){var t=e.seriesEl,n=e.realIndex,i=this.w,r=b.clone(i.config.series);if(i.globals.axisCharts){var a=!1;if(i.config.yaxis[n]&&i.config.yaxis[n].show&&i.config.yaxis[n].showAlways&&(a=!0,i.globals.ancillaryCollapsedSeriesIndices.indexOf(n)<0&&(i.globals.ancillaryCollapsedSeries.push({index:n,data:r[n].data.slice(),type:t.parentNode.className.baseVal.split("-")[1]}),i.globals.ancillaryCollapsedSeriesIndices.push(n))),!a){i.globals.collapsedSeries.push({index:n,data:r[n].data.slice(),type:t.parentNode.className.baseVal.split("-")[1]}),i.globals.collapsedSeriesIndices.push(n);var o=i.globals.risingSeries.indexOf(n);i.globals.risingSeries.splice(o,1)}}else i.globals.collapsedSeries.push({index:n,data:r[n]}),i.globals.collapsedSeriesIndices.push(n);for(var s=t.childNodes,l=0;l<s.length;l++)s[l].classList.contains("apexcharts-series-markers-wrap")&&(s[l].classList.contains("apexcharts-hide")?s[l].classList.remove("apexcharts-hide"):s[l].classList.add("apexcharts-hide"));i.globals.allSeriesCollapsed=i.globals.collapsedSeries.length===i.config.series.length,r=this._getSeriesBasedOnCollapsedState(r),this.lgCtx.ctx.updateHelpers._updateSeries(r,i.config.chart.animations.dynamicAnimation.enabled)}},{key:"riseCollapsedSeries",value:function(e,t,n){var i=this.w,r=b.clone(i.config.series);if(e.length>0){for(var a=0;a<e.length;a++)e[a].index===n&&(i.globals.axisCharts?(r[n].data=e[a].data.slice(),e.splice(a,1),t.splice(a,1),i.globals.risingSeries.push(n)):(r[n]=e[a].data,e.splice(a,1),t.splice(a,1),i.globals.risingSeries.push(n)));r=this._getSeriesBasedOnCollapsedState(r),this.lgCtx.ctx.updateHelpers._updateSeries(r,i.config.chart.animations.dynamicAnimation.enabled)}}},{key:"_getSeriesBasedOnCollapsedState",value:function(e){var t=this.w;return t.globals.axisCharts?e.forEach((function(n,i){t.globals.collapsedSeriesIndices.indexOf(i)>-1&&(e[i].data=[])})):e.forEach((function(n,i){t.globals.collapsedSeriesIndices.indexOf(i)>-1&&(e[i]=0)})),e}}]),e}(),de=function(){function e(t,n){s(this,e),this.ctx=t,this.w=t.w,this.onLegendClick=this.onLegendClick.bind(this),this.onLegendHovered=this.onLegendHovered.bind(this),this.isBarsDistributed="bar"===this.w.config.chart.type&&this.w.config.plotOptions.bar.distributed&&1===this.w.config.series.length,this.legendHelpers=new he(this)}return c(e,[{key:"init",value:function(){var e=this.w,t=e.globals,n=e.config;if((n.legend.showForSingleSeries&&1===t.series.length||this.isBarsDistributed||t.series.length>1||!t.axisCharts)&&n.legend.show){for(;t.dom.elLegendWrap.firstChild;)t.dom.elLegendWrap.removeChild(t.dom.elLegendWrap.firstChild);this.drawLegends(),b.isIE11()?document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()):this.legendHelpers.appendToForeignObject(),"bottom"===n.legend.position||"top"===n.legend.position?this.legendAlignHorizontal():"right"!==n.legend.position&&"left"!==n.legend.position||this.legendAlignVertical()}}},{key:"drawLegends",value:function(){var e=this,t=this.w,n=t.config.legend.fontFamily,i=t.globals.seriesNames,r=t.globals.colors.slice();if("heatmap"===t.config.chart.type){var a=t.config.plotOptions.heatmap.colorScale.ranges;i=a.map((function(e){return e.name?e.name:e.from+" - "+e.to})),r=a.map((function(e){return e.color}))}else this.isBarsDistributed&&(i=t.globals.labels.slice());t.config.legend.customLegendItems.length&&(i=t.config.legend.customLegendItems);for(var o=t.globals.legendFormatter,s=t.config.legend.inverseOrder,l=s?i.length-1:0;s?l>=0:l<=i.length-1;s?l--:l++){var c=o(i[l],{seriesIndex:l,w:t}),u=!1,h=!1;if(t.globals.collapsedSeries.length>0)for(var d=0;d<t.globals.collapsedSeries.length;d++)t.globals.collapsedSeries[d].index===l&&(u=!0);if(t.globals.ancillaryCollapsedSeriesIndices.length>0)for(var f=0;f<t.globals.ancillaryCollapsedSeriesIndices.length;f++)t.globals.ancillaryCollapsedSeriesIndices[f]===l&&(h=!0);var p=document.createElement("span");p.classList.add("apexcharts-legend-marker");var g=t.config.legend.markers.offsetX,m=t.config.legend.markers.offsetY,v=t.config.legend.markers.height,x=t.config.legend.markers.width,y=t.config.legend.markers.strokeWidth,k=t.config.legend.markers.strokeColor,S=t.config.legend.markers.radius,C=p.style;C.background=r[l],C.color=r[l],C.setProperty("background",r[l],"important"),t.config.legend.markers.fillColors&&t.config.legend.markers.fillColors[l]&&(C.background=t.config.legend.markers.fillColors[l]),void 0!==t.globals.seriesColors[l]&&(C.background=t.globals.seriesColors[l],C.color=t.globals.seriesColors[l]),C.height=Array.isArray(v)?parseFloat(v[l])+"px":parseFloat(v)+"px",C.width=Array.isArray(x)?parseFloat(x[l])+"px":parseFloat(x)+"px",C.left=(Array.isArray(g)?parseFloat(g[l]):parseFloat(g))+"px",C.top=(Array.isArray(m)?parseFloat(m[l]):parseFloat(m))+"px",C.borderWidth=Array.isArray(y)?y[l]:y,C.borderColor=Array.isArray(k)?k[l]:k,C.borderRadius=Array.isArray(S)?parseFloat(S[l])+"px":parseFloat(S)+"px",t.config.legend.markers.customHTML&&(Array.isArray(t.config.legend.markers.customHTML)?t.config.legend.markers.customHTML[l]&&(p.innerHTML=t.config.legend.markers.customHTML[l]()):p.innerHTML=t.config.legend.markers.customHTML()),w.setAttrs(p,{rel:l+1,"data:collapsed":u||h}),(u||h)&&p.classList.add("apexcharts-inactive-legend");var E=document.createElement("div"),T=document.createElement("span");T.classList.add("apexcharts-legend-text"),T.innerHTML=Array.isArray(c)?c.join(" "):c;var P=t.config.legend.labels.useSeriesColors?t.globals.colors[l]:t.config.legend.labels.colors;P||(P=t.config.chart.foreColor),T.style.color=P,T.style.fontSize=parseFloat(t.config.legend.fontSize)+"px",T.style.fontWeight=t.config.legend.fontWeight,T.style.fontFamily=n||t.config.chart.fontFamily,w.setAttrs(T,{rel:l+1,i:l,"data:default-text":encodeURIComponent(c),"data:collapsed":u||h}),E.appendChild(p),E.appendChild(T);var L=new A(this.ctx);t.config.legend.showForZeroSeries||0===L.getSeriesTotalByIndex(l)&&L.seriesHaveSameValues(l)&&!L.isSeriesNull(l)&&-1===t.globals.collapsedSeriesIndices.indexOf(l)&&-1===t.globals.ancillaryCollapsedSeriesIndices.indexOf(l)&&E.classList.add("apexcharts-hidden-zero-series"),t.config.legend.showForNullSeries||L.isSeriesNull(l)&&-1===t.globals.collapsedSeriesIndices.indexOf(l)&&-1===t.globals.ancillaryCollapsedSeriesIndices.indexOf(l)&&E.classList.add("apexcharts-hidden-null-series"),t.globals.dom.elLegendWrap.appendChild(E),t.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(t.config.legend.horizontalAlign)),t.globals.dom.elLegendWrap.classList.add("apx-legend-position-"+t.config.legend.position),E.classList.add("apexcharts-legend-series"),E.style.margin="".concat(t.config.legend.itemMargin.vertical,"px ").concat(t.config.legend.itemMargin.horizontal,"px"),t.globals.dom.elLegendWrap.style.width=t.config.legend.width?t.config.legend.width+"px":"",t.globals.dom.elLegendWrap.style.height=t.config.legend.height?t.config.legend.height+"px":"",w.setAttrs(E,{rel:l+1,seriesName:b.escapeString(i[l]),"data:collapsed":u||h}),(u||h)&&E.classList.add("apexcharts-inactive-legend"),t.config.legend.onItemClick.toggleDataSeries||E.classList.add("apexcharts-no-click")}t.globals.dom.elWrap.addEventListener("click",e.onLegendClick,!0),t.config.legend.onItemHover.highlightDataSeries&&0===t.config.legend.customLegendItems.length&&(t.globals.dom.elWrap.addEventListener("mousemove",e.onLegendHovered,!0),t.globals.dom.elWrap.addEventListener("mouseout",e.onLegendHovered,!0))}},{key:"setLegendWrapXY",value:function(e,t){var n=this.w,i=n.globals.dom.baseEl.querySelector(".apexcharts-legend"),r=i.getBoundingClientRect(),a=0,o=0;if("bottom"===n.config.legend.position)o+=n.globals.svgHeight-r.height/2;else if("top"===n.config.legend.position){var s=new ue(this.ctx),l=s.dimHelpers.getTitleSubtitleCoords("title").height,c=s.dimHelpers.getTitleSubtitleCoords("subtitle").height;o=o+(l>0?l-10:0)+(c>0?c-10:0)}i.style.position="absolute",a=a+e+n.config.legend.offsetX,o=o+t+n.config.legend.offsetY,i.style.left=a+"px",i.style.top=o+"px","bottom"===n.config.legend.position?(i.style.top="auto",i.style.bottom=5-n.config.legend.offsetY+"px"):"right"===n.config.legend.position&&(i.style.left="auto",i.style.right=25+n.config.legend.offsetX+"px"),["width","height"].forEach((function(e){i.style[e]&&(i.style[e]=parseInt(n.config.legend[e],10)+"px")}))}},{key:"legendAlignHorizontal",value:function(){var e=this.w;e.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right=0;var t=this.legendHelpers.getLegendBBox(),n=new ue(this.ctx),i=n.dimHelpers.getTitleSubtitleCoords("title"),r=n.dimHelpers.getTitleSubtitleCoords("subtitle"),a=0;"bottom"===e.config.legend.position?a=-t.clwh/1.8:"top"===e.config.legend.position&&(a=i.height+r.height+e.config.title.margin+e.config.subtitle.margin-10),this.setLegendWrapXY(20,a)}},{key:"legendAlignVertical",value:function(){var e=this.w,t=this.legendHelpers.getLegendBBox(),n=0;"left"===e.config.legend.position&&(n=20),"right"===e.config.legend.position&&(n=e.globals.svgWidth-t.clww-10),this.setLegendWrapXY(n,20)}},{key:"onLegendHovered",value:function(e){var t=this.w,n=e.target.classList.contains("apexcharts-legend-text")||e.target.classList.contains("apexcharts-legend-marker");if("heatmap"===t.config.chart.type||this.isBarsDistributed){if(n){var i=parseInt(e.target.getAttribute("rel"),10)-1;this.ctx.events.fireEvent("legendHover",[this.ctx,i,this.w]),new N(this.ctx).highlightRangeInSeries(e,e.target)}}else!e.target.classList.contains("apexcharts-inactive-legend")&&n&&new N(this.ctx).toggleSeriesOnHover(e,e.target)}},{key:"onLegendClick",value:function(e){var t=this.w;if(!t.config.legend.customLegendItems.length&&(e.target.classList.contains("apexcharts-legend-text")||e.target.classList.contains("apexcharts-legend-marker"))){var n=parseInt(e.target.getAttribute("rel"),10)-1,i="true"===e.target.getAttribute("data:collapsed"),r=this.w.config.chart.events.legendClick;"function"==typeof r&&r(this.ctx,n,this.w),this.ctx.events.fireEvent("legendClick",[this.ctx,n,this.w]);var a=this.w.config.legend.markers.onClick;"function"==typeof a&&e.target.classList.contains("apexcharts-legend-marker")&&(a(this.ctx,n,this.w),this.ctx.events.fireEvent("legendMarkerClick",[this.ctx,n,this.w])),"treemap"!==t.config.chart.type&&"heatmap"!==t.config.chart.type&&!this.isBarsDistributed&&t.config.legend.onItemClick.toggleDataSeries&&this.legendHelpers.toggleDataSeries(n,i)}}}]),e}(),fe=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.ev=this.w.config.chart.events,this.selectedClass="apexcharts-selected",this.localeValues=this.w.globals.locale.toolbar,this.minX=n.globals.minX,this.maxX=n.globals.maxX}return c(e,[{key:"createToolbar",value:function(){var e=this,t=this.w,n=function(){return document.createElement("div")},i=n();if(i.setAttribute("class","apexcharts-toolbar"),i.style.top=t.config.chart.toolbar.offsetY+"px",i.style.right=3-t.config.chart.toolbar.offsetX+"px",t.globals.dom.elWrap.appendChild(i),this.elZoom=n(),this.elZoomIn=n(),this.elZoomOut=n(),this.elPan=n(),this.elSelection=n(),this.elZoomReset=n(),this.elMenuIcon=n(),this.elMenu=n(),this.elCustomIcons=[],this.t=t.config.chart.toolbar.tools,Array.isArray(this.t.customIcons))for(var r=0;r<this.t.customIcons.length;r++)this.elCustomIcons.push(n());var a=[],o=function(n,i,r){var o=n.toLowerCase();e.t[o]&&t.config.chart.zoom.enabled&&a.push({el:i,icon:"string"==typeof e.t[o]?e.t[o]:r,title:e.localeValues[n],class:"apexcharts-".concat(o,"-icon")})};o("zoomIn",this.elZoomIn,'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'),o("zoomOut",this.elZoomOut,'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');var s=function(n){e.t[n]&&t.config.chart[n].enabled&&a.push({el:"zoom"===n?e.elZoom:e.elSelection,icon:"string"==typeof e.t[n]?e.t[n]:"zoom"===n?'<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>':'<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',title:e.localeValues["zoom"===n?"selectionZoom":"selection"],class:t.globals.isTouchDevice?"apexcharts-element-hidden":"apexcharts-".concat(n,"-icon")})};s("zoom"),s("selection"),this.t.pan&&t.config.chart.zoom.enabled&&a.push({el:this.elPan,icon:"string"==typeof this.t.pan?this.t.pan:'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',title:this.localeValues.pan,class:t.globals.isTouchDevice?"apexcharts-element-hidden":"apexcharts-pan-icon"}),o("reset",this.elZoomReset,'<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'),this.t.download&&a.push({el:this.elMenuIcon,icon:"string"==typeof this.t.download?this.t.download:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',title:this.localeValues.menu,class:"apexcharts-menu-icon"});for(var l=0;l<this.elCustomIcons.length;l++)a.push({el:this.elCustomIcons[l],icon:this.t.customIcons[l].icon,title:this.t.customIcons[l].title,index:this.t.customIcons[l].index,class:"apexcharts-toolbar-custom-icon "+this.t.customIcons[l].class});a.forEach((function(e,t){e.index&&b.moveIndexInArray(a,t,e.index)}));for(var c=0;c<a.length;c++)w.setAttrs(a[c].el,{class:a[c].class,title:a[c].title}),a[c].el.innerHTML=a[c].icon,i.appendChild(a[c].el);this._createHamburgerMenu(i),t.globals.zoomEnabled?this.elZoom.classList.add(this.selectedClass):t.globals.panEnabled?this.elPan.classList.add(this.selectedClass):t.globals.selectionEnabled&&this.elSelection.classList.add(this.selectedClass),this.addToolbarEventListeners()}},{key:"_createHamburgerMenu",value:function(e){this.elMenuItems=[],e.appendChild(this.elMenu),w.setAttrs(this.elMenu,{class:"apexcharts-menu"});var t=[{name:"exportSVG",title:this.localeValues.exportToSVG},{name:"exportPNG",title:this.localeValues.exportToPNG},{name:"exportCSV",title:this.localeValues.exportToCSV}];this.w.globals.allSeriesHasEqualX||t.splice(2,1);for(var n=0;n<t.length;n++)this.elMenuItems.push(document.createElement("div")),this.elMenuItems[n].innerHTML=t[n].title,w.setAttrs(this.elMenuItems[n],{class:"apexcharts-menu-item ".concat(t[n].name),title:t[n].title}),this.elMenu.appendChild(this.elMenuItems[n])}},{key:"addToolbarEventListeners",value:function(){var e=this;this.elZoomReset.addEventListener("click",this.handleZoomReset.bind(this)),this.elSelection.addEventListener("click",this.toggleZoomSelection.bind(this,"selection")),this.elZoom.addEventListener("click",this.toggleZoomSelection.bind(this,"zoom")),this.elZoomIn.addEventListener("click",this.handleZoomIn.bind(this)),this.elZoomOut.addEventListener("click",this.handleZoomOut.bind(this)),this.elPan.addEventListener("click",this.togglePanning.bind(this)),this.elMenuIcon.addEventListener("click",this.toggleMenu.bind(this)),this.elMenuItems.forEach((function(t){t.classList.contains("exportSVG")?t.addEventListener("click",e.handleDownload.bind(e,"svg")):t.classList.contains("exportPNG")?t.addEventListener("click",e.handleDownload.bind(e,"png")):t.classList.contains("exportCSV")&&t.addEventListener("click",e.handleDownload.bind(e,"csv"))}));for(var t=0;t<this.t.customIcons.length;t++)this.elCustomIcons[t].addEventListener("click",this.t.customIcons[t].click.bind(this,this.ctx,this.ctx.w))}},{key:"toggleZoomSelection",value:function(e){this.ctx.getSyncedCharts().forEach((function(t){t.ctx.toolbar.toggleOtherControls();var n="selection"===e?t.ctx.toolbar.elSelection:t.ctx.toolbar.elZoom,i="selection"===e?"selectionEnabled":"zoomEnabled";t.w.globals[i]=!t.w.globals[i],n.classList.contains(t.ctx.toolbar.selectedClass)?n.classList.remove(t.ctx.toolbar.selectedClass):n.classList.add(t.ctx.toolbar.selectedClass)}))}},{key:"getToolbarIconsReference",value:function(){var e=this.w;this.elZoom||(this.elZoom=e.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")),this.elPan||(this.elPan=e.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")),this.elSelection||(this.elSelection=e.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"))}},{key:"enableZoomPanFromToolbar",value:function(e){this.toggleOtherControls(),"pan"===e?this.w.globals.panEnabled=!0:this.w.globals.zoomEnabled=!0;var t="pan"===e?this.elPan:this.elZoom,n="pan"===e?this.elZoom:this.elPan;t&&t.classList.add(this.selectedClass),n&&n.classList.remove(this.selectedClass)}},{key:"togglePanning",value:function(){this.ctx.getSyncedCharts().forEach((function(e){e.ctx.toolbar.toggleOtherControls(),e.w.globals.panEnabled=!e.w.globals.panEnabled,e.ctx.toolbar.elPan.classList.contains(e.ctx.toolbar.selectedClass)?e.ctx.toolbar.elPan.classList.remove(e.ctx.toolbar.selectedClass):e.ctx.toolbar.elPan.classList.add(e.ctx.toolbar.selectedClass)}))}},{key:"toggleOtherControls",value:function(){var e=this,t=this.w;t.globals.panEnabled=!1,t.globals.zoomEnabled=!1,t.globals.selectionEnabled=!1,this.getToolbarIconsReference(),[this.elPan,this.elSelection,this.elZoom].forEach((function(t){t&&t.classList.remove(e.selectedClass)}))}},{key:"handleZoomIn",value:function(){var e=this.w;e.globals.isRangeBar&&(this.minX=e.globals.minY,this.maxX=e.globals.maxY);var t=(this.minX+this.maxX)/2,n=(this.minX+t)/2,i=(this.maxX+t)/2,r=this._getNewMinXMaxX(n,i);e.globals.disableZoomIn||this.zoomUpdateOptions(r.minX,r.maxX)}},{key:"handleZoomOut",value:function(){var e=this.w;if(e.globals.isRangeBar&&(this.minX=e.globals.minY,this.maxX=e.globals.maxY),!("datetime"===e.config.xaxis.type&&new Date(this.minX).getUTCFullYear()<1e3)){var t=(this.minX+this.maxX)/2,n=this.minX-(t-this.minX),i=this.maxX-(t-this.maxX),r=this._getNewMinXMaxX(n,i);e.globals.disableZoomOut||this.zoomUpdateOptions(r.minX,r.maxX)}}},{key:"_getNewMinXMaxX",value:function(e,t){var n=this.w.config.xaxis.convertedCatToNumeric;return{minX:n?Math.floor(e):e,maxX:n?Math.floor(t):t}}},{key:"zoomUpdateOptions",value:function(e,t){var n=this.w;if(void 0!==e||void 0!==t){if(!(n.config.xaxis.convertedCatToNumeric&&(e<1&&(e=1,t=n.globals.dataPoints),t-e<2))){var i={min:e,max:t},r=this.getBeforeZoomRange(i);r&&(i=r.xaxis);var a={xaxis:i},o=b.clone(n.globals.initialConfig.yaxis);n.config.chart.zoom.autoScaleYaxis&&(o=new Z(this.ctx).autoScaleY(this.ctx,o,{xaxis:i})),n.config.chart.group||(a.yaxis=o),this.w.globals.zoomed=!0,this.ctx.updateHelpers._updateOptions(a,!1,this.w.config.chart.animations.dynamicAnimation.enabled),this.zoomCallback(i,o)}}else this.handleZoomReset()}},{key:"zoomCallback",value:function(e,t){"function"==typeof this.ev.zoomed&&this.ev.zoomed(this.ctx,{xaxis:e,yaxis:t})}},{key:"getBeforeZoomRange",value:function(e,t){var n=null;return"function"==typeof this.ev.beforeZoom&&(n=this.ev.beforeZoom(this,{xaxis:e,yaxis:t})),n}},{key:"toggleMenu",value:function(){var e=this;window.setTimeout((function(){e.elMenu.classList.contains("apexcharts-menu-open")?e.elMenu.classList.remove("apexcharts-menu-open"):e.elMenu.classList.add("apexcharts-menu-open")}),0)}},{key:"handleDownload",value:function(e){var t=this.w,n=new G(this.ctx);switch(e){case"svg":n.exportToSVG(this.ctx);break;case"png":n.exportToPng(this.ctx);break;case"csv":n.exportToCSV({series:t.config.series,columnDelimiter:t.config.chart.toolbar.export.csv.columnDelimiter})}}},{key:"handleZoomReset",value:function(e){this.ctx.getSyncedCharts().forEach((function(e){var t=e.w;if(t.globals.lastXAxis.min=void 0,t.globals.lastXAxis.max=void 0,e.updateHelpers.revertDefaultAxisMinMax(),"function"==typeof t.config.chart.events.beforeResetZoom){var n=t.config.chart.events.beforeResetZoom(e,t);n&&e.updateHelpers.revertDefaultAxisMinMax(n)}"function"==typeof t.config.chart.events.zoomed&&e.ctx.toolbar.zoomCallback({min:t.config.xaxis.min,max:t.config.xaxis.max}),t.globals.zoomed=!1;var i=e.ctx.series.emptyCollapsedSeries(b.clone(t.globals.initialSeries));e.updateHelpers._updateSeries(i,t.config.chart.animations.dynamicAnimation.enabled)}))}},{key:"destroy",value:function(){this.elZoom=null,this.elZoomIn=null,this.elZoomOut=null,this.elPan=null,this.elSelection=null,this.elZoomReset=null,this.elMenuIcon=null}}]),e}(),pe=function(e){h(n,fe);var t=g(n);function n(e){var i;return s(this,n),(i=t.call(this,e)).ctx=e,i.w=e.w,i.dragged=!1,i.graphics=new w(i.ctx),i.eventList=["mousedown","mouseleave","mousemove","touchstart","touchmove","mouseup","touchend"],i.clientX=0,i.clientY=0,i.startX=0,i.endX=0,i.dragX=0,i.startY=0,i.endY=0,i.dragY=0,i.moveDirection="none",i}return c(n,[{key:"init",value:function(e){var t=this,n=e.xyRatios,i=this.w,r=this;this.xyRatios=n,this.zoomRect=this.graphics.drawRect(0,0,0,0),this.selectionRect=this.graphics.drawRect(0,0,0,0),this.gridRect=i.globals.dom.baseEl.querySelector(".apexcharts-grid"),this.zoomRect.node.classList.add("apexcharts-zoom-rect"),this.selectionRect.node.classList.add("apexcharts-selection-rect"),i.globals.dom.elGraphical.add(this.zoomRect),i.globals.dom.elGraphical.add(this.selectionRect),"x"===i.config.chart.selection.type?this.slDraggableRect=this.selectionRect.draggable({minX:0,minY:0,maxX:i.globals.gridWidth,maxY:i.globals.gridHeight}).on("dragmove",this.selectionDragging.bind(this,"dragging")):"y"===i.config.chart.selection.type?this.slDraggableRect=this.selectionRect.draggable({minX:0,maxX:i.globals.gridWidth}).on("dragmove",this.selectionDragging.bind(this,"dragging")):this.slDraggableRect=this.selectionRect.draggable().on("dragmove",this.selectionDragging.bind(this,"dragging")),this.preselectedSelection(),this.hoverArea=i.globals.dom.baseEl.querySelector("".concat(i.globals.chartClass," .apexcharts-svg")),this.hoverArea.classList.add("apexcharts-zoomable"),this.eventList.forEach((function(e){t.hoverArea.addEventListener(e,r.svgMouseEvents.bind(r,n),{capture:!1,passive:!0})}))}},{key:"destroy",value:function(){this.slDraggableRect&&(this.slDraggableRect.draggable(!1),this.slDraggableRect.off(),this.selectionRect.off()),this.selectionRect=null,this.zoomRect=null,this.gridRect=null}},{key:"svgMouseEvents",value:function(e,t){var n=this.w,i=this,r=this.ctx.toolbar,a=n.globals.zoomEnabled?n.config.chart.zoom.type:n.config.chart.selection.type,o=n.config.chart.toolbar.autoSelected;if(t.shiftKey?(this.shiftWasPressed=!0,r.enableZoomPanFromToolbar("pan"===o?"zoom":"pan")):this.shiftWasPressed&&(r.enableZoomPanFromToolbar(o),this.shiftWasPressed=!1),t.target){var s,l=t.target.classList;if(t.target.parentNode&&null!==t.target.parentNode&&(s=t.target.parentNode.classList),!(l.contains("apexcharts-selection-rect")||l.contains("apexcharts-legend-marker")||l.contains("apexcharts-legend-text")||s&&s.contains("apexcharts-toolbar"))){if(i.clientX="touchmove"===t.type||"touchstart"===t.type?t.touches[0].clientX:"touchend"===t.type?t.changedTouches[0].clientX:t.clientX,i.clientY="touchmove"===t.type||"touchstart"===t.type?t.touches[0].clientY:"touchend"===t.type?t.changedTouches[0].clientY:t.clientY,"mousedown"===t.type&&1===t.which){var c=i.gridRect.getBoundingClientRect();i.startX=i.clientX-c.left,i.startY=i.clientY-c.top,i.dragged=!1,i.w.globals.mousedown=!0}if(("mousemove"===t.type&&1===t.which||"touchmove"===t.type)&&(i.dragged=!0,n.globals.panEnabled?(n.globals.selection=null,i.w.globals.mousedown&&i.panDragging({context:i,zoomtype:a,xyRatios:e})):(i.w.globals.mousedown&&n.globals.zoomEnabled||i.w.globals.mousedown&&n.globals.selectionEnabled)&&(i.selection=i.selectionDrawing({context:i,zoomtype:a}))),"mouseup"===t.type||"touchend"===t.type||"mouseleave"===t.type){var u=i.gridRect.getBoundingClientRect();i.w.globals.mousedown&&(i.endX=i.clientX-u.left,i.endY=i.clientY-u.top,i.dragX=Math.abs(i.endX-i.startX),i.dragY=Math.abs(i.endY-i.startY),(n.globals.zoomEnabled||n.globals.selectionEnabled)&&i.selectionDrawn({context:i,zoomtype:a}),n.globals.panEnabled&&n.config.xaxis.convertedCatToNumeric&&i.delayedPanScrolled()),n.globals.zoomEnabled&&i.hideSelectionRect(this.selectionRect),i.dragged=!1,i.w.globals.mousedown=!1}this.makeSelectionRectDraggable()}}}},{key:"makeSelectionRectDraggable",value:function(){var e=this.w;if(this.selectionRect){var t=this.selectionRect.node.getBoundingClientRect();t.width>0&&t.height>0&&this.slDraggableRect.selectize({points:"l, r",pointSize:8,pointType:"rect"}).resize({constraint:{minX:0,minY:0,maxX:e.globals.gridWidth,maxY:e.globals.gridHeight}}).on("resizing",this.selectionDragging.bind(this,"resizing"))}}},{key:"preselectedSelection",value:function(){var e=this.w,t=this.xyRatios;if(!e.globals.zoomEnabled)if(void 0!==e.globals.selection&&null!==e.globals.selection)this.drawSelectionRect(e.globals.selection);else if(void 0!==e.config.chart.selection.xaxis.min&&void 0!==e.config.chart.selection.xaxis.max){var n=(e.config.chart.selection.xaxis.min-e.globals.minX)/t.xRatio,i={x:n,y:0,width:e.globals.gridWidth-(e.globals.maxX-e.config.chart.selection.xaxis.max)/t.xRatio-n,height:e.globals.gridHeight,translateX:0,translateY:0,selectionEnabled:!0};this.drawSelectionRect(i),this.makeSelectionRectDraggable(),"function"==typeof e.config.chart.events.selection&&e.config.chart.events.selection(this.ctx,{xaxis:{min:e.config.chart.selection.xaxis.min,max:e.config.chart.selection.xaxis.max},yaxis:{}})}}},{key:"drawSelectionRect",value:function(e){var t=e.x,n=e.y,i=e.width,r=e.height,a=e.translateX,o=void 0===a?0:a,s=e.translateY,l=void 0===s?0:s,c=this.w,u=this.zoomRect,h=this.selectionRect;if(this.dragged||null!==c.globals.selection){var d={transform:"translate("+o+", "+l+")"};c.globals.zoomEnabled&&this.dragged&&(i<0&&(i=1),u.attr({x:t,y:n,width:i,height:r,fill:c.config.chart.zoom.zoomedArea.fill.color,"fill-opacity":c.config.chart.zoom.zoomedArea.fill.opacity,stroke:c.config.chart.zoom.zoomedArea.stroke.color,"stroke-width":c.config.chart.zoom.zoomedArea.stroke.width,"stroke-opacity":c.config.chart.zoom.zoomedArea.stroke.opacity}),w.setAttrs(u.node,d)),c.globals.selectionEnabled&&(h.attr({x:t,y:n,width:i>0?i:0,height:r>0?r:0,fill:c.config.chart.selection.fill.color,"fill-opacity":c.config.chart.selection.fill.opacity,stroke:c.config.chart.selection.stroke.color,"stroke-width":c.config.chart.selection.stroke.width,"stroke-dasharray":c.config.chart.selection.stroke.dashArray,"stroke-opacity":c.config.chart.selection.stroke.opacity}),w.setAttrs(h.node,d))}}},{key:"hideSelectionRect",value:function(e){e&&e.attr({x:0,y:0,width:0,height:0})}},{key:"selectionDrawing",value:function(e){var t,n=e.context,i=e.zoomtype,r=this.w,a=n,o=this.gridRect.getBoundingClientRect(),s=a.startX-1,l=a.startY,c=!1,u=!1,h=a.clientX-o.left-s,d=a.clientY-o.top-l;return Math.abs(h+s)>r.globals.gridWidth?h=r.globals.gridWidth-s:a.clientX-o.left<0&&(h=s),s>a.clientX-o.left&&(c=!0,h=Math.abs(h)),l>a.clientY-o.top&&(u=!0,d=Math.abs(d)),t="x"===i?{x:c?s-h:s,y:0,width:h,height:r.globals.gridHeight}:"y"===i?{x:0,y:u?l-d:l,width:r.globals.gridWidth,height:d}:{x:c?s-h:s,y:u?l-d:l,width:h,height:d},a.drawSelectionRect(t),a.selectionDragging("resizing"),t}},{key:"selectionDragging",value:function(e,t){var n=this,i=this.w,r=this.xyRatios,a=this.selectionRect,o=0;"resizing"===e&&(o=30);var s=function(e){return parseFloat(a.node.getAttribute(e))},l={x:s("x"),y:s("y"),width:s("width"),height:s("height")};i.globals.selection=l,"function"==typeof i.config.chart.events.selection&&i.globals.selectionEnabled&&(clearTimeout(this.w.globals.selectionResizeTimer),this.w.globals.selectionResizeTimer=window.setTimeout((function(){var e=n.gridRect.getBoundingClientRect(),t=a.node.getBoundingClientRect(),o={xaxis:{min:i.globals.xAxisScale.niceMin+(t.left-e.left)*r.xRatio,max:i.globals.xAxisScale.niceMin+(t.right-e.left)*r.xRatio},yaxis:{min:i.globals.yAxisScale[0].niceMin+(e.bottom-t.bottom)*r.yRatio[0],max:i.globals.yAxisScale[0].niceMax-(t.top-e.top)*r.yRatio[0]}};i.config.chart.events.selection(n.ctx,o),i.config.chart.brush.enabled&&void 0!==i.config.chart.events.brushScrolled&&i.config.chart.events.brushScrolled(n.ctx,o)}),o))}},{key:"selectionDrawn",value:function(e){var t=e.context,n=e.zoomtype,i=this.w,r=t,a=this.xyRatios,o=this.ctx.toolbar;if(r.startX>r.endX){var s=r.startX;r.startX=r.endX,r.endX=s}if(r.startY>r.endY){var l=r.startY;r.startY=r.endY,r.endY=l}var c=void 0,u=void 0;i.globals.isRangeBar?(c=i.globals.yAxisScale[0].niceMin+r.startX*a.invertedYRatio,u=i.globals.yAxisScale[0].niceMin+r.endX*a.invertedYRatio):(c=i.globals.xAxisScale.niceMin+r.startX*a.xRatio,u=i.globals.xAxisScale.niceMin+r.endX*a.xRatio);var h=[],d=[];if(i.config.yaxis.forEach((function(e,t){h.push(i.globals.yAxisScale[t].niceMax-a.yRatio[t]*r.startY),d.push(i.globals.yAxisScale[t].niceMax-a.yRatio[t]*r.endY)})),r.dragged&&(r.dragX>10||r.dragY>10)&&c!==u)if(i.globals.zoomEnabled){var f=b.clone(i.globals.initialConfig.yaxis),p=b.clone(i.globals.initialConfig.xaxis);if(i.globals.zoomed=!0,i.config.xaxis.convertedCatToNumeric&&(c=Math.floor(c),u=Math.floor(u),c<1&&(c=1,u=i.globals.dataPoints),u-c<2&&(u=c+1)),"xy"!==n&&"x"!==n||(p={min:c,max:u}),"xy"!==n&&"y"!==n||f.forEach((function(e,t){f[t].min=d[t],f[t].max=h[t]})),i.config.chart.zoom.autoScaleYaxis){var g=new Z(r.ctx);f=g.autoScaleY(r.ctx,f,{xaxis:p})}if(o){var m=o.getBeforeZoomRange(p,f);m&&(p=m.xaxis?m.xaxis:p,f=m.yaxis?m.yaxis:f)}var v={xaxis:p};i.config.chart.group||(v.yaxis=f),r.ctx.updateHelpers._updateOptions(v,!1,r.w.config.chart.animations.dynamicAnimation.enabled),"function"==typeof i.config.chart.events.zoomed&&o.zoomCallback(p,f)}else if(i.globals.selectionEnabled){var x,y=null;x={min:c,max:u},"xy"!==n&&"y"!==n||(y=b.clone(i.config.yaxis)).forEach((function(e,t){y[t].min=d[t],y[t].max=h[t]})),i.globals.selection=r.selection,"function"==typeof i.config.chart.events.selection&&i.config.chart.events.selection(r.ctx,{xaxis:x,yaxis:y})}}},{key:"panDragging",value:function(e){var t=e.context,n=this.w,i=t;if(void 0!==n.globals.lastClientPosition.x){var r=n.globals.lastClientPosition.x-i.clientX,a=n.globals.lastClientPosition.y-i.clientY;Math.abs(r)>Math.abs(a)&&r>0?this.moveDirection="left":Math.abs(r)>Math.abs(a)&&r<0?this.moveDirection="right":Math.abs(a)>Math.abs(r)&&a>0?this.moveDirection="up":Math.abs(a)>Math.abs(r)&&a<0&&(this.moveDirection="down")}n.globals.lastClientPosition={x:i.clientX,y:i.clientY};var o=n.globals.isRangeBar?n.globals.minY:n.globals.minX,s=n.globals.isRangeBar?n.globals.maxY:n.globals.maxX;n.config.xaxis.convertedCatToNumeric||i.panScrolled(o,s)}},{key:"delayedPanScrolled",value:function(){var e=this.w,t=e.globals.minX,n=e.globals.maxX,i=(e.globals.maxX-e.globals.minX)/2;"left"===this.moveDirection?(t=e.globals.minX+i,n=e.globals.maxX+i):"right"===this.moveDirection&&(t=e.globals.minX-i,n=e.globals.maxX-i),t=Math.floor(t),n=Math.floor(n),this.updateScrolledChart({xaxis:{min:t,max:n}},t,n)}},{key:"panScrolled",value:function(e,t){var n=this.w,i=this.xyRatios,r=b.clone(n.globals.initialConfig.yaxis),a=i.xRatio,o=n.globals.minX,s=n.globals.maxX;n.globals.isRangeBar&&(a=i.invertedYRatio,o=n.globals.minY,s=n.globals.maxY),"left"===this.moveDirection?(e=o+n.globals.gridWidth/15*a,t=s+n.globals.gridWidth/15*a):"right"===this.moveDirection&&(e=o-n.globals.gridWidth/15*a,t=s-n.globals.gridWidth/15*a),n.globals.isRangeBar||(e<n.globals.initialMinX||t>n.globals.initialMaxX)&&(e=o,t=s);var l={min:e,max:t};n.config.chart.zoom.autoScaleYaxis&&(r=new Z(this.ctx).autoScaleY(this.ctx,r,{xaxis:l}));var c={xaxis:{min:e,max:t}};n.config.chart.group||(c.yaxis=r),this.updateScrolledChart(c,e,t)}},{key:"updateScrolledChart",value:function(e,t,n){var i=this.w;this.ctx.updateHelpers._updateOptions(e,!1,!1),"function"==typeof i.config.chart.events.scrolled&&i.config.chart.events.scrolled(this.ctx,{xaxis:{min:t,max:n}})}}]),n}(),ge=function(){function e(t){s(this,e),this.w=t.w,this.ttCtx=t,this.ctx=t.ctx}return c(e,[{key:"getNearestValues",value:function(e){var t=e.hoverArea,n=e.elGrid,i=e.clientX,r=e.clientY,a=this.w,o=n.getBoundingClientRect(),s=o.width,l=o.height,c=s/(a.globals.dataPoints-1),u=l/a.globals.dataPoints,h=this.hasBars();!a.globals.comboCharts&&!h||a.config.xaxis.convertedCatToNumeric||(c=s/a.globals.dataPoints);var d=i-o.left-a.globals.barPadForNumericAxis,f=r-o.top;d<0||f<0||d>s||f>l?(t.classList.remove("hovering-zoom"),t.classList.remove("hovering-pan")):a.globals.zoomEnabled?(t.classList.remove("hovering-pan"),t.classList.add("hovering-zoom")):a.globals.panEnabled&&(t.classList.remove("hovering-zoom"),t.classList.add("hovering-pan"));var p=Math.round(d/c),g=Math.floor(f/u);h&&!a.config.xaxis.convertedCatToNumeric&&(p=Math.ceil(d/c),p-=1);for(var m,v=null,x=null,y=[],w=0;w<a.globals.seriesXvalues.length;w++)y.push([a.globals.seriesXvalues[w][0]-1e-6].concat(a.globals.seriesXvalues[w]));if(y=y.map((function(e){return e.filter((function(e){return e}))})),m=a.globals.seriesYvalues.map((function(e){return e.filter((function(e){return b.isNumber(e)}))})),a.globals.isXNumeric){var k=this.ttCtx.getElGrid().getBoundingClientRect(),S=d*(k.width/s),A=f*(k.height/l);v=(x=this.closestInMultiArray(S,A,y,m)).index,p=x.j,null!==v&&(y=a.globals.seriesXvalues[v],p=(x=this.closestInArray(S,y)).index)}return a.globals.capturedSeriesIndex=null===v?-1:v,(!p||p<1)&&(p=0),a.globals.isBarHorizontal?a.globals.capturedDataPointIndex=g:a.globals.capturedDataPointIndex=p,{capturedSeries:v,j:a.globals.isBarHorizontal?g:p,hoverX:d,hoverY:f}}},{key:"closestInMultiArray",value:function(e,t,n,i){var r=this.w,a=0,o=null,s=-1;r.globals.series.length>1?a=this.getFirstActiveXArray(n):o=0;var l=i[a][0],c=n[a][0],u=Math.abs(e-c),h=Math.abs(t-l),d=h+u;return i.map((function(r,a){r.map((function(r,l){var c=Math.abs(t-i[a][l]),f=Math.abs(e-n[a][l]),p=f+c;p<d&&(d=p,u=f,h=c,o=a,s=l)}))})),{index:o,j:s}}},{key:"getFirstActiveXArray",value:function(e){for(var t=this.w,n=0,i=e.map((function(e,t){return e.length>0?t:-1})),r=0;r<i.length;r++)if(-1!==i[r]&&-1===t.globals.collapsedSeriesIndices.indexOf(r)&&-1===t.globals.ancillaryCollapsedSeriesIndices.indexOf(r)){n=i[r];break}return n}},{key:"closestInArray",value:function(e,t){for(var n=t[0],i=null,r=Math.abs(e-n),a=0;a<t.length;a++){var o=Math.abs(e-t[a]);o<r&&(r=o,i=a)}return{index:i}}},{key:"isXoverlap",value:function(e){var t=[],n=this.w.globals.seriesX.filter((function(e){return void 0!==e[0]}));if(n.length>0)for(var i=0;i<n.length-1;i++)void 0!==n[i][e]&&void 0!==n[i+1][e]&&n[i][e]!==n[i+1][e]&&t.push("unEqual");return 0===t.length}},{key:"isInitialSeriesSameLen",value:function(){for(var e=!0,t=this.w.globals.initialSeries,n=0;n<t.length-1;n++)if(t[n].data.length!==t[n+1].data.length){e=!1;break}return e}},{key:"getBarsHeight",value:function(e){return m(e).reduce((function(e,t){return e+t.getBBox().height}),0)}},{key:"getElMarkers",value:function(){return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers")}},{key:"getAllMarkers",value:function(){var e=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");(e=m(e)).sort((function(e,t){return Number(t.getAttribute("data:realIndex"))<Number(e.getAttribute("data:realIndex"))?0:-1}));var t=[];return e.forEach((function(e){t.push(e.querySelector(".apexcharts-marker"))})),t}},{key:"hasMarkers",value:function(){return this.getElMarkers().length>0}},{key:"getElBars",value:function(){return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series")}},{key:"hasBars",value:function(){return this.getElBars().length>0}},{key:"getHoverMarkerSize",value:function(e){var t=this.w,n=t.config.markers.hover.size;return void 0===n&&(n=t.globals.markers.size[e]+t.config.markers.hover.sizeOffset),n}},{key:"toggleAllTooltipSeriesGroups",value:function(e){var t=this.w,n=this.ttCtx;0===n.allTooltipSeriesGroups.length&&(n.allTooltipSeriesGroups=t.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));for(var i=n.allTooltipSeriesGroups,r=0;r<i.length;r++)"enable"===e?(i[r].classList.add("apexcharts-active"),i[r].style.display=t.config.tooltip.items.display):(i[r].classList.remove("apexcharts-active"),i[r].style.display="none")}}]),e}(),me=function(){function e(t){s(this,e),this.w=t.w,this.ctx=t.ctx,this.ttCtx=t,this.tooltipUtil=new ge(t)}return c(e,[{key:"drawSeriesTexts",value:function(e){var t=e.shared,n=void 0===t||t,i=e.ttItems,r=e.i,a=void 0===r?0:r,o=e.j,s=void 0===o?null:o,l=e.y1,c=e.y2,u=e.e,h=this.w;void 0!==h.config.tooltip.custom?this.handleCustomTooltip({i:a,j:s,y1:l,y2:c,w:h}):this.toggleActiveInactiveSeries(n);var d=this.getValuesToPrint({i:a,j:s});this.printLabels({i:a,j:s,values:d,ttItems:i,shared:n,e:u});var f=this.ttCtx.getElTooltip();this.ttCtx.tooltipRect.ttWidth=f.getBoundingClientRect().width,this.ttCtx.tooltipRect.ttHeight=f.getBoundingClientRect().height}},{key:"printLabels",value:function(e){var t,n=this,i=e.i,r=e.j,o=e.values,s=e.ttItems,l=e.shared,c=e.e,u=this.w,h=[],d=function(e){return u.globals.seriesGoals[e]&&u.globals.seriesGoals[e][r]&&Array.isArray(u.globals.seriesGoals[e][r])},f=o.xVal,p=o.zVal,g=o.xAxisTTVal,m="",v=u.globals.colors[i];null!==r&&u.config.plotOptions.bar.distributed&&(v=u.globals.colors[r]);for(var b=function(e,o){var b=n.getFormatters(i);m=n.getSeriesName({fn:b.yLbTitleFormatter,index:i,seriesIndex:i,j:r}),"treemap"===u.config.chart.type&&(m=b.yLbTitleFormatter(String(u.config.series[i].data[r].x),{series:u.globals.series,seriesIndex:i,dataPointIndex:r,w:u}));var x=u.config.tooltip.inverseOrder?o:e;if(u.globals.axisCharts){var y=function(e){return b.yLbFormatter(u.globals.series[e][r],{series:u.globals.series,seriesIndex:e,dataPointIndex:r,w:u})};l?(b=n.getFormatters(x),m=n.getSeriesName({fn:b.yLbTitleFormatter,index:x,seriesIndex:i,j:r}),v=u.globals.colors[x],t=y(x),d(x)&&(h=u.globals.seriesGoals[x][r].map((function(e){return{attrs:e,val:b.yLbFormatter(e.value,{seriesIndex:x,dataPointIndex:r,w:u})}})))):(c&&c.target&&c.target.getAttribute("fill")&&(v=c.target.getAttribute("fill")),t=y(i),d(i)&&Array.isArray(u.globals.seriesGoals[i][r])&&(h=u.globals.seriesGoals[i][r].map((function(e){return{attrs:e,val:b.yLbFormatter(e.value,{seriesIndex:i,dataPointIndex:r,w:u})}}))))}null===r&&(t=b.yLbFormatter(u.globals.series[i],a(a({},u),{},{seriesIndex:i,dataPointIndex:i}))),n.DOMHandling({i,t:x,j:r,ttItems:s,values:{val:t,goalVals:h,xVal:f,xAxisTTVal:g,zVal:p},seriesName:m,shared:l,pColor:v})},x=0,y=u.globals.series.length-1;x<u.globals.series.length;x++,y--)b(x,y)}},{key:"getFormatters",value:function(e){var t,n=this.w,i=n.globals.yLabelFormatters[e];return void 0!==n.globals.ttVal?Array.isArray(n.globals.ttVal)?(i=n.globals.ttVal[e]&&n.globals.ttVal[e].formatter,t=n.globals.ttVal[e]&&n.globals.ttVal[e].title&&n.globals.ttVal[e].title.formatter):(i=n.globals.ttVal.formatter,"function"==typeof n.globals.ttVal.title.formatter&&(t=n.globals.ttVal.title.formatter)):t=n.config.tooltip.y.title.formatter,"function"!=typeof i&&(i=n.globals.yLabelFormatters[0]?n.globals.yLabelFormatters[0]:function(e){return e}),"function"!=typeof t&&(t=function(e){return e}),{yLbFormatter:i,yLbTitleFormatter:t}}},{key:"getSeriesName",value:function(e){var t=e.fn,n=e.index,i=e.seriesIndex,r=e.j,a=this.w;return t(String(a.globals.seriesNames[n]),{series:a.globals.series,seriesIndex:i,dataPointIndex:r,w:a})}},{key:"DOMHandling",value:function(e){e.i;var t=e.t,n=e.j,i=e.ttItems,r=e.values,a=e.seriesName,o=e.shared,s=e.pColor,l=this.w,c=this.ttCtx,u=r.val,h=r.goalVals,d=r.xVal,f=r.xAxisTTVal,p=r.zVal,g=null;g=i[t].children,l.config.tooltip.fillSeriesColor&&(i[t].style.backgroundColor=s,g[0].style.display="none"),c.showTooltipTitle&&(null===c.tooltipTitle&&(c.tooltipTitle=l.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")),c.tooltipTitle.innerHTML=d),c.isXAxisTooltipEnabled&&(c.xaxisTooltipText.innerHTML=""!==f?f:d);var m=i[t].querySelector(".apexcharts-tooltip-text-y-label");m&&(m.innerHTML=a||"");var v=i[t].querySelector(".apexcharts-tooltip-text-y-value");v&&(v.innerHTML=void 0!==u?u:""),g[0]&&g[0].classList.contains("apexcharts-tooltip-marker")&&(l.config.tooltip.marker.fillColors&&Array.isArray(l.config.tooltip.marker.fillColors)&&(s=l.config.tooltip.marker.fillColors[t]),g[0].style.backgroundColor=s),l.config.tooltip.marker.show||(g[0].style.display="none");var b=i[t].querySelector(".apexcharts-tooltip-text-goals-label"),x=i[t].querySelector(".apexcharts-tooltip-text-goals-value");if(h.length&&l.globals.seriesGoals[t]){var y=function(){var e="<div >",t="<div>";h.forEach((function(n,i){e+=' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(n.attrs.strokeColor,'; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(n.attrs.name,"</div>"),t+="<div>".concat(n.val,"</div>")})),b.innerHTML=e+"</div>",x.innerHTML=t+"</div>"};o?l.globals.seriesGoals[t][n]&&Array.isArray(l.globals.seriesGoals[t][n])?y():(b.innerHTML="",x.innerHTML=""):y()}else b.innerHTML="",x.innerHTML="";null!==p&&(i[t].querySelector(".apexcharts-tooltip-text-z-label").innerHTML=l.config.tooltip.z.title,i[t].querySelector(".apexcharts-tooltip-text-z-value").innerHTML=void 0!==p?p:""),o&&g[0]&&(null==u||l.globals.ancillaryCollapsedSeriesIndices.indexOf(t)>-1||l.globals.collapsedSeriesIndices.indexOf(t)>-1?g[0].parentNode.style.display="none":g[0].parentNode.style.display=l.config.tooltip.items.display)}},{key:"toggleActiveInactiveSeries",value:function(e){var t=this.w;if(e)this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else{this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");var n=t.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");n&&(n.classList.add("apexcharts-active"),n.style.display=t.config.tooltip.items.display)}}},{key:"getValuesToPrint",value:function(e){var t=e.i,n=e.j,i=this.w,r=this.ctx.series.filteredSeriesX(),a="",o="",s=null,l=null,c={series:i.globals.series,seriesIndex:t,dataPointIndex:n,w:i},u=i.globals.ttZFormatter;null===n?l=i.globals.series[t]:i.globals.isXNumeric&&"treemap"!==i.config.chart.type?(a=r[t][n],0===r[t].length&&(a=r[this.tooltipUtil.getFirstActiveXArray(r)][n])):a=void 0!==i.globals.labels[n]?i.globals.labels[n]:"";var h=a;return a=i.globals.isXNumeric&&"datetime"===i.config.xaxis.type?new j(this.ctx).xLabelFormat(i.globals.ttKeyFormatter,h,h,{i:void 0,dateFormatter:new D(this.ctx).formatDate,w:this.w}):i.globals.isBarHorizontal?i.globals.yLabelFormatters[0](h,c):i.globals.xLabelFormatter(h,c),void 0!==i.config.tooltip.x.formatter&&(a=i.globals.ttKeyFormatter(h,c)),i.globals.seriesZ.length>0&&i.globals.seriesZ[t].length>0&&(s=u(i.globals.seriesZ[t][n],i)),o="function"==typeof i.config.xaxis.tooltip.formatter?i.globals.xaxisTooltipFormatter(h,c):a,{val:Array.isArray(l)?l.join(" "):l,xVal:Array.isArray(a)?a.join(" "):a,xAxisTTVal:Array.isArray(o)?o.join(" "):o,zVal:s}}},{key:"handleCustomTooltip",value:function(e){var t=e.i,n=e.j,i=e.y1,r=e.y2,a=e.w,o=this.ttCtx.getElTooltip(),s=a.config.tooltip.custom;Array.isArray(s)&&s[t]&&(s=s[t]),o.innerHTML=s({ctx:this.ctx,series:a.globals.series,seriesIndex:t,dataPointIndex:n,y1:i,y2:r,w:a})}}]),e}(),ve=function(){function e(t){s(this,e),this.ttCtx=t,this.ctx=t.ctx,this.w=t.w}return c(e,[{key:"moveXCrosshairs",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.ttCtx,i=this.w,r=n.getElXCrosshairs(),a=e-n.xcrosshairsWidth/2,o=i.globals.labels.slice().length;if(null!==t&&(a=i.globals.gridWidth/o*t),null===r||i.globals.isBarHorizontal||(r.setAttribute("x",a),r.setAttribute("x1",a),r.setAttribute("x2",a),r.setAttribute("y2",i.globals.gridHeight),r.classList.add("apexcharts-active")),a<0&&(a=0),a>i.globals.gridWidth&&(a=i.globals.gridWidth),n.isXAxisTooltipEnabled){var s=a;"tickWidth"!==i.config.xaxis.crosshairs.width&&"barWidth"!==i.config.xaxis.crosshairs.width||(s=a+n.xcrosshairsWidth/2),this.moveXAxisTooltip(s)}}},{key:"moveYCrosshairs",value:function(e){var t=this.ttCtx;null!==t.ycrosshairs&&w.setAttrs(t.ycrosshairs,{y1:e,y2:e}),null!==t.ycrosshairsHidden&&w.setAttrs(t.ycrosshairsHidden,{y1:e,y2:e})}},{key:"moveXAxisTooltip",value:function(e){var t=this.w,n=this.ttCtx;if(null!==n.xaxisTooltip&&0!==n.xcrosshairsWidth){n.xaxisTooltip.classList.add("apexcharts-active");var i,r=n.xaxisOffY+t.config.xaxis.tooltip.offsetY+t.globals.translateY+1+t.config.xaxis.offsetY;e-=n.xaxisTooltip.getBoundingClientRect().width/2,isNaN(e)||(e+=t.globals.translateX,i=new w(this.ctx).getTextRects(n.xaxisTooltipText.innerHTML),n.xaxisTooltipText.style.minWidth=i.width+"px",n.xaxisTooltip.style.left=e+"px",n.xaxisTooltip.style.top=r+"px")}}},{key:"moveYAxisTooltip",value:function(e){var t=this.w,n=this.ttCtx;null===n.yaxisTTEls&&(n.yaxisTTEls=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));var i=parseInt(n.ycrosshairsHidden.getAttribute("y1"),10),r=t.globals.translateY+i,a=n.yaxisTTEls[e].getBoundingClientRect().height,o=t.globals.translateYAxisX[e]-2;t.config.yaxis[e].opposite&&(o-=26),r-=a/2,-1===t.globals.ignoreYAxisIndexes.indexOf(e)?(n.yaxisTTEls[e].classList.add("apexcharts-active"),n.yaxisTTEls[e].style.top=r+"px",n.yaxisTTEls[e].style.left=o+t.config.yaxis[e].tooltip.offsetX+"px"):n.yaxisTTEls[e].classList.remove("apexcharts-active")}},{key:"moveTooltip",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=this.w,r=this.ttCtx,a=r.getElTooltip(),o=r.tooltipRect,s=null!==n?parseFloat(n):1,l=parseFloat(e)+s+5,c=parseFloat(t)+s/2;if(l>i.globals.gridWidth/2&&(l=l-o.ttWidth-s-15),l>i.globals.gridWidth-o.ttWidth-10&&(l=i.globals.gridWidth-o.ttWidth),l<-20&&(l=-20),i.config.tooltip.followCursor){var u=r.getElGrid(),h=u.getBoundingClientRect();c=r.e.clientY+i.globals.translateY-h.top-o.ttHeight/2}else i.globals.isBarHorizontal||(o.ttHeight/2+c>i.globals.gridHeight&&(c=i.globals.gridHeight-o.ttHeight+i.globals.translateY),c<0&&(c=0));isNaN(l)||(l+=i.globals.translateX,a.style.left=l+"px",a.style.top=c+"px")}},{key:"moveMarkers",value:function(e,t){var n=this.w,i=this.ttCtx;if(n.globals.markers.size[e]>0)for(var r=n.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(e,"'] .apexcharts-marker")),a=0;a<r.length;a++)parseInt(r[a].getAttribute("rel"),10)===t&&(i.marker.resetPointsSize(),i.marker.enlargeCurrentPoint(t,r[a]));else i.marker.resetPointsSize(),this.moveDynamicPointOnHover(t,e)}},{key:"moveDynamicPointOnHover",value:function(e,t){var n,i,r=this.w,a=this.ttCtx,o=r.globals.pointsArray,s=a.tooltipUtil.getHoverMarkerSize(t),l=r.config.series[t].type;if(!l||"column"!==l&&"candlestick"!==l&&"boxPlot"!==l){n=o[t][e][0],i=o[t][e][1]?o[t][e][1]:0;var c=r.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t,"'] .apexcharts-series-markers circle"));c&&i<r.globals.gridHeight&&i>0&&(c.setAttribute("r",s),c.setAttribute("cx",n),c.setAttribute("cy",i)),this.moveXCrosshairs(n),a.fixedTooltip||this.moveTooltip(n,i,s)}}},{key:"moveDynamicPointsOnHover",value:function(e){var t,n=this.ttCtx,i=n.w,r=0,a=0,o=i.globals.pointsArray;t=new N(this.ctx).getActiveConfigSeriesIndex(!0);var s=n.tooltipUtil.getHoverMarkerSize(t);o[t]&&(r=o[t][e][0],a=o[t][e][1]);var l=n.tooltipUtil.getAllMarkers();if(null!==l)for(var c=0;c<i.globals.series.length;c++){var u=o[c];if(i.globals.comboCharts&&void 0===u&&l.splice(c,0,null),u&&u.length){var h=o[c][e][1];l[c].setAttribute("cx",r),null!==h&&!isNaN(h)&&h<i.globals.gridHeight+s&&h+s>0?(l[c]&&l[c].setAttribute("r",s),l[c]&&l[c].setAttribute("cy",h)):l[c]&&l[c].setAttribute("r",0)}}if(this.moveXCrosshairs(r),!n.fixedTooltip){var d=a||i.globals.gridHeight;this.moveTooltip(r,d,s)}}},{key:"moveStickyTooltipOverBars",value:function(e){var t=this.w,n=this.ttCtx,i=t.globals.columnSeries?t.globals.columnSeries.length:t.globals.series.length,r=i>=2&&i%2==0?Math.floor(i/2):Math.floor(i/2)+1;t.globals.isBarHorizontal&&(r=new N(this.ctx).getActiveConfigSeriesIndex(!1,"desc")+1);var a=t.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r,"'] path[j='").concat(e,"'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r,"'] path[j='").concat(e,"'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r,"'] path[j='").concat(e,"'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r,"'] path[j='").concat(e,"']")),o=a?parseFloat(a.getAttribute("cx")):0,s=a?parseFloat(a.getAttribute("cy")):0,l=a?parseFloat(a.getAttribute("barWidth")):0,c=a?parseFloat(a.getAttribute("barHeight")):0,u=n.getElGrid().getBoundingClientRect(),h=a.classList.contains("apexcharts-candlestick-area")||a.classList.contains("apexcharts-boxPlot-area");if(t.globals.isXNumeric?(a&&!h&&(o-=i%2!=0?l/2:0),a&&h&&t.globals.comboCharts&&(o-=l/2)):t.globals.isBarHorizontal||(o=n.xAxisTicksPositions[e-1]+n.dataPointsDividedWidth/2,isNaN(o)&&(o=n.xAxisTicksPositions[e]-n.dataPointsDividedWidth/2)),t.globals.isBarHorizontal?s+=c/3:s=n.e.clientY-u.top-n.tooltipRect.ttHeight/2,t.globals.isBarHorizontal||this.moveXCrosshairs(o),!n.fixedTooltip){var d=s||t.globals.gridHeight;this.moveTooltip(o,d)}}}]),e}(),be=function(){function e(t){s(this,e),this.w=t.w,this.ttCtx=t,this.ctx=t.ctx,this.tooltipPosition=new ve(t)}return c(e,[{key:"drawDynamicPoints",value:function(){var e=this.w,t=new w(this.ctx),n=new M(this.ctx),i=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");i=m(i),e.config.chart.stacked&&i.sort((function(e,t){return parseFloat(e.getAttribute("data:realIndex"))-parseFloat(t.getAttribute("data:realIndex"))}));for(var r=0;r<i.length;r++){var a=i[r].querySelector(".apexcharts-series-markers-wrap");if(null!==a){var o=void 0,s="apexcharts-marker w".concat((Math.random()+1).toString(36).substring(4));"line"!==e.config.chart.type&&"area"!==e.config.chart.type||e.globals.comboCharts||e.config.tooltip.intersect||(s+=" no-pointer-events");var l=n.getMarkerConfig({cssClass:s,seriesIndex:Number(a.getAttribute("data:realIndex"))});(o=t.drawMarker(0,0,l)).node.setAttribute("default-marker-size",0);var c=document.createElementNS(e.globals.SVGNS,"g");c.classList.add("apexcharts-series-markers"),c.appendChild(o.node),a.appendChild(c)}}}},{key:"enlargeCurrentPoint",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=this.w;"bubble"!==r.config.chart.type&&this.newPointSize(e,t);var a=t.getAttribute("cx"),o=t.getAttribute("cy");if(null!==n&&null!==i&&(a=n,o=i),this.tooltipPosition.moveXCrosshairs(a),!this.fixedTooltip){if("radar"===r.config.chart.type){var s=this.ttCtx.getElGrid(),l=s.getBoundingClientRect();a=this.ttCtx.e.clientX-l.left}this.tooltipPosition.moveTooltip(a,o,r.config.markers.hover.size)}}},{key:"enlargePoints",value:function(e){for(var t=this.w,n=this,i=this.ttCtx,r=e,a=t.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"),o=t.config.markers.hover.size,s=0;s<a.length;s++){var l=a[s].getAttribute("rel"),c=a[s].getAttribute("index");if(void 0===o&&(o=t.globals.markers.size[c]+t.config.markers.hover.sizeOffset),r===parseInt(l,10)){n.newPointSize(r,a[s]);var u=a[s].getAttribute("cx"),h=a[s].getAttribute("cy");n.tooltipPosition.moveXCrosshairs(u),i.fixedTooltip||n.tooltipPosition.moveTooltip(u,h,o)}else n.oldPointSize(a[s])}}},{key:"newPointSize",value:function(e,t){var n=this.w,i=n.config.markers.hover.size,r=0===e?t.parentNode.firstChild:t.parentNode.lastChild;if("0"!==r.getAttribute("default-marker-size")){var a=parseInt(r.getAttribute("index"),10);void 0===i&&(i=n.globals.markers.size[a]+n.config.markers.hover.sizeOffset),i<0&&(i=0),r.setAttribute("r",i)}}},{key:"oldPointSize",value:function(e){var t=parseFloat(e.getAttribute("default-marker-size"));e.setAttribute("r",t)}},{key:"resetPointsSize",value:function(){for(var e=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"),t=0;t<e.length;t++){var n=parseFloat(e[t].getAttribute("default-marker-size"));b.isNumber(n)&&n>=0?e[t].setAttribute("r",n):e[t].setAttribute("r",0)}}}]),e}(),xe=function(){function e(t){s(this,e),this.w=t.w,this.ttCtx=t}return c(e,[{key:"getAttr",value:function(e,t){return parseFloat(e.target.getAttribute(t))}},{key:"handleHeatTreeTooltip",value:function(e){var t=e.e,n=e.opt,i=e.x,r=e.y,a=e.type,o=this.ttCtx,s=this.w;if(t.target.classList.contains("apexcharts-".concat(a,"-rect"))){var l=this.getAttr(t,"i"),c=this.getAttr(t,"j"),u=this.getAttr(t,"cx"),h=this.getAttr(t,"cy"),d=this.getAttr(t,"width"),f=this.getAttr(t,"height");if(o.tooltipLabels.drawSeriesTexts({ttItems:n.ttItems,i:l,j:c,shared:!1,e:t}),s.globals.capturedSeriesIndex=l,s.globals.capturedDataPointIndex=c,i=u+o.tooltipRect.ttWidth/2+d,r=h+o.tooltipRect.ttHeight/2-f/2,o.tooltipPosition.moveXCrosshairs(u+d/2),i>s.globals.gridWidth/2&&(i=u-o.tooltipRect.ttWidth/2+d),o.w.config.tooltip.followCursor){var p=s.globals.dom.elWrap.getBoundingClientRect();i=s.globals.clientX-p.left-(i>s.globals.gridWidth/2?o.tooltipRect.ttWidth:0),r=s.globals.clientY-p.top}}return{x:i,y:r}}},{key:"handleMarkerTooltip",value:function(e){var t,n,i=e.e,r=e.opt,a=e.x,o=e.y,s=this.w,l=this.ttCtx;if(i.target.classList.contains("apexcharts-marker")){var c=parseInt(r.paths.getAttribute("cx"),10),u=parseInt(r.paths.getAttribute("cy"),10),h=parseFloat(r.paths.getAttribute("val"));if(n=parseInt(r.paths.getAttribute("rel"),10),t=parseInt(r.paths.parentNode.parentNode.parentNode.getAttribute("rel"),10)-1,l.intersect){var d=b.findAncestor(r.paths,"apexcharts-series");d&&(t=parseInt(d.getAttribute("data:realIndex"),10))}if(l.tooltipLabels.drawSeriesTexts({ttItems:r.ttItems,i:t,j:n,shared:!l.showOnIntersect&&s.config.tooltip.shared,e:i}),"mouseup"===i.type&&l.markerClick(i,t,n),s.globals.capturedSeriesIndex=t,s.globals.capturedDataPointIndex=n,a=c,o=u+s.globals.translateY-1.4*l.tooltipRect.ttHeight,l.w.config.tooltip.followCursor){var f=l.getElGrid().getBoundingClientRect();o=l.e.clientY+s.globals.translateY-f.top}h<0&&(o=u),l.marker.enlargeCurrentPoint(n,r.paths,a,o)}return{x:a,y:o}}},{key:"handleBarTooltip",value:function(e){var t,n,i=e.e,r=e.opt,a=this.w,o=this.ttCtx,s=o.getElTooltip(),l=0,c=0,u=0,h=this.getBarTooltipXY({e:i,opt:r});t=h.i;var d=h.barHeight,f=h.j;a.globals.capturedSeriesIndex=t,a.globals.capturedDataPointIndex=f,a.globals.isBarHorizontal&&o.tooltipUtil.hasBars()||!a.config.tooltip.shared?(c=h.x,u=h.y,n=Array.isArray(a.config.stroke.width)?a.config.stroke.width[t]:a.config.stroke.width,l=c):a.globals.comboCharts||a.config.tooltip.shared||(l/=2),isNaN(u)?u=a.globals.svgHeight-o.tooltipRect.ttHeight:u<0&&(u=0);var p=parseInt(r.paths.parentNode.getAttribute("data:realIndex"),10),g=a.globals.isMultipleYAxis?a.config.yaxis[p]&&a.config.yaxis[p].reversed:a.config.yaxis[0].reversed;if(c+o.tooltipRect.ttWidth>a.globals.gridWidth&&!g?c-=o.tooltipRect.ttWidth:c<0&&(c=0),o.w.config.tooltip.followCursor){var m=o.getElGrid().getBoundingClientRect();u=o.e.clientY-m.top}null===o.tooltip&&(o.tooltip=a.globals.dom.baseEl.querySelector(".apexcharts-tooltip")),a.config.tooltip.shared||(a.globals.comboBarCount>0?o.tooltipPosition.moveXCrosshairs(l+n/2):o.tooltipPosition.moveXCrosshairs(l)),!o.fixedTooltip&&(!a.config.tooltip.shared||a.globals.isBarHorizontal&&o.tooltipUtil.hasBars())&&(g&&(c-=o.tooltipRect.ttWidth)<0&&(c=0),!g||a.globals.isBarHorizontal&&o.tooltipUtil.hasBars()||(u=u+d-2*(a.globals.series[t][f]<0?d:0)),o.tooltipRect.ttHeight+u>a.globals.gridHeight?u=a.globals.gridHeight-o.tooltipRect.ttHeight+a.globals.translateY:(u=u+a.globals.translateY-o.tooltipRect.ttHeight/2)<0&&(u=0),s.style.left=c+a.globals.translateX+"px",s.style.top=u+"px")}},{key:"getBarTooltipXY",value:function(e){var t=e.e,n=e.opt,i=this.w,r=null,a=this.ttCtx,o=0,s=0,l=0,c=0,u=0,h=t.target.classList;if(h.contains("apexcharts-bar-area")||h.contains("apexcharts-candlestick-area")||h.contains("apexcharts-boxPlot-area")||h.contains("apexcharts-rangebar-area")){var d=t.target,f=d.getBoundingClientRect(),p=n.elGrid.getBoundingClientRect(),g=f.height;u=f.height;var m=f.width,v=parseInt(d.getAttribute("cx"),10),b=parseInt(d.getAttribute("cy"),10);c=parseFloat(d.getAttribute("barWidth"));var x="touchmove"===t.type?t.touches[0].clientX:t.clientX;r=parseInt(d.getAttribute("j"),10),o=parseInt(d.parentNode.getAttribute("rel"),10)-1;var y=d.getAttribute("data-range-y1"),w=d.getAttribute("data-range-y2");i.globals.comboCharts&&(o=parseInt(d.parentNode.getAttribute("data:realIndex"),10)),a.tooltipLabels.drawSeriesTexts({ttItems:n.ttItems,i:o,j:r,y1:y?parseInt(y,10):null,y2:w?parseInt(w,10):null,shared:!a.showOnIntersect&&i.config.tooltip.shared,e:t}),i.config.tooltip.followCursor?i.globals.isBarHorizontal?(s=x-p.left+15,l=b-a.dataPointsDividedHeight+g/2-a.tooltipRect.ttHeight/2):(s=i.globals.isXNumeric?v-m/2:v-a.dataPointsDividedWidth+m/2,l=t.clientY-p.top-a.tooltipRect.ttHeight/2-15):i.globals.isBarHorizontal?((s=v)<a.xyRatios.baseLineInvertedY&&(s=v-a.tooltipRect.ttWidth),l=b-a.dataPointsDividedHeight+g/2-a.tooltipRect.ttHeight/2):(s=i.globals.isXNumeric?v-m/2:v-a.dataPointsDividedWidth+m/2,l=b)}return{x:s,y:l,barHeight:u,barWidth:c,i:o,j:r}}}]),e}(),ye=function(){function e(t){s(this,e),this.w=t.w,this.ttCtx=t}return c(e,[{key:"drawXaxisTooltip",value:function(){var e=this.w,t=this.ttCtx,n="bottom"===e.config.xaxis.position;t.xaxisOffY=n?e.globals.gridHeight+1:-e.globals.xAxisHeight-e.config.xaxis.axisTicks.height+3;var i=n?"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom":"apexcharts-xaxistooltip apexcharts-xaxistooltip-top",r=e.globals.dom.elWrap;t.isXAxisTooltipEnabled&&null===e.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip")&&(t.xaxisTooltip=document.createElement("div"),t.xaxisTooltip.setAttribute("class",i+" apexcharts-theme-"+e.config.tooltip.theme),r.appendChild(t.xaxisTooltip),t.xaxisTooltipText=document.createElement("div"),t.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"),t.xaxisTooltipText.style.fontFamily=e.config.xaxis.tooltip.style.fontFamily||e.config.chart.fontFamily,t.xaxisTooltipText.style.fontSize=e.config.xaxis.tooltip.style.fontSize,t.xaxisTooltip.appendChild(t.xaxisTooltipText))}},{key:"drawYaxisTooltip",value:function(){for(var e=this.w,t=this.ttCtx,n=function(n){var i=e.config.yaxis[n].opposite||e.config.yaxis[n].crosshairs.opposite;t.yaxisOffX=i?e.globals.gridWidth+1:1;var r="apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(n,i?" apexcharts-yaxistooltip-right":" apexcharts-yaxistooltip-left");e.globals.yAxisSameScaleIndices.map((function(t,i){t.map((function(t,i){i===n&&(r+=e.config.yaxis[i].show?" ":" apexcharts-yaxistooltip-hidden")}))}));var a=e.globals.dom.elWrap;null===e.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(n))&&(t.yaxisTooltip=document.createElement("div"),t.yaxisTooltip.setAttribute("class",r+" apexcharts-theme-"+e.config.tooltip.theme),a.appendChild(t.yaxisTooltip),0===n&&(t.yaxisTooltipText=[]),t.yaxisTooltipText[n]=document.createElement("div"),t.yaxisTooltipText[n].classList.add("apexcharts-yaxistooltip-text"),t.yaxisTooltip.appendChild(t.yaxisTooltipText[n]))},i=0;i<e.config.yaxis.length;i++)n(i)}},{key:"setXCrosshairWidth",value:function(){var e=this.w,t=this.ttCtx,n=t.getElXCrosshairs();if(t.xcrosshairsWidth=parseInt(e.config.xaxis.crosshairs.width,10),e.globals.comboCharts){var i=e.globals.dom.baseEl.querySelector(".apexcharts-bar-area");if(null!==i&&"barWidth"===e.config.xaxis.crosshairs.width){var r=parseFloat(i.getAttribute("barWidth"));t.xcrosshairsWidth=r}else if("tickWidth"===e.config.xaxis.crosshairs.width){var a=e.globals.labels.length;t.xcrosshairsWidth=e.globals.gridWidth/a}}else if("tickWidth"===e.config.xaxis.crosshairs.width){var o=e.globals.labels.length;t.xcrosshairsWidth=e.globals.gridWidth/o}else if("barWidth"===e.config.xaxis.crosshairs.width){var s=e.globals.dom.baseEl.querySelector(".apexcharts-bar-area");if(null!==s){var l=parseFloat(s.getAttribute("barWidth"));t.xcrosshairsWidth=l}else t.xcrosshairsWidth=1}e.globals.isBarHorizontal&&(t.xcrosshairsWidth=0),null!==n&&t.xcrosshairsWidth>0&&n.setAttribute("width",t.xcrosshairsWidth)}},{key:"handleYCrosshair",value:function(){var e=this.w,t=this.ttCtx;t.ycrosshairs=e.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"),t.ycrosshairsHidden=e.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden")}},{key:"drawYaxisTooltipText",value:function(e,t,n){var i=this.ttCtx,r=this.w,a=r.globals.yLabelFormatters[e];if(i.yaxisTooltips[e]){var o=i.getElGrid().getBoundingClientRect(),s=(t-o.top)*n.yRatio[e],l=r.globals.maxYArr[e]-r.globals.minYArr[e],c=r.globals.minYArr[e]+(l-s);i.tooltipPosition.moveYCrosshairs(t-o.top),i.yaxisTooltipText[e].innerHTML=a(c),i.tooltipPosition.moveYAxisTooltip(e)}}}]),e}(),we=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.tConfig=n.config.tooltip,this.tooltipUtil=new ge(this),this.tooltipLabels=new me(this),this.tooltipPosition=new ve(this),this.marker=new be(this),this.intersect=new xe(this),this.axesTooltip=new ye(this),this.showOnIntersect=this.tConfig.intersect,this.showTooltipTitle=this.tConfig.x.show,this.fixedTooltip=this.tConfig.fixed.enabled,this.xaxisTooltip=null,this.yaxisTTEls=null,this.isBarShared=!n.globals.isBarHorizontal&&this.tConfig.shared,this.lastHoverTime=Date.now()}return c(e,[{key:"getElTooltip",value:function(e){return e||(e=this),e.w.globals.dom.baseEl?e.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip"):null}},{key:"getElXCrosshairs",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs")}},{key:"getElGrid",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid")}},{key:"drawTooltip",value:function(e){var t=this.w;this.xyRatios=e,this.isXAxisTooltipEnabled=t.config.xaxis.tooltip.enabled&&t.globals.axisCharts,this.yaxisTooltips=t.config.yaxis.map((function(e,n){return!!(e.show&&e.tooltip.enabled&&t.globals.axisCharts)})),this.allTooltipSeriesGroups=[],t.globals.axisCharts||(this.showTooltipTitle=!1);var n=document.createElement("div");if(n.classList.add("apexcharts-tooltip"),n.classList.add("apexcharts-theme-".concat(this.tConfig.theme)),t.globals.dom.elWrap.appendChild(n),t.globals.axisCharts){this.axesTooltip.drawXaxisTooltip(),this.axesTooltip.drawYaxisTooltip(),this.axesTooltip.setXCrosshairWidth(),this.axesTooltip.handleYCrosshair();var i=new q(this.ctx);this.xAxisTicksPositions=i.getXAxisTicksPositions()}if(!t.globals.comboCharts&&!this.tConfig.intersect&&"rangeBar"!==t.config.chart.type||this.tConfig.shared||(this.showOnIntersect=!0),0!==t.config.markers.size&&0!==t.globals.markers.largestSize||this.marker.drawDynamicPoints(this),t.globals.collapsedSeries.length!==t.globals.series.length){this.dataPointsDividedHeight=t.globals.gridHeight/t.globals.dataPoints,this.dataPointsDividedWidth=t.globals.gridWidth/t.globals.dataPoints,this.showTooltipTitle&&(this.tooltipTitle=document.createElement("div"),this.tooltipTitle.classList.add("apexcharts-tooltip-title"),this.tooltipTitle.style.fontFamily=this.tConfig.style.fontFamily||t.config.chart.fontFamily,this.tooltipTitle.style.fontSize=this.tConfig.style.fontSize,n.appendChild(this.tooltipTitle));var r=t.globals.series.length;(t.globals.xyCharts||t.globals.comboCharts)&&this.tConfig.shared&&(r=this.showOnIntersect?1:t.globals.series.length),this.legendLabels=t.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"),this.ttItems=this.createTTElements(r),this.addSVGEvents()}}},{key:"createTTElements",value:function(e){for(var t=this,n=this.w,i=[],r=this.getElTooltip(),a=function(a){var o=document.createElement("div");o.classList.add("apexcharts-tooltip-series-group"),o.style.order=n.config.tooltip.inverseOrder?e-a:a+1,t.tConfig.shared&&t.tConfig.enabledOnSeries&&Array.isArray(t.tConfig.enabledOnSeries)&&t.tConfig.enabledOnSeries.indexOf(a)<0&&o.classList.add("apexcharts-tooltip-series-group-hidden");var s=document.createElement("span");s.classList.add("apexcharts-tooltip-marker"),s.style.backgroundColor=n.globals.colors[a],o.appendChild(s);var l=document.createElement("div");l.classList.add("apexcharts-tooltip-text"),l.style.fontFamily=t.tConfig.style.fontFamily||n.config.chart.fontFamily,l.style.fontSize=t.tConfig.style.fontSize,["y","goals","z"].forEach((function(e){var t=document.createElement("div");t.classList.add("apexcharts-tooltip-".concat(e,"-group"));var n=document.createElement("span");n.classList.add("apexcharts-tooltip-text-".concat(e,"-label")),t.appendChild(n);var i=document.createElement("span");i.classList.add("apexcharts-tooltip-text-".concat(e,"-value")),t.appendChild(i),l.appendChild(t)})),o.appendChild(l),r.appendChild(o),i.push(o)},o=0;o<e;o++)a(o);return i}},{key:"addSVGEvents",value:function(){var e=this.w,t=e.config.chart.type,n=this.getElTooltip(),i=!("bar"!==t&&"candlestick"!==t&&"boxPlot"!==t&&"rangeBar"!==t),r="area"===t||"line"===t||"scatter"===t||"bubble"===t||"radar"===t,a=e.globals.dom.Paper.node,o=this.getElGrid();o&&(this.seriesBound=o.getBoundingClientRect());var s,l=[],c=[],u={hoverArea:a,elGrid:o,tooltipEl:n,tooltipY:l,tooltipX:c,ttItems:this.ttItems};if(e.globals.axisCharts&&(r?s=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"):i?s=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"):"heatmap"!==t&&"treemap"!==t||(s=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")),s&&s.length))for(var h=0;h<s.length;h++)l.push(s[h].getAttribute("cy")),c.push(s[h].getAttribute("cx"));if(e.globals.xyCharts&&!this.showOnIntersect||e.globals.comboCharts&&!this.showOnIntersect||i&&this.tooltipUtil.hasBars()&&this.tConfig.shared)this.addPathsEventListeners([a],u);else if(i&&!e.globals.comboCharts||r&&this.showOnIntersect)this.addDatapointEventsListeners(u);else if(!e.globals.axisCharts||"heatmap"===t||"treemap"===t){var d=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");this.addPathsEventListeners(d,u)}if(this.showOnIntersect){var f=e.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");f.length>0&&this.addPathsEventListeners(f,u),this.tooltipUtil.hasBars()&&!this.tConfig.shared&&this.addDatapointEventsListeners(u)}}},{key:"drawFixedTooltipRect",value:function(){var e=this.w,t=this.getElTooltip(),n=t.getBoundingClientRect(),i=n.width+10,r=n.height+10,a=this.tConfig.fixed.offsetX,o=this.tConfig.fixed.offsetY,s=this.tConfig.fixed.position.toLowerCase();return s.indexOf("right")>-1&&(a=a+e.globals.svgWidth-i+10),s.indexOf("bottom")>-1&&(o=o+e.globals.svgHeight-r-10),t.style.left=a+"px",t.style.top=o+"px",{x:a,y:o,ttWidth:i,ttHeight:r}}},{key:"addDatapointEventsListeners",value:function(e){var t=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");this.addPathsEventListeners(t,e)}},{key:"addPathsEventListeners",value:function(e,t){for(var n=this,i=function(i){var r={paths:e[i],tooltipEl:t.tooltipEl,tooltipY:t.tooltipY,tooltipX:t.tooltipX,elGrid:t.elGrid,hoverArea:t.hoverArea,ttItems:t.ttItems};["mousemove","mouseup","touchmove","mouseout","touchend"].map((function(t){return e[i].addEventListener(t,n.onSeriesHover.bind(n,r),{capture:!1,passive:!0})}))},r=0;r<e.length;r++)i(r)}},{key:"onSeriesHover",value:function(e,t){var n=this,i=Date.now()-this.lastHoverTime;i>=100?this.seriesHover(e,t):(clearTimeout(this.seriesHoverTimeout),this.seriesHoverTimeout=setTimeout((function(){n.seriesHover(e,t)}),100-i))}},{key:"seriesHover",value:function(e,t){var n=this;this.lastHoverTime=Date.now();var i=[],r=this.w;r.config.chart.group&&(i=this.ctx.getGroupedCharts()),r.globals.axisCharts&&(r.globals.minX===-1/0&&r.globals.maxX===1/0||0===r.globals.dataPoints)||(i.length?i.forEach((function(i){var r=n.getElTooltip(i),a={paths:e.paths,tooltipEl:r,tooltipY:e.tooltipY,tooltipX:e.tooltipX,elGrid:e.elGrid,hoverArea:e.hoverArea,ttItems:i.w.globals.tooltip.ttItems};i.w.globals.minX===n.w.globals.minX&&i.w.globals.maxX===n.w.globals.maxX&&i.w.globals.tooltip.seriesHoverByContext({chartCtx:i,ttCtx:i.w.globals.tooltip,opt:a,e:t})})):this.seriesHoverByContext({chartCtx:this.ctx,ttCtx:this.w.globals.tooltip,opt:e,e:t}))}},{key:"seriesHoverByContext",value:function(e){var t=e.chartCtx,n=e.ttCtx,i=e.opt,r=e.e,a=t.w,o=this.getElTooltip();o&&(n.tooltipRect={x:0,y:0,ttWidth:o.getBoundingClientRect().width,ttHeight:o.getBoundingClientRect().height},n.e=r,!n.tooltipUtil.hasBars()||a.globals.comboCharts||n.isBarShared||this.tConfig.onDatasetHover.highlightDataSeries&&new N(t).toggleSeriesOnHover(r,r.target.parentNode),n.fixedTooltip&&n.drawFixedTooltipRect(),a.globals.axisCharts?n.axisChartsTooltips({e:r,opt:i,tooltipRect:n.tooltipRect}):n.nonAxisChartsTooltips({e:r,opt:i,tooltipRect:n.tooltipRect}))}},{key:"axisChartsTooltips",value:function(e){var t,n,i=e.e,r=e.opt,a=this.w,o=r.elGrid.getBoundingClientRect(),s="touchmove"===i.type?i.touches[0].clientX:i.clientX,l="touchmove"===i.type?i.touches[0].clientY:i.clientY;if(this.clientY=l,this.clientX=s,a.globals.capturedSeriesIndex=-1,a.globals.capturedDataPointIndex=-1,l<o.top||l>o.top+o.height)this.handleMouseOut(r);else{if(Array.isArray(this.tConfig.enabledOnSeries)&&!a.config.tooltip.shared){var c=parseInt(r.paths.getAttribute("index"),10);if(this.tConfig.enabledOnSeries.indexOf(c)<0)return void this.handleMouseOut(r)}var u=this.getElTooltip(),h=this.getElXCrosshairs(),d=a.globals.xyCharts||"bar"===a.config.chart.type&&!a.globals.isBarHorizontal&&this.tooltipUtil.hasBars()&&this.tConfig.shared||a.globals.comboCharts&&this.tooltipUtil.hasBars();if("mousemove"===i.type||"touchmove"===i.type||"mouseup"===i.type){if(a.globals.collapsedSeries.length+a.globals.ancillaryCollapsedSeries.length===a.globals.series.length)return;null!==h&&h.classList.add("apexcharts-active");var f=this.yaxisTooltips.filter((function(e){return!0===e}));if(null!==this.ycrosshairs&&f.length&&this.ycrosshairs.classList.add("apexcharts-active"),d&&!this.showOnIntersect)this.handleStickyTooltip(i,s,l,r);else if("heatmap"===a.config.chart.type||"treemap"===a.config.chart.type){var p=this.intersect.handleHeatTreeTooltip({e:i,opt:r,x:t,y:n,type:a.config.chart.type});t=p.x,n=p.y,u.style.left=t+"px",u.style.top=n+"px"}else this.tooltipUtil.hasBars()&&this.intersect.handleBarTooltip({e:i,opt:r}),this.tooltipUtil.hasMarkers()&&this.intersect.handleMarkerTooltip({e:i,opt:r,x:t,y:n});if(this.yaxisTooltips.length)for(var g=0;g<a.config.yaxis.length;g++)this.axesTooltip.drawYaxisTooltipText(g,l,this.xyRatios);r.tooltipEl.classList.add("apexcharts-active")}else"mouseout"!==i.type&&"touchend"!==i.type||this.handleMouseOut(r)}}},{key:"nonAxisChartsTooltips",value:function(e){var t=e.e,n=e.opt,i=e.tooltipRect,r=this.w,a=n.paths.getAttribute("rel"),o=this.getElTooltip(),s=r.globals.dom.elWrap.getBoundingClientRect();if("mousemove"===t.type||"touchmove"===t.type){o.classList.add("apexcharts-active"),this.tooltipLabels.drawSeriesTexts({ttItems:n.ttItems,i:parseInt(a,10)-1,shared:!1});var l=r.globals.clientX-s.left-i.ttWidth/2,c=r.globals.clientY-s.top-i.ttHeight-10;if(o.style.left=l+"px",o.style.top=c+"px",r.config.legend.tooltipHoverFormatter){var u=a-1,h=(0,r.config.legend.tooltipHoverFormatter)(this.legendLabels[u].getAttribute("data:default-text"),{seriesIndex:u,dataPointIndex:u,w:r});this.legendLabels[u].innerHTML=h}}else"mouseout"!==t.type&&"touchend"!==t.type||(o.classList.remove("apexcharts-active"),r.config.legend.tooltipHoverFormatter&&this.legendLabels.forEach((function(e){var t=e.getAttribute("data:default-text");e.innerHTML=decodeURIComponent(t)})))}},{key:"handleStickyTooltip",value:function(e,t,n,i){var r=this.w,a=this.tooltipUtil.getNearestValues({context:this,hoverArea:i.hoverArea,elGrid:i.elGrid,clientX:t,clientY:n}),o=a.j,s=a.capturedSeries,l=i.elGrid.getBoundingClientRect();a.hoverX<0||a.hoverX>l.width?this.handleMouseOut(i):null!==s?this.handleStickyCapturedSeries(e,s,i,o):(this.tooltipUtil.isXoverlap(o)||r.globals.isBarHorizontal)&&this.create(e,this,0,o,i.ttItems)}},{key:"handleStickyCapturedSeries",value:function(e,t,n,i){var r=this.w;this.tConfig.shared||null!==r.globals.series[t][i]?void 0!==r.globals.series[t][i]?this.tConfig.shared&&this.tooltipUtil.isXoverlap(i)&&this.tooltipUtil.isInitialSeriesSameLen()?this.create(e,this,t,i,n.ttItems):this.create(e,this,t,i,n.ttItems,!1):this.tooltipUtil.isXoverlap(i)&&this.create(e,this,0,i,n.ttItems):this.handleMouseOut(n)}},{key:"deactivateHoverFilter",value:function(){for(var e=this.w,t=new w(this.ctx),n=e.globals.dom.Paper.select(".apexcharts-bar-area"),i=0;i<n.length;i++)t.pathMouseLeave(n[i])}},{key:"handleMouseOut",value:function(e){var t=this.w,n=this.getElXCrosshairs();if(e.tooltipEl.classList.remove("apexcharts-active"),this.deactivateHoverFilter(),"bubble"!==t.config.chart.type&&this.marker.resetPointsSize(),null!==n&&n.classList.remove("apexcharts-active"),null!==this.ycrosshairs&&this.ycrosshairs.classList.remove("apexcharts-active"),this.isXAxisTooltipEnabled&&this.xaxisTooltip.classList.remove("apexcharts-active"),this.yaxisTooltips.length){null===this.yaxisTTEls&&(this.yaxisTTEls=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));for(var i=0;i<this.yaxisTTEls.length;i++)this.yaxisTTEls[i].classList.remove("apexcharts-active")}t.config.legend.tooltipHoverFormatter&&this.legendLabels.forEach((function(e){var t=e.getAttribute("data:default-text");e.innerHTML=decodeURIComponent(t)}))}},{key:"markerClick",value:function(e,t,n){var i=this.w;"function"==typeof i.config.chart.events.markerClick&&i.config.chart.events.markerClick(e,this.ctx,{seriesIndex:t,dataPointIndex:n,w:i}),this.ctx.events.fireEvent("markerClick",[e,this.ctx,{seriesIndex:t,dataPointIndex:n,w:i}])}},{key:"create",value:function(e,t,n,i,r){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,o=this.w,s=t;"mouseup"===e.type&&this.markerClick(e,n,i),null===a&&(a=this.tConfig.shared);var l=this.tooltipUtil.hasMarkers(),c=this.tooltipUtil.getElBars();if(o.config.legend.tooltipHoverFormatter){var u=o.config.legend.tooltipHoverFormatter,h=Array.from(this.legendLabels);h.forEach((function(e){var t=e.getAttribute("data:default-text");e.innerHTML=decodeURIComponent(t)}));for(var d=0;d<h.length;d++){var f=h[d],p=parseInt(f.getAttribute("i"),10),g=decodeURIComponent(f.getAttribute("data:default-text")),m=u(g,{seriesIndex:a?p:n,dataPointIndex:i,w:o});if(a)f.innerHTML=o.globals.collapsedSeriesIndices.indexOf(p)<0?m:g;else if(f.innerHTML=p===n?m:g,n===p)break}}if(a){if(s.tooltipLabels.drawSeriesTexts({ttItems:r,i:n,j:i,shared:!this.showOnIntersect&&this.tConfig.shared}),l&&(o.globals.markers.largestSize>0?s.marker.enlargePoints(i):s.tooltipPosition.moveDynamicPointsOnHover(i)),this.tooltipUtil.hasBars()&&(this.barSeriesHeight=this.tooltipUtil.getBarsHeight(c),this.barSeriesHeight>0)){var v=new w(this.ctx),b=o.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(i,"']"));this.deactivateHoverFilter(),this.tooltipPosition.moveStickyTooltipOverBars(i);for(var x=0;x<b.length;x++)v.pathMouseEnter(b[x])}}else s.tooltipLabels.drawSeriesTexts({shared:!1,ttItems:r,i:n,j:i}),this.tooltipUtil.hasBars()&&s.tooltipPosition.moveStickyTooltipOverBars(i),l&&s.tooltipPosition.moveMarkers(n,i)}}]),e}(),ke=function(e){h(n,F);var t=g(n);function n(){return s(this,n),t.apply(this,arguments)}return c(n,[{key:"draw",value:function(e,t){var n=this,i=this.w;this.graphics=new w(this.ctx),this.bar=new F(this.ctx,this.xyRatios);var r=new A(this.ctx,i);e=r.getLogSeries(e),this.yRatio=r.getLogYRatios(this.yRatio),this.barHelpers.initVariables(e),"100%"===i.config.chart.stackType&&(e=i.globals.seriesPercent.slice()),this.series=e,this.totalItems=0,this.prevY=[],this.prevX=[],this.prevYF=[],this.prevXF=[],this.prevYVal=[],this.prevXVal=[],this.xArrj=[],this.xArrjF=[],this.xArrjVal=[],this.yArrj=[],this.yArrjF=[],this.yArrjVal=[];for(var o=0;o<e.length;o++)e[o].length>0&&(this.totalItems+=e[o].length);for(var s=this.graphics.group({class:"apexcharts-bar-series apexcharts-plot-series"}),l=0,c=0,u=function(r,o){var u=void 0,h=void 0,d=void 0,f=void 0,p=[],g=[],m=i.globals.comboCharts?t[r]:r;n.yRatio.length>1&&(n.yaxisIndex=m),n.isReversed=i.config.yaxis[n.yaxisIndex]&&i.config.yaxis[n.yaxisIndex].reversed;var v=n.graphics.group({class:"apexcharts-series",seriesName:b.escapeString(i.globals.seriesNames[m]),rel:r+1,"data:realIndex":m});n.ctx.series.addCollapsedClassToSeries(v,m);var x=n.graphics.group({class:"apexcharts-datalabels","data:realIndex":m}),y=0,w=0,k=n.initialPositions(l,c,u,h,d,f);c=k.y,y=k.barHeight,h=k.yDivision,f=k.zeroW,l=k.x,w=k.barWidth,u=k.xDivision,d=k.zeroH,n.yArrj=[],n.yArrjF=[],n.yArrjVal=[],n.xArrj=[],n.xArrjF=[],n.xArrjVal=[],1===n.prevY.length&&n.prevY[0].every((function(e){return isNaN(e)}))&&(n.prevY[0]=n.prevY[0].map((function(e){return d})),n.prevYF[0]=n.prevYF[0].map((function(e){return 0})));for(var S=0;S<i.globals.dataPoints;S++){var A=n.barHelpers.getStrokeWidth(r,S,m),C={indexes:{i:r,j:S,realIndex:m,bc:o},strokeWidth:A,x:l,y:c,elSeries:v},E=null;n.isHorizontal?(E=n.drawStackedBarPaths(a(a({},C),{},{zeroW:f,barHeight:y,yDivision:h})),w=n.series[r][S]/n.invertedYRatio):(E=n.drawStackedColumnPaths(a(a({},C),{},{xDivision:u,barWidth:w,zeroH:d})),y=n.series[r][S]/n.yRatio[n.yaxisIndex]),c=E.y,l=E.x,p.push(l),g.push(c);var T=n.barHelpers.getPathFillColor(e,r,S,m);v=n.renderSeries({realIndex:m,pathFill:T,j:S,i:r,pathFrom:E.pathFrom,pathTo:E.pathTo,strokeWidth:A,elSeries:v,x:l,y:c,series:e,barHeight:y,barWidth:w,elDataLabelsWrap:x,type:"bar",visibleSeries:0})}i.globals.seriesXvalues[m]=p,i.globals.seriesYvalues[m]=g,n.prevY.push(n.yArrj),n.prevYF.push(n.yArrjF),n.prevYVal.push(n.yArrjVal),n.prevX.push(n.xArrj),n.prevXF.push(n.xArrjF),n.prevXVal.push(n.xArrjVal),s.add(v)},h=0,d=0;h<e.length;h++,d++)u(h,d);return s}},{key:"initialPositions",value:function(e,t,n,i,r,a){var o,s,l=this.w;return this.isHorizontal?(o=(o=i=l.globals.gridHeight/l.globals.dataPoints)*parseInt(l.config.plotOptions.bar.barHeight,10)/100,a=this.baseLineInvertedY+l.globals.padHorizontal+(this.isReversed?l.globals.gridWidth:0)-(this.isReversed?2*this.baseLineInvertedY:0),t=(i-o)/2):(s=n=l.globals.gridWidth/l.globals.dataPoints,s=l.globals.isXNumeric&&l.globals.dataPoints>1?(n=l.globals.minXDiff/this.xRatio)*parseInt(this.barOptions.columnWidth,10)/100:s*parseInt(l.config.plotOptions.bar.columnWidth,10)/100,r=this.baseLineY[this.yaxisIndex]+(this.isReversed?l.globals.gridHeight:0)-(this.isReversed?2*this.baseLineY[this.yaxisIndex]:0),e=l.globals.padHorizontal+(n-s)/2),{x:e,y:t,yDivision:i,xDivision:n,barHeight:o,barWidth:s,zeroH:r,zeroW:a}}},{key:"drawStackedBarPaths",value:function(e){for(var t,n=e.indexes,i=e.barHeight,r=e.strokeWidth,a=e.zeroW,o=e.x,s=e.y,l=e.yDivision,c=e.elSeries,u=this.w,h=s,d=n.i,f=n.j,p=0,g=0;g<this.prevXF.length;g++)p+=this.prevXF[g][f];if(d>0){var m=a;this.prevXVal[d-1][f]<0?m=this.series[d][f]>=0?this.prevX[d-1][f]+p-2*(this.isReversed?p:0):this.prevX[d-1][f]:this.prevXVal[d-1][f]>=0&&(m=this.series[d][f]>=0?this.prevX[d-1][f]:this.prevX[d-1][f]-p+2*(this.isReversed?p:0)),t=m}else t=a;o=null===this.series[d][f]?t:t+this.series[d][f]/this.invertedYRatio-2*(this.isReversed?this.series[d][f]/this.invertedYRatio:0);var v=this.barHelpers.getBarpaths({barYPosition:h,barHeight:i,x1:t,x2:o,strokeWidth:r,series:this.series,realIndex:n.realIndex,i:d,j:f,w:u});return this.barHelpers.barBackground({j:f,i:d,y1:h,y2:i,elSeries:c}),s+=l,{pathTo:v.pathTo,pathFrom:v.pathFrom,x:o,y:s}}},{key:"drawStackedColumnPaths",value:function(e){var t=e.indexes,n=e.x,i=e.y,r=e.xDivision,a=e.barWidth,o=e.zeroH;e.strokeWidth;var s=e.elSeries,l=this.w,c=t.i,u=t.j,h=t.bc;if(l.globals.isXNumeric){var d=l.globals.seriesX[c][u];d||(d=0),n=(d-l.globals.minX)/this.xRatio-a/2}for(var f,p=n,g=0,m=0;m<this.prevYF.length;m++)g+=isNaN(this.prevYF[m][u])?0:this.prevYF[m][u];if(c>0&&!l.globals.isXNumeric||c>0&&l.globals.isXNumeric&&l.globals.seriesX[c-1][u]===l.globals.seriesX[c][u]){var v,b,x=Math.min(this.yRatio.length+1,c+1);if(void 0!==this.prevY[c-1])for(var y=1;y<x;y++)if(!isNaN(this.prevY[c-y][u])){b=this.prevY[c-y][u];break}for(var w=1;w<x;w++){if(this.prevYVal[c-w][u]<0){v=this.series[c][u]>=0?b-g+2*(this.isReversed?g:0):b;break}if(this.prevYVal[c-w][u]>=0){v=this.series[c][u]>=0?b:b+g-2*(this.isReversed?g:0);break}}void 0===v&&(v=l.globals.gridHeight),f=this.prevYF[0].every((function(e){return 0===e}))&&this.prevYF.slice(1,c).every((function(e){return e.every((function(e){return isNaN(e)}))}))?l.globals.gridHeight-o:v}else f=l.globals.gridHeight-o;i=f-this.series[c][u]/this.yRatio[this.yaxisIndex]+2*(this.isReversed?this.series[c][u]/this.yRatio[this.yaxisIndex]:0);var k=this.barHelpers.getColumnPaths({barXPosition:p,barWidth:a,y1:f,y2:i,yRatio:this.yRatio[this.yaxisIndex],strokeWidth:this.strokeWidth,series:this.series,realIndex:t.realIndex,i:c,j:u,w:l});return this.barHelpers.barBackground({bc:h,j:u,i:c,x1:p,x2:a,elSeries:s}),n+=r,{pathTo:k.pathTo,pathFrom:k.pathFrom,x:l.globals.isXNumeric?n-r:n,y:i}}}]),n}(),Se=function(e){h(n,F);var t=g(n);function n(){return s(this,n),t.apply(this,arguments)}return c(n,[{key:"draw",value:function(e,t){var n=this,i=this.w,r=new w(this.ctx),o=new R(this.ctx);this.candlestickOptions=this.w.config.plotOptions.candlestick,this.boxOptions=this.w.config.plotOptions.boxPlot,this.isHorizontal=i.config.plotOptions.bar.horizontal;var s=new A(this.ctx,i);e=s.getLogSeries(e),this.series=e,this.yRatio=s.getLogYRatios(this.yRatio),this.barHelpers.initVariables(e);for(var l=r.group({class:"apexcharts-".concat(i.config.chart.type,"-series apexcharts-plot-series")}),c=function(s){n.isBoxPlot="boxPlot"===i.config.chart.type||"boxPlot"===i.config.series[s].type;var c,u,h,d,f,p,g=void 0,m=void 0,v=[],x=[],y=i.globals.comboCharts?t[s]:s,w=r.group({class:"apexcharts-series",seriesName:b.escapeString(i.globals.seriesNames[y]),rel:s+1,"data:realIndex":y});n.ctx.series.addCollapsedClassToSeries(w,y),e[s].length>0&&(n.visibleI=n.visibleI+1),n.yRatio.length>1&&(n.yaxisIndex=y);var k=n.barHelpers.initialPositions();m=k.y,f=k.barHeight,u=k.yDivision,d=k.zeroW,g=k.x,p=k.barWidth,c=k.xDivision,h=k.zeroH,x.push(g+p/2);for(var S=r.group({class:"apexcharts-datalabels","data:realIndex":y}),A=function(t){var r=n.barHelpers.getStrokeWidth(s,t,y),l=null,b={indexes:{i:s,j:t,realIndex:y},x:g,y:m,strokeWidth:r,elSeries:w};l=n.isHorizontal?n.drawHorizontalBoxPaths(a(a({},b),{},{yDivision:u,barHeight:f,zeroW:d})):n.drawVerticalBoxPaths(a(a({},b),{},{xDivision:c,barWidth:p,zeroH:h})),m=l.y,g=l.x,t>0&&x.push(g+p/2),v.push(m),l.pathTo.forEach((function(a,c){var u=!n.isBoxPlot&&n.candlestickOptions.wick.useFillColor?l.color[c]:i.globals.stroke.colors[s],h=o.fillPath({seriesNumber:y,dataPointIndex:t,color:l.color[c],value:e[s][t]});n.renderSeries({realIndex:y,pathFill:h,lineFill:u,j:t,i:s,pathFrom:l.pathFrom,pathTo:a,strokeWidth:r,elSeries:w,x:g,y:m,series:e,barHeight:f,barWidth:p,elDataLabelsWrap:S,visibleSeries:n.visibleI,type:i.config.chart.type})}))},C=0;C<i.globals.dataPoints;C++)A(C);i.globals.seriesXvalues[y]=x,i.globals.seriesYvalues[y]=v,l.add(w)},u=0;u<e.length;u++)c(u);return l}},{key:"drawVerticalBoxPaths",value:function(e){var t=e.indexes,n=e.x;e.y;var i=e.xDivision,r=e.barWidth,a=e.zeroH,o=e.strokeWidth,s=this.w,l=new w(this.ctx),c=t.i,u=t.j,h=!0,d=s.config.plotOptions.candlestick.colors.upward,f=s.config.plotOptions.candlestick.colors.downward,p="";this.isBoxPlot&&(p=[this.boxOptions.colors.lower,this.boxOptions.colors.upper]);var g=this.yRatio[this.yaxisIndex],m=t.realIndex,v=this.getOHLCValue(m,u),b=a,x=a;v.o>v.c&&(h=!1);var y=Math.min(v.o,v.c),k=Math.max(v.o,v.c),S=v.m;s.globals.isXNumeric&&(n=(s.globals.seriesX[m][u]-s.globals.minX)/this.xRatio-r/2);var A=n+r*this.visibleI;void 0===this.series[c][u]||null===this.series[c][u]?(y=a,k=a):(y=a-y/g,k=a-k/g,b=a-v.h/g,x=a-v.l/g,S=a-v.m/g);var C=l.move(A,a),E=l.move(A+r/2,y);return s.globals.previousPaths.length>0&&(E=this.getPreviousPath(m,u,!0)),C=this.isBoxPlot?[l.move(A,y)+l.line(A+r/2,y)+l.line(A+r/2,b)+l.line(A+r/4,b)+l.line(A+r-r/4,b)+l.line(A+r/2,b)+l.line(A+r/2,y)+l.line(A+r,y)+l.line(A+r,S)+l.line(A,S)+l.line(A,y+o/2),l.move(A,S)+l.line(A+r,S)+l.line(A+r,k)+l.line(A+r/2,k)+l.line(A+r/2,x)+l.line(A+r-r/4,x)+l.line(A+r/4,x)+l.line(A+r/2,x)+l.line(A+r/2,k)+l.line(A,k)+l.line(A,S)+"z"]:[l.move(A,k)+l.line(A+r/2,k)+l.line(A+r/2,b)+l.line(A+r/2,k)+l.line(A+r,k)+l.line(A+r,y)+l.line(A+r/2,y)+l.line(A+r/2,x)+l.line(A+r/2,y)+l.line(A,y)+l.line(A,k-o/2)],E+=l.move(A,y),s.globals.isXNumeric||(n+=i),{pathTo:C,pathFrom:E,x:n,y:k,barXPosition:A,color:this.isBoxPlot?p:h?[d]:[f]}}},{key:"drawHorizontalBoxPaths",value:function(e){var t=e.indexes;e.x;var n=e.y,i=e.yDivision,r=e.barHeight,a=e.zeroW,o=e.strokeWidth,s=this.w,l=new w(this.ctx),c=t.i,u=t.j,h=this.boxOptions.colors.lower;this.isBoxPlot&&(h=[this.boxOptions.colors.lower,this.boxOptions.colors.upper]);var d=this.invertedYRatio,f=t.realIndex,p=this.getOHLCValue(f,u),g=a,m=a,v=Math.min(p.o,p.c),b=Math.max(p.o,p.c),x=p.m;s.globals.isXNumeric&&(n=(s.globals.seriesX[f][u]-s.globals.minX)/this.invertedXRatio-r/2);var y=n+r*this.visibleI;void 0===this.series[c][u]||null===this.series[c][u]?(v=a,b=a):(v=a+v/d,b=a+b/d,g=a+p.h/d,m=a+p.l/d,x=a+p.m/d);var k=l.move(a,y),S=l.move(v,y+r/2);return s.globals.previousPaths.length>0&&(S=this.getPreviousPath(f,u,!0)),k=[l.move(v,y)+l.line(v,y+r/2)+l.line(g,y+r/2)+l.line(g,y+r/2-r/4)+l.line(g,y+r/2+r/4)+l.line(g,y+r/2)+l.line(v,y+r/2)+l.line(v,y+r)+l.line(x,y+r)+l.line(x,y)+l.line(v+o/2,y),l.move(x,y)+l.line(x,y+r)+l.line(b,y+r)+l.line(b,y+r/2)+l.line(m,y+r/2)+l.line(m,y+r-r/4)+l.line(m,y+r/4)+l.line(m,y+r/2)+l.line(b,y+r/2)+l.line(b,y)+l.line(x,y)+"z"],S+=l.move(v,y),s.globals.isXNumeric||(n+=i),{pathTo:k,pathFrom:S,x:b,y:n,barYPosition:y,color:h}}},{key:"getOHLCValue",value:function(e,t){var n=this.w;return{o:this.isBoxPlot?n.globals.seriesCandleH[e][t]:n.globals.seriesCandleO[e][t],h:this.isBoxPlot?n.globals.seriesCandleO[e][t]:n.globals.seriesCandleH[e][t],m:n.globals.seriesCandleM[e][t],l:this.isBoxPlot?n.globals.seriesCandleC[e][t]:n.globals.seriesCandleL[e][t],c:this.isBoxPlot?n.globals.seriesCandleL[e][t]:n.globals.seriesCandleC[e][t]}}}]),n}(),Ae=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"checkColorRange",value:function(){var e=this.w,t=!1,n=e.config.plotOptions[e.config.chart.type];return n.colorScale.ranges.length>0&&n.colorScale.ranges.map((function(e,n){e.from<=0&&(t=!0)})),t}},{key:"getShadeColor",value:function(e,t,n,i){var r=this.w,a=1,o=r.config.plotOptions[e].shadeIntensity,s=this.determineColor(e,t,n);r.globals.hasNegs||i?a=r.config.plotOptions[e].reverseNegativeShade?s.percent<0?s.percent/100*(1.25*o):(1-s.percent/100)*(1.25*o):s.percent<=0?1-(1+s.percent/100)*o:(1-s.percent/100)*o:(a=1-s.percent/100,"treemap"===e&&(a=(1-s.percent/100)*(1.25*o)));var l=s.color,c=new b;return r.config.plotOptions[e].enableShades&&(l="dark"===this.w.config.theme.mode?b.hexToRgba(c.shadeColor(-1*a,s.color),r.config.fill.opacity):b.hexToRgba(c.shadeColor(a,s.color),r.config.fill.opacity)),{color:l,colorProps:s}}},{key:"determineColor",value:function(e,t,n){var i=this.w,r=i.globals.series[t][n],a=i.config.plotOptions[e],o=a.colorScale.inverse?n:t;a.distributed&&"treemap"===i.config.chart.type&&(o=n);var s=i.globals.colors[o],l=null,c=Math.min.apply(Math,m(i.globals.series[t])),u=Math.max.apply(Math,m(i.globals.series[t]));a.distributed||"heatmap"!==e||(c=i.globals.minY,u=i.globals.maxY),void 0!==a.colorScale.min&&(c=a.colorScale.min<i.globals.minY?a.colorScale.min:i.globals.minY,u=a.colorScale.max>i.globals.maxY?a.colorScale.max:i.globals.maxY);var h=Math.abs(u)+Math.abs(c),d=100*r/(0===h?h-1e-6:h);return a.colorScale.ranges.length>0&&a.colorScale.ranges.map((function(e,t){if(r>=e.from&&r<=e.to){s=e.color,l=e.foreColor?e.foreColor:null,c=e.from,u=e.to;var n=Math.abs(u)+Math.abs(c);d=100*r/(0===n?n-1e-6:n)}})),{color:s,foreColor:l,percent:d}}},{key:"calculateDataLabels",value:function(e){var t=e.text,n=e.x,i=e.y,r=e.i,a=e.j,o=e.colorProps,s=e.fontSize,l=this.w.config.dataLabels,c=new w(this.ctx),u=new O(this.ctx),h=null;if(l.enabled){h=c.group({class:"apexcharts-data-labels"});var d=l.offsetX,f=l.offsetY,p=n+d,g=i+parseFloat(l.style.fontSize)/3+f;u.plotDataLabelsText({x:p,y:g,text:t,i:r,j:a,color:o.foreColor,parent:h,fontSize:s,dataLabelsConfig:l})}return h}},{key:"addListeners",value:function(e){var t=new w(this.ctx);e.node.addEventListener("mouseenter",t.pathMouseEnter.bind(this,e)),e.node.addEventListener("mouseleave",t.pathMouseLeave.bind(this,e)),e.node.addEventListener("mousedown",t.pathMouseDown.bind(this,e))}}]),e}(),Ce=function(){function e(t,n){s(this,e),this.ctx=t,this.w=t.w,this.xRatio=n.xRatio,this.yRatio=n.yRatio,this.dynamicAnim=this.w.config.chart.animations.dynamicAnimation,this.helpers=new Ae(t),this.rectRadius=this.w.config.plotOptions.heatmap.radius,this.strokeWidth=this.w.config.stroke.show?this.w.config.stroke.width:0}return c(e,[{key:"draw",value:function(e){var t=this.w,n=new w(this.ctx),i=n.group({class:"apexcharts-heatmap"});i.attr("clip-path","url(#gridRectMask".concat(t.globals.cuid,")"));var r=t.globals.gridWidth/t.globals.dataPoints,a=t.globals.gridHeight/t.globals.series.length,o=0,s=!1;this.negRange=this.helpers.checkColorRange();var l=e.slice();t.config.yaxis[0].reversed&&(s=!0,l.reverse());for(var c=s?0:l.length-1;s?c<l.length:c>=0;s?c++:c--){var u=n.group({class:"apexcharts-series apexcharts-heatmap-series",seriesName:b.escapeString(t.globals.seriesNames[c]),rel:c+1,"data:realIndex":c});if(this.ctx.series.addCollapsedClassToSeries(u,c),t.config.chart.dropShadow.enabled){var h=t.config.chart.dropShadow;new y(this.ctx).dropShadow(u,h,c)}for(var d=0,f=t.config.plotOptions.heatmap.shadeIntensity,p=0;p<l[c].length;p++){var g=this.helpers.getShadeColor(t.config.chart.type,c,p,this.negRange),m=g.color,v=g.colorProps;"image"===t.config.fill.type&&(m=new R(this.ctx).fillPath({seriesNumber:c,dataPointIndex:p,opacity:t.globals.hasNegs?v.percent<0?1-(1+v.percent/100):f+v.percent/100:v.percent/100,patternID:b.randomId(),width:t.config.fill.image.width?t.config.fill.image.width:r,height:t.config.fill.image.height?t.config.fill.image.height:a}));var x=this.rectRadius,k=n.drawRect(d,o,r,a,x);if(k.attr({cx:d,cy:o}),k.node.classList.add("apexcharts-heatmap-rect"),u.add(k),k.attr({fill:m,i:c,index:c,j:p,val:l[c][p],"stroke-width":this.strokeWidth,stroke:t.config.plotOptions.heatmap.useFillColorAsStroke?m:t.globals.stroke.colors[0],color:m}),this.helpers.addListeners(k),t.config.chart.animations.enabled&&!t.globals.dataChanged){var S=1;t.globals.resized||(S=t.config.chart.animations.speed),this.animateHeatMap(k,d,o,r,a,S)}if(t.globals.dataChanged){var A=1;if(this.dynamicAnim.enabled&&t.globals.shouldAnimate){A=this.dynamicAnim.speed;var C=t.globals.previousPaths[c]&&t.globals.previousPaths[c][p]&&t.globals.previousPaths[c][p].color;C||(C="rgba(255, 255, 255, 0)"),this.animateHeatColor(k,b.isColorHex(C)?C:b.rgb2hex(C),b.isColorHex(m)?m:b.rgb2hex(m),A)}}var E=(0,t.config.dataLabels.formatter)(t.globals.series[c][p],{value:t.globals.series[c][p],seriesIndex:c,dataPointIndex:p,w:t}),T=this.helpers.calculateDataLabels({text:E,x:d+r/2,y:o+a/2,i:c,j:p,colorProps:v,series:l});null!==T&&u.add(T),d+=r}o+=a,i.add(u)}var P=t.globals.yAxisScale[0].result.slice();t.config.yaxis[0].reversed?P.unshift(""):P.push(""),t.globals.yAxisScale[0].result=P;var L=t.globals.gridHeight/t.globals.series.length;return t.config.yaxis[0].labels.offsetY=-L/2,i}},{key:"animateHeatMap",value:function(e,t,n,i,r,a){var o=new x(this.ctx);o.animateRect(e,{x:t+i/2,y:n+r/2,width:0,height:0},{x:t,y:n,width:i,height:r},a,(function(){o.animationCompleted(e)}))}},{key:"animateHeatColor",value:function(e,t,n,i){e.attr({fill:t}).animate(i).attr({fill:n})}}]),e}(),Ee=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"drawYAxisTexts",value:function(e,t,n,i){var r=this.w,a=r.config.yaxis[0],o=r.globals.yLabelFormatters[0];return new w(this.ctx).drawText({x:e+a.labels.offsetX,y:t+a.labels.offsetY,text:o(i,n),textAnchor:"middle",fontSize:a.labels.style.fontSize,fontFamily:a.labels.style.fontFamily,foreColor:Array.isArray(a.labels.style.colors)?a.labels.style.colors[n]:a.labels.style.colors})}}]),e}(),Te=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w;var n=this.w;this.chartType=this.w.config.chart.type,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled,this.animBeginArr=[0],this.animDur=0,this.donutDataLabels=this.w.config.plotOptions.pie.donut.labels,this.lineColorArr=void 0!==n.globals.stroke.colors?n.globals.stroke.colors:n.globals.colors,this.defaultSize=Math.min(n.globals.gridWidth,n.globals.gridHeight),this.centerY=this.defaultSize/2,this.centerX=n.globals.gridWidth/2,"radialBar"===n.config.chart.type?this.fullAngle=360:this.fullAngle=Math.abs(n.config.plotOptions.pie.endAngle-n.config.plotOptions.pie.startAngle),this.initialAngle=n.config.plotOptions.pie.startAngle%this.fullAngle,n.globals.radialSize=this.defaultSize/2.05-n.config.stroke.width-(n.config.chart.sparkline.enabled?0:n.config.chart.dropShadow.blur),this.donutSize=n.globals.radialSize*parseInt(n.config.plotOptions.pie.donut.size,10)/100,this.maxY=0,this.sliceLabels=[],this.sliceSizes=[],this.prevSectorAngleArr=[]}return c(e,[{key:"draw",value:function(e){var t=this,n=this.w,i=new w(this.ctx);if(this.ret=i.group({class:"apexcharts-pie"}),n.globals.noData)return this.ret;for(var r=0,a=0;a<e.length;a++)r+=b.negToZero(e[a]);var o=[],s=i.group();0===r&&(r=1e-5),e.forEach((function(e){t.maxY=Math.max(t.maxY,e)})),n.config.yaxis[0].max&&(this.maxY=n.config.yaxis[0].max),"back"===n.config.grid.position&&"polarArea"===this.chartType&&this.drawPolarElements(this.ret);for(var l=0;l<e.length;l++){var c=this.fullAngle*b.negToZero(e[l])/r;o.push(c),"polarArea"===this.chartType?(o[l]=this.fullAngle/e.length,this.sliceSizes.push(n.globals.radialSize*e[l]/this.maxY)):this.sliceSizes.push(n.globals.radialSize)}if(n.globals.dataChanged){for(var u,h=0,d=0;d<n.globals.previousPaths.length;d++)h+=b.negToZero(n.globals.previousPaths[d]);for(var f=0;f<n.globals.previousPaths.length;f++)u=this.fullAngle*b.negToZero(n.globals.previousPaths[f])/h,this.prevSectorAngleArr.push(u)}this.donutSize<0&&(this.donutSize=0);var p=n.config.plotOptions.pie.customScale,g=n.globals.gridWidth/2,m=n.globals.gridHeight/2,v=g-n.globals.gridWidth/2*p,x=m-n.globals.gridHeight/2*p;if("donut"===this.chartType){var y=i.drawCircle(this.donutSize);y.attr({cx:this.centerX,cy:this.centerY,fill:n.config.plotOptions.pie.donut.background?n.config.plotOptions.pie.donut.background:"transparent"}),s.add(y)}var k=this.drawArcs(o,e);if(this.sliceLabels.forEach((function(e){k.add(e)})),s.attr({transform:"translate(".concat(v,", ").concat(x,") scale(").concat(p,")")}),s.add(k),this.ret.add(s),this.donutDataLabels.show){var S=this.renderInnerDataLabels(this.donutDataLabels,{hollowSize:this.donutSize,centerX:this.centerX,centerY:this.centerY,opacity:this.donutDataLabels.show,translateX:v,translateY:x});this.ret.add(S)}return"front"===n.config.grid.position&&"polarArea"===this.chartType&&this.drawPolarElements(this.ret),this.ret}},{key:"drawArcs",value:function(e,t){var n=this.w,i=new y(this.ctx),r=new w(this.ctx),a=new R(this.ctx),o=r.group({class:"apexcharts-slices"}),s=this.initialAngle,l=this.initialAngle,c=this.initialAngle,u=this.initialAngle;this.strokeWidth=n.config.stroke.show?n.config.stroke.width:0;for(var h=0;h<e.length;h++){var d=r.group({class:"apexcharts-series apexcharts-pie-series",seriesName:b.escapeString(n.globals.seriesNames[h]),rel:h+1,"data:realIndex":h});o.add(d),l=u,c=(s=c)+e[h],u=l+this.prevSectorAngleArr[h];var f=c<s?this.fullAngle+c-s:c-s,p=a.fillPath({seriesNumber:h,size:this.sliceSizes[h],value:t[h]}),g=this.getChangedPath(l,u),m=r.drawPath({d:g,stroke:Array.isArray(this.lineColorArr)?this.lineColorArr[h]:this.lineColorArr,strokeWidth:0,fill:p,fillOpacity:n.config.fill.opacity,classes:"apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(),"-slice-").concat(h)});if(m.attr({index:0,j:h}),i.setSelectionFilter(m,0,h),n.config.chart.dropShadow.enabled){var v=n.config.chart.dropShadow;i.dropShadow(m,v,h)}this.addListeners(m,this.donutDataLabels),w.setAttrs(m.node,{"data:angle":f,"data:startAngle":s,"data:strokeWidth":this.strokeWidth,"data:value":t[h]});var x={x:0,y:0};"pie"===this.chartType||"polarArea"===this.chartType?x=b.polarToCartesian(this.centerX,this.centerY,n.globals.radialSize/1.25+n.config.plotOptions.pie.dataLabels.offset,(s+f/2)%this.fullAngle):"donut"===this.chartType&&(x=b.polarToCartesian(this.centerX,this.centerY,(n.globals.radialSize+this.donutSize)/2+n.config.plotOptions.pie.dataLabels.offset,(s+f/2)%this.fullAngle)),d.add(m);var k=0;if(!this.initialAnim||n.globals.resized||n.globals.dataChanged?this.animBeginArr.push(0):(0==(k=f/this.fullAngle*n.config.chart.animations.speed)&&(k=1),this.animDur=k+this.animDur,this.animBeginArr.push(this.animDur)),this.dynamicAnim&&n.globals.dataChanged?this.animatePaths(m,{size:this.sliceSizes[h],endAngle:c,startAngle:s,prevStartAngle:l,prevEndAngle:u,animateStartingPos:!0,i:h,animBeginArr:this.animBeginArr,shouldSetPrevPaths:!0,dur:n.config.chart.animations.dynamicAnimation.speed}):this.animatePaths(m,{size:this.sliceSizes[h],endAngle:c,startAngle:s,i:h,totalItems:e.length-1,animBeginArr:this.animBeginArr,dur:k}),n.config.plotOptions.pie.expandOnClick&&"polarArea"!==this.chartType&&m.click(this.pieClicked.bind(this,h)),void 0!==n.globals.selectedDataPoints[0]&&n.globals.selectedDataPoints[0].indexOf(h)>-1&&this.pieClicked(h),n.config.dataLabels.enabled){var S=x.x,A=x.y,C=100*f/this.fullAngle+"%";if(0!==f&&n.config.plotOptions.pie.dataLabels.minAngleToShowLabel<e[h]){var E=n.config.dataLabels.formatter;void 0!==E&&(C=E(n.globals.seriesPercent[h][0],{seriesIndex:h,w:n}));var T=n.globals.dataLabels.style.colors[h],P=r.group({class:"apexcharts-datalabels"}),L=r.drawText({x:S,y:A,text:C,textAnchor:"middle",fontSize:n.config.dataLabels.style.fontSize,fontFamily:n.config.dataLabels.style.fontFamily,fontWeight:n.config.dataLabels.style.fontWeight,foreColor:T});if(P.add(L),n.config.dataLabels.dropShadow.enabled){var M=n.config.dataLabels.dropShadow;i.dropShadow(L,M)}L.node.classList.add("apexcharts-pie-label"),n.config.chart.animations.animate&&!1===n.globals.resized&&(L.node.classList.add("apexcharts-pie-label-delay"),L.node.style.animationDelay=n.config.chart.animations.speed/940+"s"),this.sliceLabels.push(P)}}}return o}},{key:"addListeners",value:function(e,t){var n=new w(this.ctx);e.node.addEventListener("mouseenter",n.pathMouseEnter.bind(this,e)),e.node.addEventListener("mouseleave",n.pathMouseLeave.bind(this,e)),e.node.addEventListener("mouseleave",this.revertDataLabelsInner.bind(this,e.node,t)),e.node.addEventListener("mousedown",n.pathMouseDown.bind(this,e)),this.donutDataLabels.total.showAlways||(e.node.addEventListener("mouseenter",this.printDataLabelsInner.bind(this,e.node,t)),e.node.addEventListener("mousedown",this.printDataLabelsInner.bind(this,e.node,t)))}},{key:"animatePaths",value:function(e,t){var n=this.w,i=t.endAngle<t.startAngle?this.fullAngle+t.endAngle-t.startAngle:t.endAngle-t.startAngle,r=i,a=t.startAngle,o=t.startAngle;void 0!==t.prevStartAngle&&void 0!==t.prevEndAngle&&(a=t.prevEndAngle,r=t.prevEndAngle<t.prevStartAngle?this.fullAngle+t.prevEndAngle-t.prevStartAngle:t.prevEndAngle-t.prevStartAngle),t.i===n.config.series.length-1&&(i+o>this.fullAngle?t.endAngle=t.endAngle-(i+o):i+o<this.fullAngle&&(t.endAngle=t.endAngle+(this.fullAngle-(i+o)))),i===this.fullAngle&&(i=this.fullAngle-.01),this.animateArc(e,a,o,i,r,t)}},{key:"animateArc",value:function(e,t,n,i,r,a){var o,s=this,l=this.w,c=new x(this.ctx),u=a.size;(isNaN(t)||isNaN(r))&&(t=n,r=i,a.dur=0);var h=i,d=n,f=t<n?this.fullAngle+t-n:t-n;l.globals.dataChanged&&a.shouldSetPrevPaths&&a.prevEndAngle&&(o=s.getPiePath({me:s,startAngle:a.prevStartAngle,angle:a.prevEndAngle<a.prevStartAngle?this.fullAngle+a.prevEndAngle-a.prevStartAngle:a.prevEndAngle-a.prevStartAngle,size:u}),e.attr({d:o})),0!==a.dur?e.animate(a.dur,l.globals.easing,a.animBeginArr[a.i]).afterAll((function(){"pie"!==s.chartType&&"donut"!==s.chartType&&"polarArea"!==s.chartType||this.animate(l.config.chart.animations.dynamicAnimation.speed).attr({"stroke-width":s.strokeWidth}),a.i===l.config.series.length-1&&c.animationCompleted(e)})).during((function(l){h=f+(i-f)*l,a.animateStartingPos&&(h=r+(i-r)*l,d=t-r+(n-(t-r))*l),o=s.getPiePath({me:s,startAngle:d,angle:h,size:u}),e.node.setAttribute("data:pathOrig",o),e.attr({d:o})})):(o=s.getPiePath({me:s,startAngle:d,angle:i,size:u}),a.isTrack||(l.globals.animationEnded=!0),e.node.setAttribute("data:pathOrig",o),e.attr({d:o,"stroke-width":s.strokeWidth}))}},{key:"pieClicked",value:function(e){var t,n=this.w,i=this,r=i.sliceSizes[e]+(n.config.plotOptions.pie.expandOnClick?4:0),a=n.globals.dom.Paper.select(".apexcharts-".concat(i.chartType.toLowerCase(),"-slice-").concat(e)).members[0];if("true"!==a.attr("data:pieClicked")){var o=n.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");Array.prototype.forEach.call(o,(function(e){e.setAttribute("data:pieClicked","false");var t=e.getAttribute("data:pathOrig");e.setAttribute("d",t)})),a.attr("data:pieClicked","true");var s=parseInt(a.attr("data:startAngle"),10),l=parseInt(a.attr("data:angle"),10);t=i.getPiePath({me:i,startAngle:s,angle:l,size:r}),360!==l&&a.plot(t)}else{a.attr({"data:pieClicked":"false"}),this.revertDataLabelsInner(a.node,this.donutDataLabels);var c=a.attr("data:pathOrig");a.attr({d:c})}}},{key:"getChangedPath",value:function(e,t){var n="";return this.dynamicAnim&&this.w.globals.dataChanged&&(n=this.getPiePath({me:this,startAngle:e,angle:t-e,size:this.size})),n}},{key:"getPiePath",value:function(e){var t=e.me,n=e.startAngle,i=e.angle,r=e.size,a=n,o=Math.PI*(a-90)/180,s=i+n;Math.ceil(s)>=this.fullAngle+this.w.config.plotOptions.pie.startAngle%this.fullAngle&&(s=this.fullAngle+this.w.config.plotOptions.pie.startAngle%this.fullAngle-.01),Math.ceil(s)>this.fullAngle&&(s-=this.fullAngle);var l=Math.PI*(s-90)/180,c=t.centerX+r*Math.cos(o),u=t.centerY+r*Math.sin(o),h=t.centerX+r*Math.cos(l),d=t.centerY+r*Math.sin(l),f=b.polarToCartesian(t.centerX,t.centerY,t.donutSize,s),p=b.polarToCartesian(t.centerX,t.centerY,t.donutSize,a),g=i>180?1:0,m=["M",c,u,"A",r,r,0,g,1,h,d];return"donut"===t.chartType?[].concat(m,["L",f.x,f.y,"A",t.donutSize,t.donutSize,0,g,0,p.x,p.y,"L",c,u,"z"]).join(" "):"pie"===t.chartType||"polarArea"===t.chartType?[].concat(m,["L",t.centerX,t.centerY,"L",c,u]).join(" "):[].concat(m).join(" ")}},{key:"drawPolarElements",value:function(e){var t=this.w,n=new Z(this.ctx),i=new w(this.ctx),r=new Ee(this.ctx),a=i.group(),o=i.group(),s=n.niceScale(0,Math.ceil(this.maxY),t.config.yaxis[0].tickAmount,0,!0),l=s.result.reverse(),c=s.result.length;this.maxY=s.niceMax;for(var u=t.globals.radialSize,h=u/(c-1),d=0;d<c-1;d++){var f=i.drawCircle(u);if(f.attr({cx:this.centerX,cy:this.centerY,fill:"none","stroke-width":t.config.plotOptions.polarArea.rings.strokeWidth,stroke:t.config.plotOptions.polarArea.rings.strokeColor}),t.config.yaxis[0].show){var p=r.drawYAxisTexts(this.centerX,this.centerY-u+parseInt(t.config.yaxis[0].labels.style.fontSize,10)/2,d,l[d]);o.add(p)}a.add(f),u-=h}this.drawSpokes(e),e.add(a),e.add(o)}},{key:"renderInnerDataLabels",value:function(e,t){var n=this.w,i=new w(this.ctx),r=i.group({class:"apexcharts-datalabels-group",transform:"translate(".concat(t.translateX?t.translateX:0,", ").concat(t.translateY?t.translateY:0,") scale(").concat(n.config.plotOptions.pie.customScale,")")}),a=e.total.show;r.node.style.opacity=t.opacity;var o,s,l=t.centerX,c=t.centerY;o=void 0===e.name.color?n.globals.colors[0]:e.name.color;var u=e.name.fontSize,h=e.name.fontFamily,d=e.name.fontWeight;s=void 0===e.value.color?n.config.chart.foreColor:e.value.color;var f=e.value.formatter,p="",g="";if(a?(o=e.total.color,u=e.total.fontSize,h=e.total.fontFamily,d=e.total.fontWeight,g=e.total.label,p=e.total.formatter(n)):1===n.globals.series.length&&(p=f(n.globals.series[0],n),g=n.globals.seriesNames[0]),g&&(g=e.name.formatter(g,e.total.show,n)),e.name.show){var m=i.drawText({x:l,y:c+parseFloat(e.name.offsetY),text:g,textAnchor:"middle",foreColor:o,fontSize:u,fontWeight:d,fontFamily:h});m.node.classList.add("apexcharts-datalabel-label"),r.add(m)}if(e.value.show){var v=e.name.show?parseFloat(e.value.offsetY)+16:e.value.offsetY,b=i.drawText({x:l,y:c+v,text:p,textAnchor:"middle",foreColor:s,fontWeight:e.value.fontWeight,fontSize:e.value.fontSize,fontFamily:e.value.fontFamily});b.node.classList.add("apexcharts-datalabel-value"),r.add(b)}return r}},{key:"printInnerLabels",value:function(e,t,n,i){var r,a=this.w;i?r=void 0===e.name.color?a.globals.colors[parseInt(i.parentNode.getAttribute("rel"),10)-1]:e.name.color:a.globals.series.length>1&&e.total.show&&(r=e.total.color);var o=a.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),s=a.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");n=(0,e.value.formatter)(n,a),i||"function"!=typeof e.total.formatter||(n=e.total.formatter(a));var l=t===e.total.label;t=e.name.formatter(t,l,a),null!==o&&(o.textContent=t),null!==s&&(s.textContent=n),null!==o&&(o.style.fill=r)}},{key:"printDataLabelsInner",value:function(e,t){var n=this.w,i=e.getAttribute("data:value"),r=n.globals.seriesNames[parseInt(e.parentNode.getAttribute("rel"),10)-1];n.globals.series.length>1&&this.printInnerLabels(t,r,i,e);var a=n.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");null!==a&&(a.style.opacity=1)}},{key:"drawSpokes",value:function(e){var t=this,n=this.w,i=new w(this.ctx),r=n.config.plotOptions.polarArea.spokes;if(0!==r.strokeWidth){for(var a=[],o=360/n.globals.series.length,s=0;s<n.globals.series.length;s++)a.push(b.polarToCartesian(this.centerX,this.centerY,n.globals.radialSize,n.config.plotOptions.pie.startAngle+o*s));a.forEach((function(n,a){var o=i.drawLine(n.x,n.y,t.centerX,t.centerY,Array.isArray(r.connectorColors)?r.connectorColors[a]:r.connectorColors);e.add(o)}))}}},{key:"revertDataLabelsInner",value:function(e,t,n){var i=this,r=this.w,a=r.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"),o=!1,s=r.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"),l=function(e){var n=e.makeSliceOut,r=e.printLabel;Array.prototype.forEach.call(s,(function(e){"true"===e.getAttribute("data:pieClicked")&&(n&&(o=!0),r&&i.printDataLabelsInner(e,t))}))};if(l({makeSliceOut:!0,printLabel:!1}),t.total.show&&r.globals.series.length>1)o&&!t.total.showAlways?l({makeSliceOut:!1,printLabel:!0}):this.printInnerLabels(t,t.total.label,t.total.formatter(r));else if(l({makeSliceOut:!1,printLabel:!0}),!o)if(r.globals.selectedDataPoints.length&&r.globals.series.length>1)if(r.globals.selectedDataPoints[0].length>0){var c=r.globals.selectedDataPoints[0],u=r.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(),"-slice-").concat(c));this.printDataLabelsInner(u,t)}else a&&r.globals.selectedDataPoints.length&&0===r.globals.selectedDataPoints[0].length&&(a.style.opacity=0);else a&&r.globals.series.length>1&&(a.style.opacity=0)}}]),e}(),Pe=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.chartType=this.w.config.chart.type,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled,this.animDur=0;var n=this.w;this.graphics=new w(this.ctx),this.lineColorArr=void 0!==n.globals.stroke.colors?n.globals.stroke.colors:n.globals.colors,this.defaultSize=n.globals.svgHeight<n.globals.svgWidth?n.globals.gridHeight+1.5*n.globals.goldenPadding:n.globals.gridWidth,this.isLog=n.config.yaxis[0].logarithmic,this.coreUtils=new A(this.ctx),this.maxValue=this.isLog?this.coreUtils.getLogVal(n.globals.maxY,0):n.globals.maxY,this.minValue=this.isLog?this.coreUtils.getLogVal(this.w.globals.minY,0):n.globals.minY,this.polygons=n.config.plotOptions.radar.polygons,this.strokeWidth=n.config.stroke.show?n.config.stroke.width:0,this.size=this.defaultSize/2.1-this.strokeWidth-n.config.chart.dropShadow.blur,n.config.xaxis.labels.show&&(this.size=this.size-n.globals.xAxisLabelsWidth/1.75),void 0!==n.config.plotOptions.radar.size&&(this.size=n.config.plotOptions.radar.size),this.dataRadiusOfPercent=[],this.dataRadius=[],this.angleArr=[],this.yaxisLabelsTextsPos=[]}return c(e,[{key:"draw",value:function(e){var t=this,n=this.w,i=new R(this.ctx),r=[],o=new O(this.ctx);e.length&&(this.dataPointsLen=e[n.globals.maxValsInArrayIndex].length),this.disAngle=2*Math.PI/this.dataPointsLen;var s=n.globals.gridWidth/2,l=n.globals.gridHeight/2,c=s+n.config.plotOptions.radar.offsetX,u=l+n.config.plotOptions.radar.offsetY,h=this.graphics.group({class:"apexcharts-radar-series apexcharts-plot-series",transform:"translate(".concat(c||0,", ").concat(u||0,")")}),d=[],f=null,p=null;if(this.yaxisLabels=this.graphics.group({class:"apexcharts-yaxis"}),e.forEach((function(e,s){var l=e.length===n.globals.dataPoints,c=t.graphics.group().attr({class:"apexcharts-series","data:longestSeries":l,seriesName:b.escapeString(n.globals.seriesNames[s]),rel:s+1,"data:realIndex":s});t.dataRadiusOfPercent[s]=[],t.dataRadius[s]=[],t.angleArr[s]=[],e.forEach((function(e,n){var i=Math.abs(t.maxValue-t.minValue);e+=Math.abs(t.minValue),t.isLog&&(e=t.coreUtils.getLogVal(e,0)),t.dataRadiusOfPercent[s][n]=e/i,t.dataRadius[s][n]=t.dataRadiusOfPercent[s][n]*t.size,t.angleArr[s][n]=n*t.disAngle})),d=t.getDataPointsPos(t.dataRadius[s],t.angleArr[s]);var u=t.createPaths(d,{x:0,y:0});f=t.graphics.group({class:"apexcharts-series-markers-wrap apexcharts-element-hidden"}),p=t.graphics.group({class:"apexcharts-datalabels","data:realIndex":s}),n.globals.delayedElements.push({el:f.node,index:s});var h={i:s,realIndex:s,animationDelay:s,initialSpeed:n.config.chart.animations.speed,dataChangeSpeed:n.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-radar",shouldClipToGrid:!1,bindEventsOnPaths:!1,stroke:n.globals.stroke.colors[s],strokeLineCap:n.config.stroke.lineCap},g=null;n.globals.previousPaths.length>0&&(g=t.getPreviousPath(s));for(var m=0;m<u.linePathsTo.length;m++){var v=t.graphics.renderPaths(a(a({},h),{},{pathFrom:null===g?u.linePathsFrom[m]:g,pathTo:u.linePathsTo[m],strokeWidth:Array.isArray(t.strokeWidth)?t.strokeWidth[s]:t.strokeWidth,fill:"none",drawShadow:!1}));c.add(v);var x=i.fillPath({seriesNumber:s}),w=t.graphics.renderPaths(a(a({},h),{},{pathFrom:null===g?u.areaPathsFrom[m]:g,pathTo:u.areaPathsTo[m],strokeWidth:0,fill:x,drawShadow:!1}));if(n.config.chart.dropShadow.enabled){var k=new y(t.ctx),S=n.config.chart.dropShadow;k.dropShadow(w,Object.assign({},S,{noUserSpaceOnUse:!0}),s)}c.add(w)}e.forEach((function(e,i){var r=new M(t.ctx).getMarkerConfig({cssClass:"apexcharts-marker",seriesIndex:s,dataPointIndex:i}),l=t.graphics.drawMarker(d[i].x,d[i].y,r);l.attr("rel",i),l.attr("j",i),l.attr("index",s),l.node.setAttribute("default-marker-size",r.pSize);var u=t.graphics.group({class:"apexcharts-series-markers"});u&&u.add(l),f.add(u),c.add(f);var h=n.config.dataLabels;if(h.enabled){var g=h.formatter(n.globals.series[s][i],{seriesIndex:s,dataPointIndex:i,w:n});o.plotDataLabelsText({x:d[i].x,y:d[i].y,text:g,textAnchor:"middle",i:s,j:s,parent:p,offsetCorrection:!1,dataLabelsConfig:a({},h)})}c.add(p)})),r.push(c)})),this.drawPolygons({parent:h}),n.config.xaxis.labels.show){var g=this.drawXAxisTexts();h.add(g)}return r.forEach((function(e){h.add(e)})),h.add(this.yaxisLabels),h}},{key:"drawPolygons",value:function(e){for(var t=this,n=this.w,i=e.parent,r=new Ee(this.ctx),a=n.globals.yAxisScale[0].result.reverse(),o=a.length,s=[],l=this.size/(o-1),c=0;c<o;c++)s[c]=l*c;s.reverse();var u=[],h=[];s.forEach((function(e,n){var i=b.getPolygonPos(e,t.dataPointsLen),r="";i.forEach((function(e,i){if(0===n){var a=t.graphics.drawLine(e.x,e.y,0,0,Array.isArray(t.polygons.connectorColors)?t.polygons.connectorColors[i]:t.polygons.connectorColors);h.push(a)}0===i&&t.yaxisLabelsTextsPos.push({x:e.x,y:e.y}),r+=e.x+","+e.y+" "})),u.push(r)})),u.forEach((function(e,r){var a=t.polygons.strokeColors,o=t.polygons.strokeWidth,s=t.graphics.drawPolygon(e,Array.isArray(a)?a[r]:a,Array.isArray(o)?o[r]:o,n.globals.radarPolygons.fill.colors[r]);i.add(s)})),h.forEach((function(e){i.add(e)})),n.config.yaxis[0].show&&this.yaxisLabelsTextsPos.forEach((function(e,n){var i=r.drawYAxisTexts(e.x,e.y,n,a[n]);t.yaxisLabels.add(i)}))}},{key:"drawXAxisTexts",value:function(){var e=this,t=this.w,n=t.config.xaxis.labels,i=this.graphics.group({class:"apexcharts-xaxis"}),r=b.getPolygonPos(this.size,this.dataPointsLen);return t.globals.labels.forEach((function(o,s){var l=t.config.xaxis.labels.formatter,c=new O(e.ctx);if(r[s]){var u=e.getTextPos(r[s],e.size),h=l(o,{seriesIndex:-1,dataPointIndex:s,w:t});c.plotDataLabelsText({x:u.newX,y:u.newY,text:h,textAnchor:u.textAnchor,i:s,j:s,parent:i,color:Array.isArray(n.style.colors)&&n.style.colors[s]?n.style.colors[s]:"#a8a8a8",dataLabelsConfig:a({textAnchor:u.textAnchor,dropShadow:{enabled:!1}},n),offsetCorrection:!1})}})),i}},{key:"createPaths",value:function(e,t){var n=this,i=[],r=[],a=[],o=[];if(e.length){r=[this.graphics.move(t.x,t.y)],o=[this.graphics.move(t.x,t.y)];var s=this.graphics.move(e[0].x,e[0].y),l=this.graphics.move(e[0].x,e[0].y);e.forEach((function(t,i){s+=n.graphics.line(t.x,t.y),l+=n.graphics.line(t.x,t.y),i===e.length-1&&(s+="Z",l+="Z")})),i.push(s),a.push(l)}return{linePathsFrom:r,linePathsTo:i,areaPathsFrom:o,areaPathsTo:a}}},{key:"getTextPos",value:function(e,t){var n="middle",i=e.x,r=e.y;return Math.abs(e.x)>=10?e.x>0?(n="start",i+=10):e.x<0&&(n="end",i-=10):n="middle",Math.abs(e.y)>=t-10&&(e.y<0?r-=10:e.y>0&&(r+=10)),{textAnchor:n,newX:i,newY:r}}},{key:"getPreviousPath",value:function(e){for(var t=this.w,n=null,i=0;i<t.globals.previousPaths.length;i++){var r=t.globals.previousPaths[i];r.paths.length>0&&parseInt(r.realIndex,10)===parseInt(e,10)&&void 0!==t.globals.previousPaths[i].paths[0]&&(n=t.globals.previousPaths[i].paths[0].d)}return n}},{key:"getDataPointsPos",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.dataPointsLen;e=e||[],t=t||[];for(var i=[],r=0;r<n;r++){var a={};a.x=e[r]*Math.sin(t[r]),a.y=-e[r]*Math.cos(t[r]),i.push(a)}return i}}]),e}(),Le=function(e){h(n,Te);var t=g(n);function n(e){var i;s(this,n),(i=t.call(this,e)).ctx=e,i.w=e.w,i.animBeginArr=[0],i.animDur=0;var r=i.w;return i.startAngle=r.config.plotOptions.radialBar.startAngle,i.endAngle=r.config.plotOptions.radialBar.endAngle,i.totalAngle=Math.abs(r.config.plotOptions.radialBar.endAngle-r.config.plotOptions.radialBar.startAngle),i.trackStartAngle=r.config.plotOptions.radialBar.track.startAngle,i.trackEndAngle=r.config.plotOptions.radialBar.track.endAngle,i.donutDataLabels=i.w.config.plotOptions.radialBar.dataLabels,i.radialDataLabels=i.donutDataLabels,i.trackStartAngle||(i.trackStartAngle=i.startAngle),i.trackEndAngle||(i.trackEndAngle=i.endAngle),360===i.endAngle&&(i.endAngle=359.99),i.margin=parseInt(r.config.plotOptions.radialBar.track.margin,10),i}return c(n,[{key:"draw",value:function(e){var t=this.w,n=new w(this.ctx),i=n.group({class:"apexcharts-radialbar"});if(t.globals.noData)return i;var r=n.group(),a=this.defaultSize/2,o=t.globals.gridWidth/2,s=this.defaultSize/2.05;t.config.chart.sparkline.enabled||(s=s-t.config.stroke.width-t.config.chart.dropShadow.blur);var l=t.globals.fill.colors;if(t.config.plotOptions.radialBar.track.show){var c=this.drawTracks({size:s,centerX:o,centerY:a,colorArr:l,series:e});r.add(c)}var u=this.drawArcs({size:s,centerX:o,centerY:a,colorArr:l,series:e}),h=360;t.config.plotOptions.radialBar.startAngle<0&&(h=this.totalAngle);var d=(360-h)/360;if(t.globals.radialSize=s-s*d,this.radialDataLabels.value.show){var f=Math.max(this.radialDataLabels.value.offsetY,this.radialDataLabels.name.offsetY);t.globals.radialSize+=f*d}return r.add(u.g),"front"===t.config.plotOptions.radialBar.hollow.position&&(u.g.add(u.elHollow),u.dataLabels&&u.g.add(u.dataLabels)),i.add(r),i}},{key:"drawTracks",value:function(e){var t=this.w,n=new w(this.ctx),i=n.group({class:"apexcharts-tracks"}),r=new y(this.ctx),a=new R(this.ctx),o=this.getStrokeWidth(e);e.size=e.size-o/2;for(var s=0;s<e.series.length;s++){var l=n.group({class:"apexcharts-radialbar-track apexcharts-track"});i.add(l),l.attr({rel:s+1}),e.size=e.size-o-this.margin;var c=t.config.plotOptions.radialBar.track,u=a.fillPath({seriesNumber:0,size:e.size,fillColors:Array.isArray(c.background)?c.background[s]:c.background,solid:!0}),h=this.trackStartAngle,d=this.trackEndAngle;Math.abs(d)+Math.abs(h)>=360&&(d=360-Math.abs(this.startAngle)-.1);var f=n.drawPath({d:"",stroke:u,strokeWidth:o*parseInt(c.strokeWidth,10)/100,fill:"none",strokeOpacity:c.opacity,classes:"apexcharts-radialbar-area"});if(c.dropShadow.enabled){var p=c.dropShadow;r.dropShadow(f,p)}l.add(f),f.attr("id","apexcharts-radialbarTrack-"+s),this.animatePaths(f,{centerX:e.centerX,centerY:e.centerY,endAngle:d,startAngle:h,size:e.size,i:s,totalItems:2,animBeginArr:0,dur:0,isTrack:!0,easing:t.globals.easing})}return i}},{key:"drawArcs",value:function(e){var t=this.w,n=new w(this.ctx),i=new R(this.ctx),r=new y(this.ctx),a=n.group(),o=this.getStrokeWidth(e);e.size=e.size-o/2;var s=t.config.plotOptions.radialBar.hollow.background,l=e.size-o*e.series.length-this.margin*e.series.length-o*parseInt(t.config.plotOptions.radialBar.track.strokeWidth,10)/100/2,c=l-t.config.plotOptions.radialBar.hollow.margin;void 0!==t.config.plotOptions.radialBar.hollow.image&&(s=this.drawHollowImage(e,a,l,s));var u=this.drawHollow({size:c,centerX:e.centerX,centerY:e.centerY,fill:s||"transparent"});if(t.config.plotOptions.radialBar.hollow.dropShadow.enabled){var h=t.config.plotOptions.radialBar.hollow.dropShadow;r.dropShadow(u,h)}var d=1;!this.radialDataLabels.total.show&&t.globals.series.length>1&&(d=0);var f=null;this.radialDataLabels.show&&(f=this.renderInnerDataLabels(this.radialDataLabels,{hollowSize:l,centerX:e.centerX,centerY:e.centerY,opacity:d})),"back"===t.config.plotOptions.radialBar.hollow.position&&(a.add(u),f&&a.add(f));var p=!1;t.config.plotOptions.radialBar.inverseOrder&&(p=!0);for(var g=p?e.series.length-1:0;p?g>=0:g<e.series.length;p?g--:g++){var m=n.group({class:"apexcharts-series apexcharts-radial-series",seriesName:b.escapeString(t.globals.seriesNames[g])});a.add(m),m.attr({rel:g+1,"data:realIndex":g}),this.ctx.series.addCollapsedClassToSeries(m,g),e.size=e.size-o-this.margin;var v=i.fillPath({seriesNumber:g,size:e.size,value:e.series[g]}),x=this.startAngle,k=void 0,S=b.negToZero(e.series[g]>100?100:e.series[g])/100,A=Math.round(this.totalAngle*S)+this.startAngle,C=void 0;t.globals.dataChanged&&(k=this.startAngle,C=Math.round(this.totalAngle*b.negToZero(t.globals.previousPaths[g])/100)+k),Math.abs(A)+Math.abs(x)>=360&&(A-=.01),Math.abs(C)+Math.abs(k)>=360&&(C-=.01);var E=A-x,T=Array.isArray(t.config.stroke.dashArray)?t.config.stroke.dashArray[g]:t.config.stroke.dashArray,P=n.drawPath({d:"",stroke:v,strokeWidth:o,fill:"none",fillOpacity:t.config.fill.opacity,classes:"apexcharts-radialbar-area apexcharts-radialbar-slice-"+g,strokeDashArray:T});if(w.setAttrs(P.node,{"data:angle":E,"data:value":e.series[g]}),t.config.chart.dropShadow.enabled){var L=t.config.chart.dropShadow;r.dropShadow(P,L,g)}r.setSelectionFilter(P,0,g),this.addListeners(P,this.radialDataLabels),m.add(P),P.attr({index:0,j:g});var M=0;!this.initialAnim||t.globals.resized||t.globals.dataChanged||(M=t.config.chart.animations.speed),t.globals.dataChanged&&(M=t.config.chart.animations.dynamicAnimation.speed),this.animDur=M/(1.2*e.series.length)+this.animDur,this.animBeginArr.push(this.animDur),this.animatePaths(P,{centerX:e.centerX,centerY:e.centerY,endAngle:A,startAngle:x,prevEndAngle:C,prevStartAngle:k,size:e.size,i:g,totalItems:2,animBeginArr:this.animBeginArr,dur:M,shouldSetPrevPaths:!0,easing:t.globals.easing})}return{g:a,elHollow:u,dataLabels:f}}},{key:"drawHollow",value:function(e){var t=new w(this.ctx).drawCircle(2*e.size);return t.attr({class:"apexcharts-radialbar-hollow",cx:e.centerX,cy:e.centerY,r:e.size,fill:e.fill}),t}},{key:"drawHollowImage",value:function(e,t,n,i){var r=this.w,a=new R(this.ctx),o=b.randomId(),s=r.config.plotOptions.radialBar.hollow.image;if(r.config.plotOptions.radialBar.hollow.imageClipped)a.clippedImgArea({width:n,height:n,image:s,patternID:"pattern".concat(r.globals.cuid).concat(o)}),i="url(#pattern".concat(r.globals.cuid).concat(o,")");else{var l=r.config.plotOptions.radialBar.hollow.imageWidth,c=r.config.plotOptions.radialBar.hollow.imageHeight;if(void 0===l&&void 0===c){var u=r.globals.dom.Paper.image(s).loaded((function(t){this.move(e.centerX-t.width/2+r.config.plotOptions.radialBar.hollow.imageOffsetX,e.centerY-t.height/2+r.config.plotOptions.radialBar.hollow.imageOffsetY)}));t.add(u)}else{var h=r.globals.dom.Paper.image(s).loaded((function(t){this.move(e.centerX-l/2+r.config.plotOptions.radialBar.hollow.imageOffsetX,e.centerY-c/2+r.config.plotOptions.radialBar.hollow.imageOffsetY),this.size(l,c)}));t.add(h)}}return i}},{key:"getStrokeWidth",value:function(e){var t=this.w;return e.size*(100-parseInt(t.config.plotOptions.radialBar.hollow.size,10))/100/(e.series.length+1)-this.margin}}]),n}(),Re=function(){function e(t){s(this,e),this.w=t.w,this.lineCtx=t}return c(e,[{key:"sameValueSeriesFix",value:function(e,t){var n=this.w;if("line"===n.config.chart.type&&("gradient"===n.config.fill.type||"gradient"===n.config.fill.type[e])&&new A(this.lineCtx.ctx,n).seriesHaveSameValues(e)){var i=t[e].slice();i[i.length-1]=i[i.length-1]+1e-6,t[e]=i}return t}},{key:"calculatePoints",value:function(e){var t=e.series,n=e.realIndex,i=e.x,r=e.y,a=e.i,o=e.j,s=e.prevY,l=this.w,c=[],u=[];if(0===o){var h=this.lineCtx.categoryAxisCorrection+l.config.markers.offsetX;l.globals.isXNumeric&&(h=(l.globals.seriesX[n][0]-l.globals.minX)/this.lineCtx.xRatio+l.config.markers.offsetX),c.push(h),u.push(b.isNumber(t[a][0])?s+l.config.markers.offsetY:null),c.push(i+l.config.markers.offsetX),u.push(b.isNumber(t[a][o+1])?r+l.config.markers.offsetY:null)}else c.push(i+l.config.markers.offsetX),u.push(b.isNumber(t[a][o+1])?r+l.config.markers.offsetY:null);return{x:c,y:u}}},{key:"checkPreviousPaths",value:function(e){for(var t=e.pathFromLine,n=e.pathFromArea,i=e.realIndex,r=this.w,a=0;a<r.globals.previousPaths.length;a++){var o=r.globals.previousPaths[a];("line"===o.type||"area"===o.type)&&o.paths.length>0&&parseInt(o.realIndex,10)===parseInt(i,10)&&("line"===o.type?(this.lineCtx.appendPathFrom=!1,t=r.globals.previousPaths[a].paths[0].d):"area"===o.type&&(this.lineCtx.appendPathFrom=!1,n=r.globals.previousPaths[a].paths[0].d,r.config.stroke.show&&r.globals.previousPaths[a].paths[1]&&(t=r.globals.previousPaths[a].paths[1].d)))}return{pathFromLine:t,pathFromArea:n}}},{key:"determineFirstPrevY",value:function(e){var t=e.i,n=e.series,i=e.prevY,r=e.lineYPosition,a=this.w;if(void 0!==n[t][0])i=(r=a.config.chart.stacked&&t>0?this.lineCtx.prevSeriesY[t-1][0]:this.lineCtx.zeroY)-n[t][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]+2*(this.lineCtx.isReversed?n[t][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]:0);else if(a.config.chart.stacked&&t>0&&void 0===n[t][0])for(var o=t-1;o>=0;o--)if(null!==n[o][0]&&void 0!==n[o][0]){i=r=this.lineCtx.prevSeriesY[o][0];break}return{prevY:i,lineYPosition:r}}}]),e}(),Me=function(){function e(t,n,i){s(this,e),this.ctx=t,this.w=t.w,this.xyRatios=n,this.pointsChart=!("bubble"!==this.w.config.chart.type&&"scatter"!==this.w.config.chart.type)||i,this.scatter=new I(this.ctx),this.noNegatives=this.w.globals.minX===Number.MAX_VALUE,this.lineHelpers=new Re(this),this.markers=new M(this.ctx),this.prevSeriesY=[],this.categoryAxisCorrection=0,this.yaxisIndex=0}return c(e,[{key:"draw",value:function(e,t,n){var i=this.w,r=new w(this.ctx),a=i.globals.comboCharts?t:i.config.chart.type,o=r.group({class:"apexcharts-".concat(a,"-series apexcharts-plot-series")}),s=new A(this.ctx,i);this.yRatio=this.xyRatios.yRatio,this.zRatio=this.xyRatios.zRatio,this.xRatio=this.xyRatios.xRatio,this.baseLineY=this.xyRatios.baseLineY,e=s.getLogSeries(e),this.yRatio=s.getLogYRatios(this.yRatio);for(var l=[],c=0;c<e.length;c++){e=this.lineHelpers.sameValueSeriesFix(c,e);var u=i.globals.comboCharts?n[c]:c;this._initSerieVariables(e,c,u);var h=[],d=[],f=i.globals.padHorizontal+this.categoryAxisCorrection;this.ctx.series.addCollapsedClassToSeries(this.elSeries,u),i.globals.isXNumeric&&i.globals.seriesX.length>0&&(f=(i.globals.seriesX[u][0]-i.globals.minX)/this.xRatio),d.push(f);var p,g=f,m=g,v=this.zeroY;v=this.lineHelpers.determineFirstPrevY({i:c,series:e,prevY:v,lineYPosition:0}).prevY,h.push(v),p=v;var b=this._calculatePathsFrom({series:e,i:c,realIndex:u,prevX:m,prevY:v}),x=this._iterateOverDataPoints({series:e,realIndex:u,i:c,x:f,y:1,pX:g,pY:p,pathsFrom:b,linePaths:[],areaPaths:[],seriesIndex:n,lineYPosition:0,xArrj:d,yArrj:h});this._handlePaths({type:a,realIndex:u,i:c,paths:x}),this.elSeries.add(this.elPointsMain),this.elSeries.add(this.elDataLabelsWrap),l.push(this.elSeries)}if(i.config.chart.stacked)for(var y=l.length;y>0;y--)o.add(l[y-1]);else for(var k=0;k<l.length;k++)o.add(l[k]);return o}},{key:"_initSerieVariables",value:function(e,t,n){var i=this.w,r=new w(this.ctx);this.xDivision=i.globals.gridWidth/(i.globals.dataPoints-("on"===i.config.xaxis.tickPlacement?1:0)),this.strokeWidth=Array.isArray(i.config.stroke.width)?i.config.stroke.width[n]:i.config.stroke.width,this.yRatio.length>1&&(this.yaxisIndex=n),this.isReversed=i.config.yaxis[this.yaxisIndex]&&i.config.yaxis[this.yaxisIndex].reversed,this.zeroY=i.globals.gridHeight-this.baseLineY[this.yaxisIndex]-(this.isReversed?i.globals.gridHeight:0)+(this.isReversed?2*this.baseLineY[this.yaxisIndex]:0),this.areaBottomY=this.zeroY,(this.zeroY>i.globals.gridHeight||"end"===i.config.plotOptions.area.fillTo)&&(this.areaBottomY=i.globals.gridHeight),this.categoryAxisCorrection=this.xDivision/2,this.elSeries=r.group({class:"apexcharts-series",seriesName:b.escapeString(i.globals.seriesNames[n])}),this.elPointsMain=r.group({class:"apexcharts-series-markers-wrap","data:realIndex":n}),this.elDataLabelsWrap=r.group({class:"apexcharts-datalabels","data:realIndex":n});var a=e[t].length===i.globals.dataPoints;this.elSeries.attr({"data:longestSeries":a,rel:t+1,"data:realIndex":n}),this.appendPathFrom=!0}},{key:"_calculatePathsFrom",value:function(e){var t,n,i,r,a=e.series,o=e.i,s=e.realIndex,l=e.prevX,c=e.prevY,u=this.w,h=new w(this.ctx);if(null===a[o][0]){for(var d=0;d<a[o].length;d++)if(null!==a[o][d]){l=this.xDivision*d,c=this.zeroY-a[o][d]/this.yRatio[this.yaxisIndex],t=h.move(l,c),n=h.move(l,this.areaBottomY);break}}else t=h.move(l,c),n=h.move(l,this.areaBottomY)+h.line(l,c);if(i=h.move(-1,this.zeroY)+h.line(-1,this.zeroY),r=h.move(-1,this.zeroY)+h.line(-1,this.zeroY),u.globals.previousPaths.length>0){var f=this.lineHelpers.checkPreviousPaths({pathFromLine:i,pathFromArea:r,realIndex:s});i=f.pathFromLine,r=f.pathFromArea}return{prevX:l,prevY:c,linePath:t,areaPath:n,pathFromLine:i,pathFromArea:r}}},{key:"_handlePaths",value:function(e){var t=e.type,n=e.realIndex,i=e.i,r=e.paths,o=this.w,s=new w(this.ctx),l=new R(this.ctx);this.prevSeriesY.push(r.yArrj),o.globals.seriesXvalues[n]=r.xArrj,o.globals.seriesYvalues[n]=r.yArrj;var c=o.config.forecastDataPoints;if(c.count>0){var u=o.globals.seriesXvalues[n][o.globals.seriesXvalues[n].length-c.count-1],h=s.drawRect(u,0,o.globals.gridWidth,o.globals.gridHeight,0);o.globals.dom.elForecastMask.appendChild(h.node);var d=s.drawRect(0,0,u,o.globals.gridHeight,0);o.globals.dom.elNonForecastMask.appendChild(d.node)}this.pointsChart||o.globals.delayedElements.push({el:this.elPointsMain.node,index:n});var f={i,realIndex:n,animationDelay:i,initialSpeed:o.config.chart.animations.speed,dataChangeSpeed:o.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(t)};if("area"===t)for(var p=l.fillPath({seriesNumber:n}),g=0;g<r.areaPaths.length;g++){var m=s.renderPaths(a(a({},f),{},{pathFrom:r.pathFromArea,pathTo:r.areaPaths[g],stroke:"none",strokeWidth:0,strokeLineCap:null,fill:p}));this.elSeries.add(m)}if(o.config.stroke.show&&!this.pointsChart){var v;v="line"===t?l.fillPath({seriesNumber:n,i}):o.globals.stroke.colors[n];for(var b=0;b<r.linePaths.length;b++){var x=a(a({},f),{},{pathFrom:r.pathFromLine,pathTo:r.linePaths[b],stroke:v,strokeWidth:this.strokeWidth,strokeLineCap:o.config.stroke.lineCap,fill:"none"}),y=s.renderPaths(x);if(this.elSeries.add(y),c.count>0){var k=s.renderPaths(x);k.node.setAttribute("stroke-dasharray",c.dashArray),c.strokeWidth&&k.node.setAttribute("stroke-width",c.strokeWidth),this.elSeries.add(k),k.attr("clip-path","url(#forecastMask".concat(o.globals.cuid,")")),y.attr("clip-path","url(#nonForecastMask".concat(o.globals.cuid,")"))}}}}},{key:"_iterateOverDataPoints",value:function(e){for(var t=e.series,n=e.realIndex,i=e.i,r=e.x,a=e.y,o=e.pX,s=e.pY,l=e.pathsFrom,c=e.linePaths,u=e.areaPaths,h=e.seriesIndex,d=e.lineYPosition,f=e.xArrj,p=e.yArrj,g=this.w,m=new w(this.ctx),v=this.yRatio,x=l.prevY,y=l.linePath,k=l.areaPath,S=l.pathFromLine,A=l.pathFromArea,C=b.isNumber(g.globals.minYArr[n])?g.globals.minYArr[n]:g.globals.minY,E=g.globals.dataPoints>1?g.globals.dataPoints-1:g.globals.dataPoints,T=0;T<E;T++){var P=void 0===t[i][T+1]||null===t[i][T+1];if(g.globals.isXNumeric){var L=g.globals.seriesX[n][T+1];void 0===g.globals.seriesX[n][T+1]&&(L=g.globals.seriesX[n][E-1]),r=(L-g.globals.minX)/this.xRatio}else r+=this.xDivision;d=g.config.chart.stacked&&i>0&&g.globals.collapsedSeries.length<g.config.series.length-1?this.prevSeriesY[function(e){for(var t=e,n=0;n<g.globals.series.length;n++)if(g.globals.collapsedSeriesIndices.indexOf(e)>-1){t--;break}return t>=0?t:0}(i-1)][T+1]:this.zeroY,a=P?d-C/v[this.yaxisIndex]+2*(this.isReversed?C/v[this.yaxisIndex]:0):d-t[i][T+1]/v[this.yaxisIndex]+2*(this.isReversed?t[i][T+1]/v[this.yaxisIndex]:0),f.push(r),p.push(a);var R=this.lineHelpers.calculatePoints({series:t,x:r,y:a,realIndex:n,i,j:T,prevY:x}),M=this._createPaths({series:t,i,realIndex:n,j:T,x:r,y:a,pX:o,pY:s,linePath:y,areaPath:k,linePaths:c,areaPaths:u,seriesIndex:h});u=M.areaPaths,c=M.linePaths,o=M.pX,s=M.pY,k=M.areaPath,y=M.linePath,this.appendPathFrom&&(S+=m.line(r,this.zeroY),A+=m.line(r,this.zeroY)),this.handleNullDataPoints(t,R,i,T,n),this._handleMarkersAndLabels({pointsPos:R,series:t,x:r,y:a,prevY:x,i,j:T,realIndex:n})}return{yArrj:p,xArrj:f,pathFromArea:A,areaPaths:u,pathFromLine:S,linePaths:c}}},{key:"_handleMarkersAndLabels",value:function(e){var t=e.pointsPos;e.series,e.x,e.y,e.prevY;var n=e.i,i=e.j,r=e.realIndex,a=this.w,o=new O(this.ctx);if(this.pointsChart)this.scatter.draw(this.elSeries,i,{realIndex:r,pointsPos:t,zRatio:this.zRatio,elParent:this.elPointsMain});else{a.globals.series[n].length>1&&this.elPointsMain.node.classList.add("apexcharts-element-hidden");var s=this.markers.plotChartMarkers(t,r,i+1);null!==s&&this.elPointsMain.add(s)}var l=o.drawDataLabel(t,r,i+1,null);null!==l&&this.elDataLabelsWrap.add(l)}},{key:"_createPaths",value:function(e){var t=e.series,n=e.i,i=e.realIndex,r=e.j,a=e.x,o=e.y,s=e.pX,l=e.pY,c=e.linePath,u=e.areaPath,h=e.linePaths,d=e.areaPaths,f=e.seriesIndex,p=this.w,g=new w(this.ctx),m=p.config.stroke.curve,v=this.areaBottomY;if(Array.isArray(p.config.stroke.curve)&&(m=Array.isArray(f)?p.config.stroke.curve[f[n]]:p.config.stroke.curve[n]),"smooth"===m){var b=.35*(a-s);p.globals.hasNullValues?(null!==t[n][r]&&(null!==t[n][r+1]?(c=g.move(s,l)+g.curve(s+b,l,a-b,o,a+1,o),u=g.move(s+1,l)+g.curve(s+b,l,a-b,o,a+1,o)+g.line(a,v)+g.line(s,v)+"z"):(c=g.move(s,l),u=g.move(s,l)+"z")),h.push(c),d.push(u)):(c+=g.curve(s+b,l,a-b,o,a,o),u+=g.curve(s+b,l,a-b,o,a,o)),s=a,l=o,r===t[n].length-2&&(u=u+g.curve(s,l,a,o,a,v)+g.move(a,o)+"z",p.globals.hasNullValues||(h.push(c),d.push(u)))}else{if(null===t[n][r+1]){c+=g.move(a,o);var x=p.globals.isXNumeric?(p.globals.seriesX[i][r]-p.globals.minX)/this.xRatio:a-this.xDivision;u=u+g.line(x,v)+g.move(a,o)+"z"}null===t[n][r]&&(c+=g.move(a,o),u+=g.move(a,v)),"stepline"===m?(c=c+g.line(a,null,"H")+g.line(null,o,"V"),u=u+g.line(a,null,"H")+g.line(null,o,"V")):"straight"===m&&(c+=g.line(a,o),u+=g.line(a,o)),r===t[n].length-2&&(u=u+g.line(a,v)+g.move(a,o)+"z",h.push(c),d.push(u))}return{linePaths:h,areaPaths:d,pX:s,pY:l,linePath:c,areaPath:u}}},{key:"handleNullDataPoints",value:function(e,t,n,i,r){var a=this.w;if(null===e[n][i]&&a.config.markers.showNullDataPoints||1===e[n].length){var o=this.markers.plotChartMarkers(t,r,i+1,this.strokeWidth-a.config.markers.strokeWidth/2,!0);null!==o&&this.elPointsMain.add(o)}}}]),e}();window.TreemapSquared={},window.TreemapSquared.generate=function(){function e(t,n,i,r){this.xoffset=t,this.yoffset=n,this.height=r,this.width=i,this.shortestEdge=function(){return Math.min(this.height,this.width)},this.getCoordinates=function(e){var t,n=[],i=this.xoffset,r=this.yoffset,o=a(e)/this.height,s=a(e)/this.width;if(this.width>=this.height)for(t=0;t<e.length;t++)n.push([i,r,i+o,r+e[t]/o]),r+=e[t]/o;else for(t=0;t<e.length;t++)n.push([i,r,i+e[t]/s,r+s]),i+=e[t]/s;return n},this.cutArea=function(t){var n;if(this.width>=this.height){var i=t/this.height,r=this.width-i;n=new e(this.xoffset+i,this.yoffset,r,this.height)}else{var a=t/this.width,o=this.height-a;n=new e(this.xoffset,this.yoffset+a,this.width,o)}return n}}function t(t,i,r,o,s){return o=void 0===o?0:o,s=void 0===s?0:s,function(e){var t,n,i=[];for(t=0;t<e.length;t++)for(n=0;n<e[t].length;n++)i.push(e[t][n]);return i}(n(function(e,t){var n,i=[],r=t/a(e);for(n=0;n<e.length;n++)i[n]=e[n]*r;return i}(t,i*r),[],new e(o,s,i,r),[]))}function n(e,t,r,o){var s,l,c;if(0!==e.length)return s=r.shortestEdge(),function(e,t,n){var r;return 0===e.length||((r=e.slice()).push(t),i(e,n)>=i(r,n))}(t,l=e[0],s)?(t.push(l),n(e.slice(1),t,r,o)):(c=r.cutArea(a(t),o),o.push(r.getCoordinates(t)),n(e,[],c,o)),o;o.push(r.getCoordinates(t))}function i(e,t){var n=Math.min.apply(Math,e),i=Math.max.apply(Math,e),r=a(e);return Math.max(Math.pow(t,2)*i/Math.pow(r,2),Math.pow(r,2)/(Math.pow(t,2)*n))}function r(e){return e&&e.constructor===Array}function a(e){var t,n=0;for(t=0;t<e.length;t++)n+=e[t];return n}function o(e){var t,n=0;if(r(e[0]))for(t=0;t<e.length;t++)n+=o(e[t]);else n=a(e);return n}return function e(n,i,a,s,l){s=void 0===s?0:s,l=void 0===l?0:l;var c,u,h=[],d=[];if(r(n[0])){for(u=0;u<n.length;u++)h[u]=o(n[u]);for(c=t(h,i,a,s,l),u=0;u<n.length;u++)d.push(e(n[u],c[u][2]-c[u][0],c[u][3]-c[u][1],c[u][0],c[u][1]))}else d=t(n,i,a,s,l);return d}}();var Ie,Oe,_e=function(){function e(t,n){s(this,e),this.ctx=t,this.w=t.w,this.strokeWidth=this.w.config.stroke.width,this.helpers=new Ae(t),this.dynamicAnim=this.w.config.chart.animations.dynamicAnimation,this.labels=[]}return c(e,[{key:"draw",value:function(e){var t=this,n=this.w,i=new w(this.ctx),r=new R(this.ctx),a=i.group({class:"apexcharts-treemap"});if(n.globals.noData)return a;var o=[];return e.forEach((function(e){var t=e.map((function(e){return Math.abs(e)}));o.push(t)})),this.negRange=this.helpers.checkColorRange(),n.config.series.forEach((function(e,n){e.data.forEach((function(e){Array.isArray(t.labels[n])||(t.labels[n]=[]),t.labels[n].push(e.x)}))})),window.TreemapSquared.generate(o,n.globals.gridWidth,n.globals.gridHeight).forEach((function(o,s){var l=i.group({class:"apexcharts-series apexcharts-treemap-series",seriesName:b.escapeString(n.globals.seriesNames[s]),rel:s+1,"data:realIndex":s});if(n.config.chart.dropShadow.enabled){var c=n.config.chart.dropShadow;new y(t.ctx).dropShadow(a,c,s)}var u=i.group({class:"apexcharts-data-labels"});o.forEach((function(a,o){var c=a[0],u=a[1],h=a[2],d=a[3],f=i.drawRect(c,u,h-c,d-u,0,"#fff",1,t.strokeWidth,n.config.plotOptions.treemap.useFillColorAsStroke?g:n.globals.stroke.colors[s]);f.attr({cx:c,cy:u,index:s,i:s,j:o,width:h-c,height:d-u});var p=t.helpers.getShadeColor(n.config.chart.type,s,o,t.negRange),g=p.color;void 0!==n.config.series[s].data[o]&&n.config.series[s].data[o].fillColor&&(g=n.config.series[s].data[o].fillColor);var m=r.fillPath({color:g,seriesNumber:s,dataPointIndex:o});f.node.classList.add("apexcharts-treemap-rect"),f.attr({fill:m}),t.helpers.addListeners(f);var v={x:c+(h-c)/2,y:u+(d-u)/2,width:0,height:0},b={x:c,y:u,width:h-c,height:d-u};if(n.config.chart.animations.enabled&&!n.globals.dataChanged){var x=1;n.globals.resized||(x=n.config.chart.animations.speed),t.animateTreemap(f,v,b,x)}if(n.globals.dataChanged){var y=1;t.dynamicAnim.enabled&&n.globals.shouldAnimate&&(y=t.dynamicAnim.speed,n.globals.previousPaths[s]&&n.globals.previousPaths[s][o]&&n.globals.previousPaths[s][o].rect&&(v=n.globals.previousPaths[s][o].rect),t.animateTreemap(f,v,b,y))}var w=t.getFontSize(a),k=n.config.dataLabels.formatter(t.labels[s][o],{value:n.globals.series[s][o],seriesIndex:s,dataPointIndex:o,w:n}),S=t.helpers.calculateDataLabels({text:k,x:(c+h)/2,y:(u+d)/2+t.strokeWidth/2+w/3,i:s,j:o,colorProps:p,fontSize:w,series:e});n.config.dataLabels.enabled&&S&&t.rotateToFitLabel(S,k,c,u,h,d),l.add(f),null!==S&&l.add(S)})),l.add(u),a.add(l)})),a}},{key:"getFontSize",value:function(e){var t,n,i=this.w,r=function e(t){var n,i=0;if(Array.isArray(t[0]))for(n=0;n<t.length;n++)i+=e(t[n]);else for(n=0;n<t.length;n++)i+=t[n].length;return i}(this.labels)/function e(t){var n,i=0;if(Array.isArray(t[0]))for(n=0;n<t.length;n++)i+=e(t[n]);else for(n=0;n<t.length;n++)i+=1;return i}(this.labels);return t=(e[2]-e[0])*(e[3]-e[1]),n=Math.pow(t,.5),Math.min(n/r,parseInt(i.config.dataLabels.style.fontSize,10))}},{key:"rotateToFitLabel",value:function(e,t,n,i,r,a){var o=new w(this.ctx),s=o.getTextRects(t);if(s.width+5>r-n&&s.width<=a-i){var l=o.rotateAroundCenter(e.node);e.node.setAttribute("transform","rotate(-90 ".concat(l.x," ").concat(l.y,")"))}}},{key:"animateTreemap",value:function(e,t,n,i){var r=new x(this.ctx);r.animateRect(e,{x:t.x,y:t.y,width:t.width,height:t.height},{x:n.x,y:n.y,width:n.width,height:n.height},i,(function(){r.animationCompleted(e)}))}}]),e}(),Ne=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w,this.timeScaleArray=[],this.utc=this.w.config.xaxis.labels.datetimeUTC}return c(e,[{key:"calculateTimeScaleTicks",value:function(e,t){var n=this,i=this.w;if(i.globals.allSeriesCollapsed)return i.globals.labels=[],i.globals.timescaleLabels=[],[];var r=new D(this.ctx),o=(t-e)/864e5;this.determineInterval(o),i.globals.disableZoomIn=!1,i.globals.disableZoomOut=!1,o<.00011574074074074075?i.globals.disableZoomIn=!0:o>5e4&&(i.globals.disableZoomOut=!0);var s=r.getTimeUnitsfromTimestamp(e,t,this.utc),l=i.globals.gridWidth/o,c=l/24,u=c/60,h=u/60,d=Math.floor(24*o),f=Math.floor(1440*o),p=Math.floor(86400*o),g=Math.floor(o),m=Math.floor(o/30),v=Math.floor(o/365),b={minMillisecond:s.minMillisecond,minSecond:s.minSecond,minMinute:s.minMinute,minHour:s.minHour,minDate:s.minDate,minMonth:s.minMonth,minYear:s.minYear},x={firstVal:b,currentMillisecond:b.minMillisecond,currentSecond:b.minSecond,currentMinute:b.minMinute,currentHour:b.minHour,currentMonthDate:b.minDate,currentDate:b.minDate,currentMonth:b.minMonth,currentYear:b.minYear,daysWidthOnXAxis:l,hoursWidthOnXAxis:c,minutesWidthOnXAxis:u,secondsWidthOnXAxis:h,numberOfSeconds:p,numberOfMinutes:f,numberOfHours:d,numberOfDays:g,numberOfMonths:m,numberOfYears:v};switch(this.tickInterval){case"years":this.generateYearScale(x);break;case"months":case"half_year":this.generateMonthScale(x);break;case"months_days":case"months_fortnight":case"days":case"week_days":this.generateDayScale(x);break;case"hours":this.generateHourScale(x);break;case"minutes_fives":case"minutes":this.generateMinuteScale(x);break;case"seconds_tens":case"seconds_fives":case"seconds":this.generateSecondScale(x)}var y=this.timeScaleArray.map((function(e){var t={position:e.position,unit:e.unit,year:e.year,day:e.day?e.day:1,hour:e.hour?e.hour:0,month:e.month+1};return"month"===e.unit?a(a({},t),{},{day:1,value:e.value+1}):"day"===e.unit||"hour"===e.unit?a(a({},t),{},{value:e.value}):"minute"===e.unit?a(a({},t),{},{value:e.value,minute:e.value}):"second"===e.unit?a(a({},t),{},{value:e.value,minute:e.minute,second:e.second}):e}));return y.filter((function(e){var t=1,r=Math.ceil(i.globals.gridWidth/120),a=e.value;void 0!==i.config.xaxis.tickAmount&&(r=i.config.xaxis.tickAmount),y.length>r&&(t=Math.floor(y.length/r));var o=!1,s=!1;switch(n.tickInterval){case"years":"year"===e.unit&&(o=!0);break;case"half_year":t=7,"year"===e.unit&&(o=!0);break;case"months":t=1,"year"===e.unit&&(o=!0);break;case"months_fortnight":t=15,"year"!==e.unit&&"month"!==e.unit||(o=!0),30===a&&(s=!0);break;case"months_days":t=10,"month"===e.unit&&(o=!0),30===a&&(s=!0);break;case"week_days":t=8,"month"===e.unit&&(o=!0);break;case"days":t=1,"month"===e.unit&&(o=!0);break;case"hours":"day"===e.unit&&(o=!0);break;case"minutes_fives":case"seconds_fives":a%5!=0&&(s=!0);break;case"seconds_tens":a%10!=0&&(s=!0)}if("hours"===n.tickInterval||"minutes_fives"===n.tickInterval||"seconds_tens"===n.tickInterval||"seconds_fives"===n.tickInterval){if(!s)return!0}else if((a%t==0||o)&&!s)return!0}))}},{key:"recalcDimensionsBasedOnFormat",value:function(e,t){var n=this.w,i=this.formatDates(e),r=this.removeOverlappingTS(i);n.globals.timescaleLabels=r.slice(),new ue(this.ctx).plotCoords()}},{key:"determineInterval",value:function(e){var t=24*e,n=60*t;switch(!0){case e/365>5:this.tickInterval="years";break;case e>800:this.tickInterval="half_year";break;case e>180:this.tickInterval="months";break;case e>90:this.tickInterval="months_fortnight";break;case e>60:this.tickInterval="months_days";break;case e>30:this.tickInterval="week_days";break;case e>2:this.tickInterval="days";break;case t>2.4:this.tickInterval="hours";break;case n>15:this.tickInterval="minutes_fives";break;case n>5:this.tickInterval="minutes";break;case n>1:this.tickInterval="seconds_tens";break;case 60*n>20:this.tickInterval="seconds_fives";break;default:this.tickInterval="seconds"}}},{key:"generateYearScale",value:function(e){var t=e.firstVal,n=e.currentMonth,i=e.currentYear,r=e.daysWidthOnXAxis,a=e.numberOfYears,o=t.minYear,s=0,l=new D(this.ctx),c="year";if(t.minDate>1||t.minMonth>0){var u=l.determineRemainingDaysOfYear(t.minYear,t.minMonth,t.minDate);s=(l.determineDaysOfYear(t.minYear)-u+1)*r,o=t.minYear+1,this.timeScaleArray.push({position:s,value:o,unit:c,year:o,month:b.monthMod(n+1)})}else 1===t.minDate&&0===t.minMonth&&this.timeScaleArray.push({position:s,value:o,unit:c,year:i,month:b.monthMod(n+1)});for(var h=o,d=s,f=0;f<a;f++)h++,d=l.determineDaysOfYear(h-1)*r+d,this.timeScaleArray.push({position:d,value:h,unit:c,year:h,month:1})}},{key:"generateMonthScale",value:function(e){var t=e.firstVal,n=e.currentMonthDate,i=e.currentMonth,r=e.currentYear,a=e.daysWidthOnXAxis,o=e.numberOfMonths,s=i,l=0,c=new D(this.ctx),u="month",h=0;if(t.minDate>1){l=(c.determineDaysOfMonths(i+1,t.minYear)-n+1)*a,s=b.monthMod(i+1);var d=r+h,f=b.monthMod(s),p=s;0===s&&(u="year",p=d,f=1,d+=h+=1),this.timeScaleArray.push({position:l,value:p,unit:u,year:d,month:f})}else this.timeScaleArray.push({position:l,value:s,unit:u,year:r,month:b.monthMod(i)});for(var g=s+1,m=l,v=0,x=1;v<o;v++,x++){0===(g=b.monthMod(g))?(u="year",h+=1):u="month";var y=this._getYear(r,g,h);m=c.determineDaysOfMonths(g,y)*a+m;var w=0===g?y:g;this.timeScaleArray.push({position:m,value:w,unit:u,year:y,month:0===g?1:g}),g++}}},{key:"generateDayScale",value:function(e){var t=e.firstVal,n=e.currentMonth,i=e.currentYear,r=e.hoursWidthOnXAxis,a=e.numberOfDays,o=new D(this.ctx),s="day",l=t.minDate+1,c=l,u=function(e,t,n){return e>o.determineDaysOfMonths(t+1,n)?(c=1,s="month",d=t+=1,t):t},h=(24-t.minHour)*r,d=l,f=u(c,n,i);0===t.minHour&&1===t.minDate?(h=0,d=b.monthMod(t.minMonth),s="month",c=t.minDate,a++):1!==t.minDate&&0===t.minHour&&0===t.minMinute&&(h=0,l=t.minDate,d=l,f=u(c=l,n,i)),this.timeScaleArray.push({position:h,value:d,unit:s,year:this._getYear(i,f,0),month:b.monthMod(f),day:c});for(var p=h,g=0;g<a;g++){s="day",f=u(c+=1,f,this._getYear(i,f,0));var m=this._getYear(i,f,0);p=24*r+p;var v=1===c?b.monthMod(f):c;this.timeScaleArray.push({position:p,value:v,unit:s,year:m,month:b.monthMod(f),day:v})}}},{key:"generateHourScale",value:function(e){var t=e.firstVal,n=e.currentDate,i=e.currentMonth,r=e.currentYear,a=e.minutesWidthOnXAxis,o=e.numberOfHours,s=new D(this.ctx),l="hour",c=function(e,t){return e>s.determineDaysOfMonths(t+1,r)&&(g=1,t+=1),{month:t,date:g}},u=function(e,t){return e>s.determineDaysOfMonths(t+1,r)?t+=1:t},h=60-(t.minMinute+t.minSecond/60),d=h*a,f=t.minHour+1,p=f+1;60===h&&(d=0,p=(f=t.minHour)+1);var g=n,m=u(g,i);this.timeScaleArray.push({position:d,value:f,unit:l,day:g,hour:p,year:r,month:b.monthMod(m)});for(var v=d,x=0;x<o;x++){l="hour",p>=24&&(p=0,l="day",m=c(g+=1,m).month,m=u(g,m));var y=this._getYear(r,m,0);v=0===p&&0===x?h*a:60*a+v;var w=0===p?g:p;this.timeScaleArray.push({position:v,value:w,unit:l,hour:p,day:g,year:y,month:b.monthMod(m)}),p++}}},{key:"generateMinuteScale",value:function(e){for(var t=e.currentMillisecond,n=e.currentSecond,i=e.currentMinute,r=e.currentHour,a=e.currentDate,o=e.currentMonth,s=e.currentYear,l=e.minutesWidthOnXAxis,c=e.secondsWidthOnXAxis,u=e.numberOfMinutes,h=i+1,d=a,f=o,p=s,g=r,m=(60-n-t/1e3)*c,v=0;v<u;v++)h>=60&&(h=0,24===(g+=1)&&(g=0)),this.timeScaleArray.push({position:m,value:h,unit:"minute",hour:g,minute:h,day:d,year:this._getYear(p,f,0),month:b.monthMod(f)}),m+=l,h++}},{key:"generateSecondScale",value:function(e){for(var t=e.currentMillisecond,n=e.currentSecond,i=e.currentMinute,r=e.currentHour,a=e.currentDate,o=e.currentMonth,s=e.currentYear,l=e.secondsWidthOnXAxis,c=e.numberOfSeconds,u=n+1,h=i,d=a,f=o,p=s,g=r,m=(1e3-t)/1e3*l,v=0;v<c;v++)u>=60&&(u=0,++h>=60&&(h=0,24==++g&&(g=0))),this.timeScaleArray.push({position:m,value:u,unit:"second",hour:g,minute:h,second:u,day:d,year:this._getYear(p,f,0),month:b.monthMod(f)}),m+=l,u++}},{key:"createRawDateString",value:function(e,t){var n=e.year;return 0===e.month&&(e.month=1),n+="-"+("0"+e.month.toString()).slice(-2),"day"===e.unit?n+="day"===e.unit?"-"+("0"+t).slice(-2):"-01":n+="-"+("0"+(e.day?e.day:"1")).slice(-2),"hour"===e.unit?n+="hour"===e.unit?"T"+("0"+t).slice(-2):"T00":n+="T"+("0"+(e.hour?e.hour:"0")).slice(-2),"minute"===e.unit?n+=":"+("0"+t).slice(-2):n+=":"+(e.minute?("0"+e.minute).slice(-2):"00"),"second"===e.unit?n+=":"+("0"+t).slice(-2):n+=":00",this.utc&&(n+=".000Z"),n}},{key:"formatDates",value:function(e){var t=this,n=this.w;return e.map((function(e){var i=e.value.toString(),r=new D(t.ctx),a=t.createRawDateString(e,i),o=r.getDate(r.parseDate(a));if(t.utc||(o=r.getDate(r.parseDateWithTimezone(a))),void 0===n.config.xaxis.labels.format){var s="dd MMM",l=n.config.xaxis.labels.datetimeFormatter;"year"===e.unit&&(s=l.year),"month"===e.unit&&(s=l.month),"day"===e.unit&&(s=l.day),"hour"===e.unit&&(s=l.hour),"minute"===e.unit&&(s=l.minute),"second"===e.unit&&(s=l.second),i=r.formatDate(o,s)}else i=r.formatDate(o,n.config.xaxis.labels.format);return{dateString:a,position:e.position,value:i,unit:e.unit,year:e.year,month:e.month}}))}},{key:"removeOverlappingTS",value:function(e){var t,n=this,i=new w(this.ctx),r=!1;e.length>0&&e[0].value&&e.every((function(t){return t.value.length===e[0].value.length}))&&(r=!0,t=i.getTextRects(e[0].value).width);var a=0,o=e.map((function(o,s){if(s>0&&n.w.config.xaxis.labels.hideOverlappingLabels){var l=r?t:i.getTextRects(e[a].value).width,c=e[a].position;return o.position>c+l+10?(a=s,o):null}return o}));return o.filter((function(e){return null!==e}))}},{key:"_getYear",value:function(e,t,n){return e+Math.floor(t/12)+n}}]),e}(),ze=function(){function e(t,n){s(this,e),this.ctx=n,this.w=n.w,this.el=t}return c(e,[{key:"setupElements",value:function(){var e=this.w.globals,t=this.w.config,n=t.chart.type;e.axisCharts=["line","area","bar","rangeBar","candlestick","boxPlot","scatter","bubble","radar","heatmap","treemap"].indexOf(n)>-1,e.xyCharts=["line","area","bar","rangeBar","candlestick","boxPlot","scatter","bubble"].indexOf(n)>-1,e.isBarHorizontal=("bar"===t.chart.type||"rangeBar"===t.chart.type||"boxPlot"===t.chart.type)&&t.plotOptions.bar.horizontal,e.chartClass=".apexcharts"+e.chartID,e.dom.baseEl=this.el,e.dom.elWrap=document.createElement("div"),w.setAttrs(e.dom.elWrap,{id:e.chartClass.substring(1),class:"apexcharts-canvas "+e.chartClass.substring(1)}),this.el.appendChild(e.dom.elWrap),e.dom.Paper=new window.SVG.Doc(e.dom.elWrap),e.dom.Paper.attr({class:"apexcharts-svg","xmlns:data":"ApexChartsNS",transform:"translate(".concat(t.chart.offsetX,", ").concat(t.chart.offsetY,")")}),e.dom.Paper.node.style.background=t.chart.background,this.setSVGDimensions(),e.dom.elGraphical=e.dom.Paper.group().attr({class:"apexcharts-inner apexcharts-graphical"}),e.dom.elAnnotations=e.dom.Paper.group().attr({class:"apexcharts-annotations"}),e.dom.elDefs=e.dom.Paper.defs(),e.dom.elLegendWrap=document.createElement("div"),e.dom.elLegendWrap.classList.add("apexcharts-legend"),e.dom.elWrap.appendChild(e.dom.elLegendWrap),e.dom.Paper.add(e.dom.elGraphical),e.dom.elGraphical.add(e.dom.elDefs)}},{key:"plotChartType",value:function(e,t){var n=this.w,i=n.config,r=n.globals,a={series:[],i:[]},o={series:[],i:[]},s={series:[],i:[]},l={series:[],i:[]},c={series:[],i:[]},u={series:[],i:[]},h={series:[],i:[]};r.series.map((function(t,d){var f=0;void 0!==e[d].type?("column"===e[d].type||"bar"===e[d].type?(r.series.length>1&&i.plotOptions.bar.horizontal&&console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"),c.series.push(t),c.i.push(d),f++,n.globals.columnSeries=c.series):"area"===e[d].type?(o.series.push(t),o.i.push(d),f++):"line"===e[d].type?(a.series.push(t),a.i.push(d),f++):"scatter"===e[d].type?(s.series.push(t),s.i.push(d)):"bubble"===e[d].type?(l.series.push(t),l.i.push(d),f++):"candlestick"===e[d].type?(u.series.push(t),u.i.push(d),f++):"boxPlot"===e[d].type?(h.series.push(t),h.i.push(d),f++):console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"),f>1&&(r.comboCharts=!0)):(a.series.push(t),a.i.push(d))}));var d=new Me(this.ctx,t),f=new Se(this.ctx,t);this.ctx.pie=new Te(this.ctx);var p=new Le(this.ctx);this.ctx.rangeBar=new X(this.ctx,t);var g=new Pe(this.ctx),m=[];if(r.comboCharts){if(o.series.length>0&&m.push(d.draw(o.series,"area",o.i)),c.series.length>0)if(n.config.chart.stacked){var v=new ke(this.ctx,t);m.push(v.draw(c.series,c.i))}else this.ctx.bar=new F(this.ctx,t),m.push(this.ctx.bar.draw(c.series,c.i));if(a.series.length>0&&m.push(d.draw(a.series,"line",a.i)),u.series.length>0&&m.push(f.draw(u.series,u.i)),h.series.length>0&&m.push(f.draw(h.series,h.i)),s.series.length>0){var b=new Me(this.ctx,t,!0);m.push(b.draw(s.series,"scatter",s.i))}if(l.series.length>0){var x=new Me(this.ctx,t,!0);m.push(x.draw(l.series,"bubble",l.i))}}else switch(i.chart.type){case"line":m=d.draw(r.series,"line");break;case"area":m=d.draw(r.series,"area");break;case"bar":i.chart.stacked?m=new ke(this.ctx,t).draw(r.series):(this.ctx.bar=new F(this.ctx,t),m=this.ctx.bar.draw(r.series));break;case"candlestick":case"boxPlot":m=new Se(this.ctx,t).draw(r.series);break;case"rangeBar":m=this.ctx.rangeBar.draw(r.series);break;case"heatmap":m=new Ce(this.ctx,t).draw(r.series);break;case"treemap":m=new _e(this.ctx,t).draw(r.series);break;case"pie":case"donut":case"polarArea":m=this.ctx.pie.draw(r.series);break;case"radialBar":m=p.draw(r.series);break;case"radar":m=g.draw(r.series);break;default:m=d.draw(r.series)}return m}},{key:"setSVGDimensions",value:function(){var e=this.w.globals,t=this.w.config;e.svgWidth=t.chart.width,e.svgHeight=t.chart.height;var n=b.getDimensions(this.el),i=t.chart.width.toString().split(/[0-9]+/g).pop();"%"===i?b.isNumber(n[0])&&(0===n[0].width&&(n=b.getDimensions(this.el.parentNode)),e.svgWidth=n[0]*parseInt(t.chart.width,10)/100):"px"!==i&&""!==i||(e.svgWidth=parseInt(t.chart.width,10));var r=t.chart.height.toString().split(/[0-9]+/g).pop();if("auto"!==e.svgHeight&&""!==e.svgHeight)if("%"===r){var a=b.getDimensions(this.el.parentNode);e.svgHeight=a[1]*parseInt(t.chart.height,10)/100}else e.svgHeight=parseInt(t.chart.height,10);else e.axisCharts?e.svgHeight=e.svgWidth/1.61:e.svgHeight=e.svgWidth/1.2;if(e.svgWidth<0&&(e.svgWidth=0),e.svgHeight<0&&(e.svgHeight=0),w.setAttrs(e.dom.Paper.node,{width:e.svgWidth,height:e.svgHeight}),"%"!==r){var o=t.chart.sparkline.enabled?0:e.axisCharts?t.chart.parentHeightOffset:0;e.dom.Paper.node.parentNode.parentNode.style.minHeight=e.svgHeight+o+"px"}e.dom.elWrap.style.width=e.svgWidth+"px",e.dom.elWrap.style.height=e.svgHeight+"px"}},{key:"shiftGraphPosition",value:function(){var e=this.w.globals,t=e.translateY,n={transform:"translate("+e.translateX+", "+t+")"};w.setAttrs(e.dom.elGraphical.node,n)}},{key:"resizeNonAxisCharts",value:function(){var e=this.w,t=e.globals,n=0,i=e.config.chart.sparkline.enabled?1:15;i+=e.config.grid.padding.bottom,"top"!==e.config.legend.position&&"bottom"!==e.config.legend.position||!e.config.legend.show||e.config.legend.floating||(n=new de(this.ctx).legendHelpers.getLegendBBox().clwh+10);var r=e.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"),a=2.05*e.globals.radialSize;if(r&&!e.config.chart.sparkline.enabled&&0!==e.config.plotOptions.radialBar.startAngle){var o=b.getBoundingClientRect(r);a=o.bottom;var s=o.bottom-o.top;a=Math.max(2.05*e.globals.radialSize,s)}var l=a+t.translateY+n+i;t.dom.elLegendForeign&&t.dom.elLegendForeign.setAttribute("height",l),t.dom.elWrap.style.height=l+"px",w.setAttrs(t.dom.Paper.node,{height:l}),t.dom.Paper.node.parentNode.parentNode.style.minHeight=l+"px"}},{key:"coreCalculations",value:function(){new Q(this.ctx).init()}},{key:"resetGlobals",value:function(){var e=this,t=function(){return e.w.config.series.map((function(e){return[]}))},n=new H,i=this.w.globals;n.initGlobalVars(i),i.seriesXvalues=t(),i.seriesYvalues=t()}},{key:"isMultipleY",value:function(){if(this.w.config.yaxis.constructor===Array&&this.w.config.yaxis.length>1)return this.w.globals.isMultipleYAxis=!0,!0}},{key:"xySettings",value:function(){var e=null,t=this.w;if(t.globals.axisCharts){if("back"===t.config.xaxis.crosshairs.position&&new ne(this.ctx).drawXCrosshairs(),"back"===t.config.yaxis[0].crosshairs.position&&new ne(this.ctx).drawYCrosshairs(),"datetime"===t.config.xaxis.type&&void 0===t.config.xaxis.labels.formatter){this.ctx.timeScale=new Ne(this.ctx);var n=[];isFinite(t.globals.minX)&&isFinite(t.globals.maxX)&&!t.globals.isBarHorizontal?n=this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minX,t.globals.maxX):t.globals.isBarHorizontal&&(n=this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minY,t.globals.maxY)),this.ctx.timeScale.recalcDimensionsBasedOnFormat(n)}e=new A(this.ctx).getCalculatedRatios()}return e}},{key:"updateSourceChart",value:function(e){this.ctx.w.globals.selection=void 0,this.ctx.updateHelpers._updateOptions({chart:{selection:{xaxis:{min:e.w.globals.minX,max:e.w.globals.maxX}}}},!1,!1)}},{key:"setupBrushHandler",value:function(){var e=this,t=this.w;if(t.config.chart.brush.enabled&&"function"!=typeof t.config.chart.events.selection){var n=t.config.chart.brush.targets||[t.config.chart.brush.target];n.forEach((function(t){var n=ApexCharts.getChartByID(t);n.w.globals.brushSource=e.ctx,"function"!=typeof n.w.config.chart.events.zoomed&&(n.w.config.chart.events.zoomed=function(){e.updateSourceChart(n)}),"function"!=typeof n.w.config.chart.events.scrolled&&(n.w.config.chart.events.scrolled=function(){e.updateSourceChart(n)})})),t.config.chart.events.selection=function(e,i){n.forEach((function(e){var n=ApexCharts.getChartByID(e),r=b.clone(t.config.yaxis);if(t.config.chart.brush.autoScaleYaxis&&1===n.w.globals.series.length){var o=new Z(n);r=o.autoScaleY(n,r,i)}var s=n.w.config.yaxis.reduce((function(e,t,i){return[].concat(m(e),[a(a({},n.w.config.yaxis[i]),{},{min:r[0].min,max:r[0].max})])}),[]);n.ctx.updateHelpers._updateOptions({xaxis:{min:i.xaxis.min,max:i.xaxis.max},yaxis:s},!1,!1,!1,!1)}))}}}}]),e}(),Fe=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"_updateOptions",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return new Promise((function(s){var l=[t.ctx];r&&(l=t.ctx.getSyncedCharts()),t.ctx.w.globals.isExecCalled&&(l=[t.ctx],t.ctx.w.globals.isExecCalled=!1),l.forEach((function(r,c){var u=r.w;return u.globals.shouldAnimate=i,n||(u.globals.resized=!0,u.globals.dataChanged=!0,i&&r.series.getPreviousPaths()),e&&"object"===o(e)&&(r.config=new Y(e),e=A.extendArrayProps(r.config,e,u),r.w.globals.chartID!==t.ctx.w.globals.chartID&&delete e.series,u.config=b.extend(u.config,e),a&&(u.globals.lastXAxis=e.xaxis?b.clone(e.xaxis):[],u.globals.lastYAxis=e.yaxis?b.clone(e.yaxis):[],u.globals.initialConfig=b.extend({},u.config),u.globals.initialSeries=b.clone(u.config.series))),r.update(e).then((function(){c===l.length-1&&s(r)}))}))}))}},{key:"_updateSeries",value:function(e,t){var n=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new Promise((function(r){var a,o=n.w;return o.globals.shouldAnimate=t,o.globals.dataChanged=!0,t&&n.ctx.series.getPreviousPaths(),o.globals.axisCharts?(0===(a=e.map((function(e,t){return n._extendSeries(e,t)}))).length&&(a=[{data:[]}]),o.config.series=a):o.config.series=e.slice(),i&&(o.globals.initialSeries=b.clone(o.config.series)),n.ctx.update().then((function(){r(n.ctx)}))}))}},{key:"_extendSeries",value:function(e,t){var n=this.w,i=n.config.series[t];return a(a({},n.config.series[t]),{},{name:e.name?e.name:i&&i.name,color:e.color?e.color:i&&i.color,type:e.type?e.type:i&&i.type,data:e.data?e.data:i&&i.data})}},{key:"toggleDataPointSelection",value:function(e,t){var n=this.w,i=null,r=".apexcharts-series[data\\:realIndex='".concat(e,"']");return n.globals.axisCharts?i=n.globals.dom.Paper.select("".concat(r," path[j='").concat(t,"'], ").concat(r," circle[j='").concat(t,"'], ").concat(r," rect[j='").concat(t,"']")).members[0]:void 0===t&&(i=n.globals.dom.Paper.select("".concat(r," path[j='").concat(e,"']")).members[0],"pie"!==n.config.chart.type&&"polarArea"!==n.config.chart.type&&"donut"!==n.config.chart.type||this.ctx.pie.pieClicked(e)),i?(new w(this.ctx).pathMouseDown(i,null),i.node?i.node:null):(console.warn("toggleDataPointSelection: Element not found"),null)}},{key:"forceXAxisUpdate",value:function(e){var t=this.w;if(["min","max"].forEach((function(n){void 0!==e.xaxis[n]&&(t.config.xaxis[n]=e.xaxis[n],t.globals.lastXAxis[n]=e.xaxis[n])})),e.xaxis.categories&&e.xaxis.categories.length&&(t.config.xaxis.categories=e.xaxis.categories),t.config.xaxis.convertedCatToNumeric){var n=new B(e);e=n.convertCatToNumericXaxis(e,this.ctx)}return e}},{key:"forceYAxisUpdate",value:function(e){var t=this.w;return t.config.chart.stacked&&"100%"===t.config.chart.stackType&&(Array.isArray(e.yaxis)?e.yaxis.forEach((function(t,n){e.yaxis[n].min=0,e.yaxis[n].max=100})):(e.yaxis.min=0,e.yaxis.max=100)),e}},{key:"revertDefaultAxisMinMax",value:function(e){var t=this,n=this.w,i=n.globals.lastXAxis,r=n.globals.lastYAxis;e&&e.xaxis&&(i=e.xaxis),e&&e.yaxis&&(r=e.yaxis),n.config.xaxis.min=i.min,n.config.xaxis.max=i.max,n.config.yaxis.map((function(e,i){n.globals.zoomed||void 0!==r[i]?function(e){void 0!==r[e]&&(n.config.yaxis[e].min=r[e].min,n.config.yaxis[e].max=r[e].max)}(i):void 0!==t.ctx.opts.yaxis[i]&&(e.min=t.ctx.opts.yaxis[i].min,e.max=t.ctx.opts.yaxis[i].max)}))}}]),e}();Ie="undefined"!=typeof window?window:void 0,Oe=function(e,t){var n=(void 0!==this?this:e).SVG=function(e){if(n.supported)return e=new n.Doc(e),n.parser.draw||n.prepare(),e};if(n.ns="http://www.w3.org/2000/svg",n.xmlns="http://www.w3.org/2000/xmlns/",n.xlink="http://www.w3.org/1999/xlink",n.svgjs="http://svgjs.dev",n.supported=!0,!n.supported)return!1;n.did=1e3,n.eid=function(e){return"Svgjs"+h(e)+n.did++},n.create=function(e){var n=t.createElementNS(this.ns,e);return n.setAttribute("id",this.eid(e)),n},n.extend=function(){var e,t;t=(e=[].slice.call(arguments)).pop();for(var i=e.length-1;i>=0;i--)if(e[i])for(var r in t)e[i].prototype[r]=t[r];n.Set&&n.Set.inherit&&n.Set.inherit()},n.invent=function(e){var t="function"==typeof e.create?e.create:function(){this.constructor.call(this,n.create(e.create))};return e.inherit&&(t.prototype=new e.inherit),e.extend&&n.extend(t,e.extend),e.construct&&n.extend(e.parent||n.Container,e.construct),t},n.adopt=function(t){return t?t.instance?t.instance:((i="svg"==t.nodeName?t.parentNode instanceof e.SVGElement?new n.Nested:new n.Doc:"linearGradient"==t.nodeName?new n.Gradient("linear"):"radialGradient"==t.nodeName?new n.Gradient("radial"):n[h(t.nodeName)]?new(n[h(t.nodeName)]):new n.Element(t)).type=t.nodeName,i.node=t,t.instance=i,i instanceof n.Doc&&i.namespace().defs(),i.setData(JSON.parse(t.getAttribute("svgjs:data"))||{}),i):null;var i},n.prepare=function(){var e=t.getElementsByTagName("body")[0],i=(e?new n.Doc(e):n.adopt(t.documentElement).nested()).size(2,0);n.parser={body:e||t.documentElement,draw:i.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,poly:i.polyline().node,path:i.path().node,native:n.create("svg")}},n.parser={native:n.create("svg")},t.addEventListener("DOMContentLoaded",(function(){n.parser.draw||n.prepare()}),!1),n.regex={numberAndUnit:/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,hex:/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,rgb:/rgb\((\d+),(\d+),(\d+)\)/,reference:/#([a-z0-9\-_]+)/i,transforms:/\)\s*,?\s*/,whitespace:/\s/g,isHex:/^#[a-f0-9]{3,6}$/i,isRgb:/^rgb\(/,isCss:/[^:]+:[^;]+;?/,isBlank:/^(\s+)?$/,isNumber:/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,isPercent:/^-?[\d\.]+%$/,isImage:/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,delimiter:/[\s,]+/,hyphen:/([^e])\-/gi,pathLetters:/[MLHVCSQTAZ]/gi,isPathLetter:/[MLHVCSQTAZ]/i,numbersWithDots:/((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,dots:/\./g},n.utils={map:function(e,t){for(var n=e.length,i=[],r=0;r<n;r++)i.push(t(e[r]));return i},filter:function(e,t){for(var n=e.length,i=[],r=0;r<n;r++)t(e[r])&&i.push(e[r]);return i},filterSVGElements:function(t){return this.filter(t,(function(t){return t instanceof e.SVGElement}))}},n.defaults={attrs:{"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","font-size":16,"font-family":"Helvetica, Arial, sans-serif","text-anchor":"start"}},n.Color=function(e){var t,i;this.r=0,this.g=0,this.b=0,e&&("string"==typeof e?n.regex.isRgb.test(e)?(t=n.regex.rgb.exec(e.replace(n.regex.whitespace,"")),this.r=parseInt(t[1]),this.g=parseInt(t[2]),this.b=parseInt(t[3])):n.regex.isHex.test(e)&&(t=n.regex.hex.exec(4==(i=e).length?["#",i.substring(1,2),i.substring(1,2),i.substring(2,3),i.substring(2,3),i.substring(3,4),i.substring(3,4)].join(""):i),this.r=parseInt(t[1],16),this.g=parseInt(t[2],16),this.b=parseInt(t[3],16)):"object"===o(e)&&(this.r=e.r,this.g=e.g,this.b=e.b))},n.extend(n.Color,{toString:function(){return this.toHex()},toHex:function(){return"#"+d(this.r)+d(this.g)+d(this.b)},toRgb:function(){return"rgb("+[this.r,this.g,this.b].join()+")"},brightness:function(){return this.r/255*.3+this.g/255*.59+this.b/255*.11},morph:function(e){return this.destination=new n.Color(e),this},at:function(e){return this.destination?(e=e<0?0:e>1?1:e,new n.Color({r:~~(this.r+(this.destination.r-this.r)*e),g:~~(this.g+(this.destination.g-this.g)*e),b:~~(this.b+(this.destination.b-this.b)*e)})):this}}),n.Color.test=function(e){return e+="",n.regex.isHex.test(e)||n.regex.isRgb.test(e)},n.Color.isRgb=function(e){return e&&"number"==typeof e.r&&"number"==typeof e.g&&"number"==typeof e.b},n.Color.isColor=function(e){return n.Color.isRgb(e)||n.Color.test(e)},n.Array=function(e,t){0==(e=(e||[]).valueOf()).length&&t&&(e=t.valueOf()),this.value=this.parse(e)},n.extend(n.Array,{toString:function(){return this.value.join(" ")},valueOf:function(){return this.value},parse:function(e){return e=e.valueOf(),Array.isArray(e)?e:this.split(e)}}),n.PointArray=function(e,t){n.Array.call(this,e,t||[[0,0]])},n.PointArray.prototype=new n.Array,n.PointArray.prototype.constructor=n.PointArray;for(var i={M:function(e,t,n){return t.x=n.x=e[0],t.y=n.y=e[1],["M",t.x,t.y]},L:function(e,t){return t.x=e[0],t.y=e[1],["L",e[0],e[1]]},H:function(e,t){return t.x=e[0],["H",e[0]]},V:function(e,t){return t.y=e[0],["V",e[0]]},C:function(e,t){return t.x=e[4],t.y=e[5],["C",e[0],e[1],e[2],e[3],e[4],e[5]]},Q:function(e,t){return t.x=e[2],t.y=e[3],["Q",e[0],e[1],e[2],e[3]]},Z:function(e,t,n){return t.x=n.x,t.y=n.y,["Z"]}},r="mlhvqtcsaz".split(""),a=0,s=r.length;a<s;++a)i[r[a]]=function(e){return function(t,n,r){if("H"==e)t[0]=t[0]+n.x;else if("V"==e)t[0]=t[0]+n.y;else if("A"==e)t[5]=t[5]+n.x,t[6]=t[6]+n.y;else for(var a=0,o=t.length;a<o;++a)t[a]=t[a]+(a%2?n.y:n.x);if(i&&"function"==typeof i[e])return i[e](t,n,r)}}(r[a].toUpperCase());n.PathArray=function(e,t){n.Array.call(this,e,t||[["M",0,0]])},n.PathArray.prototype=new n.Array,n.PathArray.prototype.constructor=n.PathArray,n.extend(n.PathArray,{toString:function(){return function(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t][0],null!=e[t][1]&&(i+=e[t][1],null!=e[t][2]&&(i+=" ",i+=e[t][2],null!=e[t][3]&&(i+=" ",i+=e[t][3],i+=" ",i+=e[t][4],null!=e[t][5]&&(i+=" ",i+=e[t][5],i+=" ",i+=e[t][6],null!=e[t][7]&&(i+=" ",i+=e[t][7])))));return i+" "}(this.value)},move:function(e,t){var n=this.bbox();return n.x,n.y,this},at:function(e){if(!this.destination)return this;for(var t=this.value,i=this.destination.value,r=[],a=new n.PathArray,o=0,s=t.length;o<s;o++){r[o]=[t[o][0]];for(var l=1,c=t[o].length;l<c;l++)r[o][l]=t[o][l]+(i[o][l]-t[o][l])*e;"A"===r[o][0]&&(r[o][4]=+(0!=r[o][4]),r[o][5]=+(0!=r[o][5]))}return a.value=r,a},parse:function(e){if(e instanceof n.PathArray)return e.valueOf();var t,r={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0};e="string"==typeof e?e.replace(n.regex.numbersWithDots,c).replace(n.regex.pathLetters," $& ").replace(n.regex.hyphen,"$1 -").trim().split(n.regex.delimiter):e.reduce((function(e,t){return[].concat.call(e,t)}),[]);var a=[],o=new n.Point,s=new n.Point,l=0,u=e.length;do{n.regex.isPathLetter.test(e[l])?(t=e[l],++l):"M"==t?t="L":"m"==t&&(t="l"),a.push(i[t].call(null,e.slice(l,l+=r[t.toUpperCase()]).map(parseFloat),o,s))}while(u>l);return a},bbox:function(){return n.parser.draw||n.prepare(),n.parser.path.setAttribute("d",this.toString()),n.parser.path.getBBox()}}),n.Number=n.invent({create:function(e,t){this.value=0,this.unit=t||"","number"==typeof e?this.value=isNaN(e)?0:isFinite(e)?e:e<0?-34e37:34e37:"string"==typeof e?(t=e.match(n.regex.numberAndUnit))&&(this.value=parseFloat(t[1]),"%"==t[5]?this.value/=100:"s"==t[5]&&(this.value*=1e3),this.unit=t[5]):e instanceof n.Number&&(this.value=e.valueOf(),this.unit=e.unit)},extend:{toString:function(){return("%"==this.unit?~~(1e8*this.value)/1e6:"s"==this.unit?this.value/1e3:this.value)+this.unit},toJSON:function(){return this.toString()},valueOf:function(){return this.value},plus:function(e){return e=new n.Number(e),new n.Number(this+e,this.unit||e.unit)},minus:function(e){return e=new n.Number(e),new n.Number(this-e,this.unit||e.unit)},times:function(e){return e=new n.Number(e),new n.Number(this*e,this.unit||e.unit)},divide:function(e){return e=new n.Number(e),new n.Number(this/e,this.unit||e.unit)},to:function(e){var t=new n.Number(this);return"string"==typeof e&&(t.unit=e),t},morph:function(e){return this.destination=new n.Number(e),e.relative&&(this.destination.value+=this.value),this},at:function(e){return this.destination?new n.Number(this.destination).minus(this).times(e).plus(this):this}}}),n.Element=n.invent({create:function(e){this._stroke=n.defaults.attrs.stroke,this._event=null,this.dom={},(this.node=e)&&(this.type=e.nodeName,this.node.instance=this,this._stroke=e.getAttribute("stroke")||this._stroke)},extend:{x:function(e){return this.attr("x",e)},y:function(e){return this.attr("y",e)},cx:function(e){return null==e?this.x()+this.width()/2:this.x(e-this.width()/2)},cy:function(e){return null==e?this.y()+this.height()/2:this.y(e-this.height()/2)},move:function(e,t){return this.x(e).y(t)},center:function(e,t){return this.cx(e).cy(t)},width:function(e){return this.attr("width",e)},height:function(e){return this.attr("height",e)},size:function(e,t){var i=f(this,e,t);return this.width(new n.Number(i.width)).height(new n.Number(i.height))},clone:function(e){this.writeDataToDom();var t=m(this.node.cloneNode(!0));return e?e.add(t):this.after(t),t},remove:function(){return this.parent()&&this.parent().removeElement(this),this},replace:function(e){return this.after(e).remove(),e},addTo:function(e){return e.put(this)},putIn:function(e){return e.add(this)},id:function(e){return this.attr("id",e)},show:function(){return this.style("display","")},hide:function(){return this.style("display","none")},visible:function(){return"none"!=this.style("display")},toString:function(){return this.attr("id")},classes:function(){var e=this.attr("class");return null==e?[]:e.trim().split(n.regex.delimiter)},hasClass:function(e){return-1!=this.classes().indexOf(e)},addClass:function(e){if(!this.hasClass(e)){var t=this.classes();t.push(e),this.attr("class",t.join(" "))}return this},removeClass:function(e){return this.hasClass(e)&&this.attr("class",this.classes().filter((function(t){return t!=e})).join(" ")),this},toggleClass:function(e){return this.hasClass(e)?this.removeClass(e):this.addClass(e)},reference:function(e){return n.get(this.attr(e))},parent:function(t){var i=this;if(!i.node.parentNode)return null;if(i=n.adopt(i.node.parentNode),!t)return i;for(;i&&i.node instanceof e.SVGElement;){if("string"==typeof t?i.matches(t):i instanceof t)return i;if(!i.node.parentNode||"#document"==i.node.parentNode.nodeName)return null;i=n.adopt(i.node.parentNode)}},doc:function(){return this instanceof n.Doc?this:this.parent(n.Doc)},parents:function(e){var t=[],n=this;do{if(!(n=n.parent(e))||!n.node)break;t.push(n)}while(n.parent);return t},matches:function(e){return function(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}(this.node,e)},native:function(){return this.node},svg:function(e){var i=t.createElement("svg");if(!(e&&this instanceof n.Parent))return i.appendChild(e=t.createElement("svg")),this.writeDataToDom(),e.appendChild(this.node.cloneNode(!0)),i.innerHTML.replace(/^<svg>/,"").replace(/<\/svg>$/,"");i.innerHTML="<svg>"+e.replace(/\n/,"").replace(/<([\w:-]+)([^<]+?)\/>/g,"<$1$2></$1>")+"</svg>";for(var r=0,a=i.firstChild.childNodes.length;r<a;r++)this.node.appendChild(i.firstChild.firstChild);return this},writeDataToDom:function(){return(this.each||this.lines)&&(this.each?this:this.lines()).each((function(){this.writeDataToDom()})),this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),this},setData:function(e){return this.dom=e,this},is:function(e){return function(e,t){return e instanceof t}(this,e)}}}),n.easing={"-":function(e){return e},"<>":function(e){return-Math.cos(e*Math.PI)/2+.5},">":function(e){return Math.sin(e*Math.PI/2)},"<":function(e){return 1-Math.cos(e*Math.PI/2)}},n.morph=function(e){return function(t,i){return new n.MorphObj(t,i).at(e)}},n.Situation=n.invent({create:function(e){this.init=!1,this.reversed=!1,this.reversing=!1,this.duration=new n.Number(e.duration).valueOf(),this.delay=new n.Number(e.delay).valueOf(),this.start=+new Date+this.delay,this.finish=this.start+this.duration,this.ease=e.ease,this.loop=0,this.loops=!1,this.animations={},this.attrs={},this.styles={},this.transforms=[],this.once={}}}),n.FX=n.invent({create:function(e){this._target=e,this.situations=[],this.active=!1,this.situation=null,this.paused=!1,this.lastPos=0,this.pos=0,this.absPos=0,this._speed=1},extend:{animate:function(e,t,i){"object"===o(e)&&(t=e.ease,i=e.delay,e=e.duration);var r=new n.Situation({duration:e||1e3,delay:i||0,ease:n.easing[t||"-"]||t});return this.queue(r),this},target:function(e){return e&&e instanceof n.Element?(this._target=e,this):this._target},timeToAbsPos:function(e){return(e-this.situation.start)/(this.situation.duration/this._speed)},absPosToTime:function(e){return this.situation.duration/this._speed*e+this.situation.start},startAnimFrame:function(){this.stopAnimFrame(),this.animationFrame=e.requestAnimationFrame(function(){this.step()}.bind(this))},stopAnimFrame:function(){e.cancelAnimationFrame(this.animationFrame)},start:function(){return!this.active&&this.situation&&(this.active=!0,this.startCurrent()),this},startCurrent:function(){return this.situation.start=+new Date+this.situation.delay/this._speed,this.situation.finish=this.situation.start+this.situation.duration/this._speed,this.initAnimations().step()},queue:function(e){return("function"==typeof e||e instanceof n.Situation)&&this.situations.push(e),this.situation||(this.situation=this.situations.shift()),this},dequeue:function(){return this.stop(),this.situation=this.situations.shift(),this.situation&&(this.situation instanceof n.Situation?this.start():this.situation.call(this)),this},initAnimations:function(){var e,t=this.situation;if(t.init)return this;for(var i in t.animations){e=this.target()[i](),Array.isArray(e)||(e=[e]),Array.isArray(t.animations[i])||(t.animations[i]=[t.animations[i]]);for(var r=e.length;r--;)t.animations[i][r]instanceof n.Number&&(e[r]=new n.Number(e[r])),t.animations[i][r]=e[r].morph(t.animations[i][r])}for(var i in t.attrs)t.attrs[i]=new n.MorphObj(this.target().attr(i),t.attrs[i]);for(var i in t.styles)t.styles[i]=new n.MorphObj(this.target().style(i),t.styles[i]);return t.initialTransformation=this.target().matrixify(),t.init=!0,this},clearQueue:function(){return this.situations=[],this},clearCurrent:function(){return this.situation=null,this},stop:function(e,t){var n=this.active;return this.active=!1,t&&this.clearQueue(),e&&this.situation&&(!n&&this.startCurrent(),this.atEnd()),this.stopAnimFrame(),this.clearCurrent()},after:function(e){var t=this.last();return this.target().on("finished.fx",(function n(i){i.detail.situation==t&&(e.call(this,t),this.off("finished.fx",n))})),this._callStart()},during:function(e){var t=this.last(),i=function(i){i.detail.situation==t&&e.call(this,i.detail.pos,n.morph(i.detail.pos),i.detail.eased,t)};return this.target().off("during.fx",i).on("during.fx",i),this.after((function(){this.off("during.fx",i)})),this._callStart()},afterAll:function(e){var t=function t(n){e.call(this),this.off("allfinished.fx",t)};return this.target().off("allfinished.fx",t).on("allfinished.fx",t),this._callStart()},last:function(){return this.situations.length?this.situations[this.situations.length-1]:this.situation},add:function(e,t,n){return this.last()[n||"animations"][e]=t,this._callStart()},step:function(e){var t,n,i;e||(this.absPos=this.timeToAbsPos(+new Date)),!1!==this.situation.loops?(t=Math.max(this.absPos,0),n=Math.floor(t),!0===this.situation.loops||n<this.situation.loops?(this.pos=t-n,i=this.situation.loop,this.situation.loop=n):(this.absPos=this.situation.loops,this.pos=1,i=this.situation.loop-1,this.situation.loop=this.situation.loops),this.situation.reversing&&(this.situation.reversed=this.situation.reversed!=Boolean((this.situation.loop-i)%2))):(this.absPos=Math.min(this.absPos,1),this.pos=this.absPos),this.pos<0&&(this.pos=0),this.situation.reversed&&(this.pos=1-this.pos);var r=this.situation.ease(this.pos);for(var a in this.situation.once)a>this.lastPos&&a<=r&&(this.situation.once[a].call(this.target(),this.pos,r),delete this.situation.once[a]);return this.active&&this.target().fire("during",{pos:this.pos,eased:r,fx:this,situation:this.situation}),this.situation?(this.eachAt(),1==this.pos&&!this.situation.reversed||this.situation.reversed&&0==this.pos?(this.stopAnimFrame(),this.target().fire("finished",{fx:this,situation:this.situation}),this.situations.length||(this.target().fire("allfinished"),this.situations.length||(this.target().off(".fx"),this.active=!1)),this.active?this.dequeue():this.clearCurrent()):!this.paused&&this.active&&this.startAnimFrame(),this.lastPos=r,this):this},eachAt:function(){var e,t=this,i=this.target(),r=this.situation;for(var a in r.animations)e=[].concat(r.animations[a]).map((function(e){return"string"!=typeof e&&e.at?e.at(r.ease(t.pos),t.pos):e})),i[a].apply(i,e);for(var a in r.attrs)e=[a].concat(r.attrs[a]).map((function(e){return"string"!=typeof e&&e.at?e.at(r.ease(t.pos),t.pos):e})),i.attr.apply(i,e);for(var a in r.styles)e=[a].concat(r.styles[a]).map((function(e){return"string"!=typeof e&&e.at?e.at(r.ease(t.pos),t.pos):e})),i.style.apply(i,e);if(r.transforms.length){e=r.initialTransformation,a=0;for(var o=r.transforms.length;a<o;a++){var s=r.transforms[a];s instanceof n.Matrix?e=s.relative?e.multiply((new n.Matrix).morph(s).at(r.ease(this.pos))):e.morph(s).at(r.ease(this.pos)):(s.relative||s.undo(e.extract()),e=e.multiply(s.at(r.ease(this.pos))))}i.matrix(e)}return this},once:function(e,t,n){var i=this.last();return n||(e=i.ease(e)),i.once[e]=t,this},_callStart:function(){return setTimeout(function(){this.start()}.bind(this),0),this}},parent:n.Element,construct:{animate:function(e,t,i){return(this.fx||(this.fx=new n.FX(this))).animate(e,t,i)},delay:function(e){return(this.fx||(this.fx=new n.FX(this))).delay(e)},stop:function(e,t){return this.fx&&this.fx.stop(e,t),this},finish:function(){return this.fx&&this.fx.finish(),this}}}),n.MorphObj=n.invent({create:function(e,t){return n.Color.isColor(t)?new n.Color(e).morph(t):n.regex.delimiter.test(e)?n.regex.pathLetters.test(e)?new n.PathArray(e).morph(t):new n.Array(e).morph(t):n.regex.numberAndUnit.test(t)?new n.Number(e).morph(t):(this.value=e,void(this.destination=t))},extend:{at:function(e,t){return t<1?this.value:this.destination},valueOf:function(){return this.value}}}),n.extend(n.FX,{attr:function(e,t,n){if("object"===o(e))for(var i in e)this.attr(i,e[i]);else this.add(e,t,"attrs");return this},plot:function(e,t,n,i){return 4==arguments.length?this.plot([e,t,n,i]):this.add("plot",new(this.target().morphArray)(e))}}),n.Box=n.invent({create:function(e,t,i,r){if(!("object"!==o(e)||e instanceof n.Element))return n.Box.call(this,null!=e.left?e.left:e.x,null!=e.top?e.top:e.y,e.width,e.height);4==arguments.length&&(this.x=e,this.y=t,this.width=i,this.height=r),v(this)}}),n.BBox=n.invent({create:function(e){if(n.Box.apply(this,[].slice.call(arguments)),e instanceof n.Element){var i;try{if(!t.documentElement.contains){for(var r=e.node;r.parentNode;)r=r.parentNode;if(r!=t)throw new Error("Element not in the dom")}i=e.node.getBBox()}catch(t){if(e instanceof n.Shape){n.parser.draw||n.prepare();var a=e.clone(n.parser.draw.instance).show();a&&a.node&&"function"==typeof a.node.getBBox&&(i=a.node.getBBox()),a&&"function"==typeof a.remove&&a.remove()}else i={x:e.node.clientLeft,y:e.node.clientTop,width:e.node.clientWidth,height:e.node.clientHeight}}n.Box.call(this,i)}},inherit:n.Box,parent:n.Element,construct:{bbox:function(){return new n.BBox(this)}}}),n.BBox.prototype.constructor=n.BBox,n.Matrix=n.invent({create:function(e){var t=g([1,0,0,1,0,0]);e=null===e?t:e instanceof n.Element?e.matrixify():"string"==typeof e?g(e.split(n.regex.delimiter).map(parseFloat)):6==arguments.length?g([].slice.call(arguments)):Array.isArray(e)?g(e):e&&"object"===o(e)?e:t;for(var i=x.length-1;i>=0;--i)this[x[i]]=null!=e[x[i]]?e[x[i]]:t[x[i]]},extend:{extract:function(){var e=p(this,0,1);p(this,1,0);var t=180/Math.PI*Math.atan2(e.y,e.x)-90;return{x:this.e,y:this.f,transformedX:(this.e*Math.cos(t*Math.PI/180)+this.f*Math.sin(t*Math.PI/180))/Math.sqrt(this.a*this.a+this.b*this.b),transformedY:(this.f*Math.cos(t*Math.PI/180)+this.e*Math.sin(-t*Math.PI/180))/Math.sqrt(this.c*this.c+this.d*this.d),rotation:t,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f,matrix:new n.Matrix(this)}},clone:function(){return new n.Matrix(this)},morph:function(e){return this.destination=new n.Matrix(e),this},multiply:function(e){return new n.Matrix(this.native().multiply(function(e){return e instanceof n.Matrix||(e=new n.Matrix(e)),e}(e).native()))},inverse:function(){return new n.Matrix(this.native().inverse())},translate:function(e,t){return new n.Matrix(this.native().translate(e||0,t||0))},native:function(){for(var e=n.parser.native.createSVGMatrix(),t=x.length-1;t>=0;t--)e[x[t]]=this[x[t]];return e},toString:function(){return"matrix("+b(this.a)+","+b(this.b)+","+b(this.c)+","+b(this.d)+","+b(this.e)+","+b(this.f)+")"}},parent:n.Element,construct:{ctm:function(){return new n.Matrix(this.node.getCTM())},screenCTM:function(){if(this instanceof n.Nested){var e=this.rect(1,1),t=e.node.getScreenCTM();return e.remove(),new n.Matrix(t)}return new n.Matrix(this.node.getScreenCTM())}}}),n.Point=n.invent({create:function(e,t){var n;n=Array.isArray(e)?{x:e[0],y:e[1]}:"object"===o(e)?{x:e.x,y:e.y}:null!=e?{x:e,y:null!=t?t:e}:{x:0,y:0},this.x=n.x,this.y=n.y},extend:{clone:function(){return new n.Point(this)},morph:function(e,t){return this.destination=new n.Point(e,t),this}}}),n.extend(n.Element,{point:function(e,t){return new n.Point(e,t).transform(this.screenCTM().inverse())}}),n.extend(n.Element,{attr:function(e,t,i){if(null==e){for(e={},i=(t=this.node.attributes).length-1;i>=0;i--)e[t[i].nodeName]=n.regex.isNumber.test(t[i].nodeValue)?parseFloat(t[i].nodeValue):t[i].nodeValue;return e}if("object"===o(e))for(var r in e)this.attr(r,e[r]);else if(null===t)this.node.removeAttribute(e);else{if(null==t)return null==(t=this.node.getAttribute(e))?n.defaults.attrs[e]:n.regex.isNumber.test(t)?parseFloat(t):t;"stroke-width"==e?this.attr("stroke",parseFloat(t)>0?this._stroke:null):"stroke"==e&&(this._stroke=t),"fill"!=e&&"stroke"!=e||(n.regex.isImage.test(t)&&(t=this.doc().defs().image(t,0,0)),t instanceof n.Image&&(t=this.doc().defs().pattern(0,0,(function(){this.add(t)})))),"number"==typeof t?t=new n.Number(t):n.Color.isColor(t)?t=new n.Color(t):Array.isArray(t)&&(t=new n.Array(t)),"leading"==e?this.leading&&this.leading(t):"string"==typeof i?this.node.setAttributeNS(i,e,t.toString()):this.node.setAttribute(e,t.toString()),!this.rebuild||"font-size"!=e&&"x"!=e||this.rebuild(e,t)}return this}}),n.extend(n.Element,{transform:function(e,t){var i;return"object"!==o(e)?(i=new n.Matrix(this).extract(),"string"==typeof e?i[e]:i):(i=new n.Matrix(this),t=!!t||!!e.relative,null!=e.a&&(i=t?i.multiply(new n.Matrix(e)):new n.Matrix(e)),this.attr("transform",i))}}),n.extend(n.Element,{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(n.regex.transforms).slice(0,-1).map((function(e){var t=e.trim().split("(");return[t[0],t[1].split(n.regex.delimiter).map((function(e){return parseFloat(e)}))]})).reduce((function(e,t){return"matrix"==t[0]?e.multiply(g(t[1])):e[t[0]].apply(e,t[1])}),new n.Matrix)},toParent:function(e){if(this==e)return this;var t=this.screenCTM(),n=e.screenCTM().inverse();return this.addTo(e).untransform().transform(n.multiply(t)),this},toDoc:function(){return this.toParent(this.doc())}}),n.Transformation=n.invent({create:function(e,t){if(arguments.length>1&&"boolean"!=typeof t)return this.constructor.call(this,[].slice.call(arguments));if(Array.isArray(e))for(var n=0,i=this.arguments.length;n<i;++n)this[this.arguments[n]]=e[n];else if(e&&"object"===o(e))for(n=0,i=this.arguments.length;n<i;++n)this[this.arguments[n]]=e[this.arguments[n]];this.inversed=!1,!0===t&&(this.inversed=!0)}}),n.Translate=n.invent({parent:n.Matrix,inherit:n.Transformation,create:function(e,t){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["transformedX","transformedY"],method:"translate"}}),n.extend(n.Element,{style:function(e,t){if(0==arguments.length)return this.node.style.cssText||"";if(arguments.length<2)if("object"===o(e))for(var i in e)this.style(i,e[i]);else{if(!n.regex.isCss.test(e))return this.node.style[u(e)];for(e=e.split(/\s*;\s*/).filter((function(e){return!!e})).map((function(e){return e.split(/\s*:\s*/)}));t=e.pop();)this.style(t[0],t[1])}else this.node.style[u(e)]=null===t||n.regex.isBlank.test(t)?"":t;return this}}),n.Parent=n.invent({create:function(e){this.constructor.call(this,e)},inherit:n.Element,extend:{children:function(){return n.utils.map(n.utils.filterSVGElements(this.node.childNodes),(function(e){return n.adopt(e)}))},add:function(e,t){return null==t?this.node.appendChild(e.node):e.node!=this.node.childNodes[t]&&this.node.insertBefore(e.node,this.node.childNodes[t]),this},put:function(e,t){return this.add(e,t),e},has:function(e){return this.index(e)>=0},index:function(e){return[].slice.call(this.node.childNodes).indexOf(e.node)},get:function(e){return n.adopt(this.node.childNodes[e])},first:function(){return this.get(0)},last:function(){return this.get(this.node.childNodes.length-1)},each:function(e,t){for(var i=this.children(),r=0,a=i.length;r<a;r++)i[r]instanceof n.Element&&e.apply(i[r],[r,i]),t&&i[r]instanceof n.Container&&i[r].each(e,t);return this},removeElement:function(e){return this.node.removeChild(e.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,this},defs:function(){return this.doc().defs()}}}),n.extend(n.Parent,{ungroup:function(e,t){return 0===t||this instanceof n.Defs||this.node==n.parser.draw||(e=e||(this instanceof n.Doc?this:this.parent(n.Parent)),t=t||1/0,this.each((function(){return this instanceof n.Defs?this:this instanceof n.Parent?this.ungroup(e,t-1):this.toParent(e)})),this.node.firstChild||this.remove()),this},flatten:function(e,t){return this.ungroup(e,t)}}),n.Container=n.invent({create:function(e){this.constructor.call(this,e)},inherit:n.Parent}),n.ViewBox=n.invent({parent:n.Container,construct:{}}),["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","touchstart","touchmove","touchleave","touchend","touchcancel"].forEach((function(e){n.Element.prototype[e]=function(t){return n.on(this.node,e,t),this}})),n.listeners=[],n.handlerMap=[],n.listenerId=0,n.on=function(e,t,i,r,a){var o=i.bind(r||e.instance||e),s=(n.handlerMap.indexOf(e)+1||n.handlerMap.push(e))-1,l=t.split(".")[0],c=t.split(".")[1]||"*";n.listeners[s]=n.listeners[s]||{},n.listeners[s][l]=n.listeners[s][l]||{},n.listeners[s][l][c]=n.listeners[s][l][c]||{},i._svgjsListenerId||(i._svgjsListenerId=++n.listenerId),n.listeners[s][l][c][i._svgjsListenerId]=o,e.addEventListener(l,o,a||{passive:!0})},n.off=function(e,t,i){var r=n.handlerMap.indexOf(e),a=t&&t.split(".")[0],o=t&&t.split(".")[1],s="";if(-1!=r)if(i){if("function"==typeof i&&(i=i._svgjsListenerId),!i)return;n.listeners[r][a]&&n.listeners[r][a][o||"*"]&&(e.removeEventListener(a,n.listeners[r][a][o||"*"][i],!1),delete n.listeners[r][a][o||"*"][i])}else if(o&&a){if(n.listeners[r][a]&&n.listeners[r][a][o]){for(var l in n.listeners[r][a][o])n.off(e,[a,o].join("."),l);delete n.listeners[r][a][o]}}else if(o)for(var c in n.listeners[r])for(var s in n.listeners[r][c])o===s&&n.off(e,[c,o].join("."));else if(a){if(n.listeners[r][a]){for(var s in n.listeners[r][a])n.off(e,[a,s].join("."));delete n.listeners[r][a]}}else{for(var c in n.listeners[r])n.off(e,c);delete n.listeners[r],delete n.handlerMap[r]}},n.extend(n.Element,{on:function(e,t,i,r){return n.on(this.node,e,t,i,r),this},off:function(e,t){return n.off(this.node,e,t),this},fire:function(t,i){return t instanceof e.Event?this.node.dispatchEvent(t):this.node.dispatchEvent(t=new n.CustomEvent(t,{detail:i,cancelable:!0})),this._event=t,this},event:function(){return this._event}}),n.Defs=n.invent({create:"defs",inherit:n.Container}),n.G=n.invent({create:"g",inherit:n.Container,extend:{x:function(e){return null==e?this.transform("x"):this.transform({x:e-this.x()},!0)}},construct:{group:function(){return this.put(new n.G)}}}),n.Doc=n.invent({create:function(e){e&&("svg"==(e="string"==typeof e?t.getElementById(e):e).nodeName?this.constructor.call(this,e):(this.constructor.call(this,n.create("svg")),e.appendChild(this.node),this.size("100%","100%")),this.namespace().defs())},inherit:n.Container,extend:{namespace:function(){return this.attr({xmlns:n.ns,version:"1.1"}).attr("xmlns:xlink",n.xlink,n.xmlns).attr("xmlns:svgjs",n.svgjs,n.xmlns)},defs:function(){var e;return this._defs||((e=this.node.getElementsByTagName("defs")[0])?this._defs=n.adopt(e):this._defs=new n.Defs,this.node.appendChild(this._defs.node)),this._defs},parent:function(){return this.node.parentNode&&"#document"!=this.node.parentNode.nodeName?this.node.parentNode:null},remove:function(){return this.parent()&&this.parent().removeChild(this.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,n.parser.draw&&!n.parser.draw.parentNode&&this.node.appendChild(n.parser.draw),this},clone:function(e){this.writeDataToDom();var t=this.node,n=m(t.cloneNode(!0));return e?(e.node||e).appendChild(n.node):t.parentNode.insertBefore(n.node,t.nextSibling),n}}}),n.extend(n.Element,{}),n.Gradient=n.invent({create:function(e){this.constructor.call(this,n.create(e+"Gradient")),this.type=e},inherit:n.Container,extend:{at:function(e,t,i){return this.put(new n.Stop).update(e,t,i)},update:function(e){return this.clear(),"function"==typeof e&&e.call(this,this),this},fill:function(){return"url(#"+this.id()+")"},toString:function(){return this.fill()},attr:function(e,t,i){return"transform"==e&&(e="gradientTransform"),n.Container.prototype.attr.call(this,e,t,i)}},construct:{gradient:function(e,t){return this.defs().gradient(e,t)}}}),n.extend(n.Gradient,n.FX,{from:function(e,t){return"radial"==(this._target||this).type?this.attr({fx:new n.Number(e),fy:new n.Number(t)}):this.attr({x1:new n.Number(e),y1:new n.Number(t)})},to:function(e,t){return"radial"==(this._target||this).type?this.attr({cx:new n.Number(e),cy:new n.Number(t)}):this.attr({x2:new n.Number(e),y2:new n.Number(t)})}}),n.extend(n.Defs,{gradient:function(e,t){return this.put(new n.Gradient(e)).update(t)}}),n.Stop=n.invent({create:"stop",inherit:n.Element,extend:{update:function(e){return("number"==typeof e||e instanceof n.Number)&&(e={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=e.opacity&&this.attr("stop-opacity",e.opacity),null!=e.color&&this.attr("stop-color",e.color),null!=e.offset&&this.attr("offset",new n.Number(e.offset)),this}}}),n.Pattern=n.invent({create:"pattern",inherit:n.Container,extend:{fill:function(){return"url(#"+this.id()+")"},update:function(e){return this.clear(),"function"==typeof e&&e.call(this,this),this},toString:function(){return this.fill()},attr:function(e,t,i){return"transform"==e&&(e="patternTransform"),n.Container.prototype.attr.call(this,e,t,i)}},construct:{pattern:function(e,t,n){return this.defs().pattern(e,t,n)}}}),n.extend(n.Defs,{pattern:function(e,t,i){return this.put(new n.Pattern).update(i).attr({x:0,y:0,width:e,height:t,patternUnits:"userSpaceOnUse"})}}),n.Shape=n.invent({create:function(e){this.constructor.call(this,e)},inherit:n.Element}),n.Symbol=n.invent({create:"symbol",inherit:n.Container,construct:{symbol:function(){return this.put(new n.Symbol)}}}),n.Use=n.invent({create:"use",inherit:n.Shape,extend:{element:function(e,t){return this.attr("href",(t||"")+"#"+e,n.xlink)}},construct:{use:function(e,t){return this.put(new n.Use).element(e,t)}}}),n.Rect=n.invent({create:"rect",inherit:n.Shape,construct:{rect:function(e,t){return this.put(new n.Rect).size(e,t)}}}),n.Circle=n.invent({create:"circle",inherit:n.Shape,construct:{circle:function(e){return this.put(new n.Circle).rx(new n.Number(e).divide(2)).move(0,0)}}}),n.extend(n.Circle,n.FX,{rx:function(e){return this.attr("r",e)},ry:function(e){return this.rx(e)}}),n.Ellipse=n.invent({create:"ellipse",inherit:n.Shape,construct:{ellipse:function(e,t){return this.put(new n.Ellipse).size(e,t).move(0,0)}}}),n.extend(n.Ellipse,n.Rect,n.FX,{rx:function(e){return this.attr("rx",e)},ry:function(e){return this.attr("ry",e)}}),n.extend(n.Circle,n.Ellipse,{x:function(e){return null==e?this.cx()-this.rx():this.cx(e+this.rx())},y:function(e){return null==e?this.cy()-this.ry():this.cy(e+this.ry())},cx:function(e){return null==e?this.attr("cx"):this.attr("cx",e)},cy:function(e){return null==e?this.attr("cy"):this.attr("cy",e)},width:function(e){return null==e?2*this.rx():this.rx(new n.Number(e).divide(2))},height:function(e){return null==e?2*this.ry():this.ry(new n.Number(e).divide(2))},size:function(e,t){var i=f(this,e,t);return this.rx(new n.Number(i.width).divide(2)).ry(new n.Number(i.height).divide(2))}}),n.Line=n.invent({create:"line",inherit:n.Shape,extend:{array:function(){return new n.PointArray([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])},plot:function(e,t,i,r){return null==e?this.array():(e=void 0!==t?{x1:e,y1:t,x2:i,y2:r}:new n.PointArray(e).toLine(),this.attr(e))},move:function(e,t){return this.attr(this.array().move(e,t).toLine())},size:function(e,t){var n=f(this,e,t);return this.attr(this.array().size(n.width,n.height).toLine())}},construct:{line:function(e,t,i,r){return n.Line.prototype.plot.apply(this.put(new n.Line),null!=e?[e,t,i,r]:[0,0,0,0])}}}),n.Polyline=n.invent({create:"polyline",inherit:n.Shape,construct:{polyline:function(e){return this.put(new n.Polyline).plot(e||new n.PointArray)}}}),n.Polygon=n.invent({create:"polygon",inherit:n.Shape,construct:{polygon:function(e){return this.put(new n.Polygon).plot(e||new n.PointArray)}}}),n.extend(n.Polyline,n.Polygon,{array:function(){return this._array||(this._array=new n.PointArray(this.attr("points")))},plot:function(e){return null==e?this.array():this.clear().attr("points","string"==typeof e?e:this._array=new n.PointArray(e))},clear:function(){return delete this._array,this},move:function(e,t){return this.attr("points",this.array().move(e,t))},size:function(e,t){var n=f(this,e,t);return this.attr("points",this.array().size(n.width,n.height))}}),n.extend(n.Line,n.Polyline,n.Polygon,{morphArray:n.PointArray,x:function(e){return null==e?this.bbox().x:this.move(e,this.bbox().y)},y:function(e){return null==e?this.bbox().y:this.move(this.bbox().x,e)},width:function(e){var t=this.bbox();return null==e?t.width:this.size(e,t.height)},height:function(e){var t=this.bbox();return null==e?t.height:this.size(t.width,e)}}),n.Path=n.invent({create:"path",inherit:n.Shape,extend:{morphArray:n.PathArray,array:function(){return this._array||(this._array=new n.PathArray(this.attr("d")))},plot:function(e){return null==e?this.array():this.clear().attr("d","string"==typeof e?e:this._array=new n.PathArray(e))},clear:function(){return delete this._array,this}},construct:{path:function(e){return this.put(new n.Path).plot(e||new n.PathArray)}}}),n.Image=n.invent({create:"image",inherit:n.Shape,extend:{load:function(t){if(!t)return this;var i=this,r=new e.Image;return n.on(r,"load",(function(){n.off(r);var e=i.parent(n.Pattern);null!==e&&(0==i.width()&&0==i.height()&&i.size(r.width,r.height),e&&0==e.width()&&0==e.height()&&e.size(i.width(),i.height()),"function"==typeof i._loaded&&i._loaded.call(i,{width:r.width,height:r.height,ratio:r.width/r.height,url:t}))})),n.on(r,"error",(function(e){n.off(r),"function"==typeof i._error&&i._error.call(i,e)})),this.attr("href",r.src=this.src=t,n.xlink)},loaded:function(e){return this._loaded=e,this},error:function(e){return this._error=e,this}},construct:{image:function(e,t,i){return this.put(new n.Image).load(e).size(t||0,i||t||0)}}}),n.Text=n.invent({create:function(){this.constructor.call(this,n.create("text")),this.dom.leading=new n.Number(1.3),this._rebuild=!0,this._build=!1,this.attr("font-family",n.defaults.attrs["font-family"])},inherit:n.Shape,extend:{x:function(e){return null==e?this.attr("x"):this.attr("x",e)},text:function(e){if(void 0===e){e="";for(var t=this.node.childNodes,i=0,r=t.length;i<r;++i)0!=i&&3!=t[i].nodeType&&1==n.adopt(t[i]).dom.newLined&&(e+="\n"),e+=t[i].textContent;return e}if(this.clear().build(!0),"function"==typeof e)e.call(this,this);else{i=0;for(var a=(e=e.split("\n")).length;i<a;i++)this.tspan(e[i]).newLine()}return this.build(!1).rebuild()},size:function(e){return this.attr("font-size",e).rebuild()},leading:function(e){return null==e?this.dom.leading:(this.dom.leading=new n.Number(e),this.rebuild())},lines:function(){var e=(this.textPath&&this.textPath()||this).node,t=n.utils.map(n.utils.filterSVGElements(e.childNodes),(function(e){return n.adopt(e)}));return new n.Set(t)},rebuild:function(e){if("boolean"==typeof e&&(this._rebuild=e),this._rebuild){var t=this,i=0,r=this.dom.leading*new n.Number(this.attr("font-size"));this.lines().each((function(){this.dom.newLined&&(t.textPath()||this.attr("x",t.attr("x")),"\n"==this.text()?i+=r:(this.attr("dy",r+i),i=0))})),this.fire("rebuild")}return this},build:function(e){return this._build=!!e,this},setData:function(e){return this.dom=e,this.dom.leading=new n.Number(e.leading||1.3),this}},construct:{text:function(e){return this.put(new n.Text).text(e)},plain:function(e){return this.put(new n.Text).plain(e)}}}),n.Tspan=n.invent({create:"tspan",inherit:n.Shape,extend:{text:function(e){return null==e?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof e?e.call(this,this):this.plain(e),this)},dx:function(e){return this.attr("dx",e)},dy:function(e){return this.attr("dy",e)},newLine:function(){var e=this.parent(n.Text);return this.dom.newLined=!0,this.dy(e.dom.leading*e.attr("font-size")).attr("x",e.x())}}}),n.extend(n.Text,n.Tspan,{plain:function(e){return!1===this._build&&this.clear(),this.node.appendChild(t.createTextNode(e)),this},tspan:function(e){var t=(this.textPath&&this.textPath()||this).node,i=new n.Tspan;return!1===this._build&&this.clear(),t.appendChild(i.node),i.text(e)},clear:function(){for(var e=(this.textPath&&this.textPath()||this).node;e.hasChildNodes();)e.removeChild(e.lastChild);return this},length:function(){return this.node.getComputedTextLength()}}),n.TextPath=n.invent({create:"textPath",inherit:n.Parent,parent:n.Text,construct:{morphArray:n.PathArray,array:function(){var e=this.track();return e?e.array():null},plot:function(e){var t=this.track(),n=null;return t&&(n=t.plot(e)),null==e?n:this},track:function(){var e=this.textPath();if(e)return e.reference("href")},textPath:function(){if(this.node.firstChild&&"textPath"==this.node.firstChild.nodeName)return n.adopt(this.node.firstChild)}}}),n.Nested=n.invent({create:function(){this.constructor.call(this,n.create("svg")),this.style("overflow","visible")},inherit:n.Container,construct:{nested:function(){return this.put(new n.Nested)}}});var l={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(e,t){return"color"==t?e:e+"-"+t}};function c(e,t,i,r){return i+r.replace(n.regex.dots," .")}function u(e){return e.toLowerCase().replace(/-(.)/g,(function(e,t){return t.toUpperCase()}))}function h(e){return e.charAt(0).toUpperCase()+e.slice(1)}function d(e){var t=e.toString(16);return 1==t.length?"0"+t:t}function f(e,t,n){if(null==t||null==n){var i=e.bbox();null==t?t=i.width/i.height*n:null==n&&(n=i.height/i.width*t)}return{width:t,height:n}}function p(e,t,n){return{x:t*e.a+n*e.c+0,y:t*e.b+n*e.d+0}}function g(e){return{a:e[0],b:e[1],c:e[2],d:e[3],e:e[4],f:e[5]}}function m(t){for(var i=t.childNodes.length-1;i>=0;i--)t.childNodes[i]instanceof e.SVGElement&&m(t.childNodes[i]);return n.adopt(t).id(n.eid(t.nodeName))}function v(e){return null==e.x&&(e.x=0,e.y=0,e.width=0,e.height=0),e.w=e.width,e.h=e.height,e.x2=e.x+e.width,e.y2=e.y+e.height,e.cx=e.x+e.width/2,e.cy=e.y+e.height/2,e}function b(e){return Math.abs(e)>1e-37?e:0}["fill","stroke"].forEach((function(e){var t={};t[e]=function(t){if(void 0===t)return this;if("string"==typeof t||n.Color.isRgb(t)||t&&"function"==typeof t.fill)this.attr(e,t);else for(var i=l[e].length-1;i>=0;i--)null!=t[l[e][i]]&&this.attr(l.prefix(e,l[e][i]),t[l[e][i]]);return this},n.extend(n.Element,n.FX,t)})),n.extend(n.Element,n.FX,{translate:function(e,t){return this.transform({x:e,y:t})},matrix:function(e){return this.attr("transform",new n.Matrix(6==arguments.length?[].slice.call(arguments):e))},opacity:function(e){return this.attr("opacity",e)},dx:function(e){return this.x(new n.Number(e).plus(this instanceof n.FX?0:this.x()),!0)},dy:function(e){return this.y(new n.Number(e).plus(this instanceof n.FX?0:this.y()),!0)}}),n.extend(n.Path,{length:function(){return this.node.getTotalLength()},pointAt:function(e){return this.node.getPointAtLength(e)}}),n.Set=n.invent({create:function(e){Array.isArray(e)?this.members=e:this.clear()},extend:{add:function(){for(var e=[].slice.call(arguments),t=0,n=e.length;t<n;t++)this.members.push(e[t]);return this},remove:function(e){var t=this.index(e);return t>-1&&this.members.splice(t,1),this},each:function(e){for(var t=0,n=this.members.length;t<n;t++)e.apply(this.members[t],[t,this.members]);return this},clear:function(){return this.members=[],this},length:function(){return this.members.length},has:function(e){return this.index(e)>=0},index:function(e){return this.members.indexOf(e)},get:function(e){return this.members[e]},first:function(){return this.get(0)},last:function(){return this.get(this.members.length-1)},valueOf:function(){return this.members}},construct:{set:function(e){return new n.Set(e)}}}),n.FX.Set=n.invent({create:function(e){this.set=e}}),n.Set.inherit=function(){var e=[];for(var t in n.Shape.prototype)"function"==typeof n.Shape.prototype[t]&&"function"!=typeof n.Set.prototype[t]&&e.push(t);for(var t in e.forEach((function(e){n.Set.prototype[e]=function(){for(var t=0,i=this.members.length;t<i;t++)this.members[t]&&"function"==typeof this.members[t][e]&&this.members[t][e].apply(this.members[t],arguments);return"animate"==e?this.fx||(this.fx=new n.FX.Set(this)):this}})),e=[],n.FX.prototype)"function"==typeof n.FX.prototype[t]&&"function"!=typeof n.FX.Set.prototype[t]&&e.push(t);e.forEach((function(e){n.FX.Set.prototype[e]=function(){for(var t=0,n=this.set.members.length;t<n;t++)this.set.members[t].fx[e].apply(this.set.members[t].fx,arguments);return this}}))},n.extend(n.Element,{}),n.extend(n.Element,{remember:function(e,t){if("object"===o(arguments[0]))for(var n in e)this.remember(n,e[n]);else{if(1==arguments.length)return this.memory()[e];this.memory()[e]=t}return this},forget:function(){if(0==arguments.length)this._memory={};else for(var e=arguments.length-1;e>=0;e--)delete this.memory()[arguments[e]];return this},memory:function(){return this._memory||(this._memory={})}}),n.get=function(e){var i=t.getElementById(function(e){var t=(e||"").toString().match(n.regex.reference);if(t)return t[1]}(e)||e);return n.adopt(i)},n.select=function(e,i){return new n.Set(n.utils.map((i||t).querySelectorAll(e),(function(e){return n.adopt(e)})))},n.extend(n.Parent,{select:function(e){return n.select(e,this.node)}});var x="abcdef".split("");if("function"!=typeof e.CustomEvent){var y=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var i=t.createEvent("CustomEvent");return i.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),i};y.prototype=e.Event.prototype,n.CustomEvent=y}else n.CustomEvent=e.CustomEvent;return n},void 0!==(i=function(){return Oe(Ie,Ie.document)}.call(t,n,t,e))&&(e.exports=i),function(){SVG.Filter=SVG.invent({create:"filter",inherit:SVG.Parent,extend:{source:"SourceGraphic",sourceAlpha:"SourceAlpha",background:"BackgroundImage",backgroundAlpha:"BackgroundAlpha",fill:"FillPaint",stroke:"StrokePaint",autoSetIn:!0,put:function(e,t){return this.add(e,t),!e.attr("in")&&this.autoSetIn&&e.attr("in",this.source),e.attr("result")||e.attr("result",e),e},blend:function(e,t,n){return this.put(new SVG.BlendEffect(e,t,n))},colorMatrix:function(e,t){return this.put(new SVG.ColorMatrixEffect(e,t))},convolveMatrix:function(e){return this.put(new SVG.ConvolveMatrixEffect(e))},componentTransfer:function(e){return this.put(new SVG.ComponentTransferEffect(e))},composite:function(e,t,n){return this.put(new SVG.CompositeEffect(e,t,n))},flood:function(e,t){return this.put(new SVG.FloodEffect(e,t))},offset:function(e,t){return this.put(new SVG.OffsetEffect(e,t))},image:function(e){return this.put(new SVG.ImageEffect(e))},merge:function(){var e=[void 0];for(var t in arguments)e.push(arguments[t]);return this.put(new(SVG.MergeEffect.bind.apply(SVG.MergeEffect,e)))},gaussianBlur:function(e,t){return this.put(new SVG.GaussianBlurEffect(e,t))},morphology:function(e,t){return this.put(new SVG.MorphologyEffect(e,t))},diffuseLighting:function(e,t,n){return this.put(new SVG.DiffuseLightingEffect(e,t,n))},displacementMap:function(e,t,n,i,r){return this.put(new SVG.DisplacementMapEffect(e,t,n,i,r))},specularLighting:function(e,t,n,i){return this.put(new SVG.SpecularLightingEffect(e,t,n,i))},tile:function(){return this.put(new SVG.TileEffect)},turbulence:function(e,t,n,i,r){return this.put(new SVG.TurbulenceEffect(e,t,n,i,r))},toString:function(){return"url(#"+this.attr("id")+")"}}}),SVG.extend(SVG.Defs,{filter:function(e){var t=this.put(new SVG.Filter);return"function"==typeof e&&e.call(t,t),t}}),SVG.extend(SVG.Container,{filter:function(e){return this.defs().filter(e)}}),SVG.extend(SVG.Element,SVG.G,SVG.Nested,{filter:function(e){return this.filterer=e instanceof SVG.Element?e:this.doc().filter(e),this.doc()&&this.filterer.doc()!==this.doc()&&this.doc().defs().add(this.filterer),this.attr("filter",this.filterer),this.filterer},unfilter:function(e){return this.filterer&&!0===e&&this.filterer.remove(),delete this.filterer,this.attr("filter",null)}}),SVG.Effect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Element,extend:{in:function(e){return null==e?this.parent()&&this.parent().select('[result="'+this.attr("in")+'"]').get(0)||this.attr("in"):this.attr("in",e)},result:function(e){return null==e?this.attr("result"):this.attr("result",e)},toString:function(){return this.result()}}}),SVG.ParentEffect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Parent,extend:{in:function(e){return null==e?this.parent()&&this.parent().select('[result="'+this.attr("in")+'"]').get(0)||this.attr("in"):this.attr("in",e)},result:function(e){return null==e?this.attr("result"):this.attr("result",e)},toString:function(){return this.result()}}});var e={blend:function(e,t){return this.parent()&&this.parent().blend(this,e,t)},colorMatrix:function(e,t){return this.parent()&&this.parent().colorMatrix(e,t).in(this)},convolveMatrix:function(e){return this.parent()&&this.parent().convolveMatrix(e).in(this)},componentTransfer:function(e){return this.parent()&&this.parent().componentTransfer(e).in(this)},composite:function(e,t){return this.parent()&&this.parent().composite(this,e,t)},flood:function(e,t){return this.parent()&&this.parent().flood(e,t)},offset:function(e,t){return this.parent()&&this.parent().offset(e,t).in(this)},image:function(e){return this.parent()&&this.parent().image(e)},merge:function(){return this.parent()&&this.parent().merge.apply(this.parent(),[this].concat(arguments))},gaussianBlur:function(e,t){return this.parent()&&this.parent().gaussianBlur(e,t).in(this)},morphology:function(e,t){return this.parent()&&this.parent().morphology(e,t).in(this)},diffuseLighting:function(e,t,n){return this.parent()&&this.parent().diffuseLighting(e,t,n).in(this)},displacementMap:function(e,t,n,i){return this.parent()&&this.parent().displacementMap(this,e,t,n,i)},specularLighting:function(e,t,n,i){return this.parent()&&this.parent().specularLighting(e,t,n,i).in(this)},tile:function(){return this.parent()&&this.parent().tile().in(this)},turbulence:function(e,t,n,i,r){return this.parent()&&this.parent().turbulence(e,t,n,i,r).in(this)}};SVG.extend(SVG.Effect,e),SVG.extend(SVG.ParentEffect,e),SVG.ChildEffect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Element,extend:{in:function(e){this.attr("in",e)}}});var t={blend:function(e,t,n){this.attr({in:e,in2:t,mode:n||"normal"})},colorMatrix:function(e,t){"matrix"==e&&(t=r(t)),this.attr({type:e,values:void 0===t?null:t})},convolveMatrix:function(e){e=r(e),this.attr({order:Math.sqrt(e.split(" ").length),kernelMatrix:e})},composite:function(e,t,n){this.attr({in:e,in2:t,operator:n})},flood:function(e,t){this.attr("flood-color",e),null!=t&&this.attr("flood-opacity",t)},offset:function(e,t){this.attr({dx:e,dy:t})},image:function(e){this.attr("href",e,SVG.xlink)},displacementMap:function(e,t,n,i,r){this.attr({in:e,in2:t,scale:n,xChannelSelector:i,yChannelSelector:r})},gaussianBlur:function(e,t){null!=e||null!=t?this.attr("stdDeviation",a(Array.prototype.slice.call(arguments))):this.attr("stdDeviation","0 0")},morphology:function(e,t){this.attr({operator:e,radius:t})},tile:function(){},turbulence:function(e,t,n,i,r){this.attr({numOctaves:t,seed:n,stitchTiles:i,baseFrequency:e,type:r})}},n={merge:function(){var e;if(arguments[0]instanceof SVG.Set){var t=this;arguments[0].each((function(e){this instanceof SVG.MergeNode?t.put(this):(this instanceof SVG.Effect||this instanceof SVG.ParentEffect)&&t.put(new SVG.MergeNode(this))}))}else{e=Array.isArray(arguments[0])?arguments[0]:arguments;for(var n=0;n<e.length;n++)e[n]instanceof SVG.MergeNode?this.put(e[n]):this.put(new SVG.MergeNode(e[n]))}},componentTransfer:function(e){if(this.rgb=new SVG.Set,["r","g","b","a"].forEach(function(e){this[e]=new(SVG["Func"+e.toUpperCase()])("identity"),this.rgb.add(this[e]),this.node.appendChild(this[e].node)}.bind(this)),e)for(var t in e.rgb&&(["r","g","b"].forEach(function(t){this[t].attr(e.rgb)}.bind(this)),delete e.rgb),e)this[t].attr(e[t])},diffuseLighting:function(e,t,n){this.attr({surfaceScale:e,diffuseConstant:t,kernelUnitLength:n})},specularLighting:function(e,t,n,i){this.attr({surfaceScale:e,diffuseConstant:t,specularExponent:n,kernelUnitLength:i})}},i={distantLight:function(e,t){this.attr({azimuth:e,elevation:t})},pointLight:function(e,t,n){this.attr({x:e,y:t,z:n})},spotLight:function(e,t,n,i,r,a){this.attr({x:e,y:t,z:n,pointsAtX:i,pointsAtY:r,pointsAtZ:a})},mergeNode:function(e){this.attr("in",e)}};function r(e){return Array.isArray(e)&&(e=new SVG.Array(e)),e.toString().replace(/^\s+/,"").replace(/\s+$/,"").replace(/\s+/g," ")}function a(e){if(!Array.isArray(e))return e;for(var t=0,n=e.length,i=[];t<n;t++)i.push(e[t]);return i.join(" ")}function o(){var e=function(){};for(var t in"function"==typeof arguments[arguments.length-1]&&(e=arguments[arguments.length-1],Array.prototype.splice.call(arguments,arguments.length-1,1)),arguments)for(var n in arguments[t])e(arguments[t][n],n,arguments[t])}["r","g","b","a"].forEach((function(e){i["Func"+e.toUpperCase()]=function(e){switch(this.attr("type",e),e){case"table":this.attr("tableValues",arguments[1]);break;case"linear":this.attr("slope",arguments[1]),this.attr("intercept",arguments[2]);break;case"gamma":this.attr("amplitude",arguments[1]),this.attr("exponent",arguments[2]),this.attr("offset",arguments[2])}}})),o(t,(function(e,t){var n=t.charAt(0).toUpperCase()+t.slice(1);SVG[n+"Effect"]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+n)),e.apply(this,arguments),this.result(this.attr("id")+"Out")},inherit:SVG.Effect,extend:{}})})),o(n,(function(e,t){var n=t.charAt(0).toUpperCase()+t.slice(1);SVG[n+"Effect"]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+n)),e.apply(this,arguments),this.result(this.attr("id")+"Out")},inherit:SVG.ParentEffect,extend:{}})})),o(i,(function(e,t){var n=t.charAt(0).toUpperCase()+t.slice(1);SVG[n]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+n)),e.apply(this,arguments)},inherit:SVG.ChildEffect,extend:{}})})),SVG.extend(SVG.MergeEffect,{in:function(e){return e instanceof SVG.MergeNode?this.add(e,0):this.add(new SVG.MergeNode(e),0),this}}),SVG.extend(SVG.CompositeEffect,SVG.BlendEffect,SVG.DisplacementMapEffect,{in2:function(e){return null==e?this.parent()&&this.parent().select('[result="'+this.attr("in2")+'"]').get(0)||this.attr("in2"):this.attr("in2",e)}}),SVG.filter={sepiatone:[.343,.669,.119,0,0,.249,.626,.13,0,0,.172,.334,.111,0,0,0,0,0,1,0]}}.call(void 0),function(){function e(e,r,a,o,s,l,c){for(var u=e.slice(r,a||c),h=o.slice(s,l||c),d=0,f={pos:[0,0],start:[0,0]},p={pos:[0,0],start:[0,0]};u[d]=t.call(f,u[d]),h[d]=t.call(p,h[d]),u[d][0]!=h[d][0]||"M"==u[d][0]||"A"==u[d][0]&&(u[d][4]!=h[d][4]||u[d][5]!=h[d][5])?(Array.prototype.splice.apply(u,[d,1].concat(i.call(f,u[d]))),Array.prototype.splice.apply(h,[d,1].concat(i.call(p,h[d])))):(u[d]=n.call(f,u[d]),h[d]=n.call(p,h[d])),++d!=u.length||d!=h.length;)d==u.length&&u.push(["C",f.pos[0],f.pos[1],f.pos[0],f.pos[1],f.pos[0],f.pos[1]]),d==h.length&&h.push(["C",p.pos[0],p.pos[1],p.pos[0],p.pos[1],p.pos[0],p.pos[1]]);return{start:u,dest:h}}function t(e){switch(e[0]){case"z":case"Z":e[0]="L",e[1]=this.start[0],e[2]=this.start[1];break;case"H":e[0]="L",e[2]=this.pos[1];break;case"V":e[0]="L",e[2]=e[1],e[1]=this.pos[0];break;case"T":e[0]="Q",e[3]=e[1],e[4]=e[2],e[1]=this.reflection[1],e[2]=this.reflection[0];break;case"S":e[0]="C",e[6]=e[4],e[5]=e[3],e[4]=e[2],e[3]=e[1],e[2]=this.reflection[1],e[1]=this.reflection[0]}return e}function n(e){var t=e.length;return this.pos=[e[t-2],e[t-1]],-1!="SCQT".indexOf(e[0])&&(this.reflection=[2*this.pos[0]-e[t-4],2*this.pos[1]-e[t-3]]),e}function i(e){var t=[e];switch(e[0]){case"M":return this.pos=this.start=[e[1],e[2]],t;case"L":e[5]=e[3]=e[1],e[6]=e[4]=e[2],e[1]=this.pos[0],e[2]=this.pos[1];break;case"Q":e[6]=e[4],e[5]=e[3],e[4]=1*e[4]/3+2*e[2]/3,e[3]=1*e[3]/3+2*e[1]/3,e[2]=1*this.pos[1]/3+2*e[2]/3,e[1]=1*this.pos[0]/3+2*e[1]/3;break;case"A":e=(t=function(e,t){var n,i,r,a,o,s,l,c,u,h,d,f,p,g,m,v,b,x,y,w,k,S,A,C,E,T,P=Math.abs(t[1]),L=Math.abs(t[2]),R=t[3]%360,M=t[4],I=t[5],O=t[6],_=t[7],N=new SVG.Point(e),z=new SVG.Point(O,_),F=[];if(0===P||0===L||N.x===z.x&&N.y===z.y)return[["C",N.x,N.y,z.x,z.y,z.x,z.y]];for((i=(n=new SVG.Point((N.x-z.x)/2,(N.y-z.y)/2).transform((new SVG.Matrix).rotate(R))).x*n.x/(P*P)+n.y*n.y/(L*L))>1&&(P*=i=Math.sqrt(i),L*=i),r=(new SVG.Matrix).rotate(R).scale(1/P,1/L).rotate(-R),N=N.transform(r),s=(a=[(z=z.transform(r)).x-N.x,z.y-N.y])[0]*a[0]+a[1]*a[1],o=Math.sqrt(s),a[0]/=o,a[1]/=o,l=s<4?Math.sqrt(1-s/4):0,M===I&&(l*=-1),c=new SVG.Point((z.x+N.x)/2+l*-a[1],(z.y+N.y)/2+l*a[0]),u=new SVG.Point(N.x-c.x,N.y-c.y),h=new SVG.Point(z.x-c.x,z.y-c.y),d=Math.acos(u.x/Math.sqrt(u.x*u.x+u.y*u.y)),u.y<0&&(d*=-1),f=Math.acos(h.x/Math.sqrt(h.x*h.x+h.y*h.y)),h.y<0&&(f*=-1),I&&d>f&&(f+=2*Math.PI),!I&&d<f&&(f-=2*Math.PI),v=[],b=d,p=(f-d)/(g=Math.ceil(2*Math.abs(d-f)/Math.PI)),m=4*Math.tan(p/4)/3,k=0;k<=g;k++)y=Math.cos(b),x=Math.sin(b),w=new SVG.Point(c.x+y,c.y+x),v[k]=[new SVG.Point(w.x+m*x,w.y-m*y),w,new SVG.Point(w.x-m*x,w.y+m*y)],b+=p;for(v[0][0]=v[0][1].clone(),v[v.length-1][2]=v[v.length-1][1].clone(),r=(new SVG.Matrix).rotate(R).scale(P,L).rotate(-R),k=0,S=v.length;k<S;k++)v[k][0]=v[k][0].transform(r),v[k][1]=v[k][1].transform(r),v[k][2]=v[k][2].transform(r);for(k=1,S=v.length;k<S;k++)A=(w=v[k-1][2]).x,C=w.y,E=(w=v[k][0]).x,T=w.y,O=(w=v[k][1]).x,_=w.y,F.push(["C",A,C,E,T,O,_]);return F}(this.pos,e))[0]}return e[0]="C",this.pos=[e[5],e[6]],this.reflection=[2*e[5]-e[3],2*e[6]-e[4]],t}function r(e,t){if(!1===t)return!1;for(var n=t,i=e.length;n<i;++n)if("M"==e[n][0])return n;return!1}SVG.extend(SVG.PathArray,{morph:function(t){for(var n=this.value,i=this.parse(t),a=0,o=0,s=!1,l=!1;!1!==a||!1!==o;){var c;s=r(n,!1!==a&&a+1),l=r(i,!1!==o&&o+1),!1===a&&(a=0==(c=new SVG.PathArray(u.start).bbox()).height||0==c.width?n.push(n[0])-1:n.push(["M",c.x+c.width/2,c.y+c.height/2])-1),!1===o&&(o=0==(c=new SVG.PathArray(u.dest).bbox()).height||0==c.width?i.push(i[0])-1:i.push(["M",c.x+c.width/2,c.y+c.height/2])-1);var u=e(n,a,s,i,o,l);n=n.slice(0,a).concat(u.start,!1===s?[]:n.slice(s)),i=i.slice(0,o).concat(u.dest,!1===l?[]:i.slice(l)),a=!1!==s&&a+u.start.length,o=!1!==l&&o+u.dest.length}return this.value=n,this.destination=new SVG.PathArray,this.destination.value=i,this}})}(),function(){function e(e){e.remember("_draggable",this),this.el=e}e.prototype.init=function(e,t){var n=this;this.constraint=e,this.value=t,this.el.on("mousedown.drag",(function(e){n.start(e)})),this.el.on("touchstart.drag",(function(e){n.start(e)}))},e.prototype.transformPoint=function(e,t){var n=(e=e||window.event).changedTouches&&e.changedTouches[0]||e;return this.p.x=n.clientX-(t||0),this.p.y=n.clientY,this.p.matrixTransform(this.m)},e.prototype.getBBox=function(){var e=this.el.bbox();return this.el instanceof SVG.Nested&&(e=this.el.rbox()),(this.el instanceof SVG.G||this.el instanceof SVG.Use||this.el instanceof SVG.Nested)&&(e.x=this.el.x(),e.y=this.el.y()),e},e.prototype.start=function(e){if("click"!=e.type&&"mousedown"!=e.type&&"mousemove"!=e.type||1==(e.which||e.buttons)){var t=this;if(this.el.fire("beforedrag",{event:e,handler:this}),!this.el.event().defaultPrevented){e.preventDefault(),e.stopPropagation(),this.parent=this.parent||this.el.parent(SVG.Nested)||this.el.parent(SVG.Doc),this.p=this.parent.node.createSVGPoint(),this.m=this.el.node.getScreenCTM().inverse();var n,i=this.getBBox();if(this.el instanceof SVG.Text)switch(n=this.el.node.getComputedTextLength(),this.el.attr("text-anchor")){case"middle":n/=2;break;case"start":n=0}this.startPoints={point:this.transformPoint(e,n),box:i,transform:this.el.transform()},SVG.on(window,"mousemove.drag",(function(e){t.drag(e)})),SVG.on(window,"touchmove.drag",(function(e){t.drag(e)})),SVG.on(window,"mouseup.drag",(function(e){t.end(e)})),SVG.on(window,"touchend.drag",(function(e){t.end(e)})),this.el.fire("dragstart",{event:e,p:this.startPoints.point,m:this.m,handler:this})}}},e.prototype.drag=function(e){var t=this.getBBox(),n=this.transformPoint(e),i=this.startPoints.box.x+n.x-this.startPoints.point.x,r=this.startPoints.box.y+n.y-this.startPoints.point.y,a=this.constraint,o=n.x-this.startPoints.point.x,s=n.y-this.startPoints.point.y;if(this.el.fire("dragmove",{event:e,p:n,m:this.m,handler:this}),this.el.event().defaultPrevented)return n;if("function"==typeof a){var l=a.call(this.el,i,r,this.m);"boolean"==typeof l&&(l={x:l,y:l}),!0===l.x?this.el.x(i):!1!==l.x&&this.el.x(l.x),!0===l.y?this.el.y(r):!1!==l.y&&this.el.y(l.y)}else"object"==typeof a&&(null!=a.minX&&i<a.minX?o=(i=a.minX)-this.startPoints.box.x:null!=a.maxX&&i>a.maxX-t.width&&(o=(i=a.maxX-t.width)-this.startPoints.box.x),null!=a.minY&&r<a.minY?s=(r=a.minY)-this.startPoints.box.y:null!=a.maxY&&r>a.maxY-t.height&&(s=(r=a.maxY-t.height)-this.startPoints.box.y),null!=a.snapToGrid&&(i-=i%a.snapToGrid,r-=r%a.snapToGrid,o-=o%a.snapToGrid,s-=s%a.snapToGrid),this.el instanceof SVG.G?this.el.matrix(this.startPoints.transform).transform({x:o,y:s},!0):this.el.move(i,r));return n},e.prototype.end=function(e){var t=this.drag(e);this.el.fire("dragend",{event:e,p:t,m:this.m,handler:this}),SVG.off(window,"mousemove.drag"),SVG.off(window,"touchmove.drag"),SVG.off(window,"mouseup.drag"),SVG.off(window,"touchend.drag")},SVG.extend(SVG.Element,{draggable:function(t,n){"function"!=typeof t&&"object"!=typeof t||(n=t,t=!0);var i=this.remember("_draggable")||new e(this);return(t=void 0===t||t)?i.init(n||{},t):(this.off("mousedown.drag"),this.off("touchstart.drag")),this}})}.call(void 0),function(){function e(e){this.el=e,e.remember("_selectHandler",this),this.pointSelection={isSelected:!1},this.rectSelection={isSelected:!1},this.pointsList={lt:[0,0],rt:["width",0],rb:["width","height"],lb:[0,"height"],t:["width",0],r:["width","height"],b:["width","height"],l:[0,"height"]},this.pointCoord=function(e,t,n){var i="string"!=typeof e?e:t[e];return n?i/2:i},this.pointCoords=function(e,t){var n=this.pointsList[e];return{x:this.pointCoord(n[0],t,"t"===e||"b"===e),y:this.pointCoord(n[1],t,"r"===e||"l"===e)}}}e.prototype.init=function(e,t){var n=this.el.bbox();this.options={};var i=this.el.selectize.defaults.points;for(var r in this.el.selectize.defaults)this.options[r]=this.el.selectize.defaults[r],void 0!==t[r]&&(this.options[r]=t[r]);var a=["points","pointsExclude"];for(var r in a){var o=this.options[a[r]];"string"==typeof o?o=o.length>0?o.split(/\s*,\s*/i):[]:"boolean"==typeof o&&"points"===a[r]&&(o=o?i:[]),this.options[a[r]]=o}this.options.points=[i,this.options.points].reduce((function(e,t){return e.filter((function(e){return t.indexOf(e)>-1}))})),this.options.points=[this.options.points,this.options.pointsExclude].reduce((function(e,t){return e.filter((function(e){return t.indexOf(e)<0}))})),this.parent=this.el.parent(),this.nested=this.nested||this.parent.group(),this.nested.matrix(new SVG.Matrix(this.el).translate(n.x,n.y)),this.options.deepSelect&&-1!==["line","polyline","polygon"].indexOf(this.el.type)?this.selectPoints(e):this.selectRect(e),this.observe(),this.cleanup()},e.prototype.selectPoints=function(e){return this.pointSelection.isSelected=e,this.pointSelection.set||(this.pointSelection.set=this.parent.set(),this.drawPoints()),this},e.prototype.getPointArray=function(){var e=this.el.bbox();return this.el.array().valueOf().map((function(t){return[t[0]-e.x,t[1]-e.y]}))},e.prototype.drawPoints=function(){for(var e=this,t=this.getPointArray(),n=0,i=t.length;n<i;++n){var r=function(t){return function(n){(n=n||window.event).preventDefault?n.preventDefault():n.returnValue=!1,n.stopPropagation();var i=n.pageX||n.touches[0].pageX,r=n.pageY||n.touches[0].pageY;e.el.fire("point",{x:i,y:r,i:t,event:n})}}(n),a=this.drawPoint(t[n][0],t[n][1]).addClass(this.options.classPoints).addClass(this.options.classPoints+"_point").on("touchstart",r).on("mousedown",r);this.pointSelection.set.add(a)}},e.prototype.drawPoint=function(e,t){var n=this.options.pointType;switch(n){case"circle":return this.drawCircle(e,t);case"rect":return this.drawRect(e,t);default:if("function"==typeof n)return n.call(this,e,t);throw new Error("Unknown "+n+" point type!")}},e.prototype.drawCircle=function(e,t){return this.nested.circle(this.options.pointSize).center(e,t)},e.prototype.drawRect=function(e,t){return this.nested.rect(this.options.pointSize,this.options.pointSize).center(e,t)},e.prototype.updatePointSelection=function(){var e=this.getPointArray();this.pointSelection.set.each((function(t){this.cx()===e[t][0]&&this.cy()===e[t][1]||this.center(e[t][0],e[t][1])}))},e.prototype.updateRectSelection=function(){var e=this,t=this.el.bbox();if(this.rectSelection.set.get(0).attr({width:t.width,height:t.height}),this.options.points.length&&this.options.points.map((function(n,i){var r=e.pointCoords(n,t);e.rectSelection.set.get(i+1).center(r.x,r.y)})),this.options.rotationPoint){var n=this.rectSelection.set.length();this.rectSelection.set.get(n-1).center(t.width/2,20)}},e.prototype.selectRect=function(e){var t=this,n=this.el.bbox();function i(e){return function(n){(n=n||window.event).preventDefault?n.preventDefault():n.returnValue=!1,n.stopPropagation();var i=n.pageX||n.touches[0].pageX,r=n.pageY||n.touches[0].pageY;t.el.fire(e,{x:i,y:r,event:n})}}if(this.rectSelection.isSelected=e,this.rectSelection.set=this.rectSelection.set||this.parent.set(),this.rectSelection.set.get(0)||this.rectSelection.set.add(this.nested.rect(n.width,n.height).addClass(this.options.classRect)),this.options.points.length&&this.rectSelection.set.length()<2&&(this.options.points.map((function(e,r){var a=t.pointCoords(e,n),o=t.drawPoint(a.x,a.y).attr("class",t.options.classPoints+"_"+e).on("mousedown",i(e)).on("touchstart",i(e));t.rectSelection.set.add(o)})),this.rectSelection.set.each((function(){this.addClass(t.options.classPoints)}))),this.options.rotationPoint&&(this.options.points&&!this.rectSelection.set.get(9)||!this.options.points&&!this.rectSelection.set.get(1))){var r=function(e){(e=e||window.event).preventDefault?e.preventDefault():e.returnValue=!1,e.stopPropagation();var n=e.pageX||e.touches[0].pageX,i=e.pageY||e.touches[0].pageY;t.el.fire("rot",{x:n,y:i,event:e})},a=this.drawPoint(n.width/2,20).attr("class",this.options.classPoints+"_rot").on("touchstart",r).on("mousedown",r);this.rectSelection.set.add(a)}},e.prototype.handler=function(){var e=this.el.bbox();this.nested.matrix(new SVG.Matrix(this.el).translate(e.x,e.y)),this.rectSelection.isSelected&&this.updateRectSelection(),this.pointSelection.isSelected&&this.updatePointSelection()},e.prototype.observe=function(){var e=this;if(MutationObserver)if(this.rectSelection.isSelected||this.pointSelection.isSelected)this.observerInst=this.observerInst||new MutationObserver((function(){e.handler()})),this.observerInst.observe(this.el.node,{attributes:!0});else try{this.observerInst.disconnect(),delete this.observerInst}catch(e){}else this.el.off("DOMAttrModified.select"),(this.rectSelection.isSelected||this.pointSelection.isSelected)&&this.el.on("DOMAttrModified.select",(function(){e.handler()}))},e.prototype.cleanup=function(){!this.rectSelection.isSelected&&this.rectSelection.set&&(this.rectSelection.set.each((function(){this.remove()})),this.rectSelection.set.clear(),delete this.rectSelection.set),!this.pointSelection.isSelected&&this.pointSelection.set&&(this.pointSelection.set.each((function(){this.remove()})),this.pointSelection.set.clear(),delete this.pointSelection.set),this.pointSelection.isSelected||this.rectSelection.isSelected||(this.nested.remove(),delete this.nested)},SVG.extend(SVG.Element,{selectize:function(t,n){return"object"==typeof t&&(n=t,t=!0),(this.remember("_selectHandler")||new e(this)).init(void 0===t||t,n||{}),this}}),SVG.Element.prototype.selectize.defaults={points:["lt","rt","rb","lb","t","r","b","l"],pointsExclude:[],classRect:"svg_select_boundingRect",classPoints:"svg_select_points",pointSize:7,rotationPoint:!0,deepSelect:!1,pointType:"circle"}}(),function(){(function(){function e(e){e.remember("_resizeHandler",this),this.el=e,this.parameters={},this.lastUpdateCall=null,this.p=e.doc().node.createSVGPoint()}e.prototype.transformPoint=function(e,t,n){return this.p.x=e-(this.offset.x-window.pageXOffset),this.p.y=t-(this.offset.y-window.pageYOffset),this.p.matrixTransform(n||this.m)},e.prototype._extractPosition=function(e){return{x:null!=e.clientX?e.clientX:e.touches[0].clientX,y:null!=e.clientY?e.clientY:e.touches[0].clientY}},e.prototype.init=function(e){var t=this;if(this.stop(),"stop"!==e){for(var n in this.options={},this.el.resize.defaults)this.options[n]=this.el.resize.defaults[n],void 0!==e[n]&&(this.options[n]=e[n]);this.el.on("lt.resize",(function(e){t.resize(e||window.event)})),this.el.on("rt.resize",(function(e){t.resize(e||window.event)})),this.el.on("rb.resize",(function(e){t.resize(e||window.event)})),this.el.on("lb.resize",(function(e){t.resize(e||window.event)})),this.el.on("t.resize",(function(e){t.resize(e||window.event)})),this.el.on("r.resize",(function(e){t.resize(e||window.event)})),this.el.on("b.resize",(function(e){t.resize(e||window.event)})),this.el.on("l.resize",(function(e){t.resize(e||window.event)})),this.el.on("rot.resize",(function(e){t.resize(e||window.event)})),this.el.on("point.resize",(function(e){t.resize(e||window.event)})),this.update()}},e.prototype.stop=function(){return this.el.off("lt.resize"),this.el.off("rt.resize"),this.el.off("rb.resize"),this.el.off("lb.resize"),this.el.off("t.resize"),this.el.off("r.resize"),this.el.off("b.resize"),this.el.off("l.resize"),this.el.off("rot.resize"),this.el.off("point.resize"),this},e.prototype.resize=function(e){var t=this;this.m=this.el.node.getScreenCTM().inverse(),this.offset={x:window.pageXOffset,y:window.pageYOffset};var n=this._extractPosition(e.detail.event);if(this.parameters={type:this.el.type,p:this.transformPoint(n.x,n.y),x:e.detail.x,y:e.detail.y,box:this.el.bbox(),rotation:this.el.transform().rotation},"text"===this.el.type&&(this.parameters.fontSize=this.el.attr()["font-size"]),void 0!==e.detail.i){var i=this.el.array().valueOf();this.parameters.i=e.detail.i,this.parameters.pointCoords=[i[e.detail.i][0],i[e.detail.i][1]]}switch(e.type){case"lt":this.calc=function(e,t){var n=this.snapToGrid(e,t);if(this.parameters.box.width-n[0]>0&&this.parameters.box.height-n[1]>0){if("text"===this.parameters.type)return this.el.move(this.parameters.box.x+n[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize-n[0]);n=this.checkAspectRatio(n),this.el.move(this.parameters.box.x+n[0],this.parameters.box.y+n[1]).size(this.parameters.box.width-n[0],this.parameters.box.height-n[1])}};break;case"rt":this.calc=function(e,t){var n=this.snapToGrid(e,t,2);if(this.parameters.box.width+n[0]>0&&this.parameters.box.height-n[1]>0){if("text"===this.parameters.type)return this.el.move(this.parameters.box.x-n[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize+n[0]);n=this.checkAspectRatio(n,!0),this.el.move(this.parameters.box.x,this.parameters.box.y+n[1]).size(this.parameters.box.width+n[0],this.parameters.box.height-n[1])}};break;case"rb":this.calc=function(e,t){var n=this.snapToGrid(e,t,0);if(this.parameters.box.width+n[0]>0&&this.parameters.box.height+n[1]>0){if("text"===this.parameters.type)return this.el.move(this.parameters.box.x-n[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize+n[0]);n=this.checkAspectRatio(n),this.el.move(this.parameters.box.x,this.parameters.box.y).size(this.parameters.box.width+n[0],this.parameters.box.height+n[1])}};break;case"lb":this.calc=function(e,t){var n=this.snapToGrid(e,t,1);if(this.parameters.box.width-n[0]>0&&this.parameters.box.height+n[1]>0){if("text"===this.parameters.type)return this.el.move(this.parameters.box.x+n[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize-n[0]);n=this.checkAspectRatio(n,!0),this.el.move(this.parameters.box.x+n[0],this.parameters.box.y).size(this.parameters.box.width-n[0],this.parameters.box.height+n[1])}};break;case"t":this.calc=function(e,t){var n=this.snapToGrid(e,t,2);if(this.parameters.box.height-n[1]>0){if("text"===this.parameters.type)return;this.el.move(this.parameters.box.x,this.parameters.box.y+n[1]).height(this.parameters.box.height-n[1])}};break;case"r":this.calc=function(e,t){var n=this.snapToGrid(e,t,0);if(this.parameters.box.width+n[0]>0){if("text"===this.parameters.type)return;this.el.move(this.parameters.box.x,this.parameters.box.y).width(this.parameters.box.width+n[0])}};break;case"b":this.calc=function(e,t){var n=this.snapToGrid(e,t,0);if(this.parameters.box.height+n[1]>0){if("text"===this.parameters.type)return;this.el.move(this.parameters.box.x,this.parameters.box.y).height(this.parameters.box.height+n[1])}};break;case"l":this.calc=function(e,t){var n=this.snapToGrid(e,t,1);if(this.parameters.box.width-n[0]>0){if("text"===this.parameters.type)return;this.el.move(this.parameters.box.x+n[0],this.parameters.box.y).width(this.parameters.box.width-n[0])}};break;case"rot":this.calc=function(e,t){var n=e+this.parameters.p.x,i=t+this.parameters.p.y,r=Math.atan2(this.parameters.p.y-this.parameters.box.y-this.parameters.box.height/2,this.parameters.p.x-this.parameters.box.x-this.parameters.box.width/2),a=Math.atan2(i-this.parameters.box.y-this.parameters.box.height/2,n-this.parameters.box.x-this.parameters.box.width/2),o=this.parameters.rotation+180*(a-r)/Math.PI+this.options.snapToAngle/2;this.el.center(this.parameters.box.cx,this.parameters.box.cy).rotate(o-o%this.options.snapToAngle,this.parameters.box.cx,this.parameters.box.cy)};break;case"point":this.calc=function(e,t){var n=this.snapToGrid(e,t,this.parameters.pointCoords[0],this.parameters.pointCoords[1]),i=this.el.array().valueOf();i[this.parameters.i][0]=this.parameters.pointCoords[0]+n[0],i[this.parameters.i][1]=this.parameters.pointCoords[1]+n[1],this.el.plot(i)}}this.el.fire("resizestart",{dx:this.parameters.x,dy:this.parameters.y,event:e}),SVG.on(window,"touchmove.resize",(function(e){t.update(e||window.event)})),SVG.on(window,"touchend.resize",(function(){t.done()})),SVG.on(window,"mousemove.resize",(function(e){t.update(e||window.event)})),SVG.on(window,"mouseup.resize",(function(){t.done()}))},e.prototype.update=function(e){if(e){var t=this._extractPosition(e),n=this.transformPoint(t.x,t.y),i=n.x-this.parameters.p.x,r=n.y-this.parameters.p.y;this.lastUpdateCall=[i,r],this.calc(i,r),this.el.fire("resizing",{dx:i,dy:r,event:e})}else this.lastUpdateCall&&this.calc(this.lastUpdateCall[0],this.lastUpdateCall[1])},e.prototype.done=function(){this.lastUpdateCall=null,SVG.off(window,"mousemove.resize"),SVG.off(window,"mouseup.resize"),SVG.off(window,"touchmove.resize"),SVG.off(window,"touchend.resize"),this.el.fire("resizedone")},e.prototype.snapToGrid=function(e,t,n,i){var r;return void 0!==i?r=[(n+e)%this.options.snapToGrid,(i+t)%this.options.snapToGrid]:(n=null==n?3:n,r=[(this.parameters.box.x+e+(1&n?0:this.parameters.box.width))%this.options.snapToGrid,(this.parameters.box.y+t+(2&n?0:this.parameters.box.height))%this.options.snapToGrid]),e<0&&(r[0]-=this.options.snapToGrid),t<0&&(r[1]-=this.options.snapToGrid),e-=Math.abs(r[0])<this.options.snapToGrid/2?r[0]:r[0]-(e<0?-this.options.snapToGrid:this.options.snapToGrid),t-=Math.abs(r[1])<this.options.snapToGrid/2?r[1]:r[1]-(t<0?-this.options.snapToGrid:this.options.snapToGrid),this.constraintToBox(e,t,n,i)},e.prototype.constraintToBox=function(e,t,n,i){var r,a,o=this.options.constraint||{};return void 0!==i?(r=n,a=i):(r=this.parameters.box.x+(1&n?0:this.parameters.box.width),a=this.parameters.box.y+(2&n?0:this.parameters.box.height)),void 0!==o.minX&&r+e<o.minX&&(e=o.minX-r),void 0!==o.maxX&&r+e>o.maxX&&(e=o.maxX-r),void 0!==o.minY&&a+t<o.minY&&(t=o.minY-a),void 0!==o.maxY&&a+t>o.maxY&&(t=o.maxY-a),[e,t]},e.prototype.checkAspectRatio=function(e,t){if(!this.options.saveAspectRatio)return e;var n=e.slice(),i=this.parameters.box.width/this.parameters.box.height,r=this.parameters.box.width+e[0],a=this.parameters.box.height-e[1],o=r/a;return o<i?(n[1]=r/i-this.parameters.box.height,t&&(n[1]=-n[1])):o>i&&(n[0]=this.parameters.box.width-a*i,t&&(n[0]=-n[0])),n},SVG.extend(SVG.Element,{resize:function(t){return(this.remember("_resizeHandler")||new e(this)).init(t||{}),this}}),SVG.Element.prototype.resize.defaults={snapToAngle:.1,snapToGrid:1,constraint:{},saveAspectRatio:!1}}).call(this)}(),void 0===window.Apex&&(window.Apex={});var De=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"initModules",value:function(){this.ctx.publicMethods=["updateOptions","updateSeries","appendData","appendSeries","toggleSeries","showSeries","hideSeries","setLocale","resetSeries","zoomX","toggleDataPointSelection","dataURI","addXaxisAnnotation","addYaxisAnnotation","addPointAnnotation","clearAnnotations","removeAnnotation","paper","destroy"],this.ctx.eventList=["click","mousedown","mousemove","mouseleave","touchstart","touchmove","touchleave","mouseup","touchend"],this.ctx.animations=new x(this.ctx),this.ctx.axes=new te(this.ctx),this.ctx.core=new ze(this.ctx.el,this.ctx),this.ctx.config=new Y({}),this.ctx.data=new W(this.ctx),this.ctx.grid=new $(this.ctx),this.ctx.graphics=new w(this.ctx),this.ctx.coreUtils=new A(this.ctx),this.ctx.crosshairs=new ne(this.ctx),this.ctx.events=new J(this.ctx),this.ctx.exports=new G(this.ctx),this.ctx.localization=new ee(this.ctx),this.ctx.options=new P,this.ctx.responsive=new ie(this.ctx),this.ctx.series=new N(this.ctx),this.ctx.theme=new re(this.ctx),this.ctx.formatters=new j(this.ctx),this.ctx.titleSubtitle=new ae(this.ctx),this.ctx.legend=new de(this.ctx),this.ctx.toolbar=new fe(this.ctx),this.ctx.dimensions=new ue(this.ctx),this.ctx.updateHelpers=new Fe(this.ctx),this.ctx.zoomPanSelection=new pe(this.ctx),this.ctx.w.globals.tooltip=new we(this.ctx)}}]),e}(),Xe=function(){function e(t){s(this,e),this.ctx=t,this.w=t.w}return c(e,[{key:"clear",value:function(e){var t=e.isUpdating;this.ctx.zoomPanSelection&&this.ctx.zoomPanSelection.destroy(),this.ctx.toolbar&&this.ctx.toolbar.destroy(),this.ctx.animations=null,this.ctx.axes=null,this.ctx.annotations=null,this.ctx.core=null,this.ctx.data=null,this.ctx.grid=null,this.ctx.series=null,this.ctx.responsive=null,this.ctx.theme=null,this.ctx.formatters=null,this.ctx.titleSubtitle=null,this.ctx.legend=null,this.ctx.dimensions=null,this.ctx.options=null,this.ctx.crosshairs=null,this.ctx.zoomPanSelection=null,this.ctx.updateHelpers=null,this.ctx.toolbar=null,this.ctx.localization=null,this.ctx.w.globals.tooltip=null,this.clearDomElements({isUpdating:t})}},{key:"killSVG",value:function(e){e.each((function(e,t){this.removeClass("*"),this.off(),this.stop()}),!0),e.ungroup(),e.clear()}},{key:"clearDomElements",value:function(e){var t=this,n=e.isUpdating,i=this.w.globals.dom.Paper.node;i.parentNode&&i.parentNode.parentNode&&!n&&(i.parentNode.parentNode.style.minHeight="unset");var r=this.w.globals.dom.baseEl;r&&this.ctx.eventList.forEach((function(e){r.removeEventListener(e,t.ctx.events.documentEvent)}));var a=this.w.globals.dom;if(null!==this.ctx.el)for(;this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);this.killSVG(a.Paper),a.Paper.remove(),a.elWrap=null,a.elGraphical=null,a.elAnnotations=null,a.elLegendWrap=null,a.baseEl=null,a.elGridRect=null,a.elGridRectMask=null,a.elGridRectMarkerMask=null,a.elForecastMask=null,a.elNonForecastMask=null,a.elDefs=null}}]),e}(),Be=new WeakMap,Ye=function(){function e(t,n){s(this,e),this.opts=n,this.ctx=this,this.w=new V(n).init(),this.el=t,this.w.globals.cuid=b.randomId(),this.w.globals.chartID=this.w.config.chart.id?b.escapeString(this.w.config.chart.id):this.w.globals.cuid,new De(this).initModules(),this.create=b.bind(this.create,this),this.windowResizeHandler=this._windowResizeHandler.bind(this),this.parentResizeHandler=this._parentResizeCallback.bind(this)}return c(e,[{key:"render",value:function(){var e=this;return new Promise((function(t,n){if(null!==e.el){void 0===Apex._chartInstances&&(Apex._chartInstances=[]),e.w.config.chart.id&&Apex._chartInstances.push({id:e.w.globals.chartID,group:e.w.config.chart.group,chart:e}),e.setLocale(e.w.config.chart.defaultLocale);var i=e.w.config.chart.events.beforeMount;if("function"==typeof i&&i(e,e.w),e.events.fireEvent("beforeMount",[e,e.w]),window.addEventListener("resize",e.windowResizeHandler),c=e.el.parentNode,u=e.parentResizeHandler,h=!1,d=new ResizeObserver((function(e){h&&u.call(c,e),h=!0})),c.nodeType===Node.DOCUMENT_FRAGMENT_NODE?Array.from(c.children).forEach((function(e){return d.observe(e)})):d.observe(c),Be.set(u,d),!e.css){var r=e.el.getRootNode&&e.el.getRootNode(),a=b.is("ShadowRoot",r),o=e.el.ownerDocument,s=o.getElementById("apexcharts-css");!a&&s||(e.css=document.createElement("style"),e.css.id="apexcharts-css",e.css.textContent='.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-title:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}',a?r.prepend(e.css):o.head.appendChild(e.css))}var l=e.create(e.w.config.series,{});if(!l)return t(e);e.mount(l).then((function(){"function"==typeof e.w.config.chart.events.mounted&&e.w.config.chart.events.mounted(e,e.w),e.events.fireEvent("mounted",[e,e.w]),t(l)})).catch((function(e){n(e)}))}else n(new Error("Element not found"));var c,u,h,d}))}},{key:"create",value:function(e,t){var n=this.w;new De(this).initModules();var i=this.w.globals;if(i.noData=!1,i.animationEnded=!1,this.responsive.checkResponsiveConfig(t),n.config.xaxis.convertedCatToNumeric&&new B(n.config).convertCatToNumericXaxis(n.config,this.ctx),null===this.el)return i.animationEnded=!0,null;if(this.core.setupElements(),"treemap"===n.config.chart.type&&(n.config.grid.show=!1,n.config.yaxis[0].show=!1),0===i.svgWidth)return i.animationEnded=!0,null;var r=A.checkComboSeries(e);i.comboCharts=r.comboCharts,i.comboBarCount=r.comboBarCount;var a=e.every((function(e){return e.data&&0===e.data.length}));(0===e.length||a)&&this.series.handleNoData(),this.events.setupEventHandlers(),this.data.parseData(e),this.theme.init(),new M(this).setGlobalMarkerSize(),this.formatters.setLabelFormatters(),this.titleSubtitle.draw(),i.noData&&i.collapsedSeries.length!==i.series.length&&!n.config.legend.showForSingleSeries||this.legend.init(),this.series.hasAllSeriesEqualX(),i.axisCharts&&(this.core.coreCalculations(),"category"!==n.config.xaxis.type&&this.formatters.setLabelFormatters(),this.ctx.toolbar.minX=n.globals.minX,this.ctx.toolbar.maxX=n.globals.maxX),this.formatters.heatmapLabelFormatters(),this.dimensions.plotCoords();var o=this.core.xySettings();this.grid.createGridMask();var s=this.core.plotChartType(e,o),l=new O(this);l.bringForward(),n.config.dataLabels.background.enabled&&l.dataLabelsBackground(),this.core.shiftGraphPosition();var c={plot:{left:n.globals.translateX,top:n.globals.translateY,width:n.globals.gridWidth,height:n.globals.gridHeight}};return{elGraph:s,xyRatios:o,elInner:n.globals.dom.elGraphical,dimensions:c}}},{key:"mount",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=this,i=n.w;return new Promise((function(r,a){if(null===n.el)return a(new Error("Not enough data to display or target element not found"));(null===t||i.globals.allSeriesCollapsed)&&n.series.handleNoData(),"treemap"!==i.config.chart.type&&n.axes.drawAxis(i.config.chart.type,t.xyRatios),n.grid=new $(n);var o=n.grid.drawGrid();n.annotations=new L(n),n.annotations.drawImageAnnos(),n.annotations.drawTextAnnos(),"back"===i.config.grid.position&&o&&i.globals.dom.elGraphical.add(o.el);var s=new q(e.ctx),l=new K(e.ctx);if(null!==o&&(s.xAxisLabelCorrections(o.xAxisTickWidth),l.setYAxisTextAlignments(),i.config.yaxis.map((function(e,t){-1===i.globals.ignoreYAxisIndexes.indexOf(t)&&l.yAxisTitleRotate(t,e.opposite)}))),"back"===i.config.annotations.position&&(i.globals.dom.Paper.add(i.globals.dom.elAnnotations),n.annotations.drawAxesAnnotations()),Array.isArray(t.elGraph))for(var c=0;c<t.elGraph.length;c++)i.globals.dom.elGraphical.add(t.elGraph[c]);else i.globals.dom.elGraphical.add(t.elGraph);if("front"===i.config.grid.position&&o&&i.globals.dom.elGraphical.add(o.el),"front"===i.config.xaxis.crosshairs.position&&n.crosshairs.drawXCrosshairs(),"front"===i.config.yaxis[0].crosshairs.position&&n.crosshairs.drawYCrosshairs(),"front"===i.config.annotations.position&&(i.globals.dom.Paper.add(i.globals.dom.elAnnotations),n.annotations.drawAxesAnnotations()),!i.globals.noData){if(i.config.tooltip.enabled&&!i.globals.noData&&n.w.globals.tooltip.drawTooltip(t.xyRatios),i.globals.axisCharts&&(i.globals.isXNumeric||i.config.xaxis.convertedCatToNumeric||i.globals.isRangeBar))(i.config.chart.zoom.enabled||i.config.chart.selection&&i.config.chart.selection.enabled||i.config.chart.pan&&i.config.chart.pan.enabled)&&n.zoomPanSelection.init({xyRatios:t.xyRatios});else{var u=i.config.chart.toolbar.tools;["zoom","zoomin","zoomout","selection","pan","reset"].forEach((function(e){u[e]=!1}))}i.config.chart.toolbar.show&&!i.globals.allSeriesCollapsed&&n.toolbar.createToolbar()}i.globals.memory.methodsToExec.length>0&&i.globals.memory.methodsToExec.forEach((function(e){e.method(e.params,!1,e.context)})),i.globals.axisCharts||i.globals.noData||n.core.resizeNonAxisCharts(),r(n)}))}},{key:"destroy",value:function(){var e,t;window.removeEventListener("resize",this.windowResizeHandler),this.el.parentNode,e=this.parentResizeHandler,(t=Be.get(e))&&(t.disconnect(),Be.delete(e));var n=this.w.config.chart.id;n&&Apex._chartInstances.forEach((function(e,t){e.id===b.escapeString(n)&&Apex._chartInstances.splice(t,1)})),new Xe(this.ctx).clear({isUpdating:!1})}},{key:"updateOptions",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=this.w;return o.globals.selection=void 0,e.series&&(this.series.resetSeries(!1,!0,!1),e.series.length&&e.series[0].data&&(e.series=e.series.map((function(e,n){return t.updateHelpers._extendSeries(e,n)}))),this.updateHelpers.revertDefaultAxisMinMax()),e.xaxis&&(e=this.updateHelpers.forceXAxisUpdate(e)),e.yaxis&&(e=this.updateHelpers.forceYAxisUpdate(e)),o.globals.collapsedSeriesIndices.length>0&&this.series.clearPreviousPaths(),e.theme&&(e=this.theme.updateThemeOptions(e)),this.updateHelpers._updateOptions(e,n,i,r,a)}},{key:"updateSeries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.series.resetSeries(!1),this.updateHelpers.revertDefaultAxisMinMax(),this.updateHelpers._updateSeries(e,t,n)}},{key:"appendSeries",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=this.w.config.series.slice();return i.push(e),this.series.resetSeries(!1),this.updateHelpers.revertDefaultAxisMinMax(),this.updateHelpers._updateSeries(i,t,n)}},{key:"appendData",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this;n.w.globals.dataChanged=!0,n.series.getPreviousPaths();for(var i=n.w.config.series.slice(),r=0;r<i.length;r++)if(null!==e[r]&&void 0!==e[r])for(var a=0;a<e[r].data.length;a++)i[r].data.push(e[r].data[a]);return n.w.config.series=i,t&&(n.w.globals.initialSeries=b.clone(n.w.config.series)),this.update()}},{key:"update",value:function(e){var t=this;return new Promise((function(n,i){new Xe(t.ctx).clear({isUpdating:!0});var r=t.create(t.w.config.series,e);if(!r)return n(t);t.mount(r).then((function(){"function"==typeof t.w.config.chart.events.updated&&t.w.config.chart.events.updated(t,t.w),t.events.fireEvent("updated",[t,t.w]),t.w.globals.isDirty=!0,n(t)})).catch((function(e){i(e)}))}))}},{key:"getSyncedCharts",value:function(){var e=this.getGroupedCharts(),t=[this];return e.length&&(t=[],e.forEach((function(e){t.push(e)}))),t}},{key:"getGroupedCharts",value:function(){var e=this;return Apex._chartInstances.filter((function(e){if(e.group)return!0})).map((function(t){return e.w.config.chart.group===t.group?t.chart:e}))}},{key:"toggleSeries",value:function(e){return this.series.toggleSeries(e)}},{key:"highlightSeriesOnLegendHover",value:function(e,t){return this.series.toggleSeriesOnHover(e,t)}},{key:"showSeries",value:function(e){this.series.showSeries(e)}},{key:"hideSeries",value:function(e){this.series.hideSeries(e)}},{key:"resetSeries",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.series.resetSeries(e,t)}},{key:"addEventListener",value:function(e,t){this.events.addEventListener(e,t)}},{key:"removeEventListener",value:function(e,t){this.events.removeEventListener(e,t)}},{key:"addXaxisAnnotation",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=this;n&&(i=n),i.annotations.addXaxisAnnotationExternal(e,t,i)}},{key:"addYaxisAnnotation",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=this;n&&(i=n),i.annotations.addYaxisAnnotationExternal(e,t,i)}},{key:"addPointAnnotation",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=this;n&&(i=n),i.annotations.addPointAnnotationExternal(e,t,i)}},{key:"clearAnnotations",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,t=this;e&&(t=e),t.annotations.clearAnnotations(t)}},{key:"removeAnnotation",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,n=this;t&&(n=t),n.annotations.removeAnnotation(n,e)}},{key:"getChartArea",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner")}},{key:"getSeriesTotalXRange",value:function(e,t){return this.coreUtils.getSeriesTotalsXRange(e,t)}},{key:"getHighestValueInSeries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=new Q(this.ctx);return t.getMinYMaxY(e).highestY}},{key:"getLowestValueInSeries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=new Q(this.ctx);return t.getMinYMaxY(e).lowestY}},{key:"getSeriesTotal",value:function(){return this.w.globals.seriesTotals}},{key:"toggleDataPointSelection",value:function(e,t){return this.updateHelpers.toggleDataPointSelection(e,t)}},{key:"zoomX",value:function(e,t){this.ctx.toolbar.zoomUpdateOptions(e,t)}},{key:"setLocale",value:function(e){this.localization.setCurrentLocaleValues(e)}},{key:"dataURI",value:function(e){return new G(this.ctx).dataURI(e)}},{key:"paper",value:function(){return this.w.globals.dom.Paper}},{key:"_parentResizeCallback",value:function(){this.w.globals.animationEnded&&this.w.config.chart.redrawOnParentResize&&this._windowResize()}},{key:"_windowResize",value:function(){var e=this;clearTimeout(this.w.globals.resizeTimer),this.w.globals.resizeTimer=window.setTimeout((function(){e.w.globals.resized=!0,e.w.globals.dataChanged=!1,e.ctx.update()}),150)}},{key:"_windowResizeHandler",value:function(){var e=this.w.config.chart.redrawOnWindowResize;"function"==typeof e&&(e=e()),e&&this._windowResize()}}],[{key:"getChartByID",value:function(e){var t=b.escapeString(e),n=Apex._chartInstances.filter((function(e){return e.id===t}))[0];return n&&n.chart}},{key:"initOnLoad",value:function(){for(var t=document.querySelectorAll("[data-apexcharts]"),n=0;n<t.length;n++)new e(t[n],JSON.parse(t[n].getAttribute("data-options"))).render()}},{key:"exec",value:function(e,t){var n=this.getChartByID(e);if(n){n.w.globals.isExecCalled=!0;var i=null;if(-1!==n.publicMethods.indexOf(t)){for(var r=arguments.length,a=new Array(r>2?r-2:0),o=2;o<r;o++)a[o-2]=arguments[o];i=n[t].apply(n,a)}return i}}},{key:"merge",value:function(e,t){return b.extend(e,t)}}]),e}();e.exports=Ye},282:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,"/* 스피너 애니메이션 */\r\n@-webkit-keyframes spinner {\r\n  from {\r\n    -webkit-transform: rotateX(0deg);\r\n    transform: rotateX(0deg);\r\n  }\r\n  to {\r\n    -webkit-transform: rotateX(360deg);\r\n    transform: rotateX(360deg);\r\n  }\r\n}\r\n@keyframes spinner {\r\n  0% {\r\n    -webkit-transform: rotateX(0deg);\r\n    transform: rotateX(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotateX(360deg);\r\n    transform: rotateX(360deg);\r\n  }\r\n}\r\n\r\n/* 사이드 버튼 애니메이션 */\r\n@-webkit-keyframes appear {\r\n  from {\r\n    opacity: 0.01;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes appear {\r\n  0% {\r\n    opacity: 0.01;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}","",{version:3,sources:["webpack://./src/css/animation.css"],names:[],mappings:"AAAA,cAAc;AACd;EACE;IACE,gCAAgC;IAChC,wBAAwB;EAC1B;EACA;IACE,kCAAkC;IAClC,0BAA0B;EAC5B;AACF;AACA;EACE;IACE,gCAAgC;IAChC,wBAAwB;EAC1B;EACA;IACE,kCAAkC;IAClC,0BAA0B;EAC5B;AACF;;AAEA,iBAAiB;AACjB;EACE;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;AACF;AACA;EACE;IACE,aAAa;EACf;EACA;IACE,UAAU;EACZ;AACF",sourcesContent:["/* 스피너 애니메이션 */\r\n@-webkit-keyframes spinner {\r\n  from {\r\n    -webkit-transform: rotateX(0deg);\r\n    transform: rotateX(0deg);\r\n  }\r\n  to {\r\n    -webkit-transform: rotateX(360deg);\r\n    transform: rotateX(360deg);\r\n  }\r\n}\r\n@keyframes spinner {\r\n  0% {\r\n    -webkit-transform: rotateX(0deg);\r\n    transform: rotateX(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotateX(360deg);\r\n    transform: rotateX(360deg);\r\n  }\r\n}\r\n\r\n/* 사이드 버튼 애니메이션 */\r\n@-webkit-keyframes appear {\r\n  from {\r\n    opacity: 0.01;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n@keyframes appear {\r\n  0% {\r\n    opacity: 0.01;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}"],sourceRoot:""}]);const s=o},421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Noto+Sans:ital@0;1&display=swap);"]),o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Yeon+Sung&display=swap);"]),o.push([e.id,":root {\r\n  --background-color: #fafafa;\r\n  --icon-color: #262626;\r\n  --facebook-color: #3f62a9;\r\n  --naver-color: #00bd39;\r\n  --kakao-color: #eed700;\r\n\r\n  --light-blue: #0095f6;\r\n  --heart-color: #ed4956;\r\n}\r\n\r\n/* 일반 폰트 */\r\n/* 차트 폰트 */\r\n\r\n/* 임시 부여 */\r\n#root {\r\n  /* width: 100%;\r\n  height: 100%; */\r\n}","",{version:3,sources:["webpack://./src/css/common.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,qBAAqB;EACrB,yBAAyB;EACzB,sBAAsB;EACtB,sBAAsB;;EAEtB,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA,UAAU;AAEV,UAAU;;AAGV,UAAU;AACV;EACE;iBACe;AACjB",sourcesContent:[":root {\r\n  --background-color: #fafafa;\r\n  --icon-color: #262626;\r\n  --facebook-color: #3f62a9;\r\n  --naver-color: #00bd39;\r\n  --kakao-color: #eed700;\r\n\r\n  --light-blue: #0095f6;\r\n  --heart-color: #ed4956;\r\n}\r\n\r\n/* 일반 폰트 */\r\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital@0;1&display=swap');\r\n/* 차트 폰트 */\r\n@import url('https://fonts.googleapis.com/css2?family=Yeon+Sung&display=swap');\r\n\r\n/* 임시 부여 */\r\n#root {\r\n  /* width: 100%;\r\n  height: 100%; */\r\n}"],sourceRoot:""}]);const s=o},538:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(537),r=n.n(i),a=n(645),o=n.n(a)()(r());o.push([e.id,"* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  margin: 0;\r\n}\r\nul {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nli {\r\n  list-style: none;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: black;\r\n}\r\na:visited {\r\n  color: black;\r\n}\r\na:hover {\r\n  text-decoration: none;\r\n}\r\ninput:focus {\r\n  outline: none;\r\n}\r\ninput:disabled {\r\n  color: black;\r\n}\r\nselect:focus {\r\n  outline: none;\r\n}\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin: 0;\r\n}\r\nhr {\r\n  color: black;\r\n  background-color: black;\r\n  width: 100%;\r\n}\r\npre {\r\n  white-space: pre-line;\r\n  margin: 0;\r\n}\r\nbutton {\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\np {\r\n  margin: 0;\r\n}\r\nfigure {\r\n  margin: 0;\r\n}","",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,qBAAqB;AACvB;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;AACA;;;;;;EAME,SAAS;AACX;AACA;EACE,YAAY;EACZ,uBAAuB;EACvB,WAAW;AACb;AACA;EACE,qBAAqB;EACrB,SAAS;AACX;AACA;EACE,YAAY;EACZ,6BAA6B;EAC7B,eAAe;EACf,UAAU;AACZ;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;AACX",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  margin: 0;\r\n}\r\nul {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nli {\r\n  list-style: none;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: black;\r\n}\r\na:visited {\r\n  color: black;\r\n}\r\na:hover {\r\n  text-decoration: none;\r\n}\r\ninput:focus {\r\n  outline: none;\r\n}\r\ninput:disabled {\r\n  color: black;\r\n}\r\nselect:focus {\r\n  outline: none;\r\n}\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin: 0;\r\n}\r\nhr {\r\n  color: black;\r\n  background-color: black;\r\n  width: 100%;\r\n}\r\npre {\r\n  white-space: pre-line;\r\n  margin: 0;\r\n}\r\nbutton {\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\np {\r\n  margin: 0;\r\n}\r\nfigure {\r\n  margin: 0;\r\n}"],sourceRoot:""}]);const s=o},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);i&&o[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([a]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var i=n(296),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return i.isMemo(e)?o:s[e.$$typeof]||r}s[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[i.Memo]=o;var c=Object.defineProperty,u=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,i){if("string"!=typeof n){if(p){var r=f(n);r&&r!==p&&e(t,r,i)}var o=u(n);h&&(o=o.concat(h(n)));for(var s=l(t),g=l(n),m=0;m<o.length;++m){var v=o[m];if(!(a[v]||i&&i[v]||g&&g[v]||s&&s[v])){var b=d(n,v);try{c(t,v,b)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,o=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,x=n?Symbol.for("react.responder"):60118,y=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case u:case h:case a:case s:case o:case f:return e;default:switch(e=e&&e.$$typeof){case c:case d:case m:case g:case l:return e;default:return t}}case r:return t}}}function k(e){return w(e)===h}t.AsyncMode=u,t.ConcurrentMode=h,t.ContextConsumer=c,t.ContextProvider=l,t.Element=i,t.ForwardRef=d,t.Fragment=a,t.Lazy=m,t.Memo=g,t.Portal=r,t.Profiler=s,t.StrictMode=o,t.Suspense=f,t.isAsyncMode=function(e){return k(e)||w(e)===u},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===g},t.isPortal=function(e){return w(e)===r},t.isProfiler=function(e){return w(e)===s},t.isStrictMode=function(e){return w(e)===o},t.isSuspense=function(e){return w(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===h||e===s||e===o||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d||e.$$typeof===b||e.$$typeof===x||e.$$typeof===y||e.$$typeof===v)},t.typeOf=w},296:(e,t,n)=>{"use strict";e.exports=n(103)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(e){i[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var o,s,l=r(e),c=1;c<arguments.length;c++){for(var u in o=Object(arguments[c]))n.call(o,u)&&(l[u]=o[u]);if(t){s=t(o);for(var h=0;h<s.length;h++)i.call(o,s[h])&&(l[s[h]]=o[s[h]])}}return l}},703:(e,t,n)=>{"use strict";var i=n(414);function r(){}function a(){}a.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,a,o){if(o!==i){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},229:(e,t,n)=>{"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=u(n(927)),s=n(294),l=u(s),c=u(n(697));function u(e){return e&&e.__esModule?e:{default:e}}window.ApexCharts=o.default;var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return l.default.createRef?n.chartRef=l.default.createRef():n.setRef=function(e){return n.chartRef=e},n.chart=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(e,s.Component),a(e,[{key:"render",value:function(){var e=function(e,t){var n={};for(var i in e)0<=t.indexOf(i)||Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n}(this.props,[]);return l.default.createElement("div",r({ref:l.default.createRef?this.chartRef:this.setRef},e))}},{key:"componentDidMount",value:function(){var e=l.default.createRef?this.chartRef.current:this.chartRef;this.chart=new o.default(e,this.getConfig()),this.chart.render()}},{key:"getConfig",value:function(){var e=this.props,t=e.type,n=e.height,i=e.width,r=e.series,a=e.options,o={chart:{type:t,height:n,width:i},series:r};return this.extend(a,o)}},{key:"isObject",value:function(e){return e&&"object"===(void 0===e?"undefined":i(e))&&!Array.isArray(e)&&null!=e}},{key:"extend",value:function(e,t){var n=this;"function"!=typeof Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t});var i=Object.assign({},e);return this.isObject(e)&&this.isObject(t)&&Object.keys(t).forEach((function(r){n.isObject(t[r])&&r in e?i[r]=n.extend(e[r],t[r]):Object.assign(i,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},r,t[r]))})),i}},{key:"componentDidUpdate",value:function(e){if(!this.chart)return null;var t=this.props,n=t.options,i=t.series,r=t.height,a=t.width,o=JSON.stringify(e.options),s=JSON.stringify(e.series),l=JSON.stringify(n),c=JSON.stringify(i);o===l&&s===c&&r===e.height&&a===e.width||(s===c?this.chart.updateOptions(this.getConfig()):o===l&&r===e.height&&a===e.width?this.chart.updateSeries(i):this.chart.updateOptions(this.getConfig()))}},{key:"componentWillUnmount",value:function(){this.chart&&"function"==typeof this.chart.destroy&&this.chart.destroy()}}]),e}();(t.Z=h).propTypes={type:c.default.string.isRequired,width:c.default.any,height:c.default.any,series:c.default.array.isRequired,options:c.default.object.isRequired},h.defaultProps={type:"line",width:"100%",height:"auto"}},448:(e,t,n)=>{"use strict";var i=n(294),r=n(418),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(o(227));var s=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var h=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,i,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function x(e){return e[1].toUpperCase()}function y(e,t,n,i){var r=v.hasOwnProperty(t)?v[t]:null;(null!==r?0===r.type:!i&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,i)&&(n=null),i||null===r?function(e){return!!f.call(g,e)||!f.call(p,e)&&(d.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,i=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,x);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,x);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,x);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,A=60107,C=60108,E=60114,T=60109,P=60110,L=60112,R=60113,M=60120,I=60115,O=60116,_=60121,N=60128,z=60129,F=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var X=Symbol.for;k=X("react.element"),S=X("react.portal"),A=X("react.fragment"),C=X("react.strict_mode"),E=X("react.profiler"),T=X("react.provider"),P=X("react.context"),L=X("react.forward_ref"),R=X("react.suspense"),M=X("react.suspense_list"),I=X("react.memo"),O=X("react.lazy"),_=X("react.block"),X("react.scope"),N=X("react.opaque.id"),z=X("react.debug_trace_mode"),F=X("react.offscreen"),D=X("react.legacy_hidden")}var B,Y="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Y&&e[Y]||e["@@iterator"])?e:null}function V(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var W=!1;function j(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var i=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){i=e}e.call(t.prototype)}else{try{throw Error()}catch(e){i=e}e()}}catch(e){if(e&&i&&"string"==typeof e.stack){for(var r=e.stack.split("\n"),a=i.stack.split("\n"),o=r.length-1,s=a.length-1;1<=o&&0<=s&&r[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(r[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||r[o]!==a[s])return"\n"+r[o].replace(" at new "," at ")}while(1<=o&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function U(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 22:return j(e.type._render,!1);case 1:return j(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case S:return"Portal";case E:return"Profiler";case C:return"StrictMode";case R:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case L:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case I:return G(e.type);case _:return G(e._render);case O:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Z(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){i=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=$(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?re(e,t.type,n):t.hasOwnProperty("defaultValue")&&re(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ie(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function re(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function oe(e,t,n,i){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&i&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(i&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ce(e,t){var n=q(t.value),i=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var he="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,i){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},xe=["Webkit","ms","Moz","O"];function ye(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=ye(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,r):e[n]=r}}Object.keys(be).forEach((function(e){xe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var ke=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Te=null,Pe=null;function Le(e){if(e=nr(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=rr(t),Ee(e.stateNode,e.type,t))}}function Re(e){Te?Pe?Pe.push(e):Pe=[e]:Te=e}function Me(){if(Te){var e=Te,t=Pe;if(Pe=Te=null,Le(e),t)for(e=0;e<t.length;e++)Le(t[e])}}function Ie(e,t){return e(t)}function Oe(e,t,n,i,r){return e(t,n,i,r)}function _e(){}var Ne=Ie,ze=!1,Fe=!1;function De(){null===Te&&null===Pe||(_e(),Me())}function Xe(e,t){var n=e.stateNode;if(null===n)return null;var i=rr(n);if(null===i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Be=!1;if(h)try{var Ye={};Object.defineProperty(Ye,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ye,Ye),window.removeEventListener("test",Ye,Ye)}catch(ge){Be=!1}function He(e,t,n,i,r,a,o,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ve=!1,We=null,je=!1,Ue=null,Ge={onError:function(e){Ve=!0,We=e}};function qe(e,t,n,i,r,a,o,s,l){Ve=!1,We=null,He.apply(Ge,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Qe(e){if($e(e)!==e)throw Error(o(188))}function Ke(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,i=t;;){var r=n.return;if(null===r)break;var a=r.alternate;if(null===a){if(null!==(i=r.return)){n=i;continue}break}if(r.child===a.child){for(a=r.child;a;){if(a===n)return Qe(r),e;if(a===i)return Qe(r),t;a=a.sibling}throw Error(o(188))}if(n.return!==i.return)n=r,i=a;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,i=a;break}if(l===i){s=!0,i=r,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,i=r;break}if(l===i){s=!0,i=a,n=r;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==i)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,it,rt=!1,at=[],ot=null,st=null,lt=null,ct=new Map,ut=new Map,ht=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,i,r){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[i]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function gt(e,t,n,i,r,a){return null===e||e.nativeEvent!==a?(e=ft(t,n,i,r,a),null!==t&&null!==(t=nr(t))&&tt(t),e):(e.eventSystemFlags|=i,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function mt(e){var t=tr(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void it(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=nr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){vt(e)&&n.delete(t)}function xt(){for(rt=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=nr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ot&&vt(ot)&&(ot=null),null!==st&&vt(st)&&(st=null),null!==lt&&vt(lt)&&(lt=null),ct.forEach(bt),ut.forEach(bt)}function yt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,xt)))}function wt(e){function t(t){return yt(t,e)}if(0<at.length){yt(at[0],e);for(var n=1;n<at.length;n++){var i=at[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==ot&&yt(ot,e),null!==st&&yt(st,e),null!==lt&&yt(lt,e),ct.forEach(t),ut.forEach(t),n=0;n<ht.length;n++)(i=ht[n]).blockedOn===e&&(i.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)mt(n),null===n.blockedOn&&ht.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},At={},Ct={};function Et(e){if(At[e])return At[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return At[e]=n[t];return e}h&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Tt=Et("animationend"),Pt=Et("animationiteration"),Lt=Et("animationstart"),Rt=Et("transitionend"),Mt=new Map,It=new Map,Ot=["abort","abort",Tt,"animationEnd",Pt,"animationIteration",Lt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Rt,"transitionEnd","waiting","waiting"];function _t(e,t){for(var n=0;n<e.length;n+=2){var i=e[n],r=e[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),It.set(i,t),Mt.set(i,r),c(r,[i])}}(0,a.unstable_now)();var Nt=8;function zt(e){if(0!=(1&e))return Nt=15,1;if(0!=(2&e))return Nt=14,2;if(0!=(4&e))return Nt=13,4;var t=24&e;return 0!==t?(Nt=12,t):0!=(32&e)?(Nt=11,32):0!=(t=192&e)?(Nt=10,t):0!=(256&e)?(Nt=9,256):0!=(t=3584&e)?(Nt=8,t):0!=(4096&e)?(Nt=7,4096):0!=(t=4186112&e)?(Nt=6,t):0!=(t=62914560&e)?(Nt=5,t):67108864&e?(Nt=4,67108864):0!=(134217728&e)?(Nt=3,134217728):0!=(t=805306368&e)?(Nt=2,t):0!=(1073741824&e)?(Nt=1,1073741824):(Nt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Nt=0;var i=0,r=0,a=e.expiredLanes,o=e.suspendedLanes,s=e.pingedLanes;if(0!==a)i=a,r=Nt=15;else if(0!=(a=134217727&n)){var l=a&~o;0!==l?(i=zt(l),r=Nt):0!=(s&=a)&&(i=zt(s),r=Nt)}else 0!=(a=n&~o)?(i=zt(a),r=Nt):0!==s&&(i=zt(s),r=Nt);if(0===i)return 0;if(i=n&((0>(i=31-Vt(i))?0:1<<i)<<1)-1,0!==t&&t!==i&&0==(t&o)){if(zt(t),r<=Nt)return t;Nt=r}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=i;0<t;)r=1<<(n=31-Vt(t)),i|=e[n],t&=~r;return i}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Xt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Xt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Xt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function Bt(e){return e&-e}function Yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var i=t-1;e.suspendedLanes&=i,e.pingedLanes&=i,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/jt|0)|0},Wt=Math.log,jt=Math.LN2,Ut=a.unstable_UserBlockingPriority,Gt=a.unstable_runWithPriority,qt=!0;function $t(e,t,n,i){ze||_e();var r=Qt,a=ze;ze=!0;try{Oe(r,e,t,n,i)}finally{(ze=a)||De()}}function Zt(e,t,n,i){Gt(Ut,Qt.bind(null,e,t,n,i))}function Qt(e,t,n,i){var r;if(qt)if((r=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=ft(null,e,t,n,i),at.push(e);else{var a=Kt(e,t,n,i);if(null===a)r&&pt(e,i);else{if(r){if(-1<dt.indexOf(e))return e=ft(a,e,t,n,i),void at.push(e);if(function(e,t,n,i,r){switch(t){case"focusin":return ot=gt(ot,e,t,n,i,r),!0;case"dragenter":return st=gt(st,e,t,n,i,r),!0;case"mouseover":return lt=gt(lt,e,t,n,i,r),!0;case"pointerover":var a=r.pointerId;return ct.set(a,gt(ct.get(a)||null,e,t,n,i,r)),!0;case"gotpointercapture":return a=r.pointerId,ut.set(a,gt(ut.get(a)||null,e,t,n,i,r)),!0}return!1}(a,e,t,n,i))return;pt(e,i)}_i(e,t,i,null,n)}}}function Kt(e,t,n,i){var r=Ce(i);if(null!==(r=tr(r))){var a=$e(r);if(null===a)r=null;else{var o=a.tag;if(13===o){if(null!==(r=Ze(a)))return r;r=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;r=null}else a!==r&&(r=null)}}return _i(e,t,i,r,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,i=n.length,r="value"in Jt?Jt.value:Jt.textContent,a=r.length;for(e=0;e<i&&n[e]===r[e];e++);var o=i-e;for(t=1;t<=o&&n[i-t]===r[a-t];t++);return tn=r.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function sn(e){function t(t,n,i,r,a){for(var o in this._reactName=t,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(r):r[o]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?an:on,this.isPropagationStopped=on,this}return r(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var ln,cn,un,hn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(hn),fn=r({},hn,{view:0,detail:0}),pn=sn(fn),gn=r({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,cn=e.screenY-un.screenY):cn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=sn(gn),vn=sn(r({},gn,{dataTransfer:0})),bn=sn(r({},fn,{relatedTarget:0})),xn=sn(r({},hn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=r({},hn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),wn=sn(yn),kn=sn(r({},hn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Tn(){return En}var Pn=r({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=sn(Pn),Rn=sn(r({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=sn(r({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tn})),In=sn(r({},hn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=r({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),_n=sn(On),Nn=[9,13,27,32],zn=h&&"CompositionEvent"in window,Fn=null;h&&"documentMode"in document&&(Fn=document.documentMode);var Dn=h&&"TextEvent"in window&&!Fn,Xn=h&&(!zn||Fn&&8<Fn&&11>=Fn),Bn=String.fromCharCode(32),Yn=!1;function Hn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,jn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!jn[e.type]:"textarea"===t}function Gn(e,t,n,i){Re(i),0<(t=zi(t,"onChange")).length&&(n=new dn("onChange","change",null,n,i),e.push({event:n,listeners:t}))}var qn=null,$n=null;function Zn(e){Pi(e,0)}function Qn(e){if(Q(ir(e)))return e}function Kn(e,t){if("change"===e)return t}var Jn=!1;if(h){var ei;if(h){var ti="oninput"in document;if(!ti){var ni=document.createElement("div");ni.setAttribute("oninput","return;"),ti="function"==typeof ni.oninput}ei=ti}else ei=!1;Jn=ei&&(!document.documentMode||9<document.documentMode)}function ii(){qn&&(qn.detachEvent("onpropertychange",ri),$n=qn=null)}function ri(e){if("value"===e.propertyName&&Qn($n)){var t=[];if(Gn(t,$n,e,Ce(e)),e=Zn,ze)e(t);else{ze=!0;try{Ie(e,t)}finally{ze=!1,De()}}}}function ai(e,t,n){"focusin"===e?(ii(),$n=n,(qn=t).attachEvent("onpropertychange",ri)):"focusout"===e&&ii()}function oi(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn($n)}function si(e,t){if("click"===e)return Qn(t)}function li(e,t){if("input"===e||"change"===e)return Qn(t)}var ci="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ui=Object.prototype.hasOwnProperty;function hi(e,t){if(ci(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!ui.call(t,n[i])||!ci(e[n[i]],t[n[i]]))return!1;return!0}function di(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fi(e,t){var n,i=di(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=di(i)}}function pi(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pi(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function gi(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function mi(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vi=h&&"documentMode"in document&&11>=document.documentMode,bi=null,xi=null,yi=null,wi=!1;function ki(e,t,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wi||null==bi||bi!==K(i)||(i="selectionStart"in(i=bi)&&mi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},yi&&hi(yi,i)||(yi=i,0<(i=zi(xi,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:i}),t.target=bi)))}_t("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),_t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),_t(Ot,2);for(var Si="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ai=0;Ai<Si.length;Ai++)It.set(Si[Ai],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ci="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ei=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ci));function Ti(e,t,n){var i=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,i,r,a,s,l,c){if(qe.apply(this,arguments),Ve){if(!Ve)throw Error(o(198));var u=We;Ve=!1,We=null,je||(je=!0,Ue=u)}}(i,t,void 0,e),e.currentTarget=null}function Pi(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var i=e[n],r=i.event;i=i.listeners;e:{var a=void 0;if(t)for(var o=i.length-1;0<=o;o--){var s=i[o],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==a&&r.isPropagationStopped())break e;Ti(r,s,c),a=l}else for(o=0;o<i.length;o++){if(l=(s=i[o]).instance,c=s.currentTarget,s=s.listener,l!==a&&r.isPropagationStopped())break e;Ti(r,s,c),a=l}}}if(je)throw e=Ue,je=!1,Ue=null,e}function Li(e,t){var n=ar(t),i=e+"__bubble";n.has(i)||(Oi(t,e,2,!1),n.add(i))}var Ri="_reactListening"+Math.random().toString(36).slice(2);function Mi(e){e[Ri]||(e[Ri]=!0,s.forEach((function(t){Ei.has(t)||Ii(t,!1,e,null),Ii(t,!0,e,null)})))}function Ii(e,t,n,i){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==i&&!t&&Ei.has(e)){if("scroll"!==e)return;r|=2,a=i}var o=ar(a),s=e+"__"+(t?"capture":"bubble");o.has(s)||(t&&(r|=4),Oi(a,e,r,t),o.add(s))}function Oi(e,t,n,i){var r=It.get(t);switch(void 0===r?2:r){case 0:r=$t;break;case 1:r=Zt;break;default:r=Qt}n=r.bind(null,t,n,e),r=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),i?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function _i(e,t,n,i,r){var a=i;if(0==(1&t)&&0==(2&t)&&null!==i)e:for(;;){if(null===i)return;var o=i.tag;if(3===o||4===o){var s=i.stateNode.containerInfo;if(s===r||8===s.nodeType&&s.parentNode===r)break;if(4===o)for(o=i.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;o=o.return}for(;null!==s;){if(null===(o=tr(s)))return;if(5===(l=o.tag)||6===l){i=a=o;continue e}s=s.parentNode}}i=i.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Ne(e,t,n)}finally{Fe=!1,De()}}((function(){var i=a,r=Ce(n),o=[];e:{var s=Mt.get(e);if(void 0!==s){var l=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Ln;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Mn;break;case Tt:case Pt:case Lt:l=xn;break;case Rt:l=In;break;case"scroll":l=pn;break;case"wheel":l=_n;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Rn}var u=0!=(4&t),h=!u&&"scroll"===e,d=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=i;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==d&&null!=(g=Xe(p,d))&&u.push(Ni(p,g,f))),h)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,r),o.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!tr(c)&&!c[Ji])&&(l||s)&&(s=r.window===r?r:(s=r.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?tr(c):null)&&(c!==(h=$e(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=mn,g="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Rn,g="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?s:ir(l),f=null==c?s:ir(c),(s=new u(g,p+"leave",l,n,r)).target=h,s.relatedTarget=f,g=null,tr(r)===i&&((u=new u(d,p+"enter",c,n,r)).target=f,u.relatedTarget=h,g=u),h=g,l&&c)e:{for(d=c,p=0,f=u=l;f;f=Fi(f))p++;for(f=0,g=d;g;g=Fi(g))f++;for(;0<p-f;)u=Fi(u),p--;for(;0<f-p;)d=Fi(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break e;u=Fi(u),d=Fi(d)}u=null}else u=null;null!==l&&Di(o,s,l,u,!1),null!==c&&null!==h&&Di(o,h,c,u,!0)}if("select"===(l=(s=i?ir(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Kn;else if(Un(s))if(Jn)m=li;else{m=oi;var v=ai}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=si);switch(m&&(m=m(e,i))?Gn(o,m,n,r):(v&&v(e,s,i),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&re(s,"number",s.value)),v=i?ir(i):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(bi=v,xi=i,yi=null);break;case"focusout":yi=xi=bi=null;break;case"mousedown":wi=!0;break;case"contextmenu":case"mouseup":case"dragend":wi=!1,ki(o,n,r);break;case"selectionchange":if(vi)break;case"keydown":case"keyup":ki(o,n,r)}var b;if(zn)e:{switch(e){case"compositionstart":var x="onCompositionStart";break e;case"compositionend":x="onCompositionEnd";break e;case"compositionupdate":x="onCompositionUpdate";break e}x=void 0}else Wn?Hn(e,n)&&(x="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(x="onCompositionStart");x&&(Xn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==x?"onCompositionEnd"===x&&Wn&&(b=nn()):(en="value"in(Jt=r)?Jt.value:Jt.textContent,Wn=!0)),0<(v=zi(i,x)).length&&(x=new kn(x,e,null,n,r),o.push({event:x,listeners:v}),(b||null!==(b=Vn(n)))&&(x.data=b))),(b=Dn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Yn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Yn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!zn&&Hn(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Xn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(i=zi(i,"onBeforeInput")).length&&(r=new kn("onBeforeInput","beforeinput",null,n,r),o.push({event:r,listeners:i}),r.data=b)}Pi(o,t)}))}function Ni(e,t,n){return{instance:e,listener:t,currentTarget:n}}function zi(e,t){for(var n=t+"Capture",i=[];null!==e;){var r=e,a=r.stateNode;5===r.tag&&null!==a&&(r=a,null!=(a=Xe(e,n))&&i.unshift(Ni(e,a,r)),null!=(a=Xe(e,t))&&i.push(Ni(e,a,r))),e=e.return}return i}function Fi(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Di(e,t,n,i,r){for(var a=t._reactName,o=[];null!==n&&n!==i;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==c&&(s=c,r?null!=(l=Xe(n,a))&&o.unshift(Ni(n,l,s)):r||null!=(l=Xe(n,a))&&o.push(Ni(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}function Xi(){}var Bi=null,Yi=null;function Hi(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vi(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wi="function"==typeof setTimeout?setTimeout:void 0,ji="function"==typeof clearTimeout?clearTimeout:void 0;function Ui(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Gi(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qi(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $i=0,Zi=Math.random().toString(36).slice(2),Qi="__reactFiber$"+Zi,Ki="__reactProps$"+Zi,Ji="__reactContainer$"+Zi,er="__reactEvents$"+Zi;function tr(e){var t=e[Qi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ji]||n[Qi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qi(e);null!==e;){if(n=e[Qi])return n;e=qi(e)}return t}n=(e=n).parentNode}return null}function nr(e){return!(e=e[Qi]||e[Ji])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ir(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function rr(e){return e[Ki]||null}function ar(e){var t=e[er];return void 0===t&&(t=e[er]=new Set),t}var or=[],sr=-1;function lr(e){return{current:e}}function cr(e){0>sr||(e.current=or[sr],or[sr]=null,sr--)}function ur(e,t){sr++,or[sr]=e.current,e.current=t}var hr={},dr=lr(hr),fr=lr(!1),pr=hr;function gr(e,t){var n=e.type.contextTypes;if(!n)return hr;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var r,a={};for(r in n)a[r]=t[r];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function mr(e){return null!=e.childContextTypes}function vr(){cr(fr),cr(dr)}function br(e,t,n){if(dr.current!==hr)throw Error(o(168));ur(dr,t),ur(fr,n)}function xr(e,t,n){var i=e.stateNode;if(e=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var a in i=i.getChildContext())if(!(a in e))throw Error(o(108,G(t)||"Unknown",a));return r({},n,i)}function yr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||hr,pr=dr.current,ur(dr,e),ur(fr,fr.current),!0}function wr(e,t,n){var i=e.stateNode;if(!i)throw Error(o(169));n?(e=xr(e,t,pr),i.__reactInternalMemoizedMergedChildContext=e,cr(fr),cr(dr),ur(dr,e)):cr(fr),ur(fr,n)}var kr=null,Sr=null,Ar=a.unstable_runWithPriority,Cr=a.unstable_scheduleCallback,Er=a.unstable_cancelCallback,Tr=a.unstable_shouldYield,Pr=a.unstable_requestPaint,Lr=a.unstable_now,Rr=a.unstable_getCurrentPriorityLevel,Mr=a.unstable_ImmediatePriority,Ir=a.unstable_UserBlockingPriority,Or=a.unstable_NormalPriority,_r=a.unstable_LowPriority,Nr=a.unstable_IdlePriority,zr={},Fr=void 0!==Pr?Pr:function(){},Dr=null,Xr=null,Br=!1,Yr=Lr(),Hr=1e4>Yr?Lr:function(){return Lr()-Yr};function Vr(){switch(Rr()){case Mr:return 99;case Ir:return 98;case Or:return 97;case _r:return 96;case Nr:return 95;default:throw Error(o(332))}}function Wr(e){switch(e){case 99:return Mr;case 98:return Ir;case 97:return Or;case 96:return _r;case 95:return Nr;default:throw Error(o(332))}}function jr(e,t){return e=Wr(e),Ar(e,t)}function Ur(e,t,n){return e=Wr(e),Cr(e,t,n)}function Gr(){if(null!==Xr){var e=Xr;Xr=null,Er(e)}qr()}function qr(){if(!Br&&null!==Dr){Br=!0;var e=0;try{var t=Dr;jr(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Dr=null}catch(t){throw null!==Dr&&(Dr=Dr.slice(e+1)),Cr(Mr,Gr),t}finally{Br=!1}}}var $r=w.ReactCurrentBatchConfig;function Zr(e,t){if(e&&e.defaultProps){for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qr=lr(null),Kr=null,Jr=null,ea=null;function ta(){ea=Jr=Kr=null}function na(e){var t=Qr.current;cr(Qr),e.type._context._currentValue=t}function ia(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ra(e,t){Kr=e,ea=Jr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(zo=!0),e.firstContext=null)}function aa(e,t){if(ea!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ea=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jr){if(null===Kr)throw Error(o(308));Jr=t,Kr.dependencies={lanes:0,firstContext:t,responders:null}}else Jr=Jr.next=t;return e._currentValue}var oa=!1;function sa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ha(e,t){var n=e.updateQueue,i=e.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?r=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?r=a=t:a=a.next=t}else r=a=t;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:a,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function da(e,t,n,i){var a=e.updateQueue;oa=!1;var o=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?o=u:s.next=u,s=c;var h=e.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==s&&(null===d?h.firstBaseUpdate=u:d.next=u,h.lastBaseUpdate=c)}}if(null!==o){for(d=a.baseState,s=0,h=u=c=null;;){l=o.lane;var f=o.eventTime;if((i&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,g=o;switch(l=t,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,l);break e}d=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,d,l):p))break e;d=r({},d,l);break e;case 2:oa=!0}}null!==o.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[o]:l.push(o))}else f={eventTime:f,lane:l,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===h?(u=h=f,c=d):h=h.next=f,s|=l;if(null===(o=o.next)){if(null===(l=a.shared.pending))break;o=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===h&&(c=d),a.baseState=c,a.firstBaseUpdate=u,a.lastBaseUpdate=h,Ds|=s,e.lanes=s,e.memoizedState=d}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(o(191,r));r.call(i)}}}var pa=(new i.Component).refs;function ga(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ma={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var i=cl(),r=ul(e),a=ca(i,r);a.payload=t,null!=n&&(a.callback=n),ua(e,a),hl(e,r,i)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var i=cl(),r=ul(e),a=ca(i,r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),hl(e,r,i)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=cl(),i=ul(e),r=ca(n,i);r.tag=2,null!=t&&(r.callback=t),ua(e,r),hl(e,i,n)}};function va(e,t,n,i,r,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&hi(n,i)&&hi(r,a))}function ba(e,t,n){var i=!1,r=hr,a=t.contextType;return"object"==typeof a&&null!==a?a=aa(a):(r=mr(t)?pr:dr.current,a=(i=null!=(i=t.contextTypes))?gr(e,r):hr),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ma,e.stateNode=t,t._reactInternals=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t}function xa(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&ma.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,i){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=pa,sa(e);var a=t.contextType;"object"==typeof a&&null!==a?r.context=aa(a):(a=mr(t)?pr:dr.current,r.context=gr(e,a)),da(e,n,r,i),r.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ga(e,t,a,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&ma.enqueueReplaceState(r,r.state,null),da(e,n,r,i),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var i=n.stateNode}if(!i)throw Error(o(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:(t=function(e){var t=i.refs;t===pa&&(t=i.refs={}),null===e?delete t[r]:t[r]=e},t._stringRef=r,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Aa(e){function t(t,n){if(e){var i=t.lastEffect;null!==i?(i.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Vl(e,t)).index=0,e.sibling=null,e}function a(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.flags=2,n):i:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,i){return null===t||6!==t.tag?((t=Gl(n,e.mode,i)).return=e,t):((t=r(t,n)).return=e,t)}function c(e,t,n,i){return null!==t&&t.elementType===n.type?((i=r(t,n.props)).ref=ka(e,t,n),i.return=e,i):((i=Wl(n.type,n.key,n.props,null,e.mode,i)).ref=ka(e,t,n),i.return=e,i)}function u(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ql(n,e.mode,i)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function h(e,t,n,i,a){return null===t||7!==t.tag?((t=jl(n,e.mode,i,a)).return=e,t):((t=r(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Wl(t.type,t.key,t.props,null,e.mode,n)).ref=ka(e,null,t),n.return=e,n;case S:return(t=ql(t,e.mode,n)).return=e,t}if(wa(t)||H(t))return(t=jl(t,e.mode,n,null)).return=e,t;Sa(e,t)}return null}function f(e,t,n,i){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===r?n.type===A?h(e,t,n.props.children,i,r):c(e,t,n,i):null;case S:return n.key===r?u(e,t,n,i):null}if(wa(n)||H(n))return null!==r?null:h(e,t,n,i,null);Sa(e,n)}return null}function p(e,t,n,i,r){if("string"==typeof i||"number"==typeof i)return l(t,e=e.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case k:return e=e.get(null===i.key?n:i.key)||null,i.type===A?h(t,e,i.props.children,r,i.key):c(t,e,i,r);case S:return u(t,e=e.get(null===i.key?n:i.key)||null,i,r)}if(wa(i)||H(i))return h(t,e=e.get(n)||null,i,r,null);Sa(t,i)}return null}function g(r,o,s,l){for(var c=null,u=null,h=o,g=o=0,m=null;null!==h&&g<s.length;g++){h.index>g?(m=h,h=null):m=h.sibling;var v=f(r,h,s[g],l);if(null===v){null===h&&(h=m);break}e&&h&&null===v.alternate&&t(r,h),o=a(v,o,g),null===u?c=v:u.sibling=v,u=v,h=m}if(g===s.length)return n(r,h),c;if(null===h){for(;g<s.length;g++)null!==(h=d(r,s[g],l))&&(o=a(h,o,g),null===u?c=h:u.sibling=h,u=h);return c}for(h=i(r,h);g<s.length;g++)null!==(m=p(h,r,g,s[g],l))&&(e&&null!==m.alternate&&h.delete(null===m.key?g:m.key),o=a(m,o,g),null===u?c=m:u.sibling=m,u=m);return e&&h.forEach((function(e){return t(r,e)})),c}function m(r,s,l,c){var u=H(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var h=u=null,g=s,m=s=0,v=null,b=l.next();null!==g&&!b.done;m++,b=l.next()){g.index>m?(v=g,g=null):v=g.sibling;var x=f(r,g,b.value,c);if(null===x){null===g&&(g=v);break}e&&g&&null===x.alternate&&t(r,g),s=a(x,s,m),null===h?u=x:h.sibling=x,h=x,g=v}if(b.done)return n(r,g),u;if(null===g){for(;!b.done;m++,b=l.next())null!==(b=d(r,b.value,c))&&(s=a(b,s,m),null===h?u=b:h.sibling=b,h=b);return u}for(g=i(r,g);!b.done;m++,b=l.next())null!==(b=p(g,r,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=a(b,s,m),null===h?u=b:h.sibling=b,h=b);return e&&g.forEach((function(e){return t(r,e)})),u}return function(e,i,a,l){var c="object"==typeof a&&null!==a&&a.type===A&&null===a.key;c&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case k:e:{for(u=a.key,c=i;null!==c;){if(c.key===u){if(7===c.tag){if(a.type===A){n(e,c.sibling),(i=r(c,a.props.children)).return=e,e=i;break e}}else if(c.elementType===a.type){n(e,c.sibling),(i=r(c,a.props)).ref=ka(e,c,a),i.return=e,e=i;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===A?((i=jl(a.props.children,e.mode,l,a.key)).return=e,e=i):((l=Wl(a.type,a.key,a.props,null,e.mode,l)).ref=ka(e,i,a),l.return=e,e=l)}return s(e);case S:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(e,i.sibling),(i=r(i,a.children||[])).return=e,e=i;break e}n(e,i);break}t(e,i),i=i.sibling}(i=ql(a,e.mode,l)).return=e,e=i}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==i&&6===i.tag?(n(e,i.sibling),(i=r(i,a)).return=e,e=i):(n(e,i),(i=Gl(a,e.mode,l)).return=e,e=i),s(e);if(wa(a))return g(e,i,a,l);if(H(a))return m(e,i,a,l);if(u&&Sa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,G(e.type)||"Component"))}return n(e,i)}}var Ca=Aa(!0),Ea=Aa(!1),Ta={},Pa=lr(Ta),La=lr(Ta),Ra=lr(Ta);function Ma(e){if(e===Ta)throw Error(o(174));return e}function Ia(e,t){switch(ur(Ra,t),ur(La,e),ur(Pa,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}cr(Pa),ur(Pa,t)}function Oa(){cr(Pa),cr(La),cr(Ra)}function _a(e){Ma(Ra.current);var t=Ma(Pa.current),n=fe(t,e.type);t!==n&&(ur(La,e),ur(Pa,n))}function Na(e){La.current===e&&(cr(Pa),cr(La))}var za=lr(0);function Fa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Xa=null,Ba=!1;function Ya(e,t){var n=Yl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ha(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Va(e){if(Ba){var t=Xa;if(t){var n=t;if(!Ha(e,t)){if(!(t=Gi(n.nextSibling))||!Ha(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Da=e);Ya(Da,n)}Da=e,Xa=Gi(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Da=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function ja(e){if(e!==Da)return!1;if(!Ba)return Wa(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vi(t,e.memoizedProps))for(t=Xa;t;)Ya(e,t),t=Gi(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Xa=Gi(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Xa=null}}else Xa=Da?Gi(e.stateNode.nextSibling):null;return!0}function Ua(){Xa=Da=null,Ba=!1}var Ga=[];function qa(){for(var e=0;e<Ga.length;e++)Ga[e]._workInProgressVersionPrimary=null;Ga.length=0}var $a=w.ReactCurrentDispatcher,Za=w.ReactCurrentBatchConfig,Qa=0,Ka=null,Ja=null,eo=null,to=!1,no=!1;function io(){throw Error(o(321))}function ro(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ci(e[n],t[n]))return!1;return!0}function ao(e,t,n,i,r,a){if(Qa=a,Ka=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$a.current=null===e||null===e.memoizedState?Io:Oo,e=n(i,r),no){a=0;do{if(no=!1,!(25>a))throw Error(o(301));a+=1,eo=Ja=null,t.updateQueue=null,$a.current=_o,e=n(i,r)}while(no)}if($a.current=Mo,t=null!==Ja&&null!==Ja.next,Qa=0,eo=Ja=Ka=null,to=!1,t)throw Error(o(300));return e}function oo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===eo?Ka.memoizedState=eo=e:eo=eo.next=e,eo}function so(){if(null===Ja){var e=Ka.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===eo?Ka.memoizedState:eo.next;if(null!==t)eo=t,Ja=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===eo?Ka.memoizedState=eo=e:eo=eo.next=e}return eo}function lo(e,t){return"function"==typeof t?t(e):t}function co(e){var t=so(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var i=Ja,r=i.baseQueue,a=n.pending;if(null!==a){if(null!==r){var s=r.next;r.next=a.next,a.next=s}i.baseQueue=r=a,n.pending=null}if(null!==r){r=r.next,i=i.baseState;var l=s=a=null,c=r;do{var u=c.lane;if((Qa&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),i=c.eagerReducer===e?c.eagerState:e(i,c.action);else{var h={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=h,a=i):l=l.next=h,Ka.lanes|=u,Ds|=u}c=c.next}while(null!==c&&c!==r);null===l?a=i:l.next=s,ci(i,t.memoizedState)||(zo=!0),t.memoizedState=i,t.baseState=a,t.baseQueue=l,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function uo(e){var t=so(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var i=n.dispatch,r=n.pending,a=t.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{a=e(a,s.action),s=s.next}while(s!==r);ci(a,t.memoizedState)||(zo=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,i]}function ho(e,t,n){var i=t._getVersion;i=i(t._source);var r=t._workInProgressVersionPrimary;if(null!==r?e=r===i:(e=e.mutableReadLanes,(e=(Qa&e)===e)&&(t._workInProgressVersionPrimary=i,Ga.push(t))),e)return n(t._source);throw Ga.push(t),Error(o(350))}function fo(e,t,n,i){var r=Rs;if(null===r)throw Error(o(349));var a=t._getVersion,s=a(t._source),l=$a.current,c=l.useState((function(){return ho(r,t,n)})),u=c[1],h=c[0];c=eo;var d=e.memoizedState,f=d.refs,p=f.getSnapshot,g=d.source;d=d.subscribe;var m=Ka;return e.memoizedState={refs:f,source:t,subscribe:i},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var e=a(t._source);if(!ci(s,e)){e=n(t._source),ci(h,e)||(u(e),e=ul(m),r.mutableReadLanes|=e&r.pendingLanes),e=r.mutableReadLanes,r.entangledLanes|=e;for(var i=r.entanglements,o=e;0<o;){var l=31-Vt(o),c=1<<l;i[l]|=e,o&=~c}}}),[n,t,i]),l.useEffect((function(){return i(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var i=ul(m);r.mutableReadLanes|=i&r.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,i]),ci(p,n)&&ci(g,t)&&ci(d,i)||((e={pending:null,dispatch:null,lastRenderedReducer:lo,lastRenderedState:h}).dispatch=u=Ro.bind(null,Ka,e),c.queue=e,c.baseQueue=null,h=ho(r,t,n),c.memoizedState=c.baseState=h),h}function po(e,t,n){return fo(so(),e,t,n)}function go(e){var t=oo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:lo,lastRenderedState:e}).dispatch=Ro.bind(null,Ka,e),[t.memoizedState,e]}function mo(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=Ka.updateQueue)?(t={lastEffect:null},Ka.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function vo(e){return e={current:e},oo().memoizedState=e}function bo(){return so().memoizedState}function xo(e,t,n,i){var r=oo();Ka.flags|=e,r.memoizedState=mo(1|t,n,void 0,void 0===i?null:i)}function yo(e,t,n,i){var r=so();i=void 0===i?null:i;var a=void 0;if(null!==Ja){var o=Ja.memoizedState;if(a=o.destroy,null!==i&&ro(i,o.deps))return void mo(t,n,a,i)}Ka.flags|=e,r.memoizedState=mo(1|t,n,a,i)}function wo(e,t){return xo(516,4,e,t)}function ko(e,t){return yo(516,4,e,t)}function So(e,t){return yo(4,2,e,t)}function Ao(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Co(e,t,n){return n=null!=n?n.concat([e]):null,yo(4,2,Ao.bind(null,t,e),n)}function Eo(){}function To(e,t){var n=so();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&ro(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function Po(e,t){var n=so();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&ro(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function Lo(e,t){var n=Vr();jr(98>n?98:n,(function(){e(!0)})),jr(97<n?97:n,(function(){var n=Za.transition;Za.transition=1;try{e(!1),t()}finally{Za.transition=n}}))}function Ro(e,t,n){var i=cl(),r=ul(e),a={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===Ka||null!==o&&o===Ka)no=to=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=o(s,n);if(a.eagerReducer=o,a.eagerState=l,ci(l,s))return}catch(e){}hl(e,r,i)}}var Mo={readContext:aa,useCallback:io,useContext:io,useEffect:io,useImperativeHandle:io,useLayoutEffect:io,useMemo:io,useReducer:io,useRef:io,useState:io,useDebugValue:io,useDeferredValue:io,useTransition:io,useMutableSource:io,useOpaqueIdentifier:io,unstable_isNewReconciler:!1},Io={readContext:aa,useCallback:function(e,t){return oo().memoizedState=[e,void 0===t?null:t],e},useContext:aa,useEffect:wo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,xo(4,2,Ao.bind(null,t,e),n)},useLayoutEffect:function(e,t){return xo(4,2,e,t)},useMemo:function(e,t){var n=oo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=oo();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e=(e=i.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ro.bind(null,Ka,e),[i.memoizedState,e]},useRef:vo,useState:go,useDebugValue:Eo,useDeferredValue:function(e){var t=go(e),n=t[0],i=t[1];return wo((function(){var t=Za.transition;Za.transition=1;try{i(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=go(!1),t=e[0];return vo(e=Lo.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var i=oo();return i.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fo(i,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:N,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($i++).toString(36))),Error(o(355))})),n=go(t)[1];return 0==(2&Ka.mode)&&(Ka.flags|=516,mo(5,(function(){n("r:"+($i++).toString(36))}),void 0,null)),t}return go(t="r:"+($i++).toString(36)),t},unstable_isNewReconciler:!1},Oo={readContext:aa,useCallback:To,useContext:aa,useEffect:ko,useImperativeHandle:Co,useLayoutEffect:So,useMemo:Po,useReducer:co,useRef:bo,useState:function(){return co(lo)},useDebugValue:Eo,useDeferredValue:function(e){var t=co(lo),n=t[0],i=t[1];return ko((function(){var t=Za.transition;Za.transition=1;try{i(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=co(lo)[0];return[bo().current,e]},useMutableSource:po,useOpaqueIdentifier:function(){return co(lo)[0]},unstable_isNewReconciler:!1},_o={readContext:aa,useCallback:To,useContext:aa,useEffect:ko,useImperativeHandle:Co,useLayoutEffect:So,useMemo:Po,useReducer:uo,useRef:bo,useState:function(){return uo(lo)},useDebugValue:Eo,useDeferredValue:function(e){var t=uo(lo),n=t[0],i=t[1];return ko((function(){var t=Za.transition;Za.transition=1;try{i(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=uo(lo)[0];return[bo().current,e]},useMutableSource:po,useOpaqueIdentifier:function(){return uo(lo)[0]},unstable_isNewReconciler:!1},No=w.ReactCurrentOwner,zo=!1;function Fo(e,t,n,i){t.child=null===e?Ea(t,null,n,i):Ca(t,e.child,n,i)}function Do(e,t,n,i,r){n=n.render;var a=t.ref;return ra(t,r),i=ao(e,t,n,i,a,r),null===e||zo?(t.flags|=1,Fo(e,t,i,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,ns(e,t,r))}function Xo(e,t,n,i,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Hl(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wl(n.type,null,i,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Bo(e,t,o,i,r,a))}return o=e.child,0==(r&a)&&(r=o.memoizedProps,(n=null!==(n=n.compare)?n:hi)(r,i)&&e.ref===t.ref)?ns(e,t,a):(t.flags|=1,(e=Vl(o,i)).ref=t.ref,e.return=t,t.child=e)}function Bo(e,t,n,i,r,a){if(null!==e&&hi(e.memoizedProps,i)&&e.ref===t.ref){if(zo=!1,0==(a&r))return t.lanes=e.lanes,ns(e,t,a);0!=(16384&e.flags)&&(zo=!0)}return Vo(e,t,n,i,a)}function Yo(e,t,n){var i=t.pendingProps,r=i.children,a=null!==e?e.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},xl(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},xl(0,e),null;t.memoizedState={baseLanes:0},xl(0,null!==a?a.baseLanes:n)}else null!==a?(i=a.baseLanes|n,t.memoizedState=null):i=n,xl(0,i);return Fo(e,t,r,n),t.child}function Ho(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Vo(e,t,n,i,r){var a=mr(n)?pr:dr.current;return a=gr(t,a),ra(t,r),n=ao(e,t,n,i,a,r),null===e||zo?(t.flags|=1,Fo(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,ns(e,t,r))}function Wo(e,t,n,i,r){if(mr(n)){var a=!0;yr(t)}else a=!1;if(ra(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,i),ya(t,n,i,r),i=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,c=n.contextType;c="object"==typeof c&&null!==c?aa(c):gr(t,c=mr(n)?pr:dr.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate;h||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==i||l!==c)&&xa(t,o,i,c),oa=!1;var d=t.memoizedState;o.state=d,da(t,i,o,r),l=t.memoizedState,s!==i||d!==l||fr.current||oa?("function"==typeof u&&(ga(t,n,u,i),l=t.memoizedState),(s=oa||va(t,n,s,i,d,l,c))?(h||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=i,t.memoizedState=l),o.props=i,o.state=l,o.context=c,i=s):("function"==typeof o.componentDidMount&&(t.flags|=4),i=!1)}else{o=t.stateNode,la(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Zr(t.type,s),o.props=c,h=t.pendingProps,d=o.context,l="object"==typeof(l=n.contextType)&&null!==l?aa(l):gr(t,l=mr(n)?pr:dr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==h||d!==l)&&xa(t,o,i,l),oa=!1,d=t.memoizedState,o.state=d,da(t,i,o,r);var p=t.memoizedState;s!==h||d!==p||fr.current||oa?("function"==typeof f&&(ga(t,n,f,i),p=t.memoizedState),(c=oa||va(t,n,c,i,d,p,l))?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(i,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=i,t.memoizedState=p),o.props=i,o.state=p,o.context=l,i=c):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),i=!1)}return jo(e,t,n,i,a,r)}function jo(e,t,n,i,r,a){Ho(e,t);var o=0!=(64&t.flags);if(!i&&!o)return r&&wr(t,n,!1),ns(e,t,a);i=t.stateNode,No.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.flags|=1,null!==e&&o?(t.child=Ca(t,e.child,null,a),t.child=Ca(t,null,s,a)):Fo(e,t,s,a),t.memoizedState=i.state,r&&wr(t,n,!0),t.child}function Uo(e){var t=e.stateNode;t.pendingContext?br(0,t.pendingContext,t.pendingContext!==t.context):t.context&&br(0,t.context,!1),Ia(e,t.containerInfo)}var Go,qo,$o,Zo={dehydrated:null,retryLane:0};function Qo(e,t,n){var i,r=t.pendingProps,a=za.current,o=!1;return(i=0!=(64&t.flags))||(i=(null===e||null!==e.memoizedState)&&0!=(2&a)),i?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(a|=1),ur(za,1&a),null===e?(void 0!==r.fallback&&Va(t),e=r.children,a=r.fallback,o?(e=Ko(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Zo,e):"number"==typeof r.unstable_expectedLoadTime?(e=Ko(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Zo,t.lanes=33554432,e):((n=Ul({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(r=function(e,t,n,i,r){var a=t.mode,o=e.child;e=o.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=s,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Vl(o,s),null!==e?i=Vl(e,i):(i=jl(i,a,r,null)).flags|=2,i.return=t,n.return=t,n.sibling=i,t.child=n,i}(e,t,r.children,r.fallback,n),o=t.child,a=e.child.memoizedState,o.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=Zo,r):(n=function(e,t,n,i){var r=e.child;return e=r.sibling,n=Vl(r,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=i),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,r.children,n),t.memoizedState=null,n))}function Ko(e,t,n,i){var r=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&r)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Ul(t,r,0,null),n=jl(n,r,i,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Jo(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ia(e.return,t)}function es(e,t,n,i,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=i,o.tail=n,o.tailMode=r,o.lastEffect=a)}function ts(e,t,n){var i=t.pendingProps,r=i.revealOrder,a=i.tail;if(Fo(e,t,i.children,n),0!=(2&(i=za.current)))i=1&i|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Jo(e,n);else if(19===e.tag)Jo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(ur(za,i),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Fa(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),es(t,!1,r,n,a,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Fa(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}es(t,!0,n,null,a,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ds|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Vl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function is(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function rs(e,t,n){var i=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mr(t.type)&&vr(),null;case 3:return Oa(),cr(fr),cr(dr),qa(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==e&&null!==e.child||(ja(t)?t.flags|=4:i.hydrate||(t.flags|=256)),null;case 5:Na(t);var a=Ma(Ra.current);if(n=t.type,null!==e&&null!=t.stateNode)qo(e,t,n,i),e.ref!==t.ref&&(t.flags|=128);else{if(!i){if(null===t.stateNode)throw Error(o(166));return null}if(e=Ma(Pa.current),ja(t)){i=t.stateNode,n=t.type;var s=t.memoizedProps;switch(i[Qi]=t,i[Ki]=s,n){case"dialog":Li("cancel",i),Li("close",i);break;case"iframe":case"object":case"embed":Li("load",i);break;case"video":case"audio":for(e=0;e<Ci.length;e++)Li(Ci[e],i);break;case"source":Li("error",i);break;case"img":case"image":case"link":Li("error",i),Li("load",i);break;case"details":Li("toggle",i);break;case"input":ee(i,s),Li("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Li("invalid",i);break;case"textarea":le(i,s),Li("invalid",i)}for(var c in Se(n,s),e=null,s)s.hasOwnProperty(c)&&(a=s[c],"children"===c?"string"==typeof a?i.textContent!==a&&(e=["children",a]):"number"==typeof a&&i.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Li("scroll",i));switch(n){case"input":Z(i),ie(i,s,!0);break;case"textarea":Z(i),ue(i);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(i.onclick=Xi)}i=e,t.updateQueue=i,null!==i&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===he&&(e=de(n)),e===he?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=c.createElement(n,{is:i.is}):(e=c.createElement(n),"select"===n&&(c=e,i.multiple?c.multiple=!0:i.size&&(c.size=i.size))):e=c.createElementNS(e,n),e[Qi]=t,e[Ki]=i,Go(e,t),t.stateNode=e,c=Ae(n,i),n){case"dialog":Li("cancel",e),Li("close",e),a=i;break;case"iframe":case"object":case"embed":Li("load",e),a=i;break;case"video":case"audio":for(a=0;a<Ci.length;a++)Li(Ci[a],e);a=i;break;case"source":Li("error",e),a=i;break;case"img":case"image":case"link":Li("error",e),Li("load",e),a=i;break;case"details":Li("toggle",e),a=i;break;case"input":ee(e,i),a=J(e,i),Li("invalid",e);break;case"option":a=ae(e,i);break;case"select":e._wrapperState={wasMultiple:!!i.multiple},a=r({},i,{value:void 0}),Li("invalid",e);break;case"textarea":le(e,i),a=se(e,i),Li("invalid",e);break;default:a=i}Se(n,a);var u=a;for(s in u)if(u.hasOwnProperty(s)){var h=u[s];"style"===s?we(e,h):"dangerouslySetInnerHTML"===s?null!=(h=h?h.__html:void 0)&&me(e,h):"children"===s?"string"==typeof h?("textarea"!==n||""!==h)&&ve(e,h):"number"==typeof h&&ve(e,""+h):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=h&&"onScroll"===s&&Li("scroll",e):null!=h&&y(e,s,h,c))}switch(n){case"input":Z(e),ie(e,i,!1);break;case"textarea":Z(e),ue(e);break;case"option":null!=i.value&&e.setAttribute("value",""+q(i.value));break;case"select":e.multiple=!!i.multiple,null!=(s=i.value)?oe(e,!!i.multiple,s,!1):null!=i.defaultValue&&oe(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Xi)}Hi(n,i)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$o(0,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(o(166));n=Ma(Ra.current),Ma(Pa.current),ja(t)?(i=t.stateNode,n=t.memoizedProps,i[Qi]=t,i.nodeValue!==n&&(t.flags|=4)):((i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Qi]=t,t.stateNode=i)}return null;case 13:return cr(za),i=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(i=null!==i,n=!1,null===e?void 0!==t.memoizedProps.fallback&&ja(t):n=null!==e.memoizedState,i&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&za.current)?0===Ns&&(Ns=3):(0!==Ns&&3!==Ns||(Ns=4),null===Rs||0==(134217727&Ds)&&0==(134217727&Xs)||gl(Rs,Is))),(i||n)&&(t.flags|=4),null);case 4:return Oa(),null===e&&Mi(t.stateNode.containerInfo),null;case 10:return na(t),null;case 19:if(cr(za),null===(i=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(c=i.rendering))if(s)is(i,!1);else{if(0!==Ns||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Fa(e))){for(t.flags|=64,is(i,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=n,n=t.child;null!==n;)e=i,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ur(za,1&za.current|2),t.child}e=e.sibling}null!==i.tail&&Hr()>Vs&&(t.flags|=64,s=!0,is(i,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Fa(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),is(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!Ba)return null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null),null}else 2*Hr()-i.renderingStartTime>Vs&&1073741824!==n&&(t.flags|=64,s=!0,is(i,!1),t.lanes=33554432);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=t.lastEffect,i.renderingStartTime=Hr(),n.sibling=null,t=za.current,ur(za,s?1&t|2:1&t),n):null;case 23:case 24:return yl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==i.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function as(e){switch(e.tag){case 1:mr(e.type)&&vr();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Oa(),cr(fr),cr(dr),qa(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Na(e),null;case 13:return cr(za),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return cr(za),null;case 4:return Oa(),null;case 10:return na(e),null;case 23:case 24:return yl(),null;default:return null}}function os(e,t){try{var n="",i=t;do{n+=U(i),i=i.return}while(i);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Go=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qo=function(e,t,n,i){var a=e.memoizedProps;if(a!==i){e=t.stateNode,Ma(Pa.current);var o,s=null;switch(n){case"input":a=J(e,a),i=J(e,i),s=[];break;case"option":a=ae(e,a),i=ae(e,i),s=[];break;case"select":a=r({},a,{value:void 0}),i=r({},i,{value:void 0}),s=[];break;case"textarea":a=se(e,a),i=se(e,i),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof i.onClick&&(e.onclick=Xi)}for(h in Se(n,i),n=null,a)if(!i.hasOwnProperty(h)&&a.hasOwnProperty(h)&&null!=a[h])if("style"===h){var c=a[h];for(o in c)c.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(l.hasOwnProperty(h)?s||(s=[]):(s=s||[]).push(h,null));for(h in i){var u=i[h];if(c=null!=a?a[h]:void 0,i.hasOwnProperty(h)&&u!==c&&(null!=u||null!=c))if("style"===h)if(c){for(o in c)!c.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&c[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(s||(s=[]),s.push(h,n)),n=u;else"dangerouslySetInnerHTML"===h?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(h,u)):"children"===h?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(h,""+u):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(l.hasOwnProperty(h)?(null!=u&&"onScroll"===h&&Li("scroll",e),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===N?u.toString():(s=s||[]).push(h,u))}n&&(s=s||[]).push("style",n);var h=s;(t.updateQueue=h)&&(t.flags|=4)}},$o=function(e,t,n,i){n!==i&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function cs(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Gs||(Gs=!0,qs=i),ss(0,t)},n}function us(e,t,n){(n=ca(-1,n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var r=t.value;n.payload=function(){return ss(0,t),i(r)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===$s?$s=new Set([this]):$s.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var hs="function"==typeof WeakSet?WeakSet:Set;function ds(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fl(e,t)}else t.current=null}function fs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,i=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zr(t.type,n),i),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ui(t.stateNode.containerInfo))}throw Error(o(163))}function ps(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var i=e.create;e.destroy=i()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var r=e;i=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(_l(n,e),Ol(n,e)),e=i}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(i=n.elementType===n.type?t.memoizedProps:Zr(n.type,t.memoizedProps),e.componentDidUpdate(i,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Hi(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))))}throw Error(o(163))}function gs(e,t){for(var n=e;;){if(5===n.tag){var i=n.stateNode;if(t)"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{i=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,i.style.display=ye("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(e,t){if(Sr&&"function"==typeof Sr.onCommitFiberUnmount)try{Sr.onCommitFiberUnmount(kr,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var i=n,r=i.destroy;if(i=i.tag,void 0!==r)if(0!=(4&i))_l(t,n);else{i=t;try{r()}catch(e){Fl(i,e)}}n=n.next}while(n!==e)}break;case 1:if(ds(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Fl(t,e)}break;case 5:ds(t);break;case 4:ks(e,t)}}function vs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function bs(e){return 5===e.tag||3===e.tag||4===e.tag}function xs(e){e:{for(var t=e.return;null!==t;){if(bs(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:t=t.containerInfo,i=!0;break;default:throw Error(o(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||bs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}i?ys(e,n,t):ws(e,n,t)}function ys(e,t,n){var i=e.tag,r=5===i||6===i;if(r)e=r?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xi));else if(4!==i&&null!==(e=e.child))for(ys(e,t,n),e=e.sibling;null!==e;)ys(e,t,n),e=e.sibling}function ws(e,t,n){var i=e.tag,r=5===i||6===i;if(r)e=r?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==i&&null!==(e=e.child))for(ws(e,t,n),e=e.sibling;null!==e;)ws(e,t,n),e=e.sibling}function ks(e,t){for(var n,i,r=t,a=!1;;){if(!a){a=r.return;e:for(;;){if(null===a)throw Error(o(160));switch(n=a.stateNode,a.tag){case 5:i=!1;break e;case 3:case 4:n=n.containerInfo,i=!0;break e}a=a.return}a=!0}if(5===r.tag||6===r.tag){e:for(var s=e,l=r,c=l;;)if(ms(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(s=n,l=r.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,i=!0,r.child.return=r,r=r.child;continue}}else if(ms(e,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;4===(r=r.return).tag&&(a=!1)}r.sibling.return=r.return,r=r.sibling}}function Ss(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{3==(3&i.tag)&&(e=i.destroy,i.destroy=void 0,void 0!==e&&e()),i=i.next}while(i!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){i=t.memoizedProps;var r=null!==e?e.memoizedProps:i;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Ki]=i,"input"===e&&"radio"===i.type&&null!=i.name&&te(n,i),Ae(e,r),t=Ae(e,i),r=0;r<a.length;r+=2){var s=a[r],l=a[r+1];"style"===s?we(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?ve(n,l):y(n,s,l,t)}switch(e){case"input":ne(n,i);break;case"textarea":ce(n,i);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(a=i.value)?oe(n,!!i.multiple,a,!1):e!==!!i.multiple&&(null!=i.defaultValue?oe(n,!!i.multiple,i.defaultValue,!0):oe(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Hs=Hr(),gs(t.child,!0)),void As(t);case 19:return void As(t);case 23:case 24:return void gs(t,null!==t.memoizedState)}throw Error(o(163))}function As(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new hs),t.forEach((function(t){var i=Xl.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}function Cs(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Es=Math.ceil,Ts=w.ReactCurrentDispatcher,Ps=w.ReactCurrentOwner,Ls=0,Rs=null,Ms=null,Is=0,Os=0,_s=lr(0),Ns=0,zs=null,Fs=0,Ds=0,Xs=0,Bs=0,Ys=null,Hs=0,Vs=1/0;function Ws(){Vs=Hr()+500}var js,Us=null,Gs=!1,qs=null,$s=null,Zs=!1,Qs=null,Ks=90,Js=[],el=[],tl=null,nl=0,il=null,rl=-1,al=0,ol=0,sl=null,ll=!1;function cl(){return 0!=(48&Ls)?Hr():-1!==rl?rl:rl=Hr()}function ul(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Vr()?1:2;if(0===al&&(al=Fs),0!==$r.transition){0!==ol&&(ol=null!==Ys?Ys.pendingLanes:0),e=al;var t=4186112&~ol;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Vr(),e=Xt(0!=(4&Ls)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),al)}function hl(e,t,n){if(50<nl)throw nl=0,il=null,Error(o(185));if(null===(e=dl(e,t)))return null;Ht(e,t,n),e===Rs&&(Xs|=t,4===Ns&&gl(e,Is));var i=Vr();1===t?0!=(8&Ls)&&0==(48&Ls)?ml(e):(fl(e,n),0===Ls&&(Ws(),Gr())):(0==(4&Ls)||98!==i&&99!==i||(null===tl?tl=new Set([e]):tl.add(e)),fl(e,n)),Ys=e}function dl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fl(e,t){for(var n=e.callbackNode,i=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Vt(s),c=1<<l,u=a[l];if(-1===u){if(0==(c&i)||0!=(c&r)){u=t,zt(c);var h=Nt;a[l]=10<=h?u+250:6<=h?u+5e3:-1}}else u<=t&&(e.expiredLanes|=c);s&=~c}if(i=Ft(e,e===Rs?Is:0),t=Nt,0===i)null!==n&&(n!==zr&&Er(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==zr&&Er(n)}15===t?(n=ml.bind(null,e),null===Dr?(Dr=[n],Xr=Cr(Mr,qr)):Dr.push(n),n=zr):14===t?n=Ur(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),n=Ur(n,pl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function pl(e){if(rl=-1,ol=al=0,0!=(48&Ls))throw Error(o(327));var t=e.callbackNode;if(Il()&&e.callbackNode!==t)return null;var n=Ft(e,e===Rs?Is:0);if(0===n)return null;var i=n,r=Ls;Ls|=16;var a=Sl();for(Rs===e&&Is===i||(Ws(),wl(e,i));;)try{El();break}catch(t){kl(e,t)}if(ta(),Ts.current=a,Ls=r,null!==Ms?i=0:(Rs=null,Is=0,i=Ns),0!=(Fs&Xs))wl(e,0);else if(0!==i){if(2===i&&(Ls|=64,e.hydrate&&(e.hydrate=!1,Ui(e.containerInfo)),0!==(n=Dt(e))&&(i=Al(e,n))),1===i)throw t=zs,wl(e,0),gl(e,n),fl(e,Hr()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,i){case 0:case 1:throw Error(o(345));case 2:case 5:Ll(e);break;case 3:if(gl(e,n),(62914560&n)===n&&10<(i=Hs+500-Hr())){if(0!==Ft(e,0))break;if(((r=e.suspendedLanes)&n)!==n){cl(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=Wi(Ll.bind(null,e),i);break}Ll(e);break;case 4:if(gl(e,n),(4186112&n)===n)break;for(i=e.eventTimes,r=-1;0<n;){var s=31-Vt(n);a=1<<s,(s=i[s])>r&&(r=s),n&=~a}if(n=r,10<(n=(120>(n=Hr()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){e.timeoutHandle=Wi(Ll.bind(null,e),n);break}Ll(e);break;default:throw Error(o(329))}}return fl(e,Hr()),e.callbackNode===t?pl.bind(null,e):null}function gl(e,t){for(t&=~Bs,t&=~Xs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),i=1<<n;e[n]=-1,t&=~i}}function ml(e){if(0!=(48&Ls))throw Error(o(327));if(Il(),e===Rs&&0!=(e.expiredLanes&Is)){var t=Is,n=Al(e,t);0!=(Fs&Xs)&&(n=Al(e,t=Ft(e,t)))}else n=Al(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ls|=64,e.hydrate&&(e.hydrate=!1,Ui(e.containerInfo)),0!==(t=Dt(e))&&(n=Al(e,t))),1===n)throw n=zs,wl(e,0),gl(e,t),fl(e,Hr()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ll(e),fl(e,Hr()),null}function vl(e,t){var n=Ls;Ls|=1;try{return e(t)}finally{0===(Ls=n)&&(Ws(),Gr())}}function bl(e,t){var n=Ls;Ls&=-2,Ls|=8;try{return e(t)}finally{0===(Ls=n)&&(Ws(),Gr())}}function xl(e,t){ur(_s,Os),Os|=t,Fs|=t}function yl(){Os=_s.current,cr(_s)}function wl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ji(n)),null!==Ms)for(n=Ms.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&vr();break;case 3:Oa(),cr(fr),cr(dr),qa();break;case 5:Na(i);break;case 4:Oa();break;case 13:case 19:cr(za);break;case 10:na(i);break;case 23:case 24:yl()}n=n.return}Rs=e,Ms=Vl(e.current,null),Is=Os=Fs=t,Ns=0,zs=null,Bs=Xs=Ds=0}function kl(e,t){for(;;){var n=Ms;try{if(ta(),$a.current=Mo,to){for(var i=Ka.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}to=!1}if(Qa=0,eo=Ja=Ka=null,no=!1,Ps.current=null,null===n||null===n.return){Ns=1,zs=t,Ms=null;break}e:{var a=e,o=n.return,s=n,l=t;if(t=Is,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var h=0!=(1&za.current),d=o;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=d.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!h)}}if(f){var m=d.updateQueue;if(null===m){var v=new Set;v.add(c),d.updateQueue=v}else m.add(c);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=ca(-1,1);b.tag=2,ua(s,b)}s.lanes|=1;break e}l=void 0,s=t;var x=a.pingCache;if(null===x?(x=a.pingCache=new ls,l=new Set,x.set(c,l)):void 0===(l=x.get(c))&&(l=new Set,x.set(c,l)),!l.has(s)){l.add(s);var y=Dl.bind(null,a,c,s);c.then(y,y)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((G(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ns&&(Ns=2),l=os(l,s),d=o;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,ha(d,cs(0,a,t));break e;case 1:a=l;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===$s||!$s.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,ha(d,us(d,a,t));break e}}d=d.return}while(null!==d)}Pl(n)}catch(e){t=e,Ms===n&&null!==n&&(Ms=n=n.return);continue}break}}function Sl(){var e=Ts.current;return Ts.current=Mo,null===e?Mo:e}function Al(e,t){var n=Ls;Ls|=16;var i=Sl();for(Rs===e&&Is===t||wl(e,t);;)try{Cl();break}catch(t){kl(e,t)}if(ta(),Ls=n,Ts.current=i,null!==Ms)throw Error(o(261));return Rs=null,Is=0,Ns}function Cl(){for(;null!==Ms;)Tl(Ms)}function El(){for(;null!==Ms&&!Tr();)Tl(Ms)}function Tl(e){var t=js(e.alternate,e,Os);e.memoizedProps=e.pendingProps,null===t?Pl(e):Ms=t,Ps.current=null}function Pl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=rs(n,t,Os)))return void(Ms=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Os)||0==(4&n.mode)){for(var i=0,r=n.child;null!==r;)i|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=i}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=as(t)))return n.flags&=2047,void(Ms=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ms=t);Ms=t=e}while(null!==t);0===Ns&&(Ns=5)}function Ll(e){var t=Vr();return jr(99,Rl.bind(null,e,t)),null}function Rl(e,t){do{Il()}while(null!==Qs);if(0!=(48&Ls))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var i=n.lanes|n.childLanes,r=i,a=e.pendingLanes&~r;e.pendingLanes=r,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=r,e.mutableReadLanes&=r,e.entangledLanes&=r,r=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<a;){var c=31-Vt(a),u=1<<c;r[c]=0,s[c]=-1,l[c]=-1,a&=~u}if(null!==tl&&0==(24&i)&&tl.has(e)&&tl.delete(e),e===Rs&&(Ms=Rs=null,Is=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){if(r=Ls,Ls|=32,Ps.current=null,Bi=qt,mi(s=gi())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,a=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var h=0,d=-1,f=-1,p=0,g=0,m=s,v=null;t:for(;;){for(var b;m!==l||0!==a&&3!==m.nodeType||(d=h+a),m!==c||0!==u&&3!==m.nodeType||(f=h+u),3===m.nodeType&&(h+=m.nodeValue.length),null!==(b=m.firstChild);)v=m,m=b;for(;;){if(m===s)break t;if(v===l&&++p===a&&(d=h),v===c&&++g===u&&(f=h),null!==(b=m.nextSibling))break;v=(m=v).parentNode}m=b}l=-1===d||-1===f?null:{start:d,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Yi={focusedElem:s,selectionRange:l},qt=!1,sl=null,ll=!1,Us=i;do{try{Ml()}catch(e){if(null===Us)throw Error(o(330));Fl(Us,e),Us=Us.nextEffect}}while(null!==Us);sl=null,Us=i;do{try{for(s=e;null!==Us;){var x=Us.flags;if(16&x&&ve(Us.stateNode,""),128&x){var y=Us.alternate;if(null!==y){var w=y.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&x){case 2:xs(Us),Us.flags&=-3;break;case 6:xs(Us),Us.flags&=-3,Ss(Us.alternate,Us);break;case 1024:Us.flags&=-1025;break;case 1028:Us.flags&=-1025,Ss(Us.alternate,Us);break;case 4:Ss(Us.alternate,Us);break;case 8:ks(s,l=Us);var k=l.alternate;vs(l),null!==k&&vs(k)}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(o(330));Fl(Us,e),Us=Us.nextEffect}}while(null!==Us);if(w=Yi,y=gi(),x=w.focusedElem,s=w.selectionRange,y!==x&&x&&x.ownerDocument&&pi(x.ownerDocument.documentElement,x)){null!==s&&mi(x)&&(y=s.start,void 0===(w=s.end)&&(w=y),"selectionStart"in x?(x.selectionStart=y,x.selectionEnd=Math.min(w,x.value.length)):(w=(y=x.ownerDocument||document)&&y.defaultView||window).getSelection&&(w=w.getSelection(),l=x.textContent.length,k=Math.min(s.start,l),s=void 0===s.end?k:Math.min(s.end,l),!w.extend&&k>s&&(l=s,s=k,k=l),l=fi(x,k),a=fi(x,s),l&&a&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==a.node||w.focusOffset!==a.offset)&&((y=y.createRange()).setStart(l.node,l.offset),w.removeAllRanges(),k>s?(w.addRange(y),w.extend(a.node,a.offset)):(y.setEnd(a.node,a.offset),w.addRange(y))))),y=[];for(w=x;w=w.parentNode;)1===w.nodeType&&y.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<y.length;x++)(w=y[x]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!Bi,Yi=Bi=null,e.current=n,Us=i;do{try{for(x=e;null!==Us;){var S=Us.flags;if(36&S&&ps(x,Us.alternate,Us),128&S){y=void 0;var A=Us.ref;if(null!==A){var C=Us.stateNode;Us.tag,y=C,"function"==typeof A?A(y):A.current=y}}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(o(330));Fl(Us,e),Us=Us.nextEffect}}while(null!==Us);Us=null,Fr(),Ls=r}else e.current=n;if(Zs)Zs=!1,Qs=e,Ks=t;else for(Us=i;null!==Us;)t=Us.nextEffect,Us.nextEffect=null,8&Us.flags&&((S=Us).sibling=null,S.stateNode=null),Us=t;if(0===(i=e.pendingLanes)&&($s=null),1===i?e===il?nl++:(nl=0,il=e):nl=0,n=n.stateNode,Sr&&"function"==typeof Sr.onCommitFiberRoot)try{Sr.onCommitFiberRoot(kr,n,void 0,64==(64&n.current.flags))}catch(e){}if(fl(e,Hr()),Gs)throw Gs=!1,e=qs,qs=null,e;return 0!=(8&Ls)||Gr(),null}function Ml(){for(;null!==Us;){var e=Us.alternate;ll||null===sl||(0!=(8&Us.flags)?Je(Us,sl)&&(ll=!0):13===Us.tag&&Cs(e,Us)&&Je(Us,sl)&&(ll=!0));var t=Us.flags;0!=(256&t)&&fs(e,Us),0==(512&t)||Zs||(Zs=!0,Ur(97,(function(){return Il(),null}))),Us=Us.nextEffect}}function Il(){if(90!==Ks){var e=97<Ks?97:Ks;return Ks=90,jr(e,Nl)}return!1}function Ol(e,t){Js.push(t,e),Zs||(Zs=!0,Ur(97,(function(){return Il(),null})))}function _l(e,t){el.push(t,e),Zs||(Zs=!0,Ur(97,(function(){return Il(),null})))}function Nl(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Ls))throw Error(o(331));var t=Ls;Ls|=32;var n=el;el=[];for(var i=0;i<n.length;i+=2){var r=n[i],a=n[i+1],s=r.destroy;if(r.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(o(330));Fl(a,e)}}for(n=Js,Js=[],i=0;i<n.length;i+=2){r=n[i],a=n[i+1];try{var l=r.create;r.destroy=l()}catch(e){if(null===a)throw Error(o(330));Fl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ls=t,Gr(),!0}function zl(e,t,n){ua(e,t=cs(0,t=os(n,t),1)),t=cl(),null!==(e=dl(e,1))&&(Ht(e,1,t),fl(e,t))}function Fl(e,t){if(3===e.tag)zl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){zl(n,e,t);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===$s||!$s.has(i))){var r=us(n,e=os(t,e),1);if(ua(n,r),r=cl(),null!==(n=dl(n,1)))Ht(n,1,r),fl(n,r);else if("function"==typeof i.componentDidCatch&&(null===$s||!$s.has(i)))try{i.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Dl(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),t=cl(),e.pingedLanes|=e.suspendedLanes&n,Rs===e&&(Is&n)===n&&(4===Ns||3===Ns&&(62914560&Is)===Is&&500>Hr()-Hs?wl(e,0):Bs|=n),fl(e,t)}function Xl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Vr()?1:2:(0===al&&(al=Fs),0===(t=Bt(62914560&~al))&&(t=4194304))),n=cl(),null!==(e=dl(e,t))&&(Ht(e,t,n),fl(e,n))}function Bl(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Yl(e,t,n,i){return new Bl(e,t,n,i)}function Hl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vl(e,t){var n=e.alternate;return null===n?((n=Yl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wl(e,t,n,i,r,a){var s=2;if(i=e,"function"==typeof e)Hl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case A:return jl(n.children,r,a,t);case z:s=8,r|=16;break;case C:s=8,r|=1;break;case E:return(e=Yl(12,n,t,8|r)).elementType=E,e.type=E,e.lanes=a,e;case R:return(e=Yl(13,n,t,r)).type=R,e.elementType=R,e.lanes=a,e;case M:return(e=Yl(19,n,t,r)).elementType=M,e.lanes=a,e;case F:return Ul(n,r,a,t);case D:return(e=Yl(24,n,t,r)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case P:s=9;break e;case L:s=11;break e;case I:s=14;break e;case O:s=16,i=null;break e;case _:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Yl(s,n,t,r)).elementType=e,t.type=i,t.lanes=a,t}function jl(e,t,n,i){return(e=Yl(7,e,i,t)).lanes=n,e}function Ul(e,t,n,i){return(e=Yl(23,e,i,t)).elementType=F,e.lanes=n,e}function Gl(e,t,n){return(e=Yl(6,e,null,t)).lanes=n,e}function ql(e,t,n){return(t=Yl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Yt(0),this.expirationTimes=Yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Yt(0),this.mutableSourceEagerHydrationData=null}function Zl(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,i){var r=t.current,a=cl(),s=ul(r);e:if(n){t:{if($e(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(o(171))}if(1===n.tag){var c=n.type;if(mr(c)){n=xr(n,c,l);break e}}n=l}else n=hr;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,s)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),ua(r,t),hl(r,s,a),s}function Kl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ec(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tc(e,t,n){var i=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Yl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,sa(t),e[Ji]=n.current,Mi(8===e.nodeType?e.parentNode:e),i)for(e=0;e<i.length;e++){var r=(t=i[e])._getVersion;r=r(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,r]:n.mutableSourceEagerHydrationData.push(t,r)}this._internalRoot=n}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ic(e,t,n,i,r){var a=n._reactRootContainer;if(a){var o=a._internalRoot;if("function"==typeof r){var s=r;r=function(){var e=Kl(o);s.call(e)}}Ql(t,o,e,r)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,i),o=a._internalRoot,"function"==typeof r){var l=r;r=function(){var e=Kl(o);l.call(e)}}bl((function(){Ql(t,o,e,r)}))}return Kl(o)}function rc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(o(200));return Zl(e,t,null,n)}js=function(e,t,n){var i=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fr.current)zo=!0;else{if(0==(n&i)){switch(zo=!1,t.tag){case 3:Uo(t),Ua();break;case 5:_a(t);break;case 1:mr(t.type)&&yr(t);break;case 4:Ia(t,t.stateNode.containerInfo);break;case 10:i=t.memoizedProps.value;var r=t.type._context;ur(Qr,r._currentValue),r._currentValue=i;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qo(e,t,n):(ur(za,1&za.current),null!==(t=ns(e,t,n))?t.sibling:null);ur(za,1&za.current);break;case 19:if(i=0!=(n&t.childLanes),0!=(64&e.flags)){if(i)return ts(e,t,n);t.flags|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),ur(za,za.current),i)break;return null;case 23:case 24:return t.lanes=0,Yo(e,t,n)}return ns(e,t,n)}zo=0!=(16384&e.flags)}else zo=!1;switch(t.lanes=0,t.tag){case 2:if(i=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=gr(t,dr.current),ra(t,n),r=ao(null,t,i,e,r,n),t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mr(i)){var a=!0;yr(t)}else a=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,sa(t);var s=i.getDerivedStateFromProps;"function"==typeof s&&ga(t,i,s,e),r.updater=ma,t.stateNode=r,r._reactInternals=t,ya(t,i,e,n),t=jo(null,t,i,!0,a,n)}else t.tag=0,Fo(null,t,r,n),t=t.child;return t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Hl(e)?1:0;if(null!=e){if((e=e.$$typeof)===L)return 11;if(e===I)return 14}return 2}(r),e=Zr(r,e),a){case 0:t=Vo(null,t,r,e,n);break e;case 1:t=Wo(null,t,r,e,n);break e;case 11:t=Do(null,t,r,e,n);break e;case 14:t=Xo(null,t,r,Zr(r.type,e),i,n);break e}throw Error(o(306,r,""))}return t;case 0:return i=t.type,r=t.pendingProps,Vo(e,t,i,r=t.elementType===i?r:Zr(i,r),n);case 1:return i=t.type,r=t.pendingProps,Wo(e,t,i,r=t.elementType===i?r:Zr(i,r),n);case 3:if(Uo(t),i=t.updateQueue,null===e||null===i)throw Error(o(282));if(i=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,la(e,t),da(t,i,null,n),(i=t.memoizedState.element)===r)Ua(),t=ns(e,t,n);else{if((a=(r=t.stateNode).hydrate)&&(Xa=Gi(t.stateNode.containerInfo.firstChild),Da=t,a=Ba=!0),a){if(null!=(e=r.mutableSourceEagerHydrationData))for(r=0;r<e.length;r+=2)(a=e[r])._workInProgressVersionPrimary=e[r+1],Ga.push(a);for(n=Ea(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fo(e,t,i,n),Ua();t=t.child}return t;case 5:return _a(t),null===e&&Va(t),i=t.type,r=t.pendingProps,a=null!==e?e.memoizedProps:null,s=r.children,Vi(i,r)?s=null:null!==a&&Vi(i,a)&&(t.flags|=16),Ho(e,t),Fo(e,t,s,n),t.child;case 6:return null===e&&Va(t),null;case 13:return Qo(e,t,n);case 4:return Ia(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Ca(t,null,i,n):Fo(e,t,i,n),t.child;case 11:return i=t.type,r=t.pendingProps,Do(e,t,i,r=t.elementType===i?r:Zr(i,r),n);case 7:return Fo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fo(e,t,t.pendingProps.children,n),t.child;case 10:e:{i=t.type._context,r=t.pendingProps,s=t.memoizedProps,a=r.value;var l=t.type._context;if(ur(Qr,l._currentValue),l._currentValue=a,null!==s)if(l=s.value,0==(a=ci(l,a)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,a):1073741823))){if(s.children===r.children&&!fr.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===i&&0!=(u.observedBits&a)){1===l.tag&&((u=ca(-1,n&-n)).tag=2,ua(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ia(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Fo(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,i=(a=t.pendingProps).children,ra(t,n),i=i(r=aa(r,a.unstable_observedBits)),t.flags|=1,Fo(e,t,i,n),t.child;case 14:return a=Zr(r=t.type,t.pendingProps),Xo(e,t,r,a=Zr(r.type,a),i,n);case 15:return Bo(e,t,t.type,t.pendingProps,i,n);case 17:return i=t.type,r=t.pendingProps,r=t.elementType===i?r:Zr(i,r),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mr(i)?(e=!0,yr(t)):e=!1,ra(t,n),ba(t,i,r),ya(t,i,r,n),jo(null,t,i,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Yo(e,t,n)}throw Error(o(156,t.tag))},tc.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Ji]=null}))},et=function(e){13===e.tag&&(hl(e,4,cl()),ec(e,4))},tt=function(e){13===e.tag&&(hl(e,67108864,cl()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cl(),n=ul(e);hl(e,n,t),ec(e,n)}},it=function(e,t){return t()},Ee=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var r=rr(i);if(!r)throw Error(o(90));Q(i),ne(i,r)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&oe(e,!!n.multiple,t,!1)}},Ie=vl,Oe=function(e,t,n,i,r){var a=Ls;Ls|=4;try{return jr(98,e.bind(null,t,n,i,r))}finally{0===(Ls=a)&&(Ws(),Gr())}},_e=function(){0==(49&Ls)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fl(e,Hr())}))}Gr()}(),Il())},Ne=function(e,t){var n=Ls;Ls|=2;try{return e(t)}finally{0===(Ls=n)&&(Ws(),Gr())}};var ac={Events:[nr,ir,rr,Re,Me,Il,{current:!1}]},oc={findFiberByHostInstance:tr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sc={bundleType:oc.bundleType,version:oc.version,rendererPackageName:oc.rendererPackageName,rendererConfig:oc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ke(e))?null:e.stateNode},findFiberByHostInstance:oc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{kr=lc.inject(sc),Sr=lc}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=rc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=Ke(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ls;if(0!=(48&n))return e(t);Ls|=1;try{if(e)return jr(99,e.bind(null,t))}finally{Ls=n,Gr()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(o(200));return ic(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(o(200));return ic(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(o(40));return!!e._reactRootContainer&&(bl((function(){ic(null,null,e,!1,(function(){e._reactRootContainer=null,e[Ji]=null}))})),!0)},t.unstable_batchedUpdates=vl,t.unstable_createPortal=function(e,t){return rc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!nc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ic(e,t,n,!1,i)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,i="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,o){if(e===o)return!0;if(e&&o&&"object"==typeof e&&"object"==typeof o){if(e.constructor!==o.constructor)return!1;var s,l,c,u;if(Array.isArray(e)){if((s=e.length)!=o.length)return!1;for(l=s;0!=l--;)if(!a(e[l],o[l]))return!1;return!0}if(n&&e instanceof Map&&o instanceof Map){if(e.size!==o.size)return!1;for(u=e.entries();!(l=u.next()).done;)if(!o.has(l.value[0]))return!1;for(u=e.entries();!(l=u.next()).done;)if(!a(l.value[1],o.get(l.value[0])))return!1;return!0}if(i&&e instanceof Set&&o instanceof Set){if(e.size!==o.size)return!1;for(u=e.entries();!(l=u.next()).done;)if(!o.has(l.value[0]))return!1;return!0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(o)){if((s=e.length)!=o.length)return!1;for(l=s;0!=l--;)if(e[l]!==o[l])return!1;return!0}if(e.constructor===RegExp)return e.source===o.source&&e.flags===o.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===o.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===o.toString();if((s=(c=Object.keys(e)).length)!==Object.keys(o).length)return!1;for(l=s;0!=l--;)if(!Object.prototype.hasOwnProperty.call(o,c[l]))return!1;if(t&&e instanceof Element)return!1;for(l=s;0!=l--;)if(("_owner"!==c[l]&&"__v"!==c[l]&&"__o"!==c[l]||!e.$$typeof)&&!a(e[c[l]],o[c[l]]))return!1;return!0}return e!=e&&o!=o}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},921:(e,t)=>{"use strict";var n=60103,i=60106,r=60107,a=60108,o=60114,s=60109,l=60110,c=60112,u=60113,h=60120,d=60115,f=60116,p=60121,g=60122,m=60117,v=60129,b=60131;if("function"==typeof Symbol&&Symbol.for){var x=Symbol.for;n=x("react.element"),i=x("react.portal"),r=x("react.fragment"),a=x("react.strict_mode"),o=x("react.profiler"),s=x("react.provider"),l=x("react.context"),c=x("react.forward_ref"),u=x("react.suspense"),h=x("react.suspense_list"),d=x("react.memo"),f=x("react.lazy"),p=x("react.block"),g=x("react.server.block"),m=x("react.fundamental"),v=x("react.debug_trace_mode"),b=x("react.legacy_hidden")}t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===r||e===o||e===v||e===a||e===u||e===h||e===b||"object"==typeof e&&null!==e&&(e.$$typeof===f||e.$$typeof===d||e.$$typeof===s||e.$$typeof===l||e.$$typeof===c||e.$$typeof===m||e.$$typeof===p||e[0]===g)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case r:case o:case a:case u:case h:return e;default:switch(e=e&&e.$$typeof){case l:case c:case f:case d:case s:return e;default:return t}}case i:return t}}}},864:(e,t,n)=>{"use strict";e.exports=n(921)},938:e=>{e.exports={ReactQueryDevtools:function(){return null},ReactQueryDevtoolsPanel:function(){return null}}},852:(e,t,n)=>{"use strict";n.d(t,{j:()=>o});var i=n(721),r=n(943),a=n(288),o=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!a.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("visibilitychange",n,!1),window.addEventListener("focus",n,!1),function(){window.removeEventListener("visibilitychange",n),window.removeEventListener("focus",n)}}},t}(0,i.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setFocused(e):n.onFocus()}))},n.setFocused=function(e){this.focused=e,e&&this.onFocus()},n.onFocus=function(){this.listeners.forEach((function(e){e()}))},n.isFocused=function(){return"boolean"==typeof this.focused?this.focused:"undefined"==typeof document||[void 0,"visible","prerender"].includes(document.visibilityState)},t}(r.l))},747:(e,t,n)=>{"use strict";n.d(t,{Su:()=>i.S});var i=n(61),r=n(755);n.o(r,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return r.QueryClientProvider}}),n.o(r,"useQuery")&&n.d(t,{useQuery:function(){return r.useQuery}})},909:(e,t,n)=>{"use strict";n.d(t,{j:()=>r,E:()=>a});var i=console;function r(){return i}function a(e){i=e}},101:(e,t,n)=>{"use strict";n.d(t,{V:()=>r});var i=n(288),r=new(function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(e){e()},this.batchNotifyFn=function(e){e()}}var t=e.prototype;return t.batch=function(e){var t;this.transactions++;try{t=e()}finally{this.transactions--,this.transactions||this.flush()}return t},t.schedule=function(e){var t=this;this.transactions?this.queue.push(e):(0,i.A4)((function(){t.notifyFn(e)}))},t.batchCalls=function(e){var t=this;return function(){for(var n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];t.schedule((function(){e.apply(void 0,i)}))}},t.flush=function(){var e=this,t=this.queue;this.queue=[],t.length&&(0,i.A4)((function(){e.batchNotifyFn((function(){t.forEach((function(t){e.notifyFn(t)}))}))}))},t.setNotifyFunction=function(e){this.notifyFn=e},t.setBatchNotifyFunction=function(e){this.batchNotifyFn=e},e}())},68:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var i=n(721),r=n(943),a=n(288),o=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!a.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("online",n,!1),window.addEventListener("offline",n,!1),function(){window.removeEventListener("online",n),window.removeEventListener("offline",n)}}},t}(0,i.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setOnline(e):n.onOnline()}))},n.setOnline=function(e){this.online=e,e&&this.onOnline()},n.onOnline=function(){this.listeners.forEach((function(e){e()}))},n.isOnline=function(){return"boolean"==typeof this.online?this.online:"undefined"==typeof navigator||void 0===navigator.onLine||navigator.onLine},t}(r.l))},61:(e,t,n)=>{"use strict";n.d(t,{S:()=>v});var i=n(462),r=n(288),a=n(721),o=n(101),s=n(909),l=n(252),c=function(){function e(e){this.abortSignalConsumed=!1,this.hadObservers=!1,this.defaultOptions=e.defaultOptions,this.setOptions(e.options),this.observers=[],this.cache=e.cache,this.queryKey=e.queryKey,this.queryHash=e.queryHash,this.initialState=e.state||this.getDefaultState(this.options),this.state=this.initialState,this.meta=e.meta,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(e){var t;this.options=(0,i.Z)({},this.defaultOptions,e),this.meta=null==e?void 0:e.meta,this.cacheTime=Math.max(this.cacheTime||0,null!=(t=this.options.cacheTime)?t:3e5)},t.setDefaultOptions=function(e){this.defaultOptions=e},t.scheduleGc=function(){var e=this;this.clearGcTimeout(),(0,r.PN)(this.cacheTime)&&(this.gcTimeout=setTimeout((function(){e.optionalRemove()}),this.cacheTime))},t.clearGcTimeout=function(){clearTimeout(this.gcTimeout),this.gcTimeout=void 0},t.optionalRemove=function(){this.observers.length||(this.state.isFetching?this.hadObservers&&this.scheduleGc():this.cache.remove(this))},t.setData=function(e,t){var n,i,a=this.state.data,o=(0,r.SE)(e,a);return(null==(n=(i=this.options).isDataEqual)?void 0:n.call(i,a,o))?o=a:!1!==this.options.structuralSharing&&(o=(0,r.Q$)(a,o)),this.dispatch({data:o,type:"success",dataUpdatedAt:null==t?void 0:t.updatedAt}),o},t.setState=function(e,t){this.dispatch({type:"setState",state:e,setStateOptions:t})},t.cancel=function(e){var t,n=this.promise;return null==(t=this.retryer)||t.cancel(e),n?n.then(r.ZT).catch(r.ZT):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some((function(e){return!1!==e.options.enabled}))},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some((function(e){return e.getCurrentResult().isStale}))},t.isStaleByTime=function(e){return void 0===e&&(e=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!(0,r.Kp)(this.state.dataUpdatedAt,e)},t.onFocus=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnWindowFocus()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.onOnline=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnReconnect()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.addObserver=function(e){-1===this.observers.indexOf(e)&&(this.observers.push(e),this.hadObservers=!0,this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:e}))},t.removeObserver=function(e){-1!==this.observers.indexOf(e)&&(this.observers=this.observers.filter((function(t){return t!==e})),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable||this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:e}))},t.getObserversCount=function(){return this.observers.length},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(e,t){var n,i,a,o=this;if(this.state.isFetching)if(this.state.dataUpdatedAt&&(null==t?void 0:t.cancelRefetch))this.cancel({silent:!0});else if(this.promise){var c;return null==(c=this.retryer)||c.continueRetry(),this.promise}if(e&&this.setOptions(e),!this.options.queryFn){var u=this.observers.find((function(e){return e.options.queryFn}));u&&this.setOptions(u.options)}var h=(0,r.mc)(this.queryKey),d=(0,r.G9)(),f={queryKey:h,pageParam:void 0,meta:this.meta};Object.defineProperty(f,"signal",{enumerable:!0,get:function(){if(d)return o.abortSignalConsumed=!0,d.signal}});var p,g,m={fetchOptions:t,options:this.options,queryKey:h,state:this.state,fetchFn:function(){return o.options.queryFn?(o.abortSignalConsumed=!1,o.options.queryFn(f)):Promise.reject("Missing queryFn")},meta:this.meta};return(null==(n=this.options.behavior)?void 0:n.onFetch)&&(null==(p=this.options.behavior)||p.onFetch(m)),this.revertState=this.state,this.state.isFetching&&this.state.fetchMeta===(null==(i=m.fetchOptions)?void 0:i.meta)||this.dispatch({type:"fetch",meta:null==(g=m.fetchOptions)?void 0:g.meta}),this.retryer=new l.m4({fn:m.fetchFn,abort:null==d||null==(a=d.abort)?void 0:a.bind(d),onSuccess:function(e){o.setData(e),null==o.cache.config.onSuccess||o.cache.config.onSuccess(e,o),0===o.cacheTime&&o.optionalRemove()},onError:function(e){(0,l.DV)(e)&&e.silent||o.dispatch({type:"error",error:e}),(0,l.DV)(e)||(null==o.cache.config.onError||o.cache.config.onError(e,o),(0,s.j)().error(e)),0===o.cacheTime&&o.optionalRemove()},onFail:function(){o.dispatch({type:"failed"})},onPause:function(){o.dispatch({type:"pause"})},onContinue:function(){o.dispatch({type:"continue"})},retry:m.options.retry,retryDelay:m.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(e){var t=this;this.state=this.reducer(this.state,e),o.V.batch((function(){t.observers.forEach((function(t){t.onQueryUpdate(e)})),t.cache.notify({query:t,type:"queryUpdated",action:e})}))},t.getDefaultState=function(e){var t="function"==typeof e.initialData?e.initialData():e.initialData,n=void 0!==e.initialData?"function"==typeof e.initialDataUpdatedAt?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0,i=void 0!==t;return{data:t,dataUpdateCount:0,dataUpdatedAt:i?null!=n?n:Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:i?"success":"idle"}},t.reducer=function(e,t){var n,r;switch(t.type){case"failed":return(0,i.Z)({},e,{fetchFailureCount:e.fetchFailureCount+1});case"pause":return(0,i.Z)({},e,{isPaused:!0});case"continue":return(0,i.Z)({},e,{isPaused:!1});case"fetch":return(0,i.Z)({},e,{fetchFailureCount:0,fetchMeta:null!=(n=t.meta)?n:null,isFetching:!0,isPaused:!1},!e.dataUpdatedAt&&{error:null,status:"loading"});case"success":return(0,i.Z)({},e,{data:t.data,dataUpdateCount:e.dataUpdateCount+1,dataUpdatedAt:null!=(r=t.dataUpdatedAt)?r:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var a=t.error;return(0,l.DV)(a)&&a.revert&&this.revertState?(0,i.Z)({},this.revertState):(0,i.Z)({},e,{error:a,errorUpdateCount:e.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:e.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return(0,i.Z)({},e,{isInvalidated:!0});case"setState":return(0,i.Z)({},e,t.state);default:return e}},e}(),u=n(943),h=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.queries=[],n.queriesMap={},n}(0,a.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var i,a=t.queryKey,o=null!=(i=t.queryHash)?i:(0,r.Rm)(a,t),s=this.get(o);return s||(s=new c({cache:this,queryKey:a,queryHash:o,options:e.defaultQueryOptions(t),state:n,defaultOptions:e.getQueryDefaults(a),meta:t.meta}),this.add(s)),s},n.add=function(e){this.queriesMap[e.queryHash]||(this.queriesMap[e.queryHash]=e,this.queries.push(e),this.notify({type:"queryAdded",query:e}))},n.remove=function(e){var t=this.queriesMap[e.queryHash];t&&(e.destroy(),this.queries=this.queries.filter((function(t){return t!==e})),t===e&&delete this.queriesMap[e.queryHash],this.notify({type:"queryRemoved",query:e}))},n.clear=function(){var e=this;o.V.batch((function(){e.queries.forEach((function(t){e.remove(t)}))}))},n.get=function(e){return this.queriesMap[e]},n.getAll=function(){return this.queries},n.find=function(e,t){var n=(0,r.I6)(e,t)[0];return void 0===n.exact&&(n.exact=!0),this.queries.find((function(e){return(0,r._x)(n,e)}))},n.findAll=function(e,t){var n=(0,r.I6)(e,t)[0];return Object.keys(n).length>0?this.queries.filter((function(e){return(0,r._x)(n,e)})):this.queries},n.notify=function(e){var t=this;o.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){var e=this;o.V.batch((function(){e.queries.forEach((function(e){e.onFocus()}))}))},n.onOnline=function(){var e=this;o.V.batch((function(){e.queries.forEach((function(e){e.onOnline()}))}))},t}(u.l),d=function(){function e(e){this.options=(0,i.Z)({},e.defaultOptions,e.options),this.mutationId=e.mutationId,this.mutationCache=e.mutationCache,this.observers=[],this.state=e.state||{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0},this.meta=e.meta}var t=e.prototype;return t.setState=function(e){this.dispatch({type:"setState",state:e})},t.addObserver=function(e){-1===this.observers.indexOf(e)&&this.observers.push(e)},t.removeObserver=function(e){this.observers=this.observers.filter((function(t){return t!==e}))},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(r.ZT).catch(r.ZT)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var e,t=this,n="loading"===this.state.status,i=Promise.resolve();return n||(this.dispatch({type:"loading",variables:this.options.variables}),i=i.then((function(){null==t.mutationCache.config.onMutate||t.mutationCache.config.onMutate(t.state.variables,t)})).then((function(){return null==t.options.onMutate?void 0:t.options.onMutate(t.state.variables)})).then((function(e){e!==t.state.context&&t.dispatch({type:"loading",context:e,variables:t.state.variables})}))),i.then((function(){return t.executeMutation()})).then((function(n){e=n,null==t.mutationCache.config.onSuccess||t.mutationCache.config.onSuccess(e,t.state.variables,t.state.context,t)})).then((function(){return null==t.options.onSuccess?void 0:t.options.onSuccess(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(e,null,t.state.variables,t.state.context)})).then((function(){return t.dispatch({type:"success",data:e}),e})).catch((function(e){return null==t.mutationCache.config.onError||t.mutationCache.config.onError(e,t.state.variables,t.state.context,t),(0,s.j)().error(e),Promise.resolve().then((function(){return null==t.options.onError?void 0:t.options.onError(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(void 0,e,t.state.variables,t.state.context)})).then((function(){throw t.dispatch({type:"error",error:e}),e}))}))},t.executeMutation=function(){var e,t=this;return this.retryer=new l.m4({fn:function(){return t.options.mutationFn?t.options.mutationFn(t.state.variables):Promise.reject("No mutationFn found")},onFail:function(){t.dispatch({type:"failed"})},onPause:function(){t.dispatch({type:"pause"})},onContinue:function(){t.dispatch({type:"continue"})},retry:null!=(e=this.options.retry)?e:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(e){var t=this;this.state=function(e,t){switch(t.type){case"failed":return(0,i.Z)({},e,{failureCount:e.failureCount+1});case"pause":return(0,i.Z)({},e,{isPaused:!0});case"continue":return(0,i.Z)({},e,{isPaused:!1});case"loading":return(0,i.Z)({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return(0,i.Z)({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return(0,i.Z)({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return(0,i.Z)({},e,t.state);default:return e}}(this.state,e),o.V.batch((function(){t.observers.forEach((function(t){t.onMutationUpdate(e)})),t.mutationCache.notify(t)}))},e}(),f=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.mutations=[],n.mutationId=0,n}(0,a.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var i=new d({mutationCache:this,mutationId:++this.mutationId,options:e.defaultMutationOptions(t),state:n,defaultOptions:t.mutationKey?e.getMutationDefaults(t.mutationKey):void 0,meta:t.meta});return this.add(i),i},n.add=function(e){this.mutations.push(e),this.notify(e)},n.remove=function(e){this.mutations=this.mutations.filter((function(t){return t!==e})),e.cancel(),this.notify(e)},n.clear=function(){var e=this;o.V.batch((function(){e.mutations.forEach((function(t){e.remove(t)}))}))},n.getAll=function(){return this.mutations},n.find=function(e){return void 0===e.exact&&(e.exact=!0),this.mutations.find((function(t){return(0,r.X7)(e,t)}))},n.findAll=function(e){return this.mutations.filter((function(t){return(0,r.X7)(e,t)}))},n.notify=function(e){var t=this;o.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){this.resumePausedMutations()},n.onOnline=function(){this.resumePausedMutations()},n.resumePausedMutations=function(){var e=this.mutations.filter((function(e){return e.state.isPaused}));return o.V.batch((function(){return e.reduce((function(e,t){return e.then((function(){return t.continue().catch(r.ZT)}))}),Promise.resolve())}))},t}(u.l),p=n(852),g=n(68);function m(e,t){return null==e.getNextPageParam?void 0:e.getNextPageParam(t[t.length-1],t)}var v=function(){function e(e){void 0===e&&(e={}),this.queryCache=e.queryCache||new h,this.mutationCache=e.mutationCache||new f,this.defaultOptions=e.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var e=this;this.unsubscribeFocus=p.j.subscribe((function(){p.j.isFocused()&&g.N.isOnline()&&(e.mutationCache.onFocus(),e.queryCache.onFocus())})),this.unsubscribeOnline=g.N.subscribe((function(){p.j.isFocused()&&g.N.isOnline()&&(e.mutationCache.onOnline(),e.queryCache.onOnline())}))},t.unmount=function(){var e,t;null==(e=this.unsubscribeFocus)||e.call(this),null==(t=this.unsubscribeOnline)||t.call(this)},t.isFetching=function(e,t){var n=(0,r.I6)(e,t)[0];return n.fetching=!0,this.queryCache.findAll(n).length},t.isMutating=function(e){return this.mutationCache.findAll((0,i.Z)({},e,{fetching:!0})).length},t.getQueryData=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state.data},t.getQueriesData=function(e){return this.getQueryCache().findAll(e).map((function(e){return[e.queryKey,e.state.data]}))},t.setQueryData=function(e,t,n){var i=(0,r._v)(e),a=this.defaultQueryOptions(i);return this.queryCache.build(this,a).setData(t,n)},t.setQueriesData=function(e,t,n){var i=this;return o.V.batch((function(){return i.getQueryCache().findAll(e).map((function(e){var r=e.queryKey;return[r,i.setQueryData(r,t,n)]}))}))},t.getQueryState=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state},t.removeQueries=function(e,t){var n=(0,r.I6)(e,t)[0],i=this.queryCache;o.V.batch((function(){i.findAll(n).forEach((function(e){i.remove(e)}))}))},t.resetQueries=function(e,t,n){var a=this,s=(0,r.I6)(e,t,n),l=s[0],c=s[1],u=this.queryCache,h=(0,i.Z)({},l,{active:!0});return o.V.batch((function(){return u.findAll(l).forEach((function(e){e.reset()})),a.refetchQueries(h,c)}))},t.cancelQueries=function(e,t,n){var i=this,a=(0,r.I6)(e,t,n),s=a[0],l=a[1],c=void 0===l?{}:l;void 0===c.revert&&(c.revert=!0);var u=o.V.batch((function(){return i.queryCache.findAll(s).map((function(e){return e.cancel(c)}))}));return Promise.all(u).then(r.ZT).catch(r.ZT)},t.invalidateQueries=function(e,t,n){var a,s,l,c=this,u=(0,r.I6)(e,t,n),h=u[0],d=u[1],f=(0,i.Z)({},h,{active:null==(a=null!=(s=h.refetchActive)?s:h.active)||a,inactive:null!=(l=h.refetchInactive)&&l});return o.V.batch((function(){return c.queryCache.findAll(h).forEach((function(e){e.invalidate()})),c.refetchQueries(f,d)}))},t.refetchQueries=function(e,t,n){var a=this,s=(0,r.I6)(e,t,n),l=s[0],c=s[1],u=o.V.batch((function(){return a.queryCache.findAll(l).map((function(e){return e.fetch(void 0,(0,i.Z)({},c,{meta:{refetchPage:null==l?void 0:l.refetchPage}}))}))})),h=Promise.all(u).then(r.ZT);return(null==c?void 0:c.throwOnError)||(h=h.catch(r.ZT)),h},t.fetchQuery=function(e,t,n){var i=(0,r._v)(e,t,n),a=this.defaultQueryOptions(i);void 0===a.retry&&(a.retry=!1);var o=this.queryCache.build(this,a);return o.isStaleByTime(a.staleTime)?o.fetch(a):Promise.resolve(o.state.data)},t.prefetchQuery=function(e,t,n){return this.fetchQuery(e,t,n).then(r.ZT).catch(r.ZT)},t.fetchInfiniteQuery=function(e,t,n){var i=(0,r._v)(e,t,n);return i.behavior={onFetch:function(e){e.fetchFn=function(){var t,n,i,a,o,s,c,u,h,d=null==(t=e.fetchOptions)||null==(n=t.meta)?void 0:n.refetchPage,f=null==(i=e.fetchOptions)||null==(a=i.meta)?void 0:a.fetchMore,p=null==f?void 0:f.pageParam,g="forward"===(null==f?void 0:f.direction),v="backward"===(null==f?void 0:f.direction),b=(null==(o=e.state.data)?void 0:o.pages)||[],x=(null==(s=e.state.data)?void 0:s.pageParams)||[],y=(0,r.G9)(),w=null==y?void 0:y.signal,k=x,S=!1,A=e.options.queryFn||function(){return Promise.reject("Missing queryFn")},C=function(e,t,n,i){return k=i?[t].concat(k):[].concat(k,[t]),i?[n].concat(e):[].concat(e,[n])},E=function(t,n,i,r){if(S)return Promise.reject("Cancelled");if(void 0===i&&!n&&t.length)return Promise.resolve(t);var a={queryKey:e.queryKey,signal:w,pageParam:i,meta:e.meta},o=A(a),s=Promise.resolve(o).then((function(e){return C(t,i,e,r)}));return(0,l.LE)(o)&&(s.cancel=o.cancel),s};if(b.length)if(g){var T=void 0!==p,P=T?p:m(e.options,b);c=E(b,T,P)}else if(v){var L=void 0!==p,R=L?p:(u=e.options,h=b,null==u.getPreviousPageParam?void 0:u.getPreviousPageParam(h[0],h));c=E(b,L,R,!0)}else!function(){k=[];var t=void 0===e.options.getNextPageParam,n=!d||!b[0]||d(b[0],0,b);c=n?E([],t,x[0]):Promise.resolve(C([],x[0],b[0]));for(var i=function(n){c=c.then((function(i){if(!d||!b[n]||d(b[n],n,b)){var r=t?x[n]:m(e.options,i);return E(i,t,r)}return Promise.resolve(C(i,x[n],b[n]))}))},r=1;r<b.length;r++)i(r)}();else c=E([]);var M=c.then((function(e){return{pages:e,pageParams:k}}));return M.cancel=function(){S=!0,null==y||y.abort(),(0,l.LE)(c)&&c.cancel()},M}}},this.fetchQuery(i)},t.prefetchInfiniteQuery=function(e,t,n){return this.fetchInfiniteQuery(e,t,n).then(r.ZT).catch(r.ZT)},t.cancelMutations=function(){var e=this,t=o.V.batch((function(){return e.mutationCache.getAll().map((function(e){return e.cancel()}))}));return Promise.all(t).then(r.ZT).catch(r.ZT)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(e){return this.mutationCache.build(this,e).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(e){this.defaultOptions=e},t.setQueryDefaults=function(e,t){var n=this.queryDefaults.find((function(t){return(0,r.yF)(e)===(0,r.yF)(t.queryKey)}));n?n.defaultOptions=t:this.queryDefaults.push({queryKey:e,defaultOptions:t})},t.getQueryDefaults=function(e){var t;return e?null==(t=this.queryDefaults.find((function(t){return(0,r.to)(e,t.queryKey)})))?void 0:t.defaultOptions:void 0},t.setMutationDefaults=function(e,t){var n=this.mutationDefaults.find((function(t){return(0,r.yF)(e)===(0,r.yF)(t.mutationKey)}));n?n.defaultOptions=t:this.mutationDefaults.push({mutationKey:e,defaultOptions:t})},t.getMutationDefaults=function(e){var t;return e?null==(t=this.mutationDefaults.find((function(t){return(0,r.to)(e,t.mutationKey)})))?void 0:t.defaultOptions:void 0},t.defaultQueryOptions=function(e){if(null==e?void 0:e._defaulted)return e;var t=(0,i.Z)({},this.defaultOptions.queries,this.getQueryDefaults(null==e?void 0:e.queryKey),e,{_defaulted:!0});return!t.queryHash&&t.queryKey&&(t.queryHash=(0,r.Rm)(t.queryKey,t)),t},t.defaultQueryObserverOptions=function(e){return this.defaultQueryOptions(e)},t.defaultMutationOptions=function(e){return(null==e?void 0:e._defaulted)?e:(0,i.Z)({},this.defaultOptions.mutations,this.getMutationDefaults(null==e?void 0:e.mutationKey),e,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}()},252:(e,t,n)=>{"use strict";n.d(t,{LE:()=>s,DV:()=>c,m4:()=>u});var i=n(852),r=n(68),a=n(288);function o(e){return Math.min(1e3*Math.pow(2,e),3e4)}function s(e){return"function"==typeof(null==e?void 0:e.cancel)}var l=function(e){this.revert=null==e?void 0:e.revert,this.silent=null==e?void 0:e.silent};function c(e){return e instanceof l}var u=function(e){var t,n,c,u,h=this,d=!1;this.abort=e.abort,this.cancel=function(e){return null==t?void 0:t(e)},this.cancelRetry=function(){d=!0},this.continueRetry=function(){d=!1},this.continue=function(){return null==n?void 0:n()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise((function(e,t){c=e,u=t}));var f=function(t){h.isResolved||(h.isResolved=!0,null==e.onSuccess||e.onSuccess(t),null==n||n(),c(t))},p=function(t){h.isResolved||(h.isResolved=!0,null==e.onError||e.onError(t),null==n||n(),u(t))};!function c(){if(!h.isResolved){var u;try{u=e.fn()}catch(e){u=Promise.reject(e)}t=function(e){if(!h.isResolved&&(p(new l(e)),null==h.abort||h.abort(),s(u)))try{u.cancel()}catch(e){}},h.isTransportCancelable=s(u),Promise.resolve(u).then(f).catch((function(t){var s,l;if(!h.isResolved){var u=null!=(s=e.retry)?s:3,f=null!=(l=e.retryDelay)?l:o,g="function"==typeof f?f(h.failureCount,t):f,m=!0===u||"number"==typeof u&&h.failureCount<u||"function"==typeof u&&u(h.failureCount,t);!d&&m?(h.failureCount++,null==e.onFail||e.onFail(h.failureCount,t),(0,a.Gh)(g).then((function(){if(!i.j.isFocused()||!r.N.isOnline())return new Promise((function(t){n=t,h.isPaused=!0,null==e.onPause||e.onPause()})).then((function(){n=void 0,h.isPaused=!1,null==e.onContinue||e.onContinue()}))})).then((function(){d?p(t):c()}))):p(t)}}))}}()}},943:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var i=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(e){var t=this,n=e||function(){};return this.listeners.push(n),this.onSubscribe(),function(){t.listeners=t.listeners.filter((function(e){return e!==n})),t.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}()},755:()=>{},288:(e,t,n)=>{"use strict";n.d(t,{sk:()=>r,ZT:()=>a,SE:()=>o,PN:()=>s,mc:()=>l,Kp:()=>c,_v:()=>u,I6:()=>h,_x:()=>d,X7:()=>f,Rm:()=>p,yF:()=>g,to:()=>m,Q$:()=>b,VS:()=>x,Gh:()=>S,A4:()=>A,G9:()=>C});var i=n(462),r="undefined"==typeof window;function a(){}function o(e,t){return"function"==typeof e?e(t):e}function s(e){return"number"==typeof e&&e>=0&&e!==1/0}function l(e){return Array.isArray(e)?e:[e]}function c(e,t){return Math.max(e+(t||0)-Date.now(),0)}function u(e,t,n){return k(e)?"function"==typeof t?(0,i.Z)({},n,{queryKey:e,queryFn:t}):(0,i.Z)({},t,{queryKey:e}):e}function h(e,t,n){return k(e)?[(0,i.Z)({},t,{queryKey:e}),n]:[e||{},t]}function d(e,t){var n=e.active,i=e.exact,r=e.fetching,a=e.inactive,o=e.predicate,s=e.queryKey,l=e.stale;if(k(s))if(i){if(t.queryHash!==p(s,t.options))return!1}else if(!m(t.queryKey,s))return!1;var c=function(e,t){return!0===e&&!0===t||null==e&&null==t?"all":!1===e&&!1===t?"none":(null!=e?e:!t)?"active":"inactive"}(n,a);if("none"===c)return!1;if("all"!==c){var u=t.isActive();if("active"===c&&!u)return!1;if("inactive"===c&&u)return!1}return!("boolean"==typeof l&&t.isStale()!==l||"boolean"==typeof r&&t.isFetching()!==r||o&&!o(t))}function f(e,t){var n=e.exact,i=e.fetching,r=e.predicate,a=e.mutationKey;if(k(a)){if(!t.options.mutationKey)return!1;if(n){if(g(t.options.mutationKey)!==g(a))return!1}else if(!m(t.options.mutationKey,a))return!1}return!("boolean"==typeof i&&"loading"===t.state.status!==i||r&&!r(t))}function p(e,t){return((null==t?void 0:t.queryKeyHashFn)||g)(e)}function g(e){var t;return t=l(e),JSON.stringify(t,(function(e,t){return y(t)?Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e}),{}):t}))}function m(e,t){return v(l(e),l(t))}function v(e,t){return e===t||typeof e==typeof t&&!(!e||!t||"object"!=typeof e||"object"!=typeof t)&&!Object.keys(t).some((function(n){return!v(e[n],t[n])}))}function b(e,t){if(e===t)return e;var n=Array.isArray(e)&&Array.isArray(t);if(n||y(e)&&y(t)){for(var i=n?e.length:Object.keys(e).length,r=n?t:Object.keys(t),a=r.length,o=n?[]:{},s=0,l=0;l<a;l++){var c=n?l:r[l];o[c]=b(e[c],t[c]),o[c]===e[c]&&s++}return i===a&&s===i?e:o}return t}function x(e,t){if(e&&!t||t&&!e)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}function y(e){if(!w(e))return!1;var t=e.constructor;if(void 0===t)return!0;var n=t.prototype;return!!w(n)&&!!n.hasOwnProperty("isPrototypeOf")}function w(e){return"[object Object]"===Object.prototype.toString.call(e)}function k(e){return"string"==typeof e||Array.isArray(e)}function S(e){return new Promise((function(t){setTimeout(t,e)}))}function A(e){Promise.resolve().then(e).catch((function(e){return setTimeout((function(){throw e}))}))}function C(){if("function"==typeof AbortController)return new AbortController}},767:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>i.Su,QueryClientProvider:()=>r.aH,useQuery:()=>r.aM});var i=n(747);n.o(i,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return i.QueryClientProvider}}),n.o(i,"useQuery")&&n.d(t,{useQuery:function(){return i.useQuery}});var r=n(66)},66:(e,t,n)=>{"use strict";n.d(t,{aH:()=>h,aM:()=>A});var i=n(101),r=n(935).unstable_batchedUpdates;i.V.setBatchNotifyFunction(r);var a=n(909),o=console;(0,a.E)(o);var s=n(294),l=s.createContext(void 0),c=s.createContext(!1);function u(e){return e&&"undefined"!=typeof window?(window.ReactQueryClientContext||(window.ReactQueryClientContext=l),window.ReactQueryClientContext):l}var h=function(e){var t=e.client,n=e.contextSharing,i=void 0!==n&&n,r=e.children;s.useEffect((function(){return t.mount(),function(){t.unmount()}}),[t]);var a=u(i);return s.createElement(c.Provider,{value:i},s.createElement(a.Provider,{value:t},r))},d=n(462),f=n(721),p=n(288),g=n(852),m=n(943),v=n(252),b=function(e){function t(t,n){var i;return(i=e.call(this)||this).client=t,i.options=n,i.trackedProps=[],i.previousSelectError=null,i.bindMethods(),i.setOptions(n),i}(0,f.Z)(t,e);var n=t.prototype;return n.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},n.onSubscribe=function(){1===this.listeners.length&&(this.currentQuery.addObserver(this),x(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},n.onUnsubscribe=function(){this.listeners.length||this.destroy()},n.shouldFetchOnReconnect=function(){return e=this.currentQuery,!1!==(t=this.options).enabled&&("always"===t.refetchOnReconnect||!1!==t.refetchOnReconnect&&w(e,t));var e,t},n.shouldFetchOnWindowFocus=function(){return e=this.currentQuery,!1!==(t=this.options).enabled&&("always"===t.refetchOnWindowFocus||!1!==t.refetchOnWindowFocus&&w(e,t));var e,t},n.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},n.setOptions=function(e,t){var n=this.options,i=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(e),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),this.updateQuery();var r=this.hasListeners();r&&y(this.currentQuery,i,this.options,n)&&this.executeFetch(),this.updateResult(t),!r||this.currentQuery===i&&this.options.enabled===n.enabled&&this.options.staleTime===n.staleTime||this.updateStaleTimeout();var a=this.computeRefetchInterval();!r||this.currentQuery===i&&this.options.enabled===n.enabled&&a===this.currentRefetchInterval||this.updateRefetchInterval(a)},n.getOptimisticResult=function(e){var t=this.client.defaultQueryObserverOptions(e),n=this.client.getQueryCache().build(this.client,t);return this.createResult(n,t)},n.getCurrentResult=function(){return this.currentResult},n.trackResult=function(e,t){var n=this,i={},r=function(e){n.trackedProps.includes(e)||n.trackedProps.push(e)};return Object.keys(e).forEach((function(t){Object.defineProperty(i,t,{configurable:!1,enumerable:!0,get:function(){return r(t),e[t]}})})),(t.useErrorBoundary||t.suspense)&&r("error"),i},n.getNextResult=function(e){var t=this;return new Promise((function(n,i){var r=t.subscribe((function(t){t.isFetching||(r(),t.isError&&(null==e?void 0:e.throwOnError)?i(t.error):n(t))}))}))},n.getCurrentQuery=function(){return this.currentQuery},n.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},n.refetch=function(e){return this.fetch((0,d.Z)({},e,{meta:{refetchPage:null==e?void 0:e.refetchPage}}))},n.fetchOptimistic=function(e){var t=this,n=this.client.defaultQueryObserverOptions(e),i=this.client.getQueryCache().build(this.client,n);return i.fetch().then((function(){return t.createResult(i,n)}))},n.fetch=function(e){var t=this;return this.executeFetch(e).then((function(){return t.updateResult(),t.currentResult}))},n.executeFetch=function(e){this.updateQuery();var t=this.currentQuery.fetch(this.options,e);return(null==e?void 0:e.throwOnError)||(t=t.catch(p.ZT)),t},n.updateStaleTimeout=function(){var e=this;if(this.clearStaleTimeout(),!p.sk&&!this.currentResult.isStale&&(0,p.PN)(this.options.staleTime)){var t=(0,p.Kp)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((function(){e.currentResult.isStale||e.updateResult()}),t)}},n.computeRefetchInterval=function(){var e;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(e=this.options.refetchInterval)&&e},n.updateRefetchInterval=function(e){var t=this;this.clearRefetchInterval(),this.currentRefetchInterval=e,!p.sk&&!1!==this.options.enabled&&(0,p.PN)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((function(){(t.options.refetchIntervalInBackground||g.j.isFocused())&&t.executeFetch()}),this.currentRefetchInterval))},n.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())},n.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},n.clearStaleTimeout=function(){clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0},n.clearRefetchInterval=function(){clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0},n.createResult=function(e,t){var n,i=this.currentQuery,r=this.options,o=this.currentResult,s=this.currentResultState,l=this.currentResultOptions,c=e!==i,u=c?e.state:this.currentQueryInitialState,h=c?this.currentResult:this.previousQueryResult,d=e.state,f=d.dataUpdatedAt,g=d.error,m=d.errorUpdatedAt,v=d.isFetching,b=d.status,k=!1,S=!1;if(t.optimisticResults){var A=this.hasListeners(),C=!A&&x(e,t),E=A&&y(e,i,t,r);(C||E)&&(v=!0,f||(b="loading"))}if(t.keepPreviousData&&!d.dataUpdateCount&&(null==h?void 0:h.isSuccess)&&"error"!==b)n=h.data,f=h.dataUpdatedAt,b=h.status,k=!0;else if(t.select&&void 0!==d.data){var T;if(o&&d.data===(null==s?void 0:s.data)&&t.select===(null==(T=this.previousSelect)?void 0:T.fn)&&!this.previousSelectError)n=this.previousSelect.result;else try{n=t.select(d.data),!1!==t.structuralSharing&&(n=(0,p.Q$)(null==o?void 0:o.data,n)),this.previousSelect={fn:t.select,result:n},this.previousSelectError=null}catch(e){(0,a.j)().error(e),g=e,this.previousSelectError=e,m=Date.now(),b="error"}}else n=d.data;if(void 0!==t.placeholderData&&void 0===n&&("loading"===b||"idle"===b)){var P;if((null==o?void 0:o.isPlaceholderData)&&t.placeholderData===(null==l?void 0:l.placeholderData))P=o.data;else if(P="function"==typeof t.placeholderData?t.placeholderData():t.placeholderData,t.select&&void 0!==P)try{P=t.select(P),!1!==t.structuralSharing&&(P=(0,p.Q$)(null==o?void 0:o.data,P)),this.previousSelectError=null}catch(e){(0,a.j)().error(e),g=e,this.previousSelectError=e,m=Date.now(),b="error"}void 0!==P&&(b="success",n=P,S=!0)}return{status:b,isLoading:"loading"===b,isSuccess:"success"===b,isError:"error"===b,isIdle:"idle"===b,data:n,dataUpdatedAt:f,error:g,errorUpdatedAt:m,failureCount:d.fetchFailureCount,isFetched:d.dataUpdateCount>0||d.errorUpdateCount>0,isFetchedAfterMount:d.dataUpdateCount>u.dataUpdateCount||d.errorUpdateCount>u.errorUpdateCount,isFetching:v,isRefetching:v&&"loading"!==b,isLoadingError:"error"===b&&0===d.dataUpdatedAt,isPlaceholderData:S,isPreviousData:k,isRefetchError:"error"===b&&0!==d.dataUpdatedAt,isStale:w(e,t),refetch:this.refetch,remove:this.remove}},n.shouldNotifyListeners=function(e,t){if(!t)return!0;var n=this.options,i=n.notifyOnChangeProps,r=n.notifyOnChangePropsExclusions;if(!i&&!r)return!0;if("tracked"===i&&!this.trackedProps.length)return!0;var a="tracked"===i?this.trackedProps:i;return Object.keys(e).some((function(n){var i=n,o=e[i]!==t[i],s=null==a?void 0:a.some((function(e){return e===n})),l=null==r?void 0:r.some((function(e){return e===n}));return o&&!l&&(!a||s)}))},n.updateResult=function(e){var t=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!(0,p.VS)(this.currentResult,t)){var n={cache:!0};!1!==(null==e?void 0:e.listeners)&&this.shouldNotifyListeners(this.currentResult,t)&&(n.listeners=!0),this.notify((0,d.Z)({},n,e))}},n.updateQuery=function(){var e=this.client.getQueryCache().build(this.client,this.options);if(e!==this.currentQuery){var t=this.currentQuery;this.currentQuery=e,this.currentQueryInitialState=e.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==t||t.removeObserver(this),e.addObserver(this))}},n.onQueryUpdate=function(e){var t={};"success"===e.type?t.onSuccess=!0:"error"!==e.type||(0,v.DV)(e.error)||(t.onError=!0),this.updateResult(t),this.hasListeners()&&this.updateTimers()},n.notify=function(e){var t=this;i.V.batch((function(){e.onSuccess?(null==t.options.onSuccess||t.options.onSuccess(t.currentResult.data),null==t.options.onSettled||t.options.onSettled(t.currentResult.data,null)):e.onError&&(null==t.options.onError||t.options.onError(t.currentResult.error),null==t.options.onSettled||t.options.onSettled(void 0,t.currentResult.error)),e.listeners&&t.listeners.forEach((function(e){e(t.currentResult)})),e.cache&&t.client.getQueryCache().notify({query:t.currentQuery,type:"observerResultsUpdated"})}))},t}(m.l);function x(e,t){return function(e,t){return!(!1===t.enabled||e.state.dataUpdatedAt||"error"===e.state.status&&!1===t.retryOnMount)}(e,t)||function(e,t){return!1!==t.enabled&&e.state.dataUpdatedAt>0&&("always"===t.refetchOnMount||!1!==t.refetchOnMount&&w(e,t))}(e,t)}function y(e,t,n,i){return!1!==n.enabled&&(e!==t||!1===i.enabled)&&(!n.suspense||"error"!==e.state.status)&&w(e,n)}function w(e,t){return e.isStaleByTime(t.staleTime)}var k,S=s.createContext((k=!1,{clearReset:function(){k=!1},reset:function(){k=!0},isReset:function(){return k}}));function A(e,t,n){return function(e,t){var n=s.useRef(!1),r=s.useState(0)[1],a=function(){var e=s.useContext(u(s.useContext(c)));if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e}(),o=s.useContext(S),l=a.defaultQueryObserverOptions(e);l.optimisticResults=!0,l.onError&&(l.onError=i.V.batchCalls(l.onError)),l.onSuccess&&(l.onSuccess=i.V.batchCalls(l.onSuccess)),l.onSettled&&(l.onSettled=i.V.batchCalls(l.onSettled)),l.suspense&&("number"!=typeof l.staleTime&&(l.staleTime=1e3),0===l.cacheTime&&(l.cacheTime=1)),(l.suspense||l.useErrorBoundary)&&(o.isReset()||(l.retryOnMount=!1));var h,d,f,p=s.useState((function(){return new t(a,l)}))[0],g=p.getOptimisticResult(l);if(s.useEffect((function(){n.current=!0,o.clearReset();var e=p.subscribe(i.V.batchCalls((function(){n.current&&r((function(e){return e+1}))})));return p.updateResult(),function(){n.current=!1,e()}}),[o,p]),s.useEffect((function(){p.setOptions(l,{listeners:!1})}),[l,p]),l.suspense&&g.isLoading)throw p.fetchOptimistic(l).then((function(e){var t=e.data;null==l.onSuccess||l.onSuccess(t),null==l.onSettled||l.onSettled(t,null)})).catch((function(e){o.clearReset(),null==l.onError||l.onError(e),null==l.onSettled||l.onSettled(void 0,e)}));if(g.isError&&!o.isReset()&&!g.isFetching&&(h=l.suspense,d=l.useErrorBoundary,f=g.error,"function"==typeof d?d(f):"boolean"==typeof d?d:h))throw g.error;return"tracked"===l.notifyOnChangeProps&&(g=p.trackResult(g,l)),g}((0,p._v)(e,t,n),b)}},524:(e,t,n)=>{"use strict";var i,r=n(294),a=(i=r)&&"object"==typeof i&&"default"in i?i.default:i;function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=function(e,t,n){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(i){if("function"!=typeof i)throw new Error("Expected WrappedComponent to be a React component.");var l,c=[];function u(){l=e(c.map((function(e){return e.props}))),h.canUseDOM?t(l):n&&(l=n(l))}var h=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r.peek=function(){return l},r.rewind=function(){if(r.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=l;return l=void 0,c=[],e};var o=r.prototype;return o.UNSAFE_componentWillMount=function(){c.push(this),u()},o.componentDidUpdate=function(){u()},o.componentWillUnmount=function(){var e=c.indexOf(this);c.splice(e,1),u()},o.render=function(){return a.createElement(i,this.props)},r}(r.PureComponent);return o(h,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(i)+")"),o(h,"canUseDOM",s),h}}},408:(e,t,n)=>{"use strict";var i=n(418),r=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var o=60109,s=60110,l=60112;t.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;r=h("react.element"),a=h("react.portal"),t.Fragment=h("react.fragment"),t.StrictMode=h("react.strict_mode"),t.Profiler=h("react.profiler"),o=h("react.provider"),s=h("react.context"),l=h("react.forward_ref"),t.Suspense=h("react.suspense"),c=h("react.memo"),u=h("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var x=b.prototype=new v;x.constructor=b,i(x,m.prototype),x.isPureReactComponent=!0;var y={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var i,a={},o=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,i)&&!k.hasOwnProperty(i)&&(a[i]=t[i]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:r,type:e,key:o,ref:s,props:a,_owner:y.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var C=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,i,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case r:case a:l=!0}}if(l)return o=o(l=e),e=""===i?"."+E(l,0):i,Array.isArray(o)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),T(o,t,n,"",(function(e){return e}))):null!=o&&(A(o)&&(o=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,n+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(C,"$&/")+"/")+e)),t.push(o)),1;if(l=0,i=""===i?".":i+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=i+E(s=e[c],c);l+=T(s,t,n,u,o)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=T(s=s.value,t,n,u=i+E(s,c++),o);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var i=[],r=0;return T(e,i,"","",(function(e){return t.call(n,e,r++)})),i}function L(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function M(){var e=R.current;if(null===e)throw Error(f(321));return e}var I={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:y,IsSomeRendererActing:{current:!1},assign:i};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error(f(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var a=i({},e.props),o=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=y.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)w.call(t,u)&&!k.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){c=Array(u);for(var h=0;h<u;h++)c[h]=arguments[h+2];a.children=c}return{$$typeof:r,type:e.type,key:o,ref:s,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return M().useCallback(e,t)},t.useContext=function(e,t){return M().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return M().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return M().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return M().useLayoutEffect(e,t)},t.useMemo=function(e,t){return M().useMemo(e,t)},t.useReducer=function(e,t,n){return M().useReducer(e,t,n)},t.useRef=function(e){return M().useRef(e)},t.useState=function(e){return M().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,i,r,a;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,h=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(h,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(h,0))},i=function(e,t){u=setTimeout(e,t)},r=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,b=5,x=0;t.unstable_shouldYield=function(){return t.unstable_now()>=x},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var y=new MessageChannel,w=y.port2;y.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();x=e+b;try{m(!0,e)?w.postMessage(null):(g=!1,m=null)}catch(e){throw w.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,w.postMessage(null))},i=function(e,n){v=d((function(){e(t.unstable_now())}),n)},r=function(){f(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var i=n-1>>>1,r=e[i];if(!(void 0!==r&&0<C(r,t)))break e;e[i]=t,e[n]=r,n=i}}function S(e){return void 0===(e=e[0])?null:e}function A(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,r=e.length;i<r;){var a=2*(i+1)-1,o=e[a],s=a+1,l=e[s];if(void 0!==o&&0>C(o,n))void 0!==l&&0>C(l,o)?(e[i]=l,e[s]=n,i=s):(e[i]=o,e[a]=n,i=a);else{if(!(void 0!==l&&0>C(l,n)))break e;e[i]=l,e[s]=n,i=s}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var E=[],T=[],P=1,L=null,R=3,M=!1,I=!1,O=!1;function _(e){for(var t=S(T);null!==t;){if(null===t.callback)A(T);else{if(!(t.startTime<=e))break;A(T),t.sortIndex=t.expirationTime,k(E,t)}t=S(T)}}function N(e){if(O=!1,_(e),!I)if(null!==S(E))I=!0,n(z);else{var t=S(T);null!==t&&i(N,t.startTime-e)}}function z(e,n){I=!1,O&&(O=!1,r()),M=!0;var a=R;try{for(_(n),L=S(E);null!==L&&(!(L.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=L.callback;if("function"==typeof o){L.callback=null,R=L.priorityLevel;var s=o(L.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?L.callback=s:L===S(E)&&A(E),_(n)}else A(E);L=S(E)}if(null!==L)var l=!0;else{var c=S(T);null!==c&&i(N,c.startTime-n),l=!1}return l}finally{L=null,R=a,M=!1}}var F=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||M||(I=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return S(E)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,o){var s=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?s+o:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>s?(e.sortIndex=o,k(T,e),null===S(E)&&e===S(T)&&(O?r():O=!0,i(N,o-s))):(e.sortIndex=l,k(E,e),I||M||(I=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,i){var r=n?n.call(i,e,t):void 0;if(void 0!==r)return!!r;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),o=Object.keys(t);if(a.length!==o.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<a.length;l++){var c=a[l];if(!s(c))return!1;var u=e[c],h=t[c];if(!1===(r=n?n.call(i,u,h,c):void 0)||void 0===r&&u!==h)return!1}return!0}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],c=i.base?l[0]+i.base:l[0],u=a[c]||0,h="".concat(c," ").concat(u);a[c]=u+1;var d=n(h),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var p=r(f,i);i.byIndex=s,t.splice(s,0,{identifier:h,updater:p,references:1})}o.push(h)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var l=i(e,r),c=0;c<a.length;c++){var u=n(a[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},462:(e,t,n)=>{"use strict";function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},i.apply(this,arguments)}n.d(t,{Z:()=>i})},721:(e,t,n)=>{"use strict";function i(e,t){return i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},i(e,t)}function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,i(e,t)}n.d(t,{Z:()=>r})}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={id:i,exports:{}};return e[i](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935),i=n(379),r=n.n(i),a=n(795),o=n.n(a),s=n(569),l=n.n(s),c=n(565),u=n.n(c),h=n(216),d=n.n(h),f=n(589),p=n.n(f),g=n(538),m={};m.styleTagTransform=p(),m.setAttributes=u(),m.insert=l().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),r()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;var v=n(282),b={};b.styleTagTransform=p(),b.setAttributes=u(),b.insert=l().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=d(),r()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;var x=n(421),y={};y.styleTagTransform=p(),y.setAttributes=u(),y.insert=l().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=d(),r()(x.Z,y),x.Z&&x.Z.locals&&x.Z.locals;var w,k=n(462),S=w||(w={});S.Pop="POP",S.Push="PUSH",S.Replace="REPLACE";function A(e){e.preventDefault(),e.returnValue=""}function C(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function E(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function T(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function P(e,t){if(!e)throw new Error(t)}const L=(0,e.createContext)(null),R=(0,e.createContext)(null),M=(0,e.createContext)({outlet:null,matches:[]});function I(t){return function(t){let n=(0,e.useContext)(M).outlet;return n?(0,e.createElement)(D.Provider,{value:t},n):n}(t.context)}function O(e){P(!1)}function _(t){let{basename:n="/",children:i=null,location:r,navigationType:a=w.Pop,navigator:o,static:s=!1}=t;z()&&P(!1);let l=Z(n),c=(0,e.useMemo)((()=>({basename:l,navigator:o,static:s})),[l,o,s]);"string"==typeof r&&(r=T(r));let{pathname:u="/",search:h="",hash:d="",state:f=null,key:p="default"}=r,g=(0,e.useMemo)((()=>{let e=q(u,l);return null==e?null:{pathname:e,search:h,hash:d,state:f,key:p}}),[l,u,h,d,f,p]);return null==g?null:(0,e.createElement)(L.Provider,{value:c},(0,e.createElement)(R.Provider,{children:i,value:{location:g,navigationType:a}}))}function N(t){let{children:n,location:i}=t;return function(t,n){z()||P(!1);let{matches:i}=(0,e.useContext)(M),r=i[i.length-1],a=r?r.params:{},o=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let s,l=F();if(n){var c;let e="string"==typeof n?T(n):n;"/"===o||(null==(c=e.pathname)?void 0:c.startsWith(o))||P(!1),s=e}else s=l;let u=s.pathname||"/",h=function(e,t,n){void 0===n&&(n="/");let i=q(("string"==typeof t?T(t):t).pathname||"/",n);if(null==i)return null;let r=Y(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(r);let a=null;for(let e=0;null==a&&e<r.length;++e)a=j(r[e],i);return a}(t,{pathname:"/"===o?u:u.slice(o.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((i,r,a)=>(0,e.createElement)(M.Provider,{children:void 0!==r.route.element?r.route.element:(0,e.createElement)(I,null),value:{outlet:i,matches:n.concat(t.slice(0,a+1))}})),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},a,e.params),pathname:$([o,e.pathname]),pathnameBase:"/"===e.pathnameBase?o:$([o,e.pathnameBase])}))),i)}(B(n),i)}function z(){return null!=(0,e.useContext)(R)}function F(){return z()||P(!1),(0,e.useContext)(R).location}const D=(0,e.createContext)(null);function X(t){let{matches:n}=(0,e.useContext)(M),{pathname:i}=F(),r=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,e.useMemo)((()=>G(t,JSON.parse(r),i)),[t,r,i])}function B(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,B(t.props.children));t.type!==O&&P(!1);let i={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(i.children=B(t.props.children)),n.push(i)})),n}function Y(e,t,n,i){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===i&&(i=""),e.forEach(((e,r)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(i)||P(!1),a.relativePath=a.relativePath.slice(i.length));let o=$([i,a.relativePath]),s=n.concat(a);e.children&&e.children.length>0&&(!0===e.index&&P(!1),Y(e.children,t,s,o)),(null!=e.path||e.index)&&t.push({path:o,score:W(o,e.index),routesMeta:s})})),t}const H=/^:\w+$/,V=e=>"*"===e;function W(e,t){let n=e.split("/"),i=n.length;return n.some(V)&&(i+=-2),t&&(i+=2),n.filter((e=>!V(e))).reduce(((e,t)=>e+(H.test(t)?3:""===t?1:10)),i)}function j(e,t){let{routesMeta:n}=e,i={},r="/",a=[];for(let e=0;e<n.length;++e){let o=n[e],s=e===n.length-1,l="/"===r?t:t.slice(r.length)||"/",c=U({path:o.relativePath,caseSensitive:o.caseSensitive,end:s},l);if(!c)return null;Object.assign(i,c.params);let u=o.route;a.push({params:i,pathname:$([r,c.pathname]),pathnameBase:$([r,c.pathnameBase]),route:u}),"/"!==c.pathnameBase&&(r=$([r,c.pathnameBase]))}return a}function U(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,i]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let i=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(i.push(t),"([^\\/]+)")));return e.endsWith("*")?(i.push("*"),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(r,t?void 0:"i"),i]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let a=r[0],o=a.replace(/(.)\/+$/,"$1"),s=r.slice(1);return{params:i.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";o=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(s[n]||""),e}),{}),pathname:a,pathnameBase:o,pattern:e}}function G(e,t,n){let i,r="string"==typeof e?T(e):e,a=""===e||""===r.pathname?"/":r.pathname;if(null==a)i=n;else{let e=t.length-1;if(a.startsWith("..")){let t=a.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}i=e>=0?t[e]:"/"}let o=function(e,t){void 0===t&&(t="/");let{pathname:n,search:i="",hash:r=""}="string"==typeof e?T(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:Q(i),hash:K(r)}}(r,i);return a&&"/"!==a&&a.endsWith("/")&&!o.pathname.endsWith("/")&&(o.pathname+="/"),o}function q(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const $=e=>e.join("/").replace(/\/\/+/g,"/"),Z=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),Q=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",K=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function J(){return J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},J.apply(this,arguments)}const ee=["onClick","reloadDocument","replace","state","target","to"];function te(t){let{basename:n,children:i,window:r}=t,a=(0,e.useRef)();null==a.current&&(a.current=function(e){function t(){var e=o.location,t=s.state||{};return[t.idx,{pathname:e.pathname,search:e.search,hash:e.hash,state:t.usr||null,key:t.key||"default"}]}function n(e){return"string"==typeof e?e:E(e)}function i(e,t){return void 0===t&&(t=null),(0,k.Z)({pathname:h.pathname,hash:"",search:""},"string"==typeof e?T(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function r(e){c=e,e=t(),u=e[0],h=e[1],d.call({action:c,location:h})}function a(e){s.go(e)}void 0===e&&(e={});var o=void 0===(e=e.window)?document.defaultView:e,s=o.history,l=null;o.addEventListener("popstate",(function(){if(l)f.call(l),l=null;else{var e=w.Pop,n=t(),i=n[0];if(n=n[1],f.length){if(null!=i){var o=u-i;o&&(l={action:e,location:n,retry:function(){a(-1*o)}},a(o))}}else r(e)}}));var c=w.Pop,u=(e=t())[0],h=e[1],d=C(),f=C();return null==u&&(u=0,s.replaceState((0,k.Z)({},s.state,{idx:u}),"")),{get action(){return c},get location(){return h},createHref:n,push:function e(t,a){var l=w.Push,c=i(t,a);if(!f.length||(f.call({action:l,location:c,retry:function(){e(t,a)}}),0)){var h=[{usr:c.state,key:c.key,idx:u+1},n(c)];c=h[0],h=h[1];try{s.pushState(c,"",h)}catch(e){o.location.assign(h)}r(l)}},replace:function e(t,a){var o=w.Replace,l=i(t,a);f.length&&(f.call({action:o,location:l,retry:function(){e(t,a)}}),1)||(l=[{usr:l.state,key:l.key,idx:u},n(l)],s.replaceState(l[0],"",l[1]),r(o))},go:a,back:function(){a(-1)},forward:function(){a(1)},listen:function(e){return d.push(e)},block:function(e){var t=f.push(e);return 1===f.length&&o.addEventListener("beforeunload",A),function(){t(),f.length||o.removeEventListener("beforeunload",A)}}}}({window:r}));let o=a.current,[s,l]=(0,e.useState)({action:o.action,location:o.location});return(0,e.useLayoutEffect)((()=>o.listen(l)),[o]),(0,e.createElement)(_,{basename:n,children:i,location:s.location,navigationType:s.action,navigator:o})}const ne=(0,e.forwardRef)((function(t,n){let{onClick:i,reloadDocument:r,replace:a=!1,state:o,target:s,to:l}=t,c=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(t,ee),u=function(t){z()||P(!1);let{basename:n,navigator:i}=(0,e.useContext)(L),{hash:r,pathname:a,search:o}=X(t),s=a;if("/"!==n){let e=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?T(e).pathname:e.pathname}(t),i=null!=e&&e.endsWith("/");s="/"===a?n+(i?"/":""):$([n,a])}return i.createHref({pathname:s,search:o,hash:r})}(l),h=function(t,n){let{target:i,replace:r,state:a}=void 0===n?{}:n,o=function(){z()||P(!1);let{basename:t,navigator:n}=(0,e.useContext)(L),{matches:i}=(0,e.useContext)(M),{pathname:r}=F(),a=JSON.stringify(i.map((e=>e.pathnameBase))),o=(0,e.useRef)(!1);(0,e.useEffect)((()=>{o.current=!0}));let s=(0,e.useCallback)((function(e,i){if(void 0===i&&(i={}),!o.current)return;if("number"==typeof e)return void n.go(e);let s=G(e,JSON.parse(a),r);"/"!==t&&(s.pathname=$([t,s.pathname])),(i.replace?n.replace:n.push)(s,i.state)}),[t,n,a,r]);return s}(),s=F(),l=X(t);return(0,e.useCallback)((e=>{if(!(0!==e.button||i&&"_self"!==i||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))){e.preventDefault();let n=!!r||E(s)===E(l);o(t,{replace:n,state:a})}}),[s,o,l,r,a,i,t])}(l,{replace:a,state:o,target:s});return(0,e.createElement)("a",J({},c,{href:u,onClick:function(e){i&&i(e),e.defaultPrevented||r||h(e)},ref:n,target:s}))}));var ie=n(864),re=n(774),ae=n.n(re);const oe=function(e){function t(e,i,l,c,d){for(var f,p,g,m,y,k=0,S=0,A=0,C=0,E=0,I=0,_=g=f=0,z=0,F=0,D=0,X=0,B=l.length,Y=B-1,H="",V="",W="",j="";z<B;){if(p=l.charCodeAt(z),z===Y&&0!==S+C+A+k&&(0!==S&&(p=47===S?10:47),C=A=k=0,B++,Y++),0===S+C+A+k){if(z===Y&&(0<F&&(H=H.replace(h,"")),0<H.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:H+=l.charAt(z)}p=59}switch(p){case 123:for(f=(H=H.trim()).charCodeAt(0),g=1,X=++z;z<B;){switch(p=l.charCodeAt(z)){case 123:g++;break;case 125:g--;break;case 47:switch(p=l.charCodeAt(z+1)){case 42:case 47:e:{for(_=z+1;_<Y;++_)switch(l.charCodeAt(_)){case 47:if(42===p&&42===l.charCodeAt(_-1)&&z+2!==_){z=_+1;break e}break;case 10:if(47===p){z=_+1;break e}}z=_}}break;case 91:p++;case 40:p++;case 34:case 39:for(;z++<Y&&l.charCodeAt(z)!==p;);}if(0===g)break;z++}if(g=l.substring(X,z),0===f&&(f=(H=H.replace(u,"").trim()).charCodeAt(0)),64===f){switch(0<F&&(H=H.replace(h,"")),p=H.charCodeAt(1)){case 100:case 109:case 115:case 45:F=i;break;default:F=M}if(X=(g=t(i,F,g,p,d+1)).length,0<O&&(y=s(3,g,F=n(M,H,D),i,P,T,X,p,d,c),H=F.join(""),void 0!==y&&0===(X=(g=y.trim()).length)&&(p=0,g="")),0<X)switch(p){case 115:H=H.replace(w,o);case 100:case 109:case 45:g=H+"{"+g+"}";break;case 107:g=(H=H.replace(v,"$1 $2"))+"{"+g+"}",g=1===R||2===R&&a("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=H+g,112===c&&(V+=g,g="")}else g=""}else g=t(i,n(i,H,D),g,c,d+1);W+=g,g=D=F=_=f=0,H="",p=l.charCodeAt(++z);break;case 125:case 59:if(1<(X=(H=(0<F?H.replace(h,""):H).trim()).length))switch(0===_&&(f=H.charCodeAt(0),45===f||96<f&&123>f)&&(X=(H=H.replace(" ",":")).length),0<O&&void 0!==(y=s(1,H,i,e,P,T,V.length,c,d,c))&&0===(X=(H=y.trim()).length)&&(H="\0\0"),f=H.charCodeAt(0),p=H.charCodeAt(1),f){case 0:break;case 64:if(105===p||99===p){j+=H+l.charAt(z);break}default:58!==H.charCodeAt(X-1)&&(V+=r(H,f,p,H.charCodeAt(2)))}D=F=_=f=0,H="",p=l.charCodeAt(++z)}}switch(p){case 13:case 10:47===S?S=0:0===1+f&&107!==c&&0<H.length&&(F=1,H+="\0"),0<O*N&&s(0,H,i,e,P,T,V.length,c,d,c),T=1,P++;break;case 59:case 125:if(0===S+C+A+k){T++;break}default:switch(T++,m=l.charAt(z),p){case 9:case 32:if(0===C+k+S)switch(E){case 44:case 58:case 9:case 32:m="";break;default:32!==p&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===C+S+k&&(F=D=1,m="\f"+m);break;case 108:if(0===C+S+k+L&&0<_)switch(z-_){case 2:112===E&&58===l.charCodeAt(z-3)&&(L=E);case 8:111===I&&(L=I)}break;case 58:0===C+S+k&&(_=z);break;case 44:0===S+A+C+k&&(F=1,m+="\r");break;case 34:case 39:0===S&&(C=C===p?0:0===C?p:C);break;case 91:0===C+S+A&&k++;break;case 93:0===C+S+A&&k--;break;case 41:0===C+S+k&&A--;break;case 40:0===C+S+k&&(0===f&&(2*E+3*I==533||(f=1)),A++);break;case 64:0===S+A+C+k+_+g&&(g=1);break;case 42:case 47:if(!(0<C+k+A))switch(S){case 0:switch(2*p+3*l.charCodeAt(z+1)){case 235:S=47;break;case 220:X=z,S=42}break;case 42:47===p&&42===E&&X+2!==z&&(33===l.charCodeAt(X+2)&&(V+=l.substring(X,z+1)),m="",S=0)}}0===S&&(H+=m)}I=E,E=p,z++}if(0<(X=V.length)){if(F=i,0<O&&void 0!==(y=s(2,V,F,e,P,T,X,c,d,c))&&0===(V=y).length)return j+V+W;if(V=F.join(",")+"{"+V+"}",0!=R*L){switch(2!==R||a(V,2)||(L=0),L){case 111:V=V.replace(x,":-moz-$1")+V;break;case 112:V=V.replace(b,"::-webkit-input-$1")+V.replace(b,"::-moz-$1")+V.replace(b,":-ms-input-$1")+V}L=0}}return j+V+W}function n(e,t,n){var r=t.trim().split(g);t=r;var a=r.length,o=e.length;switch(o){case 0:case 1:var s=0;for(e=0===o?"":e[0]+" ";s<a;++s)t[s]=i(e,t[s],n).trim();break;default:var l=s=0;for(t=[];s<a;++s)for(var c=0;c<o;++c)t[l++]=i(e[c]+" ",r[s],n).trim()}return t}function i(e,t,n){var i=t.charCodeAt(0);switch(33>i&&(i=(t=t.trim()).charCodeAt(0)),i){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,i){var o=e+";",s=2*t+3*n+4*i;if(944===s){e=o.indexOf(":",9)+1;var l=o.substring(e,o.length-1).trim();return l=o.substring(0,e).trim()+l+";",1===R||2===R&&a(l,1)?"-webkit-"+l+l:l}if(0===R||2===R&&!a(o,1))return o;switch(s){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(E,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(l=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+l+o;case 1005:return f.test(o)?o.replace(d,":-webkit-")+o.replace(d,":-moz-")+o:o;case 1e3:switch(t=(l=o.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=o.replace(y,"tb");break;case 232:l=o.replace(y,"tb-rl");break;case 220:l=o.replace(y,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+l+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(t=(o=e).length-10,s=(l=(33===o.charCodeAt(t)?o.substring(0,t):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:o=o.replace(l,"-webkit-"+l)+";"+o;break;case 207:case 102:o=o.replace(l,"-webkit-"+(102<s?"inline-":"")+"box")+";"+o.replace(l,"-webkit-"+l)+";"+o.replace(l,"-ms-"+l+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return l=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+l+"-ms-flex-"+l+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(S,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(S,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):o.replace(l,"-webkit-"+l)+o.replace(l,"-moz-"+l.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===n+i&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+o}return o}function a(e,t){var n=e.indexOf(1===t?":":"{"),i=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),_(2!==t?i:i.replace(A,"$1"),n,t)}function o(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function s(e,t,n,i,r,a,o,s,l,u){for(var h,d=0,f=t;d<O;++d)switch(h=I[d].call(c,e,f,n,i,r,a,o,s,l,u)){case void 0:case!1:case!0:case null:break;default:f=h}if(f!==t)return f}function l(e){return void 0!==(e=e.prefix)&&(_=null,e?"function"!=typeof e?R=1:(R=2,_=e):R=0),l}function c(e,n){var i=e;if(33>i.charCodeAt(0)&&(i=i.trim()),i=[i],0<O){var r=s(-1,n,i,i,P,T,0,0,0,0);void 0!==r&&"string"==typeof r&&(n=r)}var a=t(M,i,n,0,0);return 0<O&&void 0!==(r=s(-2,a,i,i,P,T,a.length,0,0,0))&&(a=r),L=0,T=P=1,a}var u=/^\0+/g,h=/[\0\r\f]/g,d=/: */g,f=/zoo|gra/,p=/([,: ])(transform)/g,g=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,b=/::(place)/g,x=/:(read-only)/g,y=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,S=/-self|flex-/g,A=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,T=1,P=1,L=0,R=1,M=[],I=[],O=0,_=null,N=0;return c.use=function e(t){switch(t){case void 0:case null:O=I.length=0;break;default:if("function"==typeof t)I[O++]=t;else if("object"==typeof t)for(var n=0,i=t.length;n<i;++n)e(t[n]);else N=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},se={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var le=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const ce=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return le.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var ue=n(679),he=n.n(ue);function de(){return(de=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var fe=function(e,t){for(var n=[e[0]],i=0,r=t.length;i<r;i+=1)n.push(t[i],e[i+1]);return n},pe=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,ie.typeOf)(e)},ge=Object.freeze([]),me=Object.freeze({});function ve(e){return"function"==typeof e}function be(e){return e.displayName||e.name||"Component"}function xe(e){return e&&"string"==typeof e.styledComponentId}var ye="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",we="undefined"!=typeof window&&"HTMLElement"in window,ke=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),Se={};function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Ce=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,i=n.length,r=i;e>=r;)(r<<=1)<0&&Ae(16,""+e);this.groupSizes=new Uint32Array(r),this.groupSizes.set(n),this.length=r;for(var a=i;a<r;a++)this.groupSizes[a]=0}for(var o=this.indexOfGroup(e+1),s=0,l=t.length;s<l;s++)this.tag.insertRule(o,t[s])&&(this.groupSizes[e]++,o++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),i=n+t;this.groupSizes[e]=0;for(var r=n;r<i;r++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],i=this.indexOfGroup(e),r=i+n,a=i;a<r;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),Ee=new Map,Te=new Map,Pe=1,Le=function(e){if(Ee.has(e))return Ee.get(e);for(;Te.has(Pe);)Pe++;var t=Pe++;return Ee.set(e,t),Te.set(t,e),t},Re=function(e){return Te.get(e)},Me=function(e,t){t>=Pe&&(Pe=t+1),Ee.set(e,t),Te.set(t,e)},Ie="style["+ye+'][data-styled-version="5.3.3"]',Oe=new RegExp("^"+ye+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),_e=function(e,t,n){for(var i,r=n.split(","),a=0,o=r.length;a<o;a++)(i=r[a])&&e.registerName(t,i)},Ne=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),i=[],r=0,a=n.length;r<a;r++){var o=n[r].trim();if(o){var s=o.match(Oe);if(s){var l=0|parseInt(s[1],10),c=s[2];0!==l&&(Me(c,l),_e(e,c,s[3]),e.getTag().insertRules(l,i)),i.length=0}else i.push(o)}}},ze=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},Fe=function(e){var t=document.head,n=e||t,i=document.createElement("style"),r=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var i=t[n];if(i&&1===i.nodeType&&i.hasAttribute(ye))return i}}(n),a=void 0!==r?r.nextSibling:null;i.setAttribute(ye,"active"),i.setAttribute("data-styled-version","5.3.3");var o=ze();return o&&i.setAttribute("nonce",o),n.insertBefore(i,a),i},De=function(){function e(e){var t=this.element=Fe(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,i=t.length;n<i;n++){var r=t[n];if(r.ownerNode===e)return r}Ae(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),Xe=function(){function e(e){var t=this.element=Fe(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),i=this.nodes[e];return this.element.insertBefore(n,i||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),Be=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Ye=we,He={isServer:!we,useCSSOMInjection:!ke},Ve=function(){function e(e,t,n){void 0===e&&(e=me),void 0===t&&(t={}),this.options=de({},He,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&we&&Ye&&(Ye=!1,function(e){for(var t=document.querySelectorAll(Ie),n=0,i=t.length;n<i;n++){var r=t[n];r&&"active"!==r.getAttribute(ye)&&(Ne(e,r),r.parentNode&&r.parentNode.removeChild(r))}}(this))}e.registerId=function(e){return Le(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(de({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,i=t.useCSSOMInjection,r=t.target,e=n?new Be(r):i?new De(r):new Xe(r),new Ce(e)));var e,t,n,i,r},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Le(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Le(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Le(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,i="",r=0;r<n;r++){var a=Re(r);if(void 0!==a){var o=e.names.get(a),s=t.getGroup(r);if(o&&s&&o.size){var l=ye+".g"+r+'[id="'+a+'"]',c="";void 0!==o&&o.forEach((function(e){e.length>0&&(c+=e+",")})),i+=""+s+l+'{content:"'+c+'"}/*!sc*/\n'}}}return i}(this)},e}(),We=/(a)(d)/gi,je=function(e){return String.fromCharCode(e+(e>25?39:97))};function Ue(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=je(t%52)+n;return(je(t%52)+n).replace(We,"$1-$2")}var Ge=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},qe=function(e){return Ge(5381,e)};function $e(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(ve(n)&&!xe(n))return!1}return!0}var Ze=qe("5.3.3"),Qe=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&$e(e),this.componentId=t,this.baseHash=Ge(Ze,t),this.baseStyle=n,Ve.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var i=this.componentId,r=[];if(this.baseStyle&&r.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(i,this.staticRulesId))r.push(this.staticRulesId);else{var a=gt(this.rules,e,t,n).join(""),o=Ue(Ge(this.baseHash,a)>>>0);if(!t.hasNameForId(i,o)){var s=n(a,"."+o,void 0,i);t.insertRules(i,o,s)}r.push(o),this.staticRulesId=o}else{for(var l=this.rules.length,c=Ge(this.baseHash,n.hash),u="",h=0;h<l;h++){var d=this.rules[h];if("string"==typeof d)u+=d;else if(d){var f=gt(d,e,t,n),p=Array.isArray(f)?f.join(""):f;c=Ge(c,p+h),u+=p}}if(u){var g=Ue(c>>>0);if(!t.hasNameForId(i,g)){var m=n(u,"."+g,void 0,i);t.insertRules(i,g,m)}r.push(g)}}return r.join(" ")},e}(),Ke=/^\s*\/\/.*$/gm,Je=[":","[",".","#"];function et(e){var t,n,i,r,a=void 0===e?me:e,o=a.options,s=void 0===o?me:o,l=a.plugins,c=void 0===l?ge:l,u=new oe(s),h=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,i,r,a,o,s,l,c,u,h){switch(n){case 1:if(0===u&&64===i.charCodeAt(0))return e(i+";"),"";break;case 2:if(0===c)return i+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(r[0]+i),"";default:return i+(0===h?"/*|*/":"")}case-2:i.split("/*|*/}").forEach(t)}}}((function(e){h.push(e)})),f=function(e,i,a){return 0===i&&-1!==Je.indexOf(a[n.length])||a.match(r)?e:"."+t};function p(e,a,o,s){void 0===s&&(s="&");var l=e.replace(Ke,""),c=a&&o?o+" "+a+" { "+l+" }":l;return t=s,n=a,i=new RegExp("\\"+n+"\\b","g"),r=new RegExp("(\\"+n+"\\b){2,}"),u(o||!a?"":a,c)}return u.use([].concat(c,[function(e,t,r){2===e&&r.length&&r[0].lastIndexOf(n)>0&&(r[0]=r[0].replace(i,f))},d,function(e){if(-2===e){var t=h;return h=[],t}}])),p.hash=c.length?c.reduce((function(e,t){return t.name||Ae(15),Ge(e,t.name)}),5381).toString():"",p}var tt=e.createContext(),nt=(tt.Consumer,e.createContext()),it=(nt.Consumer,new Ve),rt=et();function at(){return(0,e.useContext)(tt)||it}function ot(){return(0,e.useContext)(nt)||rt}function st(t){var n=(0,e.useState)(t.stylisPlugins),i=n[0],r=n[1],a=at(),o=(0,e.useMemo)((function(){var e=a;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),s=(0,e.useMemo)((function(){return et({options:{prefix:!t.disableVendorPrefixes},plugins:i})}),[t.disableVendorPrefixes,i]);return(0,e.useEffect)((function(){ae()(i,t.stylisPlugins)||r(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(tt.Provider,{value:o},e.createElement(nt.Provider,{value:s},t.children))}var lt=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=rt);var i=n.name+t.hash;e.hasNameForId(n.id,i)||e.insertRules(n.id,i,t(n.rules,i,"@keyframes"))},this.toString=function(){return Ae(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=rt),this.name+e.hash},e}(),ct=/([A-Z])/,ut=/([A-Z])/g,ht=/^ms-/,dt=function(e){return"-"+e.toLowerCase()};function ft(e){return ct.test(e)?e.replace(ut,dt).replace(ht,"-ms-"):e}var pt=function(e){return null==e||!1===e||""===e};function gt(e,t,n,i){if(Array.isArray(e)){for(var r,a=[],o=0,s=e.length;o<s;o+=1)""!==(r=gt(e[o],t,n,i))&&(Array.isArray(r)?a.push.apply(a,r):a.push(r));return a}return pt(e)?"":xe(e)?"."+e.styledComponentId:ve(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:gt(e(t),t,n,i):e instanceof lt?n?(e.inject(n,i),e.getName(i)):e:pe(e)?function e(t,n){var i,r,a=[];for(var o in t)t.hasOwnProperty(o)&&!pt(t[o])&&(Array.isArray(t[o])&&t[o].isCss||ve(t[o])?a.push(ft(o)+":",t[o],";"):pe(t[o])?a.push.apply(a,e(t[o],o)):a.push(ft(o)+": "+(i=o,(null==(r=t[o])||"boolean"==typeof r||""===r?"":"number"!=typeof r||0===r||i in se?String(r).trim():r+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var l}var mt=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function vt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return ve(e)||pe(e)?mt(gt(fe(ge,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:mt(gt(fe(e,n)))}new Set;var bt=function(e,t,n){return void 0===n&&(n=me),e.theme!==n.theme&&e.theme||t||n.theme},xt=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,yt=/(^-|-$)/g;function wt(e){return e.replace(xt,"-").replace(yt,"")}var kt=function(e){return Ue(qe(e)>>>0)};function St(e){return"string"==typeof e&&!0}var At=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ct=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Et(e,t,n){var i=e[n];At(t)&&At(i)?Tt(i,t):e[n]=t}function Tt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];for(var r=0,a=n;r<a.length;r++){var o=a[r];if(At(o))for(var s in o)Ct(s)&&Et(e,o[s],s)}return e}var Pt=e.createContext();function Lt(t){var n=(0,e.useContext)(Pt),i=(0,e.useMemo)((function(){return function(e,t){return e?ve(e)?e(t):Array.isArray(e)||"object"!=typeof e?Ae(8):t?de({},t,{},e):e:Ae(14)}(t.theme,n)}),[t.theme,n]);return t.children?e.createElement(Pt.Provider,{value:i},t.children):null}Pt.Consumer;var Rt={};function Mt(t,n,i){var r=xe(t),a=!St(t),o=n.attrs,s=void 0===o?ge:o,l=n.componentId,c=void 0===l?function(e,t){var n="string"!=typeof e?"sc":wt(e);Rt[n]=(Rt[n]||0)+1;var i=n+"-"+kt("5.3.3"+n+Rt[n]);return t?t+"-"+i:i}(n.displayName,n.parentComponentId):l,u=n.displayName,h=void 0===u?function(e){return St(e)?"styled."+e:"Styled("+be(e)+")"}(t):u,d=n.displayName&&n.componentId?wt(n.displayName)+"-"+n.componentId:n.componentId||c,f=r&&t.attrs?Array.prototype.concat(t.attrs,s).filter(Boolean):s,p=n.shouldForwardProp;r&&t.shouldForwardProp&&(p=n.shouldForwardProp?function(e,i,r){return t.shouldForwardProp(e,i,r)&&n.shouldForwardProp(e,i,r)}:t.shouldForwardProp);var g,m=new Qe(i,d,r?t.componentStyle:void 0),v=m.isStatic&&0===s.length,b=function(t,n){return function(t,n,i,r){var a=t.attrs,o=t.componentStyle,s=t.defaultProps,l=t.foldedComponentIds,c=t.shouldForwardProp,u=t.styledComponentId,h=t.target,d=function(e,t,n){void 0===e&&(e=me);var i=de({},t,{theme:e}),r={};return n.forEach((function(e){var t,n,a,o=e;for(t in ve(o)&&(o=o(i)),o)i[t]=r[t]="className"===t?(n=r[t],a=o[t],n&&a?n+" "+a:n||a):o[t]})),[i,r]}(bt(n,(0,e.useContext)(Pt),s)||me,n,a),f=d[0],p=d[1],g=function(e,t,n,i){var r=at(),a=ot();return t?e.generateAndInjectStyles(me,r,a):e.generateAndInjectStyles(n,r,a)}(o,r,f),m=i,v=p.$as||n.$as||p.as||n.as||h,b=St(v),x=p!==n?de({},n,{},p):n,y={};for(var w in x)"$"!==w[0]&&"as"!==w&&("forwardedAs"===w?y.as=x[w]:(c?c(w,ce,v):!b||ce(w))&&(y[w]=x[w]));return n.style&&p.style!==n.style&&(y.style=de({},n.style,{},p.style)),y.className=Array.prototype.concat(l,u,g!==u?g:null,n.className,p.className).filter(Boolean).join(" "),y.ref=m,(0,e.createElement)(v,y)}(g,t,n,v)};return b.displayName=h,(g=e.forwardRef(b)).attrs=f,g.componentStyle=m,g.displayName=h,g.shouldForwardProp=p,g.foldedComponentIds=r?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):ge,g.styledComponentId=d,g.target=r?t.target:t,g.withComponent=function(e){var t=n.componentId,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(n,["componentId"]),a=t&&t+"-"+(St(e)?e:wt(be(e)));return Mt(e,de({},r,{attrs:f,componentId:a}),i)},Object.defineProperty(g,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=r?Tt({},t.defaultProps,e):e}}),g.toString=function(){return"."+g.styledComponentId},a&&he()(g,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),g}var It=function(e){return function e(t,n,i){if(void 0===i&&(i=me),!(0,ie.isValidElementType)(n))return Ae(1,String(n));var r=function(){return t(n,i,vt.apply(void 0,arguments))};return r.withConfig=function(r){return e(t,n,de({},i,{},r))},r.attrs=function(r){return e(t,n,de({},i,{attrs:Array.prototype.concat(i.attrs,r).filter(Boolean)}))},r}(Mt,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){It[e]=It(e)}));var Ot,_t=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=$e(e),Ve.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,i){var r=i(gt(this.rules,t,n,i).join(""),""),a=this.componentId+e;n.insertRules(a,a,r)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,i){e>2&&Ve.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,i)},e}();Ot=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=ze();return"<style "+[n&&'nonce="'+n+'"',ye+'="true"','data-styled-version="5.3.3"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?Ae(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return Ae(2);var i=((n={})[ye]="",n["data-styled-version"]="5.3.3",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),r=ze();return r&&(i.nonce=r),[e.createElement("style",de({},i,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new Ve({isServer:!0}),this.sealed=!1}.prototype,Ot.collectStyles=function(t){return this.sealed?Ae(2):e.createElement(st,{sheet:this.instance},t)},Ot.interleaveWithNodeStream=function(e){return Ae(3)};const Nt=It;n(938);var zt=function(e){const t=new Error(e);if(void 0===t.stack)try{throw t}catch(e){}return t},Ft=function(e){return!!e&&"function"==typeof e.then},Dt=function(e,t){if(null!=e)return e;throw zt(null!=t?t:"Got unexpected null or undefined")};function Xt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Bt{getValue(){throw zt("BaseLoadable")}toPromise(){throw zt("BaseLoadable")}valueMaybe(){throw zt("BaseLoadable")}valueOrThrow(){throw zt(`Loadable expected value, but in "${this.state}" state`)}promiseMaybe(){throw zt("BaseLoadable")}promiseOrThrow(){throw zt(`Loadable expected promise, but in "${this.state}" state`)}errorMaybe(){throw zt("BaseLoadable")}errorOrThrow(){throw zt(`Loadable expected error, but in "${this.state}" state`)}is(e){return e.state===this.state&&e.contents===this.contents}map(e){throw zt("BaseLoadable")}}class Yt extends Bt{constructor(e){super(),Xt(this,"state","hasValue"),Xt(this,"contents",void 0),this.contents=e}getValue(){return this.contents}toPromise(){return Promise.resolve(this.contents)}valueMaybe(){return this.contents}valueOrThrow(){return this.contents}promiseMaybe(){}errorMaybe(){}map(e){try{const t=e(this.contents);return Ft(t)?Ut(t):qt(t)?t:Wt(t)}catch(t){return Ft(t)?Ut(t.next((()=>this.map(e)))):jt(t)}}}class Ht extends Bt{constructor(e){super(),Xt(this,"state","hasError"),Xt(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return Promise.reject(this.contents)}valueMaybe(){}promiseMaybe(){}errorMaybe(){return this.contents}errorOrThrow(){return this.contents}map(e){return this}}class Vt extends Bt{constructor(e){super(),Xt(this,"state","loading"),Xt(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return this.contents}valueMaybe(){}promiseMaybe(){return this.contents}promiseOrThrow(){return this.contents}errorMaybe(){}map(e){return Ut(this.contents.then((t=>{const n=e(t);if(qt(n)){const e=n;switch(e.state){case"hasValue":case"loading":return e.contents;case"hasError":throw e.contents}}return n})).catch((t=>{if(Ft(t))return t.then((()=>this.map(e).contents));throw t})))}}function Wt(e){return Object.freeze(new Yt(e))}function jt(e){return Object.freeze(new Ht(e))}function Ut(e){return Object.freeze(new Vt(e))}function Gt(e){const t=(Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))).map((e=>qt(e)?e:Ft(e)?Ut(e):Wt(e))),n=function(e){return e.every((e=>"hasValue"===e.state))?Wt(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?jt(Dt(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):Ut(Promise.all(e.map((e=>e.contents))))}(t);return Array.isArray(e)?n:n.map((t=>Object.getOwnPropertyNames(e).reduce(((e,n,i)=>({...e,[n]:t[i]})),{})))}function qt(e){return e instanceof Bt}const $t={of:e=>Ft(e)?Ut(e):qt(e)?e:Wt(e),error:e=>jt(e),all:Gt,isLoadable:qt};var Zt={loadableWithValue:Wt,loadableWithError:jt,loadableWithPromise:Ut,loadableLoading:function(){return Object.freeze(new Vt(new Promise((()=>{}))))},loadableAll:Gt,isLoadable:qt,RecoilLoadable:$t},Qt=Zt.loadableWithValue,Kt=Zt.loadableWithError,Jt=Zt.loadableWithPromise,en=Zt.loadableLoading,tn=Zt.loadableAll,nn=Zt.isLoadable,rn=Zt.RecoilLoadable,an=Object.freeze({__proto__:null,loadableWithValue:Qt,loadableWithError:Kt,loadableWithPromise:Jt,loadableLoading:en,loadableAll:tn,isLoadable:nn,RecoilLoadable:rn});class on{constructor(e){Xt(this,"key",void 0),this.key=e}}class sn extends on{}class ln extends on{}var cn={AbstractRecoilValue:on,RecoilState:sn,RecoilValueReadOnly:ln,isRecoilValue:function(e){return e instanceof sn||e instanceof ln}},un=cn.AbstractRecoilValue,hn=cn.RecoilState,dn=cn.RecoilValueReadOnly,fn=cn.isRecoilValue,pn=Object.freeze({__proto__:null,AbstractRecoilValue:un,RecoilState:hn,RecoilValueReadOnly:dn,isRecoilValue:fn});const gn=(new Map).set("recoil_hamt_2020",!0).set("recoil_sync_external_store",!0).set("recoil_suppress_rerender_in_callback",!0).set("recoil_memory_managament_2020",!0);function mn(e){var t;return null!==(t=gn.get(e))&&void 0!==t&&t}mn.setPass=e=>{gn.set(e,!0)},mn.setFail=e=>{gn.set(e,!1)},mn.clear=()=>{gn.clear()};var vn=mn,bn=function(e,t){return function*(){let n=0;for(const i of e)yield t(i,n++)}()};class xn{}const yn=new xn;class wn extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const kn=new Map,Sn=new Map;class An extends Error{}const Cn=new Map;function En(e){return Cn.get(e)}var Tn,Pn,Ln={nodes:kn,recoilValues:Sn,registerNode:function(e){if(kn.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}kn.set(e.key,e);const t=null==e.set?new pn.RecoilValueReadOnly(e.key):new pn.RecoilState(e.key);return Sn.set(e.key,t),t},getNode:function(e){const t=kn.get(e);if(null==t)throw new An(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return kn.get(e)},deleteNodeConfigIfPossible:function(e){var t;if(!vn("recoil_memory_managament_2020"))return;const n=kn.get(e);var i;null!=n&&null!==(t=n.shouldDeleteConfigOnRelease)&&void 0!==t&&t.call(n)&&(kn.delete(e),null===(i=En(e))||void 0===i||i(),Cn.delete(e))},setConfigDeletionHandler:function(e,t){vn("recoil_memory_managament_2020")&&(void 0===t?Cn.delete(e):Cn.set(e,t))},getConfigDeletionHandler:En,recoilValuesForKeys:function(e){return bn(e,(e=>Dt(Sn.get(e))))},NodeMissingError:An,DefaultValue:xn,DEFAULT_VALUE:yn,RecoilValueNotReady:wn},Rn=function(e,t){t()},Mn=(Tn=function(e){var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n={},i=Math.pow(2,5),r=i-1,a=i/2,o=i/4,s={},l=function(e){return function(){return e}},c=n.hash=function(e){var n=void 0===e?"undefined":t(e);if("number"===n)return e;"string"!==n&&(e+="");for(var i=0,r=0,a=e.length;r<a;++r)i=(i<<5)-i+e.charCodeAt(r)|0;return i},u=function(e,t){return t>>>e&r},h=function(e){return 1<<e},d=function(e,t){return function(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}(e&t-1)},f=function(e,t,n,i){var r=i;if(!e){var a=i.length;r=new Array(a);for(var o=0;o<a;++o)r[o]=i[o]}return r[t]=n,r},p=function(e,t,n){var i=n.length-1,r=0,a=0,o=n;if(e)r=a=t;else for(o=new Array(i);r<t;)o[a++]=n[r++];for(++r;r<=i;)o[a++]=n[r++];return e&&(o.length=i),o},g={__hamt_isEmpty:!0},m=function(e){return e===g||e&&e.__hamt_isEmpty},v=function(e,t,n,i){return{type:1,edit:e,hash:t,key:n,value:i,_modify:S}},b=function(e,t,n){return{type:2,edit:e,hash:t,children:n,_modify:A}},x=function(e,t,n){return{type:3,edit:e,mask:t,children:n,_modify:C}},y=function(e,t,n){return{type:4,edit:e,size:t,children:n,_modify:E}},w=function e(t,n,i,r,a,o){if(i===a)return b(t,i,[o,r]);var s=u(n,i),l=u(n,a);return x(t,h(s)|h(l),s===l?[e(t,n+5,i,r,a,o)]:s<l?[r,o]:[o,r])},k=function(e,t){return e===t.edit},S=function(e,t,n,i,r,a,o){if(t(a,this.key)){var l=i(this.value);return l===this.value?this:l===s?(--o.value,g):k(e,this)?(this.value=l,this):v(e,r,a,l)}var c=i();return c===s?this:(++o.value,w(e,n,this.hash,this,r,v(e,r,a,c)))},A=function(e,t,n,i,r,a,o){if(r===this.hash){var l=function(e,t,n,i,r,a,o,l){for(var c=r.length,u=0;u<c;++u){var h=r[u];if(n(o,h.key)){var d=h.value,g=a(d);return g===d?r:g===s?(--l.value,p(e,u,r)):f(e,u,v(t,i,o,g),r)}}var m=a();return m===s?r:(++l.value,f(e,c,v(t,i,o,m),r))}(k(e,this),e,t,this.hash,this.children,i,a,o);return l===this.children?this:l.length>1?b(e,this.hash,l):l[0]}var c=i();return c===s?this:(++o.value,w(e,n,this.hash,this,r,v(e,r,a,c)))},C=function(e,t,n,i,r,o,s){var l=this.mask,c=this.children,v=u(n,r),b=h(v),w=d(l,b),S=l&b,A=S?c[w]:g,C=A._modify(e,t,n+5,i,r,o,s);if(A===C)return this;var E,T=k(e,this),P=l,L=void 0;if(S&&m(C)){if(!(P&=~b))return g;if(c.length<=2&&((E=c[1^w])===g||1===E.type||2===E.type))return c[1^w];L=p(T,w,c)}else if(S||m(C))L=f(T,w,C,c);else{if(c.length>=a)return function(e,t,n,i,r){for(var a=[],o=i,s=0,l=0;o;++l)1&o&&(a[l]=r[s++]),o>>>=1;return a[t]=n,y(e,s+1,a)}(e,v,C,l,c);P|=b,L=function(e,t,n,i){var r=i.length;if(e){for(var a=r;a>=t;)i[a--]=i[a];return i[t]=n,i}for(var o=0,s=0,l=new Array(r+1);o<t;)l[s++]=i[o++];for(l[t]=n;o<r;)l[++s]=i[o++];return l}(T,w,C,c)}return T?(this.mask=P,this.children=L,this):x(e,P,L)},E=function(e,t,n,i,r,a,s){var l=this.size,c=this.children,h=u(n,r),d=c[h],p=(d||g)._modify(e,t,n+5,i,r,a,s);if(d===p)return this;var v=k(e,this),b=void 0;if(m(d)&&!m(p))++l,b=f(v,h,p,c);else if(!m(d)&&m(p)){if(--l<=o)return function(e,t,n,i){for(var r=new Array(t-1),a=0,o=0,s=0,l=i.length;s<l;++s)if(s!==n){var c=i[s];c&&!m(c)&&(r[a++]=c,o|=1<<s)}return x(e,o,r)}(e,l,h,c);b=f(v,h,g,c)}else b=f(v,h,p,c);return v?(this.size=l,this.children=b,this):y(e,l,b)};function T(e,t,n,i,r){this._editable=e,this._edit=t,this._config=n,this._root=i,this._size=r}g._modify=function(e,t,n,i,r,a,o){var l=i();return l===s?g:(++o.value,v(e,r,a,l))},T.prototype.setTree=function(e,t){return this._editable?(this._root=e,this._size=t,this):e===this._root?this:new T(this._editable,this._edit,this._config,e,t)};var P=n.tryGetHash=function(e,t,n,i){for(var r=i._root,a=0,o=i._config.keyEq;;)switch(r.type){case 1:return o(n,r.key)?r.value:e;case 2:if(t===r.hash)for(var s=r.children,l=0,c=s.length;l<c;++l){var f=s[l];if(o(n,f.key))return f.value}return e;case 3:var p=u(a,t),g=h(p);if(r.mask&g){r=r.children[d(r.mask,g)],a+=5;break}return e;case 4:if(r=r.children[u(a,t)]){a+=5;break}return e;default:return e}};T.prototype.tryGetHash=function(e,t,n){return P(e,t,n,this)};var L=n.tryGet=function(e,t,n){return P(e,n._config.hash(t),t,n)};T.prototype.tryGet=function(e,t){return L(e,t,this)};var R=n.getHash=function(e,t,n){return P(void 0,e,t,n)};T.prototype.getHash=function(e,t){return R(e,t,this)},n.get=function(e,t){return P(void 0,t._config.hash(e),e,t)},T.prototype.get=function(e,t){return L(t,e,this)};var M=n.has=function(e,t,n){return P(s,e,t,n)!==s};T.prototype.hasHash=function(e,t){return M(e,t,this)};var I=n.has=function(e,t){return M(t._config.hash(e),e,t)};T.prototype.has=function(e){return I(e,this)};var O=function(e,t){return e===t};n.make=function(e){return new T(0,0,{keyEq:e&&e.keyEq||O,hash:e&&e.hash||c},g,0)},n.empty=n.make();var _=n.isEmpty=function(e){return e&&!!m(e._root)};T.prototype.isEmpty=function(){return _(this)};var N=n.modifyHash=function(e,t,n,i){var r={value:i._size},a=i._root._modify(i._editable?i._edit:NaN,i._config.keyEq,0,e,t,n,r);return i.setTree(a,r.value)};T.prototype.modifyHash=function(e,t,n){return N(n,e,t,this)};var z=n.modify=function(e,t,n){return N(e,n._config.hash(t),t,n)};T.prototype.modify=function(e,t){return z(t,e,this)};var F=n.setHash=function(e,t,n,i){return N(l(n),e,t,i)};T.prototype.setHash=function(e,t,n){return F(e,t,n,this)};var D=n.set=function(e,t,n){return F(n._config.hash(e),e,t,n)};T.prototype.set=function(e,t){return D(e,t,this)};var X=l(s),B=n.removeHash=function(e,t,n){return N(X,e,t,n)};T.prototype.removeHash=T.prototype.deleteHash=function(e,t){return B(e,t,this)};var Y=n.remove=function(e,t){return B(t._config.hash(e),e,t)};T.prototype.remove=T.prototype.delete=function(e){return Y(e,this)};var H=n.beginMutation=function(e){return new T(e._editable+1,e._edit+1,e._config,e._root,e._size)};T.prototype.beginMutation=function(){return H(this)};var V=n.endMutation=function(e){return e._editable=e._editable&&e._editable-1,e};T.prototype.endMutation=function(){return V(this)};var W=n.mutate=function(e,t){var n=H(t);return e(n),V(n)};T.prototype.mutate=function(e){return W(e,this)};var j=function(e){return e&&U(e[0],e[1],e[2],e[3],e[4])},U=function(e,t,n,i,r){for(;n<e;){var a=t[n++];if(a&&!m(a))return G(a,i,[e,t,n,i,r])}return j(r)},G=function(e,t,n){switch(e.type){case 1:return{value:t(e),rest:n};case 2:case 4:case 3:var i=e.children;return U(i.length,i,0,t,n);default:return j(n)}},q={done:!0};function $(e){this.v=e}$.prototype.next=function(){if(!this.v)return q;var e=this.v;return this.v=j(e.rest),e},$.prototype[Symbol.iterator]=function(){return this};var Z=function(e,t){return new $(G(e._root,t))},Q=function(e){return[e.key,e.value]},K=n.entries=function(e){return Z(e,Q)};T.prototype.entries=T.prototype[Symbol.iterator]=function(){return K(this)};var J=function(e){return e.key},ee=n.keys=function(e){return Z(e,J)};T.prototype.keys=function(){return ee(this)};var te=function(e){return e.value},ne=n.values=T.prototype.values=function(e){return Z(e,te)};T.prototype.values=function(){return ne(this)};var ie=n.fold=function(e,t,n){var i=n._root;if(1===i.type)return e(t,i.value,i.key);for(var r=[i.children],a=void 0;a=r.pop();)for(var o=0,s=a.length;o<s;){var l=a[o++];l&&l.type&&(1===l.type?t=e(t,l.value,l.key):r.push(l.children))}return t};T.prototype.fold=function(e,t){return ie(e,t,this)};var re=n.forEach=function(e,t){return ie((function(n,i,r){return e(i,r,t)}),null,t)};T.prototype.forEach=function(e){return re(e,this)};var ae=n.count=function(e){return e._size};T.prototype.count=function(){return ae(this)},Object.defineProperty(T.prototype,"size",{get:T.prototype.count}),e.exports?e.exports=n:(void 0).hamt=n},Tn(Pn={exports:{}}),Pn.exports);class In{constructor(e){Xt(this,"_map",void 0),this._map=new Map(null==e?void 0:e.entries())}keys(){return this._map.keys()}entries(){return this._map.entries()}get(e){return this._map.get(e)}has(e){return this._map.has(e)}set(e,t){return this._map.set(e,t),this}delete(e){return this._map.delete(e),this}clone(){return _n(this)}toMap(){return new Map(this._map)}}class On{constructor(e){if(Xt(this,"_hamt",Mn.empty.beginMutation()),e instanceof On){const t=e._hamt.endMutation();e._hamt=t.beginMutation(),this._hamt=t.beginMutation()}else if(e)for(const[t,n]of e.entries())this._hamt.set(t,n)}keys(){return this._hamt.keys()}entries(){return this._hamt.entries()}get(e){return this._hamt.get(e)}has(e){return this._hamt.has(e)}set(e,t){return this._hamt.set(e,t),this}delete(e){return this._hamt.delete(e),this}clone(){return _n(this)}toMap(){return new Map(this._hamt)}}function _n(e){return vn("recoil_hamt_2020")?new On(e):new In(e)}var Nn=_n,zn=Object.freeze({__proto__:null,persistentMap:Nn}),Fn=function(e,...t){const n=new Set;e:for(const i of e){for(const e of t)if(e.has(i))continue e;n.add(i)}return n},Dn=function(e,t){const n=new Map;return e.forEach(((e,i)=>{n.set(i,t(e,i))})),n};function Xn(e,t,n){const{nodeDeps:i,nodeToNodeSubscriptions:r}=t;e.forEach(((e,t)=>{const a=i.get(t);a&&n&&a!==n.nodeDeps.get(t)||(i.set(t,new Set(e)),(null==a?e:Fn(e,a)).forEach((e=>{r.has(e)||r.set(e,new Set),Dt(r.get(e)).add(t)})),a&&Fn(a,e).forEach((e=>{if(!r.has(e))return;const n=Dt(r.get(e));n.delete(t),0===n.size&&r.delete(e)})))}))}var Bn={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),Dt(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:Dn(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:Dn(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const i=Dt(t.get(n));e.forEach((e=>i.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var i,r,a,o;const s=t.getState();n!==s.currentTree.version&&n!==(null===(i=s.nextTree)||void 0===i?void 0:i.version)&&(null===(r=s.previousTree)||void 0===r||r.version);const l=t.getGraph(n);if(Xn(e,l),n===(null===(a=s.previousTree)||void 0===a?void 0:a.version)&&Xn(e,t.getGraph(s.currentTree.version),l),n===(null===(o=s.previousTree)||void 0===o?void 0:o.version)||n===s.currentTree.version){var c;const n=null===(c=s.nextTree)||void 0===c?void 0:c.version;void 0!==n&&Xn(e,t.getGraph(n),l)}}};let Yn=0,Hn=0,Vn=0;var Wn={getNextTreeStateVersion:()=>Yn++,getNextStoreID:()=>Hn++,getNextComponentID:()=>Vn++};const{persistentMap:jn}=zn,{graph:Un}=Bn,{getNextTreeStateVersion:Gn}=Wn;function qn(){const e=Gn();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:jn(),nonvalidatedAtoms:jn()}}var $n={makeEmptyTreeState:qn,makeEmptyStoreState:function(){const e=qn();return{currentTree:e,nextTree:null,previousTree:null,commitDepth:0,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,Un()),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}},getNextTreeStateVersion:Gn};class Zn{}var Qn={RetentionZone:Zn,retentionZone:function(){return new Zn}},Kn={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const i=new Map(e);return i.set(t,n),i},mapByUpdatingInMap:function(e,t,n){const i=new Map(e);return i.set(t,n(i.get(t))),i},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}},Jn=function*(e,t){let n=0;for(const i of e)t(i,n++)&&(yield i)},ei=function(e,t){return new Proxy(e,{get:(e,n)=>(!(n in e)&&n in t&&(e[n]=t[n]()),e[n]),ownKeys:e=>Object.keys(e)})};const{getNode:ti,getNodeMaybe:ni,recoilValuesForKeys:ii}=Ln,{RetentionZone:ri}=Qn,{setByAddingToSet:ai}=Kn,oi=Object.freeze(new Set);class si extends Error{}function li(e,t,n,i){const r=e.getState();if(r.nodeCleanupFunctions.has(n))return;const a=ti(n),o=function(e,t,n){if(!vn("recoil_memory_managament_2020"))return()=>{};const{nodesRetainedByZone:i}=e.getState().retention;function r(e){let n=i.get(e);n||i.set(e,n=new Set),n.add(t)}if(n instanceof ri)r(n);else if(Array.isArray(n))for(const e of n)r(e);return()=>{if(!vn("recoil_memory_managament_2020"))return;const{retention:i}=e.getState();function r(e){const n=i.nodesRetainedByZone.get(e);null==n||n.delete(t),n&&0===n.size&&i.nodesRetainedByZone.delete(e)}if(n instanceof ri)r(n);else if(Array.isArray(n))for(const e of n)r(e)}}(e,n,a.retainedBy),s=a.init(e,t,i);r.nodeCleanupFunctions.set(n,(()=>{s(),o()}))}function ci(e,t,n){return ti(n).peek(e,t)}function ui(e,t,n){const i=new Set,r=Array.from(n),a=e.getGraph(t.version);for(let e=r.pop();e;e=r.pop()){var o;i.add(e);const t=null!==(o=a.nodeToNodeSubscriptions.get(e))&&void 0!==o?o:oi;for(const e of t)i.has(e)||r.push(e)}return i}var hi,di,fi,pi={getNodeLoadable:function(e,t,n){return li(e,t,n,"get"),ti(n).get(e,t)},peekNodeLoadable:ci,setNodeValue:function(e,t,n,i){const r=ti(n);if(null==r.set)throw new si(`Attempt to set read-only RecoilValue: ${n}`);const a=r.set;return li(e,t,n,"set"),a(e,t,i)},initializeNode:function(e,t,n){li(e,e.getState().currentTree,t,n)},cleanUpNode:function(e,t){var n;const i=e.getState();null===(n=i.nodeCleanupFunctions.get(t))||void 0===n||n(),i.nodeCleanupFunctions.delete(t)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var i;const r=ni(t);return null==r||null===(i=r.invalidate)||void 0===i||i.call(r,e),{...e,atomValues:e.atomValues.clone().delete(t),nonvalidatedAtoms:e.nonvalidatedAtoms.clone().set(t,n),dirtyAtoms:ai(e.dirtyAtoms,t)}},peekNodeInfo:function(e,t,n){const i=e.getState(),r=e.getGraph(t.version),a=ti(n).nodeType;return ei({type:a},{loadable:()=>ci(e,t,n),isActive:()=>i.knownAtoms.has(n)||i.knownSelectors.has(n),isSet:()=>"selector"!==a&&t.atomValues.has(n),isModified:()=>t.dirtyAtoms.has(n),deps:()=>{var e;return ii(null!==(e=r.nodeDeps.get(n))&&void 0!==e?e:[])},subscribers:()=>{var r,a;return{nodes:ii(Jn(ui(e,t,new Set([n])),(e=>e!==n))),components:bn(null!==(r=null===(a=i.nodeToComponentSubscriptions.get(n))||void 0===a?void 0:a.values())&&void 0!==r?r:[],(([e])=>({name:e})))}}})},getDownstreamNodes:ui};const gi=null!==(hi=e.createMutableSource)&&void 0!==hi?hi:e.unstable_createMutableSource,mi=null!==(di=e.useMutableSource)&&void 0!==di?di:e.unstable_useMutableSource,vi=null!==(fi=e.useSyncExternalStore)&&void 0!==fi?fi:e.unstable_useSyncExternalStore;var bi={createMutableSource:gi,useMutableSource:mi,useSyncExternalStore:vi,reactMode:function(){return vn("recoil_transition_support")?{mode:"TRANSITION_SUPPORT",early:!0,concurrent:!0}:vn("recoil_sync_external_store")&&null!=vi?{mode:"SYNC_EXTERNAL_STORE",early:!0,concurrent:!1}:vn("recoil_mutable_source")&&null!=mi&&"undefined"!=typeof window&&!window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE?vn("recoil_suppress_rerender_in_callback")?{mode:"MUTABLE_SOURCE",early:!0,concurrent:!0}:{mode:"MUTABLE_SOURCE",early:!1,concurrent:!1}:vn("recoil_suppress_rerender_in_callback")?{mode:"LEGACY",early:!0,concurrent:!1}:{mode:"LEGACY",early:!1,concurrent:!1}}};const{getDownstreamNodes:xi,getNodeLoadable:yi,setNodeValue:wi}=pi,{getNextComponentID:ki}=Wn,{getNode:Si,getNodeMaybe:Ai}=Ln,{DefaultValue:Ci,RecoilValueNotReady:Ei}=Ln,{reactMode:Ti}=bi,{AbstractRecoilValue:Pi,RecoilState:Li,RecoilValueReadOnly:Ri,isRecoilValue:Mi}=pn;function Ii(e,t,n){if("set"===n.type){const{recoilValue:i,valueOrUpdater:r}=n,a=function(e,t,{key:n},i){if("function"==typeof i){const r=yi(e,t,n);if("loading"===r.state)throw new Ei(n);if("hasError"===r.state)throw r.contents;return i(r.contents)}return i}(e,t,i,r),o=wi(e,t,i.key,a);for(const[e,n]of o.entries())Oi(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:i}=n;Oi(t,e,i)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var i;const{recoilValue:{key:e},unvalidatedValue:r}=n,a=Ai(e);null==a||null===(i=a.invalidate)||void 0===i||i.call(a,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,r),t.dirtyAtoms.add(e)}else n.type}function Oi(e,t,n){"hasValue"===n.state&&n.contents instanceof Ci?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function _i(e,t){e.replaceState((n=>{const i=Fi(n);for(const n of t)Ii(e,i,n);return Di(e,i),i}))}function Ni(e,t){if(zi.length){const n=zi[zi.length-1];let i=n.get(e);i||n.set(e,i=[]),i.push(t)}else _i(e,[t])}const zi=[];function Fi(e){return{...e,atomValues:e.atomValues.clone(),nonvalidatedAtoms:e.nonvalidatedAtoms.clone(),dirtyAtoms:new Set(e.dirtyAtoms)}}function Di(e,t){const n=xi(e,t,t.dirtyAtoms);for(const e of n){var i,r;null===(i=Ai(e))||void 0===i||null===(r=i.invalidate)||void 0===r||r.call(i,t)}}function Xi(e,t,n){Ni(e,{type:"set",recoilValue:t,valueOrUpdater:n})}var Bi={RecoilValueReadOnly:Ri,AbstractRecoilValue:Pi,RecoilState:Li,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var i,r;const a=e.getState();n.version!==a.currentTree.version&&n.version!==(null===(i=a.nextTree)||void 0===i?void 0:i.version)&&(n.version,null===(r=a.previousTree)||void 0===r||r.version);const o=yi(e,n,t);return"loading"===o.state&&o.contents.catch((()=>{})),o},setRecoilValue:Xi,setRecoilValueLoadable:function(e,t,n){if(n instanceof Ci)return Xi(e,t,n);Ni(e,{type:"setLoadable",recoilValue:t,loadable:n})},markRecoilValueModified:function(e,t){Ni(e,{type:"markModified",recoilValue:t})},setUnvalidatedRecoilValue:function(e,t,n){Ni(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n})},subscribeToRecoilValue:function(e,{key:t},n,i=null){const r=ki(),a=e.getState();a.nodeToComponentSubscriptions.has(t)||a.nodeToComponentSubscriptions.set(t,new Map),Dt(a.nodeToComponentSubscriptions.get(t)).set(r,[null!=i?i:"<not captured>",n]);const o=Ti();if(o.early&&("LEGACY"===o.mode||"MUTABLE_SOURCE"===o.mode)){const i=e.getState().nextTree;i&&i.dirtyAtoms.has(t)&&n(i)}return{release:()=>{const n=e.getState(),i=n.nodeToComponentSubscriptions.get(t);void 0!==i&&i.has(r)&&(i.delete(r),0===i.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:Mi,applyAtomValueWrites:function(e,t){const n=e.clone();return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof Ci?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return zi.push(e),()=>{for(const[t,n]of e)_i(t,n);zi.pop()}},writeLoadableToTreeState:Oi,invalidateDownstreams:Di,copyTreeState:Fi,refreshRecoilValue:function(e,t){var n;const{currentTree:i}=e.getState(),r=Si(t.key);null===(n=r.clearCache)||void 0===n||n.call(r,e,i)},invalidateDownstreams_FOR_TESTING:Di},Yi=function(e,t,n){const i=e.entries();let r=i.next();for(;!r.done;){const a=r.value;if(t.call(n,a[1],a[0],e))return!0;r=i.next()}return!1};const{cleanUpNode:Hi}=pi,{deleteNodeConfigIfPossible:Vi,getNode:Wi}=Ln,{RetentionZone:ji}=Qn,Ui=new Set;function Gi(e,t){const n=e.getState(),i=n.currentTree;if(n.nextTree)return;const r=new Set;for(const e of t)if(e instanceof ji)for(const t of $i(n,e))r.add(t);else r.add(e);const a=function(e,t){const n=e.getState(),i=n.currentTree,r=e.getGraph(i.version),a=new Set,o=new Set;return function t(s){const l=new Set,c=function(e,t,n,i,r){const a=e.getGraph(t.version),o=[],s=new Set;for(;n.size>0;)l(Dt(n.values().next().value));return o;function l(e){if(i.has(e)||r.has(e))return void n.delete(e);if(s.has(e))return;const t=a.nodeToNodeSubscriptions.get(e);if(t)for(const e of t)l(e);s.add(e),n.delete(e),o.push(e)}}(e,i,s,a,o);for(const e of c){var u;if("recoilRoot"===Wi(e).retainedBy){o.add(e);continue}if((null!==(u=n.retention.referenceCounts.get(e))&&void 0!==u?u:0)>0){o.add(e);continue}if(Zi(e).some((e=>n.retention.referenceCounts.get(e)))){o.add(e);continue}const t=r.nodeToNodeSubscriptions.get(e);t&&Yi(t,(e=>o.has(e)))?o.add(e):(a.add(e),l.add(e))}const h=new Set;for(const e of l)for(const t of null!==(d=r.nodeDeps.get(e))&&void 0!==d?d:Ui){var d;a.has(t)||h.add(t)}h.size&&t(h)}(t),a}(e,r);for(const t of a)qi(e,i,t)}function qi(e,t,n){if(!vn("recoil_memory_managament_2020"))return;Hi(e,n);const i=e.getState();i.knownAtoms.delete(n),i.knownSelectors.delete(n),i.nodeTransactionSubscriptions.delete(n),i.retention.referenceCounts.delete(n);const r=Zi(n);for(const e of r){var a;null===(a=i.retention.nodesRetainedByZone.get(e))||void 0===a||a.delete(n)}t.atomValues.delete(n),t.dirtyAtoms.delete(n),t.nonvalidatedAtoms.delete(n);const o=i.graphsByVersion.get(t.version);if(o){const e=o.nodeDeps.get(n);if(void 0!==e){o.nodeDeps.delete(n);for(const t of e){var s;null===(s=o.nodeToNodeSubscriptions.get(t))||void 0===s||s.delete(n)}}o.nodeToNodeSubscriptions.delete(n)}Vi(n)}function $i(e,t){var n;return null!==(n=e.retention.nodesRetainedByZone.get(t))&&void 0!==n?n:Ui}function Zi(e){const t=Wi(e).retainedBy;return void 0===t||"components"===t||"recoilRoot"===t?[]:t instanceof ji?[t]:t}function Qi(e,t){vn("recoil_memory_managament_2020")&&(e.getState().retention.referenceCounts.delete(t),function(e,t){const n=e.getState();n.nextTree?n.retention.retainablesToCheckForRelease.add(t):Gi(e,new Set([t]))}(e,t))}var Ki={SUSPENSE_TIMEOUT_MS:12e4,updateRetainCount:function(e,t,n){var i;if(!vn("recoil_memory_managament_2020"))return;const r=e.getState().retention.referenceCounts,a=(null!==(i=r.get(t))&&void 0!==i?i:0)+n;0===a?Qi(e,t):r.set(t,a)},updateRetainCountToZero:Qi,releaseScheduledRetainablesNow:function(e){if(!vn("recoil_memory_managament_2020"))return;const t=e.getState();Gi(e,t.retention.retainablesToCheckForRelease),t.retention.retainablesToCheckForRelease.clear()},retainedByOptionWithDefault:function(e){return void 0===e?"recoilRoot":e}};const{unstable_batchedUpdates:Ji}=t;var er={unstable_batchedUpdates:Ji};const{unstable_batchedUpdates:tr}=er;var nr={unstable_batchedUpdates:tr};const{batchStart:ir}=Bi,{unstable_batchedUpdates:rr}=nr;let ar=rr;var or={getBatcher:()=>ar,setBatcher:e=>{ar=e},batchUpdates:e=>{ar((()=>{let t=()=>{};try{t=ir(),e()}finally{t()}}))}},sr={isSSR:"undefined"==typeof window,isReactNative:"undefined"!=typeof navigator&&"ReactNative"===navigator.product},lr={memoizeWithArgsHash:function(e,t){let n;return(...i)=>{n||(n={});const r=t(...i);return Object.hasOwnProperty.call(n,r)||(n[r]=e.apply(this,i)),n[r]}},memoizeOneWithArgsHash:function(e,t){let n,i;return(...r)=>{const a=t(...r);return n===a||(n=a,i=e.apply(this,r)),i}},memoizeOneWithArgsHashAndInvalidation:function(e,t){let n,i;return[(...r)=>{const a=t(...r);return n===a||(n=a,i=e.apply(this,r)),i},()=>{n=null}]}};const{batchUpdates:cr}=or,{initializeNode:ur,peekNodeInfo:hr}=pi,{graph:dr}=Bn,{getNextStoreID:fr}=Wn,{DEFAULT_VALUE:pr,recoilValues:gr,recoilValuesForKeys:mr}=Ln,{AbstractRecoilValue:vr,getRecoilValueAsLoadable:br,setRecoilValue:xr,setUnvalidatedRecoilValue:yr}=Bi,{updateRetainCount:wr}=Ki,{getNextTreeStateVersion:kr,makeEmptyStoreState:Sr}=$n,{isSSR:Ar}=sr,{memoizeOneWithArgsHashAndInvalidation:Cr}=lr;class Er{constructor(e){Xt(this,"_store",void 0),Xt(this,"_refCount",1),Xt(this,"getLoadable",(e=>(this.checkRefCount_INTERNAL(),br(this._store,e)))),Xt(this,"getPromise",(e=>(this.checkRefCount_INTERNAL(),this.getLoadable(e).toPromise()))),Xt(this,"getNodes_UNSTABLE",(e=>{if(this.checkRefCount_INTERNAL(),!0===(null==e?void 0:e.isModified)){if(!1===(null==e?void 0:e.isInitialized))return[];const t=this._store.getState().currentTree;return mr(t.dirtyAtoms)}const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?gr.values():!0===e.isInitialized?mr(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):Jn(gr.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),Xt(this,"getInfo_UNSTABLE",(({key:e})=>(this.checkRefCount_INTERNAL(),hr(this._store,this._store.getState().currentTree,e)))),Xt(this,"map",(e=>{this.checkRefCount_INTERNAL();const t=new Rr(this,cr);return e(t),t})),Xt(this,"asyncMap",(async e=>{this.checkRefCount_INTERNAL();const t=new Rr(this,cr);return t.retain(),await e(t),t.autoRelease_INTERNAL(),t})),this._store={storeID:fr(),getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return Dt(n.get(t));const i=dr();return n.set(t,i),i},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw zt("Cannot subscribe to Snapshots")}};for(const e of this._store.getState().knownAtoms)ur(this._store,e,"get"),wr(this._store,e,1);this.autoRelease_INTERNAL()}retain(){this._refCount,this._refCount++;let e=!1;return()=>{e||(e=!0,this._release())}}autoRelease_INTERNAL(){Ar||window.setTimeout((()=>this._release()),0)}_release(){if(this._refCount--,0===this._refCount){if(this._store.getState().nodeCleanupFunctions.forEach((e=>e())),this._store.getState().nodeCleanupFunctions.clear(),!vn("recoil_memory_managament_2020"))return}else this._refCount}isRetained(){return this._refCount>0}checkRefCount_INTERNAL(){vn("recoil_memory_managament_2020")&&this._refCount}getStore_INTERNAL(){return this.checkRefCount_INTERNAL(),this._store}getID(){return this.checkRefCount_INTERNAL(),this._store.getState().currentTree.stateID}}function Tr(e,t,n=!1){const i=e.getState(),r=n?kr():t.version;return{currentTree:n?{version:r,stateID:r,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:t.atomValues.clone(),nonvalidatedAtoms:t.nonvalidatedAtoms.clone()}:t,commitDepth:0,nextTree:null,previousTree:null,knownAtoms:new Set(i.knownAtoms),knownSelectors:new Set(i.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(r,e.getGraph(t.version)),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map(bn(i.nodeCleanupFunctions.entries(),(([e])=>[e,()=>{}])))}}const[Pr,Lr]=Cr(((e,t)=>{const n=e.getState(),i="current"===t?n.currentTree:Dt(n.previousTree);return new Er(Tr(e,i))}),((e,t)=>{var n;return String(t)+String(e.storeID)+String(e.getState().currentTree.version)+String(null===(n=e.getState().previousTree)||void 0===n?void 0:n.version)}));class Rr extends Er{constructor(e,t){super(Tr(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),Xt(this,"_batch",void 0),Xt(this,"set",((e,t)=>{this.checkRefCount_INTERNAL();const n=this.getStore_INTERNAL();this._batch((()=>{wr(n,e.key,1),xr(this.getStore_INTERNAL(),e,t)}))})),Xt(this,"reset",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();this._batch((()=>{wr(t,e.key,1),xr(this.getStore_INTERNAL(),e,pr)}))})),Xt(this,"setUnvalidatedAtomValues_DEPRECATED",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();cr((()=>{for(const[n,i]of e.entries())wr(t,n,1),yr(t,new vr(n),i)}))})),this._batch=t}}var Mr={Snapshot:Er,MutableSnapshot:Rr,freshSnapshot:function(e){const t=new Er(Sr());return null!=e?t.map(e):t},cloneSnapshot:function(e,t="current"){const n=Pr(e,t);return n.isRetained()?n:(Lr(),Pr(e,t))}},Ir=Mr.Snapshot,Or=Mr.MutableSnapshot,_r=Mr.freshSnapshot,Nr=Mr.cloneSnapshot,zr=Object.freeze({__proto__:null,Snapshot:Ir,MutableSnapshot:Or,freshSnapshot:_r,cloneSnapshot:Nr}),Fr=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useRef:Dr}=e;var Xr=function(e){const t=Dr(e);return t.current===e&&"function"==typeof e&&(t.current=e()),t};const{getNextTreeStateVersion:Br,makeEmptyStoreState:Yr}=$n,{cleanUpNode:Hr,getDownstreamNodes:Vr,initializeNode:Wr,setNodeValue:jr,setUnvalidatedAtomValue_DEPRECATED:Ur}=pi,{graph:Gr}=Bn,{cloneGraph:qr}=Bn,{getNextStoreID:$r}=Wn,{createMutableSource:Zr,reactMode:Qr}=bi,{applyAtomValueWrites:Kr}=Bi,{releaseScheduledRetainablesNow:Jr}=Ki,{freshSnapshot:ea}=zr,{useCallback:ta,useContext:na,useEffect:ia,useMemo:ra,useRef:aa,useState:oa}=e;function sa(){throw zt("This component must be used inside a <RecoilRoot> component.")}const la=Object.freeze({storeID:$r(),getState:sa,replaceState:sa,getGraph:sa,subscribeToTransactions:sa,addTransactionMetadata:sa});let ca=!1;function ua(e){if(ca)throw zt("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");const t=e.getState();if(null===t.nextTree){vn("recoil_memory_managament_2020")&&vn("recoil_release_on_cascading_update_killswitch_2021")&&t.commitDepth>0&&Jr(e);const n=t.currentTree.version,i=Br();t.nextTree={...t.currentTree,version:i,stateID:i,dirtyAtoms:new Set,transactionMetadata:{}},t.graphsByVersion.set(i,qr(Dt(t.graphsByVersion.get(n))))}}const ha=e.createContext({current:la}),da=()=>na(ha),fa=e.createContext(null);function pa(e,t,n){const i=Vr(e,n,n.dirtyAtoms);for(const e of i){const i=t.nodeToComponentSubscriptions.get(e);if(i)for(const[e,[t,r]]of i)r(n)}}function ga(e){const t=e.getState(),n=t.currentTree,i=n.dirtyAtoms;if(i.size){for(const[n,r]of t.nodeTransactionSubscriptions)if(i.has(n))for(const[t,n]of r)n(e);for(const[n,i]of t.transactionSubscriptions)i(e);(!Qr().early||t.suspendedComponentResolvers.size>0)&&(pa(e,t,n),t.suspendedComponentResolvers.forEach((e=>e())),t.suspendedComponentResolvers.clear())}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function ma({setNotifyBatcherOfChange:e}){const t=da(),[,n]=oa([]);return e((()=>n({}))),ia((()=>(e((()=>n({}))),()=>{e((()=>{}))})),[e]),ia((()=>{Rn("Batcher",(()=>{!function(e){const t=e.getState();t.commitDepth++;try{const{nextTree:n}=t;if(null===n)return;t.previousTree=t.currentTree,t.currentTree=n,t.nextTree=null,ga(e),null!=t.previousTree&&t.graphsByVersion.delete(t.previousTree.version),t.previousTree=null,vn("recoil_memory_managament_2020")&&Jr(e)}finally{t.commitDepth--}}(t.current)}))})),null}let va=0;function ba({initializeState_DEPRECATED:t,initializeState:n,store_INTERNAL:i,children:r}){let a;const o=e=>{const t=a.current.graphsByVersion;if(t.has(e))return Dt(t.get(e));const n=Gr();return t.set(e,n),n},s=(e,t)=>{if(null==t){const{transactionSubscriptions:t}=d.current.getState(),n=va++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=d.current.getState();n.has(t)||n.set(t,new Map);const i=va++;return Dt(n.get(t)).set(i,e),{release:()=>{const e=n.get(t);e&&(e.delete(i),0===e.size&&n.delete(t))}}}},l=e=>{ua(d.current);for(const t of Object.keys(e))Dt(d.current.getState().nextTree).transactionMetadata[t]=e[t]},c=e=>{ua(d.current);const t=Dt(a.current.nextTree);let n;try{ca=!0,n=e(t)}finally{ca=!1}n!==t&&(a.current.nextTree=n,Qr().early&&pa(d.current,a.current,n),Dt(u.current)())},u=aa(null),h=ta((e=>{u.current=e}),[u]),d=Xr((()=>null!=i?i:{storeID:$r(),getState:()=>a.current,replaceState:c,getGraph:o,subscribeToTransactions:s,addTransactionMetadata:l}));null!=i&&(d.current=i),a=Xr((()=>null!=t?function(e,t){const n=Yr();return t({set:(t,i)=>{const r=n.currentTree,a=jr(e,r,t.key,i),o=new Set(a.keys()),s=r.nonvalidatedAtoms.clone();for(const e of o)s.delete(e);n.currentTree={...r,dirtyAtoms:Fr(r.dirtyAtoms,o),atomValues:Kr(r.atomValues,a),nonvalidatedAtoms:s}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=Ur(n.currentTree,t,e)}))}}),n}(d.current,t):null!=n?function(e){const t=ea().map(e),n=t.getStore_INTERNAL().getState();return t.retain(),n.nodeCleanupFunctions.forEach((e=>e())),n.nodeCleanupFunctions.clear(),n}(n):Yr()));const f=ra((()=>null==Zr?void 0:Zr(a,(()=>a.current.currentTree.version))),[a]);return ia((()=>{const e=d.current;for(const t of new Set(e.getState().knownAtoms))Wr(e,t,"get");return()=>{for(const t of e.getState().knownAtoms)Hr(e,t)}}),[d]),e.createElement(ha.Provider,{value:d},e.createElement(fa.Provider,{value:f},e.createElement(ma,{setNotifyBatcherOfChange:h}),r))}var xa={RecoilRoot:function(t){const{override:n,...i}=t,r=da();return!1===n&&r.current!==la?t.children:e.createElement(ba,i)},useStoreRef:da,useRecoilMutableSource:function(){const e=na(fa);return e},useRecoilStoreID:function(){return da().current.storeID},notifyComponents_FOR_TESTING:pa,sendEndOfBatchNotifications_FOR_TESTING:ga};const{useEffect:ya,useRef:wa}=e;var ka=function(e){const t=wa();return ya((()=>{t.current=e})),t.current};const{useStoreRef:Sa}=xa,{SUSPENSE_TIMEOUT_MS:Aa}=Ki,{updateRetainCount:Ca}=Ki,{RetentionZone:Ea}=Qn,{useEffect:Ta,useRef:Pa}=e,{isSSR:La}=sr;var Ra=function(e){if(vn("recoil_memory_managament_2020"))return function(e){const t=(Array.isArray(e)?e:[e]).map((e=>e instanceof Ea?e:e.key)),n=Sa();Ta((()=>{if(!vn("recoil_memory_managament_2020"))return;const e=n.current;if(i.current&&!La)window.clearTimeout(i.current),i.current=null;else for(const n of t)Ca(e,n,1);return()=>{for(const n of t)Ca(e,n,-1)}}),[n,...t]);const i=Pa(),r=ka(t);if(!(La||void 0!==r&&function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}(r,t))){const e=n.current;for(const n of t)Ca(e,n,1);if(r)for(const t of r)Ca(e,t,-1);i.current&&window.clearTimeout(i.current),i.current=window.setTimeout((()=>{i.current=null;for(const n of t)Ca(e,n,-1)}),Aa)}}(e)};const{useRef:Ma}=e;var Ia=function(){return Ma(),"<component name not available>"};const{batchUpdates:Oa}=or,{DEFAULT_VALUE:_a}=Ln,{reactMode:Na,useMutableSource:za,useSyncExternalStore:Fa}=bi,{useRecoilMutableSource:Da,useStoreRef:Xa}=xa,{isRecoilValue:Ba}=pn,{AbstractRecoilValue:Ya,getRecoilValueAsLoadable:Ha,setRecoilValue:Va,setUnvalidatedRecoilValue:Wa,subscribeToRecoilValue:ja}=Bi,{useCallback:Ua,useEffect:Ga,useMemo:qa,useRef:$a,useState:Za}=e,{setByAddingToSet:Qa}=Kn;function Ka(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:zt(`Invalid value of loadable atom "${t.key}"`)}function Ja(e){const t=Xa(),n=Ia(),i=Ua((()=>{var n;const i=t.current,r=i.getState(),a=Na().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return{loadable:Ha(i,e,a),key:e.key}}),[t,e]),r=Ua((e=>{let t;return()=>{var n,i;const r=e();return null!==(n=t)&&void 0!==n&&n.loadable.is(r.loadable)&&(null===(i=t)||void 0===i?void 0:i.key)===r.key?t:(t=r,r)}}),[]),a=qa((()=>r(i)),[i,r]),o=Ua((i=>{const r=t.current;return ja(r,e,i,n).release}),[t,e,n]);return Fa(o,a,a).loadable}function eo(e){const t=Xa(),n=Ua((()=>{var n;const i=t.current,r=i.getState(),a=Na().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return Ha(i,e,a)}),[t,e]),i=Ua((()=>n()),[n]),r=Ia(),a=Ua(((i,a)=>{const o=t.current;return ja(o,e,(()=>{if(!vn("recoil_suppress_rerender_in_callback"))return a();const e=n();l.current.is(e)||a(),l.current=e}),r).release}),[t,e,r,n]),o=Da();if(null==o)throw zt("Recoil hooks must be used in components contained within a <RecoilRoot> component.");const s=za(o,i,a),l=$a(s);return Ga((()=>{l.current=s})),s}function to(e){const t=Xa(),n=Ia(),i=Ua((()=>{var n;const i=t.current,r=i.getState(),a=Na().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return Ha(i,e,a)}),[t,e]),r=Ua((()=>({loadable:i(),key:e.key})),[i,e.key]),a=Ua((e=>{const t=r();return e.loadable.is(t.loadable)&&e.key===t.key?e:t}),[r]);Ga((()=>{const i=ja(t.current,e,(e=>{s(a)}),n);return s(a),i.release}),[n,e,t,a]);const[o,s]=Za(r);return o.key!==e.key?r().loadable:o.loadable}function no(e){const t=Xa(),[,n]=Za([]),i=Ia(),r=Ua((()=>{var n;const i=t.current,r=i.getState(),a=Na().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return Ha(i,e,a)}),[t,e]),a=r(),o=$a(a);return Ga((()=>{o.current=a})),Ga((()=>{const a=t.current,s=a.getState(),l=ja(a,e,(e=>{var t;if(!vn("recoil_suppress_rerender_in_callback"))return n([]);const i=r();null!==(t=o.current)&&void 0!==t&&t.is(i)||n(i),o.current=i}),i);if(s.nextTree)a.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{o.current=null,n([])}));else{var c;if(!vn("recoil_suppress_rerender_in_callback"))return n([]);const e=r();null!==(c=o.current)&&void 0!==c&&c.is(e)||n(e),o.current=e}return l.release}),[i,r,e,t]),a}function io(e){return vn("recoil_memory_managament_2020")&&Ra(e),{TRANSITION_SUPPORT:to,SYNC_EXTERNAL_STORE:Ja,MUTABLE_SOURCE:eo,LEGACY:no}[Na().mode](e)}function ro(e){const t=Xa();return Ka(io(e),e,t)}function ao(e){const t=Xa();return Ua((n=>{Va(t.current,e,n)}),[t,e])}function oo(e){return vn("recoil_memory_managament_2020")&&Ra(e),to(e)}function so(e){const t=Xa();return Ka(oo(e),e,t)}var lo={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useRecoilInterface:function(){const e=Ia(),t=Xa(),[,n]=Za([]),i=$a(new Set);i.current=new Set;const r=$a(new Set),a=$a(new Map),o=Ua((e=>{const t=a.current.get(e);t&&(t.release(),a.current.delete(e))}),[a]),s=Ua(((e,t)=>{a.current.has(t)&&n([])}),[]);return Ga((()=>{const n=t.current;Fn(i.current,r.current).forEach((t=>{if(a.current.has(t))return;const i=ja(n,new Ya(t),(e=>s(e,t)),e);a.current.set(t,i),n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{s(n.getState(),t)})):s(n.getState(),t)})),Fn(r.current,i.current).forEach((e=>{o(e)})),r.current=i.current})),Ga((()=>{const n=a.current;return Fn(i.current,new Set(n.keys())).forEach((i=>{const r=ja(t.current,new Ya(i),(e=>s(e,i)),e);n.set(i,r)})),()=>n.forEach(((e,t)=>o(t)))}),[e,t,o,s]),qa((()=>{function e(e){return n=>{Va(t.current,e,n)}}function n(e){var n;i.current.has(e.key)||(i.current=Qa(i.current,e.key));const r=t.current.getState();return Ha(t.current,e,Na().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree)}function r(e){return Ka(n(e),e,t)}return{getRecoilValue:r,getRecoilValueLoadable:n,getRecoilState:function(t){return[r(t),e(t)]},getRecoilStateLoadable:function(t){return[n(t),e(t)]},getSetRecoilState:e,getResetRecoilState:function(e){return()=>Va(t.current,e,_a)}}}),[i,t])},useRecoilState:function(e){return[ro(e),ao(e)]},useRecoilStateLoadable:function(e){return[io(e),ao(e)]},useRecoilValue:ro,useRecoilValueLoadable:io,useResetRecoilState:function(e){const t=Xa();return Ua((()=>{Va(t.current,e,_a)}),[t,e])},useSetRecoilState:ao,useSetUnvalidatedAtomValues:function(){const e=Xa();return(t,n={})=>{Oa((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>Wa(e.current,new Ya(n),t)))}))}},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:oo,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:so,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:function(e){return[so(e),ao(e)]}};const{batchUpdates:co}=or,{DEFAULT_VALUE:uo,getNode:ho,nodes:fo}=Ln,{useStoreRef:po}=xa,{AbstractRecoilValue:go,setRecoilValueLoadable:mo}=Bi,{SUSPENSE_TIMEOUT_MS:vo}=Ki,{cloneSnapshot:bo}=zr,{useCallback:xo,useEffect:yo,useRef:wo,useState:ko}=e,{isSSR:So}=sr;function Ao(e){const t=po();yo((()=>t.current.subscribeToTransactions(e).release),[e,t])}function Co(e){const t=e.atomValues.toMap(),n=Dn(function(e,t){const n=new Map;for(const[i,r]of e)t(r,i)&&n.set(i,r);return n}(t,((e,t)=>{const n=ho(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const i=e[n].keys();let r;for(;!(r=i.next()).done;)t.set(r.value,e[n].get(r.value))}return t}(e.nonvalidatedAtoms.toMap(),n)}function Eo(e,t){var n;const i=e.getState(),r=null!==(n=i.nextTree)&&void 0!==n?n:i.currentTree,a=t.getStore_INTERNAL().getState().currentTree;co((()=>{const n=new Set;for(const e of[r.atomValues.keys(),a.atomValues.keys()])for(const t of e){var i,o;(null===(i=r.atomValues.get(t))||void 0===i?void 0:i.contents)!==(null===(o=a.atomValues.get(t))||void 0===o?void 0:o.contents)&&ho(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{mo(e,new go(t),a.atomValues.has(t)?Dt(a.atomValues.get(t)):uo)})),e.replaceState((e=>({...e,stateID:t.getID()})))}))}var To={useRecoilSnapshot:function(){const e=po(),[t,n]=ko((()=>bo(e.current))),i=ka(t),r=wo(),a=wo();var o;(Ao(xo((e=>n(bo(e))),[])),yo((()=>{const e=t.retain();var n;return r.current&&!So&&(window.clearTimeout(r.current),r.current=null,null===(n=a.current)||void 0===n||n.call(a),a.current=null),e}),[t]),i===t||So)||(r.current&&(window.clearTimeout(r.current),r.current=null,null===(o=a.current)||void 0===o||o.call(a),a.current=null),a.current=t.retain(),r.current=window.setTimeout((()=>{var e;r.current=null,null===(e=a.current)||void 0===e||e.call(a),a.current=null}),vo));return t},gotoSnapshot:Eo,useGotoRecoilSnapshot:function(){const e=po();return xo((t=>Eo(e.current,t)),[e])},useRecoilTransactionObserver:function(e){Ao(xo((t=>{const n=bo(t,"current"),i=bo(t,"previous");e({snapshot:n,previousSnapshot:i})}),[e]))},useTransactionObservation_DEPRECATED:function(e){Ao(xo((t=>{let n=t.getState().previousTree;const i=t.getState().currentTree;n||(n=t.getState().currentTree);const r=Co(i),a=Co(n),o=Dn(fo,(e=>{var t,n,i,r;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(i=null===(r=e.persistence_UNSTABLE)||void 0===r?void 0:r.backButton)&&void 0!==i&&i}}})),s=function(e,t){const n=new Set;for(const i of e)t(i)&&n.add(i);return n}(i.dirtyAtoms,(e=>r.has(e)||a.has(e)));e({atomValues:r,previousAtomValues:a,atomInfo:o,modifiedAtoms:s,transactionMetadata:{...i.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:Ao};const{peekNodeInfo:Po}=pi,{useStoreRef:Lo}=xa;const{reactMode:Ro}=bi,{RecoilRoot:Mo,useStoreRef:Io}=xa,{useMemo:Oo}=e;const{loadableWithValue:_o}=an,{initializeNode:No}=pi,{DEFAULT_VALUE:zo,getNode:Fo}=Ln,{copyTreeState:Do,getRecoilValueAsLoadable:Xo,invalidateDownstreams:Bo,writeLoadableToTreeState:Yo}=Bi;function Ho(e){return"atom"===Fo(e.key).nodeType}class Vo{constructor(e,t){Xt(this,"_store",void 0),Xt(this,"_treeState",void 0),Xt(this,"_changes",void 0),Xt(this,"get",(e=>{if(this._changes.has(e.key))return this._changes.get(e.key);if(!Ho(e))throw zt("Reading selectors within atomicUpdate is not supported");const t=Xo(this._store,e,this._treeState);if("hasValue"===t.state)return t.contents;throw"hasError"===t.state?t.contents:zt(`Expected Recoil atom ${e.key} to have a value, but it is in a loading state.`)})),Xt(this,"set",((e,t)=>{if(!Ho(e))throw zt("Setting selectors within atomicUpdate is not supported");if("function"==typeof t){const n=this.get(e);this._changes.set(e.key,t(n))}else No(this._store,e.key,"set"),this._changes.set(e.key,t)})),Xt(this,"reset",(e=>{this.set(e,zo)})),this._store=e,this._treeState=t,this._changes=new Map}newTreeState_INTERNAL(){if(0===this._changes.size)return this._treeState;const e=Do(this._treeState);for(const[t,n]of this._changes)Yo(e,t,_o(n));return Bo(this._store,e),e}}var Wo=function(e){return t=>{e.replaceState((n=>{const i=new Vo(e,n);return t(i),i.newTreeState_INTERNAL()}))}},jo=Object.freeze({__proto__:null,atomicUpdater:Wo}),Uo=function(e,t){if(!e)throw new Error(t)};const{atomicUpdater:Go}=jo,{batchUpdates:qo}=or,{DEFAULT_VALUE:$o}=Ln,{useStoreRef:Zo}=xa,{refreshRecoilValue:Qo,setRecoilValue:Ko}=Bi,{Snapshot:Jo,cloneSnapshot:es}=zr,{gotoSnapshot:ts}=To,{useCallback:ns}=e;class is{}const rs=new is;function as(e,t,n,i){let r=rs;return qo((()=>{const a="useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";if("function"!=typeof t)throw zt(a);const o=ei({...null!=i?i:{},set:(t,n)=>Ko(e,t,n),reset:t=>Ko(e,t,$o),refresh:t=>Qo(e,t),gotoSnapshot:t=>ts(e,t),transact_UNSTABLE:t=>Go(e)(t)},{snapshot:()=>es(e)}),s=t(o);if("function"!=typeof s)throw zt(a);r=s(...n)})),r instanceof is&&Uo(!1),r}var os={recoilCallback:as,useRecoilCallback:function(e,t){const n=Zo();return ns(((...t)=>as(n.current,e,t)),null!=t?[...t,n]:void 0)}};const{useStoreRef:ss}=xa,{refreshRecoilValue:ls}=Bi,{useCallback:cs}=e;const{atomicUpdater:us}=jo,{useStoreRef:hs}=xa,{useMemo:ds}=e;const fs=(e,t,n)=>{var i;if(null==e)return;if(null==n||null===(i=n.onNodeVisit)||void 0===i||i.call(n,e),"leaf"===e.type)return e;const r=t(e.nodeKey);return fs(e.branches.get(r),t,n)},ps=(e,t,n,i,r,a,o)=>{var s;let l;if(null==e)if(0===t.length)l={type:"leaf",value:i,parent:n,branchKey:r};else{const[e,...s]=t,[c,u]=e;l={type:"branch",nodeKey:c,parent:n,branches:new Map,branchKey:r},l.branches.set(u,ps(null,s,l,i,u,a,o))}else if(l=e,t.length){const[n,...r]=t,[s,c]=n;if("branch"!==e.type||e.nodeKey!==s)return o(),l;e.branches.set(c,ps(e.branches.get(c),r,e,i,c,a,o))}return null==a||null===(s=a.onNodeVisit)||void 0===s||s.call(a,l),l},gs=(e,t,n)=>n?(0===t.branches.size&&n.branches.delete(t.branchKey),gs(e,n,n.parent)):e===t,ms=e=>"leaf"===e.type?1:Array.from(e.branches.values()).reduce(((e,t)=>e+ms(t)),0);var vs=class{constructor(e){var t,n,i;Xt(this,"_numLeafs",void 0),Xt(this,"_root",void 0),Xt(this,"_onHit",void 0),Xt(this,"_onSet",void 0),Xt(this,"_mapNodeValue",void 0),this._numLeafs=0,this._root=null,this._onHit=null!==(t=null==e?void 0:e.onHit)&&void 0!==t?t:()=>{},this._onSet=null!==(n=null==e?void 0:e.onSet)&&void 0!==n?n:()=>{},this._mapNodeValue=null!==(i=null==e?void 0:e.mapNodeValue)&&void 0!==i?i:e=>e}size(){return this._numLeafs}root(){return this._root}get(e,t){var n;return null===(n=this.getLeafNode(e,t))||void 0===n?void 0:n.value}getLeafNode(e,t){return fs(this.root(),(t=>this._mapNodeValue(e(t))),{onNodeVisit:e=>{null==t||t.onNodeVisit(e),"leaf"===e.type&&this._onHit(e)}})}set(e,t,n){let i,r=null;const a=()=>{r=ps(this.root(),e.map((([e,t])=>[e,this._mapNodeValue(t)])),null,t,null,{onNodeVisit:e=>{null==n||n.onNodeVisit(e),"leaf"===e.type&&(i=e)}},(()=>{this.clear(),a()}))};a(),this.root()||(this._root=r),this._numLeafs++,this._onSet(Dt(i))}delete(e){if(!this.root())return!1;const t=Dt(this.root());return!!((e,t,n)=>n?(n.branches.delete(t.branchKey),gs(e,n,n.parent)):e===t)(t,e,e.parent)&&(e===t||"branch"===t.type&&!t.branches.size?(this._root=null,this._numLeafs=0,!0):(this._numLeafs-=ms(e),!0))}clear(){this._numLeafs=0,this._root=null}},bs=Object.freeze({__proto__:null,TreeCache:vs}),xs=class{constructor(e){var t;Xt(this,"_maxSize",void 0),Xt(this,"_size",void 0),Xt(this,"_head",void 0),Xt(this,"_tail",void 0),Xt(this,"_map",void 0),Xt(this,"_keyMapper",void 0),this._maxSize=e.maxSize,this._size=0,this._head=null,this._tail=null,this._map=new Map,this._keyMapper=null!==(t=e.mapKey)&&void 0!==t?t:e=>e}head(){return this._head}tail(){return this._tail}size(){return this._size}maxSize(){return this._maxSize}has(e){return this._map.has(this._keyMapper(e))}get(e){const t=this._keyMapper(e),n=this._map.get(t);if(n)return this.set(e,n.value),n.value}set(e,t){const n=this._keyMapper(e);this._map.get(n)&&this.delete(e);const i=this.head(),r={key:e,right:i,left:null,value:t};i?i.left=r:this._tail=r,this._map.set(n,r),this._head=r,this._size++,this._maybeDeleteLRU()}_maybeDeleteLRU(){this.size()>this.maxSize()&&this.deleteLru()}deleteLru(){const e=this.tail();e&&this.delete(e.key)}delete(e){const t=this._keyMapper(e);if(!this._size||!this._map.has(t))return;const n=Dt(this._map.get(t)),i=n.right,r=n.left;i&&(i.left=n.left),r&&(r.right=n.right),n===this.head()&&(this._head=i),n===this.tail()&&(this._tail=r),this._map.delete(t),this._size--}clear(){this._size=0,this._head=null,this._tail=null,this._map=new Map}},ys=Object.freeze({__proto__:null,LRUCache:xs});const{LRUCache:ws}=ys,{TreeCache:ks}=bs;var Ss=function(e,t=(e=>e)){const n=new ws({maxSize:e}),i=new ks({mapNodeValue:t,onHit:e=>{n.set(e,!0)},onSet:t=>{const r=n.tail();n.set(t,!0),r&&i.size()>e&&i.delete(r.key)}});return i};function As(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw zt("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var i;if("object"!=typeof e)return null!==(i=JSON.stringify(e))&&void 0!==i?i:"";if(Ft(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>As(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return As(e.toJSON(n),t,n);if(e instanceof Map){const i={};for(const[n,r]of e)i["string"==typeof n?n:As(n,t)]=r;return As(i,t,n)}return e instanceof Set?As(Array.from(e).sort(((e,n)=>As(e,t).localeCompare(As(n,t)))),t,n):void 0!==Symbol&&null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?As(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${As(n,t)}:${As(e[n],t,n)}`)).join(",")}}`}var Cs=function(e,t={allowFunctions:!1}){return As(e,t)};const{TreeCache:Es}=bs,Ts={equality:"reference",eviction:"keep-all",maxSize:1/0};const{isReactNative:Ps,isSSR:Ls}=sr;const{loadableWithError:Rs,loadableWithPromise:Ms,loadableWithValue:Is}=an,{getNodeLoadable:Os,peekNodeLoadable:_s,setNodeValue:Ns}=pi,{saveDependencyMapToStore:zs}=Bn,{DEFAULT_VALUE:Fs,RecoilValueNotReady:Ds,getConfigDeletionHandler:Xs,getNode:Bs,registerNode:Ys}=Ln,{isRecoilValue:Hs}=pn,{markRecoilValueModified:Vs}=Bi,{retainedByOptionWithDefault:Ws}=Ki,{recoilCallback:js}=os,{startPerfBlock:Us}={startPerfBlock:function(e){return()=>null}};class Gs{}const qs=new Gs,$s=[],Zs=new Map,Qs=(()=>{let e=0;return()=>e++})();var Ks=function(e){let t=null;const{key:n,get:i,cachePolicy_UNSTABLE:r}=e,a=null!=e.set?e.set:void 0,o=new Set,s=function({equality:e=Ts.equality,eviction:t=Ts.eviction,maxSize:n=Ts.maxSize}=Ts){const i=function(e){switch(e){case"reference":return e=>e;case"value":return e=>Cs(e)}throw zt(`Unrecognized equality policy ${e}`)}(e),r=function(e,t,n){switch(e){case"keep-all":return new Es({mapNodeValue:n});case"lru":return Ss(Dt(t),n);case"most-recent":return Ss(1,n)}throw zt(`Unrecognized eviction policy ${e}`)}(t,n,i);return r}(null!=r?r:{equality:"reference",eviction:"keep-all"}),l=Ws(e.retainedBy_UNSTABLE),c=new Map;let u=0;function h(){return!vn("recoil_memory_managament_2020")||u>0}function d(e){return e.getState().knownSelectors.add(n),u++,()=>{u--}}function f(){return void 0!==Xs(n)&&!h()}function p(e,t,n,i,r){P(t,i,r),x(e,t,new Set(r.keys()),n),g(e,n)}function g(e,n){T(e,n)&&E(e);const i=Zs.get(n);if(void 0!==i){for(const e of i)Vs(e,Dt(t));Zs.delete(n)}}function m(e,t){let n=Zs.get(t);null==n&&Zs.set(t,n=new Set),n.add(e)}function v(e,t,n){const i=e.getState().knownSelectors.has(n);if(i&&t.atomValues.has(n))return Dt(t.atomValues.get(n));const r=Os(e,t,n);return"loading"!==r.state&&i&&t.atomValues.set(n,r),r}function b(e,t,n,i,r,a){return t.then((i=>{if(!h())throw E(e),qs;null!=a.loadingDepKey&&a.loadingDepPromise===t?n.atomValues.set(a.loadingDepKey,Is(i)):e.getState().knownSelectors.forEach((e=>{n.atomValues.delete(e)}));const o=w(e,n);if(o&&"loading"!==o.state){if((T(e,r)||null==A(e))&&g(e,r),"hasValue"===o.state)return o.contents;throw o.contents}if(!T(e,r)){const e=k(n);if("loading"===(null==e?void 0:e.latestLoadable.state))return e.latestLoadable.contents}const[s,l]=y(e,n,r);if(C(e,r,l),"loading"!==s.state&&p(e,n,r,s,l),"hasError"===s.state)throw s.contents;return s.contents})).catch((t=>{if(t instanceof Gs)throw qs;if(!h())throw E(e),qs;const a=Rs(t);throw p(e,n,r,a,i),t}))}function x(e,t,i,r){var a,s,l,c,u,h,d;(T(e,r)||t.version===(null===(a=e.getState())||void 0===a||null===(s=a.currentTree)||void 0===s?void 0:s.version)||t.version===(null===(l=e.getState())||void 0===l||null===(c=l.nextTree)||void 0===c?void 0:c.version))&&(zs(new Map([[n,i]]),e,null!==(u=null===(h=e.getState())||void 0===h||null===(d=h.nextTree)||void 0===d?void 0:d.version)&&void 0!==u?u:e.getState().currentTree.version),i.forEach((e=>o.add(e))))}function y(e,r,a){const o=Us(n);let s=!0;const l=()=>{o(),s=!1};let c,u,d=!1;const f={loadingDepKey:null,loadingDepPromise:null},g=new Map,m=new Set;function y(t){const{key:n}=t;!function(e,t,n,i,r){n.add(i),x(e,t,n,r)}(e,r,m,n,a);const i=v(e,r,n);switch(g.set(n,i),i.state){case"hasValue":return i.contents;case"hasError":throw i.contents;case"loading":throw f.loadingDepKey=n,f.loadingDepPromise=i.contents,i.contents}throw zt("Invalid Loadable state")}x(e,r,m,a);const w=n=>(...i)=>{if(s)throw zt("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");return null==t&&Uo(!1),js(e,n,i,{node:t})};try{c=i({get:y,getCallback:w}),c=Hs(c)?y(c):c,Ft(c)?c=function(e,t,n,i,r,a){return t.then((t=>{if(!h())throw E(e),qs;const a=Is(t);return p(e,n,r,a,i),t})).catch((t=>{if(!h())throw E(e),qs;if(C(e,r,i),Ft(t))return b(e,t,n,i,r,a);const o=Rs(t);throw p(e,n,r,o,i),t}))}(e,c,r,g,a,f).finally(l):l()}catch(t){c=t,Ft(c)?c=b(e,c,r,g,a,f).finally(l):(d=!0,l())}return u=d?Rs(c):Ft(c)?Ms(c):Is(c),[u,g]}function w(e,t){const i=new Set,r=A(e);let a;try{a=s.get((n=>("string"!=typeof n&&Uo(!1),v(e,t,n).contents)),{onNodeVisit:e=>{"branch"===e.type&&e.nodeKey!==n&&i.add(e.nodeKey)}})}catch(e){throw zt(`Problem with cache lookup for selector "${n}": ${e.message}`)}return a&&x(e,t,i,null==r?void 0:r.latestExecutionId),a}function k(e){var t;const[,n]=null!==(t=Array.from(c.entries()).find((([t,n])=>null!=n.latestLoadable&&null!=n.latestExecutionId&&!function(e,t){var n,i;const r=A(e),a=null!==(n=null==r?void 0:r.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,o=Array((null!==(i=S.get(t.version))&&void 0!==i?i:new Map).entries()),s=S.has(t.version)&&o.length===a.size&&o.every((([e,t])=>a.get(e)===t));return null!=a&&t.version!==(null==r?void 0:r.stateVersion)&&!s&&(S.set(t.version,new Map(a)),Array.from(a).some((([n,i])=>v(e,t,n).contents!==i.contents)))}(t,e))))&&void 0!==t?t:[];return n}const S=new Map;function A(e){return c.get(e)}function C(e,t,n){if(T(e,t)){const t=A(e);null!=t&&(t.depValuesDiscoveredSoFarDuringAsyncWork=n)}}function E(e){c.delete(e)}function T(e,t){var n;return t===(null===(n=A(e))||void 0===n?void 0:n.latestExecutionId)}function P(e,t,i){e.atomValues.set(n,t);try{s.set(function(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}(i),t)}catch(e){throw zt(`Problem with setting cache for selector "${n}": ${e.message}`)}}function L(e,t){return s.get((n=>{var i;return"string"!=typeof n&&Uo(!1),null===(i=_s(e,t,n))||void 0===i?void 0:i.contents}))}function R(e,t){return function(i){if($s.includes(n)){const e=`Recoil selector has circular dependencies: ${$s.slice($s.indexOf(n)).join(" → ")}`;return Rs(zt(e))}$s.push(n);try{return function(e,t){const n=w(e,t);if(null!=n)return E(e),n;const i=k(t);var r;return null!=i?("loading"===(null===(r=i.latestLoadable)||void 0===r?void 0:r.state)&&m(e,Dt(i.latestExecutionId)),Dt(i.latestLoadable)):function(e,t){const n=Qs(),[i,r]=y(e,t,n);return"loading"===i.state?(function(e,t,n,i,r){c.set(e,{depValuesDiscoveredSoFarDuringAsyncWork:i,latestExecutionId:t,latestLoadable:n,stateVersion:r.version})}(e,n,i,r,t),m(e,n)):(E(e),P(t,i,r)),i}(e,t)}(e,t)}finally{$s.pop()}}()}function M(e){e.atomValues.delete(n)}function I(e,n){null==t&&Uo(!1);for(const t of o){var i;const r=Bs(t);null===(i=r.clearCache)||void 0===i||i.call(r,e,n)}o.clear(),M(n),s.clear(),Vs(e,t)}if(null!=a){const i=(e,t,n)=>{let i=!1;const r=new Map;function o({key:n}){if(i)throw zt("Recoil: Async selector sets are not currently supported.");const r=v(e,t,n);if("hasValue"===r.state)return r.contents;throw"loading"===r.state?new Ds(n):r.contents}function s(n,a){if(i)throw zt("Recoil: Async selector sets are not currently supported.");const s="function"==typeof a?a(o(n)):a;Ns(e,t,n.key,s).forEach(((e,t)=>r.set(t,e)))}const l=a({set:s,get:o,reset:function(e){s(e,Fs)}},n);if(void 0!==l)throw Ft(l)?zt("Recoil: Async selector sets are not currently supported."):zt("Recoil: selector set should be a void function.");return i=!0,r};return t=Ys({key:n,nodeType:"selector",peek:L,get:R,set:i,init:d,invalidate:M,clearCache:I,shouldDeleteConfigOnRelease:f,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:l})}return t=Ys({key:n,nodeType:"selector",peek:L,get:R,init:d,invalidate:M,clearCache:I,shouldDeleteConfigOnRelease:f,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:l})};const{loadableWithError:Js,loadableWithPromise:el,loadableWithValue:tl}=an,{peekNodeInfo:nl}=pi,{DEFAULT_VALUE:il,DefaultValue:rl,getConfigDeletionHandler:al,registerNode:ol,setConfigDeletionHandler:sl}=Ln,{isRecoilValue:ll}=pn,{getRecoilValueAsLoadable:cl,markRecoilValueModified:ul,setRecoilValue:hl,setRecoilValueLoadable:dl}=Bi,{retainedByOptionWithDefault:fl}=Ki;var pl=function e(t){const{default:n,...i}=t;return ll(n)?function(t){const n=e({...t,default:il,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof rl?e:Dt(t.persistence_UNSTABLE).validator(e,il)},effects:t.effects,effects_UNSTABLE:t.effects_UNSTABLE}),i=Ks({key:`${t.key}__withFallback`,get:({get:e})=>{const i=e(n);return i instanceof rl?t.default:i},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability});return sl(i.key,al(t.key)),i}({...i,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e,i=fl(e.retainedBy_UNSTABLE);let r,a=0,o=Ft(e.default)?el(e.default.then((e=>(o=tl(e),e))).catch((e=>{throw o=Js(e),e}))):tl(e.default);e.default;const s=new Map;function l(e,n){var i,a;return null!==(i=null!==(a=n.atomValues.get(t))&&void 0!==a?a:r)&&void 0!==i?i:o}const c=ol({key:t,nodeType:"atom",peek:l,get:function(e,i){if(i.atomValues.has(t))return Dt(i.atomValues.get(t));if(i.nonvalidatedAtoms.has(t)){if(null!=r)return r;if(null==n)return o;const e=i.nonvalidatedAtoms.get(t),a=n.validator(e,il),s=a instanceof rl?o:tl(a);return r=s,r}return o},set:function(e,n,i){if(n.atomValues.has(t)){const e=Dt(n.atomValues.get(t));if("hasValue"===e.state&&i===e.contents)return new Map}else if(!n.nonvalidatedAtoms.has(t)&&i instanceof rl)return new Map;return r=void 0,(new Map).set(t,tl(i))},init:function(n,i,r){var u;if(a++,n.getState().knownAtoms.add(t),"loading"===o.state){const e=()=>{var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||ul(n,c)};o.contents.finally(e)}const h=null!==(u=e.effects)&&void 0!==u?u:e.effects_UNSTABLE;if(null!=h){let e=!0,a=il,u=!1,p=null;function g(r){if(e&&r.key===t){const e=a;return e instanceof rl?l(0,i):Ft(e)?el(e.then((e=>e instanceof rl?o.toPromise():e))):tl(e)}return cl(n,r)}function m(e){return g(e).toPromise()}function v(i){var r;const o=nl(n,null!==(r=n.getState().nextTree)&&void 0!==r?r:n.getState().currentTree,i.key);return!e||i.key!==t||a instanceof rl?o:{...o,isSet:!0,loadable:g(i)}}const b=t=>i=>{if(e){const e=g(c),n="hasValue"===e.state?e.contents:il;a="function"==typeof i?i(n):i,Ft(a)&&(a=a.then((e=>(p={effect:t,value:e},e))))}else{if(Ft(i))throw zt("Setting atoms to async values is not implemented.");"function"!=typeof i&&(p={effect:t,value:i}),hl(n,c,"function"==typeof i?e=>{const n=i(e);return p={effect:t,value:n},n}:i)}},x=e=>()=>b(e)(il),y=e=>i=>{var r;const{release:a}=n.subscribeToTransactions((n=>{var r;let{currentTree:a,previousTree:s}=n.getState();s||(s=a);const l=null!==(r=a.atomValues.get(t))&&void 0!==r?r:o;if("hasValue"===l.state){var c,u,h,d;const n=l.contents,r=null!==(c=s.atomValues.get(t))&&void 0!==c?c:o,f="hasValue"===r.state?r.contents:il;(null===(u=p)||void 0===u?void 0:u.effect)!==e||(null===(h=p)||void 0===h?void 0:h.value)!==n?i(n,f,!a.atomValues.has(t)):(null===(d=p)||void 0===d?void 0:d.effect)===e&&(p=null)}}),t);s.set(n,[...null!==(r=s.get(n))&&void 0!==r?r:[],a])};for(const e of h)try{const t=e({node:c,storeID:n.storeID,trigger:r,setSelf:b(e),resetSelf:x(e),onSet:y(e),getPromise:m,getLoadable:g,getInfo_UNSTABLE:v});var d;null!=t&&s.set(n,[...null!==(d=s.get(n))&&void 0!==d?d:[],t])}catch(e){a=e,u=!0}if(e=!1,!(a instanceof rl)){var f;const e=a,r=u?Js(a):Ft(e)?el(function(e,n){const i=n.then((n=>{var r,a;return(null===(a=(null!==(r=e.getState().nextTree)&&void 0!==r?r:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===i&&hl(e,c,n),n})).catch((n=>{var r,a;throw(null===(a=(null!==(r=e.getState().nextTree)&&void 0!==r?r:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===i&&dl(e,c,Js(n)),n}));return i}(n,e)):tl(e);i.atomValues.set(t,r),null===(f=n.getState().nextTree)||void 0===f||f.atomValues.set(t,r)}}return()=>{var e;a--,null===(e=s.get(n))||void 0===e||e.forEach((e=>e())),s.delete(n)}},invalidate:function(){r=void 0},shouldDeleteConfigOnRelease:function(){return void 0!==al(t)&&a<=0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0,retainedBy:i});return c}({...i,default:n})},gl=class{constructor(e){var t;Xt(this,"_map",void 0),Xt(this,"_keyMapper",void 0),this._map=new Map,this._keyMapper=null!==(t=null==e?void 0:e.mapKey)&&void 0!==t?t:e=>e}size(){return this._map.size}has(e){return this._map.has(this._keyMapper(e))}get(e){return this._map.get(this._keyMapper(e))}set(e,t){this._map.set(this._keyMapper(e),t)}delete(e){this._map.delete(this._keyMapper(e))}clear(){this._map.clear()}},ml=Object.freeze({__proto__:null,MapCache:gl});const{LRUCache:vl}=ys,{MapCache:bl}=ml,xl={equality:"reference",eviction:"none",maxSize:1/0};var yl=function({equality:e=xl.equality,eviction:t=xl.eviction,maxSize:n=xl.maxSize}=xl){const i=function(e){switch(e){case"reference":return e=>e;case"value":return e=>Cs(e)}throw zt(`Unrecognized equality policy ${e}`)}(e),r=function(e,t,n){switch(e){case"keep-all":return new bl({mapKey:n});case"lru":return new vl({mapKey:n,maxSize:Dt(t)});case"most-recent":return new vl({mapKey:n,maxSize:1})}throw zt(`Unrecognized eviction policy ${e}`)}(t,n,i);return r};const{setConfigDeletionHandler:wl}=Ln;const{setConfigDeletionHandler:kl}=Ln;let Sl=0;var Al=function(e){var t,n;const i=yl({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n;const r=i.get(t);if(null!=r)return r;const a=`${e.key}__selectorFamily/${null!==(n=Cs(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${Sl++}`,o=n=>e.get(t)(n),s=e.cachePolicy_UNSTABLE,l="function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE;let c;if(null!=e.set){const n=e.set;c=Ks({key:a,get:o,set:(e,i)=>n(t)(e,i),cachePolicy_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:l})}else c=Ks({key:a,get:o,cachePolicy_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:l});return i.set(t,c),kl(c.key,(()=>{i.delete(t)})),c}};const Cl=Al({key:"__constant",get:e=>()=>e,cachePolicyForParams_UNSTABLE:{equality:"reference"}});const El=Al({key:"__error",get:e=>()=>{throw zt(e)},cachePolicyForParams_UNSTABLE:{equality:"reference"}});const{loadableWithError:Tl,loadableWithPromise:Pl,loadableWithValue:Ll}=an;function Rl(e,t){const n=Array(t.length).fill(void 0),i=Array(t.length).fill(void 0);for(const[r,a]of t.entries())try{n[r]=e(a)}catch(e){i[r]=e}return[n,i]}function Ml(e){return null!=e&&!Ft(e)}function Il(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function Ol(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,i)=>({...e,[n]:t[i]})),{})}function _l(e,t,n){return Ol(e,n.map(((e,n)=>null==e?Ll(t[n]):Ft(e)?Pl(e):Tl(e))))}var Nl={waitForNone:Al({key:"__waitForNone",get:e=>({get:t})=>{const n=Il(e),[i,r]=Rl(t,n);return _l(e,i,r)},dangerouslyAllowMutability:!0}),waitForAny:Al({key:"__waitForAny",get:e=>({get:t})=>{const n=Il(e),[i,r]=Rl(t,n);return r.some((e=>!Ft(e)))?_l(e,i,r):new Promise((t=>{for(const[n,a]of r.entries())Ft(a)&&a.then((a=>{i[n]=a,r[n]=void 0,t(_l(e,i,r))})).catch((a=>{r[n]=a,t(_l(e,i,r))}))}))},dangerouslyAllowMutability:!0}),waitForAll:Al({key:"__waitForAll",get:e=>({get:t})=>{const n=Il(e),[i,r]=Rl(t,n);if(r.every((e=>null==e)))return Ol(e,i);const a=r.find(Ml);if(null!=a)throw a;return Promise.all(r).then((t=>{return Ol(e,(n=i,t.map(((e,t)=>void 0===e?n[t]:e))));var n}))},dangerouslyAllowMutability:!0}),waitForAllSettled:Al({key:"__waitForAllSettled",get:e=>({get:t})=>{const n=Il(e),[i,r]=Rl(t,n);return r.every((e=>!Ft(e)))?_l(e,i,r):Promise.all(r.map(((e,t)=>Ft(e)?e.then((e=>{i[t]=e,r[t]=void 0})).catch((e=>{i[t]=void 0,r[t]=e})):null))).then((()=>_l(e,i,r)))},dangerouslyAllowMutability:!0}),noWait:Al({key:"__noWait",get:e=>({get:t})=>{try{return Ll(t(e))}catch(e){return Ft(e)?Pl(e):Tl(e)}},dangerouslyAllowMutability:!0})};const{RecoilLoadable:zl}=an,{DefaultValue:Fl}=Ln,{RecoilRoot:Dl,useRecoilStoreID:Xl}=xa,{isRecoilValue:Bl}=pn,{retentionZone:Yl}=Qn,{freshSnapshot:Hl}=zr,{useRecoilState:Vl,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:Wl,useRecoilStateLoadable:jl,useRecoilValue:Ul,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Gl,useRecoilValueLoadable:ql,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:$l,useResetRecoilState:Zl,useSetRecoilState:Ql}=lo,{useGotoRecoilSnapshot:Kl,useRecoilSnapshot:Jl,useRecoilTransactionObserver:ec}=To,{useRecoilCallback:tc}=os,{noWait:nc,waitForAll:ic,waitForAllSettled:rc,waitForAny:ac,waitForNone:oc}=Nl;var sc,lc,cc,uc={DefaultValue:Fl,isRecoilValue:Bl,RecoilLoadable:zl,RecoilRoot:Dl,useRecoilStoreID:Xl,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){"MUTABLE_SOURCE"===Ro().mode&&console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");const t=Io().current;return Oo((()=>function({children:n}){return e.createElement(Mo,{store_INTERNAL:t},n)}),[t])},atom:pl,selector:Ks,atomFamily:function(e){var t,n;const i=yl({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n,r;const a=i.get(t);if(null!=a)return a;const{cachePolicyForParams_UNSTABLE:o,...s}=e,l=pl({...s,key:`${e.key}__${null!==(n=Cs(t))&&void 0!==n?n:"void"}`,default:"function"==typeof e.default?e.default(t):e.default,retainedBy_UNSTABLE:"function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE,effects:"function"==typeof e.effects?e.effects(t):"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(t):null!==(r=e.effects)&&void 0!==r?r:e.effects_UNSTABLE});return i.set(t,l),wl(l.key,(()=>{i.delete(t)})),l}},selectorFamily:Al,constSelector:function(e){return Cl(e)},errorSelector:function(e){return El(e)},readOnlySelector:function(e){return e},noWait:nc,waitForNone:oc,waitForAny:ac,waitForAll:ic,waitForAllSettled:rc,useRecoilValue:Ul,useRecoilValueLoadable:ql,useRecoilState:Vl,useRecoilStateLoadable:jl,useSetRecoilState:Ql,useResetRecoilState:Zl,useGetRecoilValueInfo_UNSTABLE:function(){const e=Lo();return({key:t})=>Po(e.current,e.current.getState().currentTree,t)},useRecoilRefresher_UNSTABLE:function(e){const t=ss();return cs((()=>{const n=t.current;ls(n,e)}),[e,t])},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:$l,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Gl,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:Wl,useRecoilCallback:tc,useRecoilTransaction_UNSTABLE:function(e,t){const n=hs();return ds((()=>(...t)=>{us(n.current)((n=>{e(n)(...t)}))}),null!=t?[...t,n]:void 0)},useGotoRecoilSnapshot:Kl,useRecoilSnapshot:Jl,useRecoilTransactionObserver_UNSTABLE:ec,snapshot_UNSTABLE:Hl,useRetain:Ra,retentionZone:Yl},hc=uc.RecoilRoot,dc=uc.useRecoilValue,fc=uc.useSetRecoilState,pc=(0,uc.atom)({key:"isDark",default:!0}),gc=Nt.aside(sc||(lc=["\n  position: fixed;\n  right: 2%;\n  bottom: 2%;\n\n  & .side-button {\n    font-size: 1.8rem;\n    background-color: ",";\n    border-radius: 100%;\n    padding: 0.4em;\n    box-shadow: 2px 2px 20px ",";\n\n    &:first-child {\n      margin-right: 0.6em;\n    }\n  }\n\n  & .move-top-button {\n    animation-name: appear;\n    animation-duration: 0.6s;\n    animation-fill-mode: forwards;\n  }\n"],cc||(cc=lc.slice(0)),sc=Object.freeze(Object.defineProperties(lc,{raw:{value:Object.freeze(cc)}}))),(function(e){return e.theme.textColor}),(function(e){return e.theme.textColor}));function mc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}const vc=function(){var t,n,i=dc(pc),r=fc(pc),a=(t=(0,e.useState)(!0),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,a=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(i=n.next()).done)&&(a.push(i.value),!t||a.length!==t);o=!0);}catch(e){s=!0,r=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw r}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return mc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mc(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[0],s=a[1],l=F().pathname,c=(0,e.useCallback)((function(){return window.scrollTo({top:0,left:0,behavior:"smooth"})}),[]),u=(0,e.useCallback)((function(){return s(0===document.documentElement.scrollTop)}),[]);(0,e.useEffect)((function(){return window.addEventListener("scroll",u),function(){return window.removeEventListener("scroll",u)}}),[]);var h=(0,e.useCallback)((function(){return r((function(e){return!e}))}),[]);return e.createElement(gc,null,o||e.createElement("button",{type:"button",className:"side-button move-top-button",onClick:c},"👆"),"/"!==l&&e.createElement("button",{type:"button",className:"side-button"},e.createElement(ne,{to:"/"},"🔙")),e.createElement("button",{type:"button",className:"side-button",onClick:h},i?"☀️":"🌙"))};var bc,xc=Nt.main(bc||(bc=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  @media (min-width: 486px) {\n    width: 486px;\n    margin: auto;\n  }\n"])));const yc=function(t){var n=t.children;return e.createElement(xc,null,n,e.createElement(vc,null))};var wc,kc,Sc,Ac,Cc=n(767),Ec="https://api.coinpaprika.com/v1",Tc=function(){return fetch("".concat(Ec,"/coins")).then((function(e){return e.json()}))},Pc=n(697),Lc=n.n(Pc),Rc=n(524),Mc=n.n(Rc),Ic=n(590),Oc=n.n(Ic),_c=n(418),Nc=n.n(_c),zc="bodyAttributes",Fc="htmlAttributes",Dc={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},Xc=(Object.keys(Dc).map((function(e){return Dc[e]})),"charset"),Bc="cssText",Yc="href",Hc="innerHTML",Vc="itemprop",Wc="rel",jc={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},Uc=Object.keys(jc).reduce((function(e,t){return e[jc[t]]=t,e}),{}),Gc=[Dc.NOSCRIPT,Dc.SCRIPT,Dc.STYLE],qc="data-react-helmet",$c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zc=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Qc=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),Kc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},Jc=function(e,t){var n={};for(var i in e)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n},eu=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},tu=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!1===t?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},nu=function(e){var t=su(e,Dc.TITLE),n=su(e,"titleTemplate");if(n&&t)return n.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var i=su(e,"defaultTitle");return t||i||void 0},iu=function(e){return su(e,"onChangeClientState")||function(){}},ru=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return Kc({},e,t)}),{})},au=function(e,t){return t.filter((function(e){return void 0!==e[Dc.BASE]})).map((function(e){return e[Dc.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var i=Object.keys(n),r=0;r<i.length;r++){var a=i[r].toLowerCase();if(-1!==e.indexOf(a)&&n[a])return t.concat(n)}return t}),[])},ou=function(e,t,n){var i={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&du("Helmet: "+e+' should be of type "Array". Instead found type "'+$c(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var r={};n.filter((function(e){for(var n=void 0,a=Object.keys(e),o=0;o<a.length;o++){var s=a[o],l=s.toLowerCase();-1===t.indexOf(l)||n===Wc&&"canonical"===e[n].toLowerCase()||l===Wc&&"stylesheet"===e[l].toLowerCase()||(n=l),-1===t.indexOf(s)||s!==Hc&&s!==Bc&&s!==Vc||(n=s)}if(!n||!e[n])return!1;var c=e[n].toLowerCase();return i[n]||(i[n]={}),r[n]||(r[n]={}),!i[n][c]&&(r[n][c]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var a=Object.keys(r),o=0;o<a.length;o++){var s=a[o],l=Nc()({},i[s],r[s]);i[s]=l}return e}),[]).reverse()},su=function(e,t){for(var n=e.length-1;n>=0;n--){var i=e[n];if(i.hasOwnProperty(t))return i[t]}return null},lu=(wc=Date.now(),function(e){var t=Date.now();t-wc>16?(wc=t,e(t)):setTimeout((function(){lu(e)}),0)}),cu=function(e){return clearTimeout(e)},uu="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||lu:n.g.requestAnimationFrame||lu,hu="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||cu:n.g.cancelAnimationFrame||cu,du=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},fu=null,pu=function(e,t){var n=e.baseTag,i=e.bodyAttributes,r=e.htmlAttributes,a=e.linkTags,o=e.metaTags,s=e.noscriptTags,l=e.onChangeClientState,c=e.scriptTags,u=e.styleTags,h=e.title,d=e.titleAttributes;vu(Dc.BODY,i),vu(Dc.HTML,r),mu(h,d);var f={baseTag:bu(Dc.BASE,n),linkTags:bu(Dc.LINK,a),metaTags:bu(Dc.META,o),noscriptTags:bu(Dc.NOSCRIPT,s),scriptTags:bu(Dc.SCRIPT,c),styleTags:bu(Dc.STYLE,u)},p={},g={};Object.keys(f).forEach((function(e){var t=f[e],n=t.newTags,i=t.oldTags;n.length&&(p[e]=n),i.length&&(g[e]=f[e].oldTags)})),t&&t(),l(e,p,g)},gu=function(e){return Array.isArray(e)?e.join(""):e},mu=function(e,t){void 0!==e&&document.title!==e&&(document.title=gu(e)),vu(Dc.TITLE,t)},vu=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var i=n.getAttribute(qc),r=i?i.split(","):[],a=[].concat(r),o=Object.keys(t),s=0;s<o.length;s++){var l=o[s],c=t[l]||"";n.getAttribute(l)!==c&&n.setAttribute(l,c),-1===r.indexOf(l)&&r.push(l);var u=a.indexOf(l);-1!==u&&a.splice(u,1)}for(var h=a.length-1;h>=0;h--)n.removeAttribute(a[h]);r.length===a.length?n.removeAttribute(qc):n.getAttribute(qc)!==o.join(",")&&n.setAttribute(qc,o.join(","))}},bu=function(e,t){var n=document.head||document.querySelector(Dc.HEAD),i=n.querySelectorAll(e+"[data-react-helmet]"),r=Array.prototype.slice.call(i),a=[],o=void 0;return t&&t.length&&t.forEach((function(t){var n=document.createElement(e);for(var i in t)if(t.hasOwnProperty(i))if(i===Hc)n.innerHTML=t.innerHTML;else if(i===Bc)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var s=void 0===t[i]?"":t[i];n.setAttribute(i,s)}n.setAttribute(qc,"true"),r.some((function(e,t){return o=t,n.isEqualNode(e)}))?r.splice(o,1):a.push(n)})),r.forEach((function(e){return e.parentNode.removeChild(e)})),a.forEach((function(e){return n.appendChild(e)})),{oldTags:r,newTags:a}},xu=function(e){return Object.keys(e).reduce((function(t,n){var i=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+i:i}),"")},yu=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[jc[n]||n]=e[n],t}),t)},wu=function(t,n,i){switch(t){case Dc.TITLE:return{toComponent:function(){return t=n.title,i=n.titleAttributes,(r={key:t})[qc]=!0,a=yu(i,r),[e.createElement(Dc.TITLE,a,t)];var t,i,r,a},toString:function(){return function(e,t,n,i){var r=xu(n),a=gu(t);return r?"<"+e+' data-react-helmet="true" '+r+">"+tu(a,i)+"</"+e+">":"<"+e+' data-react-helmet="true">'+tu(a,i)+"</"+e+">"}(t,n.title,n.titleAttributes,i)}};case zc:case Fc:return{toComponent:function(){return yu(n)},toString:function(){return xu(n)}};default:return{toComponent:function(){return function(t,n){return n.map((function(n,i){var r,a=((r={key:i})[qc]=!0,r);return Object.keys(n).forEach((function(e){var t=jc[e]||e;if(t===Hc||t===Bc){var i=n.innerHTML||n.cssText;a.dangerouslySetInnerHTML={__html:i}}else a[t]=n[e]})),e.createElement(t,a)}))}(t,n)},toString:function(){return function(e,t,n){return t.reduce((function(t,i){var r=Object.keys(i).filter((function(e){return!(e===Hc||e===Bc)})).reduce((function(e,t){var r=void 0===i[t]?t:t+'="'+tu(i[t],n)+'"';return e?e+" "+r:r}),""),a=i.innerHTML||i.cssText||"",o=-1===Gc.indexOf(e);return t+"<"+e+' data-react-helmet="true" '+r+(o?"/>":">"+a+"</"+e+">")}),"")}(t,n,i)}}}},ku=function(e){var t=e.baseTag,n=e.bodyAttributes,i=e.encode,r=e.htmlAttributes,a=e.linkTags,o=e.metaTags,s=e.noscriptTags,l=e.scriptTags,c=e.styleTags,u=e.title,h=void 0===u?"":u,d=e.titleAttributes;return{base:wu(Dc.BASE,t,i),bodyAttributes:wu(zc,n,i),htmlAttributes:wu(Fc,r,i),link:wu(Dc.LINK,a,i),meta:wu(Dc.META,o,i),noscript:wu(Dc.NOSCRIPT,s,i),script:wu(Dc.SCRIPT,l,i),style:wu(Dc.STYLE,c,i),title:wu(Dc.TITLE,{title:h,titleAttributes:d},i)}},Su=Mc()((function(e){return{baseTag:au([Yc,"target"],e),bodyAttributes:ru(zc,e),defer:su(e,"defer"),encode:su(e,"encodeSpecialCharacters"),htmlAttributes:ru(Fc,e),linkTags:ou(Dc.LINK,[Wc,Yc],e),metaTags:ou(Dc.META,["name",Xc,"http-equiv","property",Vc],e),noscriptTags:ou(Dc.NOSCRIPT,[Hc],e),onChangeClientState:iu(e),scriptTags:ou(Dc.SCRIPT,["src",Hc],e),styleTags:ou(Dc.STYLE,[Bc],e),title:nu(e),titleAttributes:ru("titleAttributes",e)}}),(function(e){fu&&hu(fu),e.defer?fu=uu((function(){pu(e,(function(){fu=null}))})):(pu(e),fu=null)}),ku)((function(){return null})),Au=(kc=Su,Ac=Sc=function(t){function n(){return Zc(this,n),eu(this,t.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,t),n.prototype.shouldComponentUpdate=function(e){return!Oc()(this.props,e)},n.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case Dc.SCRIPT:case Dc.NOSCRIPT:return{innerHTML:t};case Dc.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},n.prototype.flattenArrayTypeChildren=function(e){var t,n=e.child,i=e.arrayTypeChildren,r=e.newChildProps,a=e.nestedChildren;return Kc({},i,((t={})[n.type]=[].concat(i[n.type]||[],[Kc({},r,this.mapNestedChildrenToProps(n,a))]),t))},n.prototype.mapObjectTypeChildren=function(e){var t,n,i=e.child,r=e.newProps,a=e.newChildProps,o=e.nestedChildren;switch(i.type){case Dc.TITLE:return Kc({},r,((t={})[i.type]=o,t.titleAttributes=Kc({},a),t));case Dc.BODY:return Kc({},r,{bodyAttributes:Kc({},a)});case Dc.HTML:return Kc({},r,{htmlAttributes:Kc({},a)})}return Kc({},r,((n={})[i.type]=Kc({},a),n))},n.prototype.mapArrayTypeChildrenToProps=function(e,t){var n=Kc({},t);return Object.keys(e).forEach((function(t){var i;n=Kc({},n,((i={})[t]=e[t],i))})),n},n.prototype.warnOnInvalidChildren=function(e,t){return!0},n.prototype.mapChildrenToProps=function(t,n){var i=this,r={};return e.Children.forEach(t,(function(e){if(e&&e.props){var t=e.props,a=t.children,o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[Uc[n]||n]=e[n],t}),t)}(Jc(t,["children"]));switch(i.warnOnInvalidChildren(e,a),e.type){case Dc.LINK:case Dc.META:case Dc.NOSCRIPT:case Dc.SCRIPT:case Dc.STYLE:r=i.flattenArrayTypeChildren({child:e,arrayTypeChildren:r,newChildProps:o,nestedChildren:a});break;default:n=i.mapObjectTypeChildren({child:e,newProps:n,newChildProps:o,nestedChildren:a})}}})),n=this.mapArrayTypeChildrenToProps(r,n)},n.prototype.render=function(){var t=this.props,n=t.children,i=Jc(t,["children"]),r=Kc({},i);return n&&(r=this.mapChildrenToProps(n,r)),e.createElement(kc,r)},Qc(n,null,[{key:"canUseDOM",set:function(e){kc.canUseDOM=e}}]),n}(e.Component),Sc.propTypes={base:Lc().object,bodyAttributes:Lc().object,children:Lc().oneOfType([Lc().arrayOf(Lc().node),Lc().node]),defaultTitle:Lc().string,defer:Lc().bool,encodeSpecialCharacters:Lc().bool,htmlAttributes:Lc().object,link:Lc().arrayOf(Lc().object),meta:Lc().arrayOf(Lc().object),noscript:Lc().arrayOf(Lc().object),onChangeClientState:Lc().func,script:Lc().arrayOf(Lc().object),style:Lc().arrayOf(Lc().object),title:Lc().string,titleAttributes:Lc().object,titleTemplate:Lc().string},Sc.defaultProps={defer:!0,encodeSpecialCharacters:!0},Sc.peek=kc.peek,Sc.rewind=function(){var e=kc.rewind();return e||(e=ku({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},Ac);Au.renderStatic=Au.rewind;var Cu=function(t){var n=t.title,i=t.description,r=t.image,a=F().pathname;return e.createElement(Au,null,e.createElement("title",null,n),e.createElement("meta",{name:"keyword",content:"blecoin, React.js, 코인클론사이트"}),e.createElement("meta",{name:"description",content:i}),e.createElement("meta",{name:"author",content:"1-blue"}),e.createElement("meta",{property:"og:url",content:"https://1-blue.github.io/react-clone-project".concat(a)}),e.createElement("meta",{property:"og:title",content:"blecoin"}),e.createElement("meta",{property:"og:description",content:i}),e.createElement("meta",{property:"og:image",content:r}),e.createElement("meta",{property:"og:type",content:"website"}),e.createElement("meta",{property:"og:site_name",content:"blecoin"}),e.createElement("meta",{property:"og:locale",content:"ko_KR"}),e.createElement("meta",{property:"og:image:width",content:"486"}),e.createElement("meta",{property:"og:image:height",content:"600"}))};Cu.defaultProps={title:"Blecoin",description:"코인클론사이트 by 노마드코더, React.js",image:"https://cryptoicon-api.vercel.app/api/icon/btc"};const Eu=Cu;var Tu,Pu=Nt.h2(Tu||(Tu=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  display: flex;\n  justify-content: center;\n\n  font-size: 2rem;\n  font-weight: bold;\n  color: ",";\n  text-align: center;\n  margin: 1em 0;\n"])),(function(e){return e.theme.mainColor}));const Lu=function(t){var n=t.children;return e.createElement(Pu,null,n)};var Ru,Mu=Nt(ne)(Ru||(Ru=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  display: flex;\n  align-items: center;\n\n  padding: 0.6em 1.2em;\n  margin-bottom: 1em;\n\n  background-color: ",";\n  color: ",";\n  border-radius: 0.6em;\n\n  transition: all 0.4s;\n\n  &:hover {\n    transform: scale(1.1, 1.1);\n    background-color: ",";\n    color: ",";\n  }\n\n  /* 코인의 대표 이미지 */\n  & .coin-image {\n    width: 40px;\n    height: 40px;\n    margin-right: 0.6em;\n  }\n\n  /* 코인 데이터들 */\n  & .coin-data {\n    flex: 1;\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    /* 코인 이름 */\n    & .coin-name {\n      font-size: 1.2rem;\n      font-weight: 600;\n    }\n\n    /* 코인 가격 */\n    /* 코인 가격 변동률 ( 하루기준 ) */\n    & .coin-price,\n    .coin-change-rate {\n      color: ",";\n    }\n  }\n"])),(function(e){return e.theme.textColor}),(function(e){return e.theme.bgColor}),(function(e){return e.theme.accentColor}),(function(e){return e.theme.textColor}),(function(e){var t=e.$upperLimit,n=e.theme;return t?n.upperColor:n.lowerColor}));const Iu=function(t){var n=t.id,i=t.symbol,r=t.name,a=t.price,o=t.market_cap_change_24h;return e.createElement("li",null,e.createElement(Mu,{to:"/".concat(n),$upperLimit:o>0},e.createElement("img",{src:"https://cryptoicon-api.vercel.app/api/icon/".concat(i.toLocaleLowerCase()),alt:"coin-image",className:"coin-image"}),e.createElement("div",{className:"coin-data"},e.createElement("span",{className:"coin-name"},r),e.createElement("span",{className:"coin-price"},"$ ",a.toFixed(6)),e.createElement("span",{className:"coin-change-rate"},o,"%"))))};var Ou,_u=Nt.section(Ou||(Ou=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.4);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & .coin-spinner-image {\n    animation-name: spinner;\n    animation-duration: 1.4s;\n    animation-iteration-count: infinite;\n  }\n"])));const Nu=function(){return e.createElement(_u,null,e.createElement("img",{src:"https://cryptoicon-api.vercel.app/api/icon/btc",alt:"coin-spinner-image",className:"coin-spinner-image"}))},zu=function(){var t=(0,Cc.useQuery)("all-coins",Tc),n=t.isLoading,i=t.data,r=(0,Cc.useQuery)("all-tickers",(function(){return fetch("".concat(Ec,"/tickers")).then((function(e){return e.json()}))})),a=r.isLoading,o=r.data;return e.createElement(e.Fragment,null,e.createElement(Eu,{title:"Blecoin | HOME"}),e.createElement(Lu,null,"🪙Coin🪙"),n||a?e.createElement(Nu,null):e.createElement("ul",null,null==i?void 0:i.slice(0,100).map((function(t,n){return e.createElement(Iu,{key:t.id,id:t.id,symbol:t.symbol,name:t.name,price:null==o?void 0:o[n].quotes.USD.price,market_cap_change_24h:null==o?void 0:o[n].quotes.USD.market_cap_change_24h})}))))};var Fu=n(229);const Du=function(t){var n=t.coinId,i=(dc(pc),(0,Cc.useQuery)([n,"ohlcv"],(function(){return function(e){var t=Math.floor(Date.now()/1e3),n=t-2592e3;return fetch("".concat(Ec,"/coins/").concat(e,"/ohlcv/historical?start=").concat(n,"&end=").concat(t)).then((function(e){return e.json()}))}(n)}))),r=i.isLoading,a=i.data;return r?e.createElement(Nu,null):e.createElement(e.Fragment,null,e.createElement(Fu.Z,{type:"candlestick",series:[{data:null==a?void 0:a.map((function(e){return{x:e.time_open,y:[Math.round(e.open),Math.round(e.high),Math.round(e.low),Math.round(e.close)]}}))}],options:{chart:{width:486,height:486,toolbar:{show:!1},foreColor:"#FDEBF7"},theme:{mode:"dark"},plotOptions:{candlestick:{colors:{upward:"#1C6DD0",downward:"#DA1212"}}},title:{text:"한달 최고가, 최저가, 시작가, 종가",align:"center",offsetY:26,style:{fontSize:"1.5rem",fontWeight:"bold",color:"#FDEBF7",fontFamily:"Yeon Sung, cursive"}},xaxis:{type:"datetime"},yaxis:{labels:{formatter:function(e){return"$ "+e}}}}}))};var Xu,Bu,Yu;function Hu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Vu=Nt.p(Xu||(Xu=Hu(["\n  padding: 0.4em 1em;\n  margin-bottom: 1.4em;\n"]))),Wu=Nt.ul(Bu||(Bu=Hu(["\n  display: flex;\n  justify-content: space-around;\n  padding: 0.8em 0;\n  background-color: rgba(20, 20, 20, 0.6);\n  border-radius: 1em;\n  margin-bottom: 1.4em;\n"]))),ju=Nt.li(Yu||(Yu=Hu(["\n  text-align: center;\n\n  & .overview-title {\n    font-size: 0.8rem;\n    margin-bottom: 0.4em;\n  }\n  & .overview-contents {\n    font-size: 1rem;\n    font-weight: bold;\n  }\n"])));const Uu=function(){var t,n,i,r,a,o,s,l=function(){let{matches:t}=(0,e.useContext)(M),n=t[t.length-1];return n?n.params:{}}().coinId,c=(0,e.useMemo)((function(){return{width:"40px",height:"40px",marginRight:"0.4em"}}),[]),u=(0,Cc.useQuery)([l,"coin"],(function(){return function(e){return fetch("".concat(Ec,"/coins/").concat(e)).then((function(e){return e.json()}))}(l)})),h=u.isLoading,d=u.data,f=(0,Cc.useQuery)([l,"ticker"],(function(){return function(e){return fetch("".concat(Ec,"/tickers/").concat(e)).then((function(e){return e.json()}))}(l)})),p=f.isLoading,g=f.data;return h||p?e.createElement(Nu,null):e.createElement(e.Fragment,null,e.createElement(Eu,{title:"Blecoin | ".concat(null==d?void 0:d.name.toLocaleLowerCase()),description:"코인 클론 사이트 | ".concat(null==d?void 0:d.description),image:"https://cryptoicon-api.vercel.app/api/icon/".concat(d.symbol.toLocaleLowerCase())}),e.createElement(Lu,null,e.createElement("img",{src:"https://cryptoicon-api.vercel.app/api/icon/".concat(d.symbol.toLocaleLowerCase()),alt:"coin-image",style:c}),e.createElement("span",null,d.name)),e.createElement(Du,{coinId:l}),e.createElement(Wu,null,e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"Rank"),e.createElement("span",{className:"overview-contents"},null==d?void 0:d.rank)),e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"Symbol"),e.createElement("span",{className:"overview-contents"},null==d?void 0:d.symbol)),e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"start date"),e.createElement("span",{className:"overview-contents"},(t=new Date(null==d?void 0:d.started_at),n="YYYY-MM-DD",i=new Date(t),r=[],a="",o=n.match(/[^YMDhms]/g),s=0,r.push(function(e,t){var n=t.match(/YY{2}/g);switch(null==n?void 0:n.length){case 1:return e.getFullYear();case 2:return+String(e.getFullYear()).slice(2);default:return}}(i,n)),r.push(function(e,t){var n=null,i=t.match(/M/g);if(i)return n=e.getMonth()+1,2===(null==i?void 0:i.length)&&n<10&&(n="0".concat(n)),n}(i,n)),r.push(function(e,t){var n=null,i=t.match(/D/g);if(i)return n=e.getDate(),2===(null==i?void 0:i.length)&&n<10&&(n="0".concat(n)),n}(i,n)),r.push(function(e,t){var n=null,i=t.match(/h/g);if(i)return n=e.getHours(),2===(null==i?void 0:i.length)&&n<10&&(n="0".concat(n)),n}(i,n)),r.push(function(e,t){var n=null,i=t.match(/m/g);if(i)return n=e.getMinutes(),2===(null==i?void 0:i.length)&&n<10&&(n="0".concat(n)),n}(i,n)),r.push(function(e,t){var n=null,i=t.match(/m/g);if(i)return n=e.getSeconds(),2===(null==i?void 0:i.length)&&n<10&&(n="0".concat(n)),n}(i,n)),r.forEach((function(e){if(e){var t=o[s]?o[s]:"";s+=1,a+="".concat(e).concat(t)}})),a)," "))),e.createElement(Vu,null,null==d?void 0:d.description),e.createElement(Wu,null,e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"유통량"),e.createElement("span",{className:"overview-contents"},null==g?void 0:g.circulating_supply)),e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"전체공급량"),e.createElement("span",{className:"overview-contents"},null==g?void 0:g.total_supply," ")),e.createElement(ju,null,e.createElement("h6",{className:"overview-title"},"최대공급량"),e.createElement("span",{className:"overview-contents"},null==g?void 0:g.max_supply))))},Gu=function(){return e.createElement(e.Fragment,null,e.createElement("h1",null,"404 - Not Found"))};var qu,$u=function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var a=vt.apply(void 0,[t].concat(i)),o="sc-global-"+kt(JSON.stringify(a)),s=new _t(a,o);function l(t){var n=at(),i=ot(),r=(0,e.useContext)(Pt),a=(0,e.useRef)(n.allocateGSInstance(o)).current;return n.server&&c(a,t,n,r,i),(0,e.useLayoutEffect)((function(){if(!n.server)return c(a,t,n,r,i),function(){return s.removeStyles(a,n)}}),[a,t,n,r,i]),null}function c(e,t,n,i,r){if(s.isStatic)s.renderStyles(e,Se,n,r);else{var a=de({},t,{theme:bt(t,i,l.defaultProps)});s.renderStyles(e,a,n,r)}}return e.memo(l)}(qu||(qu=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  body {\n    background-color: ",";\n    color: ",";\n    font-family: 'Noto Sans', sans-serif;\n  }\n"])),(function(e){return e.theme.bgColor}),(function(e){return e.theme.textColor}));const Zu=function(){return e.createElement(te,{basename:"/react-clone-project"},e.createElement(yc,null,e.createElement($u,null),null,e.createElement(N,null,e.createElement(O,{path:"/",element:e.createElement(zu,null)}),e.createElement(O,{path:"/:coinId",element:e.createElement(Uu,null)}),e.createElement(O,{path:"/*",element:e.createElement(Gu,null)}))))};var Qu={bgColor:"#f5f6fa",textColor:"#2f3640",accentColor:"#516BEB",mainColor:"#8A39E1",upperColor:"#43aa05",lowerColor:"#e15241"},Ku={bgColor:"#2f3640",textColor:"#f5f6fa",accentColor:"#516BEB",mainColor:"#8A39E1",upperColor:"#43aa05",lowerColor:"#e15241"};const Ju=function(t){var n=t.children,i=dc(pc);return e.createElement(Lt,{theme:i?Ku:Qu},n)};var eh=new Cc.QueryClient;t.render(e.createElement(e.StrictMode,null,e.createElement(hc,null,e.createElement(Cc.QueryClientProvider,{client:eh},e.createElement(Ju,null,e.createElement(Zu,null))))),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,